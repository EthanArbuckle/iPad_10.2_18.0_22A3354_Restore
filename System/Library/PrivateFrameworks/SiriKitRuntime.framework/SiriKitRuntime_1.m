uint64_t ConversationMessageDispatchingBridgeBase.commandsDispatcher.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase);
}

void ConversationMessageDispatchingBridgeBase.CommandHandler.handle(_:_:executionContextInfo:reply:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  id v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a1;
  swift_unknownObjectRetain();
  if (swift_dynamicCast())
  {
    v10 = swift_dynamicCastUnknownClass();
    if (v10)
    {
      v11 = v10;
      v12 = *(uint64_t (**)())(v5 + 16);
      v13 = a2;
      v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12();
      v14(v11, a3, a4, a5);
      swift_unknownObjectRelease();

      swift_release();
    }
    else
    {
      v23 = a2;
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v36 = swift_slowAlloc();
        v37 = v36;
        *(_DWORD *)v26 = 136315650;
        v27 = objc_msgSend(v23, sel_aceId);
        if (v27)
        {
          v28 = v27;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v31 = v30;

        }
        else
        {
          v31 = 0xE800000000000000;
          v29 = 0x6449656361206F6ELL;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 12) = 2080;
        swift_getObjectType();
        v32 = _typeName(_:qualified:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 22) = 2080;
        v34 = _typeName(_:qualified:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v24, v25, "Input command %s of type %s is not of type %s", (uint8_t *)v26, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v36, -1, -1);
        MEMORY[0x1B5E44758](v26, -1, -1);
      }
      else
      {

      }
      swift_unknownObjectRelease();
    }
  }
  else
  {
    swift_unknownObjectRetain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v37 = v18;
      *(_DWORD *)v17 = 136315394;
      swift_getObjectType();
      v19 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      v21 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v15, v16, "Handler invoking object is of type %s and not of type %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v18, -1, -1);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

  }
}

void ConversationBridge.handleSiriKitPluginSignal(_:_:_:)(void *a1, uint64_t a2, void (*a3)(id, id), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  NSObject *v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  void (*v43)(id, id);
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(id, id);
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v5 = v4;
  v58 = a4;
  v8 = type metadata accessor for UUID();
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  v12 = a1;
  v57 = v11;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  v15 = os_log_type_enabled(v13, v14);
  v59 = a3;
  if (v15)
  {
    v16 = 0x3E6C696E3CLL;
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v60 = v18;
    *(_DWORD *)v17 = 136315394;
    v19 = objc_msgSend(v12, sel_bundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

    }
    else
    {
      v23 = 0xE500000000000000;
      v21 = 0x3E6C696E3CLL;
    }
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v24 = objc_msgSend(v12, sel_refId);
    if (v24)
    {
      v25 = v24;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

    }
    else
    {
      v27 = 0xE500000000000000;
    }
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v27, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v13, v14, "SiriKitPluginSignal received with bundleIdentifier: %s and refId: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    MEMORY[0x1B5E44758](v17, -1, -1);

    a3 = v59;
  }
  else
  {

  }
  objc_msgSend(v12, sel_copy, v54);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitPluginSignal);
  if (swift_dynamicCast())
  {
    v28 = (void *)v64;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 736))(&v60);
    v29 = v62;
    v30 = v63;
    __swift_project_boxed_opaque_existential_1(&v60, v62);
    v31 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 760))();
    (*(void (**)(void *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v30 + 72))(v28, v31, &protocol witness table for NonRequestExecutionBridgeDelegate, v29, v30);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    v32 = v12;
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v35 = 138412290;
      v60 = (uint64_t)v32;
      v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v36 = v32;

      _os_log_impl(&dword_1B4BE6000, v33, v34, "Successfully sent: %@", v35, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v36, -1, -1);
      MEMORY[0x1B5E44758](v35, -1, -1);
    }
    else
    {

      v33 = v32;
    }

    v43 = v59;
    if (v59)
    {
      v44 = objc_allocWithZone(MEMORY[0x1E0D87FF8]);
      swift_retain();
      v45 = objc_msgSend(v44, sel_init);
      v46 = v54;
      UUID.init()();
      v47 = UUID.uuidString.getter();
      v49 = v48;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v46, v56);
      v50 = (void *)MEMORY[0x1B5E432E8](v47, v49);
      swift_bridgeObjectRelease();
      objc_msgSend(v45, sel_setAceId_, v50);

      v51 = v45;
      v52 = -[NSObject aceId](v32, sel_aceId);
      objc_msgSend(v51, sel_setRefId_, v52);

      v53 = v51;
      v43(v51, 0);

      _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v43);
    }

  }
  else
  {
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v60 = 0x6F6E20646C756F43;
    v61 = 0xEF2079706F632074;
    v38 = objc_msgSend(v12, sel_debugDescription);
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v41 = v40;

    v42._countAndFlagsBits = v39;
    v42._object = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v12, -1, v60, v61, a3, v58);
    swift_bridgeObjectRelease();
  }
}

uint64_t ConversationBridge.nonRequestBridgePublisher.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher;
  if (*(_QWORD *)((char *)v0 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher))
  {
    v5 = *(_QWORD *)((char *)v0 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher);
  }
  else
  {
    v6 = *(_QWORD *)((char *)v0 + direct field offset for ConversationBridge.executionOutputSubmitter);
    v7 = *(void (**)(uint64_t))(*v0 + 928);
    v8 = swift_retain();
    v7(v8);
    v9 = v0[9];
    type metadata accessor for NonRequestExecutionBridgeDelegate(0);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v6;
    outlined init with take of UserID?((uint64_t)v3, v5 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId);
    *(_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_serviceHelper) = v9;
    *(_QWORD *)((char *)v0 + v4) = v5;
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v5;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendSiriKitPluginSignal(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t ConversationRuntimeClient.sendSiriKitPluginSignal(_:withBridgeDelegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, void *, uint64_t);

  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v7;
  v10[3] = v8;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = a1;
  swift_unknownObjectRetain();
  v12 = StaticString.description.getter();
  v14 = v13;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v7;
  *(_QWORD *)(v15 + 24) = v8;
  *(_QWORD *)(v15 + 32) = v9;
  *(_QWORD *)(v15 + 40) = "bridge(didReceiveSiriKitPluginSignal:from:)";
  *(_QWORD *)(v15 + 48) = 43;
  *(_BYTE *)(v15 + 56) = 2;
  *(_QWORD *)(v15 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:);
  *(_QWORD *)(v15 + 72) = v10;
  v16 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v8 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v16(v12, v14, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v15);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:)(v2, v3, v4, v5);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5TQ0_;
  return v8(a4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, _QWORD, uint64_t, uint64_t);

  if (*(_QWORD *)(v0 + 80))
  {
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v1);
    v8 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v2 + 24) + *(_QWORD *)(v2 + 24));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v3;
    *v3 = v0;
    v3[1] = specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:);
    return v8(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), v1, v2);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationHandler?);
    v6 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 168);
    v7 = *(_QWORD *)(v0 + 152);
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  id *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint32_t *p_ivar_base_size;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (id *)(v0 + 136);
  v2 = *(void **)(v0 + 136);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 136);
  p_ivar_base_size = (_DWORD *)(&ConversationTurnStateImpl.CommandHandler + 8);
  if (v7)
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v39 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = objc_msgSend(v8, sel_bundleIdentifier);
    v38 = v11;
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

    }
    else
    {
      v16 = 0xE500000000000000;
      v14 = 0x3E6C696E3CLL;
    }
    v17 = *v1;
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 2080;
    p_ivar_base_size = &ConversationTurnStateImpl.CommandHandler.ivar_base_size;
    v18 = objc_msgSend(v17, sel_refId);
    if (v18)
    {
      v19 = v18;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v21;

    }
    else
    {
      v22 = 0xE500000000000000;
      v20 = 0x3E6C696E3CLL;
    }
    v23 = *v1;
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v5, v6, "SiriKitPluginSignal received with bundleIdentifier=%s and refId=%s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v38, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

  }
  else
  {

  }
  v24 = objc_msgSend(*v1, sel_bundleIdentifier, v38);
  if (!v24)
  {
    swift_release();
LABEL_19:
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v25 = v24;
  v26 = *(void **)(v0 + 136);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;

  *(_QWORD *)(v0 + 184) = v29;
  v30 = objc_msgSend(v26, *((SEL *)p_ivar_base_size + 493));
  if (!v30)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v31 = v30;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v34 = v33;

  *(_QWORD *)(v0 + 192) = v32;
  *(_QWORD *)(v0 + 200) = v34;
  if (one-time initialization token for executor != -1)
    swift_once();
  v35 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v36 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v36;
  *v36 = v0;
  v36[1] = specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:);
  return ConversationHandlerLocator.handler(id:)(v0 + 56, v27, v29);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[17] = a1;
  v2[18] = v1;
  v3 = type metadata accessor for OSSignpostID();
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2[22] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t protocol witness for ConversationHandler.warmup(refId:) in conformance RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return RemoteFlowPluginBundleConversationHandler.warmup(refId:)(a1, a2);
}

uint64_t RemoteFlowPluginBundleConversationHandler.warmup(refId:)()
{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(v0 + 96))
    return swift_task_switch();
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 64);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136315138;
    v10 = *(_QWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Error warming up %s: Could not connect to remote conversation", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v3;
  *v3 = v0;
  v3[1] = RemoteFlowPluginBundleConversationHandler.warmup(refId:);
  return RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(0, 0, *(_QWORD *)(v0 + 72));
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[12];
  v3 = v0[6];
  v2 = v0[7];
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v5 = v1 + 16;
  v6 = v1[19];
  v7 = v1[20];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v8 = swift_allocObject();
  v0[13] = v8;
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v2;
  v11 = (uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 16)
                                                                                     + *(_QWORD *)(v7 + 16));
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[14] = v9;
  *v9 = v0;
  v9[1] = RemoteFlowPluginBundleConversationHandler.warmup(refId:);
  return v11(v0 + 15, &async function pointer to partial apply for closure #1 in RemoteConversationClient.warmup(refId:), v8, MEMORY[0x1E0DEE9C0] + 8, v6, v7);
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 64);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    v9 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Error warming up %s: Could not connect to remote conversation", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteFlowPluginBundleConversationHandler.warmup(refId:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  *(_QWORD *)(*v2 + 96) = a1;
  swift_task_dealloc();
  v4 = *(_QWORD *)(v3 + 72);
  if (v1)

  outlined destroy of UUID?(v4);
  return swift_task_switch();
}

uint64_t RemoteFlowPluginBundleConversationHandler.warmup(refId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[9] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[10] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t RemoteConversationClient.warmup(refId:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[3];
  v2 = (_QWORD *)v0[4];
  v3 = v0[2];
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v5 = v2 + 16;
  v6 = v2[19];
  v7 = v2[20];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v8 = swift_allocObject();
  v0[5] = v8;
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v1;
  v11 = (uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 16)
                                                                                     + *(_QWORD *)(v7 + 16));
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[6] = v9;
  *v9 = v0;
  v9[1] = specialized FlowExtensionConversationHandler.warmup(refId:);
  return v11(v0 + 7, &async function pointer to partial apply for closure #1 in RemoteConversationClient.warmup(refId:), v8, MEMORY[0x1E0DEE9C0] + 8, v6, v7);
}

uint64_t AceServiceInvokerImpl.prepareForAudioHandoffFailed()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t RemoteConversationClient.warmup(refId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t specialized FlowExtensionConversationHandler.warmup(refId:)()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[3];
  v2 = (_QWORD *)v0[4];
  v3 = v0[2];
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v5 = v2 + 16;
  v6 = v2[19];
  v7 = v2[20];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v8 = swift_allocObject();
  v0[5] = v8;
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v1;
  v11 = (uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 16)
                                                                                     + *(_QWORD *)(v7 + 16));
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[6] = v9;
  *v9 = v0;
  v9[1] = specialized FlowExtensionConversationHandler.warmup(refId:);
  return v11(v0 + 7, &async function pointer to partial apply for closure #1 in RemoteConversationClient.warmup(refId:), v8, MEMORY[0x1E0DEE9C0] + 8, v6, v7);
}

uint64_t partial apply for closure #1 in RemoteConversationClient.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationClient.warmup(refId:)(a1, a2, a3, v9, v8);
}

uint64_t closure #1 in RemoteConversationClient.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t ConversationBridge.handleFlowOutputCandidate(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);

  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 488);
  v13 = type metadata accessor for OS_dispatch_queue(0, a5);
  return v15(a1, a2, a3, a4, a7, 0, v13);
}

uint64_t ConversationBridge.handleFlowOutputCandidate(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ConversationBridge.handleFlowOutputCandidate(_:_:_:)(a1, a2, a3, a4, &lazy cache variable for type metadata for SARDFlowOutputCandidate, 0x1E0D88358, (uint64_t)_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo23SARDFlowOutputCandidateCSo22AFCommandExecutionInfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab40Runtime18ConversationBridgeC25handleFlowj32CandidateyySo08SARDFlowhI0C_So22lmn6CySo13op6CSg_s5q47_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA37defgH5Ccfu_Tf3npf_n);
}

uint64_t ConversationRequestAwareBridgeBase.dispatchCommandToProcessor<A>(_:executionContextInfo:reply:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  NSObject *log;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;

  v5 = v4;
  result = (*(uint64_t (**)(void))(*v4 + 480))();
  if ((result & 1) == 0)
  {
    swift_retain_n();
    v11 = a1;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      type = v13;
      v14 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24 = v22;
      *(_DWORD *)v14 = 136315394;
      v16 = v5[2];
      v15 = v5[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      v17 = objc_msgSend(v11, sel_debugDescription);
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      log = v12;
      v20 = v19;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, log, type, "%s bridge was not able to handle: %s.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v22, -1, -1);
      MEMORY[0x1B5E44758](v14, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(*v5 + 304))(v11, a2, a3, a4);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ConversationBridge.handleFlowOutputCandidate(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1496))();
}

void ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(void *a1, void *a2, void (*a3)(id, id), uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t (*v92)(void);
  unsigned __int8 v93;
  uint64_t v94;
  char v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  _BOOL4 v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(id, id);
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  id v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  id v130;
  id v131;
  id v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  id v140;
  _QWORD *v141;
  uint64_t v142;
  void *v143;
  _QWORD *v144;
  char *v145;
  id v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(id, id);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160[4];

  v5 = v4;
  v154 = a4;
  v155 = a3;
  v146 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v7);
  v151 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v153 - 8);
  v10 = MEMORY[0x1E0C80A78](v153);
  v145 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v150 = (char *)&v136 - v12;
  v13 = type metadata accessor for RequestType();
  v148 = *(_QWORD *)(v13 - 8);
  v149 = v13;
  MEMORY[0x1E0C80A78](v13);
  v147 = (char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  v17 = a1;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  v20 = os_log_type_enabled(v18, v19);
  v152 = v9;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v144 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v21 = 138412290;
    v160[0] = (uint64_t)v17;
    v22 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v23 = v144;
    *v144 = v17;

    _os_log_impl(&dword_1B4BE6000, v18, v19, "Received %@", v21, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v23, -1, -1);
    MEMORY[0x1B5E44758](v21, -1, -1);

  }
  else
  {

  }
  if (*((_BYTE *)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) == 1)
  {
    MEMORY[0x1E0C80A78](v24);
    *(&v136 - 2) = (uint64_t)v5;
    *(&v136 - 1) = (uint64_t)v17;
    v25 = objc_allocWithZone((Class)type metadata accessor for MUXFlowOutputCandidateMessage());
    v26 = MUXFlowOutputCandidateMessage.init(build:)();
    if (v26)
    {
      v27 = v26;
      __swift_project_boxed_opaque_existential_1(v5 + 3, v5[6]);
      dispatch thunk of MessagePublishing.postMessage(_:)();
    }
    else
    {
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_1B4BE6000, v27, v28, "Could not create MUXFlowOutputCandidateMessage.", v29, 2u);
        MEMORY[0x1B5E44758](v29, -1, -1);
      }
    }

  }
  v30 = objc_msgSend(v17, sel_resultCandidateId);
  if (v30)
  {
    v31 = v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    v35 = (*(uint64_t (**)(void))(*v5 + 528))();
    if (v35)
    {
      v36 = v35;
      v142 = v32;
      v143 = (void *)v34;
      swift_retain_n();
      v144 = (_QWORD *)v16;
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.debug.getter();
      v39 = os_log_type_enabled(v37, v38);
      v141 = v5;
      if (v39)
      {
        v40 = (uint8_t *)swift_slowAlloc();
        v41 = swift_slowAlloc();
        v139 = v41;
        *(_DWORD *)v40 = 136315138;
        v160[0] = v41;
        v138 = v40 + 4;
        v42 = v36 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
        swift_beginAccess();
        v43 = v147;
        v44 = v148;
        v45 = v42;
        v46 = v149;
        (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v147, v45, v149);
        v47 = RequestType.rawValue.getter();
        v140 = v17;
        v49 = v48;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v46);
        v158 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        v17 = v140;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v37, v38, "RequestType = %s", v40, 0xCu);
        v50 = v139;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v50, -1, -1);
        MEMORY[0x1B5E44758](v40, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v59 = v152;
      v58 = v153;
      v60 = (unint64_t *)(v36
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      v62 = *v60;
      v61 = (void *)v60[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v62, v61);
      v63 = v142;
      v64 = v143;
      v65 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v142, (uint64_t)v143, v62, v61);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v62, v61);
      if (v65)
      {
        v66 = (uint64_t)v151;
        (*(void (**)(void))(*(_QWORD *)v65 + 808))();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v66, 1, v58) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v66, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          v67 = Logger.logObject.getter();
          v68 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v67, v68))
          {
            v69 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v69 = 0;
            _os_log_impl(&dword_1B4BE6000, v67, v68, "Skipping logging of ServerFallback response in SELF as contextId is missing", v69, 2u);
            MEMORY[0x1B5E44758](v69, -1, -1);
          }

LABEL_37:
          v92 = *(uint64_t (**)(void))(*(_QWORD *)v65 + 376);
          v93 = v92();
          if (ResultCandidateProcessingStatus.rawValue.getter(v93) == 0x64656C65636E6163
            && v94 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v95 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_retain_n();
              v101 = Logger.logObject.getter();
              v102 = static os_log_type_t.debug.getter();
              v103 = os_log_type_enabled(v101, v102);
              v137 = v36;
              if (v103)
              {
                v104 = (uint8_t *)swift_slowAlloc();
                v105 = swift_slowAlloc();
                v158 = v105;
                *(_DWORD *)v104 = 136315138;
                v106 = *(_QWORD *)v65;
                v140 = v17;
                v107 = *(uint64_t (**)(uint64_t))(v106 + 800);
                v108 = swift_retain();
                v109 = v107(v108);
                v111 = v110;
                swift_release();
                v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v111, &v158);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                v17 = v140;
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1B4BE6000, v101, v102, "Received FlowOutputCandidate when RC state: %s", v104, 0xCu);
                swift_arrayDestroy();
                v112 = v105;
                v58 = v153;
                MEMORY[0x1B5E44758](v112, -1, -1);
                MEMORY[0x1B5E44758](v104, -1, -1);

              }
              else
              {

                v113 = swift_release_n();
              }
              v114 = v155;
              v115 = ((uint64_t (*)(uint64_t))v92)(v113);
              if (ResultCandidateProcessingStatus.rawValue.getter(v115) == 0xD000000000000018
                && v116 == 0x80000001B4EF52F0)
              {
                swift_bridgeObjectRelease();
                v117 = v152;
              }
              else
              {
                v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                v117 = v152;
                if ((v118 & 1) == 0)
                {
                  v133 = Logger.logObject.getter();
                  v134 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v133, v134))
                  {
                    v135 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v135 = 0;
                    _os_log_impl(&dword_1B4BE6000, v133, v134, "FlowOutputCandidate received for an RC with unexpected state", v135, 2u);
                    MEMORY[0x1B5E44758](v135, -1, -1);
                  }

                  specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v17, -1, 0xD000000000000013, 0x80000001B4F013B0, v114, v154);
                  goto LABEL_62;
                }
              }
              v119 = objc_msgSend(v17, sel_payload);
              if (v119)
              {
                v120 = v119;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
                v121 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              }
              else
              {
                v121 = 0;
              }
              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 408))(v121);
              (*(void (**)(id))(*(_QWORD *)v65 + 432))(objc_msgSend(v17, sel_serverContextUpdateCandidate));
              (*(void (**)(id))(*(_QWORD *)v65 + 576))(objc_msgSend(v17, sel_shouldNotMitigateAsFalseTrigger));
              v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 384))(11);
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 448))(v122) & 1) != 0)
                (*(void (**)(uint64_t))(*v141 + 1040))(v65);
              if (v114)
              {
                v123 = objc_allocWithZone(MEMORY[0x1E0D87FF8]);
                swift_retain();
                v124 = objc_msgSend(v123, sel_init);
                v125 = v145;
                UUID.init()();
                v126 = UUID.uuidString.getter();
                v128 = v127;
                (*(void (**)(char *, uint64_t))(v117 + 8))(v125, v58);
                v129 = (void *)MEMORY[0x1B5E432E8](v126, v128);
                swift_bridgeObjectRelease();
                objc_msgSend(v124, sel_setAceId_, v129);

                v130 = v124;
                v131 = objc_msgSend(v17, sel_aceId);
                objc_msgSend(v130, sel_setRefId_, v131);

                v132 = v130;
                v114(v130, 0);

                _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v114);
              }
LABEL_62:
              swift_release();
              swift_release();
              return;
            }
          }
          swift_bridgeObjectRetain();
          v96 = Logger.logObject.getter();
          v97 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v96, v97))
          {
            v98 = (uint8_t *)swift_slowAlloc();
            v99 = swift_slowAlloc();
            v137 = v36;
            v100 = v99;
            v158 = v99;
            *(_DWORD *)v98 = 136315138;
            swift_bridgeObjectRetain();
            v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, (unint64_t)v64, &v158);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B4BE6000, v96, v97, "RC ID:%s has already been canceled. Not handling FlowOutputCandidate any further.", v98, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v100, -1, -1);
            MEMORY[0x1B5E44758](v98, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(v17, -1, 0xD000000000000014, 0x80000001B4F013D0, v155);
          goto LABEL_62;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v150, v66, v58);
        v79 = *(_QWORD *)((char *)v141
                        + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
        v80 = objc_msgSend(v146, sel_requestID);
        if (v80)
        {
          v81 = v80;
          v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v84 = v83;

          v85 = objc_msgSend(v17, sel_resultCandidateId);
          if (v85)
          {
            v86 = v85;
            v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v89 = v88;

          }
          else
          {
            v87 = 0;
            v89 = 0;
          }
          v90 = v82;
          v91 = v150;
          (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v79 + 208))(v90, v84, v150, v87, v89);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v58 = v153;
          (*(void (**)(char *, uint64_t))(v59 + 8))(v91, v153);
          v64 = v143;
          v63 = v142;
          goto LABEL_37;
        }
        __break(1u);
      }
      else
      {
        v158 = 0;
        v159 = 0xE000000000000000;
        _StringGuts.grow(_:)(97);
        v70._countAndFlagsBits = 0xD000000000000043;
        v70._object = (void *)0x80000001B4F01340;
        String.append(_:)(v70);
        v71._countAndFlagsBits = v63;
        v71._object = v64;
        String.append(_:)(v71);
        swift_bridgeObjectRelease();
        v72._countAndFlagsBits = 0xD00000000000001CLL;
        v72._object = (void *)0x80000001B4F01390;
        String.append(_:)(v72);
        v74 = v158;
        v73 = v159;
        swift_bridgeObjectRetain_n();
        v75 = Logger.logObject.getter();
        v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          v77 = (uint8_t *)swift_slowAlloc();
          v78 = swift_slowAlloc();
          v158 = v78;
          *(_DWORD *)v77 = 136315138;
          swift_bridgeObjectRetain();
          v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v73, &v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B4BE6000, v75, v76, "%s", v77, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v78, -1, -1);
          MEMORY[0x1B5E44758](v77, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v17, -1, v74, v73, v155, v154);
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v55 = Logger.logObject.getter();
      v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v57 = 0;
        _os_log_impl(&dword_1B4BE6000, v55, v56, "Received FlowOutputCandidate while not in a turn. Ignoring.", v57, 2u);
        MEMORY[0x1B5E44758](v57, -1, -1);
      }

    }
  }
  else
  {
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      v54 = swift_slowAlloc();
      v160[0] = v54;
      *(_DWORD *)v53 = 136315138;
      v156 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x80000001B4F01310, v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v51, v52, "%s", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v54, -1, -1);
      MEMORY[0x1B5E44758](v53, -1, -1);
    }

    specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v17, -1, 0xD00000000000002ELL, 0x80000001B4F01310, v155, v154);
  }
}

uint64_t ResultCandidateState.serverFallbackContextId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

void ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  char *v25;
  void *v26;
  id v27;
  Class isa;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v41;
  Class v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  NSObject *v63;

  v62 = a3;
  v60 = type metadata accessor for InsightRequestSummaryLogger();
  MEMORY[0x1E0C80A78](v60);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v61 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v61);
  v59 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v52 - v17;
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A028]), sel_init);
  if (!v19)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
    v63 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1B4BE6000, v63, v36, "Failed to create ORCHSchemaORCHServerFallbackResponseReceived event", v37, 2u);
      MEMORY[0x1B5E44758](v37, -1, -1);
    }
    goto LABEL_20;
  }
  v63 = v19;
  -[NSObject setExists:](v19, sel_setExists_, 1);
  v56 = a1;
  v57 = a4;
  v20 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a1, a2, a4, a5, 1);
  if (!v20)
  {
LABEL_20:

    return;
  }
  v21 = v20;
  v55 = v14;
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A010]), sel_init);
  if (!v22)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.conversationBridge);
    v62 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1B4BE6000, v62, v39, "Failed to create ORCHSchemaORCHServerFallbackContext event", v40, 2u);
      MEMORY[0x1B5E44758](v40, -1, -1);

      return;
    }

    goto LABEL_20;
  }
  v23 = v22;
  v24 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
  v53 = a2;
  v54 = a5;
  v25 = v10;
  v26 = v21;
  v27 = v24;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v29 = objc_msgSend(v27, sel_initWithNSUUID_, isa);

  objc_msgSend(v23, sel_setContextId_, v29);
  v30 = v26;
  v31 = (uint64_t)v25;
  v32 = v54;
  v33 = v61;
  if (v54)
  {
    UUID.init(uuidString:)();
    v34 = v55;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v33) == 1)
    {
      outlined destroy of UUID?((uint64_t)v13);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v18, v13, v33);
      v41 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
      v42 = UUID._bridgeToObjectiveC()().super.isa;
      v43 = objc_msgSend(v41, sel_initWithNSUUID_, v42);

      v33 = v61;
      objc_msgSend(v23, sel_setTrpId_, v43);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v33);
    }
  }
  objc_msgSend(v23, sel_setEnded_, v63);
  objc_msgSend(v30, sel_setServerFallbackContext_, v23);
  objc_msgSend(*(id *)(v58 + 16), sel_emitMessage_, v30);
  v44 = v23;
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v45 = __swift_project_value_buffer(v60, (uint64_t)static Logger.insightRequestSummaryLogger);
  outlined init with copy of InsightRequestSummaryLogger(v45, v31);
  v46 = v55;
  v47 = v59;
  (*(void (**)(char *, NSObject *, uint64_t))(v55 + 16))(v59, v62, v33);
  v48 = v33;
  v49 = (*(unsigned __int8 *)(v46 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v50 = (char *)swift_allocObject();
  v51 = v53;
  *((_QWORD *)v50 + 2) = v56;
  *((_QWORD *)v50 + 3) = v51;
  *((_QWORD *)v50 + 4) = v57;
  *((_QWORD *)v50 + 5) = v32;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v50[v49], v47, v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  InsightRequestSummaryLogger.emitDebug(_:)(partial apply for implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:), (uint64_t)v50);

  swift_release();
  outlined destroy of InsightRequestSummaryLogger(v31);
}

uint64_t partial apply for implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)()
{
  uint64_t v0;

  type metadata accessor for UUID();
  return implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  v8 = swift_allocObject();
  v9 = v8;
  *(_OWORD *)(v8 + 16) = xmmword_1B4EE6D00;
  *(_QWORD *)(v8 + 32) = 0x614E656764697262;
  *(_QWORD *)(v8 + 40) = 0xEA0000000000656DLL;
  *(_QWORD *)(v8 + 48) = 0xD000000000000012;
  *(_QWORD *)(v8 + 56) = 0x80000001B4EF8FF0;
  *(_QWORD *)(v8 + 64) = 0xD000000000000012;
  *(_QWORD *)(v8 + 72) = 0x80000001B4EF9010;
  *(_QWORD *)(v8 + 80) = 0xD000000000000021;
  *(_QWORD *)(v8 + 88) = 0x80000001B4EF54A0;
  *(_QWORD *)(v8 + 96) = 0x4974736575716572;
  *(_QWORD *)(v8 + 104) = 0xE900000000000064;
  *(_QWORD *)(v8 + 112) = a1;
  *(_QWORD *)(v8 + 120) = a2;
  *(_QWORD *)(v8 + 128) = 0xD000000000000011;
  *(_QWORD *)(v8 + 136) = 0x80000001B4EF49F0;
  if (a4)
    v10 = a3;
  else
    v10 = 0;
  v11 = 0xE000000000000000;
  if (a4)
    v11 = a4;
  *(_QWORD *)(v8 + 144) = v10;
  *(_QWORD *)(v8 + 152) = v11;
  *(_QWORD *)(v8 + 160) = 0xD000000000000017;
  *(_QWORD *)(v8 + 168) = 0x80000001B4EF9030;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v9 + 176) = UUID.uuidString.getter();
  *(_QWORD *)(v9 + 184) = v12;
  return v9;
}

uint64_t ResultCandidateState.flowOutputList.setter(uint64_t a1)
{
  return ResultCandidateState.nlUserParses.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_flowOutputList, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
}

void ResultCandidateState.serverContextUpdateCandidate.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverContextUpdateCandidate);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t ResultCandidateState.overrideFTMAsPerServer.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_overrideFTMAsPerServer);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

unint64_t ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v3 = v2;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (void *)swift_slowAlloc();
    v19 = v10;
    *(_DWORD *)v9 = 136315138;
    v12 = a1[2];
    v11 = a1[3];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, (uint64_t *)&v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "Submitting all flowOutputs received from server for RC ID: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

  }
  else
  {

    v13 = swift_release();
  }
  result = (*(uint64_t (**)(uint64_t))(*a1 + 400))(v13);
  if (result)
  {
    v15 = result;
    if (result >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v16 = result;
      if (result)
        goto LABEL_9;
    }
    else
    {
      v16 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v16)
      {
LABEL_9:
        if (v16 < 1)
        {
          __break(1u);
          return result;
        }
        v17 = 0;
        do
        {
          if ((v15 & 0xC000000000000001) != 0)
          {
            v18 = (void *)MEMORY[0x1B5E43B94](v17, v15);
          }
          else
          {
            v18 = *(void **)(v15 + 8 * v17 + 32);
            swift_unknownObjectRetain();
          }
          ++v17;
          v19 = v18;
          closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(&v19, v3, a2, (uint64_t)a1);
          swift_unknownObjectRelease();
        }
        while (v16 != v17);
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t ResultCandidateState.flowOutputList.getter()
{
  return RequestContextData.Builder.bargeInModes.getter();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
  if (a2 >> 62)
  {
    v4 = _CocoaArrayWrapper.subscript.getter();
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      return v4;
LABEL_10:
    _StringGuts.grow(_:)(85);
    v6 = 0xD000000000000046;
    v5 = 0x80000001B4F01850;
    goto LABEL_11;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  swift_unknownObjectRetain();
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
    return v4;
  _StringGuts.grow(_:)(82);
  v5 = 0x80000001B4F01800;
  v6 = 0xD000000000000043;
LABEL_11:
  String.append(_:)(*(Swift::String *)&v6);
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x756F662074756220;
  v9._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v9);
  swift_getObjectType();
  swift_unknownObjectRelease();
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void **v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void (*v36)(void *);
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(id, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD v54[2];
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v7);
  v63 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UserID();
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RequestType();
  v56 = *(_QWORD *)(v12 - 8);
  v57 = (char *)v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = (void *)MEMORY[0x1B5E432E8](a2[10], a2[11]);
  objc_msgSend(v15, sel_setRefId_, v16);

  objc_opt_self();
  v17 = (void *)swift_dynamicCastObjCClass();
  v62 = v15;
  if (v17)
    swift_unknownObjectRetain();
  v19 = a2[9];
  v60 = a2[8];
  v18 = v60;
  v61 = v19;
  v20 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  v55 = (char *)specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(v17, 0, 0, 0, 0, 0, 0, 0, 0, 0, v18, v19);

  v21 = v67 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  v22 = v67;
  swift_beginAccess();
  v23 = v56;
  v24 = v14;
  v25 = v14;
  v26 = v57;
  (*(void (**)(char *, uint64_t, char *))(v56 + 16))(v25, v21, v57);
  v27 = (void **)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
  swift_beginAccess();
  v28 = *v27;
  v29 = a4 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  v30 = v58;
  v31 = *(void (**)(char *))(v58 + 16);
  v54[1] = v29;
  v32 = v59;
  v31(v11);
  type metadata accessor for ConversationContextUpdateMetadata();
  v33 = swift_allocObject();
  *(_BYTE *)(v33 + 16) = 1;
  (*(void (**)(uint64_t, char *, char *))(v23 + 32))(v33 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v24, v26);
  *(_QWORD *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v33 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v11, v32);
  *(_BYTE *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
  v34 = v55;
  v35 = *(void **)&v55[OBJC_IVAR___SKRExecutionOutput_command];
  v36 = *(void (**)(void *))(**(_QWORD **)((char *)a2
                                                    + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker)
                                      + 256);
  v37 = v35;
  v38 = v28;
  v36(v35);

  v39 = *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
  v57 = (char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater;
  v40 = a2[12];
  v58 = a2[13];
  v59 = v40;
  v41 = (char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v42 = type metadata accessor for UUID();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (uint64_t)v63;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v63, v41, v42);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v42);
  v45 = (_QWORD *)swift_allocObject();
  v46 = v67;
  v45[2] = a2;
  v45[3] = v46;
  v45[4] = v34;
  v47 = *(void (**)(id, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v39 + 264);
  swift_retain();
  v48 = (uint64_t)v57;
  swift_retain();
  swift_retain();
  v49 = v34;
  v47(v49, v60, v61, 0, 0, v48, 0);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v44, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  objc_opt_self();
  v50 = swift_dynamicCastObjCClass();
  if (v50)
  {
    v51 = (void *)v50;
    outlined init with copy of ReferenceResolutionClientProtocol?(v48, (uint64_t)v64, &demangling cache variable for type metadata for ContextUpdating?);
    if (v65)
    {
      v52 = v66;
      __swift_project_boxed_opaque_existential_1(v64, v65);
      swift_unknownObjectRetain();
      specialized static ResponseTextExtractionUtil.extractResponseText(fromAddViews:)(v51);
      (*(void (**)(void))(v52 + 32))();
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    }
    else
    {

      swift_release();
      return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, &demangling cache variable for type metadata for ContextUpdating?);
    }
  }
  else
  {

    return swift_release();
  }
}

void *ResultCandidateState.serverContextUpdateCandidate.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverContextUpdateCandidate);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance SiriCorrectionsFlow()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
}

void MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  v10[2] = a1;
  v10[3] = a2;
  (*(void (**)(_QWORD, uint64_t, uint64_t (*)(uint64_t), _QWORD *))(*(_QWORD *)v2 + 280))(0, a2 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, partial apply for closure #1 in MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:), v10);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = Dictionary.debugDescription.getter();
    v10[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "Done applying ServerContextUpdateCandidate to all ContextUpdater instances with error: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t partial apply for closure #1 in MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t closure #1 in MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v16;
  uint64_t v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v6);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v16 = a3;
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v17 = v11;
    *(_DWORD *)v10 = 136315138;
    (*(void (**)(void))(*(_QWORD *)a1 + 360))();
    v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v8, v9, "Applying ServerContextUpdateCandidate to ContextUpdater with userId: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    v14 = v10;
    a3 = v16;
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 424))(a2, a3);
}

void ContextUpdater.applyServerContextUpdateCandidate(_:metadata:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123[4];

  v3 = v2;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v115 = *(_QWORD *)(v6 - 8);
  v116 = v6;
  MEMORY[0x1E0C80A78](v6);
  v112 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for PommesContext.Source();
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v9 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v120 = (uint64_t)&v107 - v14;
  v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (promptContext: Com_Apple_Siri_Product_Proto_PromptContext?, error: Error?));
  v15 = MEMORY[0x1E0C80A78](v117);
  v111 = (uint64_t)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v107 - v18;
  MEMORY[0x1E0C80A78](v17);
  v119 = (uint64_t)&v107 - v20;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  v23 = a1;
  v121 = v22;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v118 = v23;
  v113 = a2;
  v110 = v9;
  if (v26)
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v122 = v28;
    *(_DWORD *)v27 = 136315138;
    v29 = objc_msgSend(v23, sel_resultCandidateId);
    if (v29)
    {
      v30 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v33 = v32;

    }
    else
    {
      v31 = 0;
      v33 = 0;
    }
    v123[0] = v31;
    v123[1] = v33;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v34 = String.init<A>(describing:)();
    v123[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v23 = v118;

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v24, v25, "Received ServerContextUpdateCandidate for RC ID: %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v28, -1, -1);
    MEMORY[0x1B5E44758](v27, -1, -1);

  }
  else
  {

  }
  v36 = objc_msgSend(v23, sel_nlContextUpdatePayload);
  if (v36)
  {
    v37 = v36;
    v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v40 = v39;

  }
  else
  {
    v38 = 0;
    v40 = 0xF000000000000000;
  }
  v41 = v117;
  v42 = *(int *)(v117 + 48);
  v43 = v119;
  v44 = (void *)ContextUpdater.applyPromptContextProtoData(_:)(v119, v38, v40);
  outlined consume of Data?(v38, v40);
  *(_QWORD *)(v43 + v42) = v44;
  v45 = *(int *)(v41 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v43, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  *(_QWORD *)&v19[v45] = v44;
  if (v44)
  {
    v46 = v44;
    v47 = v44;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    v48 = v44;
    v49 = v44;
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      v53 = swift_slowAlloc();
      v123[0] = v53;
      *(_DWORD *)v52 = 136315138;
      swift_getErrorValue();
      v54 = Error.localizedDescription.getter();
      v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v50, v51, "Error while applying PromptContextData: %s", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v53, -1, -1);
      MEMORY[0x1B5E44758](v52, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  }
  v56 = v118;
  v114 = v13;
  v57 = objc_msgSend(v118, sel_mappedDomainEntities);
  if (v57)
  {
    v58 = v57;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAMappedDomainEntity);
    v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v60 = ContextUpdater.applyMappedDomainEntities(_:)(v59);
    swift_bridgeObjectRelease();
    if (v60)
    {
      v61 = v60;
      v62 = v60;
      v63 = Logger.logObject.getter();
      v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        v66 = swift_slowAlloc();
        v123[0] = v66;
        *(_DWORD *)v65 = 136315138;
        swift_getErrorValue();
        v67 = Error.localizedDescription.getter();
        v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B4BE6000, v63, v64, "Applied MappedDomainEntities with error: %s", v65, 0xCu);
        swift_arrayDestroy();
        v69 = v66;
        v56 = v118;
        MEMORY[0x1B5E44758](v69, -1, -1);
        MEMORY[0x1B5E44758](v65, -1, -1);

      }
      else
      {

      }
    }
    v70 = v56;
    v71 = Logger.logObject.getter();
    v72 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v118 = v3;
      v73 = swift_slowAlloc();
      v74 = swift_slowAlloc();
      v123[0] = v74;
      *(_DWORD *)v73 = 136315394;
      v75 = objc_msgSend(v70, sel_pegasusConversationContext);
      if (v75)
      {
        v76 = v75;
        static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v78 = v77;

        __asm { BR              X11 }
      }
      v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 12) = 2080;
      v79 = objc_msgSend(v70, sel_nlContextUpdatePayload);
      v107 = v74;
      if (v79)
      {
        v80 = v79;
        static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v82 = v81;

        __asm { BR              X11 }
      }
      v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v71, v72, "Considering context from server update\n    Pegasus bytes: %s\n    Prompt context bytes: %s", (uint8_t *)v73, 0x16u);
      v83 = v107;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v83, -1, -1);
      MEMORY[0x1B5E44758](v73, -1, -1);

      v3 = v118;
    }
    else
    {

    }
    v84 = type metadata accessor for PommesContext();
    v85 = *(_QWORD *)(v84 - 8);
    v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56);
    v86(v120, 1, 1, v84);
    v87 = objc_msgSend(v70, sel_pegasusConversationContext);
    v88 = (uint64_t)v114;
    if (v87)
    {
      v89 = v87;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v91 = v90;

      __asm { BR              X10 }
    }
    v92 = *(int *)(v117 + 48);
    v93 = v111;
    outlined init with copy of ReferenceResolutionClientProtocol?(v119, v111, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);

    *(_QWORD *)(v93 + v92) = v44;
    v95 = v115;
    v94 = v116;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v93, 1, v116) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v93, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
      v96 = Logger.logObject.getter();
      v97 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v96, v97))
      {
        v98 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v98 = 0;
        _os_log_impl(&dword_1B4BE6000, v96, v97, "No Pegasus bytes or prompt context. Not creating any POMMES context.", v98, 2u);
        MEMORY[0x1B5E44758](v98, -1, -1);
      }

      v99 = v113;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v112, v93, v94);
      v100 = Logger.logObject.getter();
      v101 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v100, v101))
      {
        v102 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v102 = 0;
        _os_log_impl(&dword_1B4BE6000, v100, v101, "Creating POMMES context with prompt context!", v102, 2u);
        MEMORY[0x1B5E44758](v102, -1, -1);
      }

      (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v110, *MEMORY[0x1E0D98A60], v109);
      PommesContext.init(source:domain:listenAfterSpeaking:)();
      v86(v88, 0, 1, v84);
      v103 = v120;
      outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v88, v120, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
      v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v103, 1, v84);
      v99 = v113;
      if (!v104)
        PommesContext.update(with:)();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v112, v116);
    }
    v105 = v120;
    outlined init with copy of ReferenceResolutionClientProtocol?(v120, v88, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    ContextUpdater.applyPommesContext(_:)(v88);
    outlined destroy of ReferenceResolutionClientProtocol?(v88, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    swift_beginAccess();
    v106 = (void *)v3[32];
    v3[32] = 0;

    ContextUpdater.flushSessionStateUpdates(metadata:)(v99);
    outlined destroy of ReferenceResolutionClientProtocol?(v119, &demangling cache variable for type metadata for (promptContext: Com_Apple_Siri_Product_Proto_PromptContext?, error: Error?));
    outlined destroy of ReferenceResolutionClientProtocol?(v105, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  }
  else
  {

    __break(1u);
  }
}

id ContextUpdater.applyMappedDomainEntities(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (**v4)(char *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(_QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id result;
  void *v37;
  void *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (**v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  void (**v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[3];
  unint64_t v86;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (void (**)(char *, uint64_t))((char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x1E0C80A78](v5);
  v71 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RREntity();
  v82 = *(void (***)(char *, char *, uint64_t))(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v81 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v80 = (char *)&v64 - v10;
  v11 = type metadata accessor for UUID();
  v12 = *(void (***)(_QWORD, _QWORD))(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
LABEL_25:
    swift_once();
  v15 = type metadata accessor for Logger();
  v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v67 = v16;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  v19 = os_log_type_enabled(v17, v18);
  v73 = a1;
  v66 = v4;
  if (v19)
  {
    v20 = swift_slowAlloc();
    v79 = v11;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v85[0] = v22;
    *(_DWORD *)v21 = 136315138;
    v78 = v21 + 4;
    v23 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAMappedDomainEntity);
    swift_bridgeObjectRetain();
    v4 = (void (**)(char *, uint64_t))MEMORY[0x1B5E434D4](v73, v23);
    v25 = v24;
    swift_bridgeObjectRelease();
    v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v4, v25, v85);
    a1 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v17, v18, "Received MappedDomainEntities=%s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    v26 = v21;
    v11 = v79;
    MEMORY[0x1B5E44758](v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  UUID.init()();
  v70 = UUID.uuidString.getter();
  v72 = v27;
  v12[1](v14, v11);
  v86 = MEMORY[0x1E0DEE9D8];
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = (void (**)(char *, uint64_t))a1;
    else
      v4 = (void (**)(char *, uint64_t))(a1 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    if (v28)
      goto LABEL_7;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      v54 = swift_slowAlloc();
      v85[0] = v54;
      *(_DWORD *)v53 = 136315138;
      swift_beginAccess();
      v55 = swift_bridgeObjectRetain();
      v56 = MEMORY[0x1B5E434D4](v55, v7);
      v58 = v57;
      swift_bridgeObjectRelease();
      v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v51, v52, "#ContextUpdater: Created RRaaS entities=%s from MappedDomainEntities", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v54, -1, -1);
      MEMORY[0x1B5E44758](v53, -1, -1);
    }

    swift_beginAccess();
    v59 = v86;
    if (*(_QWORD *)(v86 + 16))
    {
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v65 + 56), *(_QWORD *)(v65 + 80));
      v60 = type metadata accessor for RRFilter();
      v61 = (uint64_t)v66;
      (*(void (**)(void (**)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8)
                                                                                               + 56))(v66, 1, 1, v60);
      v62 = swift_allocObject();
      swift_weakInit();
      v63 = swift_allocObject();
      *(_QWORD *)(v63 + 16) = v62;
      *(_QWORD *)(v63 + 24) = v59;
      swift_bridgeObjectRetain_n();
      swift_retain();
      dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for RRFilter?);
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  v28 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v28)
    goto LABEL_30;
LABEL_7:
  v74 = a1 & 0xC000000000000001;
  v14 = 4;
  v69 = v7;
  v68 = v28;
  while (1)
  {
    v11 = v14 - 4;
    if (v74)
      v29 = (id)MEMORY[0x1B5E43B94](v14 - 4, a1);
    else
      v29 = *(id *)(a1 + 8 * v14);
    v12 = (void (**)(_QWORD, _QWORD))v29;
    v30 = v14 - 3;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    v31 = objc_msgSend(v29, sel_usoGraphPayload);
    if (v31)
      break;

LABEL_9:
    ++v14;
    if (v30 == v28)
      goto LABEL_30;
  }
  v32 = v31;
  v79 = v14 - 4;
  v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v35 = v34;

  if (!specialized ContextUpdater.convertPayloadToUsoEntity(payload:)(v33, v35))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v49 = swift_allocError();
    *v50 = 9;
    outlined consume of Data._Representation(v33, v35);

    swift_bridgeObjectRelease();
    return (id)v49;
  }
  v78 = (uint8_t *)v33;
  result = objc_msgSend(v12, sel_identifier);
  if (!result)
    goto LABEL_37;
  v37 = result;
  v76 = v35;
  v77 = v14 - 3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v75 = v12;
  result = objc_msgSend(v12, sel_appBundleId);
  if (result)
  {
    v38 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v39 = type metadata accessor for GroupIdentifier();
    v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
    v41 = v71;
    v40(v71, 1, 1, v39);
    swift_retain();
    v42 = v80;
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    swift_bridgeObjectRetain();
    GroupIdentifier.init(id:seq:)();
    v40(v41, 0, 1, v39);
    RREntity.group.setter();
    v7 = v69;
    v82[2](v81, v42, v69);
    v43 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1, v43);
    v44 = v76;
    v30 = v77;
    v45 = (uint64_t)v78;
    v47 = *(_QWORD *)(v43 + 16);
    v46 = *(_QWORD *)(v43 + 24);
    v48 = v75;
    if (v47 >= v46 >> 1)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v43);
    *(_QWORD *)(v43 + 16) = v47 + 1;
    v4 = (void (**)(char *, uint64_t))v82;
    v82[4]((char *)(v43+ ((*((unsigned __int8 *)v4 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v4 + 80))+ (_QWORD)v82[9] * v47), v81, v7);

    outlined consume of Data._Representation(v45, v44);
    swift_release();
    v86 = v43;
    v4[1](v80, v7);
    a1 = v73;
    v28 = v68;
    goto LABEL_9;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.requestHandledOnServer.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t ConversationBridge.handleRunSiriKitExecutor(_:_:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(a1, a2, 0, 0, a3, a4);
}

uint64_t type metadata accessor for RunSiriKitExecutorProcessor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RunSiriKitExecutorProcessor;
  if (!type metadata singleton initialization cache for RunSiriKitExecutorProcessor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for RunSiriKitExecutorProcessorExecutionDelegate()
{
  return objc_opt_self();
}

uint64_t _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1
                + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_runSiriKitExecutorProcessor);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t RunSiriKitExecutorProcessor.makeRequestContextData()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  id v51;
  unint64_t v52;
  uint64_t (*v53)(uint64_t, unint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)v0[2];
  v9 = objc_msgSend(v8, sel_inputOrigin);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "Warning: RSKE command has no inputOrigin, defaulting to that of the last request", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v18;
  }
  v19 = objc_msgSend(v8, sel_mode);
  if (v19)
  {
    v20 = v19;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  ResponseMode.init(aceValue:)();
  v21 = type metadata accessor for ResponseMode();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v7, 1, v21) == 1)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1B4BE6000, v23, v24, "Note: RSKE command has no mode, using nil (SKE will get it from turn context)", v25, 2u);
      MEMORY[0x1B5E44758](v25, -1, -1);
    }

  }
  type metadata accessor for RequestContextData.Builder(0);
  swift_allocObject();
  v26 = RequestContextData.Builder.init()();
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 1040))(v11, v13);
  swift_release();
  swift_bridgeObjectRelease();
  v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v27 + 1064))(v7);
  swift_release();
  v29 = (*(uint64_t (**)(id))(*(_QWORD *)v28 + 1072))(objc_msgSend(v8, sel_eyesFree));
  swift_release();
  v30 = (*(uint64_t (**)(id))(*(_QWORD *)v29 + 1080))(objc_msgSend(v8, sel_directAction));
  swift_release();
  v31 = (*(uint64_t (**)(id))(*(_QWORD *)v30 + 1088))(objc_msgSend(v8, sel_voiceTriggerEnabled));
  swift_release();
  v32 = (*(uint64_t (**)(id))(*(_QWORD *)v31 + 1096))(objc_msgSend(v8, sel_textToSpeechEnabled));
  swift_release();
  v33 = (void *)v1[3];
  v34 = objc_msgSend(v33, sel_originPeerInfo);
  v35 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 1104))();
  swift_release();

  v36 = objc_msgSend(v33, sel_endpointInfo);
  v37 = (*(uint64_t (**)(void))(*(_QWORD *)v35 + 1112))();
  swift_release();

  v38 = objc_msgSend(v33, sel_instanceInfo);
  v39 = (*(uint64_t (**)(void))(*(_QWORD *)v37 + 1120))();
  swift_release();

  v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v39 + 1128))(MEMORY[0x1E0DEE9D8]);
  swift_release();
  v41 = objc_msgSend(v33, sel_deviceRestrictions);
  if (v41)
  {
    v42 = v41;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  Restrictions.init(aceValue:)();
  v43 = type metadata accessor for Restrictions();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v4, 0, 1, v43);
  v44 = (*(uint64_t (**)(char *))(*(_QWORD *)v40 + 1144))(v4);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  v45 = objc_msgSend(v33, sel_currentHomeInfo);
  v46 = (*(uint64_t (**)(void))(*(_QWORD *)v44 + 1152))();
  swift_release();

  if (v1[20])
  {
    v47 = v1[19];
    v48 = v1[20];
  }
  else
  {
    v49 = objc_msgSend(v8, sel_remoteExecution);
    if (v49
      && (v50 = v49,
          v51 = objc_msgSend(v49, sel_executionDeviceAssistantId),
          v50,
          v51))
    {
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v48 = v52;

    }
    else
    {
      v47 = 0;
      v48 = 0xE000000000000000;
    }
  }
  v53 = *(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v46 + 1160);
  swift_bridgeObjectRetain();
  v54 = v53(v47, v48);
  swift_bridgeObjectRelease();
  v55 = swift_release();
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 1280))(v55);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  return v56;
}

void RunSiriKitExecutorProcessor.handle(sendStartExecutionTurn:overrideRequestContextData:)(char a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  objc_class *started;
  _BYTE *v24;
  uint64_t *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(void *, void *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  _QWORD *v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  _QWORD *v64;
  objc_super v66;
  uint64_t v67[3];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v3 = v2;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v67[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = 0x65746F6D6572;
    if (*(_BYTE *)(v3 + 168) != 1)
      v11 = 0x726576726573;
    if (*(_BYTE *)(v3 + 168))
      v12 = v11;
    else
      v12 = 0x6C61636F6CLL;
    if (*(_BYTE *)(v3 + 168))
      v13 = 0xE600000000000000;
    else
      v13 = 0xE500000000000000;
    v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "Handling RSKE from source: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

    if ((a1 & 1) == 0)
      goto LABEL_25;
  }
  else
  {

    swift_release_n();
    if ((a1 & 1) == 0)
    {
LABEL_25:
      swift_retain_n();
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v64 = (_QWORD *)v6;
        v37 = (uint8_t *)swift_slowAlloc();
        v38 = swift_slowAlloc();
        *(_DWORD *)v37 = 136315138;
        v67[0] = v38;
        v39 = objc_msgSend(*(id *)(v3 + 16), sel_debugDescription);
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v42 = v41;

        v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v35, v36, "Handling %s", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v38, -1, -1);
        MEMORY[0x1B5E44758](v37, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v43 = *(void **)(v3 + 16);
      objc_msgSend(v43, sel_copy, v64);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for SAIntentGroupRunSiriKitExecutor();
      if (swift_dynamicCast())
      {
        v44 = (void *)v70;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 424))(v70) & 1) != 0)
        {
          v45 = Logger.logObject.getter();
          v46 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v45, v46))
          {
            v47 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v47 = 0;
            _os_log_impl(&dword_1B4BE6000, v45, v46, "🫨 Gesture invocation detected, ignoring RSKE", v47, 2u);
            MEMORY[0x1B5E44758](v47, -1, -1);
          }

        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v3 + 456))(*(_QWORD *)(v3 + 136), *(_QWORD *)(v3 + 144));
          outlined init with copy of ReferenceResolutionClientProtocol(v3 + 56, (uint64_t)v67);
          v48 = v68;
          v49 = v69;
          __swift_project_boxed_opaque_existential_1(v67, v68);
          v50 = a2;
          if (a2)
          {
            v51 = a2;
          }
          else
          {
            v52 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 544))();
            v50 = 0;
            v51 = (void *)v52;
          }
          v53 = *(_QWORD *)(v3
                          + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_rskeProcessorExecutionDelegate);
          v54 = *(void (**)(void *, void *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v49 + 64);
          v55 = v50;
          v54(v44, v51, v53, &protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate, v48, v49);

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
          swift_retain_n();
          v56 = Logger.logObject.getter();
          v57 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v56, v57))
          {
            v58 = (uint8_t *)swift_slowAlloc();
            v59 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v58 = 138412290;
            v67[0] = (uint64_t)v43;
            v60 = v43;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v59 = v43;
            swift_release_n();
            _os_log_impl(&dword_1B4BE6000, v56, v57, "Successfully sent: %@", v58, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v59, -1, -1);
            MEMORY[0x1B5E44758](v58, -1, -1);

          }
          else
          {

            swift_release_n();
          }
        }
      }
      else
      {
        specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v43, -1, 0xD000000000000013, 0x80000001B4F00A30, *(void (**)(id, id))(v3 + 32), *(_QWORD *)(v3 + 40));
      }
      return;
    }
  }
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Sending StartExecutionTurn to Execution before RSKE", v16, 2u);
    MEMORY[0x1B5E44758](v16, -1, -1);
  }

  if (*(_QWORD *)(v3 + 144))
  {
    v17 = *(_QWORD *)(v3 + 136);
    v18 = *(_QWORD *)(v3 + 144);
LABEL_21:
    v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 456);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(v17, v18);
    swift_bridgeObjectRelease();
    started = (objc_class *)type metadata accessor for StartExecutionTurn();
    v24 = objc_allocWithZone(started);
    v25 = (uint64_t *)&v24[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
    *v25 = v17;
    v25[1] = v18;
    v26 = &v24[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
    *v26 = 0;
    v26[1] = 0;
    v24[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = 0;
    v24[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = 0;
    v66.receiver = v24;
    v66.super_class = started;
    v27 = objc_msgSendSuper2(&v66, sel_init);
    v28 = *(_QWORD *)(v3 + 80);
    v29 = *(_QWORD *)(v3 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + 56), v28);
    (*(void (**)(id, _QWORD, _UNKNOWN **, uint64_t, uint64_t))(v29 + 8))(v27, *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_rskeProcessorExecutionDelegate), &protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate, v28, v29);
    v30 = v27;
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v64 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v33 = 138412290;
      v67[0] = (uint64_t)v30;
      v34 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v64 = v30;

      _os_log_impl(&dword_1B4BE6000, v31, v32, "Successfully sent: %@", v33, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v64, -1, -1);
      MEMORY[0x1B5E44758](v33, -1, -1);
    }
    else
    {

      v31 = v30;
    }

    goto LABEL_25;
  }
  v19 = objc_msgSend(*(id *)(v3 + 24), sel_requestID);
  if (v19)
  {
    v20 = v19;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v21;

    goto LABEL_21;
  }
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    _os_log_impl(&dword_1B4BE6000, v61, v62, "The requestId is missing", v63, 2u);
    MEMORY[0x1B5E44758](v63, -1, -1);
  }

}

unint64_t type metadata accessor for SAIntentGroupRunSiriKitExecutor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor;
  if (!lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  }
  return result;
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.logStartOfExecutionForRSKE(requestId:)(Swift::String_optional requestId)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v2 = v1;
  object = requestId.value._object;
  countAndFlagsBits = requestId.value._countAndFlagsBits;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v1 + 320))() & 1) == 0)
  {
    if (object)
    {
      v5 = *(_QWORD *)(v1 + 184);
      v6 = *(unsigned __int8 *)(v1 + 168);
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 344))();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, _BYTE))(*(_QWORD *)v5 + 136))(1, v6, 8, countAndFlagsBits, object, countAndFlagsBits, object, v7, v8, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1B4BE6000, v10, v11, "RequestId is missing while handling RSKE request and logging to SELF", v12, 2u);
        MEMORY[0x1B5E44758](v12, -1, -1);
      }

    }
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 328))(1);
  }
}

uint64_t RunSiriKitExecutorProcessor.loggedStartOfCall.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_loggedStartOfCall);
  swift_beginAccess();
  return *v1;
}

uint64_t RunSiriKitExecutorProcessor.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_resultCandidateId);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ConversationBridgeInstrumentationUtil.mapRSKESourceToLogRSKESource(_:)(char a1)
{
  return dword_1B4EE6D94[a1];
}

uint64_t RunSiriKitExecutorProcessor.loggedStartOfCall.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_loggedStartOfCall);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendRunSiriKitExecutor(_:withRequestContextData:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t ConversationRuntimeClient.sendRunSiriKitExecutor(_:withRequestContextData:withBridgeDelegate:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, void *, uint64_t);

  v5 = v4;
  if (one-time initialization token for executor != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v12 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(v4 + 32);
  v13 = *(_QWORD *)(v5 + 40);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v11;
  v14[4] = v13;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  v14[8] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  v15 = a1;
  v16 = a2;
  swift_unknownObjectRetain();
  v17 = StaticString.description.getter();
  v19 = v18;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v12;
  *(_QWORD *)(v20 + 24) = v11;
  *(_QWORD *)(v20 + 32) = v13;
  *(_QWORD *)(v20 + 40) = "bridge(didReceiveRSKE:withRequestContextData:from:)";
  *(_QWORD *)(v20 + 48) = 51;
  *(_BYTE *)(v20 + 56) = 2;
  *(_QWORD *)(v20 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:);
  *(_QWORD *)(v20 + 72) = v14;
  v21 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v11 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21(v17, v19, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v20);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
  swift_retain();
  swift_retain();
  v14 = a2;
  v15 = one-time initialization token for shared;
  v16 = a5;
  if (v15 != -1)
    swift_once();
  swift_beginAccess();
  v17 = static MessageBusActor.shared;
  v18 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v18;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a2;
  v19[7] = v16;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:), (uint64_t)v19);
  (*(void (**)(void))(*(_QWORD *)v12 + 120))();
  return swift_release();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[7];
  v8 = v0[8];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:)(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v12;
  *v12 = v7;
  v12[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a4, a5, a6, a7);
}

uint64_t ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[24] = swift_task_alloc();
  v6 = type metadata accessor for SiriKitEventPayload();
  v5[25] = v6;
  v5[26] = *(_QWORD *)(v6 - 8);
  v5[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v5[28] = swift_task_alloc();
  v5[29] = type metadata accessor for DecisionEngineResponse();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  type metadata accessor for ExecutionLocation();
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v7 = type metadata accessor for Parse();
  v5[34] = v7;
  v5[35] = *(_QWORD *)(v7 - 8);
  v5[36] = swift_task_alloc();
  v8 = type metadata accessor for TimeoutError();
  v5[37] = v8;
  v5[38] = *(_QWORD *)(v8 - 8);
  v5[39] = swift_task_alloc();
  v9 = type metadata accessor for OSSignpostID();
  v5[40] = v9;
  v5[41] = *(_QWORD *)(v9 - 8);
  v5[42] = swift_task_alloc();
  v10 = type metadata accessor for Input();
  v5[43] = v10;
  v5[44] = *(_QWORD *)(v10 - 8);
  v5[45] = swift_task_alloc();
  v5[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  v5[47] = swift_task_alloc();
  v5[48] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[49] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = v0;
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  void *v6;
  uint8_t *v7;
  uint8_t *v8;
  void *v9;
  id v10;
  id v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t DynamicType;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31[14];

  v1 = (void *)v0[60];
  v0[17] = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v9 = (void *)v0[60];
    v10 = v9;
    v11 = v9;
    v3 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v3, v12);
    v6 = (void *)v0[60];
    if (v13)
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v31[0] = v15;
      *(_DWORD *)v14 = 136446210;
      swift_getErrorValue();
      DynamicType = swift_getDynamicType();
      v17 = v0[13];
      v0[14] = DynamicType;
      v0[15] = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error.Type);
      v18 = String.init<A>(describing:)();
      v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v3, v12, "bridge.fetchSpeechInfo got an unknown error %{public}s, current request will have a nil speechPackage", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v15, -1, -1);
      v8 = v14;
      goto LABEL_6;
    }

LABEL_8:
    goto LABEL_9;
  }
  (*(void (**)(_QWORD, _QWORD))(v0[38] + 8))(v0[39], v0[37]);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = (void *)v0[60];
  if (!v5)
    goto LABEL_8;
  v7 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v7 = 0;
  _os_log_impl(&dword_1B4BE6000, v3, v4, "bridge.fetchSpeechInfo timed out, current request will have a nil speechPackage", v7, 2u);
  v8 = v7;
LABEL_6:
  MEMORY[0x1B5E44758](v8, -1, -1);

LABEL_9:
  v0[61] = 0;
  v20 = v0[19];
  v21 = (_QWORD *)swift_task_alloc();
  v0[62] = v21;
  *v21 = v0;
  v21[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  v22 = v0[57];
  v23 = v0[58];
  v24 = v0[55];
  v25 = v0[56];
  v26 = v0[53];
  v27 = v0[54];
  v28 = v0[52];
  v29 = v0[22];
  v31[12] = v0[21];
  v31[13] = v29;
  return ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:)(v27, v24, v28, v26, v25, v20, v22, v23);
}

{
  Swift::String *v0;
  uint64_t countAndFlagsBits;
  char *object;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  char *v20;
  void *v21;
  Swift::String_optional v22;
  uint64_t v23;
  void (*v24)(void *, _QWORD **);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v32)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  countAndFlagsBits = v0[24]._countAndFlagsBits;
  object = (char *)v0[11]._object;
  v3 = type metadata accessor for Logger();
  v0[25]._countAndFlagsBits = __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v0[25]._object = (void *)type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeBegin(rcId:)();
  swift_release();
  v4 = type metadata accessor for RequestPositionInSession();
  v5 = *(_QWORD *)(v4 - 8);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v31(countAndFlagsBits, 1, 1, v4);
  v6 = (void **)(object + 112);
  swift_beginAccess();
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = object[120];
  if ((v11 & 0xC0) == 0x40)
  {
    v13 = (uint64_t)v0[23]._object;
    v12 = v0[24]._countAndFlagsBits;
    v30 = v12;
    v14 = *v6;
    v15 = v14;
    outlined destroy of ReferenceResolutionClientProtocol?(v12, &demangling cache variable for type metadata for RequestPositionInSession?);
    v9 = *(_QWORD *)&v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
    v10 = *(void **)&v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId + 8];
    v7 = *(_QWORD *)&v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
    v8 = *(void **)&v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of ConversationService.State(v14, v11);
    v16 = (unsigned int *)MEMORY[0x1E0D98438];
    if ((v11 & 1) != 0)
      v16 = (unsigned int *)MEMORY[0x1E0D98418];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v13, *v16, v4);
    v31(v13, 0, 1, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v13, v30, &demangling cache variable for type metadata for RequestPositionInSession?);
  }
  v0[26]._countAndFlagsBits = v7;
  v0[26]._object = v8;
  v17 = v0[24]._countAndFlagsBits;
  v18 = v0[23]._countAndFlagsBits;
  v19 = (_QWORD **)v0[11]._object;
  v21 = v0[9]._object;
  v20 = (char *)v0[10]._countAndFlagsBits;
  v22.value._countAndFlagsBits = v9;
  v22.value._object = v10;
  v0[27] = SAIntentGroupRunSiriKitExecutor.executionRequestId(previousExecutionRequestId:)(v22);
  swift_bridgeObjectRelease();
  v23 = ConversationService.combineTurnDataContext(rske:positionInSession:incomingRequestContextData:)(v21, v17, v20);
  v0[28]._countAndFlagsBits = v23;
  ConversationService.markBusy(doing:)();
  v24 = *(void (**)(void *, _QWORD **))(*v19[25] + 128);
  swift_retain();
  v24(&async function pointer to partial apply for closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v19);
  swift_release();
  v0[28]._object = static SiriKitExecutorRunUtils.getInputAndRRData(from:requestContextData:)(v18, v21, v23);
  v0[29]._countAndFlagsBits = v25;
  if (one-time initialization token for executor != -1)
    swift_once();
  v26 = type metadata accessor for OSSignposter();
  v27 = __swift_project_value_buffer(v26, (uint64_t)static Signposter.executor);
  swift_unknownObjectRetain();
  static OSSignpostID.exclusive.getter();
  v32 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)
                                                                                           + async function pointer to specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:));
  v28 = (_QWORD *)swift_task_alloc();
  v0[29]._object = v28;
  *v28 = v0;
  v28[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return v32((uint64_t)"FetchSpeechInfo", 15, 2, v0[21]._countAndFlagsBits, v27, (uint64_t)v0[10]._object, v0[11]._countAndFlagsBits);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 560);
  v2 = *(void **)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 248);
  outlined consume of Data?(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464));
  swift_release();

  swift_release();
  swift_release();

  outlined destroy of CamOutput(v3, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  v4 = *(void **)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344));
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v6, (uint64_t)&unk_1E6847A28, (uint64_t)&unk_1E6847A50, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for RequestPositionInSession?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 584) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t (*v11)(void);
  __int128 v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(void **)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v12 = *(_OWORD *)(v0 + 168);
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  *(_QWORD *)(v0 + 616) = static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  v7 = swift_allocObject();
  *(_QWORD *)(v0 + 624) = v7;
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v1;
  *(_QWORD *)(v7 + 32) = v2;
  *(_QWORD *)(v7 + 40) = v3;
  *(_OWORD *)(v7 + 48) = v12;
  v11 = (uint64_t (*)(void))((int)*MEMORY[0x1E0D9C178] + MEMORY[0x1E0D9C178]);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  v8 = v2;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 632) = v9;
  *v9 = v0;
  v9[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return v11();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 560);
  v2 = *(void **)(v0 + 488);
  outlined consume of Data?(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464));
  swift_release();

  swift_release();
  swift_release();

  v3 = *(void **)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 184);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 248), (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v8, (uint64_t)&unk_1E6847A28, (uint64_t)&unk_1E6847A50, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

  outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for RequestPositionInSession?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  uint64_t (*v36)(void);
  void *v37;
  __int128 v38;

  v1 = *(uint64_t **)(v0 + 248);
  v2 = *v1;
  *(_QWORD *)(v0 + 592) = *v1;
  if (!v2)
  {
    v6 = *(void **)(v0 + 560);
    v37 = *(void **)(v0 + 488);
    v8 = *(_QWORD *)(v0 + 456);
    v7 = *(_QWORD *)(v0 + 464);
    v9 = *(_QWORD *)(v0 + 432);
    v10 = *(_QWORD *)(v0 + 440);
    v11 = *(_QWORD *)(v0 + 176);
    swift_release();
    ObjectType = swift_getObjectType();
    v13 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    v14 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v9, v10);
    (*(void (**)(id, unint64_t, unint64_t, uint64_t, uint64_t))(v11 + 32))(v14, 0xD00000000000001DLL, 0x80000001B4EFA9E0, ObjectType, v11);
    outlined consume of Data?(v8, v7);

    swift_release();
    v15 = *(void **)(v0 + 448);
    v16 = *(_QWORD *)(v0 + 384);
    v17 = *(_QWORD *)(v0 + 368);
    v19 = *(_QWORD *)(v0 + 344);
    v18 = *(_QWORD *)(v0 + 352);
    v20 = *(_QWORD *)(v0 + 184);
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 248), (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v20, (uint64_t)&unk_1E6847A28, (uint64_t)&unk_1E6847A50, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

    outlined destroy of ReferenceResolutionClientProtocol?(v16, &demangling cache variable for type metadata for RequestPositionInSession?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 184);
  swift_retain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 104);
  if ((v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 16);
  }
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  v22 = *(_QWORD *)(v0 + 240);
  if (!v5)
  {
    outlined destroy of CamOutput(v22, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    goto LABEL_11;
  }
  v23 = *(_BYTE *)(v22 + 8);
  outlined destroy of CamOutput(v22, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  if ((v23 & 1) != 0)
  {
LABEL_11:
    v27 = *(_QWORD *)(v0 + 592);
    v28 = *(void **)(v0 + 560);
    v29 = *(_QWORD *)(v0 + 504);
    v30 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 192);
    v38 = *(_OWORD *)(v0 + 168);
    static ConversationSELFHelper.shared.getter();
    dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
    swift_release();
    *(_QWORD *)(v0 + 616) = static ConversationSELFHelper.shared.getter();
    Input.identifier.getter();
    v32 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 0, 1, v32);
    v33 = swift_allocObject();
    *(_QWORD *)(v0 + 624) = v33;
    *(_QWORD *)(v33 + 16) = v30;
    *(_QWORD *)(v33 + 24) = v27;
    *(_QWORD *)(v33 + 32) = v28;
    *(_QWORD *)(v33 + 40) = v29;
    *(_OWORD *)(v33 + 48) = v38;
    v36 = (uint64_t (*)(void))((int)*MEMORY[0x1E0D9C178] + MEMORY[0x1E0D9C178]);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v34 = v28;
    v35 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 632) = v35;
    *v35 = v0;
    v35[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
    return v36();
  }
  v24 = *(_QWORD *)(v0 + 344);
  v25 = *(_QWORD *)(v0 + 352);
  v26 = *(_QWORD *)(v0 + 224);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 248) + *(int *)(*(_QWORD *)(v0 + 232) + 24), v26, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 224), &demangling cache variable for type metadata for Input?);
    goto LABEL_11;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 32))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 344));
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;
  uint64_t v8;

  v1 = (_QWORD *)*v0;
  v2 = *(_QWORD *)(*v0 + 504);
  v8 = *v0;
  swift_task_dealloc();
  v3 = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender;
  v1[68] = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender;
  v4 = v2 + v3;
  v7 = (char *)&async function pointer to specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)
     + async function pointer to specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:);
  v5 = (_QWORD *)swift_task_alloc();
  v1[69] = v5;
  *v5 = v8;
  v5[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, unint64_t))v7)(v1[46], v4, 12589, 0xE200000000000000);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 560);
  v2 = *(void **)(v0 + 488);
  outlined consume of Data?(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464));
  swift_release();
  swift_release();

  v3 = *(void **)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344));
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v5, (uint64_t)&unk_1E6847A28, (uint64_t)&unk_1E6847A50, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

  outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for RequestPositionInSession?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;
  _QWORD *v4;

  v1 = v0[23];
  v2 = *(void **)(v1 + 112);
  *(_QWORD *)(v1 + 112) = v0[63];
  v3 = *(_BYTE *)(v1 + 120);
  *(_BYTE *)(v1 + 120) = 0x80;
  swift_retain();
  outlined consume of ConversationService.State(v2, v3);
  Input.parse.getter();
  v4 = (_QWORD *)swift_task_alloc();
  v0[65] = v4;
  *v4 = v0;
  v4[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)(v0[63], 12589, 0xE200000000000000, v0[36]);
}

{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t *v8;

  v1 = *v0;
  v3 = (*v0)[35];
  v2 = (*v0)[36];
  v4 = (*v0)[34];
  v8 = *v0;
  swift_task_dealloc();
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v1[66] = (uint64_t)v5;
  v5(v2, v4);
  v6 = (_QWORD *)swift_task_alloc();
  v1[67] = (uint64_t)v6;
  *v6 = v8;
  v6[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:)(v1[63], 12589, 0xE200000000000000);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[26];
  v1 = (uint64_t *)v0[27];
  v3 = v0[25];
  v4 = (_QWORD *)(v0[63] + v0[68]);
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  type metadata accessor for SiriKitEvent();
  *v1 = specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)();
  v1[1] = v5;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0D9B1B0], v3);
  v0[75] = SiriKitEvent.__allocating_init(_:builder:)();
  v6 = (_QWORD *)swift_task_alloc();
  v0[76] = v6;
  *v6 = v0;
  v6[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return dispatch thunk of SiriKitEventSending.sendAsync(_:)();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 488);
  outlined consume of Data?(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464));
  swift_release();

  v2 = *(void **)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344));
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v4, (uint64_t)&unk_1E6847A28, (uint64_t)&unk_1E6847A50, (uint64_t)&closure #1 in ConversationService.markNotBusyAsync()partial apply);

  outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for RequestPositionInSession?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;

  v4 = (_QWORD *)*v2;
  v4[60] = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  (*(void (**)(_QWORD, _QWORD))(v4[41] + 8))(v4[42], v4[40]);
  if (v1)
    return swift_task_switch();
  v4[61] = a1;
  v6 = v4[19];
  v7 = (_QWORD *)swift_task_alloc();
  v4[62] = v7;
  *v7 = v4;
  v7[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:)(v4[54], v4[55], v4[52], v4[53], v4[56], v6, v4[57], v4[58]);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 504) = a1;
  *(_QWORD *)(v3 + 512) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

Swift::String __swiftcall SAIntentGroupRunSiriKitExecutor.executionRequestId(previousExecutionRequestId:)(Swift::String_optional previousExecutionRequestId)
{
  void *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  Swift::String result;
  uint64_t v24;

  object = previousExecutionRequestId.value._object;
  countAndFlagsBits = previousExecutionRequestId.value._countAndFlagsBits;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v1, sel_refId);
  if (v8)
  {
    v9 = v8;
    countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    object = v10;

  }
  else if (object)
  {
    v11 = one-time initialization token for executor;
    swift_bridgeObjectRetain();
    if (v11 != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "[Conversation] RSKE has no refId: Falling back on previous executionRequestId", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1B4BE6000, v17, v18, "[Conversation] RSKE has no refId: Will generate new executionRequestId", v19, 2u);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }

    UUID.init()();
    countAndFlagsBits = UUID.uuidString.getter();
    object = v20;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v21 = countAndFlagsBits;
  v22 = object;
  result._object = v22;
  result._countAndFlagsBits = v21;
  return result;
}

uint64_t ConversationService.combineTurnDataContext(rske:positionInSession:incomingRequestContextData:)(void *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  unsigned int (*v42)(_BYTE *, uint64_t, uint64_t);
  void (*v43)(_BYTE *, char *, uint64_t);
  void (*v44)(_BYTE *, _QWORD, uint64_t, uint64_t);
  char *v45;
  _BYTE *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _BYTE v51[12];
  int v52;
  char *v53;
  char *v54;
  char *v55;
  _BYTE *v56;
  char *v57;
  uint64_t v58;
  char v59;

  v4 = v3;
  v58 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v56 = &v51[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = &v51[-v11];
  MEMORY[0x1E0C80A78](v10);
  v14 = &v51[-v13];
  v15 = type metadata accessor for RequestPositionInSession();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v55 = &v51[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17);
  v54 = &v51[-v19];
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = &v51[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a3) + 0x170);
  v57 = a3;
  v25 = v24(v21);
  swift_beginAccess();
  v26 = *(unsigned __int8 *)(v4 + 120);
  if ((v26 & 0xC0) == 0x80)
  {
    v53 = *(char **)(v4 + 112);
    swift_retain();
    v27 = objc_msgSend(a1, sel_mode);
    if (v27)
    {

    }
    else
    {
      v52 = v26;
      if (one-time initialization token for executor != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1B4BE6000, v29, v30, "Fallback to ResponseMode in RequestContextData when rske mode is nil", v31, 2u);
        MEMORY[0x1B5E44758](v31, -1, -1);
      }

      v32 = *(_QWORD *)&v53[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 32]
          + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode;
      v33 = type metadata accessor for ResponseMode();
      v34 = *(_QWORD *)(v33 - 8);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v34 + 16))(v23, v32, v33);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v23, 0, 1, v33);
      (*(void (**)(_BYTE *))(*(_QWORD *)v25 + 1064))(v23);
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      v26 = v52;
    }
    if (*(_DWORD *)&v57[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId])
    {
      outlined consume of ConversationService.State(v53, v26);
    }
    else
    {
      v52 = v26;
      if (one-time initialization token for executor != -1)
        swift_once();
      v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.executor);
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v38 = 0;
        _os_log_impl(&dword_1B4BE6000, v36, v37, "Fallback to voiceAudioSessionId in RequestContextData when incoming session is unset", v38, 2u);
        MEMORY[0x1B5E44758](v38, -1, -1);
      }

      v39 = v53;
      v40 = *(unsigned int *)(*(_QWORD *)&v53[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData
                                            + 32]
                            + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
      v41 = *(void (**)(uint64_t))(*(_QWORD *)v25 + 1216);
      v59 = 0;
      v41(v40);
      outlined consume of ConversationService.State(v39, v52);
      swift_release();
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v58, (uint64_t)v14, &demangling cache variable for type metadata for RequestPositionInSession?);
  v42 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
  if (v42(v14, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for RequestPositionInSession?);
    v43 = *(void (**)(_BYTE *, char *, uint64_t))(v16 + 16);
    v43(v12, &v57[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession], v15);
    v44 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56);
    v44(v12, 0, 1, v15);
    (*(void (**)(_BYTE *))(*(_QWORD *)v25 + 1248))(v12);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for RequestPositionInSession?);
  }
  else
  {
    v45 = v54;
    (*(void (**)(char *, _BYTE *, uint64_t))(v16 + 32))(v54, v14, v15);
    v43 = *(void (**)(_BYTE *, char *, uint64_t))(v16 + 16);
    v43(v12, v45, v15);
    v44 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56);
    v44(v12, 0, 1, v15);
    (*(void (**)(_BYTE *))(*(_QWORD *)v25 + 1248))(v12);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for RequestPositionInSession?);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v45, v15);
  }
  v46 = v56;
  outlined init with copy of ReferenceResolutionClientProtocol?(v58, (uint64_t)v56, &demangling cache variable for type metadata for RequestPositionInSession?);
  if (v42(v46, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v46, &demangling cache variable for type metadata for RequestPositionInSession?);
    v43(v12, &v57[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession], v15);
    v44(v12, 0, 1, v15);
    (*(void (**)(_BYTE *))(*(_QWORD *)v25 + 1248))(v12);
    swift_release();
    v47 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for RequestPositionInSession?);
  }
  else
  {
    v48 = v55;
    (*(void (**)(char *, _BYTE *, uint64_t))(v16 + 32))(v55, v46, v15);
    v43(v12, v48, v15);
    v44(v12, 0, 1, v15);
    (*(void (**)(_BYTE *))(*(_QWORD *)v25 + 1248))(v12);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for RequestPositionInSession?);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v48, v15);
  }
  v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 1280))(v47);
  swift_release();
  return v49;
}

uint64_t ConcurrentTaskPool.add(work:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in ConcurrentTaskPool.add(work:), (uint64_t)v9);
  (*(void (**)(void))(*(_QWORD *)v2 + 120))();
  return swift_release();
}

char **static SiriKitExecutorRunUtils.getInputAndRRData(from:requestContextData:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char **result;
  char **v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  char **v33;
  uint64_t v34;
  id v35;
  void *v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  uint64_t v51[5];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Parse();
  v48 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v47 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecuteOnRemotePayload?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ExecuteOnRemotePayload();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((SAIntentGroupRunSiriKitExecutor.hasExecuteOnRemotePayload.getter() & 1) != 0)
  {
    SAIntentGroupRunSiriKitExecutor.executeOnRemotePayload()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
      if (one-time initialization token for executor != -1)
        swift_once();
      v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
      v43 = Logger.logObject.getter();
      v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        v46 = swift_slowAlloc();
        v51[0] = v46;
        *(_DWORD *)v45 = 136315138;
        v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x80000001B4F02780, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v43, v44, "%s: Found ExecuteOnRemote payload from remote device in RunSiriKitExecutor command, using that as Input", v45, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v46, -1, -1);
        MEMORY[0x1B5E44758](v45, -1, -1);
      }

      ExecuteOnRemotePayload.input.getter();
      v41 = ExecuteOnRemotePayload.rrData.getter();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      return (char **)v41;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, &demangling cache variable for type metadata for ExecuteOnRemotePayload?);
  }
  v47[1] = a1;
  result = (char **)objc_msgSend(a2, sel_parse);
  if (result)
  {
    v23 = result;
    v24 = *(void **)(a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
    v25 = type metadata accessor for PeerInfoProvider();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v24;
    v51[3] = v25;
    v51[4] = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, (uint64_t (*)(uint64_t))type metadata accessor for PeerInfoProvider, (uint64_t)&protocol conformance descriptor for PeerInfoProvider);
    v51[0] = v26;
    v27 = *(void **)(a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
    v28 = type metadata accessor for EndpointInfoProvider();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = v27;
    v50[3] = v28;
    v50[4] = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type EndpointInfoProvider and conformance EndpointInfoProvider, (uint64_t (*)(uint64_t))type metadata accessor for EndpointInfoProvider, (uint64_t)&protocol conformance descriptor for EndpointInfoProvider);
    v50[0] = v29;
    v30 = v27;
    v31 = v24;
    v32 = objc_msgSend(a2, sel_confirmationState);
    if (!v32)
    {
      v34 = type metadata accessor for SiriKitConfirmationState();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v8, 1, 1, v34);
      goto LABEL_9;
    }

    result = (char **)objc_msgSend(a2, sel_confirmationState);
    if (result)
    {
      v33 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      SiriKitConfirmationState.init(rawValue:)();
LABEL_9:
      v35 = objc_msgSend(a2, sel_parameterMetadata);
      if (v35)
      {
        v36 = v35;
        type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitParameterMetadata);
        v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      }
      else
      {
        v37 = 0;
      }
      v38 = objc_msgSend(a2, sel_appSelectionState);
      static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)(v23, v51, v50, (uint64_t)v8, v37, v38, (uint64_t)v14);

      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for SiriKitConfirmationState?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      specialized static SiriKitExecutorRunUtils.makeAlternatives(from:)(a2);
      v40 = v48;
      v39 = v49;
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v12, v14, v49);
      Input.init(parse:alternatives:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v39);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t type metadata accessor for PeerInfoProvider()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for EndpointInfoProvider()
{
  return objc_opt_self();
}

uint64_t static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)@<X0>(char **a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  Class v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  void *v40;
  objc_class *v41;
  uint64_t v42;
  objc_class *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  objc_class *v49;
  char v50;
  char **v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  char **v58;
  Class isa;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  objc_class *v72;
  char v73;
  id v74;
  void *v75;
  objc_class *v76;
  char **v77;
  unint64_t v78;
  unint64_t v79;
  char **v80;
  char *v81;
  char *v82;
  char *v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  objc_class *v97;
  char v98;
  char *v99;
  id v100;
  id v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  objc_class *v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  objc_class *v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  void *v130;
  char *v131;
  Swift::String v132;
  _QWORD v133[2];
  char *v134;
  char *v135;
  objc_class *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;

  v151 = a6;
  v152 = a4;
  v157 = a5;
  v149 = a2;
  v150 = a3;
  v141 = type metadata accessor for Parse.PegasusResult();
  v140 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141);
  v139 = (char *)v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v11);
  v133[1] = (char *)v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse?);
  MEMORY[0x1E0C80A78](v13);
  v136 = (objc_class *)((char *)v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v137 = *(_QWORD *)(v138 - 8);
  v15 = MEMORY[0x1E0C80A78](v138);
  v134 = (char *)v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v135 = (char *)v133 - v17;
  v18 = type metadata accessor for String.Encoding();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v142 = (uint64_t)v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v133 - v25;
  v27 = type metadata accessor for SiriKitConfirmationState();
  v147 = *(_QWORD *)(v27 - 8);
  v148 = v27;
  v28 = MEMORY[0x1E0C80A78](v27);
  v145 = (char *)v133 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v146 = (char *)v133 - v30;
  v155 = type metadata accessor for AppResolutionStateProvider();
  v153 = *(_QWORD *)(v155 - 8);
  v31 = MEMORY[0x1E0C80A78](v155);
  v144 = (char *)v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)v133 - v33;
  v156 = type metadata accessor for NLIntent();
  v154 = *(_QWORD *)(v156 - 8);
  v35 = MEMORY[0x1E0C80A78](v156);
  v143 = (char *)v133 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v38 = (char *)v133 - v37;
  v159 = a1;
  v39 = objc_msgSend(a1, sel_type);
  if (!v39)
    goto LABEL_70;
  v40 = v39;
  a1 = (char **)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v41;

  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v7)
  {
LABEL_71:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    v19 = (uint64_t)v159;
    goto LABEL_72;
  }
  v158 = a7;
  if ((char **)v42 == a1 && v7 == v43)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    v45 = v158;
    static SiriKitExecutorRunUtils.makeNLv3Parse(parse:)(v159);
    v46 = *MEMORY[0x1E0D9C5E0];
    v47 = type metadata accessor for Parse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v45, v46, v47);
  }
  v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v44 & 1) != 0)
    goto LABEL_7;
  if ((char **)static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v7 == v49)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    v19 = (uint64_t)&selRef_reason;
    v51 = v159;
    v52 = objc_msgSend(v159, sel_siriKitIntent);
    if (v52)
    {
      v53 = v52;
      v7 = (Class)objc_msgSend(v52, sel_typeName);

      if (!v7)
      {
LABEL_77:
        specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000020, 0x80000001B4F029B0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 77);
        __break(1u);
LABEL_78:
        specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000024, 0x80000001B4F029E0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 81);
        __break(1u);
        goto LABEL_79;
      }
      v54 = objc_msgSend(v51, sel_siriKitIntent);
      if (v54)
      {
        v55 = v54;
        v56 = objc_msgSend(v54, sel_data);

        if (v56)
        {
          v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          a1 = v58;

          isa = Data._bridgeToObjectiveC()().super.isa;
          v60 = (id)INIntentCreate();

          if (v60)
          {
            specialized static SiriKitExecutorRunUtils.addIntentMetadata(intent:peerInfo:endpointInfo:)(v60, v149, v150);
            static SiriKitExecutorRunUtils.makeNLv3Parse(parse:)(v51);
            v61 = v151;
            AppResolutionStateProvider.init(appSelectionState:)();
            outlined init with copy of ReferenceResolutionClientProtocol?(v152, (uint64_t)v26, &demangling cache variable for type metadata for SiriKitConfirmationState?);
            v63 = v147;
            v62 = v148;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v26, 1, v148) == 1)
            {
              (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v146, *MEMORY[0x1E0D9B358], v62);
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, &demangling cache variable for type metadata for SiriKitConfirmationState?);
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v146, v26, v62);
            }
            if (v157)
              v64 = v157;
            else
              v64 = MEMORY[0x1E0DEE9D8];
            swift_bridgeObjectRetain();
            specialized static SiriKitExecutorRunUtils.makeSiriKitParameterMetadata(aceParameterMetadata:)(v64);
            swift_bridgeObjectRelease();
            v65 = v155;
            *((_QWORD *)&v162 + 1) = v155;
            v163 = MEMORY[0x1E0D97958];
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v161);
            v67 = v153;
            (*(void (**)(uint64_t *, char *, uint64_t))(v153 + 16))(boxed_opaque_existential_1, v34, v65);
            type metadata accessor for Parse.ServerConversion();
            swift_allocObject();
            v68 = Parse.ServerConversion.init(siriKitIntent:confirmationState:parameterMetadata:appResolutionStateProviding:)();
            outlined consume of Data._Representation(v57, (unint64_t)a1);
            (*(void (**)(char *, uint64_t))(v67 + 8))(v34, v65);
            v69 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion))
                         + 48);
            v70 = v158;
            (*(void (**)(uint64_t, char *, uint64_t))(v154 + 32))(v158, v38, v156);
            *(_QWORD *)(v70 + v69) = v68;
LABEL_41:
            v95 = *MEMORY[0x1E0D9C668];
            v96 = type metadata accessor for Parse();
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 104))(v70, v95, v96);
          }
          goto LABEL_78;
        }
        goto LABEL_76;
      }
    }
    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_68;
  }
  v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
    goto LABEL_12;
  v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = (char *)v72;
  if ((char **)v71 == a1 && v7 == v72)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    a1 = v159;
    v74 = objc_msgSend(v159, sel_jsonIntent);
    if (!v74)
    {
LABEL_80:
      specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000033, 0x80000001B4F02940, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 97);
      __break(1u);
LABEL_81:
      specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000002FLL, 0x80000001B4F02980, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 102);
      __break(1u);
      goto LABEL_82;
    }
    v75 = v74;
    v26 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v76;

    v77 = (char **)objc_msgSend(a1, sel_jsonIntentTypeName);
    if (v77)
    {
      a1 = v77;
      static String.Encoding.utf8.getter();
      v26 = (char *)String.data(using:allowLossyConversion:)();
      v79 = v78;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      if (v79 >> 60 == 15)
      {
        v7 = 0;
      }
      else
      {
        outlined copy of Data._Representation((uint64_t)v26, v79);
        v7 = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data?((uint64_t)v26, v79);
      }
      v80 = v159;
      v81 = v145;
      v82 = v144;
      v83 = v143;
      v84 = (id)INIntentCreate();

      if (v84)
      {
        specialized static SiriKitExecutorRunUtils.addIntentMetadata(intent:peerInfo:endpointInfo:)(v84, v149, v150);
        static SiriKitExecutorRunUtils.makeNLv3Parse(parse:)(v80);
        v85 = v151;
        AppResolutionStateProvider.init(appSelectionState:)();
        v86 = v142;
        outlined init with copy of ReferenceResolutionClientProtocol?(v152, v142, &demangling cache variable for type metadata for SiriKitConfirmationState?);
        v88 = v147;
        v87 = v148;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v86, 1, v148) == 1)
        {
          (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v81, *MEMORY[0x1E0D9B358], v87);
          outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for SiriKitConfirmationState?);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v81, v86, v87);
        }
        if (v157)
          v89 = v157;
        else
          v89 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized static SiriKitExecutorRunUtils.makeSiriKitParameterMetadata(aceParameterMetadata:)(v89);
        swift_bridgeObjectRelease();
        v90 = v155;
        *((_QWORD *)&v162 + 1) = v155;
        v163 = MEMORY[0x1E0D97958];
        v91 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v161);
        v92 = v153;
        (*(void (**)(uint64_t *, char *, uint64_t))(v153 + 16))(v91, v82, v90);
        type metadata accessor for Parse.ServerConversion();
        swift_allocObject();
        v93 = Parse.ServerConversion.init(siriKitIntent:confirmationState:parameterMetadata:appResolutionStateProviding:)();
        outlined consume of Data?((uint64_t)v26, v79);
        (*(void (**)(char *, uint64_t))(v92 + 8))(v82, v90);
        v94 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion))
                     + 48);
        v70 = v158;
        (*(void (**)(uint64_t, char *, uint64_t))(v154 + 32))(v158, v83, v156);
        *(_QWORD *)(v70 + v94) = v93;
        goto LABEL_41;
      }
      goto LABEL_81;
    }
LABEL_79:
    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v73 & 1) != 0)
    goto LABEL_28;
  if ((char **)static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v7 == v97)
  {
    swift_bridgeObjectRelease();
    v19 = (uint64_t)v159;
  }
  else
  {
    v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v19 = (uint64_t)v159;
    if ((v98 & 1) == 0)
    {
      if ((char **)static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v7 == v106)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v112 & 1) == 0)
        {
          if ((char **)static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v7 == v125)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v126 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v126 & 1) == 0)
            {
LABEL_72:
              *(_QWORD *)&v161 = 0;
              *((_QWORD *)&v161 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              swift_bridgeObjectRelease();
              *(_QWORD *)&v161 = 0xD000000000000014;
              *((_QWORD *)&v161 + 1) = 0x80000001B4F02800;
              v129 = objc_msgSend((id)v19, sel_type);
              if (v129)
              {
                v130 = v129;
                v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v26 = v131;

              }
              else
              {
                v26 = (char *)0xE500000000000000;
                v19 = 0x3E4C494E3CLL;
              }
              v132._countAndFlagsBits = v19;
              v132._object = v26;
              String.append(_:)(v132);
              swift_bridgeObjectRelease();
              specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v161, *((unint64_t *)&v161 + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 144);
              __break(1u);
LABEL_76:

              goto LABEL_77;
            }
          }
          v127 = *MEMORY[0x1E0D9C688];
          v128 = type metadata accessor for Parse();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 104))(v158, v127, v128);
        }
      }
      swift_bridgeObjectRelease();
      v113 = objc_msgSend((id)v19, sel_pegasusResults);
      if (v113)
      {
        v114 = v113;
        v115 = objc_msgSend(v113, sel_data);

        a1 = (char **)v138;
        v7 = v136;
        if (v115)
        {
          v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v118 = v117;

          v163 = 0;
          v161 = 0u;
          v162 = 0u;
          outlined copy of Data._Representation(v116, v118);
          BinaryDecodingOptions.init()();
          lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D1E0], MEMORY[0x1E0D6D198]);
          Message.init(serializedData:extensions:partial:options:)();
          v119 = v137;
          (*(void (**)(Class, _QWORD, uint64_t, char **))(v137 + 56))(v7, 0, 1, a1);
          v120 = v135;
          (*(void (**)(char *, Class, char **))(v119 + 32))(v135, v7, a1);
          (*(void (**)(char *, char *, char **))(v119 + 16))(v134, v120, a1);
          v121 = v139;
          Parse.PegasusResult.init(pegasusResponse:)();
          outlined consume of Data._Representation(v116, v118);
          (*(void (**)(char *, char **))(v119 + 8))(v120, a1);
          v122 = v158;
          (*(void (**)(uint64_t, char *, uint64_t))(v140 + 32))(v158, v121, v141);
          v123 = *MEMORY[0x1E0D9C5F0];
          v124 = type metadata accessor for Parse();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 104))(v122, v123, v124);
        }
        goto LABEL_84;
      }
      goto LABEL_69;
    }
  }
  swift_bridgeObjectRelease();
  v99 = (char *)objc_msgSend((id)v19, sel_directInvocation);
  if (v99)
  {
    v26 = v99;
    a1 = &selRef_reason;
    v100 = objc_msgSend(v99, sel_invocationIdentifier);
    if (!v100)
    {
LABEL_82:

      goto LABEL_83;
    }

    v101 = objc_msgSend(v26, sel_data);
    if (v101)
    {
      v102 = v101;
      v103 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v105 = v104;

      if (v105 >> 60 != 15)
      {
        *(_QWORD *)&v161 = v103;
        *((_QWORD *)&v161 + 1) = v105;
        closure #1 in static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)(&v160);
        outlined consume of Data?(v103, v105);
      }
    }
    v107 = objc_msgSend(v26, sel_invocationIdentifier);
    if (v107)
    {
      v108 = v107;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v109 = v158;
      Parse.DirectInvocation.init(identifier:userData:)();

      v110 = *MEMORY[0x1E0D9C658];
      v111 = type metadata accessor for Parse();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 104))(v109, v110, v111);
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_71;
  }
LABEL_83:
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000004ELL, 0x80000001B4F028F0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 116);
  __break(1u);
LABEL_84:
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000023, 0x80000001B4F02890, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 131);
  __break(1u);

  (*(void (**)(Class, uint64_t, uint64_t, char **))(v137 + 56))(v7, 1, 1, a1);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse?);
  result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000002BLL, 0x80000001B4F028C0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 135);
  __break(1u);
  return result;
}

uint64_t static SiriKitExecutorRunUtils.makeNLv3Parse(parse:)(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  Swift::String v8;

  v1 = objc_msgSend(a1, sel_nlv3Parse);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_data);

    if (v3)
    {
      v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v6 = v5;

      outlined copy of Data._Representation(v4, v6);
      NLIntent.init(protobufData:)();
      return outlined consume of Data._Representation(v4, v6);
    }
  }
  else
  {
    __break(1u);
  }
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000001FLL, 0x80000001B4F02A60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 232);
  __break(1u);
  _StringGuts.grow(_:)(37);
  v8._countAndFlagsBits = 0xD000000000000023;
  v8._object = (void *)0x80000001B4F02A80;
  String.append(_:)(v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0, 0xE000000000000000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/SiriKitExecutorRunUtils.swift", 98, 2, 237);
  __break(1u);
  return result;
}

uint64_t EndpointInfoProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t PeerInfoProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void specialized static SiriKitExecutorRunUtils.makeAlternatives(from:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id *v46;
  id v47;
  id v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  _QWORD v66[2];
  unsigned int v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLIntent?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NLIntent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  MEMORY[0x1E0C80A78](v9);
  v73 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Parse();
  v75 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v74 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v66 - v14;
  v16 = objc_msgSend(a1, sel_parse);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  v18 = objc_msgSend(v16, sel_type);

  if (!v18)
    goto LABEL_22;
  v70 = v15;
  v71 = v6;
  v68 = v8;
  v72 = v5;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v21)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_24:
    swift_bridgeObjectRelease();
    return;
  }
  v24 = (uint64_t)v73;
  if (v22 == v19 && v21 == v23)
    goto LABEL_12;
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
    goto LABEL_13;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v19 && v21 == v26)
    goto LABEL_12;
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v19 && v21 == v28)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
    return;
LABEL_14:
  v29 = objc_msgSend(a1, sel_parse);
  if (!v29)
    return;
  v30 = v29;
  v31 = objc_msgSend(v29, sel_nlv3ParseWithAlternatives);

  if (!v31)
    return;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupProtobufMessage);
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v33 = v32 >> 62;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v34)
      goto LABEL_24;
  }
  else
  {
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
      goto LABEL_24;
  }
  if (v34 < 1)
  {
    __break(1u);
    goto LABEL_56;
  }
  if (v33)
  {
    swift_bridgeObjectRetain();
    v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v36 < 1)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    swift_bridgeObjectRetain();
    v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v35)
    {
      __break(1u);
LABEL_22:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_23;
    }
  }
  if (v35 < v34)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if ((v32 & 0xC000000000000001) != 0 && v34 != 1)
  {
    v37 = 1;
    do
    {
      v38 = v37 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v37);
      v37 = v38;
    }
    while (v34 != v38);
  }
  if (!v33)
  {
    v39 = v32 & 0xFFFFFFFFFFFFFF8;
    v40 = (v32 & 0xFFFFFFFFFFFFFF8) + 32;
    v41 = 1;
    v43 = v34 - 1;
    v42 = v34 <= 1;
    if (v34 != 1)
      goto LABEL_35;
LABEL_49:
    swift_unknownObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v39 = _CocoaArrayWrapper.subscript.getter();
  v40 = v61;
  v41 = v62;
  v64 = v63;
  swift_bridgeObjectRelease_n();
  v43 = (v64 >> 1) - v41;
  v42 = (uint64_t)(v64 >> 1) <= v41;
  if (v64 >> 1 == v41)
    goto LABEL_49;
LABEL_35:
  v69 = v4;
  if (v42)
  {
LABEL_58:
    __break(1u);
    return;
  }
  v44 = v41;
  v67 = *MEMORY[0x1E0D9C5E0];
  v66[1] = v39;
  swift_unknownObjectRetain();
  v45 = MEMORY[0x1E0DEE9D8];
  v46 = (id *)(v40 + 8 * v44);
  do
  {
    v47 = *v46;
    v48 = objc_msgSend(v47, sel_data);
    if (v48)
    {
      v49 = v48;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      v50 = v69;
      NLIntent.init(protobufData:)();
      v51 = v71;
      v52 = v72;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v50, 0, 1, v72);
      v53 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v54 = v68;
      v53(v68, v50, v52);
      v24 = (uint64_t)v73;
      v53(v73, v54, v52);
      v55 = v75;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v75 + 104))(v24, v67, v11);
      v56 = 0;
    }
    else
    {
      v56 = 1;
      v55 = v75;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v24, v56, 1, v11);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v24, 1, v11) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for Parse?);
    }
    else
    {
      v57 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 32);
      v58 = v70;
      v57(v70, v24, v11);
      v57(v74, (uint64_t)v58, v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
      v60 = *(_QWORD *)(v45 + 16);
      v59 = *(_QWORD *)(v45 + 24);
      if (v60 >= v59 >> 1)
        v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1, v45);
      *(_QWORD *)(v45 + 16) = v60 + 1;
      v57((char *)(v45+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v60), (uint64_t)v74, v11);
    }
    ++v46;
    --v43;
  }
  while (v43);
  swift_unknownObjectRelease_n();
}

uint64_t specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)()
{
  uint64_t v0;
  uint64_t v1;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(_QWORD *)(v0 + 80), *(const char **)(v0 + 56), *(_QWORD *)(v0 + 64), *(unsigned __int8 *)(v0 + 168));
  swift_release();
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_allocObject();
  *(_QWORD *)(v0 + 144) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 88);
  swift_unknownObjectRetain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  *v2 = v0;
  v2[1] = specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
  return withTimeout<A>(seconds:operation:)();
}

{
  uint64_t v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t result;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  uint8_t *v10;
  os_signpost_id_t v11;

  v1 = OSSignposter.logHandle.getter();
  v2 = static os_signpost_type_t.begin.getter();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v4 = *(const char **)(v0 + 56);
  if ((*(_BYTE *)(v0 + 168) & 1) != 0)
  {
    if ((unint64_t)v4 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v4 >> 11 == 27)
      {
LABEL_16:
        __break(1u);
        return result;
      }
      if (v4 >> 16 <= 0x10)
      {
        v4 = (const char *)(v0 + 40);
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  if (v4)
  {
LABEL_10:
    v7 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 16);
    v9(v6, *(_QWORD *)(v0 + 72), v8);
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    v11 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v1, v2, v11, v4, "", v10, 2u);
    MEMORY[0x1B5E44758](v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 104));
    goto LABEL_11;
  }
  __break(1u);
LABEL_5:
  v5 = *(_QWORD *)(v0 + 112);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 104));
LABEL_11:
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(_QWORD *)(v0 + 128) = OSSignpostIntervalState.init(id:isOpen:)();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v0 + 136) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(_QWORD *)(v0 + 80), *(const char **)(v0 + 56), *(_QWORD *)(v0 + 64), *(unsigned __int8 *)(v0 + 168));
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_release();
  return swift_task_switch();
}

uint64_t specialized OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 88) = a6;
  *(_QWORD *)(v7 + 96) = a7;
  *(_QWORD *)(v7 + 72) = a4;
  *(_QWORD *)(v7 + 80) = a5;
  *(_BYTE *)(v7 + 168) = a3;
  *(_QWORD *)(v7 + 56) = a1;
  *(_QWORD *)(v7 + 64) = a2;
  v8 = type metadata accessor for OSSignpostID();
  *(_QWORD *)(v7 + 104) = v8;
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1, v5, v4);
}

uint64_t closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = one-time initialization token for shared;
  swift_unknownObjectRetain();
  if (v3 != -1)
    swift_once();
  v4 = *(_QWORD *)(v0 + 64);
  v11 = *(_OWORD *)(v0 + 48);
  swift_beginAccess();
  v5 = static MessageBusActor.shared;
  v7 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v6, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v7;
  *(_OWORD *)(v8 + 32) = v11;
  swift_retain();
  *(_QWORD *)(v0 + 72) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSo15AFSpeechPackageCSg_Tgm5(v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  *v9 = v0;
  v9[1] = closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return Task<>.value.getter();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.fetchSpeechInfo(reply:)(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t Strong;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t (*)(_QWORD), uint64_t))(*(_QWORD *)Strong + 520))(a1, a2);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "RunSiriKitExecutorProcessor already released, ignoring fetchSpeechInfo", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    return a1(0);
  }
}

void RunSiriKitExecutorProcessor.fetchSpeechInfo(reply:)(void (*a1)(void))
{
  uint64_t v1;
  id v3;

  v3 = objc_msgSend(*(id *)(v1 + 24), sel_speechInfo);
  a1();

}

uint64_t $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  uint64_t result;
  const char *v17;
  uint8_t *v18;
  os_signpost_id_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  char v25;

  v23 = a4;
  v24 = (char *)a2;
  v4 = type metadata accessor for OSSignpostError();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v21 - v13;
  v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v22 = static os_signpost_type_t.end.getter();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  if ((v23 & 1) == 0)
  {
    if (!v24)
    {
      __break(1u);
LABEL_5:

      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v24 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v24 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v24 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v24 = &v25;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == *MEMORY[0x1E0DF2190])
  {
    v17 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v17 = "";
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  v18 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v18 = 0;
  v19 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v15, (os_signpost_type_t)v22, v19, v24, v17, v18, 2u);
  MEMORY[0x1B5E44758](v18, -1, -1);

  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v14, v8);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, v8);
}

uint64_t static SiriKitExecutorRunUtils.interactionTypeFrom(aceValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  InteractionType.init(aceValue:)();
  v9 = type metadata accessor for InteractionType();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for InteractionType?);
  if (one-time initialization token for executor != -1)
    swift_once();
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(a3, *MEMORY[0x1E0DA8018], v9);
}

uint64_t static SiriKitExecutorRunUtils.bargeInContextFrom(command:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v3 = objc_msgSend(a1, sel_dictionary);
  if (v3
    && (v4 = v3,
        v7 = v3,
        closure #1 in static SiriKitExecutorRunUtils.bargeInContextFrom(command:)(&v7, &v8),
        v4,
        v8))
  {
    closure #2 in static SiriKitExecutorRunUtils.bargeInContextFrom(command:)(&v8, a2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v6 = type metadata accessor for BargeInContext();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 1, 1, v6);
  }
}

uint64_t closure #1 in static SiriKitExecutorRunUtils.bargeInContextFrom(command:)@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  uint64_t result;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v3 = *a1;
  strcpy((char *)v6, "bargeInState");
  BYTE13(v6[0]) = 0;
  HIWORD(v6[0]) = -5120;
  v4 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v6[0]);
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v6, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v8)
  {
    result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
LABEL_8:
    *a2 = 0;
  return result;
}

uint64_t closure #2 in static SiriKitExecutorRunUtils.bargeInContextFrom(command:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _BYTE v38[32];
  char *v39;

  v4 = type metadata accessor for BargeInMode();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date();
  v36 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)&v33 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v33 - v16;
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 16);
  v35 = v7;
  if (v19
    && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(0x4D6E496567726162, 0xEC0000007365646FLL), (v21 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v20, (uint64_t)v38),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]),
        swift_dynamicCast()))
  {
    v22 = (uint64_t)v39;
  }
  else
  {
    v22 = MEMORY[0x1E0DEE9D8];
  }
  v23 = type metadata accessor for DateInterval();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v17, 1, 1, v23);
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_18;
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, 0x80000001B4F02BD0);
  if ((v26 & 1) == 0)
    goto LABEL_18;
  outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v25, (uint64_t)v38);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_18;
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_18;
  v34 = v39;
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ELL, 0x80000001B4F02BF0);
  if ((v28 & 1) == 0)
    goto LABEL_18;
  outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v27, (uint64_t)v38);
  result = swift_dynamicCast();
  if ((result & 1) == 0 || !v34 || !v39)
    goto LABEL_18;
  v30 = v34 - v39;
  if (__OFSUB__(v34, v39))
  {
    __break(1u);
  }
  else if ((v30 & 0x8000000000000000) == 0 || !__OFSUB__(0, v30))
  {
    Date.init()();
    Date.addingTimeInterval(_:)();
    v31 = v35;
    v34 = *(char **)(v36 + 8);
    ((void (*)(char *, uint64_t))v34)(v10, v35);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v10, v37, v31);
    DateInterval.init(start:duration:)();
    ((void (*)(char *, uint64_t))v34)(v37, v31);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    v24(v15, 0, 1, v23);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v15, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
LABEL_18:
    static BargeInMode.from(aceModes:)(v22, (uint64_t)v6);
    swift_bridgeObjectRelease();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    BargeInContext.init(mode:approximatePreviousTTSInterval:)();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    v32 = type metadata accessor for BargeInContext();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a2, 0, 1, v32);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ProxiedRequestContext(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ProxiedRequestContext);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t Strong;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v10 = objc_msgSend(*(id *)(Strong + 24), sel_requestID);
    if (v10)
    {
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;

    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    static ServiceBridgeDelegate.fetchContextsDefault(for:includesNearByDevices:requestId:serviceHelper:completion:)(a1, a2 & 1, v12, v14, *(void **)(v4 + 24), (uint64_t)a3, a4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v24 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain();
      v20 = Set.description.getter();
      v22 = v21;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v16, v17, "RunSiriKitExecutorProcessor already released, ignoring fetchContexts of %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v19, -1, -1);
      MEMORY[0x1B5E44758](v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return a3(0);
  }
}

Swift::Void __swiftcall ProxiedRequestContext.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  char **v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  Class isa;
  void *v57;
  void (*v58)(char *, uint64_t);
  void *v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v4);
  v70 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for DateInterval();
  v6 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v65 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BargeInMode();
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  MEMORY[0x1E0C80A78](v8);
  v67 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BargeInContext();
  v73 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId + 8))
  {
    v16 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId));
    v17 = (void *)MEMORY[0x1B5E432E8](0x6449656361, 0xE500000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v16, v17);

  }
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId + 8))
  {
    v18 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId));
    v19 = (void *)MEMORY[0x1B5E432E8](0x6449666572, 0xE500000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v18, v19);

  }
  v20 = InteractionType.rawValue.getter();
  v21 = (void *)MEMORY[0x1B5E432E8](v20);
  swift_bridgeObjectRelease();
  v22 = (void *)MEMORY[0x1B5E432E8](0x7463617265746E69, 0xEF657079546E6F69);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v21, v22);

  v23 = InputOrigin.rawValue.getter();
  v24 = (void *)MEMORY[0x1B5E432E8](v23);
  swift_bridgeObjectRelease();
  v25 = (void *)MEMORY[0x1B5E432E8](0x69724F7475706E69, 0xEB000000006E6967);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v24, v25);

  v26 = *(void **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard);
  if (v26)
  {
    v27 = v26;
    v28 = (void *)MEMORY[0x1B5E432E8](0x726143654D656361, 0xE900000000000064);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v27, v28);

  }
  v66 = v15;
  v71 = v6;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId + 8))
  {
    v29 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v2
                                                + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId));
    v30 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001ALL, 0x80000001B4EF50F0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v29, v30);

  }
  v31 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled);
  v32 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF5110);
  v33 = &selRef_reason;
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v31, v32);

  v34 = *(unsigned __int8 *)(v2
                           + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_requiresConditionalMultiUserGrounding);
  v35 = (void *)MEMORY[0x1B5E432E8](0xD000000000000025, 0x80000001B4EF5130);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v34, v35);

  v36 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree);
  v37 = (void *)MEMORY[0x1B5E432E8](0x7246736579457369, 0xEA00000000006565);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v36, v37);

  v38 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled);
  v39 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5160);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v38, v39);

  v40 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled);
  v41 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5180);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v40, v41);

  v42 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction);
  v43 = (void *)MEMORY[0x1B5E432E8](0x7463657269447369, 0xEE006E6F69746341);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v42, v43);

  v44 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId), *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId + 8));
  v45 = (void *)MEMORY[0x1B5E432E8](0x7463617265746E69, 0xED000064496E6F69);
  objc_msgSend(with.super.isa, (SEL)&selRef_setExecutionForRSKE_, v44, v45);

  outlined init with copy of ReferenceResolutionClientProtocol?(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  v46 = v73;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  }
  else
  {
    v47 = v66;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v66, v12, v13);
    v48 = v67;
    BargeInContext.mode.getter();
    v49 = BargeInMode.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v48, v69);
    v50 = (void *)MEMORY[0x1B5E432E8](0x4D6E496567726162, 0xEB0000000065646FLL);
    -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v49, v50);

    v51 = (uint64_t)v70;
    BargeInContext.approximatePreviousTTSInterval.getter();
    v53 = v71;
    v52 = v72;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v51, 1, v72) == 1)
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v13);
      outlined destroy of ReferenceResolutionClientProtocol?(v51, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
      v33 = &selRef_reason;
    }
    else
    {
      v54 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
      v69 = v13;
      v55 = v65;
      v54(v65, v51, v52);
      isa = DateInterval._bridgeToObjectiveC()().super.isa;
      v57 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF51C0);
      -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v57);

      v58 = *(void (**)(char *, uint64_t))(v53 + 8);
      v33 = &selRef_reason;
      v58(v55, v52);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v69);
    }
  }
  v59 = *(void **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution);
  if (v59)
  {
    v60 = v59;
    v61 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF51E0);
    objc_msgSend(with.super.isa, v33[34], v60, v61);

  }
  v62 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId), *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId + 8));
  v63 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF49F0);
  objc_msgSend(with.super.isa, v33[34], v62, v63);

}

uint64_t specialized static RunLocation.convert(aceRunLocation:)(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    static os_log_type_t.info.getter();
    os_log(_:dso:log:type:_:)();
    return 0;
  }
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunLocation.init(rawValue:), v4);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_9;
  }
  if (v5 != 1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1B4EE3F50;
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v8 + 32) = a1;
    *(_QWORD *)(v8 + 40) = a2;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  v6 = 1;
LABEL_9:
  if (one-time initialization token for executor != -1)
    swift_once();
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(v7 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return v6;
}

void InvocationStateImpl.init(proxiedRequestContext:localRequestContextData:executionRequestId:)(_BYTE *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void (*v23)(void);
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  _BYTE v36[4];
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _QWORD *v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;

  v43 = a3;
  v44 = a4;
  v41 = a5;
  v42 = a1;
  v6 = type metadata accessor for ResponseMode();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v13);
  v15 = &v36[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  MEMORY[0x1E0C80A78](v16);
  v18 = &v36[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for Restrictions();
  MEMORY[0x1E0C80A78](v19);
  v21 = &v36[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = *(void (**)(void))(v22 + 16);
  v39 = v21;
  v23();
  v24 = *(void **)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome];
  v40 = v18;
  if (v24)
  {
    v25 = v24;
    AFHomeInfo.asInternalHomeInfo.getter();

    v26 = type metadata accessor for HomeInfo();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v18, 0, 1, v26);
  }
  else
  {
    v27 = type metadata accessor for HomeInfo();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v18, 1, 1, v27);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource], (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination], (uint64_t)v12, &demangling cache variable for type metadata for AudioDestination?);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v9, &a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode], v6);
  v28 = *(_QWORD *)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo];
  v37 = *(_DWORD *)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId];
  v38 = v15;
  v29 = a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled];
  v30 = a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled];
  v31 = a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported];
  v32 = *(_QWORD *)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId];
  v33 = *(_QWORD *)&a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId + 8];
  v34 = (uint64_t)v9;
  v35 = a2[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  InvocationStateImpl.init(proxiedRequestContext:restrictions:executionRequestId:originatingHome:audioSource:audioDestination:responseMode:currentDeviceAssistantId:voiceTriggerEventInfo:voiceAudioSessionId:isRMVEnabled:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:)(v42, (uint64_t)v39, v43, v44, (uint64_t)v40, (uint64_t)v38, (uint64_t)v12, v34, v41, v32, v33, v28, v37, v29, v30, v31, v35);

}

uint64_t ProxiedRequestContext.multiUserState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled) != 1)
  {
    v14 = type metadata accessor for MultiUserContext();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  v3 = v1;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution);
  if (!v4 || (v5 = objc_msgSend(v4, sel_runLocation)) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_13;
  }
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v9)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v7 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
LABEL_19:
    v18 = objc_msgSend(v4, sel_executionDeviceAssistantId);
    if (v18)
    {
      v19 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
  }
LABEL_14:
  v16 = *(id *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard);
  if (v16)
    v16 = SAPerson.contact.getter();
  type metadata accessor for DefaultMeCardProxy();
  *(_QWORD *)(swift_allocObject() + 16) = v16;
  lazy protocol witness table accessor for type DefaultMeCardProxy and conformance DefaultMeCardProxy();
  MultiUserContext.init(requiresUserGrounding:meCardProxy:handoffTargetDeviceID:)();
  v17 = type metadata accessor for MultiUserContext();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 0, 1, v17);
}

uint64_t specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v2 = v0[7];
  v1 = (uint64_t *)v0[8];
  v3 = v0[5];
  v11 = v0[6];
  v5 = (_QWORD *)v0[3];
  v4 = v0[4];
  v6 = specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)();
  v8 = v7;
  v0[9] = v6;
  v0[10] = v7;
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  type metadata accessor for SiriKitEvent();
  *v1 = v6;
  v1[1] = v8;
  v1[2] = v4;
  v1[3] = v3;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0D9B1D8], v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[11] = SiriKitEvent.__allocating_init(_:builder:)();
  v9 = (_QWORD *)swift_task_alloc();
  v0[12] = v9;
  *v9 = v0;
  v9[1] = specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:);
  return dispatch thunk of SiriKitEventSending.sendAsync(_:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(void **)(v0 + 80);
  type metadata accessor for CoreAnalyticsService();
  static CoreAnalyticsService.instance.getter();
  v3._countAndFlagsBits = v2;
  v3._object = v1;
  CoreAnalyticsService.sendHandleRequestEvent(intentTypeName:)(v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for SiriKitEventPayload();
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return swift_task_switch();
}

void RunSiriKitExecutorProcessorExecutionDelegate.submit(executionOutput:completion:)(void *a1, void (*a2)(_QWORD, void *), uint64_t a3)
{
  uint64_t Strong;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, void (*)(_QWORD, void *), uint64_t))(*(_QWORD *)Strong + 464))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    v8 = a1;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v17 = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = *(_QWORD *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v13 = *(_QWORD *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v9, v10, "RunSiriKitExecutorProcessor already released, ignoring sumbit of %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v12, -1, -1);
      MEMORY[0x1B5E44758](v11, -1, -1);

    }
    else
    {

    }
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v15 = (void *)swift_allocError();
    *v16 = 0;
    a2(0, v15);

  }
}

void RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(void *a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  char v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  _BYTE *v44;
  os_log_type_t v45;
  _BYTE *v46;
  uint8_t *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  unsigned int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t, _QWORD, _QWORD, uint8_t *, char *, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t (*)(void *, void *), _QWORD *);
  char *v75;
  char *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void (*v85)(void);
  id v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, char *, uint64_t);
  uint8_t *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(_QWORD, _QWORD);
  uint64_t v116;
  _BYTE *v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120[3];
  uint64_t v121;
  uint64_t v122;

  v4 = v3;
  v8 = type metadata accessor for RequestType();
  v109 = *(_QWORD *)(v8 - 8);
  v110 = v8;
  MEMORY[0x1E0C80A78](v8);
  v108 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  v10 = MEMORY[0x1E0C80A78](v105);
  v104 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v99 - v13;
  MEMORY[0x1E0C80A78](v12);
  v111 = (char *)&v99 - v15;
  v16 = type metadata accessor for UserID();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v103 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v107 = (char *)&v99 - v21;
  MEMORY[0x1E0C80A78](v20);
  v112 = (char *)&v99 - v22;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  v25 = a1;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  v28 = os_log_type_enabled(v26, v27);
  v117 = v4;
  v114 = v17;
  v106 = v14;
  v113 = v24;
  v115 = a2;
  v116 = a3;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v120[0] = v30;
    *(_DWORD *)v29 = 136315138;
    v101 = v29 + 4;
    v31 = v25;
    v32 = objc_msgSend(v25, sel_debugDescription);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v16;
    v36 = v35;

    v25 = v31;
    *(_QWORD *)&v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v36, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v16 = v34;
    v17 = v114;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v26, v27, "<<<--- %s", v29, 0xCu);
    swift_arrayDestroy();
    v37 = v30;
    v4 = v117;
    MEMORY[0x1B5E44758](v37, -1, -1);
    v38 = v29;
    a2 = v115;
    MEMORY[0x1B5E44758](v38, -1, -1);

  }
  else
  {

  }
  v39 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 368))();
  v40 = Logger.logObject.getter();
  if ((v39 & 1) == 0)
  {
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v45))
    {
      v46 = v4;
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v45, "Handling submit() from Execution kicked off by RSKE", v47, 2u);
      v48 = v47;
      v4 = v46;
      MEMORY[0x1B5E44758](v48, -1, -1);
    }

    v101 = v4 + 96;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)(v4 + 96), (uint64_t)v120, &demangling cache variable for type metadata for ContextUpdating?);
    v49 = v121;
    v50 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v120, &demangling cache variable for type metadata for ContextUpdating?);
    v102 = v16;
    if (v49)
    {
      v51 = (uint64_t)v111;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 272))(v50);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v51, 1, v16) == 1)
      {
        v52 = v25;
        outlined destroy of ReferenceResolutionClientProtocol?(v51, (uint64_t *)&demangling cache variable for type metadata for UserID?);
        v53 = 0;
      }
      else
      {
        v54 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
        v54(v112, v51, v16);
        v55 = v4[168];
        v100 = (void (*)(uint64_t, char *, uint64_t))v54;
        v52 = v25;
        if (v55 > 1)
          LODWORD(v111) = 1;
        else
          LODWORD(v111) = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v56 = v108;
        v57 = v109;
        v58 = v110;
        v59 = (*(uint64_t (**)(char *, _BYTE *, uint64_t))(v109 + 16))(v108, &v4[OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType], v110);
        v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 392))(v59);
        v61 = v107;
        v62 = v112;
        v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 16))(v107, v112, v16);
        v64 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v52) + 0xA0))(v63);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v62, v16);
        type metadata accessor for ConversationContextUpdateMetadata();
        v53 = swift_allocObject();
        *(_BYTE *)(v53 + 16) = v111 & 1;
        (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v53 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v56, v58);
        *(_QWORD *)(v53 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v60;
        v4 = v117;
        v100(v53 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v61, v16);
        *(_BYTE *)(v53 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = v64 & 1;
      }
    }
    else
    {
      v52 = v25;
      v53 = 0;
    }
    v65 = *((_QWORD *)v4 + 6);
    v66 = (char *)*((_QWORD *)v4 + 17);
    v110 = *((_QWORD *)v4 + 18);
    v111 = v66;
    v112 = (char *)*((_QWORD *)v4 + 3);
    v67 = *((_QWORD *)v4 + 20);
    v109 = *((_QWORD *)v4 + 19);
    v68 = &v4[OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId];
    v69 = *(_QWORD *)&v4[OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId];
    v70 = *(_QWORD *)&v4[OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId + 8];
    v71 = (_QWORD *)swift_allocObject();
    v71[2] = v4;
    v71[3] = v52;
    v72 = v52;
    v73 = v116;
    v71[4] = v115;
    v71[5] = v73;
    v74 = *(void (**)(char *, char *, uint64_t, _QWORD, _QWORD, uint8_t *, char *, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t (*)(void *, void *), _QWORD *))(*(_QWORD *)v65 + 264);
    v75 = v72;
    swift_retain();
    swift_retain();
    v98 = v69;
    v76 = v75;
    v77 = (uint64_t)v101;
    v74(v75, v111, v110, 0, 0, v101, v112, v53, v109, v67, v68, v98, v70, partial apply for closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:), v71);
    v78 = v117;
    swift_release();
    if (v78[168])
    {
      if (v78[168] != 1)
      {
        swift_bridgeObjectRelease();
        v79 = v102;
        v80 = v114;
LABEL_27:
        v82 = *(void **)&v76[OBJC_IVAR___SKRExecutionOutput_command];
        if (v82)
        {
          objc_opt_self();
          v83 = swift_dynamicCastObjCClass();
          if (v83)
          {
            v84 = (void *)v83;
            outlined init with copy of ReferenceResolutionClientProtocol?(v77, (uint64_t)&v118, &demangling cache variable for type metadata for ContextUpdating?);
            if (v119)
            {
              outlined init with take of ReferenceResolutionClientProtocol(&v118, (uint64_t)v120);
              v85 = *(void (**)(void))(*(_QWORD *)v78 + 272);
              v86 = v82;
              v87 = (uint64_t)v106;
              v85();
              v88 = v87;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v87, 1, v79) != 1)
              {
                v96 = v103;
                (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v103, v88, v79);
                v97 = v122;
                __swift_project_boxed_opaque_existential_1(v120, v121);
                specialized static ResponseTextExtractionUtil.extractResponseText(fromAddViews:)(v84);
                (*(void (**)(void))(v97 + 32))();

                swift_bridgeObjectRelease();
                swift_release();
                (*(void (**)(char *, uint64_t))(v80 + 8))(v96, v79);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
                return;
              }
              outlined destroy of ReferenceResolutionClientProtocol?(v87, (uint64_t *)&demangling cache variable for type metadata for UserID?);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
              v78 = v117;
            }
            else
            {
              v89 = v82;
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v118, &demangling cache variable for type metadata for ContextUpdating?);
            }
            swift_retain_n();
            v90 = Logger.logObject.getter();
            v91 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v90, v91))
            {
              v116 = v53;
              v92 = (uint8_t *)swift_slowAlloc();
              v93 = swift_slowAlloc();
              v120[0] = v93;
              *(_DWORD *)v92 = 136315138;
              (*(void (**)(void))(*(_QWORD *)v78 + 272))();
              v94 = String.init<A>(describing:)();
              *(_QWORD *)&v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v120);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B4BE6000, v90, v91, "Not updating response text because ContextUpdater is nil or userId = %s", v92, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1B5E44758](v93, -1, -1);
              MEMORY[0x1B5E44758](v92, -1, -1);

            }
            else
            {

              swift_release_n();
            }

          }
        }
LABEL_37:
        swift_release();
        return;
      }
      v79 = v102;
      v80 = v114;
    }
    else
    {
      v79 = v102;
      v80 = v114;
    }
    v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v81 & 1) == 0)
      goto LABEL_37;
    goto LABEL_27;
  }
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_1B4BE6000, v40, v41, "Ignoring submit because request already finished", v42, 2u);
    MEMORY[0x1B5E44758](v42, -1, -1);
  }

  lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
  v43 = (void *)swift_allocError();
  *v44 = 1;
  a2(0, v43);

}

uint64_t RunSiriKitExecutorProcessor.requestFinished.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestFinished);
  swift_beginAccess();
  return *v1;
}

uint64_t RunSiriKitExecutorProcessor.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userId;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

void *RunSiriKitExecutorProcessor.flowPluginInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

uint64_t protocol witness for DecisionMaking.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:) in conformance DecisionEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;

  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_release();
  v3 = type metadata accessor for DecisionEngineResponse();
  v4 = v1 + *(int *)(v3 + 24);
  v5 = type metadata accessor for Input();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v2, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  v7 = *(_QWORD *)(v0 + 208);
  v8 = *(uint64_t **)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)v9 = v7;
  *(_BYTE *)(v9 + 8) = 0;
  DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)((uint64_t *)v9, *v8, v8[1], 12589, 0xE200000000000000);
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  if (v7)
    swift_bridgeObjectRetain();
  v10 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 56) + *(int *)(v3 + 24);
  outlined init with copy of ReferenceResolutionClientProtocol?(v11, v10, &demangling cache variable for type metadata for Input?);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  v13 = v12(v10, 1, v5);
  v15 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 136);
  if (v13 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 128), &demangling cache variable for type metadata for Input?);
    v16 = type metadata accessor for Siri_Nlu_External_UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  }
  else
  {
    Input.parseHypothesisId.getter(*(_QWORD *)(v0 + 136));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v5);
  }
  v17 = *(_QWORD *)(v0 + 120);
  outlined init with copy of ReferenceResolutionClientProtocol?(v11, v17, &demangling cache variable for type metadata for Input?);
  v18 = v12(v17, 1, v5);
  v19 = *(_QWORD *)(v0 + 120);
  if (v18 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for Input?);
  }
  else
  {
    Input.inputOrAlternativesInterpretableAsUniversalAction.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
  }
  v20 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 136);
  dispatch thunk of ConversationSELFHelper.emitDecisionEngineDecision(flowHandlerId:parseHypothesisId:isInterpretableAsUniversalAction:isExistingFlowSelected:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  outlined destroy of CamOutput(v20, type metadata accessor for ConversationHelperInput);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  _QWORD *v22;
  __int128 v24;
  uint64_t v25;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[DecisionEngine] Finding conversation for unambiguous input", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 88);

  outlined init with copy of ConversationHelperInput(v6, v5, type metadata accessor for RemoteConversationTurnData);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 160);
  if (v9)
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v25 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = *(void **)(*(_QWORD *)(v10 + 32) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
    *(_QWORD *)(v0 + 40) = v13;
    v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
    v15 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v10, type metadata accessor for RemoteConversationTurnData);
    _os_log_impl(&dword_1B4BE6000, v7, v8, "ConjunctionInfo: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 160), type metadata accessor for RemoteConversationTurnData);
  }

  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD **)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 112);
  v20 = *(void **)(v0 + 72);
  v24 = *(_OWORD *)(v0 + 96);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 88), (uint64_t)v18 + *(int *)(v17 + 20), type metadata accessor for RemoteConversationTurnData);
  *v18 = v20;
  *(_OWORD *)((char *)v18 + *(int *)(v17 + 24)) = v24;
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v19 + 32);
  v21 = v20;
  swift_unknownObjectRetain();
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v22;
  *v22 = v0;
  v22[1] = DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:);
  return ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 152));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_QWORD *)(v0 + 192))
  {
    v1 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)(v0 + 64);
    swift_release();
    v3 = type metadata accessor for DecisionEngineResponse();
    v4 = v1 + *(int *)(v3 + 24);
    v5 = type metadata accessor for Input();
    v6 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v2, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    v7 = *(_QWORD *)(v0 + 192);
    v8 = *(uint64_t **)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)v9 = v7;
    *(_BYTE *)(v9 + 8) = 1;
    DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)((uint64_t *)v9, *v8, v8[1], 12589, 0xE200000000000000);
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    if (v7)
      swift_bridgeObjectRetain();
    v12 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 56) + *(int *)(v3 + 24);
    outlined init with copy of ReferenceResolutionClientProtocol?(v13, v12, &demangling cache variable for type metadata for Input?);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v15 = v14(v12, 1, v5);
    v17 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 136);
    if (v15 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 128), &demangling cache variable for type metadata for Input?);
      v18 = type metadata accessor for Siri_Nlu_External_UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
    }
    else
    {
      Input.parseHypothesisId.getter(*(_QWORD *)(v0 + 136));
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v5);
    }
    v19 = *(_QWORD *)(v0 + 120);
    outlined init with copy of ReferenceResolutionClientProtocol?(v13, v19, &demangling cache variable for type metadata for Input?);
    v20 = v14(v19, 1, v5);
    v21 = *(_QWORD *)(v0 + 120);
    if (v20 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for Input?);
    }
    else
    {
      Input.inputOrAlternativesInterpretableAsUniversalAction.getter();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v21, v5);
    }
    v22 = *(_QWORD *)(v0 + 152);
    v23 = *(_QWORD *)(v0 + 136);
    dispatch thunk of ConversationSELFHelper.emitDecisionEngineDecision(flowHandlerId:parseHypothesisId:isInterpretableAsUniversalAction:isExistingFlowSelected:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
    outlined destroy of CamOutput(v22, type metadata accessor for ConversationHelperInput);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v10;
    *v10 = v0;
    v10[1] = DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:);
    return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 152), 0, 0);
  }
}

uint64_t DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[13] = a7;
  v8[14] = v7;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a3;
  v8[10] = a4;
  v8[7] = a1;
  v8[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  v8[17] = swift_task_alloc();
  v8[18] = type metadata accessor for ConversationHelperInput(0);
  v8[19] = swift_task_alloc();
  type metadata accessor for RemoteConversationTurnData(0);
  v8[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v8[21] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t DecisionEngine.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(void *a1, void *a2)
{
  uint64_t v2;

  return closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;

  v25 = a5;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_asyncWork);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  swift_retain();
  v16 = a2;
  v17 = one-time initialization token for shared;
  v18 = a4;
  swift_retain();
  v19 = a1;
  if (v17 != -1)
    swift_once();
  swift_beginAccess();
  v20 = static MessageBusActor.shared;
  v21 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v20;
  v22[3] = v21;
  v22[4] = a3;
  v22[5] = a2;
  v23 = v25;
  v22[6] = v18;
  v22[7] = v23;
  v22[8] = a6;
  v22[9] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:), (uint64_t)v22);
  (*(void (**)(void))(*(_QWORD *)v14 + 120))();
  return swift_release();
}

uint64_t RunSiriKitExecutorProcessor.outputCounter.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_outputCounter);
  swift_beginAccess();
  return *v1;
}

uint64_t (*RunSiriKitExecutorProcessor.outputCounter.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t partial apply for closure #3 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v6 = v0[6];
  v5 = v0[7];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v8 = v4 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
  v9 = (_QWORD *)swift_task_alloc();
  v7[2] = v9;
  *v9 = v7;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)(v2, 1, v3, v8, v6, v5);
}

uint64_t closure #3 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  _QWORD *v13;

  v12 = a5 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v13;
  *v13 = v7;
  v13[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)(a3, 1, a4, v12, a6, a7);
}

void RunSiriKitExecutorProcessorExecutionDelegate.flowPluginWillExecute(flowPluginInfo:)(void *a1)
{
  uint64_t Strong;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *))(*(_QWORD *)Strong + 528))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    v4 = a1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v8 = v4;

      _os_log_impl(&dword_1B4BE6000, v5, v6, "RunSiriKitExecutorProcessor already released, ignoring flowPluginWillExecute of %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

    }
  }
}

void RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  os_log_type_t v20;
  uint8_t *v21;

  v2 = v1;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_1B4BE6000, v6, v7, "Received FlowPluginInfo: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

  }
  v11 = (void **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo);
  swift_beginAccess();
  v12 = *v11;
  *v11 = v5;
  v5;

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_isMuxEnabled) == 1)
  {
    MEMORY[0x1E0C80A78](v13);
    v14 = objc_allocWithZone((Class)type metadata accessor for FlowPluginInfoMessage());
    v15 = FlowPluginInfoMessage.init(build:)();
    if (v15)
    {
      v16 = v15;
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher), *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher + 24));
      dispatch thunk of MessagePublishing.postMessage(_:)();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1B4BE6000, v17, v18, "Posted FlowPluginInfo message to the bus", v19, 2u);
        MEMORY[0x1B5E44758](v19, -1, -1);

      }
      else
      {

        v17 = v16;
      }
    }
    else
    {
      v17 = Logger.logObject.getter();
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_1B4BE6000, v17, v20, "Could not init FlowPluginInfoMessage", v21, 2u);
        MEMORY[0x1B5E44758](v21, -1, -1);
      }
    }

  }
}

void protocol witness for ServiceBridgeDelegate.closeServerRequest(forExecutionRequestId:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
  specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(0xD00000000000002ALL, 0x80000001B4EF8B10, "Need not do %s for RSKE initiated execution");
}

_QWORD *specialized static ResponseTextExtractionUtil.extractResponseText(fromAddViews:)(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v42;
  uint64_t v43;

  v2 = objc_msgSend(a1, sel_dialogPhase);
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

    v7 = (void *)MEMORY[0x1B5E432E8](v4, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend((id)objc_opt_self(), sel_dialogPhaseForAceDialogPhase_, v7);

  if (!v8)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v9 = objc_msgSend(a1, sel_views);
  if (!v9)
  {

    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v10 = v9;
  type metadata accessor for SAAceView();
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((objc_msgSend(v8, sel_isSummaryDialogPhase) & 1) == 0
    && (objc_msgSend(v8, sel_isConfirmationDialogPhase) & 1) == 0
    && !objc_msgSend(v8, sel_isCompletionDialogPhase))
  {

    swift_bridgeObjectRelease();
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v10 = (_QWORD *)v11;
    else
      v10 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    v42 = v8;
    if (v12)
      goto LABEL_11;
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v42 = v8;
    if (v12)
    {
LABEL_11:
      if (v12 >= 1)
      {
        v13 = 0;
        v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          if ((v11 & 0xC000000000000001) != 0)
            v14 = (id)MEMORY[0x1B5E43B94](v13, v11);
          else
            v14 = *(id *)(v11 + 8 * v13 + 32);
          v15 = v14;
          v16 = objc_msgSend(v14, sel_speakableText);
          if (v16)
          {
            v17 = v16;
            v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v20 = v19;

          }
          else
          {
            v18 = 0;
            v20 = 0xE000000000000000;
          }
          swift_bridgeObjectRelease();
          v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0)
            v21 = v18 & 0xFFFFFFFFFFFFLL;
          if (v21)
          {
            v22 = objc_msgSend(v15, sel_speakableText);
            if (v22)
              goto LABEL_25;
          }
          else
          {
            v29 = objc_msgSend(v15, sel_dialog);
            if (v29)
            {
              v30 = v29;
              v31 = objc_msgSend(v29, sel_content);

              if (v31)
              {
                v22 = objc_msgSend(v31, sel_text);

                if (v22)
                {
LABEL_25:
                  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  v25 = v24;

                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
                  v27 = v10[2];
                  v26 = v10[3];
                  if (v27 >= v26 >> 1)
                    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v10);
                  v10[2] = v27 + 1;
                  v28 = &v10[2 * v27];
                  v28[4] = v23;
                  v28[5] = v25;
                  goto LABEL_14;
                }
              }
            }
          }

LABEL_14:
          if (v12 == ++v13)
            goto LABEL_41;
        }
      }
      __break(1u);
      goto LABEL_51;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_41:
  swift_bridgeObjectRelease_n();
  if (!v10[2])
  {
    swift_bridgeObjectRelease();

    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (one-time initialization token for conversationBridge != -1)
LABEL_51:
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v43 = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = swift_bridgeObjectRetain();
    v38 = MEMORY[0x1B5E434D4](v37, MEMORY[0x1E0DEA968]);
    v40 = v39;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v33, v34, "Found SAUIAddViews response text: %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v36, -1, -1);
    MEMORY[0x1B5E44758](v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  return v10;
}

unint64_t type metadata accessor for SAAceView()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SAAceView;
  if (!lazy cache variable for type metadata for SAAceView)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }
  return result;
}

uint64_t protocol witness for ContextUpdating.applyResponseText(_:scope:userId:) in conformance MultiUserContextUpdater()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
}

void MultiUserContextUpdater.applyResponseText(_:scope:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  v11[2] = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *))(*(_QWORD *)v3 + 280))(a2, a3, partial apply for closure #1 in MultiUserContextUpdater.applyResponseText(_:scope:userId:), v11);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = Dictionary.debugDescription.getter();
    v11[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Applied response text with error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

unint64_t lazy protocol witness table accessor for type UserID and conformance UserID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UserID and conformance UserID;
  if (!lazy protocol witness table cache variable for type UserID and conformance UserID)
  {
    v1 = type metadata accessor for UserID();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9EFA0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID);
  }
  return result;
}

uint64_t (*MultiUserContextUpdater.userIdToContextUpdater.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t partial apply for closure #1 in MultiUserContextUpdater.applyResponseText(_:scope:userId:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 488))(*(_QWORD *)(v1 + 16));
}

Swift::Void __swiftcall ContextUpdater.applyResponseText(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for ConversationSessionKey();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v26[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((_QWORD *)a1._rawValue + 2))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 360))(v11);
    v14 = type metadata accessor for UserID();
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (v15 == 1)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        v20 = swift_slowAlloc();
        v26[0] = v20;
        *(_DWORD *)v19 = 136315138;
        v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001B4EF8010, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v17, v18, "Cannot use this instance of SingleUserContextUpdater to call %s since userId is nil", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v20, -1, -1);
        MEMORY[0x1B5E44758](v19, -1, -1);
      }

    }
    else
    {
      swift_beginAccess();
      v21 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v21);
      swift_endAccess();
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D9EDD0], v3);
      ContextUpdater.valueFromSessionState(forKey:)(v26);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v27)
      {
        v22 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
        v23 = swift_dynamicCast();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v9, v23 ^ 1u, 1, v22);
      }
      else
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v24 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v9, 1, 1, v24);
      }
      ContextUpdater.flushResponseText(legacyNLContext:)((uint64_t)v9);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    }
  }
}

void ContextUpdater.valueFromSessionState(forKey:)(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UserID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*v1 + 360))(v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "UserId is nil. Cannot get value from SessionState. Returning nil", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }

    *a1 = 0u;
    a1[1] = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
    dispatch thunk of ConversationSessionState.value(forKey:userId:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void ContextUpdater.flushResponseText(legacyNLContext:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD v30[2];
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[4];

  v2 = type metadata accessor for Google_Protobuf_StringValue();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ConversationSessionKey();
  v34 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v33 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v17, "No LegacyNLContext to apply responseText to", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

  }
  else
  {
    v32 = v6;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v19 = v35;
    swift_beginAccess();
    v20 = *(_QWORD *)(v19 + 240);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = MEMORY[0x1E0DEE9D8];
    if (v21)
    {
      v31 = v14;
      v36[0] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      v22 = v36[0];
      v30[1] = v20;
      v23 = v20 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.toProtobufStringValue()();
        swift_bridgeObjectRelease();
        v36[0] = v22;
        v25 = *(_QWORD *)(v22 + 16);
        v24 = *(_QWORD *)(v22 + 24);
        if (v25 >= v24 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          v22 = v36[0];
        }
        v23 += 16;
        *(_QWORD *)(v22 + 16) = v25 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v22+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v25, v5, v2);
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      v14 = v31;
    }
    MEMORY[0x1B5E3FC28](v22);
    v36[3] = v11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, v14, v11);
    v28 = v33;
    v27 = v34;
    v29 = v32;
    (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v33, *MEMORY[0x1E0D9EDD0], v32);
    ContextUpdater.updateSessionState(withValue:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

void RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:needsUserInput:)(void *a1, char a2)
{
  uint64_t Strong;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, _QWORD))(*(_QWORD *)Strong + 488))(a1, a2 & 1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    v6 = a1;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v13 = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = *(_QWORD *)&v6[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v12 = *(_QWORD *)&v6[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "RunSiriKitExecutorProcessor already released, ignoring close of %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);

    }
    else
    {

    }
  }
}

void RunSiriKitExecutorProcessor.close(withExecutionOutput:needsUserInput:)(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  v7 = a1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v19 = v3;
    v10 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20 = v18;
    *(_DWORD *)v10 = 136315138;
    v11 = objc_msgSend(v7, sel_debugDescription);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v3 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v8, v9, "<<<--- %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

  }
  else
  {

  }
  if (((*(uint64_t (**)(void))(*(_QWORD *)v3 + 368))() & 1) != 0)
  {
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "Ignoring close() because request already finished", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

  }
  else
  {
    RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(v7, 0, 0, a2 & 1);
  }
}

uint64_t RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(void *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void (*v48)(id, uint64_t, char *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, void *), uint64_t);
  id v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[5];

  v5 = v4;
  LODWORD(v60) = a4;
  v62 = a1;
  v63 = a2;
  v7 = type metadata accessor for RequestType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UserID();
  v61 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v59 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v52 - v17;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  v22 = os_log_type_enabled(v20, v21);
  v58 = v18;
  if (v22)
  {
    v23 = swift_slowAlloc();
    v55 = v10;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc();
    v56 = v8;
    v53 = v25;
    v65[0] = v25;
    v54 = v13;
    *(_DWORD *)v24 = 136315138;
    if (a3)
      v26 = v63;
    else
      v26 = 7104878;
    v57 = v7;
    if (a3)
      v27 = a3;
    else
      v27 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v65);
    v13 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v7 = v57;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v20, v21, "Handling close() from Execution kicked off by RSKE, errorString=%s", v24, 0xCu);
    v28 = v53;
    swift_arrayDestroy();
    v8 = v56;
    MEMORY[0x1B5E44758](v28, -1, -1);
    v29 = v24;
    v10 = v55;
    MEMORY[0x1B5E44758](v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v30 = *(void **)(v5 + 16);
  if (a3)
    specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v30, -1, v63, a3, *(void (**)(id, id))(v5 + 32), *(_QWORD *)(v5 + 40));
  else
    specialized static RunSiriKitExecutorProcessor.replyRunSiriKitExecutorCompleted(forCommand:needsUserInput:needsServerExecution:replyHandler:)(v30, v60 & 1, 0, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + 96, (uint64_t)v65, &demangling cache variable for type metadata for ContextUpdating?);
  v31 = v65[3];
  v32 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v65, &demangling cache variable for type metadata for ContextUpdating?);
  v63 = v5 + 96;
  if (v31)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 272))(v32);
    v33 = v61;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v13, 1, v14) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      v31 = 0;
    }
    else
    {
      v34 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v35 = v58;
      v34(v58, v13, v14);
      if (*(_BYTE *)(v5 + 168) && *(_BYTE *)(v5 + 168) != 1)
        v36 = 1;
      else
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v5 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType, v7);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 392))(v37);
      v39 = v59;
      v34(v59, v35, v14);
      type metadata accessor for ConversationContextUpdateMetadata();
      v31 = swift_allocObject();
      *(_BYTE *)(v31 + 16) = v36 & 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v10, v7);
      *(_QWORD *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v38;
      v34((char *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId), v39, v14);
      *(_BYTE *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
    }
  }
  v40 = *(_QWORD *)(v5 + 48);
  v41 = *(_QWORD *)(v5 + 136);
  v59 = *(char **)(v5 + 144);
  v60 = v41;
  v61 = *(_QWORD *)(v5 + 24);
  v42 = *(_QWORD *)(v5 + 160);
  v58 = *(char **)(v5 + 152);
  v43 = v5 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId;
  v45 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId);
  v44 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId + 8);
  v46 = swift_allocObject();
  v47 = v62;
  *(_QWORD *)(v46 + 16) = v5;
  *(_QWORD *)(v46 + 24) = v47;
  v48 = *(void (**)(id, uint64_t, char *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, void *), uint64_t))(*(_QWORD *)v40 + 264);
  swift_retain();
  v49 = v47;
  v48(v49, v60, v59, 0, 0, v63, v61, v31, v58, v42, v43, v45, v44, partial apply for closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:), v46);
  v50 = swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 552))(v50);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 376))(1);
}

void specialized static RunSiriKitExecutorProcessor.replyRunSiriKitExecutorCompleted(forCommand:needsUserInput:needsServerExecution:replyHandler:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  NSDictionary v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  unint64_t v49;

  v47[1] = a5;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v47[0] = v10;
    v17 = a1;
    v18 = a2;
    v19 = a3;
    v20 = a4;
    v21 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Sending RSKECompleted as response to RSKE", v16, 2u);
    v22 = v21;
    a4 = v20;
    a3 = v19;
    a2 = v18;
    a1 = v17;
    v10 = v47[0];
    MEMORY[0x1B5E44758](v22, -1, -1);
  }

  if (a4)
  {
    v47[0] = a4;
    v23 = objc_allocWithZone(MEMORY[0x1E0D88170]);
    swift_retain();
    v24 = objc_msgSend(v23, sel_init);
    UUID.init()();
    v25 = UUID.uuidString.getter();
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v28 = (void *)MEMORY[0x1B5E432E8](v25, v27);
    swift_bridgeObjectRelease();
    objc_msgSend(v24, sel_setAceId_, v28);

    v29 = v24;
    v30 = objc_msgSend(a1, sel_aceId);
    objc_msgSend(v29, sel_setRefId_, v30);

    objc_msgSend(v29, sel_setNeedsUserInput_, a2 & 1);
    objc_msgSend(v29, sel_setNeedsServerExecution_, a3 & 1);
    v31 = objc_msgSend(v29, sel_dictionary);
    if (v31)
    {
      v32 = v31;
      v49 = 0;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

      if (v49 <= 1)
        v33 = 1;
      else
        v33 = v49;
    }
    else
    {
      v33 = 0;
    }
    outlined copy of [AnyHashable : Any]??(v33);
    outlined copy of [AnyHashable : Any]??(v33);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      v49 = v37;
      *(_DWORD *)v36 = 136315138;
      if (v33 == 1)
      {
        v38 = 0xE300000000000000;
        v39 = 7104878;
      }
      else
      {
        v48 = v33;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
        v39 = Optional.debugDescription.getter();
        v38 = v40;
      }
      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of [AnyHashable : Any]??(v33);
      outlined consume of [AnyHashable : Any]??(v33);
      _os_log_impl(&dword_1B4BE6000, v34, v35, "Sending RSKECompleted: %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v37, -1, -1);
      MEMORY[0x1B5E44758](v36, -1, -1);
    }
    else
    {
      outlined consume of [AnyHashable : Any]??(v33);
      outlined consume of [AnyHashable : Any]??(v33);
    }

    if (v33 == 1)
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v41 = objc_allocWithZone(MEMORY[0x1E0D88088]);
    }
    else
    {
      v41 = objc_allocWithZone(MEMORY[0x1E0D88088]);
      if (!v33)
      {
        v42.super.isa = 0;
        goto LABEL_21;
      }
    }
    v42.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
LABEL_21:
    v43 = objc_msgSend(v41, sel_initWithDictionary_, v42.super.isa);

    v44 = v43;
    v45 = v43;
    v46 = v47[0];
    ((void (*)(id, _QWORD))v47[0])(v45, 0);

    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v46);
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.safelyCloseContextUpdater()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_asyncWork);
  v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
  v7 = one-time initialization token for shared;
  swift_retain();
  if (v7 != -1)
    swift_once();
  swift_beginAccess();
  v8 = static MessageBusActor.shared;
  v9 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v9;
  v10[4] = v1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater(), (uint64_t)v10);
  (*(void (**)(void))(*(_QWORD *)v5 + 120))();
  swift_release();
}

uint64_t RunSiriKitExecutorProcessor.requestFinished.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestFinished);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

void partial apply for closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

void closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 144);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 136);
    v12 = *(_QWORD *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_asyncWork);
    v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
    swift_bridgeObjectRetain();
    swift_retain();
    v14 = a2;
    v15 = one-time initialization token for shared;
    v16 = a4;
    if (v15 != -1)
      swift_once();
    swift_beginAccess();
    v17 = static MessageBusActor.shared;
    v18 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = v17;
    v19[3] = v18;
    v19[4] = a3;
    v19[5] = a2;
    v19[6] = v11;
    v19[7] = v10;
    v19[8] = v16;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:), (uint64_t)v19);
    (*(void (**)(void))(*(_QWORD *)v12 + 120))();
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    v23 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1B4BE6000, v23, v21, "Failed to find requestId for logging selg message", v22, 2u);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }

  }
}

uint64_t ContextUpdater.domainHints.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t RunSiriKitExecutorProcessor.__deallocating_deinit()
{
  RunSiriKitExecutorProcessor.deinit();
  return swift_deallocClassInstance();
}

uint64_t RunSiriKitExecutorProcessor.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(*(_QWORD *)(v0 + 32));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for ContextUpdating?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType;
  v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher);
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return v0;
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  NSObject *v41;
  void (*v42)(void);
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  os_log_type_t v98;
  uint64_t v99;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 576) = v2;
  if (!v2)
  {
    *(_QWORD *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
LABEL_16:
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for ConversationHandler?);
    v79 = Logger.logObject.getter();
    v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v81 = 0;
      _os_log_impl(&dword_1B4BE6000, v79, v80, "[ConversationHelper] No conversation handler found for input, returning nil", v81, 2u);
      MEMORY[0x1B5E44758](v81, -1, -1);
    }
    v83 = *(_QWORD *)(v0 + 496);
    v82 = *(_QWORD *)(v0 + 504);
    v84 = *(_QWORD *)(v0 + 488);

LABEL_19:
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v4 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 472);
  v5 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 360);
  v7 = *(_DWORD *)(*(_QWORD *)(v0 + 368) + 80);
  *(_DWORD *)(v0 + 624) = v7;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + ((v7 + 32) & ~(unint64_t)v7), v5, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v8 = v5 + *(int *)(v6 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol(v8 + 8, v0 + 136);
  outlined destroy of CamOutput(v8, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
  v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 584) = v9;
  v9(v5, v4);
  if (!*(_QWORD *)(v0 + 160))
    goto LABEL_16;
  v97 = (_QWORD *)(v0 + 56);
  v88 = (_QWORD *)(v0 + 96);
  v89 = (_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 360);
  v11 = *(_QWORD *)(v0 + 368);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for ConversationHandler?);
  v12 = 0;
  *(_DWORD *)(v0 + 628) = *(_DWORD *)(v10 + 48);
  *(_QWORD *)(v0 + 592) = *(_QWORD *)(v11 + 72);
  v13 = &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler);
  while (1)
  {
    *(_QWORD *)(v0 + 600) = v12;
    v17 = *(_QWORD *)(v0 + 464);
    v18 = *(_QWORD *)(v0 + 472);
    v20 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 440);
    v21 = *(_QWORD *)(v0 + 360);
    v22 = *(unsigned __int8 *)(v0 + 632);
    v23 = v19 + *(int *)(v0 + 628);
    v24 = v13;
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 568)+ ((*(unsigned __int8 *)(v0 + 624) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 624))+ *(_QWORD *)(v0 + 592) * v12, v19, v13);
    v25 = v20 + *(int *)(v21 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v20, v19, v17);
    outlined init with take of StringKeyedValue(v23, v25, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    v26 = *(void (**)(void))(v18 + 16);
    if (v22 != 1)
      break;
    v27 = *(_QWORD *)(v0 + 424) + *(int *)(*(_QWORD *)(v0 + 360) + 48);
    v26();
    outlined init with copy of ConversationHelperInput(v25, v27, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with copy of ReferenceResolutionClientProtocol(v27 + 8, (uint64_t)v97);
    outlined destroy of CamOutput(v27, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    v28 = *(_QWORD *)(v0 + 80);
    v29 = *(_QWORD *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1(v97, v28);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
    v33 = *(_QWORD *)(v0 + 464);
    v34 = *(_QWORD *)(v0 + 424);
    if (v30 == 0xD000000000000021 && v31 == 0x80000001B4EF6BD0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      v32(v34, v33);
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      v32(v34, v33);
      if ((v35 & 1) == 0)
        break;
    }
    v37 = *(_QWORD *)(v0 + 408);
    v36 = *(_QWORD *)(v0 + 416);
    v38 = v36 + *(int *)(*(_QWORD *)(v0 + 360) + 48);
    ((void (*)(uint64_t, _QWORD, _QWORD))v26)(v36, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 464));
    outlined init with copy of ConversationHelperInput(v25, v38, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    v39 = v37;
    v40 = v24;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v36, v39, v24);
    v41 = Logger.logObject.getter();
    v42 = v26;
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v43))
    {
      v91 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      v44 = *(_QWORD *)(v0 + 464);
      v93 = *(_QWORD *)(v0 + 432);
      v46 = *(_QWORD *)(v0 + 400);
      v45 = *(_QWORD *)(v0 + 408);
      v47 = *(_QWORD *)(v0 + 360);
      v48 = swift_slowAlloc();
      v92 = swift_slowAlloc();
      v99 = v92;
      *(_DWORD *)v48 = 136315138;
      v49 = *(int *)(v47 + 48);
      v50 = v46 + v49;
      v51 = v45;
      v90 = v45;
      v52 = v45 + v49;
      ((void (*)(uint64_t, uint64_t, uint64_t))v42)(v46, v51, v44);
      outlined init with copy of ConversationHelperInput(v52, v50, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v50 + 8, (uint64_t)v89);
      outlined destroy of CamOutput(v50, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v53 = *(_QWORD *)(v0 + 200);
      v54 = *(_QWORD *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1(v89, v53);
      v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 16))(v53, v54);
      v57 = v56;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      v91(v46, v44);
      *(_QWORD *)(v48 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, &v99);
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v90, v40);
      _os_log_impl(&dword_1B4BE6000, v41, v43, "[ConversationHelper] Skipping %s as we should not fall back to it.", (uint8_t *)v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v92, -1, -1);
      MEMORY[0x1B5E44758](v48, -1, -1);

      v16 = v93;
    }
    else
    {
      v14 = *(_QWORD *)(v0 + 432);
      v15 = *(_QWORD *)(v0 + 408);

      outlined destroy of ReferenceResolutionClientProtocol?(v15, v24);
      v16 = v14;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v16, v40);
    v13 = v40;
    v12 = *(_QWORD *)(v0 + 600) + 1;
    if (v12 == *(_QWORD *)(v0 + 576))
    {
      v82 = *(_QWORD *)(v0 + 504);
      v84 = *(_QWORD *)(v0 + 488);
      v83 = *(_QWORD *)(v0 + 496);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  v59 = *(_QWORD *)(v0 + 384);
  v58 = *(_QWORD *)(v0 + 392);
  v60 = v58 + *(int *)(*(_QWORD *)(v0 + 360) + 48);
  ((void (*)(uint64_t, _QWORD, _QWORD))v26)(v58, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 464));
  outlined init with copy of ConversationHelperInput(v25, v60, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v58, v59, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v95 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
    v63 = *(_QWORD *)(v0 + 464);
    v64 = *(_QWORD *)(v0 + 400);
    v65 = *(_QWORD *)(v0 + 384);
    v98 = v62;
    v66 = *(_QWORD *)(v0 + 360);
    v67 = swift_slowAlloc();
    v96 = swift_slowAlloc();
    v99 = v96;
    *(_DWORD *)v67 = 136315138;
    v68 = *(int *)(v66 + 48);
    v69 = v64 + v68;
    v70 = v26;
    v94 = v65;
    v71 = v65 + v68;
    ((void (*)(uint64_t, uint64_t, uint64_t))v70)(v64, v65, v63);
    outlined init with copy of ConversationHelperInput(v71, v69, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with copy of ReferenceResolutionClientProtocol(v69 + 8, (uint64_t)v88);
    outlined destroy of CamOutput(v69, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    v72 = *(_QWORD *)(v0 + 120);
    v73 = *(_QWORD *)(v0 + 128);
    __swift_project_boxed_opaque_existential_1(v88, v72);
    v74 = *(uint64_t (**)(uint64_t, uint64_t))(v73 + 16);
    v75 = v73;
    v26 = v70;
    v76 = v74(v72, v75);
    v78 = v77;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
    v95(v64, v63);
    *(_QWORD *)(v67 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, &v99);
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v94, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    _os_log_impl(&dword_1B4BE6000, v61, v98, "[ConversationHelper] Trying handler: %s", (uint8_t *)v67, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v96, -1, -1);
    MEMORY[0x1B5E44758](v67, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 384), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  }

  v86 = *(_QWORD *)(v0 + 376) + *(int *)(*(_QWORD *)(v0 + 360) + 48);
  v26();
  outlined init with copy of ConversationHelperInput(v25, v86, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
  outlined init with copy of ReferenceResolutionClientProtocol(v86 + 8, v0 + 16);
  outlined destroy of CamOutput(v86, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
  v87 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 608) = v87;
  *v87 = v0;
  v87[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
  return ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(*(_QWORD *)(v0 + 344), v0 + 16, *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 280));
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  _QWORD *v94;
  os_log_type_t v95;
  uint64_t v96;

  v1 = *(void **)(v0 + 616);
  (*(void (**)(_QWORD, _QWORD))(v0 + 584))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 464));
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 616);
    v7 = *(_QWORD *)(v0 + 432);
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v96 = v9;
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 256) = v6;
    v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v11 = String.init<A>(describing:)();
    *(_QWORD *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v96);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "[ConversationHelper] Error during loadConversationAndAccept: %s. Will try the next handler", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

    v13 = v7;
  }
  else
  {
    v14 = *(void **)(v0 + 616);
    v15 = *(_QWORD *)(v0 + 432);

    v13 = v15;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v13, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v16 = *(_QWORD *)(v0 + 600) + 1;
  if (v16 == *(_QWORD *)(v0 + 576))
  {
LABEL_5:
    v17 = *(_QWORD *)(v0 + 504);
    v18 = *(_QWORD *)(v0 + 488);
    v19 = *(_QWORD *)(v0 + 496);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v85 = v0 + 16;
    v94 = (_QWORD *)(v0 + 56);
    v84 = (_QWORD *)(v0 + 96);
    v86 = (_QWORD *)(v0 + 176);
    v21 = &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler);
    while (1)
    {
      *(_QWORD *)(v0 + 600) = v16;
      v37 = *(_QWORD *)(v0 + 464);
      v38 = *(_QWORD *)(v0 + 472);
      v40 = *(_QWORD *)(v0 + 432);
      v39 = *(_QWORD *)(v0 + 440);
      v41 = *(_QWORD *)(v0 + 360);
      v42 = *(unsigned __int8 *)(v0 + 632);
      v43 = v39 + *(int *)(v0 + 628);
      v44 = v21;
      outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 568)+ ((*(unsigned __int8 *)(v0 + 624) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 624))+ *(_QWORD *)(v0 + 592) * v16, v39, v21);
      v45 = v40 + *(int *)(v41 + 48);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v40, v39, v37);
      outlined init with take of StringKeyedValue(v43, v45, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v46 = *(void (**)(void))(v38 + 16);
      if (v42 != 1)
        break;
      v47 = *(_QWORD *)(v0 + 424) + *(int *)(*(_QWORD *)(v0 + 360) + 48);
      v46();
      outlined init with copy of ConversationHelperInput(v45, v47, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v47 + 8, (uint64_t)v94);
      outlined destroy of CamOutput(v47, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v48 = *(_QWORD *)(v0 + 80);
      v49 = *(_QWORD *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1(v94, v48);
      v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 16))(v48, v49);
      v52 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      v53 = *(_QWORD *)(v0 + 464);
      v54 = *(_QWORD *)(v0 + 424);
      if (v50 == 0xD000000000000021 && v51 == 0x80000001B4EF6BD0)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
        v52(v54, v53);
      }
      else
      {
        v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
        v52(v54, v53);
        if ((v55 & 1) == 0)
          break;
      }
      v57 = *(_QWORD *)(v0 + 408);
      v56 = *(_QWORD *)(v0 + 416);
      v58 = v56 + *(int *)(*(_QWORD *)(v0 + 360) + 48);
      ((void (*)(uint64_t, _QWORD, _QWORD))v46)(v56, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 464));
      outlined init with copy of ConversationHelperInput(v45, v58, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v59 = v44;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v56, v57, v44);
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v88 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
        v22 = *(_QWORD *)(v0 + 464);
        v91 = *(_QWORD *)(v0 + 432);
        v24 = *(_QWORD *)(v0 + 400);
        v23 = *(_QWORD *)(v0 + 408);
        v25 = *(_QWORD *)(v0 + 360);
        v26 = swift_slowAlloc();
        v89 = swift_slowAlloc();
        v96 = v89;
        *(_DWORD *)v26 = 136315138;
        v27 = *(int *)(v25 + 48);
        v28 = v24 + v27;
        v29 = v23;
        v87 = v23;
        v30 = v23 + v27;
        ((void (*)(uint64_t, uint64_t, uint64_t))v46)(v24, v29, v22);
        outlined init with copy of ConversationHelperInput(v30, v28, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        outlined init with copy of ReferenceResolutionClientProtocol(v28 + 8, (uint64_t)v86);
        outlined destroy of CamOutput(v28, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        v31 = *(_QWORD *)(v0 + 200);
        v32 = *(_QWORD *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1(v86, v31);
        v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
        v35 = v34;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
        v88(v24, v22);
        *(_QWORD *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v96);
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v87, v59);
        _os_log_impl(&dword_1B4BE6000, v60, v61, "[ConversationHelper] Skipping %s as we should not fall back to it.", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v89, -1, -1);
        MEMORY[0x1B5E44758](v26, -1, -1);

        v36 = v91;
      }
      else
      {
        v62 = *(_QWORD *)(v0 + 432);
        v63 = *(_QWORD *)(v0 + 408);

        outlined destroy of ReferenceResolutionClientProtocol?(v63, v44);
        v36 = v62;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v36, v59);
      v21 = v59;
      v16 = *(_QWORD *)(v0 + 600) + 1;
      if (v16 == *(_QWORD *)(v0 + 576))
        goto LABEL_5;
    }
    v65 = *(_QWORD *)(v0 + 384);
    v64 = *(_QWORD *)(v0 + 392);
    v66 = v64 + *(int *)(*(_QWORD *)(v0 + 360) + 48);
    ((void (*)(uint64_t, _QWORD, _QWORD))v46)(v64, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 464));
    outlined init with copy of ConversationHelperInput(v45, v66, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v64, v65, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    v67 = Logger.logObject.getter();
    v68 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v92 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      v69 = *(_QWORD *)(v0 + 464);
      v90 = v69;
      v70 = *(_QWORD *)(v0 + 400);
      v71 = *(_QWORD *)(v0 + 384);
      v95 = v68;
      v72 = *(_QWORD *)(v0 + 360);
      v73 = swift_slowAlloc();
      v93 = swift_slowAlloc();
      v96 = v93;
      *(_DWORD *)v73 = 136315138;
      v74 = *(int *)(v72 + 48);
      v75 = v70 + v74;
      v76 = v71 + v74;
      ((void (*)(uint64_t, uint64_t, uint64_t))v46)(v70, v71, v69);
      outlined init with copy of ConversationHelperInput(v76, v75, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v75 + 8, (uint64_t)v84);
      outlined destroy of CamOutput(v75, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v77 = *(_QWORD *)(v0 + 120);
      v78 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1(v84, v77);
      v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 16))(v77, v78);
      v81 = v80;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      v92(v70, v90);
      *(_QWORD *)(v73 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v81, &v96);
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      _os_log_impl(&dword_1B4BE6000, v67, v95, "[ConversationHelper] Trying handler: %s", (uint8_t *)v73, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v93, -1, -1);
      MEMORY[0x1B5E44758](v73, -1, -1);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 384), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    }

    v82 = *(_QWORD *)(v0 + 376) + *(int *)(*(_QWORD *)(v0 + 360) + 48);
    v46();
    outlined init with copy of ConversationHelperInput(v45, v82, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with copy of ReferenceResolutionClientProtocol(v82 + 8, v85);
    outlined destroy of CamOutput(v82, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    v83 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 608) = v83;
    *v83 = v0;
    v83[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    return ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(*(_QWORD *)(v0 + 344), v85, *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 280));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  void (*v103)(void);
  uint64_t v104;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 432), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1, v2, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v2, v3, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 336), &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
    v6 = *(_QWORD *)(v0 + 600) + 1;
    if (v6 == *(_QWORD *)(v0 + 576))
    {
LABEL_3:
      v7 = *(_QWORD *)(v0 + 504);
      v8 = *(_QWORD *)(v0 + 488);
      v9 = *(_QWORD *)(v0 + 496);
      swift_release();
      swift_bridgeObjectRelease();
LABEL_9:
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      v95 = 0;
LABEL_21:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v95);
    }
    v20 = (_QWORD *)(v0 + 56);
    v93 = (_QWORD *)(v0 + 96);
    v94 = (_QWORD *)(v0 + 176);
    v21 = &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler);
    while (1)
    {
      *(_QWORD *)(v0 + 600) = v6;
      v37 = *(_QWORD *)(v0 + 464);
      v38 = *(_QWORD *)(v0 + 472);
      v40 = *(_QWORD *)(v0 + 432);
      v39 = *(_QWORD *)(v0 + 440);
      v41 = *(_QWORD *)(v0 + 360);
      v42 = *(unsigned __int8 *)(v0 + 632);
      v43 = v39 + *(int *)(v0 + 628);
      v44 = v21;
      outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 568)+ ((*(unsigned __int8 *)(v0 + 624) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 624))+ *(_QWORD *)(v0 + 592) * v6, v39, v21);
      v45 = v40 + *(int *)(v41 + 48);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v40, v39, v37);
      outlined init with take of StringKeyedValue(v43, v45, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v103 = *(void (**)(void))(v38 + 16);
      if (v42 != 1)
        break;
      v46 = *(_QWORD *)(v0 + 424) + *(int *)(*(_QWORD *)(v0 + 360) + 48);
      v103();
      outlined init with copy of ConversationHelperInput(v45, v46, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v46 + 8, (uint64_t)v20);
      outlined destroy of CamOutput(v46, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v47 = *(_QWORD *)(v0 + 80);
      v48 = *(_QWORD *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1(v20, v47);
      v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v47, v48);
      v51 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      v52 = *(_QWORD *)(v0 + 464);
      v53 = *(_QWORD *)(v0 + 424);
      if (v49 == 0xD000000000000021 && v50 == 0x80000001B4EF6BD0)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        v51(v53, v52);
      }
      else
      {
        v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        v51(v53, v52);
        if ((v54 & 1) == 0)
          break;
      }
      v56 = *(_QWORD *)(v0 + 408);
      v55 = *(_QWORD *)(v0 + 416);
      v57 = v55 + *(int *)(*(_QWORD *)(v0 + 360) + 48);
      ((void (*)(uint64_t, _QWORD, _QWORD))v103)(v55, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 464));
      outlined init with copy of ConversationHelperInput(v45, v57, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v58 = v56;
      v59 = v44;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v55, v58, v44);
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v97 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
        v22 = *(_QWORD *)(v0 + 464);
        v99 = *(_QWORD *)(v0 + 432);
        v24 = *(_QWORD *)(v0 + 400);
        v23 = *(_QWORD *)(v0 + 408);
        v25 = *(_QWORD *)(v0 + 360);
        v26 = swift_slowAlloc();
        v98 = swift_slowAlloc();
        v104 = v98;
        *(_DWORD *)v26 = 136315138;
        v27 = *(int *)(v25 + 48);
        v28 = v24 + v27;
        v29 = v23;
        v96 = v23;
        v30 = v23 + v27;
        ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v24, v29, v22);
        outlined init with copy of ConversationHelperInput(v30, v28, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        outlined init with copy of ReferenceResolutionClientProtocol(v28 + 8, (uint64_t)v94);
        outlined destroy of CamOutput(v28, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        v31 = *(_QWORD *)(v0 + 200);
        v32 = *(_QWORD *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1(v94, v31);
        v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
        v35 = v34;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
        v97(v24, v22);
        *(_QWORD *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v104);
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v96, v59);
        _os_log_impl(&dword_1B4BE6000, v60, v61, "[ConversationHelper] Skipping %s as we should not fall back to it.", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v98, -1, -1);
        MEMORY[0x1B5E44758](v26, -1, -1);

        v36 = v99;
      }
      else
      {
        v62 = *(_QWORD *)(v0 + 432);
        v63 = *(_QWORD *)(v0 + 408);

        outlined destroy of ReferenceResolutionClientProtocol?(v63, v44);
        v36 = v62;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v36, v59);
      v21 = v59;
      v6 = *(_QWORD *)(v0 + 600) + 1;
      v20 = (_QWORD *)(v0 + 56);
      if (v6 == *(_QWORD *)(v0 + 576))
        goto LABEL_3;
    }
    v67 = *(_QWORD *)(v0 + 384);
    v66 = *(_QWORD *)(v0 + 392);
    v68 = v66 + *(int *)(*(_QWORD *)(v0 + 360) + 48);
    ((void (*)(uint64_t, _QWORD, _QWORD))v103)(v66, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 464));
    outlined init with copy of ConversationHelperInput(v45, v68, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v67, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v101 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
      v71 = *(_QWORD *)(v0 + 464);
      v72 = *(_QWORD *)(v0 + 400);
      v73 = *(_QWORD *)(v0 + 384);
      v74 = *(_QWORD *)(v0 + 360);
      v75 = swift_slowAlloc();
      v102 = swift_slowAlloc();
      v104 = v102;
      *(_DWORD *)v75 = 136315138;
      v76 = *(int *)(v74 + 48);
      v77 = v72 + v76;
      v100 = v73;
      v78 = v73 + v76;
      ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v72, v73, v71);
      outlined init with copy of ConversationHelperInput(v78, v77, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with copy of ReferenceResolutionClientProtocol(v77 + 8, (uint64_t)v93);
      outlined destroy of CamOutput(v77, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v79 = *(_QWORD *)(v0 + 120);
      v80 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1(v93, v79);
      v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 16))(v79, v80);
      v83 = v82;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
      v101(v72, v71);
      *(_QWORD *)(v75 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v83, &v104);
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v100, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      _os_log_impl(&dword_1B4BE6000, v69, v70, "[ConversationHelper] Trying handler: %s", (uint8_t *)v75, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v102, -1, -1);
      MEMORY[0x1B5E44758](v75, -1, -1);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 384), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    }

    v91 = *(_QWORD *)(v0 + 376) + *(int *)(*(_QWORD *)(v0 + 360) + 48);
    v103();
    outlined init with copy of ConversationHelperInput(v45, v91, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    outlined init with copy of ReferenceResolutionClientProtocol(v91 + 8, v0 + 16);
    outlined destroy of CamOutput(v91, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    v92 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 608) = v92;
    *v92 = v0;
    v92[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    return ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(*(_QWORD *)(v0 + 344), v0 + 16, *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 280));
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 496);
    v10 = *(_QWORD *)(v0 + 504);
    v12 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 328);
    v13 = *(_QWORD *)(v0 + 336);
    v15 = *(_QWORD *)(v0 + 320);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    outlined init with take of StringKeyedValue(v13, v14, type metadata accessor for RemoteConversationOrReformedInput);
    outlined init with take of StringKeyedValue(v14, v15, type metadata accessor for RemoteConversationOrReformedInput);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v64 = *(uint64_t **)(v0 + 320);
      swift_release();
      v95 = *v64;
      goto LABEL_21;
    }
    v16 = *(_QWORD *)(v0 + 536);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 496) + 32))(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 488));
    if (v16 == 4)
    {
      swift_release();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v19 = 134217984;
        *(_QWORD *)(v0 + 264) = 5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v17, v18, "Too many reformations encountered when finding a handler for input. (Max count = %ld).", v19, 0xCu);
        MEMORY[0x1B5E44758](v19, -1, -1);
      }
      v9 = *(_QWORD *)(v0 + 496);
      v7 = *(_QWORD *)(v0 + 504);
      v8 = *(_QWORD *)(v0 + 488);

      goto LABEL_9;
    }
    *(_QWORD *)(v0 + 536) = v16 + 1;
    v84 = *(_QWORD *)(v0 + 480);
    v85 = *(_QWORD *)(v0 + 456);
    v86 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + 240) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v0 + 248) = v86;
    UUID.init()();
    Input.parse.getter();
    v87 = type metadata accessor for Parse();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v85, 0, 1, v87);
    specialized SimpleOrderedDictionary.subscript.setter(v85, v84);
    v89 = *(_QWORD *)(v0 + 240);
    v88 = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 544) = v89;
    *(_QWORD *)(v0 + 552) = v88;
    v90 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 560) = v90;
    *v90 = v0;
    v90[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    return ConversationHandlerLocator.allHandlers(for:)(v89, v88);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 616) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2 + 16);
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2 + 584))(*(_QWORD *)(v2 + 376), *(_QWORD *)(v2 + 464));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 496);
  v1 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 488);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 520) = __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  if (v4 > 4)
  {
    swift_release();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v17 = 134217984;
      *(_QWORD *)(v0 + 264) = 5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v15, v16, "Too many reformations encountered when finding a handler for input. (Max count = %ld).", v17, 0xCu);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
    v19 = *(_QWORD *)(v0 + 496);
    v18 = *(_QWORD *)(v0 + 504);
    v20 = *(_QWORD *)(v0 + 488);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 288);
    *(_QWORD *)(v0 + 528) = *(_QWORD *)(*(_QWORD *)(v0 + 296) + 16);
    *(_QWORD *)(v0 + 536) = v7;
    v8 = *(_QWORD *)(v0 + 480);
    v9 = *(_QWORD *)(v0 + 456);
    *(_QWORD *)(v0 + 240) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v0 + 248) = MEMORY[0x1E0DEE9D8];
    UUID.init()();
    Input.parse.getter();
    v10 = type metadata accessor for Parse();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
    specialized SimpleOrderedDictionary.subscript.setter(v9, v8);
    v11 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 544) = v11;
    v12 = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 552) = v12;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 560) = v13;
    *v13 = v0;
    v13[1] = ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:);
    return ConversationHandlerLocator.allHandlers(for:)(v11, v12);
  }
}

uint64_t ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v5 + 632) = a4;
  *(_QWORD *)(v5 + 288) = a3;
  *(_QWORD *)(v5 + 296) = v4;
  *(_QWORD *)(v5 + 272) = a1;
  *(_QWORD *)(v5 + 280) = a2;
  v6 = type metadata accessor for RemoteConversationOrReformedInput(0);
  *(_QWORD *)(v5 + 304) = v6;
  *(_QWORD *)(v5 + 312) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 320) = swift_task_alloc();
  *(_QWORD *)(v5 + 328) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  *(_QWORD *)(v5 + 336) = swift_task_alloc();
  *(_QWORD *)(v5 + 344) = swift_task_alloc();
  *(_QWORD *)(v5 + 352) = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  *(_QWORD *)(v5 + 360) = v7;
  *(_QWORD *)(v5 + 368) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 376) = swift_task_alloc();
  *(_QWORD *)(v5 + 384) = swift_task_alloc();
  *(_QWORD *)(v5 + 392) = swift_task_alloc();
  *(_QWORD *)(v5 + 400) = swift_task_alloc();
  *(_QWORD *)(v5 + 408) = swift_task_alloc();
  *(_QWORD *)(v5 + 416) = swift_task_alloc();
  *(_QWORD *)(v5 + 424) = swift_task_alloc();
  *(_QWORD *)(v5 + 432) = swift_task_alloc();
  *(_QWORD *)(v5 + 440) = swift_task_alloc();
  *(_QWORD *)(v5 + 448) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  *(_QWORD *)(v5 + 456) = swift_task_alloc();
  v8 = type metadata accessor for UUID();
  *(_QWORD *)(v5 + 464) = v8;
  *(_QWORD *)(v5 + 472) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 480) = swift_task_alloc();
  v9 = type metadata accessor for Input();
  *(_QWORD *)(v5 + 488) = v9;
  *(_QWORD *)(v5 + 496) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 504) = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v5 + 512) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t specialized AmbiguityService.getAlternatives<A>(nlParses:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  void (*v21)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v29[12];
  unsigned int v30;
  void (*v31)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;

  v2 = type metadata accessor for Siri_Nlu_External_Parser();
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  MEMORY[0x1E0C80A78](v2);
  v38 = &v29[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v4);
  v36 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = type metadata accessor for Siri_Nlu_External_UserParse();
  v6 = *(_QWORD *)(v35 - 8);
  v7 = MEMORY[0x1E0C80A78](v35);
  v37 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v34 = &v29[-v9];
  v10 = type metadata accessor for Parse();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = MEMORY[0x1E0DEE9D8];
  if (v14)
  {
    v42 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v16 = (_BYTE *)(a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
    v17 = *(_QWORD *)(v6 + 72);
    v31 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16);
    v32 = v17;
    v30 = *MEMORY[0x1E0D9C678];
    v33 = v6;
    v18 = v34;
    v19 = v35;
    v20 = v37;
    do
    {
      v41 = v14;
      v21 = v31;
      v31(v18, v16, v19);
      v21(v20, v18, v19);
      v22 = v38;
      Siri_Nlu_External_UserParse.parser.getter();
      v23 = v11;
      v24 = v36;
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v22, v40);
      v25 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
      v11 = v23;
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v23 + 104))(v13, v30, v10);
      (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v18, v19);
      v15 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v42;
      }
      v27 = *(_QWORD *)(v15 + 16);
      v26 = *(_QWORD *)(v15 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v15 = v42;
      }
      *(_QWORD *)(v15 + 16) = v27 + 1;
      (*(void (**)(unint64_t, _BYTE *, uint64_t))(v23 + 32))(v15+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v27, v13, v10);
      v42 = v15;
      v16 += v32;
      v14 = v41 - 1;
    }
    while (v41 != 1);
  }
  return v15;
}

uint64_t specialized AmbiguityService.getAlternatives<A>(nlParses:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[4];
  unsigned int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a1;
  v5 = type metadata accessor for Siri_Nlu_External_Parser();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x1E0C80A78](v5);
  v32 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Siri_Nlu_External_UserParse();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v31 = &v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v15 = &v28[-v14];
  v37 = type metadata accessor for Parse();
  v16 = *(_QWORD *)(v37 - 8);
  result = MEMORY[0x1E0C80A78](v37);
  v19 = &v28[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = a3 >> 1;
  v20 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v21 = MEMORY[0x1E0DEE9D8];
  if (!v20)
    return v21;
  v38 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
  if ((v20 & 0x8000000000000000) == 0)
  {
    v29 = *MEMORY[0x1E0D9C678];
    v22 = v36;
    if (a2 > v36)
      v22 = a2;
    v30 = v22;
    while (v30 != a2)
    {
      v23 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16);
      v23(v15, v35 + *(_QWORD *)(v11 + 72) * a2, v10);
      v23(v31, (uint64_t)v15, v10);
      v24 = v32;
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v24, v34);
      v25 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v9, 0, 1, v25);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v16 + 104))(v19, v29, v37);
      (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v15, v10);
      v21 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v21 = v38;
      }
      v27 = *(_QWORD *)(v21 + 16);
      v26 = *(_QWORD *)(v21 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v21 = v38;
      }
      *(_QWORD *)(v21 + 16) = v27 + 1;
      result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v16 + 32))(v21+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v27, v19, v37);
      v38 = v21;
      if (v36 == ++a2)
        return v21;
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized SiriAudioAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for USOParse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    if (!specialized static AffinityScorerUtils.getTask(_:)())
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1B4BE6000, v21, v22, "SiriAudioAffinityScorer Could not extract usoTask from parse", v23, 2u);
        MEMORY[0x1B5E44758](v23, -1, -1);
      }

      goto LABEL_23;
    }
    if (UsoTask.verbString.getter() == 0x656D75736572 && v8 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        if (one-time initialization token for executor != -1)
          swift_once();
        v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
        v12 = Logger.logObject.getter();
        v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v14 = 0;
          _os_log_impl(&dword_1B4BE6000, v12, v13, "SiriAudioAffinityScorer Not a resume task. Returning .default affinity", v14, 2u);
          MEMORY[0x1B5E44758](v14, -1, -1);
        }

        swift_release();
LABEL_23:
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return 2;
      }
    }
    if ((specialized static SiriAudioAffinityScorer.isResumeApp(usoTask:)() & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_1B4BE6000, v26, v27, "SiriAudioAffinityScorer This is a resume+app request. Returning high affinity", v28, 2u);
        MEMORY[0x1B5E44758](v28, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return 3;
    }
    else
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_1B4BE6000, v30, v31, "SiriAudioAffinityScorer UsoTask task is resume, but not resume app. Returning low affinity not to interfere with playback controls", v32, 2u);
        MEMORY[0x1B5E44758](v32, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17))
    {

      return 2;
    }
    v18 = 2;
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "SiriAudioAffinityScorer Got unexpected parse", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  return v18;
}

uint64_t ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2)
{
  return ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)&unk_1E68512D0, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:));
}

void protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance ConversationBridgeProcessorDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(*(void **)(v2 + 24), a1, a2, *(_QWORD *)v2, (uint64_t)&protocol witness table for ConversationBridgeProcessorDelegate);
}

void static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(a1, a2, a3, a4, a5, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> (), (uint64_t)&block_descriptor_3_0, (SEL *)&selRef_prepareForAudioHandoffWithCompletion_);
}

void static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, SEL *a8)
{
  void *v10;
  _QWORD v11[6];

  v11[4] = a2;
  v11[5] = a3;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = a6;
  v11[3] = a7;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(a1, *a8, v10);
  _Block_release(v10);
}

uint64_t specialized UsoTask.vocFilter(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = type metadata accessor for UsoIdentifier.NluComponent();
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  MEMORY[0x1E0C80A78](v2);
  v46 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  MEMORY[0x1E0C80A78](v48);
  v49 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v47 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v45 - v9;
  MEMORY[0x1E0C80A78](v8);
  v52 = (uint64_t)&v45 - v11;
  v12 = type metadata accessor for UsoIdentifier();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for IdentifierAppBundle();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v45 - v21;
  UsoIdentifier.appBundleSemantic.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, *MEMORY[0x1E0DA0F08], v16);
  v23 = MEMORY[0x1B5E40114](v22, v20);
  v24 = *(void (**)(char *, uint64_t))(v17 + 8);
  v24(v20, v16);
  v25 = v22;
  v26 = v15;
  v27 = v16;
  v28 = v12;
  v24(v25, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  if ((v23 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
LABEL_9:
    v37 = 0;
    return v37 & 1;
  }
  v29 = v13;
  v30 = v52;
  UsoIdentifier.sourceComponent.getter();
  v32 = v50;
  v31 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v10, *MEMORY[0x1E0DA0600], v51);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v10, 0, 1, v31);
  v33 = v49;
  v34 = v49 + *(int *)(v48 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v30, v49, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, v34, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v35 = v26;
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v36(v33, 1, v31) != 1)
  {
    v45 = v35;
    v48 = v28;
    v38 = v47;
    outlined init with copy of ReferenceResolutionClientProtocol?(v33, v47, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v39 = v36(v34, 1, v31);
    v40 = v33;
    v41 = v52;
    if (v39 != 1)
    {
      v43 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v46, v34, v31);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0620], MEMORY[0x1E0DA0630]);
      v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      v44 = *(void (**)(char *, uint64_t))(v32 + 8);
      v44(v43, v31);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v45, v48);
      v44((char *)v38, v31);
      outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      return v37 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v45, v48);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v38, v31);
    v33 = v40;
    goto LABEL_8;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
  if (v36(v34, 1, v31) != 1)
  {
LABEL_8:
    outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
    goto LABEL_9;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v37 = 1;
  return v37 & 1;
}

uint64_t specialized UsoTask.generalVolumeFilter(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v31;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v31 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v31 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v31 - v13;
  v15 = specialized UsoTask.vocFilter(_:)(a1);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v16(v14, a1, v2);
  if ((v15 & 1) != 0)
  {
    v17 = UsoIdentifier.namespace.getter();
    v19 = v18;
    if (!v18)
    {
      v16(v12, (uint64_t)v14, v2);
      goto LABEL_15;
    }
    if (v17 == 0xD000000000000010 && v18 == 0x80000001B4EF3250)
    {
      swift_bridgeObjectRelease();
      v16(v12, (uint64_t)v14, v2);
    }
    else
    {
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v16(v12, (uint64_t)v14, v2);
      v19 = 0;
      if ((v21 & 1) == 0)
        goto LABEL_15;
    }
    if (UsoIdentifier.value.getter() == 0x656D756C6F76 && v22 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      v19 = 1;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
LABEL_15:
    v24 = *(void (**)(char *, uint64_t))(v3 + 8);
    v24(v12, v2);
    v16(v9, (uint64_t)v14, v2);
    if ((v19 & 1) != 0)
    {
      v24(v9, v2);
      v20 = 1;
LABEL_31:
      v24(v14, v2);
      return v20 & 1;
    }
    v25 = UsoIdentifier.namespace.getter();
    v20 = v26;
    if (v26)
    {
      if (v25 == 0x746553656E6F6870 && v26 == 0xEC000000676E6974)
      {
        swift_bridgeObjectRelease();
        v16(v6, (uint64_t)v9, v2);
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v16(v6, (uint64_t)v9, v2);
        v20 = 0;
        if ((v28 & 1) == 0)
          goto LABEL_30;
      }
      if (UsoIdentifier.value.getter() == 0x5F6C6172656E6567 && v29 == 0xEE00656D756C6F76)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
      }
      else
      {
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
      goto LABEL_30;
    }
    v16(v6, (uint64_t)v9, v2);
LABEL_30:
    v24(v6, v2);
    v24(v9, v2);
    goto LABEL_31;
  }
  v20 = 0;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
  return v20 & 1;
}

uint64_t specialized UsoTask.siriVolumeFilter(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  char v14;
  char v16;
  uint64_t v17;
  uint64_t v19;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - v7;
  v9 = specialized UsoTask.vocFilter(_:)(a1);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) != 0 && (v11 = UsoIdentifier.namespace.getter(), v12))
  {
    if (v11 == 0xD000000000000010 && v12 == 0x80000001B4EF3250)
    {
      v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
      v14 = 0;
      if ((v16 & 1) == 0)
        goto LABEL_7;
    }
    if (UsoIdentifier.value.getter() == 0x6563696F76 && v17 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      v14 = 1;
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v8, v2);
    v10(v6, a1, v2);
    v14 = 0;
  }
LABEL_7:
  v13(v6, v2);
  return v14 & 1;
}

uint64_t specialized UsoTask.mediaVolumeFilter(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  char v14;
  char v16;
  uint64_t v17;
  uint64_t v19;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - v7;
  v9 = specialized UsoTask.vocFilter(_:)(a1);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) != 0 && (v11 = UsoIdentifier.namespace.getter(), v12))
  {
    if (v11 == 0xD000000000000010 && v12 == 0x80000001B4EF3250)
    {
      v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v13 = *(void (**)(char *, uint64_t))(v3 + 8);
      v13(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
      v14 = 0;
      if ((v16 & 1) == 0)
        goto LABEL_7;
    }
    if (UsoIdentifier.value.getter() == 0x707954616964656DLL && v17 == 0xE900000000000065)
    {
      swift_bridgeObjectRelease();
      v14 = 1;
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v8, v2);
    v10(v6, a1, v2);
    v14 = 0;
  }
LABEL_7:
  v13(v6, v2);
  return v14 & 1;
}

uint64_t specialized UsoTask.callVolumeFilter(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  uint64_t v18;
  uint64_t v20;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - v7;
  v9 = specialized UsoTask.vocFilter(_:)(a1);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) == 0 || (v11 = UsoIdentifier.namespace.getter(), !v12))
  {
    v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    v10(v6, a1, v2);
    v16 = 0;
    goto LABEL_10;
  }
  if (v11 == 0x746553656E6F6870 && v12 == 0xEC000000676E6974)
  {
    v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    swift_bridgeObjectRelease();
    v10(v6, a1, v2);
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    swift_bridgeObjectRelease();
    v10(v6, a1, v2);
    v16 = 0;
    if ((v14 & 1) == 0)
      goto LABEL_10;
  }
  if (UsoIdentifier.value.getter() == 0x6C6F765F6C6C6163 && v18 == 0xEB00000000656D75)
  {
    swift_bridgeObjectRelease();
    v16 = 1;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
LABEL_10:
  v15(v6, v2);
  return v16 & 1;
}

uint64_t specialized UsoTask.supportedBooleanNamespaceValuesFilter(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v21 - v7;
  v9 = specialized UsoTask.vocFilter(_:)(a1);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) != 0 && (v11 = UsoIdentifier.namespace.getter(), v12))
  {
    if (v11 == 0x747465536C6F6F62 && v12 == 0xEF656D614E676E69)
    {
      v15 = *(void (**)(char *, uint64_t))(v3 + 8);
      v15(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v15 = *(void (**)(char *, uint64_t))(v3 + 8);
      v15(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
      v16 = 0;
      if ((v14 & 1) == 0)
        goto LABEL_14;
    }
    if (one-time initialization token for kSupportedBooleanNamespaceValues != -1)
      swift_once();
    v17 = static UsoTask.kSupportedBooleanNamespaceValues;
    v18 = UsoIdentifier.value.getter();
    v16 = specialized Set.contains(_:)(v18, v19, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    v10(v6, a1, v2);
    v16 = 0;
  }
LABEL_14:
  v15(v6, v2);
  return v16 & 1;
}

unint64_t lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError;
  if (!lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationOutputError, &type metadata for ConversationOutputError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError;
  if (!lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationOutputError, &type metadata for ConversationOutputError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationOutputError and conformance ConversationOutputError);
  }
  return result;
}

uint64_t specialized InformationAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  double v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD v34[4];

  v0 = type metadata accessor for PommesSearchReason();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v34 - v5;
  v7 = type metadata accessor for Parse();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (void **)((char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  if ((*(unsigned int (**)(void **, uint64_t))(v8 + 88))(v10, v7) != *MEMORY[0x1E0D9C5F8])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B4BE6000, v14, v15, "Got unexpected parse", v16, 2u);
      MEMORY[0x1B5E44758](v16, -1, -1);
    }

    (*(void (**)(void **, uint64_t))(v8 + 8))(v10, v7);
    return 2;
  }
  (*(void (**)(void **, uint64_t))(v8 + 96))(v10, v7);
  v11 = *v10;
  dispatch thunk of PommesResponse.searchReason.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0D98910], v0);
  lazy protocol witness table accessor for type PommesSearchReason and conformance PommesSearchReason();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v34[2] == v34[0] && v34[3] == v34[1])
  {
    swift_bridgeObjectRelease_n();
    v12 = *(void (**)(char *, uint64_t))(v1 + 8);
    v12(v4, v0);
    v12(v6, v0);
LABEL_12:
    if (one-time initialization token for executor != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1B4BE6000, v21, v22, "Detected fallback pommes response", v23, 2u);
      MEMORY[0x1B5E44758](v23, -1, -1);
    }

    return 4;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = *(void (**)(char *, uint64_t))(v1 + 8);
  v19(v4, v0);
  v19(v6, v0);
  if ((v18 & 1) != 0)
    goto LABEL_12;
  dispatch thunk of PommesResponse.primaryQueryConfidence()();
  if (v25 > 0.5)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v17 = 2;
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1B4BE6000, v27, v28, "Detected high confidence pommes response", v29, 2u);
      MEMORY[0x1B5E44758](v29, -1, -1);

      return v17;
    }

    return 2;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_1B4BE6000, v31, v32, "Detected low confidence pommes response", v33, 2u);
    MEMORY[0x1B5E44758](v33, -1, -1);
  }

  return 0;
}

uint64_t static AceMetricsLogger.logAnalytics(command:)(void *a1)
{
  swift_getObjectType();
  return specialized static AceMetricsLogger.logAnalytics(command:)(a1);
}

uint64_t default argument 1 of static Log.begin(_:enableTelemetry:)()
{
  return 0;
}

uint64_t static AceMetricsLogger.logRemoteAnalytics(service:command:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t ObjectType;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  ObjectType = swift_getObjectType();
  return specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)((uint64_t)v5, a2, v3, ObjectType, v4);
}

uint64_t default argument 4 of AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:invokedByPeerToPeerEORR:rrClient:)()
{
  return 0;
}

uint64_t default argument 1 of static CombiningAffinityScorer.max(children:requireAll:)()
{
  return 0;
}

uint64_t default argument 1 of static CombiningAffinityScorer.min(children:requireAll:)()
{
  return 0;
}

uint64_t default argument 1 of static CombiningAffinityScorer.sum(children:requireAll:)()
{
  return 0;
}

uint64_t default argument 0 of AffinityScorerManager.DefaultAffinityScorer.init(score:)()
{
  return 2;
}

uint64_t default argument 5 of AnnounceExecutionOverride.init(activeTasks:executedTasks:topNlParse:isTriggerlessFollowup:isMitigated:isMedocSupported:)()
{
  return 0;
}

uint64_t default argument 0 of ConditionalIntentMetadataStore.init(mapIsPersistedConditionalIntent:)()
{
  return MEMORY[0x1E0DEE9E0];
}

uint64_t default argument 0 of IntentStatesStore.init(conditionalIntentsStates:)()
{
  return MEMORY[0x1E0DEE9E0];
}

uint64_t default argument 1 of AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for AppShortcutStateProvider();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for AppShortcutStateProvider;
  *a1 = result;
  return result;
}

uint64_t default argument 2 of static CachedPluginCatalog.load(cacheUrl:sharedFlowPluginServiceClient:ignoreOSVersion:)()
{
  return 0;
}

void default argument 1 of CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for RealCamProvider;
  *(_QWORD *)(a1 + 32) = &protocol witness table for RealCamProvider;
}

id default argument 0 of TrialExperimentationAssetManager.init(trialClient:)()
{
  return objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 125);
}

id default argument 6 of Conversation.init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  id result;

  v2 = type metadata accessor for ServerFallbackDisablingUtils();
  v3 = (_QWORD *)swift_allocObject();
  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v3[2] = result;
  v3[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v3[4] = 0;
  a1[3] = v2;
  a1[4] = &protocol witness table for ServerFallbackDisablingUtils;
  *a1 = v3;
  return result;
}

uint64_t default argument 1 of JetsamHelper.init(name:queue:timeout:)()
{
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  return static OS_dispatch_queue.main.getter();
}

uint64_t default argument 0 of FlowAgent.execute(timeout:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 300;
  v2 = *MEMORY[0x1E0DEF4A0];
  v3 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t default argument 9 of ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:isSystemAssistantExperienceSupported:)()
{
  type metadata accessor for RecentDialogTracker();
  swift_allocObject();
  return RecentDialogTracker.init(timeProvider:)((uint64_t)closure #1 in RecentDialogTracker.init(), 0);
}

uint64_t default argument 10 of ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:isSystemAssistantExperienceSupported:)()
{
  return AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
}

uint64_t default argument 6 of ConversationBridgeInstrumentationUtil.logExecutionRequestStarted(executionForRSKE:source:preExecutionType:rootRequestId:requestId:resultCandidateId:triggerlessFollowupHandledLocally:)()
{
  return 0;
}

uint64_t default argument 2 of InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)()
{
  return 0;
}

uint64_t default argument 1 of InstrumentationUtil.buildWrapperEventMessage(_:logResourceUtilization:)()
{
  return 0;
}

uint64_t default argument 1 of ConversationBridgeInstrumentationUtil.mapPreExecutionRuleTypeToLogRuleType(_:_:)()
{
  return 0;
}

uint64_t default argument 2 of ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)()
{
  return 0;
}

uint64_t default argument 3 of ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)()
{
  return 0;
}

uint64_t default argument 5 of static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)()
{
  return 0;
}

uint64_t default argument 3 of ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v2 = type metadata accessor for FeatureChecker();
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v7 = &type metadata for IntelligenceFlowFeatureFlag;
  v8 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  v4 = isFeatureEnabled(_:)();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  *(_BYTE *)(v3 + 17) = v4 & 1;
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for FeatureChecker;
  *a1 = v3;
  return result;
}

uint64_t default argument 21 of ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)()
{
  return 0;
}

id default argument 2 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  return objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
}

uint64_t default argument 3 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  return AFDeviceSupportsSAE();
}

id default argument 3 of CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id result;

  v2 = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 125);
  v3 = type metadata accessor for TrialExperimentationAssetManager();
  v4 = swift_allocObject();
  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = result;
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for TrialExperimentationAssetManager;
  *a1 = v4;
  return result;
}

uint64_t default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for instance);
}

uint64_t default argument 6 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  return 0;
}

uint64_t default argument 22 of ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)()
{
  return 0;
}

uint64_t default argument 0 of static ConversationSearchResult.unsupported(exclude:)()
{
  return 1;
}

uint64_t default argument 0 of ConversationService.ExecutionTaskContext.init(forceTimeout:)()
{
  return 60000000000;
}

id default argument 0 of AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  id result;

  v2 = type metadata accessor for LinkMetadataProvider();
  v3 = swift_allocObject();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  *(_QWORD *)(v3 + 16) = result;
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for LinkMetadataProvider;
  *a1 = v3;
  return result;
}

void default argument 1 of LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for LinkViewActionProvider;
  *(_QWORD *)(a1 + 32) = &protocol witness table for LinkViewActionProvider;
}

uint64_t default argument 6 of DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for instance);
}

uint64_t default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

uint64_t default argument 4 of Conversation.init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static JetsamHelper.defaultTimeout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t default argument 2 of static Log.begin(_:_:enableTelemetry:)()
{
  return 0;
}

uint64_t default argument 8 of ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t updated;

  v2 = *MEMORY[0x1E0D9BD88];
  updated = type metadata accessor for ContextUpdateScope();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 104))(a1, v2, updated);
}

uint64_t default argument 7 of EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _OWORD v5[2];
  uint64_t v6;

  v2 = type metadata accessor for CorrectionsUndoManager();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 40) = 0u;
  *(_QWORD *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9D8];
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v5, v3 + 24);
  swift_endAccess();
  a1[3] = v2;
  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager, (uint64_t (*)(uint64_t))type metadata accessor for CorrectionsUndoManager, (uint64_t)&protocol conformance descriptor for CorrectionsUndoManager);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t default argument 3 of static ExecutionContextUpdate.convertFromFlowContextUpdate(_:nluActiveTasks:nluCompletedTasks:populateLegacyProvideContext:)()
{
  return 0;
}

uint64_t default argument 0 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 1 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 2 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)()
{
  return 0;
}

uint64_t default argument 3 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)()
{
  return 0;
}

uint64_t default argument 4 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)()
{
  return 0;
}

uint64_t default argument 5 of ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)()
{
  return 0;
}

uint64_t default argument 5 of RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)()
{
  type metadata accessor for SnippetManager();
  return static SnippetManager.sharedInstance.getter();
}

uint64_t default argument 1 of HangUpRule.init(isUserOnActivePhoneCall:isActiveCallFallbackAllowed:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  v0 = type metadata accessor for SiriInCallFeatureFlag();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D98458], v0);
  v4 = SiriInCallFeatureFlag.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t (*default argument 0 of OrderedForest.debugDescription(printer:)(uint64_t a1))(uint64_t a1)
{
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  return partial apply for closure #1 in default argument 0 of OrderedForest.debugDescription(printer:);
}

uint64_t default argument 1 of RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)()
{
  return 1;
}

void default argument 0 of SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(_QWORD *a1@<X8>)
{
  id v2;
  id v3;

  v2 = objc_msgSend((id)objc_opt_self(), sel_siriExecutionStream);
  v3 = objc_msgSend(v2, sel_source);

  a1[3] = &type metadata for DefaultBiomeSource;
  a1[4] = &protocol witness table for DefaultBiomeSource;
  *a1 = v3;
}

uint64_t default argument 3 of static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *MEMORY[0x1E0D9B358];
  v3 = type metadata accessor for SiriKitConfirmationState();
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(a1, v2, v3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
}

uint64_t default argument 1 of StringProtocol.index<A>(of:options:)()
{
  return 0;
}

uint64_t default argument 7 of SiriKitRuntimeState.makeNewTurn(requestContextData:executionRequestId:rootRequestId:invocationState:conversationLoggingId:bridge:scopedRRData:invokedByPeerToPeerEORR:)()
{
  return 0;
}

uint64_t default argument 5 of TaskData.init(taskId:taskType:stepType:statusReason:activities:attribute:)()
{
  return 0;
}

uint64_t default argument 0 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for instance != -1)
    swift_once();
  v2 = static SiriKitBiomeDonator.instance;
  a1[3] = type metadata accessor for SiriKitBiomeDonator();
  a1[4] = (uint64_t)&protocol witness table for SiriKitBiomeDonator;
  *a1 = v2;
  return swift_retain();
}

uint64_t default argument 1 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for instance != -1)
    swift_once();
  v2 = static SiriKitCurareDonator.instance;
  a1[3] = type metadata accessor for SiriKitCurareDonator();
  a1[4] = (uint64_t)&protocol witness table for SiriKitCurareDonator;
  *a1 = v2;
  return swift_retain();
}

id default argument 6 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)()
{
  return objc_msgSend((id)objc_opt_self(), sel_shared);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEA950]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance LNSystemProtocolIdentifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LNSystemProtocolIdentifier()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LNSystemProtocolIdentifier()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance LNSystemProtocolIdentifier(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance LNSystemProtocolIdentifier(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance LNSystemProtocolIdentifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x1B5E432E8](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance AFCallState(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AFCallState(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance AFCallState@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance AFCallState(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance AFCallState(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AFCallState(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AFCallState(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AFCallState(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AFCallState(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance AFCallState()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance AFCallState()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance AFCallState(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AFCallState(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LNSystemProtocolIdentifier()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AFCallState(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance AFCallState@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNSystemProtocolIdentifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNSystemProtocolIdentifier()
{
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LNSystemProtocolIdentifier@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x1B5E432E8](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNActionTypeSpecificMetadataKey()
{
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&protocol conformance descriptor for LNActionTypeSpecificMetadataKey);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&protocol conformance descriptor for LNActionTypeSpecificMetadataKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  _QWORD v38[2];
  unint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  uint64_t v42;
  unint64_t v43;

  v38[1] = a5;
  v7 = type metadata accessor for OSSignpostID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.instrumentation);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v17, v18, "Logging Analytics to remote device", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  objc_opt_self();
  v20 = swift_dynamicCastObjCClass();
  if (v20)
  {
    v21 = (void *)v20;
    swift_unknownObjectRetain();
    v22 = specialized static ViewMetricsLogger.getSparseAddViews(addViews:)(v21);
  }
  else
  {
    objc_opt_self();
    v23 = swift_dynamicCastObjCClass();
    if (!v23)
      goto LABEL_15;
    v24 = (void *)v23;
    swift_unknownObjectRetain();
    v22 = (uint64_t)specialized static SayMetricsLogger.getSparseCommand(command:)(v24);
  }
  v25 = (void *)v22;
  v38[0] = v7;
  swift_unknownObjectRelease();
  v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v43 = v26;
  v27 = objc_msgSend(v25, sel_dictionary);
  if (v27)
  {
    v28 = v27;
    v29 = v8;
    v42 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    *(_QWORD *)&v41 = v28;
    outlined init with take of Any(&v41, v40);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39 = v26;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v40, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    v43 = v39;
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = v8;
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v41);
    outlined destroy of Any?((uint64_t)&v41);
  }
  v31 = specialized static AceMetricsLogger.makeJSONFromDictionary(dictionary:)();
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D881E8]), sel_init);
  v35 = (void *)MEMORY[0x1B5E432E8](0x52524F454E4B53, 0xE700000000000000);
  objc_msgSend(v34, sel_setEventName_, v35);

  v36 = (void *)MEMORY[0x1B5E432E8](v31, v33);
  swift_bridgeObjectRelease();
  objc_msgSend(v34, sel_setEventValue_, v36);

  AceServiceInvokerAsync.submitAndForget(_:)();
  v8 = v29;
  v7 = v38[0];
LABEL_15:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a3);
}

uint64_t specialized static AceMetricsLogger.logAnalytics(command:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  uint64_t v22;
  NSObject *v23;
  int v24;
  _DWORD *v25;
  id v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  os_log_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v10 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  objc_opt_self();
  v11 = swift_dynamicCastObjCClass();
  if (v11)
  {
    v12 = (void *)v11;
    swift_unknownObjectRetain();
    specialized static ViewMetricsLogger.logAnalytics(view:)(v12);
LABEL_13:
    swift_unknownObjectRelease();
LABEL_14:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  objc_opt_self();
  v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    v14 = (void *)v13;
    swift_unknownObjectRetain();
    specialized static SayMetricsLogger.logAnalytics(command:)(v14);
    goto LABEL_13;
  }
  objc_opt_self();
  v15 = swift_dynamicCastObjCClass();
  if (v15)
  {
    v16 = (void *)v15;
    swift_unknownObjectRetain();
    specialized static DialogMetricsLogger.logAnalytics(dialog:)(v16);
    goto LABEL_13;
  }
  objc_opt_self();
  v17 = swift_dynamicCastObjCClass();
  if (v17)
  {
    v18 = (void *)v17;
    swift_unknownObjectRetain();
    specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(v18);
    goto LABEL_13;
  }
  objc_opt_self();
  v19 = swift_dynamicCastObjCClass();
  if (v19)
  {
    v20 = (void *)v19;
    swift_unknownObjectRetain();
    specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(v20);
    goto LABEL_13;
  }
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v22 = __swift_project_value_buffer(v2, (uint64_t)static Logger.instrumentation);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v22, v2);
  swift_unknownObjectRetain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, (os_log_type_t)v24))
  {

    swift_unknownObjectRelease_n();
    goto LABEL_21;
  }
  v39 = v24;
  v40 = v23;
  v25 = (_DWORD *)swift_slowAlloc();
  v38 = swift_slowAlloc();
  v42 = v38;
  *v25 = 136315138;
  v26 = objc_msgSend(a1, sel_encodedClassName);
  if (v26)
  {
    v27 = v26;
    v37 = v25 + 1;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v36 = (uint8_t *)v25;
    v29 = v28;

    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v29, &v42);
    v31 = v36;
    v41 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    v32 = v40;
    v33 = v31;
    _os_log_impl(&dword_1B4BE6000, v40, (os_log_type_t)v39, "Command unsupported for Grading data logging. You need to add logging support for command: %s", v31, 0xCu);
    v34 = v38;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v34, -1, -1);
    MEMORY[0x1B5E44758](v33, -1, -1);

LABEL_21:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_14;
  }
  result = swift_unknownObjectRelease();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag;
  if (!lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for IntelligenceFlowFeatureFlag, &type metadata for IntelligenceFlowFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag;
  if (!lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for IntelligenceFlowFeatureFlag, &type metadata for IntelligenceFlowFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag);
  }
  return result;
}

uint64_t outlined assign with take of CorrectingFlow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectingFlow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4C9D324()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in default argument 0 of OrderedForest.debugDescription(printer:)(uint64_t a1)
{
  return closure #1 in default argument 0 of OrderedForest.debugDescription(printer:)(a1);
}

ValueMetadata *type metadata accessor for AceMetricsLogger()
{
  return &type metadata for AceMetricsLogger;
}

void type metadata accessor for AFUserIdentityClassfication(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, &lazy cache variable for type metadata for AFUserIdentityClassfication);
}

void type metadata accessor for AFAnalyticsEventType(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, (unint64_t *)&lazy cache variable for type metadata for AFAnalyticsEventType);
}

void type metadata accessor for AFEndpointMode(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, &lazy cache variable for type metadata for AFEndpointMode);
}

void type metadata accessor for SISchemaDeviceSensitivityState(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, (unint64_t *)&lazy cache variable for type metadata for SISchemaDeviceSensitivityState);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, &lazy cache variable for type metadata for os_unfair_lock_s);
}

uint64_t specialized static AceMetricsLogger.makeJSONFromDictionary(dictionary:)()
{
  uint64_t v0;
  void *v1;
  Class isa;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v30[3];

  v30[2] = *(id *)MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v0);
  v1 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v30[0] = 0;
  v3 = objc_msgSend(v1, sel_dataWithJSONObject_options_error_, isa, 0, v30);

  v4 = v30[0];
  if (!v3)
  {
    v11 = v4;
    v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = (void *)swift_slowAlloc();
      v30[0] = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain();
      v18 = Dictionary.description.getter();
      v20 = v19;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v14, v15, "Could not serialize as JSON : %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v17, -1, -1);
      MEMORY[0x1B5E44758](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v30[0] = v5;
  v30[1] = v7;
  static String.Encoding.utf8.getter();
  lazy protocol witness table accessor for type Data and conformance Data();
  v8 = String.init<A>(bytes:encoding:)();
  if (!v9)
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = (void *)swift_slowAlloc();
      v30[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain();
      v26 = Dictionary.description.getter();
      v28 = v27;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Could not convert JSON data to a string : %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v25, -1, -1);
      MEMORY[0x1B5E44758](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    outlined consume of Data._Representation((uint64_t)v5, (unint64_t)v7);
    return 0;
  }
  v10 = v8;
  outlined consume of Data._Representation((uint64_t)v5, (unint64_t)v7);
  return v10;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0CB0368], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

void type metadata accessor for LNActionTypeSpecificMetadataKey(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, &lazy cache variable for type metadata for LNActionTypeSpecificMetadataKey);
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, &lazy cache variable for type metadata for LNSystemProtocolIdentifier);
}

void type metadata accessor for SMTTCUState(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, &lazy cache variable for type metadata for SMTTCUState);
}

void type metadata accessor for AFCallState(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, &lazy cache variable for type metadata for AFCallState);
}

void type metadata accessor for AFUserIdentityClassfication(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for Equatable in AFCallState()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, (uint64_t (*)(uint64_t))type metadata accessor for AFCallState, (uint64_t)&protocol conformance descriptor for AFCallState);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in AFCallState()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, (uint64_t (*)(uint64_t))type metadata accessor for AFCallState, (uint64_t)&protocol conformance descriptor for AFCallState);
}

uint64_t base witness table accessor for RawRepresentable in AFCallState()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, (uint64_t (*)(uint64_t))type metadata accessor for AFCallState, (uint64_t)&protocol conformance descriptor for AFCallState);
}

uint64_t base witness table accessor for SetAlgebra in AFCallState()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, (uint64_t (*)(uint64_t))type metadata accessor for AFCallState, (uint64_t)&protocol conformance descriptor for AFCallState);
}

uint64_t base witness table accessor for RawRepresentable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for RawRepresentable in LNActionTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&protocol conformance descriptor for LNActionTypeSpecificMetadataKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNActionTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&protocol conformance descriptor for LNActionTypeSpecificMetadataKey);
}

uint64_t base witness table accessor for Equatable in LNActionTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&protocol conformance descriptor for LNActionTypeSpecificMetadataKey);
}

uint64_t base witness table accessor for Equatable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
}

void Node.children.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t AceServiceInvokerImpl.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t AceServiceInvokerImpl.runLocation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

id AceServiceInvokerImpl.requestContextData.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t AceServiceInvokerImpl.executionRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AceServiceInvokerImpl.rootRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AceServiceInvokerImpl.invocationDeviceAssistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AceServiceInvokerImpl.executionDeviceAssistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AceServiceInvokerImpl.invokedByPeerToPeerEORR.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t AceServiceInvokerImpl.rrClient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 112, a1);
}

uint64_t AceServiceInvokerImpl.isInvalidated.getter()
{
  return swift_retain();
}

uint64_t one-time initialization function for userFacingResponseCommandList()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSSet);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B4EE3BA0;
  v1 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAUIAddViews);
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIAddViews.Type);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAUIAddDialogs);
  *(_QWORD *)(v0 + 88) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIAddDialogs.Type);
  *(_QWORD *)(v0 + 64) = v2;
  result = MEMORY[0x1B5E4390C](v0);
  static AceServiceInvokerImpl.userFacingResponseCommandList = result;
  return result;
}

uint64_t AceServiceInvokerImpl.__allocating_init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, uint64_t a8, __int128 a9, uint64_t a10, char a11, uint64_t a12)
{
  char v17;
  uint64_t v18;

  v17 = a7 & 1;
  v18 = swift_allocObject();
  AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(a1, a2, a3, a4, a5, a6, v17, a8, a9, a10, a11, a12);
  return v18;
}

uint64_t AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, uint64_t a8, __int128 a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v13 = v12;
  v19 = a7 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Bool, os_unfair_lock_s>);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 20) = 0;
  *(_BYTE *)(v20 + 16) = 0;
  *(_QWORD *)(v13 + 152) = v20;
  type metadata accessor for SubmissionTaskRegistry();
  v21 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Set<Task<SABaseCommand?, Error>>, os_unfair_lock_s>);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 16) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v21 + 16) = v22;
  *(_QWORD *)(v13 + 160) = v21;
  v23 = swift_allocObject();
  *(_DWORD *)(v23 + 20) = 0;
  *(_BYTE *)(v23 + 16) = 0;
  *(_QWORD *)(v13 + 168) = v23;
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 48) = a3;
  *(_QWORD *)(v13 + 56) = a4;
  *(_QWORD *)(v13 + 32) = a6;
  *(_QWORD *)(v13 + 40) = a2;
  *(_BYTE *)(v13 + 24) = v19;
  *(_QWORD *)(v13 + 64) = a5;
  *(_QWORD *)(v13 + 72) = a8;
  *(_OWORD *)(v13 + 80) = a9;
  *(_QWORD *)(v13 + 96) = a10;
  *(_BYTE *)(v13 + 104) = a11;
  outlined init with copy of ReferenceResolutionClientProtocol?(a12, (uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (v31)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a12, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    outlined init with take of ReferenceResolutionClientProtocol(&v30, (uint64_t)&v32);
  }
  else
  {
    swift_unknownObjectRetain();
    v24 = a6;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    v25 = type metadata accessor for ReferenceResolutionClient();
    v26 = ReferenceResolutionClient.__allocating_init()();
    v33 = v25;
    v34 = MEMORY[0x1E0D9C7B0];
    swift_unknownObjectRelease();

    *(_QWORD *)&v32 = v26;
    outlined destroy of ReferenceResolutionClientProtocol?(a12, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v32, v13 + 112);
  return v13;
}

uint64_t AceServiceInvokerImpl.__allocating_init(bridge:executionRequestId:rootRequestId:requestContextData:invokedByPeerToPeerEORR:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, uint64_t a8)
{
  uint64_t v16;
  _BYTE v18[40];

  outlined init with copy of ReferenceResolutionClientProtocol?(a8, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  v16 = swift_allocObject();
  AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(a1, a2, a3, a4, a5, a6, 0, 0, 0, 0, a7, (uint64_t)v18);
  outlined destroy of ReferenceResolutionClientProtocol?(a8, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  return v16;
}

Swift::Void __swiftcall AceServiceInvokerImpl.cancelPendingCommands()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;
  uint64_t v9;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 160) + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in SubmissionTaskRegistry.cancelAll()(v2, &v9);
  os_unfair_lock_unlock(v3);
  v4 = v9;
  if (one-time initialization token for ace != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.ace);
  oslog = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 134217984;
    v9 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, oslog, v6, "Completing pending completions. pending completion count: %ld", v7, 0xCu);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

}

Swift::Void __swiftcall AceServiceInvokerImpl.invalidate()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  *(_BYTE *)(v1 + 16) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  AceServiceInvokerImpl.cancelPendingCommands()();
}

_BYTE *closure #1 in AceServiceInvokerImpl.invalidate()(_BYTE *result)
{
  *result = 1;
  return result;
}

Swift::Bool __swiftcall AceServiceInvokerImpl.isAvailable()()
{
  return 1;
}

id AceServiceInvokerImpl.peerInfo()@<X0>(uint64_t *a1@<X8>)
{
  return AceServiceInvokerImpl.peerInfo()(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo, (uint64_t (*)(uint64_t))type metadata accessor for PeerInfoProvider, &lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, (uint64_t)&protocol conformance descriptor for PeerInfoProvider, a1);
}

id AceServiceInvokerImpl.endpointInfo()@<X0>(uint64_t *a1@<X8>)
{
  return AceServiceInvokerImpl.peerInfo()(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo, (uint64_t (*)(uint64_t))type metadata accessor for EndpointInfoProvider, &lazy protocol witness table cache variable for type EndpointInfoProvider and conformance EndpointInfoProvider, (uint64_t)&protocol conformance descriptor for EndpointInfoProvider, a1);
}

id AceServiceInvokerImpl.peerInfo()@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  id v13;

  v13 = *(id *)(*(_QWORD *)(v5 + 32) + *a1);
  v10 = a2(0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v13;
  a5[3] = v10;
  a5[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(a3, 255, a2, a4);
  *a5 = v11;
  return v13;
}

void AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> (), (uint64_t)&block_descriptor, (SEL *)&selRef_prepareForAudioHandoffWithCompletion_);
}

void AceServiceInvokerImpl.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> (), (uint64_t)&block_descriptor_3, (SEL *)&selRef_prepareForAudioHandoffFailedWithCompletion_);
}

void AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v5;
  void *v7;
  void *v8;
  _QWORD v9[6];

  v7 = *(void **)(v5 + 16);
  v9[4] = a1;
  v9[5] = a2;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = a3;
  v9[3] = a4;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v7, *a5, v8);
  _Block_release(v8);
}

void AceServiceInvokerImpl.submitAndForget(_:)(NSObject *a1)
{
  AceServiceInvokerImpl.submitAndForget(_:setRefId:)(a1, 1);
}

Swift::Void __swiftcall AceServiceInvokerImpl.submitAndForget(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  NSObject *v5;

  if (!((unint64_t)a1._rawValue >> 62))
  {
    v2 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
        v4 = MEMORY[0x1B5E43B94](i, a1._rawValue);
      else
        v4 = *((id *)a1._rawValue + i + 4);
      v5 = v4;
      AceServiceInvokerImpl.submitAndForget(_:setRefId:)(v4, 1);

    }
    goto LABEL_10;
  }
  __break(1u);
}

void AceServiceInvokerImpl.submitAndForgetWithoutRefId(_:)(NSObject *a1)
{
  AceServiceInvokerImpl.submitAndForget(_:setRefId:)(a1, 0);
}

void closure #2 in AceServiceInvokerImpl.submitAndForget(_:setRefId:)(void *a1, id a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *oslog;
  uint64_t v21;

  if (a2)
  {
    v3 = a2;
    if (one-time initialization token for ace != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.ace);
    v5 = a2;
    v6 = a2;
    oslog = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v21 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue();
      v10 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, oslog, v7, "AceServiceInvokerImpl received an error response, but was submitted via submitAndForget, so will ignore: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);

      return;
    }

  }
  else
  {
    if (one-time initialization token for ace != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.ace);
    oslog = a1;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v21 = v17;
      *(_DWORD *)v16 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?.Type);
      v18 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v14, v15, "AceServiceInvokerImpl received a response from submitAndForget, will ignore: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v17, -1, -1);
      MEMORY[0x1B5E44758](v16, -1, -1);

      return;
    }

  }
}

uint64_t AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:), (uint64_t)&unk_1E6841EB0, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:)(NSObject *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  uint64_t v10;

  if ((a2 & 1) != 0)
    v4 = (void *)MEMORY[0x1E0DEE9D8];
  else
    v4 = &outlined read-only object #0 of AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:);
  v5 = AceServiceInvokerImpl.createSubmissionTask<A>(for:options:expectingResponseOfType:)(a1, (uint64_t)v4, a3);
  swift_bridgeObjectRelease();
  v6 = *(os_unfair_lock_s **)(*(_QWORD *)(v3 + 160) + 16);
  v7 = (uint64_t *)&v6[4];
  v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  closure #1 in SubmissionTaskRegistry.register(_:)(v7, v5, &v10);
  os_unfair_lock_unlock(v8);
  swift_release();
  return v5;
}

uint64_t closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
  v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(_QWORD *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return Result<>.init(catching:)(*(_QWORD *)(v0 + 72), (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:));
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  v8[5] = a3;
  v8[6] = a2;
  v9 = (_QWORD *)swift_task_alloc();
  v8[7] = v9;
  *v9 = v8;
  v9[1] = AceServiceInvokerImpl._submitExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)(a3, a4);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl._submitExecute<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v6;

  v3[5] = a1;
  v3[6] = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v3[7] = v6;
  *v6 = v3;
  v6[1] = AceServiceInvokerImpl._submitExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)(a1, a2);
}

uint64_t AceServiceInvokerImpl._submitExecute<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v3[8] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl._submitExecute<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 160) + 16) + 24);
  os_unfair_lock_lock(v2);
  specialized Set._Variant.remove(_:)();
  os_unfair_lock_unlock(v2);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 160) + 16) + 24);
  os_unfair_lock_lock(v1);
  specialized Set._Variant.remove(_:)();
  os_unfair_lock_unlock(v1);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Result<>.init(catching:)(uint64_t a1, int *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v2[6] = a1;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
  v4 = type metadata accessor for Result();
  v2[7] = v4;
  v2[8] = *(_QWORD *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v5 = swift_task_alloc();
  v2[10] = v5;
  v8 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v6 = (_QWORD *)swift_task_alloc();
  v2[11] = v6;
  *v6 = v2;
  v6[1] = Result<>.init(catching:);
  return v8(v5);
}

uint64_t Result<>.init(catching:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(uint64_t **)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  swift_getErrorValue();
  Error.asSubmitCommandError.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v2);

  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v3 + 32))(v5, v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime20LinkExpansionContextV07SessionI0C_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  type metadata accessor for LinkExpansionContext.SessionContext();
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1E68420B8, (uint64_t *)&demangling cache variable for type metadata for PluginLookupByIntentTopic);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSb_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime23InterruptibleTaskResultOyytG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1E6842090, &demangling cache variable for type metadata for InterruptibleTaskResult<()>);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSo15AFSpeechPackageCSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1E6842068, (uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime23InterruptibleTaskResultOyAG18RemoteConversation_pSgG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1E6842040, &demangling cache variable for type metadata for InterruptibleTaskResult<RemoteConversation?>);
}

uint64_t AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:), (uint64_t)&unk_1E6841ED8, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:));
}

uint64_t closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
  v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(_QWORD *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return Result<>.init(catching:)(*(_QWORD *)(v0 + 72), (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl.submit<A>(_:setRefId:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.submit<A>(_:setRefId:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = AceServiceInvokerImpl._submitPrep<A>(_:setRefId:responseType:)(*(NSObject **)(v0 + 16), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 24));
  *(_QWORD *)(v0 + 40) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submit<A>(_:setRefId:);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v2[5] = v1;
  v2[6] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v2[7] = v5;
  *v5 = v2;
  v5[1] = AceServiceInvokerImpl._submitExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)(v1, v4);
}

uint64_t AceServiceInvokerImpl.submit<A>(_:setRefId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.publish(dialogEngineOutput:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[15] = a1;
  v2[16] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v3 = type metadata accessor for TemplatingText();
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingSection();
  v2[22] = v4;
  v2[23] = *(_QWORD *)(v4 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v5 = type metadata accessor for TemplatingResult();
  v2[35] = v5;
  v2[36] = *(_QWORD *)(v5 - 8);
  v2[37] = swift_task_alloc();
  v6 = type metadata accessor for DialogEngineOutput();
  v2[38] = v6;
  v2[39] = *(_QWORD *)(v6 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.publish(dialogEngineOutput:)()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(unint64_t, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  id v43;
  void *v44;
  id v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  os_log_type_t v164;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint8_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  unint64_t v174;
  uint64_t v175;
  id v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  id v181;
  void *v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  id v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  id v195;
  void *v196;
  id v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  BOOL v202;
  char **v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  id v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  id v219;
  void *v220;
  id v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char **v226;
  id v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  id v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  void *v250;
  id v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  id v257;
  id v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  id v267;
  void *v268;
  id v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  id v275;
  id v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  char **v281;
  id v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  id v292;
  void *v293;
  id v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  id v300;
  id v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  char **v306;
  id v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  id v318;
  _QWORD *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void (*v327)(uint64_t, unint64_t, uint64_t);
  uint64_t v328;
  void (*v329)(uint64_t, unint64_t, uint64_t);
  uint64_t v330;
  uint64_t v331;
  void (*v332)(_QWORD, unint64_t, _QWORD);
  void (*v333)(_QWORD, unint64_t, _QWORD);
  id v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  unint64_t v348;

  v3 = v0;
  v4 = v0[41];
  v5 = v0[39];
  v6 = v3[38];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v7(v4, v3[15], v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6);
  v347 = v3;
  if (v8 == *MEMORY[0x1E0D9BDC0])
  {
    v9 = v3[41];
    v11 = v3[36];
    v10 = v3[37];
    v12 = v3[35];
    (*(void (**)(uint64_t, _QWORD))(v3[39] + 96))(v9, v3[38]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v9, v12);
    v13 = TemplatingResult.sections.getter();
    v348 = MEMORY[0x1E0DEE9D8];
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = 0;
      v16 = v3[23];
      v337 = MEMORY[0x1E0DEE9D8];
      while (v15 < *(_QWORD *)(v13 + 16))
      {
        v1 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        v2 = *(_QWORD *)(v16 + 72);
        (*(void (**)(_QWORD, unint64_t, _QWORD))(v16 + 16))(v3[34], v13 + v1 + v2 * v15, v3[22]);
        if ((TemplatingSection.spokenOnly.getter() & 1) != 0)
        {
          v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32);
          v17(v3[33], v3[34], v3[22]);
          v18 = v337;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v337 + 16) + 1, 1);
            v18 = v348;
          }
          v20 = *(_QWORD *)(v18 + 16);
          v19 = *(_QWORD *)(v18 + 24);
          if (v20 >= v19 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            v18 = v348;
          }
          v21 = v347[33];
          v22 = v347[22];
          *(_QWORD *)(v18 + 16) = v20 + 1;
          v23 = v18 + v1 + v20 * v2;
          v3 = v347;
          v17(v23, v21, v22);
          v337 = v18;
          v348 = v18;
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(v16 + 8))(v3[34], v3[22]);
        }
        if (v14 == ++v15)
          goto LABEL_35;
      }
      __break(1u);
    }
    else
    {
      v337 = MEMORY[0x1E0DEE9D8];
LABEL_35:
      swift_bridgeObjectRelease();
      v47 = *(_QWORD *)(v337 + 16);
      if (v47)
      {
        v48 = v3[23];
        v330 = v3[20];
        v348 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47, 0);
        v49 = v337 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
        v328 = *(_QWORD *)(v48 + 72);
        v334 = (id)v48;
        v327 = *(void (**)(uint64_t, unint64_t, uint64_t))(v48 + 16);
        v50 = v348;
        do
        {
          v51 = v3;
          v52 = v3[32];
          v53 = v51[21];
          v54 = v51[22];
          v55 = v51[19];
          v327(v52, v49, v54);
          TemplatingSection.content.getter();
          v2 = TemplatingText.text.getter();
          v57 = v56;
          (*(void (**)(uint64_t, uint64_t))(v330 + 8))(v53, v55);
          (*((void (**)(uint64_t, uint64_t))v334 + 1))(v52, v54);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v50 + 16) + 1, 1);
            v50 = v348;
          }
          v59 = *(_QWORD *)(v50 + 16);
          v58 = *(_QWORD *)(v50 + 24);
          if (v59 >= v58 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
            v50 = v348;
          }
          *(_QWORD *)(v50 + 16) = v59 + 1;
          v60 = v50 + 16 * v59;
          *(_QWORD *)(v60 + 32) = v2;
          *(_QWORD *)(v60 + 40) = v57;
          v49 += v328;
          --v47;
          v3 = v347;
        }
        while (v47);
        swift_release();
      }
      else
      {
        swift_release();
        v50 = MEMORY[0x1E0DEE9D8];
      }
      v3[11] = v50;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
      v324 = BidirectionalCollection<>.joined(separator:)();
      v326 = v61;
      swift_bridgeObjectRelease();
      v62 = TemplatingResult.sections.getter();
      v63 = v62;
      v15 = MEMORY[0x1E0DEE9D8];
      v348 = MEMORY[0x1E0DEE9D8];
      v64 = *(_QWORD *)(v62 + 16);
      if (!v64)
      {
LABEL_55:
        swift_bridgeObjectRelease();
        v76 = *(_QWORD *)(v15 + 16);
        if (v76)
        {
          v77 = v3[23];
          v334 = (id)v3[20];
          v348 = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76, 0);
          v78 = v15 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
          v331 = *(_QWORD *)(v77 + 72);
          v339 = v77;
          v329 = *(void (**)(uint64_t, unint64_t, uint64_t))(v77 + 16);
          do
          {
            v79 = v3[32];
            v80 = v3;
            v83 = v3 + 21;
            v82 = v3[21];
            v81 = v83[1];
            v84 = v80[19];
            v329(v79, v78, v81);
            TemplatingSection.content.getter();
            v2 = TemplatingText.text.getter();
            v86 = v85;
            (*((void (**)(uint64_t, uint64_t))v334 + 1))(v82, v84);
            (*(void (**)(uint64_t, uint64_t))(v339 + 8))(v79, v81);
            v87 = v348;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v348 + 16) + 1, 1);
              v87 = v348;
            }
            v89 = *(_QWORD *)(v87 + 16);
            v88 = *(_QWORD *)(v87 + 24);
            if (v89 >= v88 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1);
              v87 = v348;
            }
            *(_QWORD *)(v87 + 16) = v89 + 1;
            v90 = v87 + 16 * v89;
            *(_QWORD *)(v90 + 32) = v2;
            *(_QWORD *)(v90 + 40) = v86;
            v78 += v331;
            --v76;
            v3 = v347;
          }
          while (v76);
          swift_release();
          v15 = MEMORY[0x1E0DEE9D8];
        }
        else
        {
          swift_release();
          v87 = MEMORY[0x1E0DEE9D8];
          v15 = MEMORY[0x1E0DEE9D8];
        }
        v3[12] = v87;
        v328 = BidirectionalCollection<>.joined(separator:)();
        v323 = v91;
        swift_bridgeObjectRelease();
        v92 = TemplatingResult.sections.getter();
        v93 = v92;
        v348 = v15;
        v94 = *(_QWORD *)(v92 + 16);
        if (!v94)
        {
LABEL_75:
          swift_bridgeObjectRelease();
          v106 = *(_QWORD *)(v15 + 16);
          if (v106)
          {
            v107 = v3[23];
            v108 = v3[20];
            v348 = MEMORY[0x1E0DEE9D8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v106, 0);
            v109 = v15 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
            v334 = *(id *)(v107 + 72);
            v341 = v107;
            v332 = *(void (**)(_QWORD, unint64_t, _QWORD))(v107 + 16);
            do
            {
              v110 = v3[18];
              v111 = v3[19];
              v332(v3[27], v109, v3[22]);
              TemplatingSection.redactedContent.getter();
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v110, 1, v111) == 1)
              {
                outlined destroy of ReferenceResolutionClientProtocol?(v3[18], &demangling cache variable for type metadata for TemplatingText?);
                v112 = v3;
                v113 = 0;
                v114 = 0xE000000000000000;
              }
              else
              {
                v115 = v3[18];
                v116 = v3[19];
                v112 = v3;
                v113 = TemplatingText.text.getter();
                v114 = v117;
                (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v115, v116);
              }
              (*(void (**)(_QWORD, _QWORD))(v341 + 8))(v112[27], v112[22]);
              v2 = v348;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v348 + 16) + 1, 1);
                v2 = v348;
              }
              v119 = *(_QWORD *)(v2 + 16);
              v118 = *(_QWORD *)(v2 + 24);
              if (v119 >= v118 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v118 > 1, v119 + 1, 1);
                v2 = v348;
              }
              *(_QWORD *)(v2 + 16) = v119 + 1;
              v120 = v2 + 16 * v119;
              *(_QWORD *)(v120 + 32) = v113;
              *(_QWORD *)(v120 + 40) = v114;
              v109 += (unint64_t)v334;
              --v106;
              v3 = v347;
            }
            while (v106);
            swift_release();
            v15 = MEMORY[0x1E0DEE9D8];
          }
          else
          {
            swift_release();
            v2 = MEMORY[0x1E0DEE9D8];
            v15 = MEMORY[0x1E0DEE9D8];
          }
          v3[13] = v2;
          v121 = BidirectionalCollection<>.joined(separator:)();
          v320 = v122;
          v321 = v121;
          swift_bridgeObjectRelease();
          v123 = TemplatingResult.sections.getter();
          v124 = v123;
          v348 = v15;
          v125 = *(_QWORD *)(v123 + 16);
          if (!v125)
          {
LABEL_98:
            swift_bridgeObjectRelease();
            v137 = *(_QWORD *)(v15 + 16);
            if (v137)
            {
              v138 = v3[23];
              v139 = v3[20];
              v348 = MEMORY[0x1E0DEE9D8];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v137, 0);
              v140 = v15
                   + ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
              v336 = *(_QWORD *)(v138 + 72);
              v343 = v138;
              v333 = *(void (**)(_QWORD, unint64_t, _QWORD))(v138 + 16);
              do
              {
                v141 = v3[19];
                v142 = v3[17];
                v333(v3[24], v140, v3[22]);
                TemplatingSection.redactedContent.getter();
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v142, 1, v141) == 1)
                {
                  outlined destroy of ReferenceResolutionClientProtocol?(v3[17], &demangling cache variable for type metadata for TemplatingText?);
                  v143 = v3;
                  v144 = 0;
                  v145 = 0xE000000000000000;
                }
                else
                {
                  v146 = v3[19];
                  v147 = v3[17];
                  v143 = v3;
                  v144 = TemplatingText.text.getter();
                  v145 = v148;
                  (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v147, v146);
                }
                (*(void (**)(_QWORD, _QWORD))(v343 + 8))(v143[24], v143[22]);
                v149 = v348;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v348 + 16) + 1, 1);
                  v149 = v348;
                }
                v151 = *(_QWORD *)(v149 + 16);
                v150 = *(_QWORD *)(v149 + 24);
                if (v151 >= v150 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v150 > 1, v151 + 1, 1);
                  v149 = v348;
                }
                *(_QWORD *)(v149 + 16) = v151 + 1;
                v152 = v149 + 16 * v151;
                *(_QWORD *)(v152 + 32) = v144;
                *(_QWORD *)(v152 + 40) = v145;
                v140 += v336;
                --v137;
                v3 = v347;
              }
              while (v137);
              swift_release();
            }
            else
            {
              swift_release();
              v149 = MEMORY[0x1E0DEE9D8];
            }
            v154 = v3[36];
            v153 = v3[37];
            v155 = v3[35];
            v3[14] = v149;
            v156 = BidirectionalCollection<>.joined(separator:)();
            v158 = v157;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v155);
            goto LABEL_250;
          }
          v126 = 0;
          v1 = v3[23];
          v342 = *(_QWORD *)(v123 + 16);
          while (v126 < *(_QWORD *)(v124 + 16))
          {
            v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
            v127 = *(_QWORD *)(v1 + 72);
            (*(void (**)(_QWORD, unint64_t, _QWORD))(v1 + 16))(v3[26], v124 + v2 + v127 * v126, v3[22]);
            v128 = TemplatingSection.spokenOnly.getter();
            v129 = v3[26];
            if ((v128 & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(v1 + 8))(v3[26], v3[22]);
            }
            else
            {
              v130 = v3[25];
              v131 = v3[22];
              v132 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
              v132(v130, v129, v131);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
                v15 = v348;
              }
              v134 = *(_QWORD *)(v15 + 16);
              v133 = *(_QWORD *)(v15 + 24);
              if (v134 >= v133 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v133 > 1, v134 + 1, 1);
                v15 = v348;
              }
              v135 = v347[25];
              v136 = v347[22];
              *(_QWORD *)(v15 + 16) = v134 + 1;
              v132(v15 + v2 + v134 * v127, v135, v136);
              v3 = v347;
              v348 = v15;
              v125 = v342;
            }
            if (v125 == ++v126)
              goto LABEL_98;
          }
          goto LABEL_121;
        }
        v95 = 0;
        v1 = v3[23];
        v340 = *(_QWORD *)(v92 + 16);
        while (v95 < *(_QWORD *)(v93 + 16))
        {
          v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
          v96 = *(_QWORD *)(v1 + 72);
          (*(void (**)(_QWORD, unint64_t, _QWORD))(v1 + 16))(v3[29], v93 + v2 + v96 * v95, v3[22]);
          v97 = TemplatingSection.spokenOnly.getter();
          v98 = v3[29];
          if ((v97 & 1) != 0)
          {
            v99 = v3[28];
            v100 = v3[22];
            v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
            v101(v99, v98, v100);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
              v15 = v348;
            }
            v103 = *(_QWORD *)(v15 + 16);
            v102 = *(_QWORD *)(v15 + 24);
            if (v103 >= v102 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
              v15 = v348;
            }
            v104 = v347[28];
            v105 = v347[22];
            *(_QWORD *)(v15 + 16) = v103 + 1;
            v101(v15 + v2 + v103 * v96, v104, v105);
            v3 = v347;
            v348 = v15;
            v94 = v340;
          }
          else
          {
            (*(void (**)(_QWORD, _QWORD))(v1 + 8))(v3[29], v3[22]);
          }
          if (v94 == ++v95)
            goto LABEL_75;
        }
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
      v65 = 0;
      v1 = v3[23];
      v338 = *(_QWORD *)(v62 + 16);
      while (v65 < *(_QWORD *)(v63 + 16))
      {
        v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
        v66 = *(_QWORD *)(v1 + 72);
        (*(void (**)(_QWORD, unint64_t, _QWORD))(v1 + 16))(v3[31], v63 + v2 + v66 * v65, v3[22]);
        v67 = TemplatingSection.spokenOnly.getter();
        v68 = v3[31];
        if ((v67 & 1) != 0)
        {
          (*(void (**)(_QWORD, _QWORD))(v1 + 8))(v3[31], v3[22]);
        }
        else
        {
          v69 = v3[30];
          v70 = v3[22];
          v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
          v71(v69, v68, v70);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
            v15 = v348;
          }
          v73 = *(_QWORD *)(v15 + 16);
          v72 = *(_QWORD *)(v15 + 24);
          if (v73 >= v72 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
            v15 = v348;
          }
          v74 = v347[30];
          v75 = v347[22];
          *(_QWORD *)(v15 + 16) = v73 + 1;
          v71(v15 + v2 + v73 * v66, v74, v75);
          v3 = v347;
          v348 = v15;
          v64 = v338;
        }
        if (v64 == ++v65)
          goto LABEL_55;
      }
    }
    __break(1u);
    goto LABEL_120;
  }
  if (v8 == *MEMORY[0x1E0D9BDD0])
  {
    v24 = (id *)v3[41];
    (*(void (**)(id *, _QWORD))(v3[39] + 96))(v24, v3[38]);
    v334 = *v24;
    v25 = objc_msgSend(*v24, sel_dialog);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for PatternExecutionDialog);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v15 >> 62))
    {
      v26 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v26)
      {
LABEL_123:
        swift_bridgeObjectRelease();
        v28 = MEMORY[0x1E0DEE9D8];
        goto LABEL_124;
      }
LABEL_16:
      v348 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 & ~(v26 >> 63), 0);
      if (v26 < 0)
      {
        __break(1u);
        goto LABEL_173;
      }
      v27 = 0;
      v28 = v348;
      v2 = v15 & 0xC000000000000001;
      do
      {
        if (v2)
          v29 = (id)MEMORY[0x1B5E43B94](v27, v15);
        else
          v29 = *(id *)(v15 + 8 * v27 + 32);
        v30 = v29;
        v31 = objc_msgSend(v29, sel_unfilteredFullSpeak);
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v34 = v33;

        v348 = v28;
        v36 = *(_QWORD *)(v28 + 16);
        v35 = *(_QWORD *)(v28 + 24);
        v1 = v36 + 1;
        if (v36 >= v35 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
          v28 = v348;
        }
        ++v27;
        *(_QWORD *)(v28 + 16) = v1;
        v37 = v28 + 16 * v36;
        *(_QWORD *)(v37 + 32) = v32;
        *(_QWORD *)(v37 + 40) = v34;
        v3 = v347;
      }
      while (v26 != v27);
      swift_bridgeObjectRelease();
LABEL_124:
      v3[7] = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
      v325 = BidirectionalCollection<>.joined(separator:)();
      v326 = v175;
      swift_bridgeObjectRelease();
      v176 = objc_msgSend(v334, sel_dialog);
      v177 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v177 >> 62)
      {
        swift_bridgeObjectRetain();
        v178 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v178)
        {
LABEL_126:
          v348 = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v178 & ~(v178 >> 63), 0);
          if ((v178 & 0x8000000000000000) == 0)
          {
            v179 = 0;
            v180 = v348;
            do
            {
              if ((v177 & 0xC000000000000001) != 0)
                v181 = (id)MEMORY[0x1B5E43B94](v179, v177);
              else
                v181 = *(id *)(v177 + 8 * v179 + 32);
              v182 = v181;
              v183 = objc_msgSend(v181, sel_unfilteredFullPrint);
              v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v185 = v184;

              v348 = v180;
              v187 = *(_QWORD *)(v180 + 16);
              v186 = *(_QWORD *)(v180 + 24);
              if (v187 >= v186 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v186 > 1, v187 + 1, 1);
                v180 = v348;
              }
              ++v179;
              *(_QWORD *)(v180 + 16) = v187 + 1;
              v188 = v180 + 16 * v187;
              *(_QWORD *)(v188 + 32) = v1;
              *(_QWORD *)(v188 + 40) = v185;
            }
            while (v178 != v179);
            swift_bridgeObjectRelease();
            v3 = v347;
LABEL_137:
            v3[8] = v180;
            v328 = BidirectionalCollection<>.joined(separator:)();
            v323 = v189;
            swift_bridgeObjectRelease();
            v190 = objc_msgSend(v334, sel_dialog);
            v191 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v191 >> 62)
            {
              swift_bridgeObjectRetain();
              v2 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v2)
              {
LABEL_139:
                v348 = MEMORY[0x1E0DEE9D8];
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
                if ((v2 & 0x8000000000000000) == 0)
                {
                  v192 = 0;
                  v193 = v348;
                  v344 = v191 & 0xC000000000000001;
                  v194 = v191;
                  do
                  {
                    if (v344)
                      v195 = (id)MEMORY[0x1B5E43B94](v192, v191);
                    else
                      v195 = *(id *)(v191 + 8 * v192 + 32);
                    v196 = v195;
                    v197 = objc_msgSend(v195, sel_redactedFullSpeak);
                    v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v200 = v199;

                    swift_bridgeObjectRelease();
                    v201 = HIBYTE(v200) & 0xF;
                    if ((v200 & 0x2000000000000000) == 0)
                      v201 = v198 & 0xFFFFFFFFFFFFLL;
                    v202 = v201 == 0;
                    v203 = &selRef_redactedSupportingSpeak;
                    if (!v202)
                      v203 = &selRef_redactedFullSpeak;
                    v204 = objc_msgSend(v196, *v203);
                    v205 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v207 = v206;

                    v348 = v193;
                    v209 = *(_QWORD *)(v193 + 16);
                    v208 = *(_QWORD *)(v193 + 24);
                    if (v209 >= v208 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v208 > 1, v209 + 1, 1);
                      v193 = v348;
                    }
                    ++v192;
                    *(_QWORD *)(v193 + 16) = v209 + 1;
                    v210 = v193 + 16 * v209;
                    *(_QWORD *)(v210 + 32) = v205;
                    *(_QWORD *)(v210 + 40) = v207;
                    v191 = v194;
                  }
                  while (v2 != v192);
                  swift_bridgeObjectRelease();
LABEL_154:
                  v3 = v347;
                  v347[9] = v193;
                  v1 = BidirectionalCollection<>.joined(separator:)();
                  v2 = v211;
                  swift_bridgeObjectRelease();
                  v212 = objc_msgSend(v334, sel_dialog);
                  v213 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  if (v213 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    v214 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (v214)
                    {
LABEL_156:
                      v322 = v1;
                      v348 = MEMORY[0x1E0DEE9D8];
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v214 & ~(v214 >> 63), 0);
                      if ((v214 & 0x8000000000000000) == 0)
                      {
                        v215 = 0;
                        v216 = v348;
                        v345 = v213 & 0xC000000000000001;
                        v217 = v213;
                        v218 = v214;
                        do
                        {
                          if (v345)
                            v219 = (id)MEMORY[0x1B5E43B94](v215, v213);
                          else
                            v219 = *(id *)(v213 + 8 * v215 + 32);
                          v220 = v219;
                          v221 = objc_msgSend(v219, sel_redactedFullPrint);
                          v222 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          v224 = v223;

                          swift_bridgeObjectRelease();
                          v225 = HIBYTE(v224) & 0xF;
                          if ((v224 & 0x2000000000000000) == 0)
                            v225 = v222 & 0xFFFFFFFFFFFFLL;
                          v202 = v225 == 0;
                          v226 = &selRef_redactedSupportingPrint;
                          if (!v202)
                            v226 = &selRef_redactedFullPrint;
                          v227 = objc_msgSend(v220, *v226);
                          v228 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          v230 = v229;

                          v348 = v216;
                          v232 = *(_QWORD *)(v216 + 16);
                          v231 = *(_QWORD *)(v216 + 24);
                          if (v232 >= v231 >> 1)
                          {
                            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v231 > 1, v232 + 1, 1);
                            v216 = v348;
                          }
                          ++v215;
                          *(_QWORD *)(v216 + 16) = v232 + 1;
                          v233 = v216 + 16 * v232;
                          *(_QWORD *)(v233 + 32) = v228;
                          *(_QWORD *)(v233 + 40) = v230;
                          v213 = v217;
                        }
                        while (v218 != v215);
                        swift_bridgeObjectRelease();
                        v3 = v347;
                        v1 = v322;
                        goto LABEL_171;
                      }
                      goto LABEL_175;
                    }
                  }
                  else
                  {
                    v214 = *(_QWORD *)((v213 & 0xFFFFFFFFFFFFF8) + 0x10);
                    if (v214)
                      goto LABEL_156;
                  }
                  swift_bridgeObjectRelease();
                  v216 = MEMORY[0x1E0DEE9D8];
LABEL_171:
                  v3[10] = v216;
                  v156 = BidirectionalCollection<>.joined(separator:)();
                  v158 = v234;

                  swift_bridgeObjectRelease();
                  v235 = v325;
LABEL_251:
                  v315 = v3[16];
                  v317 = *(_QWORD *)(v315 + 40);
                  v316 = *(_QWORD *)(v315 + 48);
                  objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
                  swift_bridgeObjectRetain();
                  v318 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, 0, v328, v323, v235, v326, v156, v158, v1, v2, v317, v316);
                  v3[42] = v318;
                  v319 = (_QWORD *)swift_task_alloc();
                  v3[43] = v319;
                  *v319 = v3;
                  v319[1] = AceServiceInvokerImpl.publish(dialogEngineOutput:);
                  return AceServiceInvokerImpl.publish(executionOutput:)((uint64_t)v318);
                }
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
                goto LABEL_176;
              }
            }
            else
            {
              v2 = *(_QWORD *)((v191 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v2)
                goto LABEL_139;
            }
            swift_bridgeObjectRelease();
            v193 = MEMORY[0x1E0DEE9D8];
            goto LABEL_154;
          }
LABEL_173:
          __break(1u);
          goto LABEL_174;
        }
      }
      else
      {
        v178 = *(_QWORD *)((v177 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v178)
          goto LABEL_126;
      }
      swift_bridgeObjectRelease();
      v180 = MEMORY[0x1E0DEE9D8];
      goto LABEL_137;
    }
LABEL_122:
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v26)
      goto LABEL_123;
    goto LABEL_16;
  }
  if (v8 == *MEMORY[0x1E0D9BDC8])
  {
    v328 = (uint64_t)(v3 + 3);
    v38 = (unint64_t *)v3[41];
    (*(void (**)(unint64_t *, _QWORD))(v3[39] + 96))(v38, v3[38]);
    v1 = *v38;
    v2 = MEMORY[0x1E0DEE9D8];
    v348 = MEMORY[0x1E0DEE9D8];
    if (!(v1 >> 62))
    {
      v39 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      v335 = v1;
      if (!v39)
      {
LABEL_177:
        swift_bridgeObjectRelease();
        v174 = MEMORY[0x1E0DEE9D8];
        goto LABEL_178;
      }
LABEL_28:
      if (v39 < 1)
      {
        __break(1u);
        goto LABEL_253;
      }
      v41 = 0;
      v42 = v1 & 0xC000000000000001;
      do
      {
        if (v42)
          v43 = (id)MEMORY[0x1B5E43B94](v41, v335);
        else
          v43 = *(id *)(v335 + 8 * v41 + 32);
        v44 = v43;
        ++v41;
        v45 = objc_msgSend(v43, sel_dialog);
        type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
        v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        specialized Array.append<A>(contentsOf:)(v46);
      }
      while (v39 != v41);
      v1 = v335;
      swift_bridgeObjectRelease();
      v174 = v348;
LABEL_178:
      v346 = v39;
      if (v174 >> 62)
      {
        swift_bridgeObjectRetain();
        v236 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v236)
        {
LABEL_180:
          v348 = v2;
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v236 & ~(v236 >> 63), 0);
          if ((v236 & 0x8000000000000000) == 0)
          {
            v237 = 0;
            v238 = v348;
            do
            {
              v239 = *(id *)(v174 + 8 * v237 + 32);
              v240 = objc_msgSend(v239, sel_unfilteredFullSpeak);
              v241 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v243 = v242;

              v348 = v238;
              v245 = *(_QWORD *)(v238 + 16);
              v244 = *(_QWORD *)(v238 + 24);
              if (v245 >= v244 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v244 > 1, v245 + 1, 1);
                v238 = v348;
              }
              ++v237;
              *(_QWORD *)(v238 + 16) = v245 + 1;
              v246 = v238 + 16 * v245;
              *(_QWORD *)(v246 + 32) = v241;
              *(_QWORD *)(v246 + 40) = v243;
            }
            while (v236 != v237);
            swift_bridgeObjectRelease();
            v39 = v346;
            v3 = v347;
            v2 = MEMORY[0x1E0DEE9D8];
            v1 = v335;
            goto LABEL_188;
          }
LABEL_253:
          __break(1u);
          goto LABEL_254;
        }
      }
      else
      {
        v236 = *(_QWORD *)((v174 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v236)
          goto LABEL_180;
      }
      swift_bridgeObjectRelease();
      v238 = MEMORY[0x1E0DEE9D8];
LABEL_188:
      *(_QWORD *)v328 = v238;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
      v324 = BidirectionalCollection<>.joined(separator:)();
      v326 = v247;
      result = swift_bridgeObjectRelease();
      v348 = v2;
      if (!v39)
      {
        v253 = v2;
        if (!((unint64_t)v2 >> 62))
          goto LABEL_196;
        goto LABEL_204;
      }
      if (v39 >= 1)
      {
        swift_bridgeObjectRetain();
        v248 = 0;
        do
        {
          if ((v1 & 0xC000000000000001) != 0)
            v249 = (id)MEMORY[0x1B5E43B94](v248, v1);
          else
            v249 = *(id *)(v1 + 8 * v248 + 32);
          v250 = v249;
          ++v248;
          v251 = objc_msgSend(v249, sel_dialog);
          type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
          v252 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array.append<A>(contentsOf:)(v252);
        }
        while (v346 != v248);
        swift_bridgeObjectRelease();
        v253 = v348;
        if (!(v348 >> 62))
        {
LABEL_196:
          v254 = *(_QWORD *)((v253 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v254)
            goto LABEL_197;
          goto LABEL_205;
        }
LABEL_204:
        swift_bridgeObjectRetain();
        v254 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v254)
        {
LABEL_197:
          v348 = v2;
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v254 & ~(v254 >> 63), 0);
          if ((v254 & 0x8000000000000000) == 0)
          {
            v255 = 0;
            v256 = v348;
            do
            {
              v257 = *(id *)(v253 + 8 * v255 + 32);
              v258 = objc_msgSend(v257, sel_unfilteredFullPrint);
              v259 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v261 = v260;

              v348 = v256;
              v263 = *(_QWORD *)(v256 + 16);
              v262 = *(_QWORD *)(v256 + 24);
              if (v263 >= v262 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v262 > 1, v263 + 1, 1);
                v256 = v348;
              }
              ++v255;
              *(_QWORD *)(v256 + 16) = v263 + 1;
              v264 = v256 + 16 * v263;
              *(_QWORD *)(v264 + 32) = v259;
              *(_QWORD *)(v264 + 40) = v261;
            }
            while (v254 != v255);
            swift_bridgeObjectRelease();
            v3 = v347;
            v2 = MEMORY[0x1E0DEE9D8];
            v1 = v335;
            goto LABEL_206;
          }
LABEL_255:
          __break(1u);
          goto LABEL_256;
        }
LABEL_205:
        swift_bridgeObjectRelease();
        v256 = MEMORY[0x1E0DEE9D8];
LABEL_206:
        v3[4] = v256;
        v328 = BidirectionalCollection<>.joined(separator:)();
        v323 = v265;
        result = swift_bridgeObjectRelease();
        v348 = v2;
        if (!v346)
        {
          v271 = v2;
          if (!((unint64_t)v2 >> 62))
            goto LABEL_214;
          goto LABEL_226;
        }
        if (v346 >= 1)
        {
          swift_bridgeObjectRetain();
          v266 = 0;
          do
          {
            if ((v1 & 0xC000000000000001) != 0)
              v267 = (id)MEMORY[0x1B5E43B94](v266, v1);
            else
              v267 = *(id *)(v1 + 8 * v266 + 32);
            v268 = v267;
            ++v266;
            v269 = objc_msgSend(v267, sel_dialog);
            type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
            v270 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            specialized Array.append<A>(contentsOf:)(v270);
          }
          while (v346 != v266);
          swift_bridgeObjectRelease();
          v271 = v348;
          if (!(v348 >> 62))
          {
LABEL_214:
            v272 = *(_QWORD *)((v271 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v272)
              goto LABEL_215;
            goto LABEL_227;
          }
LABEL_226:
          swift_bridgeObjectRetain();
          v272 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v272)
          {
LABEL_215:
            v348 = v2;
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v272 & ~(v272 >> 63), 0);
            if ((v272 & 0x8000000000000000) == 0)
            {
              v273 = 0;
              v274 = v348;
              do
              {
                v275 = *(id *)(v271 + 8 * v273 + 32);
                v276 = objc_msgSend(v275, sel_redactedFullSpeak);
                v277 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v279 = v278;

                swift_bridgeObjectRelease();
                v280 = HIBYTE(v279) & 0xF;
                if ((v279 & 0x2000000000000000) == 0)
                  v280 = v277 & 0xFFFFFFFFFFFFLL;
                v202 = v280 == 0;
                v281 = &selRef_redactedSupportingSpeak;
                if (!v202)
                  v281 = &selRef_redactedFullSpeak;
                v282 = objc_msgSend(v275, *v281);
                v283 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v285 = v284;

                v348 = v274;
                v287 = *(_QWORD *)(v274 + 16);
                v286 = *(_QWORD *)(v274 + 24);
                if (v287 >= v286 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v286 > 1, v287 + 1, 1);
                  v274 = v348;
                }
                ++v273;
                *(_QWORD *)(v274 + 16) = v287 + 1;
                v288 = v274 + 16 * v287;
                *(_QWORD *)(v288 + 32) = v283;
                *(_QWORD *)(v288 + 40) = v285;
              }
              while (v272 != v273);
              swift_bridgeObjectRelease();
              v3 = v347;
              v2 = MEMORY[0x1E0DEE9D8];
              v1 = v335;
LABEL_228:
              v3[5] = v274;
              v289 = BidirectionalCollection<>.joined(separator:)();
              v320 = v290;
              v321 = v289;
              swift_bridgeObjectRelease();
              v348 = v2;
              if (v346)
              {
                swift_bridgeObjectRetain();
                v291 = 0;
                do
                {
                  if ((v1 & 0xC000000000000001) != 0)
                    v292 = (id)MEMORY[0x1B5E43B94](v291, v1);
                  else
                    v292 = *(id *)(v1 + 8 * v291 + 32);
                  v293 = v292;
                  ++v291;
                  v294 = objc_msgSend(v292, sel_dialog);
                  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
                  v295 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  specialized Array.append<A>(contentsOf:)(v295);
                }
                while (v346 != v291);
                swift_bridgeObjectRelease_n();
                v296 = v348;
                if (!(v348 >> 62))
                {
LABEL_235:
                  v297 = *(_QWORD *)((v296 & 0xFFFFFFFFFFFFF8) + 0x10);
                  if (v297)
                    goto LABEL_236;
                  goto LABEL_248;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                v296 = MEMORY[0x1E0DEE9D8];
                if (!(MEMORY[0x1E0DEE9D8] >> 62))
                  goto LABEL_235;
              }
              swift_bridgeObjectRetain();
              v297 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v297)
              {
LABEL_236:
                v348 = v2;
                result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v297 & ~(v297 >> 63), 0);
                if ((v297 & 0x8000000000000000) == 0)
                {
                  v298 = 0;
                  v299 = v348;
                  do
                  {
                    v300 = *(id *)(v296 + 8 * v298 + 32);
                    v301 = objc_msgSend(v300, sel_redactedFullPrint);
                    v302 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v304 = v303;

                    swift_bridgeObjectRelease();
                    v305 = HIBYTE(v304) & 0xF;
                    if ((v304 & 0x2000000000000000) == 0)
                      v305 = v302 & 0xFFFFFFFFFFFFLL;
                    v202 = v305 == 0;
                    v306 = &selRef_redactedSupportingPrint;
                    if (!v202)
                      v306 = &selRef_redactedFullPrint;
                    v307 = objc_msgSend(v300, *v306);
                    v308 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v310 = v309;

                    v348 = v299;
                    v312 = *(_QWORD *)(v299 + 16);
                    v311 = *(_QWORD *)(v299 + 24);
                    if (v312 >= v311 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v311 > 1, v312 + 1, 1);
                      v299 = v348;
                    }
                    ++v298;
                    *(_QWORD *)(v299 + 16) = v312 + 1;
                    v313 = v299 + 16 * v312;
                    *(_QWORD *)(v313 + 32) = v308;
                    *(_QWORD *)(v313 + 40) = v310;
                  }
                  while (v297 != v298);
                  swift_bridgeObjectRelease();
                  v3 = v347;
                  goto LABEL_249;
                }
                goto LABEL_258;
              }
LABEL_248:
              swift_bridgeObjectRelease();
              v299 = MEMORY[0x1E0DEE9D8];
LABEL_249:
              v3[6] = v299;
              v156 = BidirectionalCollection<>.joined(separator:)();
              v158 = v314;
              swift_bridgeObjectRelease();
LABEL_250:
              v235 = v324;
              v2 = v320;
              v1 = v321;
              goto LABEL_251;
            }
LABEL_257:
            __break(1u);
            __break(1u);
LABEL_258:
            __break(1u);
            return result;
          }
LABEL_227:
          swift_bridgeObjectRelease();
          v274 = MEMORY[0x1E0DEE9D8];
          goto LABEL_228;
        }
LABEL_256:
        __break(1u);
        goto LABEL_257;
      }
LABEL_254:
      __break(1u);
      goto LABEL_255;
    }
LABEL_176:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v39 = result;
    v335 = v1;
    if (!result)
      goto LABEL_177;
    goto LABEL_28;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v159 = v3[40];
  v160 = v3[38];
  v161 = v3[15];
  v162 = type metadata accessor for Logger();
  __swift_project_value_buffer(v162, (uint64_t)static Logger.executor);
  v7(v159, v161, v160);
  v163 = Logger.logObject.getter();
  v164 = static os_log_type_t.error.getter();
  v165 = os_log_type_enabled(v163, v164);
  v167 = v3[39];
  v166 = v3[40];
  v168 = v3[38];
  if (v165)
  {
    v169 = (uint8_t *)swift_slowAlloc();
    v170 = swift_slowAlloc();
    v348 = v170;
    *(_DWORD *)v169 = 136315138;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type DialogEngineOutput and conformance DialogEngineOutput, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BDD8], MEMORY[0x1E0D9BDE0]);
    v171 = dispatch thunk of CustomStringConvertible.description.getter();
    v3[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v172, (uint64_t *)&v348);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v173 = *(void (**)(uint64_t, uint64_t))(v167 + 8);
    v173(v166, v168);
    _os_log_impl(&dword_1B4BE6000, v163, v164, "Publish called with an unexpected dialogEngineOutput: %s. Ignoring publish attempt", v169, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v170, -1, -1);
    MEMORY[0x1B5E44758](v169, -1, -1);
  }
  else
  {
    v173 = *(void (**)(uint64_t, uint64_t))(v167 + 8);
    v173(v3[40], v3[38]);
  }

  v173(v3[41], v3[38]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v3[1])();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.publish(executionOutput:)()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t *v22;
  os_unfair_lock_s *v23;
  _QWORD *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 152);
  v2 = (os_unfair_lock_s *)(v1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  LOBYTE(v1) = *(_BYTE *)(v1 + 16);
  os_unfair_lock_unlock(v2);
  if ((v1 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "Attempting to submit a context update on an invalidated AceServiceInvoker. Throwing BargeInError", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }

    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B710], MEMORY[0x1E0D9B718]);
    swift_allocError();
    BargeInError.init(rawError:)();
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 40);
    v9 = *(void **)(v0 + 24);
    v10 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
    v11 = one-time initialization token for shared;
    swift_retain();
    v12 = v9;
    if (v11 != -1)
      swift_once();
    v14 = *(_QWORD *)(v0 + 32);
    v13 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 24);
    v16 = static ConversationActor.shared;
    v17 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = v16;
    v18[3] = v17;
    v18[4] = v14;
    v18[5] = v15;
    swift_retain();
    v19 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(v13, (uint64_t)&async function pointer to partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:), (uint64_t)v18, &demangling cache variable for type metadata for SABaseCommand?);
    *(_QWORD *)(v0 + 48) = v19;
    v20 = *(_QWORD *)(v14 + 160);
    *(_QWORD *)(v0 + 56) = v20;
    v21 = *(os_unfair_lock_s **)(v20 + 16);
    v22 = (uint64_t *)&v21[4];
    v23 = v21 + 6;
    os_unfair_lock_lock(v21 + 6);
    closure #1 in SubmissionTaskRegistry.register(_:)(v22, v19, &v25);
    os_unfair_lock_unlock(v23);
    swift_release();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *v24 = v0;
    v24[1] = AceServiceInvokerImpl.publish(executionOutput:);
    return Task.value.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16) + 24);
  os_unfair_lock_lock(v1);
  specialized Set._Variant.remove(_:)();
  os_unfair_lock_unlock(v1);
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16) + 24);
  os_unfair_lock_lock(v1);
  specialized Set._Variant.remove(_:)();
  os_unfair_lock_unlock(v1);
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl.publish(nlContext:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.publish(nlContext:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  _QWORD *v16;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v0[2];
  v4 = type metadata accessor for NLContextUpdate();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  if (*(_BYTE *)(v2 + 24) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      LOBYTE(v8) = 0;
      v7 = v0[3];
      goto LABEL_7;
    }
  }
  v7 = v0[3];
  v8 = *(_QWORD *)(v7 + 80);
  if (v8)
    LOBYTE(v8) = *(_BYTE *)(v7 + 104) ^ 1;
LABEL_7:
  v9 = v0[4];
  v10 = specialized static ExecutionContextUpdate.convertFromFlowContextUpdate(_:nluActiveTasks:nluCompletedTasks:populateLegacyProvideContext:)(v9, 0, 0, v8 & 1);
  v0[5] = v10;
  outlined destroy of ReferenceResolutionClientProtocol?(v9, &demangling cache variable for type metadata for NLContextUpdate?);
  v12 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 48);
  v13 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  v14 = v10;
  v15 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, v10, 0, 0, 0, 0, 0, 0, 0, 0, v12, v11);
  v0[6] = v15;

  v16 = (_QWORD *)swift_task_alloc();
  v0[7] = v16;
  *v16 = v0;
  v16[1] = AceServiceInvokerImpl.publish(nlContext:);
  return AceServiceInvokerImpl.publish(executionOutput:)((uint64_t)v15);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl.needsLegacyProvideContextForInvocationDevice.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  if (*(_BYTE *)(v0 + 24) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    LOBYTE(v2) = 0;
    if ((v1 & 1) == 0)
      return v2 & 1;
  }
  v2 = *(_QWORD *)(v0 + 80);
  if (v2)
    LOBYTE(v2) = *(_BYTE *)(v0 + 104) ^ 1;
  return v2 & 1;
}

uint64_t AceServiceInvokerImpl.publish(executionContextUpdate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.publish(executionContextUpdate:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;

  v2 = (void *)v0[2];
  v1 = v0[3];
  v4 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v5 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  v6 = v2;
  v7 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, v2, 0, 0, 0, 0, 0, 0, 0, 0, v4, v3);
  v0[4] = v7;

  v8 = (_QWORD *)swift_task_alloc();
  v0[5] = v8;
  *v8 = v0;
  v8[1] = AceServiceInvokerImpl.publish(executionContextUpdate:);
  return AceServiceInvokerImpl.publish(executionOutput:)((uint64_t)v7);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[19] = a4;
  v5[20] = a5;
  v5[18] = a1;
  v6 = type metadata accessor for CancellationError();
  v5[21] = v6;
  v5[22] = *(_QWORD *)(v6 - 8);
  v5[23] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v5[24] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #2 in AceServiceInvokerImpl.publish(executionOutput:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  Class isa;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];

  v66[1] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(v0 + 152) + 24) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
    {
LABEL_25:
      v49 = *(_QWORD *)(v0 + 152);
      v50 = *(void **)(v0 + 160);
      v51 = swift_allocObject();
      *(_QWORD *)(v0 + 320) = v51;
      *(_QWORD *)(v51 + 16) = v49;
      *(_QWORD *)(v51 + 24) = v50;
      v52 = async function pointer to specialized withCancellableContinuation<A>(body:);
      swift_retain();
      v53 = v50;
      v54 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 328) = v54;
      *v54 = v0;
      v54[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
      return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                       + v52))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v51);
    }
  }
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v0 + 200) = v3;
  v4 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v0 + 208) = v4;
  if (!v4)
    goto LABEL_25;
  v5 = *(char **)(*(_QWORD *)(v0 + 160) + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  *(_QWORD *)(v0 + 216) = v5;
  if (!v5)
    goto LABEL_25;
  v6 = *(void **)&v5[OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand];
  *(_QWORD *)(v0 + 224) = v6;
  if (v6)
  {
    v7 = one-time initialization token for executor;
    v8 = v5;
    v6;
    if (v7 != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 232) = __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    swift_retain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v66[0] = v13;
      *(_DWORD *)v12 = 136315138;
      *(_QWORD *)(v0 + 16) = v3;
      *(_QWORD *)(v0 + 24) = v4;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      v14 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v10, v11, "Sending legacy SACFProvideContext to invocation device ID=%s, since this is a server request", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v13, -1, -1);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 152);
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v29;
    type metadata accessor for AceServiceInvokerImpl();
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v30, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
    *v29 = v0;
    v29[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
    return AceServiceInvokerAsync.submit<A>(_:)();
  }
  v16 = *(_BYTE *)(v2 + 104);
  v17 = v5;
  if ((v16 & 1) == 0)
  {
    v32 = v17;
    if (*(_QWORD *)&v17[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities])
    {
      v33 = swift_bridgeObjectRetain();
      AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(v33);

      swift_bridgeObjectRelease();
    }
    else
    {

    }
    goto LABEL_25;
  }
  v18 = v0 + 80;
  if (one-time initialization token for executor != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 264) = __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  swift_retain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v23 = *(_QWORD *)(v0 + 200);
    v22 = *(_QWORD *)(v0 + 208);
    v24 = (uint8_t *)swift_slowAlloc();
    v65 = v19;
    v25 = swift_slowAlloc();
    v66[0] = v25;
    *(_DWORD *)v24 = 136315138;
    *(_QWORD *)(v0 + 32) = v23;
    *(_QWORD *)(v0 + 40) = v22;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v26 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v18 = v0 + 80;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v20, v21, "Sending RemoteExecutionContextUpdate to invocation device ID=%s", v24, 0xCu);
    swift_arrayDestroy();
    v28 = v25;
    v19 = v65;
    MEMORY[0x1B5E44758](v28, -1, -1);
    MEMORY[0x1B5E44758](v24, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v34 = *(_QWORD *)(v0 + 216);
  v35 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 80) = 0;
  v36 = objc_msgSend(v35, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v34, 1, v18);
  v37 = *(id *)(v0 + 80);
  if (v36)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v38 = *(_QWORD *)(v0 + 208);
    v40 = *(_QWORD *)(v0 + 152);
    v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    *(_QWORD *)(v0 + 272) = v41;
    *(_QWORD *)(v0 + 280) = v43;
    v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88370]), sel_init);
    *(_QWORD *)(v0 + 288) = v44;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v44, sel_setExecutionContextUpdate_, isa);

    v46 = (void *)MEMORY[0x1B5E432E8](v39, v38);
    objc_msgSend(v44, sel_setRemoteDeviceAssistantId_, v46);

    AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(v44, 1);
    *(_QWORD *)(v0 + 48) = v40;
    v47 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v47;
    type metadata accessor for AceServiceInvokerImpl();
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v48, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
    *v47 = v0;
    v47[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
    return AceServiceInvokerAsync.submit<A>(_:)();
  }
  v55 = v37;
  v56 = *(void **)(v0 + 216);
  v57 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  *(_QWORD *)(v0 + 128) = v57;
  v58 = v57;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {

    if (one-time initialization token for ace != -1)
      swift_once();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.ace);
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v61 = 0;
      _os_log_impl(&dword_1B4BE6000, v59, v60, "AceServiceInvokerImpl: context publishing response failed because user barged in. Will throw BargeInError.", v61, 2u);
      MEMORY[0x1B5E44758](v61, -1, -1);
    }
    v63 = *(_QWORD *)(v0 + 176);
    v62 = *(_QWORD *)(v0 + 184);
    v64 = *(_QWORD *)(v0 + 168);

    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B710], MEMORY[0x1E0D9B718]);
    swift_allocError();
    BargeInError.init(rawError:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);

  }
  else
  {

    swift_willThrow();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  id *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint8_t *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  id *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  Class isa;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63[2];

  v63[1] = *MEMORY[0x1E0C80C00];
  v1 = (id *)(v0 + 128);
  v2 = *(id *)(v0 + 248);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(void **)(v0 + 248);
    v61 = *(void **)(v0 + 224);
    v6 = (uint8_t *)swift_slowAlloc();
    v60 = swift_slowAlloc();
    v63[0] = v60;
    *(_DWORD *)v6 = 136315138;
    v7 = v5;
    v8 = objc_msgSend(v7, sel_description);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    v1 = (id *)(v0 + 128);
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v3, v4, "Got response from SACFProvideContext: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v60, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);

  }
  else
  {
    v12 = *(void **)(v0 + 248);
    v13 = *(void **)(v0 + 224);

  }
  if (*(_BYTE *)(*(_QWORD *)(v0 + 152) + 104) == 1)
  {
    v14 = v0 + 80;
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 264) = __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    swift_retain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v62 = v15;
      v18 = v1;
      v20 = *(_QWORD *)(v0 + 200);
      v19 = *(_QWORD *)(v0 + 208);
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v63[0] = v22;
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)(v0 + 32) = v20;
      *(_QWORD *)(v0 + 40) = v19;
      v1 = v18;
      v15 = v62;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      v23 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v16, v17, "Sending RemoteExecutionContextUpdate to invocation device ID=%s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v22, -1, -1);
      v25 = v21;
      v14 = v0 + 80;
      MEMORY[0x1B5E44758](v25, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v28 = *(_QWORD *)(v0 + 216);
    v29 = (void *)objc_opt_self();
    *(_QWORD *)(v0 + 80) = 0;
    v30 = objc_msgSend(v29, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v28, 1, v14);
    v31 = *(id *)(v0 + 80);
    if (v30)
    {
      v33 = *(_QWORD *)(v0 + 200);
      v32 = *(_QWORD *)(v0 + 208);
      v34 = *(_QWORD *)(v0 + 152);
      v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v37 = v36;

      *(_QWORD *)(v0 + 272) = v35;
      *(_QWORD *)(v0 + 280) = v37;
      v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88370]), sel_init);
      *(_QWORD *)(v0 + 288) = v38;
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v38, sel_setExecutionContextUpdate_, isa);

      v40 = (void *)MEMORY[0x1B5E432E8](v33, v32);
      objc_msgSend(v38, sel_setRemoteDeviceAssistantId_, v40);

      AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(v38, 1);
      *(_QWORD *)(v0 + 48) = v34;
      v41 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 296) = v41;
      type metadata accessor for AceServiceInvokerImpl();
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v42, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
      *v41 = v0;
      v41[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
      return AceServiceInvokerAsync.submit<A>(_:)();
    }
    else
    {
      v50 = v31;
      v51 = *(void **)(v0 + 216);
      v52 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      *(_QWORD *)(v0 + 128) = v52;
      v53 = v52;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      if ((swift_dynamicCast() & 1) != 0)
      {

        if (one-time initialization token for ace != -1)
          swift_once();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.ace);
        v54 = Logger.logObject.getter();
        v55 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v54, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v56 = 0;
          _os_log_impl(&dword_1B4BE6000, v54, v55, "AceServiceInvokerImpl: context publishing response failed because user barged in. Will throw BargeInError.", v56, 2u);
          MEMORY[0x1B5E44758](v56, -1, -1);
        }
        v58 = *(_QWORD *)(v0 + 176);
        v57 = *(_QWORD *)(v0 + 184);
        v59 = *(_QWORD *)(v0 + 168);

        type metadata accessor for BargeInError();
        lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B710], MEMORY[0x1E0D9B718]);
        swift_allocError();
        BargeInError.init(rawError:)();
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);

      }
      else
      {

        swift_willThrow();
      }
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v26 = *(char **)(v0 + 216);
    if (*(_QWORD *)&v26[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities])
    {
      v27 = swift_bridgeObjectRetain();
      AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(v27);

      swift_bridgeObjectRelease();
    }
    else
    {

    }
    v44 = *(_QWORD *)(v0 + 152);
    v45 = *(void **)(v0 + 160);
    v46 = swift_allocObject();
    *(_QWORD *)(v0 + 320) = v46;
    *(_QWORD *)(v46 + 16) = v44;
    *(_QWORD *)(v46 + 24) = v45;
    v47 = async function pointer to specialized withCancellableContinuation<A>(body:);
    swift_retain();
    v48 = v45;
    v49 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 328) = v49;
    *v49 = v0;
    v49[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
    return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                     + v47))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v46);
  }
}

{
  uint64_t v0;
  id v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v1 = *(id *)(v0 + 304);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(void **)(v0 + 304);
    v25 = *(_QWORD *)(v0 + 280);
    v26 = *(void **)(v0 + 288);
    v24 = *(_QWORD *)(v0 + 272);
    v27 = *(void **)(v0 + 216);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v28[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = v4;
    v8 = objc_msgSend(v7, sel_description);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v2, v3, "Got response from RemoteExecutionContextUpdate: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
    outlined consume of Data._Representation(v24, v25);

  }
  else
  {
    v12 = *(void **)(v0 + 304);
    v13 = *(_QWORD *)(v0 + 280);
    v14 = *(void **)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 272);
    v16 = *(void **)(v0 + 216);

    outlined consume of Data._Representation(v15, v13);
  }
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(void **)(v0 + 160);
  v19 = swift_allocObject();
  *(_QWORD *)(v0 + 320) = v19;
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = async function pointer to specialized withCancellableContinuation<A>(body:);
  swift_retain();
  v21 = v18;
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v22;
  *v22 = v0;
  v22[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                   + v20))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v19);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD *v32;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  Class isa;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[2];

  v60[1] = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + 256);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 256);
    v7 = *(void **)(v0 + 224);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315138;
    v60[0] = v9;
    *(_QWORD *)(v0 + 104) = v6;
    v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v11 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "Error sending SACFProvideContext: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {
    v13 = *(void **)(v0 + 256);

  }
  if (*(_BYTE *)(*(_QWORD *)(v0 + 152) + 104) == 1)
  {
    v14 = v0 + 80;
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 264) = __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    swift_retain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v19 = *(_QWORD *)(v0 + 200);
      v18 = *(_QWORD *)(v0 + 208);
      v20 = (uint8_t *)swift_slowAlloc();
      v59 = v15;
      v21 = swift_slowAlloc();
      v60[0] = v21;
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)(v0 + 32) = v19;
      *(_QWORD *)(v0 + 40) = v18;
      v14 = v0 + 80;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      v22 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v16, v17, "Sending RemoteExecutionContextUpdate to invocation device ID=%s", v20, 0xCu);
      swift_arrayDestroy();
      v24 = v21;
      v15 = v59;
      MEMORY[0x1B5E44758](v24, -1, -1);
      MEMORY[0x1B5E44758](v20, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v34 = *(_QWORD *)(v0 + 216);
    v35 = (void *)objc_opt_self();
    *(_QWORD *)(v0 + 80) = 0;
    v36 = objc_msgSend(v35, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v34, 1, v14);
    v37 = *(id *)(v0 + 80);
    if (v36)
    {
      v39 = *(_QWORD *)(v0 + 200);
      v38 = *(_QWORD *)(v0 + 208);
      v40 = *(_QWORD *)(v0 + 152);
      v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v43 = v42;

      *(_QWORD *)(v0 + 272) = v41;
      *(_QWORD *)(v0 + 280) = v43;
      v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88370]), sel_init);
      *(_QWORD *)(v0 + 288) = v44;
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v44, sel_setExecutionContextUpdate_, isa);

      v46 = (void *)MEMORY[0x1B5E432E8](v39, v38);
      objc_msgSend(v44, sel_setRemoteDeviceAssistantId_, v46);

      AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(v44, 1);
      *(_QWORD *)(v0 + 48) = v40;
      v47 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 296) = v47;
      type metadata accessor for AceServiceInvokerImpl();
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v48, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
      *v47 = v0;
      v47[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
      return AceServiceInvokerAsync.submit<A>(_:)();
    }
    else
    {
      v49 = v37;
      v50 = *(void **)(v0 + 216);
      v51 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      *(_QWORD *)(v0 + 128) = v51;
      v52 = v51;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      if ((swift_dynamicCast() & 1) != 0)
      {

        if (one-time initialization token for ace != -1)
          swift_once();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.ace);
        v53 = Logger.logObject.getter();
        v54 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v55 = 0;
          _os_log_impl(&dword_1B4BE6000, v53, v54, "AceServiceInvokerImpl: context publishing response failed because user barged in. Will throw BargeInError.", v55, 2u);
          MEMORY[0x1B5E44758](v55, -1, -1);
        }
        v57 = *(_QWORD *)(v0 + 176);
        v56 = *(_QWORD *)(v0 + 184);
        v58 = *(_QWORD *)(v0 + 168);

        type metadata accessor for BargeInError();
        lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B710], MEMORY[0x1E0D9B718]);
        swift_allocError();
        BargeInError.init(rawError:)();
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);

      }
      else
      {

        swift_willThrow();
      }
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v25 = *(char **)(v0 + 216);
    if (*(_QWORD *)&v25[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities])
    {
      v26 = swift_bridgeObjectRetain();
      AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(v26);
      swift_bridgeObjectRelease();
    }

    v27 = *(_QWORD *)(v0 + 152);
    v28 = *(void **)(v0 + 160);
    v29 = swift_allocObject();
    *(_QWORD *)(v0 + 320) = v29;
    *(_QWORD *)(v29 + 16) = v27;
    *(_QWORD *)(v29 + 24) = v28;
    v30 = async function pointer to specialized withCancellableContinuation<A>(body:);
    swift_retain();
    v31 = v28;
    v32 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 328) = v32;
    *v32 = v0;
    v32[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
    return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                     + v30))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v29);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + 312);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 312);
    v7 = *(_QWORD *)(v0 + 272);
    v24 = *(_QWORD *)(v0 + 280);
    v25 = *(void **)(v0 + 288);
    v26 = *(void **)(v0 + 216);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315138;
    v27[0] = v9;
    *(_QWORD *)(v0 + 56) = v6;
    v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v11 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "Error sending RemoteExecutionContextUpdate: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
    outlined consume of Data._Representation(v7, v24);

  }
  else
  {
    v13 = *(void **)(v0 + 312);
    v14 = *(_QWORD *)(v0 + 280);
    v15 = *(void **)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 272);

    outlined consume of Data._Representation(v16, v14);
  }
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(void **)(v0 + 160);
  v19 = swift_allocObject();
  *(_QWORD *)(v0 + 320) = v19;
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = async function pointer to specialized withCancellableContinuation<A>(body:);
  swift_retain();
  v21 = v18;
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v22;
  *v22 = v0;
  v22[1] = closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                   + v20))((uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:), v19);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  v1 = *(void **)(v0 + 336);
  *(_QWORD *)(v0 + 128) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    if (one-time initialization token for ace != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.ace);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "AceServiceInvokerImpl: context publishing response failed because user barged in. Will throw BargeInError.", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 168);

    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B710], MEMORY[0x1E0D9B718]);
    swift_allocError();
    BargeInError.init(rawError:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);

  }
  else
  {

    swift_willThrow();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 248) = a1;
  *(_QWORD *)(v3 + 256) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v6;

  v4 = *v2;
  *(_QWORD *)(v4 + 336) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v6 = *(_QWORD **)(v4 + 144);
  swift_release();
  *v6 = a1;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

BOOL AceServiceInvokerImpl.isExecutingOnBehalfOfInvocationDevice.getter()
{
  uint64_t v0;
  char v1;
  _BOOL8 result;

  if (*(_BYTE *)(v0 + 24) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v1 & 1) == 0)
      return result;
  }
  return *(_QWORD *)(v0 + 80) != 0;
}

uint64_t AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      return result;
  }
  if (*(_QWORD *)(v1 + 80))
  {
    if ((*(_BYTE *)(v1 + 104) & 1) == 0)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
      {
        if (one-time initialization token for ace != -1)
          swift_once();
        v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Logger.ace);
        swift_bridgeObjectRetain();
        v11 = Logger.logObject.getter();
        v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v13 = 134349056;
          v15[1] = v9;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v11, v12, "Begin donating %{public}ld reference resolution entities to local device", v13, 0xCu);
          MEMORY[0x1B5E44758](v13, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease();
        }
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 136));
        v14 = type metadata accessor for RRFilter();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
        dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)();
        return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for RRFilter?);
      }
    }
  }
  return result;
}

void closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  _QWORD v6[6];

  v4 = *(void **)(a2 + 16);
  v6[4] = partial apply for closure #1 in closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v6[5] = a1;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  v6[3] = &block_descriptor_214;
  v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_submitWithExecutionOutput_completion_, a3, v5);
  _Block_release(v5);
}

void closure #1 in closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
    v15 = a1;
    specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v6, a1, 0);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);

    return;
  }
  v7 = (void *)_convertErrorToNSError(_:)();
  v8 = objc_msgSend(v7, sel_domain);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  if (v9 == 0x55747865746E6F43 && v11 == 0xEE00726574616470)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
      goto LABEL_18;
  }
  v16 = objc_msgSend(v7, sel_userInfo);
  v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRelease();
  if (v18 != 1)
    goto LABEL_18;
  v19 = objc_msgSend(v7, sel_userInfo);
  v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v20 + 16))
  {

    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000001B4EF61B0);
  v22 = v21;
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
LABEL_18:

LABEL_19:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
    v30 = a2;
    specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v6, a2, 1u);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);

    return;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1B4BE6000, v24, v25, "Ignored errorApplyingRREntities as we don't want to issue an error dialog just because entities didn't donate to SRR successfully.", v26, 2u);
    MEMORY[0x1B5E44758](v26, -1, -1);
  }

  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FF0]), sel_init);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v6, 1, 1, v28);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v6, v27, 0);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);

}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime18RemoteConversation_p_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(a1, a2, a3, &demangling cache variable for type metadata for RemoteConversation);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24RemoteConversationClientCSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(a1, a2, a3, &demangling cache variable for type metadata for RemoteConversationClient?);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ConversationParaphraseResult);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime4NodeCyAF9FlowAgentCGSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm(a1, a2, a3, &demangling cache variable for type metadata for Node<FlowAgent>?);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24ConversationCommitResultO_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ConversationCommitResult);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  a4(0);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC11SiriKitFlow15ExecuteResponseV_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0D9BA78]);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime19ConversationServiceC11EagerResultO_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ConversationService.EagerResult);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC11SiriKitFlow15PrepareResponseV_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5Tm(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0D9BB80]);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void closure #1 in AceServiceInvokerImpl.donateEntitiesLocallyIfNeeded(_:)(void *a1, char a2)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *oslog;
  uint64_t v16;

  if ((a2 & 1) != 0)
  {
    v6 = a1;
    if (one-time initialization token for ace != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.ace);
    v8 = a1;
    v9 = a1;
    oslog = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v16 = v12;
      *(_DWORD *)v11 = 136446210;
      swift_getErrorValue();
      v13 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(a1, 1);
      outlined consume of Result<(), Error>(a1, 1);
      _os_log_impl(&dword_1B4BE6000, oslog, v10, "Error donating reference resolution entities to local device: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v12, -1, -1);
      MEMORY[0x1B5E44758](v11, -1, -1);

      outlined consume of Result<(), Error>(a1, 1);
      return;
    }
    outlined consume of Result<(), Error>(a1, 1);
    outlined consume of Result<(), Error>(a1, 1);

  }
  else
  {
    if (one-time initialization token for ace != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.ace);
    oslog = Logger.logObject.getter();
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v3, "Completed donating reference resolution entities to local device", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }
  }

}

uint64_t AceServiceInvokerImpl.createSubmissionTask<A>(for:options:expectingResponseOfType:)(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = AceServiceInvokerImpl.preparedCommand(_:options:)(a1, a2);
  v12 = SABaseCommand.forcedBargeInResult<A>(forExpectedResponseType:)(a3);
  LOBYTE(a3) = v13;
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = v4;
  *(_QWORD *)(v15 + 40) = v11;
  *(_QWORD *)(v15 + 48) = v12;
  *(_BYTE *)(v15 + 56) = a3 & 1;
  swift_retain();
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSo13SABaseCommandCSg_Tgm5Tm((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.createSubmissionTask<A>(for:options:expectingResponseOfType:), v15, &demangling cache variable for type metadata for SABaseCommand?);
}

uint64_t AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:), (uint64_t)&unk_1E6841F28, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t *v9;
  os_unfair_lock_s *v10;
  uint64_t v12;

  if ((a2 & 1) != 0)
    v5 = (void *)MEMORY[0x1E0DEE9D8];
  else
    v5 = &outlined read-only object #0 of AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:);
  v6 = specialized AceServiceInvokerImpl.wrapCommandForExecution(_:assistantId:)(a1, 0, 0xE000000000000000);
  v7 = AceServiceInvokerImpl.createSubmissionTask<A>(for:options:expectingResponseOfType:)(v6, (uint64_t)v5, a3);
  swift_bridgeObjectRelease();
  v8 = *(os_unfair_lock_s **)(*(_QWORD *)(v3 + 160) + 16);
  v9 = (uint64_t *)&v8[4];
  v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  closure #1 in SubmissionTaskRegistry.register(_:)(v9, v7, &v12);
  os_unfair_lock_unlock(v10);

  swift_release();
  return v7;
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
  v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(_QWORD *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return Result<>.init(catching:)(*(_QWORD *)(v0 + 72), (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:));
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  v8[3] = a4;
  v8[4] = a2;
  v8[2] = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v8[5] = v9;
  *v9 = v8;
  v9[1] = AceServiceInvokerImpl._submitToCompanionExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)();
}

uint64_t AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v3[5] = v4;
  *v4 = v3;
  v4[1] = AceServiceInvokerImpl._submitToCompanionExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)();
}

uint64_t AceServiceInvokerImpl._submitToCompanionExecute<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 56) = a1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:), (uint64_t)&unk_1E6841F50, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a6(a1, a5, a4, a4);
  v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = a4;
  v21[5] = a2;
  v21[6] = a3;
  v21[7] = v8;
  v21[8] = v19;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v18, a8, (uint64_t)v21);
  return swift_release();
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
  v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(_QWORD *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return Result<>.init(catching:)(*(_QWORD *)(v0 + 72), (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:));
}

uint64_t AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = AceServiceInvokerImpl._submitToCompanionPrep<A>(_:setRefId:responseType:)(*(void **)(v0 + 16), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 24));
  *(_QWORD *)(v0 + 40) = v1;
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)v2 = v0;
  *(_QWORD *)(v2 + 8) = AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 40) = v3;
  *v3 = v2;
  v3[1] = AceServiceInvokerImpl._submitToCompanionExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 64));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t (*interpretEORResponse<A>(_:)(void *a1))(uint64_t)
{
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(uint64_t);
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;

  if (!a1)
  {
    v3 = 0;
    goto LABEL_5;
  }
  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    v3 = (void *)v2;
LABEL_5:
    swift_unknownObjectRetain();
    v4 = (uint64_t (*)(uint64_t))interpretResponse<A>(_:)(v3);
    swift_unknownObjectRelease();
    return v4;
  }
  v5 = objc_msgSend(a1, sel_encodedClassName);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v9 = 0xE300000000000000;
    v7 = 7104878;
  }
  if (one-time initialization token for ace != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.ace);
  swift_bridgeObjectRetain();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v20 = v14;
    *(_DWORD *)v13 = 136315394;
    swift_getMetatypeMetadata();
    v15 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v11, v12, "submitToRemote unable to parse typed response. Expected '%s' : received '%s'", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v14, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for CommandFailure();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B858];
  swift_allocObject();
  v17 = CommandFailure.init(errorCode:reason:)();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type CommandFailure and conformance CommandFailure, 255, v4, MEMORY[0x1E0D9B860]);
  swift_allocError();
  *v18 = v17;
  swift_willThrow();
  return v4;
}

uint64_t AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(NSObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:)(a1, a2, a3, 1, a6);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = v6;
  v18[8] = v16;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:), (uint64_t)v18);
  return swift_release();
}

uint64_t AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:)(NSObject *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t *v28;
  os_unfair_lock_s *v29;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34[3];
  _QWORD *v35;

  v6 = v5;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((a4 & 1) != 0)
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  else
    v12 = &outlined read-only object #0 of AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    if ((a4 & 1) != 0)
      v31 = v11;
    else
      v31 = &outlined read-only object #0 of AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:);
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v12);
  }
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[2 * v14];
  v15[4] = a2;
  v15[5] = a3;
  v35 = v12;
  if (one-time initialization token for ace != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.ace);
  swift_bridgeObjectRetain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v34[0] = v20;
    *(_DWORD *)v19 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    swift_beginAccess();
    v21 = swift_bridgeObjectRetain();
    v22 = MEMORY[0x1B5E434D4](v21, &type metadata for AceServiceInvokerImpl.AceSubmitOptions);
    v24 = v23;
    swift_bridgeObjectRelease();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v17, v18, "submitToRemote(targetAssistantId:%s, options:%s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  v25 = (uint64_t)v35;
  swift_bridgeObjectRetain();
  v26 = AceServiceInvokerImpl.createSubmissionTask<A>(for:options:expectingResponseOfType:)(a1, v25, a5);
  swift_bridgeObjectRelease();
  v27 = *(os_unfair_lock_s **)(*(_QWORD *)(v6 + 160) + 16);
  v28 = (uint64_t *)&v27[4];
  v29 = v27 + 6;
  os_unfair_lock_lock(v27 + 6);
  closure #1 in SubmissionTaskRegistry.register(_:)(v28, v26, &v33);
  os_unfair_lock_unlock(v29);
  swift_release();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for SubmitCommandError();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
  v9 = type metadata accessor for Result();
  v8[7] = v9;
  v8[8] = *(_QWORD *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:);
  return Result<>.init(catching:)(*(_QWORD *)(v0 + 72), (int *)&async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:));
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:);
  v8[3] = a4;
  v8[4] = a2;
  v8[2] = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v8[5] = v9;
  *v9 = v8;
  v9[1] = AceServiceInvokerImpl._submitToRemoteExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)();
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl._submitToRemoteExecute<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v3[5] = v4;
  *v4 = v3;
  v4[1] = AceServiceInvokerImpl._submitToRemoteExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)();
}

uint64_t AceServiceInvokerImpl._submitToRemoteExecute<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 56) = a1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl._submitToRemoteExecute<A>(_:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  os_unfair_lock_s *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(void **)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = interpretEORResponse<A>(_:)(objc_msgSend(v1, sel_result));
  swift_unknownObjectRelease();

  v5 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(v3 + 160) + 16) + 24);
  os_unfair_lock_lock(v5);
  specialized Set._Variant.remove(_:)();
  os_unfair_lock_unlock(v5);
  v6 = swift_release();
  if (!v2)
    v6 = (uint64_t)v4;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 160) + 16) + 24);
  os_unfair_lock_lock(v1);
  specialized Set._Variant.remove(_:)();
  os_unfair_lock_unlock(v1);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = v5;
  *(_BYTE *)(v6 + 88) = a4;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = AceServiceInvokerImpl._submitToRemotePrep<A>(_:_:setRefId:responseType:)(*(NSObject **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 88), *(_QWORD *)(v0 + 40));
  *(_QWORD *)(v0 + 56) = v1;
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *(_QWORD *)v2 = v0;
  *(_QWORD *)(v2 + 8) = AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 40) = v3;
  *v3 = v2;
  v3[1] = AceServiceInvokerImpl._submitToRemoteExecute<A>(_:);
  return specialized AceServiceInvokerImpl.getResponse<A>(from:)();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(a1, MEMORY[0x1E0DEE9D8]);
  v11 = *(os_unfair_lock_s **)(*(_QWORD *)(v3 + 160) + 16);
  v12 = (uint64_t *)&v11[4];
  v13 = v11 + 6;
  os_unfair_lock_lock(v11 + 6);
  closure #1 in SubmissionTaskRegistry.register(_:)(v12, v10, &v18);
  os_unfair_lock_unlock(v13);
  swift_release();
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v3;
  v15[5] = v10;
  v15[6] = a2;
  v15[7] = a3;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:), (uint64_t)v15);
  return swift_release();
}

uint64_t AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:)(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  os_unfair_lock_s *v7;
  uint64_t v9;

  if ((a2 & 1) != 0)
    v3 = (void *)MEMORY[0x1E0DEE9D8];
  else
    v3 = &outlined read-only object #0 of AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:);
  v4 = AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(a1, (uint64_t)v3);
  swift_bridgeObjectRelease();
  v5 = *(os_unfair_lock_s **)(*(_QWORD *)(v2 + 160) + 16);
  v6 = (uint64_t *)&v5[4];
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  closure #1 in SubmissionTaskRegistry.register(_:)(v6, v4, &v9);
  os_unfair_lock_unlock(v7);
  swift_release();
  return v4;
}

uint64_t closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;

  v7[6] = a6;
  v7[7] = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  v7[8] = swift_task_alloc();
  v9 = (_QWORD *)swift_task_alloc();
  v7[9] = v9;
  *v9 = v7;
  v9[1] = closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:);
  return AceServiceInvokerImpl._submitAllSerialExecute(_:)(a5);
}

uint64_t closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(void (**)(uint64_t))(v0 + 48);
  v3 = type metadata accessor for SubmitCommandError();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v2(v1);
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for SubmitCommandError?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  void (*v3)(uint64_t *);
  uint64_t v4;

  v1 = *(void **)(v0 + 80);
  v2 = *(uint64_t **)(v0 + 64);
  v3 = *(void (**)(uint64_t *))(v0 + 48);
  swift_getErrorValue();
  Error.asSubmitCommandError.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v2);
  v4 = type metadata accessor for SubmitCommandError();
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);
  v3(v2);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for SubmitCommandError?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl._submitAllSerialExecute(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[11] = a1;
  v2[12] = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v2[13] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  v2[14] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v3 = v2;
  v3[1] = AceServiceInvokerImpl._submitAllSerialExecute(_:);
  return Task.value.getter();
}

uint64_t AceServiceInvokerImpl._submitAllSerialExecute(_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v20;

  v1 = *(void **)(v0 + 120);
  *(_QWORD *)(v0 + 64) = v1;
  v2 = v1;
  if (swift_dynamicCast())
  {

    v4 = *(void **)(v0 + 40);
    v3 = *(NSObject **)(v0 + 48);
    specialized static AceServiceInvokerImpl.genericErrorLogger(originalCommand:error:)(v4, v3);
    v5 = v3;
    swift_willThrow();

  }
  else
  {

    if (one-time initialization token for ace != -1)
      swift_once();
    v6 = *(void **)(v0 + 120);
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.ace);
    v8 = v6;
    v9 = v6;
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(void **)(v0 + 120);
    if (v12)
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v20 = v15;
      *(_DWORD *)v14 = 136315138;
      swift_getErrorValue();
      v16 = Error.localizedDescription.getter();
      *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v15, -1, -1);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }
    else
    {

    }
    swift_willThrow();
  }
  v18 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 96) + 160) + 16) + 24);
  os_unfair_lock_lock(v18);
  specialized Set._Variant.remove(_:)();
  os_unfair_lock_unlock(v18);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void AceServiceInvokerImpl._submitAllSerialExecute(_:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  if (one-time initialization token for ace != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.ace);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "AceServiceInvoker successfully submitted all commands serially", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);

  v7 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(v6 + 160) + 16) + 24);
  os_unfair_lock_lock(v7);
  specialized Set._Variant.remove(_:)();
  os_unfair_lock_unlock(v7);
  if (!v5)
  {
    swift_release();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t Error.asSubmitCommandError.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v4 = v3;
  v29 = a2;
  v30 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v29 - v14;
  v16 = type metadata accessor for SubmitCommandError();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v20(v15, v4, a1);
  v21 = swift_dynamicCast();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v21)
  {
    v22(v9, 0, 1, v16);
    v23 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v23(v19, v9, v16);
    return ((uint64_t (*)(uint64_t *, char *, uint64_t))v23)(v30, v19, v16);
  }
  else
  {
    v25 = v30;
    v22(v9, 1, 1, v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for SubmitCommandError?);
    v20(v13, v4, a1);
    v26 = _getErrorEmbeddedNSError<A>(_:)();
    if (v26)
    {
      v27 = v26;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a1);
    }
    else
    {
      v27 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v28, v13, a1);
    }
    *v25 = v27;
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v17 + 104))(v25, *MEMORY[0x1E0D9BE78], v16);
  }
}

uint64_t AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(a1, (uint64_t)&outlined read-only object #0 of AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:));
  v11 = *(os_unfair_lock_s **)(*(_QWORD *)(v3 + 160) + 16);
  v12 = (uint64_t *)&v11[4];
  v13 = v11 + 6;
  os_unfair_lock_lock(v11 + 6);
  closure #1 in SubmissionTaskRegistry.register(_:)(v12, v10, &v18);
  os_unfair_lock_unlock(v13);
  swift_release();
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v3;
  v15[5] = v10;
  v15[6] = a2;
  v15[7] = a3;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:), (uint64_t)v15);
  return swift_release();
}

uint64_t closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;

  v7[6] = a6;
  v7[7] = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  v7[8] = swift_task_alloc();
  v9 = (_QWORD *)swift_task_alloc();
  v7[9] = v9;
  *v9 = v7;
  v9[1] = closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:);
  return AceServiceInvokerImpl._submitAllSerialExecute(_:)(a5);
}

uint64_t closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return AceServiceInvokerImpl.submitAllSerial(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl.submitAllSerial(_:_:));
}

uint64_t AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return AceServiceInvokerImpl.submitAllSerial(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:));
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((a4 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    v14 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_unknownObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
  }
  v16 = *(_QWORD *)(v15 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v16 != (a4 >> 1) - a3)
  {
LABEL_12:
    swift_unknownObjectRelease();
    goto LABEL_3;
  }
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_unknownObjectRelease();
    v14 = MEMORY[0x1E0DEE9D8];
  }
LABEL_10:
  swift_unknownObjectRelease();
  a7(v14, a5, a6);
  return swift_release();
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:setRefId:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.submitAllSerial(_:setRefId:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = AceServiceInvokerImpl._submitAllSerialPrep(_:setRefId:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 56));
  *(_QWORD *)(v0 + 32) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submitAllSerial(_:setRefId:);
  return AceServiceInvokerImpl._submitAllSerialExecute(_:)(v1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a1;
  v11[5] = v3;
  v11[6] = a2;
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v13 = 0;
    v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v13 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  if (v14 | v13)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v13;
    v17[3] = v14;
  }
  return swift_task_create();
}

void closure #1 in AceServiceInvokerImpl.closeServerRequestIfRequired(givenCommand:)(_BYTE *a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  void *v11;

  if ((*a1 & 1) == 0)
  {
    if (one-time initialization token for userFacingResponseCommandList != -1)
      swift_once();
    v5 = (void *)static AceServiceInvokerImpl.userFacingResponseCommandList;
    swift_getObjectType();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand.Type);
    LODWORD(v5) = objc_msgSend(v5, sel_containsObject_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    if ((_DWORD)v5)
    {
      if (one-time initialization token for ace != -1)
        swift_once();
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.ace);
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1B4BE6000, v7, v8, "Closing server request.", v9, 2u);
        MEMORY[0x1B5E44758](v9, -1, -1);
      }

      v10 = (void *)a3[2];
      v11 = (void *)MEMORY[0x1B5E432E8](a3[5], a3[6]);
      objc_msgSend(v10, sel_closeServerRequestForExecutionRequestId_, v11);

      *a1 = 1;
    }
  }
}

Swift::String_optional __swiftcall AceServiceInvokerImpl.currentStartRequestId()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String_optional result;

  if (v0[8])
  {
    v1 = v0[7];
    v2 = (void *)v0[8];
  }
  else
  {
    v1 = v0[5];
    v2 = (void *)v0[6];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = v2;
  result.value._object = v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

uint64_t AceServiceInvokerImpl.prepareForAudioHandoff()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = AceServiceInvokerImpl.prepareForAudioHandoff();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 32));
}

void closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_137;
  v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_prepareForAudioHandoffWithCompletion_, v10);
  _Block_release(v10);
}

void closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_131;
  v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_prepareForAudioHandoffFailedWithCompletion_, v10);
  _Block_release(v10);
}

uint64_t AceServiceInvokerImpl.recentDialogs()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RecentDialog]);
  *v1 = v0;
  v1[1] = AceServiceInvokerImpl.recentDialogs();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

void closure #1 in AceServiceInvokerImpl.recentDialogs()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[RecentDialog], Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.recentDialogs();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [RecentDialog]) -> ();
  aBlock[3] = &block_descriptor_125;
  v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_fetchRecentDialogsWithReply_, v10);
  _Block_release(v10);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.recentDialogs()()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[RecentDialog], Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)()
{
  int8x16_t *v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[2], v0[2], 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Bool, Error?));
  *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_119;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v9, sel_submitExternalActivationRequestWithRequestInfo_completion_, a3, v12);
  _Block_release(v12);
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(int a1, id a2)
{
  id v2;

  v2 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #1 in AceServiceInvokerImpl.createSubmissionTask<A>(for:options:expectingResponseOfType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  char v10;
  _QWORD *v11;

  *(_QWORD *)(v7 + 16) = a1;
  v10 = a7 & 1;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v11;
  *v11 = v7;
  v11[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(a5, a6, v10);
}

uint64_t AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(v4 + 88) = v3;
  *(_BYTE *)(v4 + 25) = a3;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = type metadata accessor for CancellationError();
  *(_QWORD *)(v4 + 96) = v5;
  *(_QWORD *)(v4 + 104) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 112) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AceServiceInvokerImpl.performSubmit(_:bargeInResult:)()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  char v7;
  void *v8;
  id v9;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  id v18;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 152);
  v2 = (os_unfair_lock_s *)(v1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 16);
  os_unfair_lock_unlock(v2);
  if ((_DWORD)v1 == 1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "Attempting to submit a command on an invalidated AceServiceInvoker. Skipping straight to barge-in response.", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }
    v7 = *(_BYTE *)(v0 + 25);

    v8 = *(void **)(v0 + 80);
    if ((v7 & 1) != 0)
    {
      *(_QWORD *)(v0 + 64) = v8;
      v18 = v8;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v9 = v8;
      swift_task_dealloc();
      return (*(uint64_t (**)(void *))(v0 + 8))(v8);
    }
  }
  else
  {
    v12 = *(void **)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 88);
    v13 = *(void **)(v0 + 72);
    v14 = *(_BYTE *)(v0 + 25) & 1;
    v15 = swift_allocObject();
    *(_QWORD *)(v0 + 120) = v15;
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(v15 + 24) = v11;
    *(_QWORD *)(v15 + 32) = v12;
    *(_BYTE *)(v15 + 40) = v14;
    outlined copy of Result<SABaseCommand?, Error>(v12);
    v16 = v13;
    swift_retain();
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    *v17 = v0;
    v17[1] = AceServiceInvokerImpl.performSubmit(_:bargeInResult:);
    return withCancellableContinuation<A>(body:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  char v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (*v18)(uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  id v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 136);
  swift_release();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    if (one-time initialization token for ace != -1)
      swift_once();
    v3 = *(void **)(v0 + 80);
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.ace);
    outlined copy of Result<SABaseCommand?, Error>(v3);
    outlined copy of Result<SABaseCommand?, Error>(v3);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(void **)(v0 + 80);
    if (v7)
    {
      v9 = *(_BYTE *)(v0 + 25) & 1;
      v10 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v11 = v23;
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v0 + 16) = v8;
      *(_BYTE *)(v0 + 24) = v9;
      outlined copy of Result<SABaseCommand?, Error>(v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SABaseCommand?, Error>);
      v12 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<SABaseCommand?, Error>(v8);
      outlined consume of Result<SABaseCommand?, Error>(v8);
      _os_log_impl(&dword_1B4BE6000, v5, v6, "AceServiceInvokerImpl: submission response was simulated because user barged in. Simulated result: %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v11, -1, -1);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }
    else
    {
      outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 80));
      outlined consume of Result<SABaseCommand?, Error>(v8);
    }

    v15 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 96);
    v17 = *(void **)(v0 + 80);
    if ((*(_BYTE *)(v0 + 25) & 1) == 0)
    {
      v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v19 = v17;
      v18(v14, v16);

      v20 = *(_QWORD *)(v0 + 80);
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v20);
    }
    *(_QWORD *)(v0 + 48) = v17;
    v22 = v17;
    swift_willThrowTypedImpl();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);

  }
  else
  {

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[13] = a4;
  v5[14] = a5;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    v1 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 136) = v22;
    if (v22)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    **(_QWORD **)(v0 + 80) = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 136) = v2;
  if (!v2)
    goto LABEL_15;
LABEL_3:
  *(_QWORD *)(v0 + 144) = 0;
  if ((v1 & 0xC000000000000001) != 0)
    v3 = (id)MEMORY[0x1B5E43B94](0, v1);
  else
    v3 = *(id *)(v1 + 32);
  v4 = v3;
  *(_QWORD *)(v0 + 152) = v3;
  *(_QWORD *)(v0 + 160) = 1;
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v8;
  v11[5] = v4;
  v11[6] = v7;
  outlined init with copy of ReferenceResolutionClientProtocol?(v5, v6, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  LODWORD(v5) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9);
  swift_retain();
  v12 = v4;
  swift_bridgeObjectRetain();
  v13 = *(_QWORD *)(v0 + 120);
  if ((_DWORD)v5 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v14 = 0;
    v15 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v14 = dispatch thunk of Actor.unownedExecutor.getter();
      v15 = v16;
      swift_unknownObjectRelease();
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
  }
  v17 = **(_QWORD **)(v0 + 88);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  v18 = v15 | v14;
  if (v15 | v14)
  {
    v18 = v0 + 16;
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = v14;
    *(_QWORD *)(v0 + 40) = v15;
  }
  v19 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 48) = 1;
  *(_QWORD *)(v0 + 56) = v18;
  *(_QWORD *)(v0 + 64) = v17;
  swift_task_create();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v19, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<SABaseCommand?, Error>);
  *v20 = v0;
  v20[1] = closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:);
  return ThrowingTaskGroup.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD *v4;
  id v5;
  id v6;

  v1 = *(void **)(v0 + 176);
  v3 = *(void **)(v0 + 144);
  v2 = *(void **)(v0 + 152);
  lazy protocol witness table accessor for type SerialSubmissionError and conformance SerialSubmissionError();
  swift_allocError();
  *v4 = v2;
  v4[1] = v1;
  v5 = v2;
  v6 = v1;
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  id v17;
  void (*v18)(void);
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(void **)(v0 + 72);
  if (v1 == (void *)1)
    goto LABEL_29;
  if (!v1)
    goto LABEL_12;
  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (!v2)
  {
    v7 = v1;
    v6 = v1;
    goto LABEL_8;
  }
  v3 = objc_msgSend((id)objc_opt_self(), sel_aceObjectWithGenericCommand_, v2);
  if (!v3)
  {
LABEL_12:
    v21 = *(void **)(v0 + 144);
    v20 = *(void **)(v0 + 152);
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FA8]), sel_init);

    goto LABEL_13;
  }
  v4 = v3;
  objc_opt_self();
  v5 = swift_dynamicCastObjCClass();
  if (!v5)
  {

    goto LABEL_12;
  }
  v6 = (id)v5;
LABEL_8:
  objc_opt_self();
  v8 = swift_dynamicCastObjCClass();
  if (v8)
  {
    v9 = v8;
    v10 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
    v11 = (void *)swift_allocError();
    *v12 = v9;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, *MEMORY[0x1E0D9BE88], v10);
    swift_willThrow();
    swift_bridgeObjectRelease();
    outlined consume of SABaseCommand??(v1);
    v14 = *(void **)(v0 + 144);
    v13 = *(void **)(v0 + 152);
    lazy protocol witness table accessor for type SerialSubmissionError and conformance SerialSubmissionError();
    swift_allocError();
    *v15 = v13;
    v15[1] = v11;
    v16 = v13;
    v17 = v11;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    v18 = *(void (**)(void))(v0 + 8);
LABEL_15:
    v18();
    return;
  }
  v19 = *(void **)(v0 + 144);

LABEL_13:
  outlined consume of SABaseCommand??(v1);
  v22 = *(_QWORD *)(v0 + 160);
  if (v22 == *(_QWORD *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    **(_QWORD **)(v0 + 80) = v6;
    swift_task_dealloc();
    swift_task_dealloc();
    v18 = *(void (**)(void))(v0 + 8);
    goto LABEL_15;
  }
  *(_QWORD *)(v0 + 144) = v6;
  v23 = *(_QWORD *)(v0 + 96);
  if ((v23 & 0xC000000000000001) != 0)
    v24 = (id)MEMORY[0x1B5E43B94](v22);
  else
    v24 = *(id *)(v23 + 8 * v22 + 32);
  v25 = v24;
  *(_QWORD *)(v0 + 152) = v24;
  *(_QWORD *)(v0 + 160) = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
LABEL_29:

    __break(1u);
    return;
  }
  v27 = *(_QWORD *)(v0 + 120);
  v26 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 104);
  v28 = *(_QWORD *)(v0 + 112);
  v30 = type metadata accessor for TaskPriority();
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v26, 1, 1, v30);
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = 0;
  v32[3] = 0;
  v32[4] = v29;
  v32[5] = v25;
  v32[6] = v28;
  outlined init with copy of ReferenceResolutionClientProtocol?(v26, v27, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  LODWORD(v26) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v27, 1, v30);
  swift_retain();
  v33 = v25;
  swift_bridgeObjectRetain();
  v34 = *(_QWORD *)(v0 + 120);
  if ((_DWORD)v26 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v35 = 0;
    v36 = 0;
    v37 = v0 + 72;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v30);
    v37 = v0 + 72;
    if (v32[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v35 = dispatch thunk of Actor.unownedExecutor.getter();
      v36 = v38;
      swift_unknownObjectRelease();
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
  }
  v39 = **(_QWORD **)(v0 + 88);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  v40 = (_QWORD *)(v36 | v35);
  if (v36 | v35)
  {
    v40 = (_QWORD *)(v37 - 56);
    *v40 = 0;
    v40[1] = 0;
    *(_QWORD *)(v0 + 32) = v35;
    *(_QWORD *)(v0 + 40) = v36;
  }
  v41 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 48) = 1;
  *(_QWORD *)(v0 + 56) = v40;
  *(_QWORD *)(v0 + 64) = v39;
  swift_task_create();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v41, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v42 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<SABaseCommand?, Error>);
  *v42 = v0;
  v42[1] = closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:);
  ThrowingTaskGroup.next(isolation:)();
}

uint64_t closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)()
{
  uint64_t v0;
  NSObject *v1;
  id v2;
  char v3;
  _QWORD *v4;

  v1 = AceServiceInvokerImpl.preparedCommand(_:options:)(*(NSObject **)(v0 + 32), *(_QWORD *)(v0 + 40));
  *(_QWORD *)(v0 + 48) = v1;
  objc_opt_self();
  if (swift_dynamicCastObjCClass()
    || (objc_opt_self(), swift_dynamicCastObjCClass())
    || (objc_opt_self(), swift_dynamicCastObjCClass())
    || (objc_opt_self(), swift_dynamicCastObjCClass()))
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FA8]), sel_init);
    v3 = 0;
  }
  else
  {
    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B710], MEMORY[0x1E0D9B718]);
    v2 = (id)swift_allocError();
    BargeInError.init(rawError:)();
    v3 = 1;
  }
  *(_BYTE *)(v0 + 88) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:);
  return AceServiceInvokerImpl.performSubmit(_:bargeInResult:)((uint64_t)v1, (uint64_t)v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(void **)(v0 + 48);
  v3 = *(_QWORD **)(v0 + 16);
  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 56));

  *v3 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 56));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch();
}

id specialized interpretResponse<A>(_:)(void *a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;

  if (!a1)
    goto LABEL_6;
  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_aceObjectWithGenericCommand_, v2);
    if (!v3)
    {
LABEL_6:
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAExecuteOnRemoteResponse);
      return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    }
    v4 = v3;
    objc_opt_self();
    v5 = (id)swift_dynamicCastObjCClass();
    if (!v5)
    {

      goto LABEL_6;
    }
  }
  else
  {
    v5 = a1;
  }
  objc_opt_self();
  v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    v8 = v7;
    v9 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
    swift_allocError();
    *v10 = v8;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v10, *MEMORY[0x1E0D9BE88], v9);
    return (id)swift_willThrow();
  }
  objc_opt_self();
  result = (id)swift_dynamicCastObjCClass();
  if (!result)
  {
    v11 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
    swift_allocError();
    *v12 = v5;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v12, *MEMORY[0x1E0D9BE90], v11);
    return (id)swift_willThrow();
  }
  return result;
}

id interpretResponse<A>(_:)(void *a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int *v12;
  uint64_t *v13;

  if (!a1)
    return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_aceObjectWithGenericCommand_, v2);
    if (!v3)
      return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    v4 = v3;
    objc_opt_self();
    v5 = (id)swift_dynamicCastObjCClass();
    if (!v5)
    {

      return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    }
  }
  else
  {
    v5 = a1;
  }
  objc_opt_self();
  v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    v8 = v7;
    v9 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
    swift_allocError();
    v11 = v10;
    *v10 = v8;
    v12 = (unsigned int *)MEMORY[0x1E0D9BE88];
LABEL_10:
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, *v12, v9);
    return (id)swift_willThrow();
  }
  result = (id)swift_dynamicCastUnknownClass();
  if (!result)
  {
    v9 = type metadata accessor for SubmitCommandError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BE98], MEMORY[0x1E0D9BEA8]);
    swift_allocError();
    v11 = v13;
    *v13 = (uint64_t)v5;
    v12 = (unsigned int *)MEMORY[0x1E0D9BE90];
    goto LABEL_10;
  }
  return result;
}

void closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(uint64_t a1, void *a2, _QWORD *a3, void *a4, char a5)
{
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  char v30;
  void *v31;
  uint64_t aBlock[6];

  if (one-time initialization token for ace != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.ace);
  v11 = a2;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v31 = a4;
    v15 = swift_slowAlloc();
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = objc_msgSend(v11, sel_description);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = a5;
    v19 = v18;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a5 = v30;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v12, v13, "Submitting command: %s", v14, 0xCu);
    swift_arrayDestroy();
    v20 = v15;
    a4 = v31;
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

  }
  v22 = a3[5];
  v21 = a3[6];
  v23 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  v24 = v11;
  swift_bridgeObjectRetain();
  v25 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(v11, 0, 0, 0, 0, 0, 0, 0, 0, 0, v22, v21);

  AceServiceInvokerImpl.closeServerRequestIfRequired(givenCommand:)((uint64_t)v24);
  v26 = (void *)a3[2];
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v24;
  *(_QWORD *)(v27 + 24) = a1;
  *(_QWORD *)(v27 + 32) = a4;
  *(_BYTE *)(v27 + 40) = a5 & 1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:);
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_170;
  v28 = _Block_copy(aBlock);
  v29 = v24;
  swift_retain();
  outlined copy of Result<SABaseCommand?, Error>(a4);
  swift_release();
  objc_msgSend(v26, sel_submitWithExecutionOutput_completion_, v25, v28);
  _Block_release(v28);

}

void closure #1 in closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  char v32;

  objc_opt_self();
  if (!swift_dynamicCastObjCClass())
  {
    objc_opt_self();
    if (!swift_dynamicCastObjCClass())
    {
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
      {
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
        {
          if (a2)
          {
            v30 = a2;
            ManagedContinuation.resume(throwing:)();

            return;
          }
          goto LABEL_22;
        }
      }
    }
  }
  if (a2)
  {
    v10 = a2;
    if (one-time initialization token for ace != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.ace);
    v12 = a2;
    v13 = a2;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v31 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v19 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v14, v15, "AceServiceInvokerImpl: ignoring command submission error due to barge-in override logic: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v17, -1, -1);
      MEMORY[0x1B5E44758](v16, -1, -1);
    }
    else
    {

    }
    v31 = a5;
    v32 = a6 & 1;
    ManagedContinuation.resume(with:)();

    return;
  }
  if (!a1 || (objc_opt_self(), !swift_dynamicCastObjCClass()))
  {
LABEL_22:
    ManagedContinuation.resume(returning:)();
    return;
  }
  if (one-time initialization token for ace != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.ace);
  v22 = a1;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v31 = v26;
    *(_DWORD *)v25 = 136315138;
    v27 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    v28 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v23, v24, "AceServiceInvokerImpl: ignoring SACommandFailed due to barge-in override logic: %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v26, -1, -1);
    MEMORY[0x1B5E44758](v25, -1, -1);

  }
  else
  {

  }
  v31 = a5;
  v32 = a6 & 1;
  ManagedContinuation.resume(with:)();
}

unint64_t AceServiceInvokerImpl.AceSubmitOptions.description.getter(uint64_t a1, void *a2)
{
  unint64_t v2;
  Swift::String v5;
  Swift::String v6;

  v2 = 0xD00000000000001CLL;
  if (a2)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 10537;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    return 0xD00000000000002ALL;
  }
  return v2;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AceServiceInvokerImpl.AceSubmitOptions()
{
  uint64_t v0;

  return AceServiceInvokerImpl.AceSubmitOptions.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AceServiceInvokerImpl.AceSubmitOptions(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a2 + 8) != 0;
  else
    return *(_QWORD *)(a2 + 8) == 0;
}

id closure #2 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)@<X0>(void **a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  _QWORD v48[2];
  uint8_t *v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  int v55;
  uint64_t v56;
  uint64_t v57;

  v53 = a5;
  v54 = a4;
  v52 = a3;
  v55 = a2;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = objc_msgSend(v12, sel_aceId);
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    swift_bridgeObjectRelease();
    v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v18 = v15 & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
LABEL_9:
      if ((v55 & 1) == 0)
        goto LABEL_17;
      goto LABEL_12;
    }
  }
  UUID.init()();
  v19 = UUID.uuidString.getter();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v22 = (void *)MEMORY[0x1B5E432E8](v19, v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setAceId_, v22);

  if (one-time initialization token for ace != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.ace);
  v24 = v12;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v51 = a6;
    v27 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    v57 = v50;
    *(_DWORD *)v27 = 136315138;
    v48[1] = v27 + 4;
    v49 = v27;
    v28 = objc_msgSend(v24, sel_description);
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;

    v32 = v29;
    a6 = v51;
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    v33 = v49;
    _os_log_impl(&dword_1B4BE6000, v25, v26, "Set missing aceId to: %s", v49, 0xCu);
    v34 = v50;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v34, -1, -1);
    MEMORY[0x1B5E44758](v33, -1, -1);

    goto LABEL_9;
  }

  if ((v55 & 1) == 0)
    goto LABEL_17;
LABEL_12:
  v35 = objc_msgSend(v12, sel_refId);
  if (!v35)
    goto LABEL_16;
  v36 = v35;
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v38 = a6;
  v40 = v39;

  swift_bridgeObjectRelease();
  v41 = HIBYTE(v40) & 0xF;
  v42 = (v40 & 0x2000000000000000) == 0;
  a6 = v38;
  if (v42)
    v41 = v37 & 0xFFFFFFFFFFFFLL;
  if (!v41)
  {
LABEL_16:
    v43 = objc_msgSend(v52, sel_refId);
    objc_msgSend(v12, sel_setRefId_, v43);

  }
LABEL_17:
  v44 = objc_msgSend(v12, sel_dialog);
  if (v44)
  {
    v45 = v44;
    v46 = (void *)v54();

  }
  else
  {
    v46 = 0;
  }
  objc_msgSend(v12, sel_setDialog_, v46);

  *a6 = v12;
  return v12;
}

uint64_t protocol witness for AceServiceInvoker.submit<A>(_:completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submit<A>(_:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AceServiceInvoker.submitWithoutRefId<A>(_:completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AceServiceInvoker.submitToCompanion<A>(_:completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AceServiceInvoker.submitToCompanionWithoutRefId<A>(_:completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AceServiceInvoker.submitToRemote<A>(_:_:completion:) in conformance AceServiceInvokerImpl(NSObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(a1, a2, a3, a4, a5, a6);
}

void protocol witness for AceServiceInvoker.submitAndForget(_:) in conformance AceServiceInvokerImpl(NSObject *a1)
{
  AceServiceInvokerImpl.submitAndForget(_:setRefId:)(a1, 1);
}

void protocol witness for AceServiceInvoker.submitAndForget(_:) in conformance AceServiceInvokerImpl(Swift::OpaquePointer a1)
{
  AceServiceInvokerImpl.submitAndForget(_:)(a1);
}

void protocol witness for AceServiceInvoker.submitAndForgetWithoutRefId(_:) in conformance AceServiceInvokerImpl(NSObject *a1)
{
  AceServiceInvokerImpl.submitAndForget(_:setRefId:)(a1, 0);
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerial(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AceServiceInvokerImpl.submitAllSerial(_:_:)(a1, a2, a3);
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerialWithoutRefId(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(a1, a2, a3);
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerial(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for AceServiceInvoker.submitAllSerial(_:_:) in conformance AceServiceInvokerImpl(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl.submitAllSerial(_:_:));
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerialWithoutRefId(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for AceServiceInvoker.submitAllSerial(_:_:) in conformance AceServiceInvokerImpl(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t, uint64_t, uint64_t))AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:));
}

uint64_t protocol witness for AceServiceInvoker.submitAllSerial(_:_:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;

  v14 = swift_unknownObjectRetain();
  v15 = specialized Array.init<A>(_:)(v14, a2, a3, a4);
  swift_unknownObjectRelease();
  a9(v15, a5, a6);
  return swift_bridgeObjectRelease();
}

id protocol witness for AceServiceInvoker.peerInfo() in conformance AceServiceInvokerImpl@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for AceServiceInvoker.peerInfo() in conformance AceServiceInvokerImpl(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo, (uint64_t (*)(uint64_t))type metadata accessor for PeerInfoProvider, &lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, (uint64_t)&protocol conformance descriptor for PeerInfoProvider, a1);
}

id protocol witness for AceServiceInvoker.endpointInfo() in conformance AceServiceInvokerImpl@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for AceServiceInvoker.peerInfo() in conformance AceServiceInvokerImpl(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo, (uint64_t (*)(uint64_t))type metadata accessor for EndpointInfoProvider, &lazy protocol witness table cache variable for type EndpointInfoProvider and conformance EndpointInfoProvider, (uint64_t)&protocol conformance descriptor for EndpointInfoProvider, a1);
}

id protocol witness for AceServiceInvoker.peerInfo() in conformance AceServiceInvokerImpl@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(uint64_t)@<X3>, unint64_t *a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  id v13;

  v13 = *(id *)(*(_QWORD *)(*(_QWORD *)v5 + 32) + *a1);
  v10 = a2(0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v13;
  a5[3] = v10;
  a5[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(a3, 255, a2, a4);
  *a5 = v11;
  return v13;
}

void protocol witness for AceServiceInvoker.prepareForAudioHandoff(completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  protocol witness for AceServiceInvoker.prepareForAudioHandoff(completion:) in conformance AceServiceInvokerImpl(a1, a2, a3, a4, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> (), (uint64_t)&block_descriptor_84, (SEL *)&selRef_prepareForAudioHandoffWithCompletion_);
}

void protocol witness for AceServiceInvoker.prepareForAudioHandoffFailed(completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  protocol witness for AceServiceInvoker.prepareForAudioHandoff(completion:) in conformance AceServiceInvokerImpl(a1, a2, a3, a4, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> (), (uint64_t)&block_descriptor_81, (SEL *)&selRef_prepareForAudioHandoffFailedWithCompletion_);
}

void protocol witness for AceServiceInvoker.prepareForAudioHandoff(completion:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  uint64_t v7;
  void *v9;
  void *v10;
  _QWORD v11[6];

  v9 = *(void **)(*(_QWORD *)v7 + 16);
  v11[4] = a1;
  v11[5] = a2;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = a5;
  v11[3] = a6;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v9, *a7, v10);
  _Block_release(v10);
}

void protocol witness for AceServiceInvoker.clearCompletionForNextRequest() in conformance AceServiceInvokerImpl()
{
  AceServiceInvokerImpl.cancelPendingCommands()();
}

BOOL protocol witness for AceServiceInvoker.isExecutingOnBehalfOfInvocationDevice.getter in conformance AceServiceInvokerImpl()
{
  return AceServiceInvokerImpl.isExecutingOnBehalfOfInvocationDevice.getter();
}

uint64_t protocol witness for AceServiceInvokerAsync.submit<A>(_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *v3;
  v9 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *(_QWORD *)v9 = v4;
  *(_QWORD *)(v9 + 8) = protocol witness for AceServiceInvokerAsync.submit<A>(_:setRefId:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v9 + 24) = a3;
  *(_QWORD *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 72) = a2;
  *(_QWORD *)(v9 + 16) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AceServiceInvokerAsync.submitToCompanion<A>(_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *v3;
  v9 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *(_QWORD *)v9 = v4;
  *(_QWORD *)(v9 + 8) = protocol witness for AceServiceInvokerAsync.submit<A>(_:setRefId:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v9 + 24) = a3;
  *(_QWORD *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 72) = a2;
  *(_QWORD *)(v9 + 16) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;

  v12 = *v5;
  v13 = swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *(_QWORD *)v13 = v6;
  *(_QWORD *)(v13 + 8) = protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v13 + 40) = a5;
  *(_QWORD *)(v13 + 48) = v12;
  *(_BYTE *)(v13 + 88) = a4;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = a3;
  *(_QWORD *)(v13 + 16) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t protocol witness for AceServiceInvokerAsync.submitAllSerial(_:setRefId:) in conformance AceServiceInvokerImpl(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 56) = a2;
  v4 = *v2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v4;
  return swift_task_switch();
}

uint64_t protocol witness for AceServiceInvoker.currentStartRequestId() in conformance AceServiceInvokerImpl()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (*(_QWORD *)(*v0 + 64))
  {
    v2 = *(_QWORD *)(v1 + 56);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 40);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for AceServiceInvokerAsync.prepareForAudioHandoff() in conformance AceServiceInvokerImpl()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

uint64_t protocol witness for AceServiceInvokerAsync.prepareForAudioHandoffFailed() in conformance AceServiceInvokerImpl()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

uint64_t protocol witness for AceServiceInvokerAsync.recentDialogs() in conformance AceServiceInvokerImpl()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = *v0;
  return swift_task_switch();
}

uint64_t protocol witness for AceServiceInvokerAsync.submitExternalActivationRequest(withRequestInfo:) in conformance AceServiceInvokerImpl(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t protocol witness for AceServiceInvokerAsync.submitExternalActivationRequest(withRequestInfo:) in conformance AceServiceInvokerImpl()
{
  int8x16_t *v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[2], v0[2], 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Bool, Error?));
  *v2 = v0;
  v2[1] = AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return AceServiceInvokerImpl.publish(nlContext:)(a1);
}

uint64_t protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return AceServiceInvokerImpl.publish(dialogEngineOutput:)(a1);
}

uint64_t protocol witness for FlowContextPublishing.isAvailable() in conformance AceServiceInvokerImpl()
{
  return 1;
}

uint64_t closure #1 in SubmissionTaskRegistry.register(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *a1;
  *a1 = 0x8000000000000000;
  v7 = specialized _NativeSet.update(with:isUnique:)(a2, isUniquelyReferenced_nonNull_native);
  *a1 = v9;
  result = swift_bridgeObjectRelease();
  *a3 = v7;
  return result;
}

uint64_t closure #1 in SubmissionTaskRegistry.cancelAll()@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  uint64_t i;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;

  v2 = *a1;
  v19 = *(_QWORD *)(*a1 + 16);
  v3 = *a1 + 56;
  v4 = 1 << *(_BYTE *)(*a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v9 = 0;
  for (i = MEMORY[0x1E0DEDB38]; ; result = MEMORY[0x1B5E436B4](v13, v14, v15, i))
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_5;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      goto LABEL_25;
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v7)
        goto LABEL_25;
      v17 = *(_QWORD *)(v3 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v7)
          goto LABEL_25;
        v17 = *(_QWORD *)(v3 + 8 * v9);
        if (!v17)
        {
          v9 = v16 + 3;
          if (v16 + 3 >= v7)
            goto LABEL_25;
          v17 = *(_QWORD *)(v3 + 8 * v9);
          if (!v17)
          {
            v9 = v16 + 4;
            if (v16 + 4 >= v7)
              goto LABEL_25;
            v17 = *(_QWORD *)(v3 + 8 * v9);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_24:
    v6 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_5:
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  }
  v18 = v16 + 5;
  if (v18 >= v7)
  {
LABEL_25:
    swift_release();
    result = swift_bridgeObjectRelease_n();
    *a1 = MEMORY[0x1E0DEE9E8];
    *a2 = v19;
    return result;
  }
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v7)
      goto LABEL_25;
    v17 = *(_QWORD *)(v3 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1B5E43BA0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for RemoteFlowPluginPackage, &lazy protocol witness table cache variable for type [RemoteFlowPluginPackage] and conformance [A], &demangling cache variable for type metadata for [RemoteFlowPluginPackage], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, MEMORY[0x1E0DA2BD8], &lazy protocol witness table cache variable for type [UsoEntity] and conformance [A], &demangling cache variable for type metadata for [UsoEntity], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationHandler);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0DA0688]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for ExecutionOverride);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for PreExecutionRule);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C698]);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = v3[3] >> 1;
    if (v8 >= v5)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        goto LABEL_5;
LABEL_18:
      if (!v2)
        goto LABEL_19;
      goto LABEL_21;
    }
  }
  if (v4 <= v5)
    v16 = v4 + v2;
  else
    v16 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 1, v3);
  v8 = v3[3] >> 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_18;
LABEL_5:
  v10 = v3[2];
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = (unint64_t)&v3[3 * v10 + 4];
  if (a1 + 32 < v11 + 24 * v9 && v11 < a1 + 32 + 24 * v9)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (appBundleId: String, userData: [String : Any]));
  swift_arrayInitWithCopy();
  if (v9 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = v3[2];
  v14 = __OFADD__(v13, v9);
  v15 = v13 + v9;
  if (!v14)
  {
    v3[2] = v15;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  if ((*(_QWORD *)(v5 + 24) >> 1) - v10 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v5 + 40 * v10 + 32;
  if (a1 + 32 < v11 + 40 * v4 && v11 < a1 + 32 + 40 * v4)
    goto LABEL_21;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v13 = *(_QWORD *)(v5 + 16);
  v14 = __OFADD__(v13, v4);
  v15 = v13 + v4;
  if (!v14)
  {
    *(_QWORD *)(v5 + 16) = v15;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x1B5E43BA0](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.update(with:isUnique:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;

  v3 = v2;
  v5 = *v2;
  Hasher.init(_seed:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  Task.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  v9 = v5 + 56;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    goto LABEL_8;
  swift_retain();
  v10 = static Task.== infix(_:_:)();
  swift_release();
  if ((v10 & 1) != 0)
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_10;
  }
  v13 = ~v7;
  v8 = (v8 + 1) & v13;
  if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    while (1)
    {
      swift_retain();
      v12 = static Task.== infix(_:_:)();
      swift_release();
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v13;
      if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_9;
    }
    v11 = 0;
  }
  else
  {
LABEL_8:
    v12 = 0;
LABEL_9:
    v11 = 1;
  }
LABEL_10:
  v14 = *(_QWORD *)(v5 + 16);
  v15 = v14 + v11;
  if (__OFADD__(v14, v11))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v5 + 24);
  if (v16 >= v15 && (a2 & 1) != 0)
  {
    if ((v12 & 1) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
  if ((a2 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v16 >= v15)
    {
      specialized _NativeSet.copy()();
      if ((v12 & 1) == 0)
      {
LABEL_29:
        v25 = *v3;
        *(_QWORD *)(*v3 + 8 * (v8 >> 6) + 56) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v8) = a1;
        v26 = *(_QWORD *)(v25 + 16);
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (!v27)
        {
          result = 0;
          *(_QWORD *)(v25 + 16) = v28;
          return result;
        }
        goto LABEL_33;
      }
LABEL_27:
      v23 = *(_QWORD *)(*v3 + 48);
      result = *(_QWORD *)(v23 + 8 * v8);
      *(_QWORD *)(v23 + 8 * v8) = a1;
      return result;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v29 = v2;
  v17 = *v2;
  Hasher.init(_seed:)();
  Task.hash(into:)();
  v18 = Hasher._finalize()();
  v19 = -1 << *(_BYTE *)(v17 + 32);
  v8 = v18 & ~v19;
  if (((*(_QWORD *)(v17 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    goto LABEL_28;
  swift_retain();
  v20 = static Task.== infix(_:_:)();
  swift_release();
  if ((v20 & 1) == 0)
  {
    v21 = ~v19;
    while (1)
    {
      v8 = (v8 + 1) & v21;
      if (((*(_QWORD *)(v17 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      swift_retain();
      v22 = static Task.== infix(_:_:)();
      swift_release();
      if ((v22 & 1) != 0)
        goto LABEL_26;
    }
LABEL_28:
    v3 = v29;
    if ((v12 & 1) == 0)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_26:
  v3 = v29;
  if ((v12 & 1) != 0)
    goto LABEL_27;
LABEL_34:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<SABaseCommand?, Error>);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1B5E43B94](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1B5E43B94](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1B5E43B94](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [DialogElement] and conformance [A], &demangling cache variable for type metadata for [DialogElement], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogElement]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for DialogElement);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  unint64_t v22;
  id v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = a1;
  v8 = one-time initialization token for executor;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1B4BE6000, v11, v12, "Logging Analytics to remote device", v13, 2u);
    MEMORY[0x1B5E44758](v13, -1, -1);
  }

  objc_opt_self();
  v14 = swift_dynamicCastObjCClass();
  if (v14)
  {
    v15 = (void *)v14;
    v16 = a2;
    v17 = specialized static ViewMetricsLogger.getSparseAddViews(addViews:)(v15);
  }
  else
  {
    objc_opt_self();
    v18 = swift_dynamicCastObjCClass();
    if (!v18)
      goto LABEL_15;
    v19 = (void *)v18;
    v20 = a2;
    v17 = (uint64_t)specialized static SayMetricsLogger.getSparseCommand(command:)(v19);
  }
  v21 = (void *)v17;

  v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v39 = v22;
  v23 = objc_msgSend(v21, sel_dictionary);
  if (v23)
  {
    v24 = v23;
    v38 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    *(_QWORD *)&v37 = v24;
    outlined init with take of Any(&v37, v36);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = v22;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    v39 = v35;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v37);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v37, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v26 = specialized static AceMetricsLogger.makeJSONFromDictionary(dictionary:)();
  v28 = v27;
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D881E8]), sel_init);
  v30 = (void *)MEMORY[0x1B5E432E8](0x52524F454E4B53, 0xE700000000000000);
  objc_msgSend(v29, sel_setEventName_, v30);

  v31 = (void *)MEMORY[0x1B5E432E8](v26, v28);
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_setEventValue_, v31);

  type metadata accessor for AceServiceInvokerImpl();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, v32, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
  AceServiceInvokerAsync.submitAndForget(_:)();

LABEL_15:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

void specialized static AceMetricsLogger.logAnalytics(command:)(os_log_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  _DWORD *v25;
  id v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v10 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  objc_opt_self();
  v11 = swift_dynamicCastObjCClass();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = a1;
    specialized static ViewMetricsLogger.logAnalytics(view:)(v12);
LABEL_13:

LABEL_14:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return;
  }
  objc_opt_self();
  v14 = swift_dynamicCastObjCClass();
  if (v14)
  {
    v15 = (void *)v14;
    v13 = a1;
    specialized static SayMetricsLogger.logAnalytics(command:)(v15);
    goto LABEL_13;
  }
  objc_opt_self();
  v16 = swift_dynamicCastObjCClass();
  if (v16)
  {
    v17 = (void *)v16;
    v13 = a1;
    specialized static DialogMetricsLogger.logAnalytics(dialog:)(v17);
    goto LABEL_13;
  }
  objc_opt_self();
  v18 = swift_dynamicCastObjCClass();
  if (v18)
  {
    v19 = (void *)v18;
    v13 = a1;
    specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(v19);
    goto LABEL_13;
  }
  objc_opt_self();
  v20 = swift_dynamicCastObjCClass();
  if (v20)
  {
    v21 = (void *)v20;
    v13 = a1;
    specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(v21);
    goto LABEL_13;
  }
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v22 = __swift_project_value_buffer(v2, (uint64_t)static Logger.instrumentation);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v22, v2);
  swift_unknownObjectRetain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, (os_log_type_t)v24))
  {

    goto LABEL_21;
  }
  v38 = v24;
  v39 = v23;
  v25 = (_DWORD *)swift_slowAlloc();
  v37 = swift_slowAlloc();
  v41 = v37;
  *v25 = 136315138;
  v26 = -[NSObject encodedClassName](a1, sel_encodedClassName);
  if (v26)
  {
    v27 = v26;
    v36 = v25 + 1;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v35 = (uint8_t *)v25;
    v29 = v28;

    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v29, &v41);
    v31 = v35;
    v40 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    a1 = v39;
    v32 = v31;
    _os_log_impl(&dword_1B4BE6000, v39, (os_log_type_t)v38, "Command unsupported for Grading data logging. You need to add logging support for command: %s", v31, 0xCu);
    v33 = v37;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v33, -1, -1);
    MEMORY[0x1B5E44758](v32, -1, -1);
LABEL_21:

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_14;
  }

  __break(1u);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 32) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 40) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 32);
  v5 = *v0;
  swift_task_dealloc();
  v3 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)v2 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(v2 + 8) = v3;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 40) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 48) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 40);
  v5 = *v0;
  swift_task_dealloc();
  v3 = *(_BYTE *)(v1 + 32);
  *(_OWORD *)v2 = *(_OWORD *)(v1 + 16);
  *(_BYTE *)(v2 + 16) = v3;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void specialized static AceServiceInvokerImpl.genericErrorLogger(originalCommand:error:)(void *a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  int v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  int v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  os_log_t v35;
  uint64_t v36;
  NSObject *v37;
  id v38;
  NSObject *v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  NSObject *v58;
  int v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  os_log_t v83;
  uint64_t v84;
  id v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  id v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  os_log_t v104;
  void (*v105)(char *, uint64_t);
  id v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  id v111;
  id v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  id v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  id v121;
  id v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  id v128;
  os_log_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  os_log_t v133;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SubmitCommandError();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (void **)((char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v126 - v12;
  v133 = a2;
  v14 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v15 = swift_dynamicCast();
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v15)
  {
    v16(v6, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    (*(void (**)(void **, char *, uint64_t))(v8 + 16))(v11, v13, v7);
    v17 = (*(uint64_t (**)(void **, uint64_t))(v8 + 88))(v11, v7);
    if (v17 == *MEMORY[0x1E0D9BE78])
    {
      (*(void (**)(void **, uint64_t))(v8 + 96))(v11, v7);
      v18 = *v11;
      if (one-time initialization token for ace != -1)
        swift_once();
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.ace);
      v20 = v18;
      v21 = a1;
      v22 = v18;
      v23 = v21;
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      v26 = v25;
      if (os_log_type_enabled(v24, v25))
      {
        v27 = swift_slowAlloc();
        v129 = (os_log_t)swift_slowAlloc();
        v133 = v129;
        *(_DWORD *)v27 = 136315394;
        swift_getErrorValue();
        LODWORD(v128) = v26;
        v28 = Error.localizedDescription.getter();
        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v27 + 12) = 2080;
        v30 = objc_msgSend(v23, sel_description);
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v130 = v8;
        v131 = v13;
        v32 = v31;
        v34 = v33;

        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v24, (os_log_type_t)v128, "Received an error <%s> for command <%s>", (uint8_t *)v27, 0x16u);
        v35 = v129;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v35, -1, -1);
        MEMORY[0x1B5E44758](v27, -1, -1);

LABEL_45:
        (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v7);
        return;
      }

      goto LABEL_48;
    }
    if (v17 == *MEMORY[0x1E0D9BE88])
    {
      (*(void (**)(void **, uint64_t))(v8 + 96))(v11, v7);
      v51 = *v11;
      if (one-time initialization token for ace != -1)
        swift_once();
      v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Logger.ace);
      v53 = v51;
      v54 = a1;
      v55 = v53;
      v56 = v54;
      v57 = v55;
      v58 = Logger.logObject.getter();
      v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, (os_log_type_t)v59))
      {
        v130 = v8;
        v131 = v13;
        v60 = swift_slowAlloc();
        v126 = swift_slowAlloc();
        v133 = (os_log_t)v126;
        *(_DWORD *)v60 = 136316418;
        v61 = objc_msgSend(v57, sel_aceId);
        v127 = v59;
        if (v61)
        {
          v62 = v61;
          v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v65 = v64;

        }
        else
        {
          v65 = 0xE500000000000000;
          v63 = 0x3E6C696E3CLL;
        }
        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 12) = 2080;
        v106 = objc_msgSend(v57, sel_refId);
        if (v106)
        {
          v107 = v106;
          v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v110 = v109;

        }
        else
        {
          v110 = 0xE500000000000000;
          v108 = 0x3E6C696E3CLL;
        }
        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v110, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 22) = 2048;
        v111 = objc_msgSend(v57, sel_errorCode);

        v132 = (uint64_t)v111;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v60 + 32) = 2080;
        v112 = objc_msgSend(v57, sel_reason);
        v128 = v56;
        v129 = v58;
        if (v112)
        {
          v113 = v112;
          v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v116 = v115;

        }
        else
        {
          v116 = 0xE500000000000000;
          v114 = 0x3E6C696E3CLL;
        }
        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v116, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 42) = 2080;
        v117 = objc_msgSend(v57, sel_description);
        v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v120 = v119;

        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v120, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 52) = 2080;
        v121 = v128;
        v122 = objc_msgSend(v128, sel_description);
        v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v125 = v124;

        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v125, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        v71 = v129;
        _os_log_impl(&dword_1B4BE6000, v129, (os_log_type_t)v127, "Received SACommandFailed: aceId=%s refId=%s errorCode=%ld, reason='%s', description='%s' for command <%s>", (uint8_t *)v60, 0x3Eu);
        v83 = (os_log_t)v126;
        goto LABEL_43;
      }

LABEL_48:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      return;
    }
    if (v17 == *MEMORY[0x1E0D9BE90])
    {
      (*(void (**)(void **, uint64_t))(v8 + 96))(v11, v7);
      v66 = *v11;
      if (one-time initialization token for ace != -1)
        swift_once();
      v67 = type metadata accessor for Logger();
      __swift_project_value_buffer(v67, (uint64_t)static Logger.ace);
      v68 = a1;
      v69 = v66;
      v70 = v68;
      v57 = v69;
      v71 = Logger.logObject.getter();
      v72 = static os_log_type_t.error.getter();
      v73 = v72;
      if (os_log_type_enabled(v71, v72))
      {
        v60 = swift_slowAlloc();
        v129 = (os_log_t)swift_slowAlloc();
        v133 = v129;
        *(_DWORD *)v60 = 136315394;
        LODWORD(v128) = v73;
        v74 = objc_msgSend(v57, sel_description);
        v130 = v8;
        v75 = v74;
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v131 = v13;
        v78 = v77;

        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 12) = 2080;
        v79 = objc_msgSend(v70, sel_description);
        v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v82 = v81;

        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v71, (os_log_type_t)v128, "Received unexpected command response type: %s for command <%s>", (uint8_t *)v60, 0x16u);
        v83 = v129;
LABEL_43:
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v83, -1, -1);
        MEMORY[0x1B5E44758](v60, -1, -1);

        goto LABEL_44;
      }

      goto LABEL_47;
    }
    if (v17 == *MEMORY[0x1E0D9BE80])
    {
      if (one-time initialization token for ace != -1)
        swift_once();
      v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.ace);
      v85 = a1;
      v71 = Logger.logObject.getter();
      v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v86))
      {
        v131 = v13;
        v87 = swift_slowAlloc();
        v88 = swift_slowAlloc();
        v133 = (os_log_t)v88;
        *(_DWORD *)v87 = 136315138;
        v129 = (os_log_t)(v87 + 4);
        v89 = objc_msgSend(v85, sel_description);
        v130 = v8;
        v90 = v89;
        v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v93 = v92;

        v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v93, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v71, v86, "Received unexpected nil response for command <%s>", (uint8_t *)v87, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v88, -1, -1);
        MEMORY[0x1B5E44758](v87, -1, -1);
LABEL_44:

        goto LABEL_45;
      }

LABEL_47:
      goto LABEL_48;
    }
    if (one-time initialization token for ace != -1)
      swift_once();
    v94 = type metadata accessor for Logger();
    __swift_project_value_buffer(v94, (uint64_t)static Logger.ace);
    v95 = a1;
    v96 = Logger.logObject.getter();
    v97 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v96, v97))
    {
      v131 = v13;
      v98 = (uint8_t *)swift_slowAlloc();
      v129 = (os_log_t)swift_slowAlloc();
      v133 = v129;
      *(_DWORD *)v98 = 136315138;
      v128 = v98 + 4;
      v99 = objc_msgSend(v95, sel_description);
      v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v130 = v8;
      v101 = v100;
      v103 = v102;

      v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v103, (uint64_t *)&v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v96, v97, "AceServiceInvokerImpl genericErrorLogger unknown case for command <%s>", v98, 0xCu);
      v104 = v129;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v104, -1, -1);
      MEMORY[0x1B5E44758](v98, -1, -1);

      v105 = *(void (**)(char *, uint64_t))(v130 + 8);
      v105(v131, v7);
    }
    else
    {

      v105 = *(void (**)(char *, uint64_t))(v8 + 8);
      v105(v13, v7);
    }
    v105((char *)v11, v7);
  }
  else
  {
    v16(v6, 1, 1, v7);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for SubmitCommandError?);
    if (one-time initialization token for ace != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.ace);
    v37 = a2;
    v38 = a1;
    v39 = a2;
    v40 = v38;
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc();
      v44 = swift_slowAlloc();
      v133 = (os_log_t)v44;
      *(_DWORD *)v43 = 136315394;
      swift_getErrorValue();
      v45 = Error.localizedDescription.getter();
      v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v43 + 12) = 2080;
      v47 = objc_msgSend(v40, sel_description);
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v50 = v49;

      v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, (uint64_t *)&v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v41, v42, "Received an error <%s> for command <%s>", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v44, -1, -1);
      MEMORY[0x1B5E44758](v43, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8SADialogCG_AGs5NeverOTg50140_s14SiriKitRuntime21AceServiceInvokerImplC22addMissingComponentIds33_6F702868F5EE7637FC7805F00DECC893LL_8setRefIdySo13SABaseCommandC_SbtFSo8D7CAJcfU_SbSo13SABaseCommandCTf1cn_nTf4nng_n(unint64_t a1, int a2, void *a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  id v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v4 = v3;
  v31 = a3;
  v34 = a2;
  v6 = type metadata accessor for UUID();
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_26;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x1E0DEE9D8];
    if (!v9)
      return result;
    v35 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v9 < 0)
    {
      __break(1u);
      return result;
    }
    v30[1] = v4;
    v11 = 0;
    while (v9 != v11)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x1B5E43B94](v11, a1);
      else
        v13 = *(id *)(a1 + 8 * v11 + 32);
      v4 = v13;
      v14 = objc_msgSend(v13, sel_aceId);
      if (!v14)
        goto LABEL_16;
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v17;

      swift_bridgeObjectRelease();
      v19 = HIBYTE(v18) & 0xF;
      if ((v18 & 0x2000000000000000) == 0)
        v19 = v16 & 0xFFFFFFFFFFFFLL;
      if (!v19)
      {
LABEL_16:
        UUID.init()();
        v20 = UUID.uuidString.getter();
        v22 = v21;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);
        v23 = (void *)MEMORY[0x1B5E432E8](v20, v22);
        swift_bridgeObjectRelease();
        objc_msgSend(v4, sel_setAceId_, v23);

      }
      if ((v34 & 1) != 0)
      {
        v24 = objc_msgSend(v4, sel_refId);
        if (!v24)
          goto LABEL_6;
        v25 = v24;
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v28 = v27;

        swift_bridgeObjectRelease();
        v29 = HIBYTE(v28) & 0xF;
        if ((v28 & 0x2000000000000000) == 0)
          v29 = v26 & 0xFFFFFFFFFFFFLL;
        if (!v29)
        {
LABEL_6:
          v12 = objc_msgSend(v31, sel_refId);
          objc_msgSend(v4, sel_setRefId_, v12);

        }
      }
      ++v11;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v9 == v11)
        return v35;
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized AceServiceInvokerImpl.serializeCommandAsPList(_:)(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = objc_msgSend(a1, sel_dictionary);
  if (!v1)
  {
    if (one-time initialization token for ace != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.ace);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "AceServiceInvoker failed to serialize command to dictionary", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    return 0;
  }
  v2 = v1;
  v17[0] = 0;
  v3 = objc_msgSend((id)objc_opt_self(), sel_dataWithPropertyList_format_options_error_, v1, 200, 0, v17);
  v4 = v17[0];
  if (!v3)
  {
    v10 = v4;
    v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for ace != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.ace);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "AceServiceInvoker failed to serialize command to pList", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    return 0;
  }
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

id specialized AceServiceInvokerImpl.wrapCommandForExecution(_:assistantId:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Class isa;
  id v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  char v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  id v48;
  uint64_t v49;

  if (a3)
  {
    if (one-time initialization token for ace != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.ace);
    v7 = a1;
    swift_bridgeObjectRetain_n();
    v8 = v7;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v46 = v6;
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v49 = v12;
      *(_DWORD *)v11 = 136315650;
      swift_bridgeObjectRetain();
      v48 = (id)a2;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v11 + 12) = 2080;
      v13 = objc_msgSend(v8, sel_refId);
      if (v13)
      {
        v14 = v13;
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;

      }
      else
      {
        v17 = 0xE500000000000000;
        v15 = 0x3E4C494E3CLL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2080;
      v23 = objc_msgSend(v8, sel_aceId);
      if (v23)
      {
        v24 = v23;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v27 = v26;

      }
      else
      {
        v27 = 0xE500000000000000;
        v25 = 0x3E4C494E3CLL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v9, v10, "AceServiceInvoker wrapping command for remote execution with assistantID: '%s', refID: '%s', aceID: '%s'", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v12, -1, -1);
      MEMORY[0x1B5E44758](v11, -1, -1);

      a2 = (uint64_t)v48;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88078]), sel_init);
    v29 = specialized AceServiceInvokerImpl.serializeCommandAsPList(_:)(v8);
    v31 = v30;
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v29, v31);
    objc_msgSend(v28, sel_setSerializedCommand_, isa);

    v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88398]), sel_init);
    v34 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v34 = a2 & 0xFFFFFFFFFFFFLL;
    if (v34)
    {
      v35 = (void *)MEMORY[0x1B5E432E8](a2, a3);
      objc_msgSend(v33, sel_setAssistantId_, v35);

    }
    objc_msgSend(v33, sel_setSiriEnabled_, 1, v46);
    objc_msgSend(v28, sel_setRemoteDevice_, v33);
    type metadata accessor for SiriEnvironment();
    if (static SiriEnvironment.forCurrentTask.getter())
    {
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v38 = 0;
        _os_log_impl(&dword_1B4BE6000, v36, v37, "CurrentTask has value for shouldFallbacktoAWDL", v38, 2u);
        MEMORY[0x1B5E44758](v38, -1, -1);
      }

      SiriEnvironment.aceServiceContext.getter();
      v39 = dispatch thunk of AceServiceContextProvider.shouldFallbacktoAWDL.getter();
      swift_release();
      swift_release();
    }
    else
    {
      v40 = Logger.logObject.getter();
      v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v42 = 0;
        _os_log_impl(&dword_1B4BE6000, v40, v41, "Setting shouldFallbacktoAWDL to true since currentTask is nil", v42, 2u);
        MEMORY[0x1B5E44758](v42, -1, -1);
      }

      v39 = 1;
    }
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v45 = 67109120;
      LODWORD(v49) = v39 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v43, v44, "AceServiceInvoker setting shouldFallbackOnAWDL: %{BOOL}d", v45, 8u);
      MEMORY[0x1B5E44758](v45, -1, -1);
    }

    objc_msgSend(v28, sel_setShouldFallbackOnAWDL_, v39 & 1);
    return v28;
  }
  else
  {
    if (one-time initialization token for ace != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.ace);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v20, "AceServiceInvoker wrapping command for remote execution skipped because of null assistantID", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }

    return a1;
  }
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t sub_1B4CB05E0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(a1, v4, v5, v7, v6);
}

uint64_t specialized AceServiceInvokerImpl.getResponse<A>(from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2[6] = a2;
  v3 = (_QWORD *)swift_task_alloc();
  v2[7] = v3;
  v2[8] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v3 = v2;
  v3[1] = specialized AceServiceInvokerImpl.getResponse<A>(from:);
  return Task.value.getter();
}

uint64_t specialized AceServiceInvokerImpl.getResponse<A>(from:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;

  v1 = *(void **)(v0 + 16);
  if (one-time initialization token for ace != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.ace);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v23 = v3;
  if (os_log_type_enabled(v4, v5))
  {
    v22 = v1;
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v24 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 32) = v22;
    v8 = v3;
    v9 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "AceServiceInvokerImpl received a response from command handling: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    v11 = v6;
    v1 = v22;
    MEMORY[0x1B5E44758](v11, -1, -1);
  }
  else
  {

  }
  v12 = *(_QWORD *)(v0 + 72);
  v13 = interpretResponse<A>(_:)(v1);
  if (v12)
  {

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = v13;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v18 = 138412290;
      *(_QWORD *)(v0 + 24) = v15;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v19 = v15;

      _os_log_impl(&dword_1B4BE6000, v16, v17, "Type-interpreted response: %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v19, -1, -1);
      MEMORY[0x1B5E44758](v18, -1, -1);
      v21 = v23;
    }
    else
    {

      v21 = v15;
      v16 = v23;
    }

    return (*(uint64_t (**))(v0 + 8))(v15);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v1 = v0;
  v1[1] = specialized AceServiceInvokerImpl.getResponse<A>(from:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;

  v1 = *(void **)(v0 + 16);
  if (one-time initialization token for ace != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.ace);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v23 = v3;
  if (os_log_type_enabled(v4, v5))
  {
    v22 = v1;
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v24 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 32) = v22;
    v8 = v3;
    v9 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "AceServiceInvokerImpl received a response from command handling: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    v11 = v6;
    v1 = v22;
    MEMORY[0x1B5E44758](v11, -1, -1);
  }
  else
  {

  }
  v12 = *(_QWORD *)(v0 + 64);
  v13 = specialized interpretResponse<A>(_:)(v1);
  if (v12)
  {

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = v13;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v18 = 138412290;
      *(_QWORD *)(v0 + 24) = v15;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v19 = v15;

      _os_log_impl(&dword_1B4BE6000, v16, v17, "Type-interpreted response: %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v19, -1, -1);
      MEMORY[0x1B5E44758](v18, -1, -1);
      v21 = v23;
    }
    else
    {

      v21 = v15;
      v16 = v23;
    }

    return (*(uint64_t (**))(v0 + 8))(v15);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in AceServiceInvokerImpl.submitAllSerial(_:_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t objectdestroy_45Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in AceServiceInvokerImpl.submitAllSerialWithoutRefId(_:_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if ((a4 & 1) == 0)
    return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v10 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
    return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
  }
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

void partial apply for closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff()(a1, v1);
}

void partial apply for closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed()(a1, v1);
}

void partial apply for closure #1 in AceServiceInvokerImpl.recentDialogs()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in AceServiceInvokerImpl.recentDialogs()(a1, v1);
}

void partial apply for closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t method lookup function for AceServiceInvokerImpl()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AceServiceInvokerImpl.__allocating_init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 176))(a1, a2, a3, a4, a5, a6, a7 & 1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyAE18RemoteConversation_pSgG_TG5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo15AFSpeechPackageCSg_TG5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime23InterruptibleTaskResultOyytG_TG5Tu))(a1, v4);
}

uint64_t sub_1B4CB14E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime20LinkExpansionContextV07SessionI0C_TG5Tu))(a1, v4);
}

uint64_t sub_1B4CB1654()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(int a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(Bool, Error?), Never>);
  return closure #1 in closure #1 in AceServiceInvokerImpl.submitExternalActivationRequest(withRequestInfo:)(a1, a2);
}

uint64_t sub_1B4CB16B0()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<[RecentDialog], Never>);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.recentDialogs()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[RecentDialog], Never>);
  return closure #1 in closure #1 in AceServiceInvokerImpl.recentDialogs()();
}

uint64_t sub_1B4CB16FC()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1B4CB1748()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
}

uint64_t objectdestroy_115Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_1B4CB17B0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(a1, a2, v6, v7, v8);
}

uint64_t sub_1B4CB18E0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type SerialSubmissionError and conformance SerialSubmissionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SerialSubmissionError and conformance SerialSubmissionError;
  if (!lazy protocol witness table cache variable for type SerialSubmissionError and conformance SerialSubmissionError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SerialSubmissionError, &unk_1E68424E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SerialSubmissionError and conformance SerialSubmissionError);
  }
  return result;
}

void outlined consume of SABaseCommand??(id a1)
{
  if (a1 != (id)1)

}

void outlined consume of Result<SABaseCommand?, Error>(id a1)
{

}

void partial apply for closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(a1, *(void **)(v1 + 16), *(_QWORD **)(v1 + 24), *(void **)(v1 + 32), *(_BYTE *)(v1 + 40));
}

id outlined copy of Result<SABaseCommand?, Error>(id a1)
{
  return a1;
}

uint64_t objectdestroy_161Tm()
{
  uint64_t v0;

  swift_release();
  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 32));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(void *a1, void *a2)
{
  uint64_t v2;

  closure #1 in closure #2 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in AceServiceInvokerImpl.submitToRemote<A>(_:_:completion:)(a1, v5, v6, v4);
}

uint64_t sub_1B4CB1ACC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  outlined consume of Result<SABaseCommand?, Error>(*(id *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AceServiceInvokerImpl.createSubmissionTask<A>(for:options:expectingResponseOfType:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_BYTE *)(v1 + 56);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v7[2] = a1;
  v8 = (_QWORD *)swift_task_alloc();
  v7[3] = v8;
  *v8 = v7;
  v8[1] = closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:);
  return AceServiceInvokerImpl.performSubmit(_:bargeInResult:)(v4, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanionWithoutRefId<A>(_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(a1, v5, v6, v4);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in AceServiceInvokerImpl.submitToCompanion<A>(_:completion:)(a1, v5, v6, v4);
}

uint64_t sub_1B4CB1C7C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(void *a1, void *a2)
{
  closure #1 in closure #1 in closure #2 in AceServiceInvokerImpl.publish(executionOutput:)(a1, a2);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1B5E44668](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submitWithoutRefId<A>(_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(a1, v5, v6, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in AceServiceInvokerImpl.submit<A>(_:completion:)(a1, v5, v6, v4);
}

uint64_t sub_1B4CB1E40()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for closure #1 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(void *a1)
{
  uint64_t v1;

  return specialized closure #1 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(a1, *(_BYTE *)(v1 + 16), *(void **)(v1 + 24));
}

void *specialized closure #1 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(void *a1, char a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v28;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, sel_aceId);
  if (!v10)
    goto LABEL_5;
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  swift_bridgeObjectRelease();
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = v12 & 0xFFFFFFFFFFFFLL;
  if (!v15)
  {
LABEL_5:
    UUID.init()();
    v16 = UUID.uuidString.getter();
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v19 = (void *)MEMORY[0x1B5E432E8](v16, v18);
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setAceId_, v19);

  }
  if ((a2 & 1) != 0)
  {
    v20 = objc_msgSend(a1, sel_refId);
    if (!v20)
      goto LABEL_11;
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

    swift_bridgeObjectRelease();
    v25 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v25 = v22 & 0xFFFFFFFFFFFFLL;
    if (!v25)
    {
LABEL_11:
      v26 = objc_msgSend(a3, sel_refId);
      objc_msgSend(a1, sel_setRefId_, v26);

    }
  }
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for AceServiceInvokerImpl.AceSubmitOptions(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AceServiceInvokerImpl.AceSubmitOptions(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AceServiceInvokerImpl.AceSubmitOptions(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AceServiceInvokerImpl.AceSubmitOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AceServiceInvokerImpl.AceSubmitOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for AceServiceInvokerImpl.AceSubmitOptions(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for AceServiceInvokerImpl.AceSubmitOptions(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AceServiceInvokerImpl.AceSubmitOptions()
{
  return &type metadata for AceServiceInvokerImpl.AceSubmitOptions;
}

_QWORD *initializeBufferWithCopyOfBuffer for SerialSubmissionError(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  v5 = v3;
  v6 = v4;
  a1[1] = v4;
  return a1;
}

void destroy for SerialSubmissionError(id *a1)
{

}

uint64_t assignWithCopy for SerialSubmissionError(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = v7;
  v9 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;

  return a1;
}

uint64_t assignWithTake for SerialSubmissionError(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for SerialSubmissionError(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SerialSubmissionError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SerialSubmissionError()
{
  return &unk_1E68424E8;
}

uint64_t SiriXActionCandidate.init(fromCamActionCandidate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriXActionCandidate?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CamParse();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriXParse?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SiriXParse();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActionCandidate.parse.getter();
  SiriXParse.init(fromCamParse:)(v9, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v17 = type metadata accessor for ActionCandidate();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
    v18 = &demangling cache variable for type metadata for SiriXParse?;
    v19 = (uint64_t)v12;
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?(v19, v18);
    v24 = type metadata accessor for SiriXActionCandidate();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 1, 1, v24);
  }
  v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  MEMORY[0x1E0C80A78](v20);
  *(&v26 - 2) = a1;
  *(&v26 - 1) = (uint64_t)v16;
  SiriXActionCandidate.init(build:)();
  v21 = type metadata accessor for ActionCandidate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v22 = type metadata accessor for SiriXActionCandidate();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v6, 1, v22))
  {
    v18 = &demangling cache variable for type metadata for SiriXActionCandidate?;
    v19 = (uint64_t)v6;
    goto LABEL_5;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a2, v6, v22);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(a2, 0, 1, v22);
}

uint64_t SiriXParse.init(fromCamParse:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;

  v68 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriXUSOParse?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v64 = (char *)&v60 - v7;
  v8 = type metadata accessor for SiriXUSOParse();
  v63 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v62 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CamUSOParse();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v60 - v15;
  v17 = type metadata accessor for CamParse();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v60 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v61 = (char *)&v60 - v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v60 - v23;
  v25 = type metadata accessor for SiriXParse();
  v66 = *(_QWORD *)(v25 - 8);
  v67 = v25;
  MEMORY[0x1E0C80A78](v25);
  v65 = (char **)((char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *(char **)(v18 + 16);
  v69 = a1;
  v28 = a1;
  v29 = v27;
  ((void (*)(char *, char *, uint64_t))v27)(v24, v28, v17);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v24, v17);
  if (v30 == *MEMORY[0x1E0D97A40])
  {
    v31 = *(void (**)(char *, uint64_t))(v18 + 96);
    v61 = (char *)v17;
    v31(v24, v17);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v24, v10);
    v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    MEMORY[0x1E0C80A78](v32);
    *(&v60 - 2) = v14;
    SiriXUSOParse.init(build:)();
    v33 = *(void (**)(char *, uint64_t))(v11 + 8);
    v33(v14, v10);
    v34 = v63;
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
    if (v35(v6, 1, v8))
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for SiriXUSOParse?);
      v36 = 1;
      v37 = v34;
      v39 = v67;
      v38 = v68;
      v40 = (uint64_t)v64;
    }
    else
    {
      v40 = (uint64_t)v64;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v64, v6, v8);
      v36 = 0;
      v37 = v34;
      v39 = v67;
      v38 = v68;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v40, v36, 1, v8);
    (*(void (**)(char *, char *))(v18 + 8))(v69, v61);
    v33(v16, v10);
    if (v35((char *)v40, 1, v8) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v40, (uint64_t *)&demangling cache variable for type metadata for SiriXUSOParse?);
      v45 = 1;
      v44 = v66;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v38, v45, 1, v39);
    }
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
    v47 = v62;
    v46(v62, v40, v8);
    v41 = v65;
    v46((char *)v65, (uint64_t)v47, v8);
    v42 = (unsigned int *)MEMORY[0x1E0D9E570];
    goto LABEL_12;
  }
  if (v30 == *MEMORY[0x1E0D97A38])
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v69, v17);
    (*(void (**)(char *, uint64_t))(v18 + 96))(v24, v17);
    v41 = v65;
    *v65 = *(_QWORD *)v24;
    v42 = (unsigned int *)MEMORY[0x1E0D9E568];
    v39 = v67;
    v38 = v68;
LABEL_12:
    v44 = v66;
    goto LABEL_13;
  }
  v43 = v69;
  if (v30 == *MEMORY[0x1E0D97A48])
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v69, v17);
    v42 = (unsigned int *)MEMORY[0x1E0D9E578];
    v39 = v67;
    v38 = v68;
    v41 = v65;
    v44 = v66;
LABEL_13:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v44 + 104))(v41, *v42, v39);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v44 + 32))(v38, v41, v39);
    v45 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v38, v45, 1, v39);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)static Logger.executor);
  v50 = v61;
  ((void (*)(char *, char *, uint64_t))v29)(v61, v43, v17);
  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v64 = v29;
    v53 = (uint8_t *)swift_slowAlloc();
    v54 = swift_slowAlloc();
    v71 = v54;
    *(_DWORD *)v53 = 136315138;
    v65 = v53 + 4;
    ((void (*)(char *, char *, uint64_t))v64)(v60, v50, v17);
    v55 = String.init<A>(describing:)();
    v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v57 = v17;
    v58 = *(void (**)(char *, uint64_t))(v18 + 8);
    v58(v50, v57);
    _os_log_impl(&dword_1B4BE6000, v51, v52, "Unknown CamParse type: %s", v53, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v54, -1, -1);
    MEMORY[0x1B5E44758](v53, -1, -1);

    v59 = v69;
  }
  else
  {

    v57 = v17;
    v58 = *(void (**)(char *, uint64_t))(v18 + 8);
    v58(v50, v57);
    v59 = v43;
  }
  v58(v59, v57);
  v58(v24, v57);
  v45 = 1;
  v39 = v67;
  v38 = v68;
  v44 = v66;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v38, v45, 1, v39);
}

uint64_t closure #1 in SiriXActionCandidate.init(fromCamActionCandidate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriXParse?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActionCandidate.flowHandlerId.getter();
  SiriXActionCandidate.Builder.flowHandlerId.setter();
  v10 = type metadata accessor for SiriXParse();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a3, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  SiriXActionCandidate.Builder.parse.setter();
  ActionCandidate.affinityScore.getter();
  SiriXActionCandidate.Builder.affinityScore.setter();
  ActionCandidate.loggingId.getter();
  v12 = type metadata accessor for UUID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 0, 1, v12);
  return SiriXActionCandidate.Builder.loggingId.setter();
}

uint64_t partial apply for closure #1 in SiriXActionCandidate.init(fromCamActionCandidate:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SiriXActionCandidate.init(fromCamActionCandidate:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t SiriXUSOParse.init(fromCamUsoParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriXUSOParse?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a1;
  SiriXUSOParse.init(build:)();
  v7 = type metadata accessor for CamUSOParse();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  v8 = type metadata accessor for SiriXUSOParse();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for SiriXUSOParse?);
    v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(a2, v6, v8);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v10, 1, v8);
}

uint64_t closure #1 in SiriXUSOParse.init(fromCamUsoParse:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  CamUSOParse.userParse.getter();
  v4 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
  SiriXUSOParse.Builder.userParse.setter();
  CamUSOParse.parserIdentifier.getter();
  SiriXUSOParse.Builder.parserIdentifier.setter();
  CamUSOParse.appBundleId.getter();
  SiriXUSOParse.Builder.appBundleId.setter();
  CamUSOParse.groupIndex.getter();
  return SiriXUSOParse.Builder.groupIndex.setter();
}

uint64_t partial apply for closure #1 in SiriXUSOParse.init(fromCamUsoParse:)()
{
  return closure #1 in SiriXUSOParse.init(fromCamUsoParse:)();
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v6, (uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (DateTime.DateTimeRange.DefinedDateTimeRange, DateTime), &demangling cache variable for type metadata for _DictionaryStorage<DateTime.DateTimeRange.DefinedDateTimeRange, DateTime>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D98828]);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, StringKeyedValue>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, StringKeyedValue));
    v14 = *v5;
    v15 = v5[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for StringKeyedValue();
    result = outlined init with take of StringKeyedValue(v9, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, (uint64_t (*)(_QWORD))type metadata accessor for StringKeyedValue);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, [UUID]), &demangling cache variable for type metadata for _DictionaryStorage<UUID, [UUID]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Sendable));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (ConversationSessionKey, Sendable));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for ConversationSessionKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = (unint64_t)outlined init with take of Any(v9, (_OWORD *)(v7[7] + 32 * v16));
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, SASRecognition>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, ()));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, @MessageBusActor (_:_:)>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, ()));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_OWORD *)(v7[7] + 16 * v16) = *(_OWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UserID, ContextUpdater), &demangling cache variable for type metadata for _DictionaryStorage<UserID, ContextUpdater>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D9EF80]);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ConversationMessageDispatchingBridgeBase<ConversationBridge>.MessageHandlerBase>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : ConversationMessageDispatchingBridgeBase<ConversationBridge>.CommandHandlerBase]>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Any?));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Any?>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (ConversationSessionKey, Any?));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for ConversationSessionKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v9, v7[7] + 32 * v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UserID, Int), &demangling cache variable for type metadata for _DictionaryStorage<UserID, Int>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D9EF80]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UserID, AFSpeechPackage), &demangling cache variable for type metadata for _DictionaryStorage<UserID, AFSpeechPackage>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D9EF80]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SMTTCUState>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyEncodable>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [LNSystemProtocol : [LinkActionMetadata]]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocol, [LinkActionMetadata]>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, SAPerson>);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = static _DictionaryStorage.allocate(capacity:)();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v16, (uint64_t)v9, a2);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if ((v19 & 1) != 0)
      break;
    v20 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = v11[6];
    v22 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, v9, v22);
    *(_QWORD *)(v11[7] + 8 * v20) = *(_QWORD *)&v9[v13];
    v23 = v11[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t (*v30)(_QWORD);
  uint64_t (*v31)(char *);

  v30 = a5;
  v31 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)();
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  v15 = *(int *)(v8 + 48);
  v16 = a1;
  v17 = v12 + 64;
  v18 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v29[1] = v16;
  v19 = v16 + v18;
  v20 = *(_QWORD *)(v9 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v19, (uint64_t)v11, a2);
    result = v31(v11);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v24 = v13[6];
    v25 = v30(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v23, v11, v25);
    *(_QWORD *)(v13[7] + 8 * v23) = *(_QWORD *)&v11[v15];
    v26 = v13[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v13[2] = v28;
    v19 += v20;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 48);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 2);
    v7 = (uint64_t)*(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    v9 = v8;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  _BYTE *i;
  uint64_t v12;
  int v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void (*v19)(_QWORD *);
  uint64_t v20;
  _QWORD v21[2];
  int v22;
  char v23;
  uint64_t v24;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v18 = type metadata accessor for USOParse();
  v6 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = v24;
    for (i = (_BYTE *)(a3 + 52); ; i += 24)
    {
      v12 = *(_QWORD *)(i - 12);
      v13 = *((_DWORD *)i - 1);
      v14 = *i;
      v21[0] = *(_QWORD *)(i - 20);
      v21[1] = v12;
      v22 = v13;
      v23 = v14;
      swift_bridgeObjectRetain();
      v19(v21);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v24 = v10;
      v16 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v10 = v24;
      }
      *(_QWORD *)(v10 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, v8, v18);
      if (!--v9)
        return v10;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime26ConversationHandlerLocatorC06ScoredH0VG_10Foundation4UUIDV4uuid_AJ06scoredH0ts5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = v21;
    v12 = *(_QWORD *)(type metadata accessor for ConversationHandlerLocator.ScoredHandler() - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v18 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v13 += v18;
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDV4uuid_7SiriCam15ActionCandidateV06actionJ0tG_ALs5NeverOTg504_s14g12KitRuntime15i77GeneratorC08generateD10Candidates4from02rrG019appShortcutProviderSay0A3Cam0D9j29VGAA21ConversationUserInputC_W177A28ReferenceResolutionDataModel11RRCandidateVG0aB4Flow03AppK9Providing_ptYaFAJ10Foundation4UUIDV4uuid_AJ06actionN0t_tcfu1_33_40673c41111a6ef0d8501a99c5a3b4d4AvW_AjXtAJTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;

  v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  v3 = *(_QWORD *)(v42 - 8);
  v4 = MEMORY[0x1E0C80A78](v42);
  v41 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v34 - v6;
  v7 = type metadata accessor for ActionCandidate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v34[1] = v1;
    v45 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v38 = *(_QWORD *)(v3 + 72);
    v14 = type metadata accessor for UUID();
    v36 = *(_QWORD *)(v14 - 8);
    v37 = v14;
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
    v39 = v10;
    v15 = v14;
    do
    {
      v43 = v13;
      v44 = v11;
      v16 = v42;
      v17 = *(int *)(v42 + 48);
      v18 = v10;
      v19 = v40;
      v20 = &v40[v17];
      v21 = v13 + v17;
      v35(v40, v13, v15);
      v22 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v22(v20, v21, v7);
      v23 = *(int *)(v16 + 48);
      v24 = v8;
      v25 = (uint64_t)v41;
      v26 = &v41[v23];
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v41, v19, v15);
      v27 = v24;
      v28 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      v28(v26, v20, v7);
      v22(v18, (uint64_t)v26, v7);
      outlined destroy of ReferenceResolutionClientProtocol?(v25, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      v12 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v45;
      }
      v30 = *(_QWORD *)(v12 + 16);
      v29 = *(_QWORD *)(v12 + 24);
      v8 = v27;
      v31 = v44;
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v12 = v45;
      }
      *(_QWORD *)(v12 + 16) = v30 + 1;
      v32 = v12
          + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))
          + *(_QWORD *)(v27 + 72) * v30;
      v10 = v39;
      v28((char *)v32, v39, v7);
      v45 = v12;
      v13 = v43 + v38;
      v11 = v31 - 1;
    }
    while (v11);
  }
  return v12;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS11appBundleId_SDySSypG8userDatatG_14SiriKitRuntime09ParseUserH10AttachmentVs5NeverOTg5(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void (*v19)(_QWORD *);
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for ParseUserDataAttachment();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = v22;
    for (i = (uint64_t *)(a3 + 48); ; i += 3)
    {
      v13 = *(i - 1);
      v14 = *i;
      v21[0] = *(i - 2);
      v21[1] = v13;
      v21[2] = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19(v21);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = v11;
      v16 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v11 = v22;
      }
      *(_QWORD *)(v11 + 16) = v16 + 1;
      outlined init with take of StringKeyedValue((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, (uint64_t (*)(_QWORD))type metadata accessor for ParseUserDataAttachment);
      if (!--v10)
        return v11;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t (*v29)(char *);
  uint64_t v30;

  v29 = a1;
  v6 = type metadata accessor for AppShortcutGeneralizedInvocation();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(a3 + 56);
  v27 = a3 + 56;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v28 = (unint64_t)(v14 + 63) >> 6;
  v30 = a3;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v28)
      goto LABEL_27;
    v22 = *(_QWORD *)(v27 + 8 * v18);
    if (!v22)
      break;
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    v24 = v29(v10);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      swift_release();
      return a2 & 1;
    }
    v25 = v24;
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v25 & 1) != 0)
    {
      a2 = 1;
      goto LABEL_28;
    }
  }
  v23 = v18 + 1;
  if (v18 + 1 >= v28)
    goto LABEL_27;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 2;
  if (v18 + 2 >= v28)
    goto LABEL_27;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 3;
  if (v18 + 3 >= v28)
    goto LABEL_27;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 4;
  if (v18 + 4 >= v28)
  {
LABEL_27:
    a2 = 0;
LABEL_28:
    swift_release();
    return a2 & 1;
  }
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
  {
LABEL_17:
    v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v28)
      goto LABEL_27;
    v22 = *(_QWORD *)(v27 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t ParseUserDataAttachment.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ParseUserDataAttachment.parse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ParseUserDataAttachment() + 20);
  v4 = type metadata accessor for Parse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ParseUserDataAttachment()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ParseUserDataAttachment;
  if (!type metadata singleton initialization cache for ParseUserDataAttachment)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ParseUserDataAttachment.userData.getter()
{
  type metadata accessor for ParseUserDataAttachment();
  return swift_bridgeObjectRetain();
}

uint64_t ParseUserDataAttachment.init(parse:userData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  UUID.init()();
  v6 = type metadata accessor for ParseUserDataAttachment();
  v7 = a3 + *(int *)(v6 + 20);
  v8 = type metadata accessor for Parse();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a1, v8);
  *(_QWORD *)(a3 + *(int *)(v6 + 24)) = a2;
  return result;
}

uint64_t ActionGenerator.conversationHandlerLocator.getter()
{
  return swift_retain();
}

void *ActionGenerator.dummySnlcFlowHandlerId.unsafeMutableAddressor()
{
  return &static ActionGenerator.dummySnlcFlowHandlerId;
}

unint64_t static ActionGenerator.dummySnlcFlowHandlerId.getter()
{
  return 0xD000000000000013;
}

void *ActionGenerator.kIsEnabledAppShortcutKey.unsafeMutableAddressor()
{
  return &static ActionGenerator.kIsEnabledAppShortcutKey;
}

unint64_t static ActionGenerator.kIsEnabledAppShortcutKey.getter()
{
  return 0xD000000000000014;
}

_QWORD *ActionGenerator.__allocating_init(conversationHandlerLocator:linkExpansionContextBuilder:appShortcutExpansionContextBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[3] = a3;
  result[4] = a1;
  result[2] = a2;
  return result;
}

_QWORD *ActionGenerator.init(conversationHandlerLocator:linkExpansionContextBuilder:appShortcutExpansionContextBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a3;
  v3[4] = a1;
  v3[2] = a2;
  return v3;
}

Swift::Void __swiftcall ActionGenerator.newSessionStarted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _BYTE v26[24];
  ValueMetadata *v27;
  unint64_t v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 46;
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v5 = static SiriKitFlowFeatureFlagDefinitions.forceEnabled;
  if (*(_QWORD *)(static SiriKitFlowFeatureFlagDefinitions.forceEnabled + 16)
    && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(), (v7 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 56) + v6) != 1)
      goto LABEL_11;
  }
  else
  {
    v27 = &type metadata for SiriKitFlowFeatureFlagDefinitions;
    v28 = lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions();
    v8 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    if ((v8 & 1) == 0)
      goto LABEL_11;
  }
  v9 = *(_QWORD *)(v1 + 16);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  v11 = one-time initialization token for shared;
  swift_retain();
  if (v11 != -1)
    swift_once();
  swift_beginAccess();
  v12 = static MessageBusActor.shared;
  v13 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v9;
  swift_retain();
  *(_QWORD *)(v9 + 104) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime20LinkExpansionContextV07SessionI0C_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in LinkExpansionContextBuilder.newSessionStarted(), (uint64_t)v14);
  swift_release();
LABEL_11:
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v15 = static LinkFeature.forceEnabled;
  if (*(_QWORD *)(static LinkFeature.forceEnabled + 16)
    && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(), (v17 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v15 + 56) + v16) != 1)
      return;
  }
  else
  {
    v27 = &type metadata for LinkFeature;
    v28 = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    v18 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    if ((v18 & 1) == 0)
      return;
  }
  v19 = *(_QWORD *)(v1 + 24);
  if (one-time initialization token for executor != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1B4BE6000, v21, v22, "[AppShortcutExpansionContext] New session started", v23, 2u);
    MEMORY[0x1B5E44758](v23, -1, -1);
  }

  type metadata accessor for ConditionalIntentMetadataStore();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = MEMORY[0x1E0DEE9E0];
  swift_beginAccess();
  *(_QWORD *)(v19 + 16) = v24;
  swift_release();
}

Swift::Void __swiftcall ActionGenerator.newTurnStarted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _BYTE v21[24];
  ValueMetadata *v22;
  unint64_t v23;

  v1 = v0;
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v2 = static SiriKitFlowFeatureFlagDefinitions.forceEnabled;
  if (*(_QWORD *)(static SiriKitFlowFeatureFlagDefinitions.forceEnabled + 16)
    && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(), (v4 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v2 + 56) + v3) != 1)
      goto LABEL_13;
  }
  else
  {
    v22 = &type metadata for SiriKitFlowFeatureFlagDefinitions;
    v23 = lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions();
    v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    if ((v5 & 1) == 0)
      goto LABEL_13;
  }
  v6 = *(_QWORD *)(v1 + 16);
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)kLogger);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1B4BE6000, v8, v9, "[LinkExpansionContext] New turn started", v10, 2u);
    MEMORY[0x1B5E44758](v10, -1, -1);
  }

  swift_beginAccess();
  *(_QWORD *)(v6 + 16) = 0;
  swift_release();
LABEL_13:
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v11 = static LinkFeature.forceEnabled;
  if (*(_QWORD *)(static LinkFeature.forceEnabled + 16)
    && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(), (v13 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v11 + 56) + v12) != 1)
      return;
  }
  else
  {
    v22 = &type metadata for LinkFeature;
    v23 = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    v14 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    if ((v14 & 1) == 0)
      return;
  }
  v15 = *(_QWORD **)(v1 + 24);
  if (one-time initialization token for executor != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v17, v18, "[AppShortcutExpansionContext] New turn started", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  swift_beginAccess();
  v20 = v15[3];
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = 0;
  outlined consume of AppShortcutExpansionContext?(v20);
}

uint64_t ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v3[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[ActionGenerator] Beginning building the AppShortcutExpansionContext", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = v0[14];

  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_38:
    v0[17] = v12;
    v0[18] = *(_QWORD *)(v0[15] + 24);
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v0[19] = static MessageBusActor.shared;
    swift_retain();
    return swift_task_switch();
  }
  v7 = v0[14];
  v8 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  v9 = v7 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v10 = *(_QWORD *)(v8 + 72);
  v11 = swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v13 = MEMORY[0x1B5E3FA6C](v11);
    v14 = *(_QWORD *)(v13 + 16);
    v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    v16 = *(_QWORD *)(v15 - 8);
    if (v14)
    {
      (*(void (**)(_QWORD, unint64_t, uint64_t))(v16 + 16))(v0[16], v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v15);
      v17 = 0;
    }
    else
    {
      v17 = 1;
    }
    v18 = v0[16];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v18, v17, 1, v15);
    swift_bridgeObjectRelease();
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v15);
    v20 = v0[16];
    if (v19 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[16], &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      v21 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
      if (v21)
      {
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        swift_release();
        if (v0[5])
        {
          type metadata accessor for UsoTask_run_common_VoiceCommand();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v22 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
            swift_release();
            swift_release();
            goto LABEL_21;
          }
          swift_release();
        }
        else
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 2), (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
      }
    }
    v22 = MEMORY[0x1E0DEE9D8];
LABEL_21:
    v23 = *(_QWORD *)(v22 + 16);
    v24 = v12[2];
    v25 = v24 + v23;
    if (__OFADD__(v24, v23))
      break;
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v25 <= v12[3] >> 1)
    {
      if (*(_QWORD *)(v22 + 16))
        goto LABEL_30;
    }
    else
    {
      if (v24 <= v25)
        v27 = v24 + v23;
      else
        v27 = v24;
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v27, 1, v12, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppShortcutTarget>);
      if (*(_QWORD *)(v22 + 16))
      {
LABEL_30:
        v28 = v12[2];
        if ((v12[3] >> 1) - v28 < v23)
          goto LABEL_43;
        v29 = (unint64_t)&v12[5 * v28 + 4];
        if (v22 + 32 < v29 + 40 * v23 && v29 < v22 + 32 + 40 * v23)
          return _fatalErrorMessage(_:_:file:line:flags:)();
        swift_arrayInitWithCopy();
        if (v23)
        {
          v30 = v12[2];
          v31 = __OFADD__(v30, v23);
          v32 = v30 + v23;
          if (v31)
            goto LABEL_44;
          v12[2] = v32;
        }
        goto LABEL_8;
      }
    }
    if (v23)
      goto LABEL_42;
LABEL_8:
    v11 = swift_bridgeObjectRelease();
    v9 += v10;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 144);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v5 = v1 + 32;
    v4 = *(_QWORD *)(v1 + 32);
    v3 = *(_QWORD *)(v5 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v4, v3);
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v7;
    *v7 = v0;
    v7[1] = ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:);
    return AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 136));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD **)(v0 + 144);
  swift_release();
  v5 = v4[3];
  v4[3] = v3;
  v4[4] = v1;
  v4[5] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined consume of AppShortcutExpansionContext?(v5);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v6, v7);
}

uint64_t ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

BOOL closure #3 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *);
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int *v59;
  void (*v60)(char *, uint64_t, uint64_t);
  void (*v61)(char *);
  uint64_t v62;

  v62 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  v6 = MEMORY[0x1E0C80A78](v5);
  v58 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v55 = (char *)&v51 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v51 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v51 - v13;
  v59 = (int *)v12;
  v15 = *(int *)(v12 + 48);
  v16 = (char *)&v51 + v15 - v13;
  v17 = a1 + v15;
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(char *))(v19 + 16);
  v57 = a1;
  v61 = v20;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v14, a1, v18);
  v21 = type metadata accessor for ActionCandidate();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v56 = v17;
  v60 = v23;
  v23(v16, v17, v21);
  v53 = a3;
  v24 = *a3;
  if (!*(_QWORD *)(*a3 + 16) || (v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14), (v26 & 1) == 0))
  {
    v27 = *(void (**)(char *, uint64_t))(v22 + 8);
    v27(v16, v21);
    v28 = *(void (**)(char *, uint64_t))(v19 + 8);
    v28(v14, v18);
    v29 = v59;
    goto LABEL_9;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
  v27 = *(void (**)(char *, uint64_t))(v22 + 8);
  v27(v16, v21);
  v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  v28(v14, v18);
  v29 = v59;
  v30 = v59[12];
  v31 = (uint64_t)v54;
  v32 = &v54[v30];
  v33 = v62 + v30;
  v61(v54);
  v60(v32, v33, v21);
  v34 = *v53;
  if (!*(_QWORD *)(*v53 + 16) || (v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v36 & 1) == 0))
  {
    v27(v32, v21);
    v28((char *)v31, v18);
    goto LABEL_9;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v35);
  v27(v32, v21);
  v28((char *)v31, v18);
  if (v52 == v37)
  {
LABEL_9:
    v59 = (int *)v28;
    v39 = v55;
    v40 = &v55[v29[12]];
    v41 = v27;
    v42 = v61;
    ((void (*)(char *, uint64_t, uint64_t))v61)(v55, v57, v18);
    v43 = v60;
    v60(v40, v56, v21);
    v57 = ActionCandidate.affinityScore.getter();
    v41(v40, v21);
    v44 = v29[12];
    v45 = v58;
    v46 = &v58[v44];
    v47 = v62 + v44;
    v42(v58);
    v43(v46, v47, v21);
    v48 = ActionCandidate.affinityScore.getter();
    v41(v46, v21);
    v38 = v48 < v57;
    v49 = (void (*)(char *, uint64_t))v59;
    ((void (*)(char *, uint64_t))v59)(v45, v18);
    v49(v39, v18);
    return v38;
  }
  return v52 < v37;
}

uint64_t closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v44 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AppShortcutInvocation?);
  MEMORY[0x1E0C80A78](v3);
  v45 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppShortcutExactInvocation();
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  MEMORY[0x1E0C80A78](v5);
  v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v7);
  v47 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v46 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v43 - v16;
  v18 = type metadata accessor for Siri_Nlu_External_Parser();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a1;
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, *MEMORY[0x1E0D9F0F8], v11);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F178]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v22 = v54;
  v23 = v53;
  v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v15, v11);
  v25 = ((uint64_t (*)(char *, uint64_t))v24)(v17, v11);
  if (v22 != v23)
    goto LABEL_10;
  v43 = v10;
  v27 = v46;
  v26 = (uint64_t)v47;
  v29 = v48;
  v28 = v49;
  v30 = v50;
  v31 = MEMORY[0x1B5E3FA6C](v25);
  if (*(_QWORD *)(v31 + 16))
  {
    v32 = v52;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16))(v26, v31 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)), v52);
    v33 = 0;
    v34 = v30;
  }
  else
  {
    v33 = 1;
    v34 = v30;
    v32 = v52;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, v33, 1, v32);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v26, 1, v32) == 1)
  {
    v35 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
LABEL_9:
    outlined destroy of ReferenceResolutionClientProtocol?(v26, v35);
LABEL_10:
    v39 = 1;
    return v39 & 1;
  }
  v36 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v43, v26, v32);
  LOBYTE(v54) = 1;
  v26 = (uint64_t)v45;
  Siri_Nlu_External_UserDialogAct.extractAppShortcutInvocation(groupIndex:)();
  v37 = type metadata accessor for AppShortcutInvocation();
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v26, 1, v37) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v32);
    v35 = (uint64_t *)&demangling cache variable for type metadata for AppShortcutInvocation?;
    goto LABEL_9;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v38 + 88))(v26, v37) == *MEMORY[0x1E0D9C068])
  {
    (*(void (**)(uint64_t, uint64_t))(v38 + 96))(v26, v37);
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 32))(v29, v26, v34);
    MEMORY[0x1E0C80A78](v41);
    *(&v43 - 2) = v29;
    v42 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in closure #3 in ActionGenerator.dedupeAppShortcuts(parses:), (char)(&v43 - 4), v44);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v43, v52);
    v39 = v42 ^ 1;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v34);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v43, v52);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v26, v37);
    v39 = 1;
  }
  return v39 & 1;
}

uint64_t closure #1 in closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;

  v0 = AppShortcutGeneralizedInvocation.extractedActionIdentifier.getter();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    v4 = AppShortcutGeneralizedInvocation.bundleId.getter();
    v6 = v5;
    if (v4 == AppShortcutExactInvocation.bundleId.getter() && v6 == v7)
      v8 = 1;
    else
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v2 == AppShortcutExactInvocation.actionIdentifier.getter() && v3 == v10)
      v11 = 1;
    else
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v8 & v11;
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t ActionGenerator.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ActionGenerator.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized getContiguousArrayStorageType<A>(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestMessageBase.Type);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>;
  else
    v2 = (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestMessageBase.Type>;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = *(_QWORD *)(v20 + 56);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, v11, a1, v20);
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for Parse();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UserID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
        return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v12);
        result = swift_release();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F520], (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588], (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v12);
        result = swift_release();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v18[7] + v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(v18 + 56);

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CodingUserInfoKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        return outlined init with take of Any(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, (uint64_t)a1, v20);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ConversationSessionKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        return outlined init with take of Any(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, (uint64_t)a1, v20);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_bridgeObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_release();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v10 = v7;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);
        result = swift_release();
        *(_QWORD *)(v24 + 8 * v17) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(_QWORD), void (*a8)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  char v29;

  v11 = v8;
  v16 = *v8;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a4 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = *(_QWORD *)(v24 + 56);
        v26 = a7(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v18, a1, v26);
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v22 & 1) == (v29 & 1))
    {
      v18 = v28;
      v24 = *v11;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a2, a3, a1, v24);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_unknownObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 40 * v12;
        __swift_destroy_boxed_opaque_existential_1(v19);
        return outlined init with take of ReferenceResolutionClientProtocol(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t *a6, uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  char v30;
  void (*v31)(void);
  uint64_t *v32;
  uint64_t (*v33)(unint64_t, char *, uint64_t, uint64_t);
  uint64_t v34;

  v32 = a6;
  v33 = a7;
  v31 = a5;
  v9 = v7;
  v34 = a1;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v7;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  v22 = v17;
  v23 = *(_QWORD *)(v16 + 24);
  if (v23 >= v21 && (a3 & 1) != 0)
  {
LABEL_7:
    v24 = *v9;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = *(_QWORD *)(v24 + 56);
      v26 = v32;
      v27 = __swift_instantiateConcreteTypeFromMangledName(v32);
      return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v34, v25 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v18, v26);
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v31();
  v29 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v22 & 1) != (v30 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v18 = v29;
  v24 = *v9;
  if ((v22 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  return v33(v18, v15, v34, v24);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of FlowPluginAndBundle((uint64_t)a1, v18[7] + 80 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of FlowPluginAndBundle((uint64_t)a1, v18[7] + 80 * v12);
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_BYTE *, char *, uint64_t);
  void (*v49)(_BYTE *, char *, uint64_t);
  uint64_t v50;
  unint64_t v51;
  char v52;
  _BYTE *v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  void (*v62)(uint64_t, uint64_t);
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  void (*v69)(_BYTE *, char *, uint64_t);
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  unint64_t v94;
  char v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  int64_t v104;
  uint64_t v105;
  void (*v106)(_BYTE *, uint64_t);
  BOOL v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  void (*v113)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  void (*v121)(_BYTE *, uint64_t);
  BOOL v122;
  _BYTE *v123;
  _BYTE *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t result;
  _BYTE v130[16];
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  unint64_t v134;
  _BYTE *v135;
  unint64_t v136;
  _BYTE *v137;
  char *v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  void (*v142)(uint64_t, uint64_t);
  _BYTE *v143;
  uint64_t v144;
  uint64_t *v145;
  int64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;

  v145 = a5;
  v147 = a4;
  v149 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  v8 = MEMORY[0x1E0C80A78](v149);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = &v130[-v10];
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = &v130[-v13];
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = &v130[-v16];
  v18 = MEMORY[0x1E0C80A78](v15);
  v133 = &v130[-v19];
  v20 = MEMORY[0x1E0C80A78](v18);
  v141 = &v130[-v21];
  v22 = MEMORY[0x1E0C80A78](v20);
  v140 = &v130[-v23];
  v24 = MEMORY[0x1E0C80A78](v22);
  v137 = &v130[-v25];
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = &v130[-v27];
  MEMORY[0x1E0C80A78](v26);
  v143 = &v130[-v30];
  v144 = *(_QWORD *)(v31 + 72);
  if (!v144)
  {
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (a2 - a1 == 0x8000000000000000 && v144 == -1)
    goto LABEL_83;
  v32 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v144 == -1)
    goto LABEL_84;
  v33 = (uint64_t)(a2 - a1) / v144;
  v152 = a1;
  v151 = v147;
  v34 = v32 / v144;
  if (v33 >= v32 / v144)
  {
    if (v34 < 0)
      goto LABEL_85;
    v37 = v34 * v144;
    v131 = v29;
    if (v147 < a2 || a2 + v37 <= v147)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v147 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v81 = v147 + v37;
    v150 = v147 + v37;
    v152 = a2;
    if (v37 < 1 || a1 >= a2)
    {
LABEL_81:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v152, &v151, (uint64_t *)&v150);
      return 1;
    }
    v83 = -v144;
    v133 = v11;
    v134 = a1;
    v135 = v14;
    v139 = v17;
    v132 = -v144;
    while (1)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?(v81 + v83, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      v136 = a2 + v83;
      outlined init with copy of ReferenceResolutionClientProtocol?(a2 + v83, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      v84 = *(int *)(v149 + 48);
      v85 = &v11[v84];
      v86 = &v17[v84];
      v87 = type metadata accessor for UUID();
      v88 = *(_QWORD *)(v87 - 8);
      v143 = *(_BYTE **)(v88 + 16);
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v143)(v11, v17, v87);
      v89 = type metadata accessor for ActionCandidate();
      v90 = (uint64_t)v11;
      v91 = *(_QWORD *)(v89 - 8);
      v92 = *(void (**)(uint64_t, uint64_t))(v91 + 16);
      v148 = (unint64_t)v86;
      v142 = v92;
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v92)(v85, v86, v89);
      v93 = *v145;
      if (!*(_QWORD *)(*v145 + 16))
        break;
      v94 = specialized __RawDictionaryStorage.find<A>(_:)(v90);
      if ((v95 & 1) == 0)
        break;
      v146 = *(_QWORD *)(*(_QWORD *)(v93 + 56) + 8 * v94);
      v144 = *(_QWORD *)(v91 + 8);
      ((void (*)(_BYTE *, uint64_t))v144)(v85, v89);
      v96 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
      v96(v90, v87);
      v97 = *(int *)(v149 + 48);
      v98 = v131;
      v99 = v131 + v97;
      v100 = &v135[v97];
      ((void (*)(uint64_t))v143)(v131);
      ((void (*)(uint64_t, _BYTE *, uint64_t))v142)(v99, v100, v89);
      v101 = *v145;
      if (!*(_QWORD *)(*v145 + 16) || (v102 = specialized __RawDictionaryStorage.find<A>(_:)(v98), (v103 & 1) == 0))
      {
        v109 = v99;
        v106 = (void (*)(_BYTE *, uint64_t))v144;
        ((void (*)(uint64_t, uint64_t))v144)(v109, v89);
        v96(v98, v87);
        goto LABEL_62;
      }
      v104 = *(_QWORD *)(*(_QWORD *)(v101 + 56) + 8 * v102);
      v105 = v99;
      v106 = (void (*)(_BYTE *, uint64_t))v144;
      ((void (*)(uint64_t, uint64_t))v144)(v105, v89);
      v96(v98, v87);
      if (v146 == v104)
        goto LABEL_62;
      v107 = v146 < v104;
      v14 = v135;
      v17 = v139;
LABEL_66:
      v83 = v132;
      v125 = a3 + v132;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      v11 = v133;
      if (v107)
      {
        if (a3 < a2 || v125 >= a2)
        {
          v127 = v136;
          swift_arrayInitWithTakeFrontToBack();
          v126 = v134;
        }
        else
        {
          v126 = v134;
          v127 = v136;
          if (a3 != a2)
            swift_arrayInitWithTakeBackToFront();
        }
        v152 += v83;
      }
      else
      {
        v128 = v150;
        v150 += v83;
        if (a3 < v128 || v125 >= v128)
        {
          swift_arrayInitWithTakeFrontToBack();
          v127 = a2;
          v126 = v134;
        }
        else
        {
          v126 = v134;
          if (a3 != v128)
            swift_arrayInitWithTakeBackToFront();
          v127 = a2;
        }
      }
      v81 = v150;
      if (v150 > v147)
      {
        a2 = v127;
        a3 += v83;
        if (v127 > v126)
          continue;
      }
      goto LABEL_81;
    }
    v108 = v85;
    v106 = *(void (**)(_BYTE *, uint64_t))(v91 + 8);
    v106(v108, v89);
    v96 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v96(v90, v87);
LABEL_62:
    v144 = (uint64_t)v106;
    v138 = (char *)v96;
    v146 = a3;
    v110 = v149;
    v111 = v140;
    v112 = &v140[*(int *)(v149 + 48)];
    v113 = (void (*)(_BYTE *, _BYTE *, uint64_t))v143;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v143)(v140, v139, v87);
    v114 = v87;
    v115 = v142;
    ((void (*)(_BYTE *, unint64_t, uint64_t))v142)(v112, v148, v89);
    v137 = (_BYTE *)ActionCandidate.affinityScore.getter();
    v106(v112, v89);
    v116 = *(int *)(v110 + 48);
    v148 = a2;
    v117 = v141;
    v118 = &v141[v116];
    v14 = v135;
    v119 = &v135[v116];
    v113(v141, v135, v114);
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v115)(v118, v119, v89);
    v120 = ActionCandidate.affinityScore.getter();
    ((void (*)(_BYTE *, uint64_t))v144)(v118, v89);
    v121 = (void (*)(_BYTE *, uint64_t))v138;
    v122 = v120 < (uint64_t)v137;
    a3 = v146;
    v107 = v122;
    v123 = v117;
    a2 = v148;
    ((void (*)(_BYTE *, uint64_t))v138)(v123, v114);
    v124 = v111;
    v17 = v139;
    v121(v124, v114);
    goto LABEL_66;
  }
  if ((v33 & 0x8000000000000000) == 0)
  {
    v35 = (uint64_t)v143;
    v36 = v33 * v144;
    if (v147 < a1 || a1 + v36 <= v147)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v147 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v136 = v147 + v36;
    v150 = v147 + v36;
    if (v36 >= 1 && a2 < a3)
    {
      v146 = a3;
      v138 = v28;
      while (1)
      {
        v148 = a2;
        outlined init with copy of ReferenceResolutionClientProtocol?(a2, v35, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        outlined init with copy of ReferenceResolutionClientProtocol?(v147, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        v39 = *(int *)(v149 + 48);
        v40 = (uint64_t)v137;
        v41 = &v137[v39];
        v42 = v35 + v39;
        v43 = type metadata accessor for UUID();
        v44 = *(_QWORD *)(v43 - 8);
        v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
        v45(v40, v35, v43);
        v46 = type metadata accessor for ActionCandidate();
        v47 = *(_QWORD *)(v46 - 8);
        v48 = *(void (**)(_BYTE *, char *, uint64_t))(v47 + 16);
        v147 = v42;
        v49 = v48;
        v48(v41, (char *)v42, v46);
        v50 = *v145;
        if (!*(_QWORD *)(*v145 + 16))
          break;
        v51 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
        if ((v52 & 1) == 0)
          break;
        v142 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 + 56) + 8 * v51);
        v53 = *(_BYTE **)(v47 + 8);
        ((void (*)(_BYTE *, uint64_t))v53)(v41, v46);
        v54 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        v54(v40, v43);
        v55 = *(int *)(v149 + 48);
        v56 = (uint64_t)v133;
        v57 = &v133[v55];
        v58 = &v138[v55];
        ((void (*)(_BYTE *))v45)(v133);
        v49(v57, v58, v46);
        v59 = *v145;
        if (!*(_QWORD *)(*v145 + 16) || (v60 = specialized __RawDictionaryStorage.find<A>(_:)(v56), (v61 & 1) == 0))
        {
          ((void (*)(_BYTE *, uint64_t))v53)(v57, v46);
          v54(v56, v43);
          goto LABEL_31;
        }
        v62 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 + 56) + 8 * v60);
        ((void (*)(_BYTE *, uint64_t))v53)(v57, v46);
        v54(v56, v43);
        if (v142 == v62)
          goto LABEL_31;
        v63 = (uint64_t)v142 < (uint64_t)v62;
        v64 = v148;
        v28 = v138;
        v35 = (uint64_t)v143;
LABEL_32:
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        outlined destroy of ReferenceResolutionClientProtocol?(v35, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        v77 = v152;
        if (v63)
        {
          v78 = v64 + v144;
          v79 = v146;
          if (v152 < v64 || v152 >= v78)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v152 == v64)
          {
            v77 = v64;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v80 = v151 + v144;
          v79 = v146;
          if (v152 < v151 || v152 >= v80)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v152 != v151)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v151 = v80;
          v78 = v64;
        }
        v152 = v77 + v144;
        v147 = v151;
        if (v151 < v136)
        {
          a2 = v78;
          if (v78 < v79)
            continue;
        }
        goto LABEL_81;
      }
      v53 = *(_BYTE **)(v47 + 8);
      ((void (*)(_BYTE *, uint64_t))v53)(v41, v46);
      v54 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v54(v40, v43);
LABEL_31:
      v139 = v53;
      v142 = v54;
      v65 = v149;
      v66 = v140;
      v67 = &v140[*(int *)(v149 + 48)];
      v45((uint64_t)v140, (uint64_t)v143, v43);
      v68 = v43;
      v69 = v49;
      v49(v67, (char *)v147, v46);
      v147 = ActionCandidate.affinityScore.getter();
      ((void (*)(_BYTE *, uint64_t))v53)(v67, v46);
      v70 = *(int *)(v65 + 48);
      v71 = v141;
      v72 = &v141[v70];
      v28 = v138;
      v73 = &v138[v70];
      v45((uint64_t)v141, (uint64_t)v138, v68);
      v69(v72, v73, v46);
      v74 = ActionCandidate.affinityScore.getter();
      v75 = v46;
      v35 = (uint64_t)v143;
      ((void (*)(_BYTE *, uint64_t))v139)(v72, v75);
      v63 = v74 < (uint64_t)v147;
      v76 = v142;
      v142((uint64_t)v71, v68);
      v76((uint64_t)v66, v68);
      v64 = v148;
      goto LABEL_32;
    }
    goto LABEL_81;
  }
LABEL_85:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (appBundleId: String, userData: [String : Any]));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Never>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v23 = type metadata accessor for Siri_Nlu_External_UserParse();
  v5 = *(_QWORD *)(v23 - 8);
  v6 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - v9;
  v11 = MEMORY[0x1E0DEE9D8];
  v27 = MEMORY[0x1E0DEE9D8];
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
  {
    v12 = 0;
    v21 = a2;
    v22 = a1;
    v11 = v23;
    while (v12 < *(_QWORD *)(a1 + 16))
    {
      v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v14 = *(_QWORD *)(v5 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, a1 + v13 + v14 * v12, v11);
      v15 = closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)((uint64_t)v10, a2);
      if (v2)
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v11);
        swift_bridgeObjectRelease();
        swift_release();
        return v11;
      }
      if ((v15 & 1) != 0)
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
        v24(v26, v10, v11);
        v16 = v27;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
          v16 = v27;
        }
        v18 = *(_QWORD *)(v16 + 16);
        v17 = *(_QWORD *)(v16 + 24);
        if (v18 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v16 = v27;
        }
        *(_QWORD *)(v16 + 16) = v18 + 1;
        v19 = v16 + v13 + v18 * v14;
        v20 = v23;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(v19, v26, v23);
        v27 = v16;
        v11 = v20;
        a2 = v21;
        a1 = v22;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v11);
      }
      if (v25 == ++v12)
      {
        v11 = v27;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

uint64_t sub_1B4CBA738()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, uint64_t);

  v22 = a2;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  v4 = *(_QWORD *)(v21 - 8);
  v5 = MEMORY[0x1E0C80A78](v21);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v18 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return MEMORY[0x1E0DEE9D8];
  v18[2] = v2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v12 = *(_QWORD *)(v11 - 8);
  v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v19 = *(_QWORD *)(v12 + 72);
  v20 = v11;
  v18[1] = a1;
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x1E0DEE9D8];
  do
  {
    v22(v9, &v9[*(int *)(v21 + 48)], v13, v13 + *(int *)(v20 + 48));
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v16 = *(_QWORD *)(v14 + 16);
    v15 = *(_QWORD *)(v14 + 24);
    if (v16 >= v15 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    *(_QWORD *)(v14 + 16) = v16 + 1;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v14+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v16, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v13 += v19;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in AppShortcutParseExpansion.expand(nlParse:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for ParseUserDataAttachment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Parse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ParseUserDataAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for ParseUserDataAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ParseUserDataAttachment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4CBAF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Parse();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for ParseUserDataAttachment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4CBAFE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Parse();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

uint64_t type metadata completion function for ParseUserDataAttachment()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Parse();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ActionGenerator()
{
  return objc_opt_self();
}

uint64_t method lookup function for ActionGenerator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActionGenerator.__allocating_init(conversationHandlerLocator:linkExpansionContextBuilder:appShortcutExpansionContextBuilder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined assign with take of FlowPluginAndBundle(uint64_t a1, uint64_t a2)
{
  assignWithTake for SiriRequestContext(a2, a1);
  return a2;
}

unint64_t type metadata accessor for LNSystemProtocol()
{
  unint64_t result;

  result = lazy cache variable for type metadata for LNSystemProtocol;
  if (!lazy cache variable for type metadata for LNSystemProtocol)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AmbiguityFeatureFlags, &type metadata for AmbiguityFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AmbiguityFeatureFlags, &type metadata for AmbiguityFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AmbiguityFeatureFlags, &type metadata for AmbiguityFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags);
  }
  return result;
}

uint64_t outlined assign with take of (Input, AnyFlow, SiriEnvironment)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)()
{
  return closure #1 in closure #3 in ActionGenerator.dedupeAppShortcuts(parses:)() & 1;
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t logAction<A>(label:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void **, char *, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  char *v36;
  void *v37;
  id v38;
  id v39;
  NSObject *v40;
  unint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  void **v59;
  void (*v60)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void **, char *, uint64_t);
  char *v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v72 = a6;
  v6 = a5;
  v67 = a1;
  v68 = a4;
  v66 = a3;
  v75 = *(_QWORD *)(a5 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v63 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v74 = (char *)&v62 - v11;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v62 - v12;
  v73 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v14 = type metadata accessor for Result();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v70 = (void **)((char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v16);
  v65 = (void **)((char *)&v62 - v19);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v62 - v20;
  if (one-time initialization token for executor != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v64 = v23;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v71 = v15;
  v69 = v21;
  if (v26)
  {
    v62 = v6;
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v77 = v28;
    *(_DWORD *)v27 = 136315138;
    swift_bridgeObjectRetain();
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, a2, &v77);
    v6 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v24, v25, "==>> %s", v27, 0xCu);
    swift_arrayDestroy();
    v29 = v28;
    v21 = v69;
    MEMORY[0x1B5E44758](v29, -1, -1);
    v30 = v27;
    v15 = v71;
    MEMORY[0x1B5E44758](v30, -1, -1);

  }
  else
  {

    v31 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1E0C80A78](v31);
  v32 = v66;
  *(&v62 - 4) = v6;
  *(&v62 - 3) = v32;
  *(&v62 - 2) = (uint64_t)v68;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(_BYTE *))partial apply for closure #1 in logAction<A>(label:_:), (uint64_t)v21);
  v33 = v65;
  v68 = *(void (**)(void **, char *, uint64_t))(v15 + 16);
  v68(v65, v21, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v36 = v74;
  v35 = v75;
  if (EnumCaseMultiPayload == 1)
  {
    v37 = *v33;
    swift_bridgeObjectRetain();
    v38 = v37;
    swift_bridgeObjectRetain();
    v39 = v37;
    v40 = Logger.logObject.getter();
    v41 = a2;
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v42))
    {
      v43 = swift_slowAlloc();
      v66 = v14;
      v44 = v43;
      v45 = swift_slowAlloc();
      v77 = v45;
      *(_DWORD *)v44 = 136315394;
      swift_bridgeObjectRetain();
      v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v41, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v44 + 12) = 2080;
      v76 = (uint64_t)v37;
      v46 = v37;
      v47 = String.init<A>(describing:)();
      v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v77);
      v15 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v40, v42, "<<== %s threw %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v45, -1, -1);
      v49 = v44;
      v14 = v66;
      MEMORY[0x1B5E44758](v49, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v75 + 32))(v13, v33, v6);
    v50 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
    v50(v36, v13, v6);
    swift_bridgeObjectRetain_n();
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc();
      v54 = swift_slowAlloc();
      v73 = (uint64_t)v13;
      v65 = (void **)v54;
      v77 = v54;
      *(_DWORD *)v53 = 136315394;
      v66 = v14;
      swift_bridgeObjectRetain();
      v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, a2, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 12) = 2080;
      v55 = v74;
      v50(v63, v74, v6);
      v56 = String.init<A>(describing:)();
      v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v77);
      v15 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v58 = *(void (**)(char *, uint64_t))(v75 + 8);
      v58(v55, v6);
      _os_log_impl(&dword_1B4BE6000, v51, v52, "<<== %s -> %s", (uint8_t *)v53, 0x16u);
      v59 = v65;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v59, -1, -1);
      MEMORY[0x1B5E44758](v53, -1, -1);

      v58((char *)v73, v6);
      v14 = v66;
    }
    else
    {

      v60 = *(void (**)(char *, uint64_t))(v75 + 8);
      v60(v74, v6);
      swift_bridgeObjectRelease_n();
      v60(v13, v6);
    }
    v21 = v69;
  }
  v68(v70, v21, v14);
  _ss6ResultOsRi_zrlE3getxyq_YKF(v14, (uint64_t)&v77, v72);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v21, v14);
}

unint64_t AffinityScorer.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v14;
  unint64_t v15;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v14 = 0xD000000000000013;
  v15 = 0x80000001B4EF65D0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v8 = UUID.uuidString.getter();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v14;
}

uint64_t FixedAffinityScorer.id.getter@<X0>(uint64_t a1@<X8>)
{
  return FixedAffinityScorer.id.getter(&OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_id, a1);
}

uint64_t FixedAffinityScorer.score.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score);
}

uint64_t FixedAffinityScorer.__allocating_init(score:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  UUID.init()();
  v5 = v4 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return v4;
}

uint64_t FixedAffinityScorer.init(score:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  UUID.init()();
  v5 = v2 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return v2;
}

uint64_t FixedAffinityScorer.score(for:loopCheck:)()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score);
}

uint64_t FixedAffinityScorer.deinit()
{
  return FixedAffinityScorer.deinit(&OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_id);
}

uint64_t FixedAffinityScorer.__deallocating_deinit()
{
  return FixedAffinityScorer.__deallocating_deinit(&OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_id);
}

uint64_t protocol witness for AffinityScorer.id.getter in conformance FixedAffinityScorer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for AffinityScorer.id.getter in conformance FixedAffinityScorer(&OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_id, a1);
}

uint64_t protocol witness for AffinityScorer.score(for:loopCheck:) in conformance FixedAffinityScorer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
  if (v1)
    return v3;
  return result;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FixedAffinityScorer(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x1B5E44668](&protocol conformance descriptor for FixedAffinityScorer, a1);
  return AffinityScorer.debugDescription.getter(a1, v2);
}

uint64_t CachingAffinityScorer.id.getter@<X0>(uint64_t a1@<X8>)
{
  return FixedAffinityScorer.id.getter(&OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id, a1);
}

uint64_t FixedAffinityScorer.id.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CachingAffinityScorer.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  UUID.init()();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
  return v0;
}

uint64_t CachingAffinityScorer.init()()
{
  uint64_t v0;
  uint64_t v1;

  UUID.init()();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
  return v0;
}

uint64_t CachingAffinityScorer.score(for:loopCheck:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _WORD *v14;
  char v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  _QWORD v19[2];

  v4 = v2;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v19 - v12;
  v14 = (_WORD *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState);
  if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState + 9) & 1) == 0)
    return *(_QWORD *)v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id, v7);
  v15 = specialized Set._Variant.insert(_:)((uint64_t)v13, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if ((v15 & 1) != 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 136))(a1, a2);
    if (!v3)
    {
      *(_QWORD *)v14 = result;
      v14[4] = v17 & 1;
    }
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(_QWORD *)v18 = 0;
    *(_BYTE *)(v18 + 8) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t CachingAffinityScorer.computeScore(for:loopCheck:)()
{
  uint64_t v0;

  lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
  swift_allocError();
  *(_QWORD *)v0 = 1;
  *(_BYTE *)(v0 + 8) = 1;
  return swift_willThrow();
}

uint64_t CachingAffinityScorer.deinit()
{
  return FixedAffinityScorer.deinit(&OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id);
}

uint64_t FixedAffinityScorer.deinit(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *a1;
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t CachingAffinityScorer.__deallocating_deinit()
{
  return FixedAffinityScorer.__deallocating_deinit(&OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id);
}

uint64_t FixedAffinityScorer.__deallocating_deinit(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *a1;
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AffinityScorer.id.getter in conformance CachingAffinityScorer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for AffinityScorer.id.getter in conformance FixedAffinityScorer(&OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id, a1);
}

uint64_t protocol witness for AffinityScorer.score(for:loopCheck:) in conformance CachingAffinityScorer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
  if (v1)
    return v3;
  return result;
}

uint64_t protocol witness for AffinityScorer.id.getter in conformance FixedAffinityScorer@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2 + *a1;
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CachingAffinityScorer(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x1B5E44668](&protocol conformance descriptor for CachingAffinityScorer, a1);
  return AffinityScorer.debugDescription.getter(a1, v2);
}

uint64_t CombiningAffinityScorer.__allocating_init(children:reducer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  v7 = (_QWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *v7 = a2;
  v7[1] = a3;
  UUID.init()();
  v8 = v6 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  return v6;
}

uint64_t CombiningAffinityScorer.init(children:reducer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  v4 = (_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *v4 = a2;
  v4[1] = a3;
  swift_retain();
  UUID.init()();
  v5 = v3 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v5 = 0;
  *(_WORD *)(v5 + 8) = 256;
  swift_release();
  return v3;
}

uint64_t CombiningAffinityScorer.computeScore(for:loopCheck:)()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  _StringGuts.grow(_:)(26);
  swift_retain();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_release();
  v3._countAndFlagsBits = 0xD000000000000015;
  v3._object = (void *)0x80000001B4EF65F0;
  String.append(_:)(v3);
  type metadata accessor for Input();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6 = specialized logAction<A>(label:_:)(0xD000000000000013, 0x80000001B4EF65D0, (void (*)(_QWORD *__return_ptr, _QWORD))partial apply for closure #1 in CombiningAffinityScorer.computeScore(for:loopCheck:));
  swift_bridgeObjectRelease();
  if (v0)
    return v7;
  else
    return v6;
}

uint64_t closure #1 in CombiningAffinityScorer.computeScore(for:loopCheck:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t, _QWORD);

  v5 = *(_QWORD *)(result + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v15 = a4;
    v7 = (_QWORD *)(v5 + 32);
    v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(result
                                                                     + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
    swift_bridgeObjectRetain();
    v8 = 0;
    v9 = 1;
    while (1)
    {
      v10 = v7[3];
      v11 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v10);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a2, a3, v10, v11);
      if (v4)
        return swift_bridgeObjectRelease();
      v8 = v16(v8, v9 & 1, v12, v13 & 1);
      v9 = v14 & 1;
      v7 += 5;
      if (!--v6)
      {
        result = swift_bridgeObjectRelease();
        a4 = v15;
        goto LABEL_7;
      }
    }
  }
  else
  {
    v8 = 0;
    v9 = 1;
LABEL_7:
    *(_QWORD *)a4 = v8;
    *(_BYTE *)(a4 + 8) = v9;
  }
  return result;
}

uint64_t static CombiningAffinityScorer.max(children:requireAll:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t, char, uint64_t, char);
  uint64_t v9;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 1;
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  *(_BYTE *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = v5;
  type metadata accessor for CombiningAffinityScorer(0);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  v8 = (uint64_t (**)(uint64_t, char, uint64_t, char))(v7
                                                             + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *v8 = partial apply for closure #1 in static CombiningAffinityScorer.max(children:requireAll:);
  v8[1] = (uint64_t (*)(uint64_t, char, uint64_t, char))v6;
  swift_bridgeObjectRetain();
  UUID.init()();
  v9 = v7 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  return v7;
}

uint64_t closure #1 in static CombiningAffinityScorer.max(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;

  swift_beginAccess();
  v14 = *(unsigned __int8 *)(a5 + 16);
  swift_beginAccess();
  *(_BYTE *)(a5 + 16) = 0;
  if ((a4 & 1) != 0)
  {
    if ((a6 & 1) != 0)
    {
      swift_beginAccess();
      if ((*(_BYTE *)(a7 + 16) & 1) == 0)
      {
        swift_beginAccess();
        *(_BYTE *)(a7 + 16) = 1;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_1B4BE6000, v18, v19, "CombiningAffinityScorer with requireAll got nil value, returning nil", v20, 2u);
        MEMORY[0x1B5E44758](v20, -1, -1);
      }

      return 0;
    }
  }
  else
  {
    if (a1 <= a3)
      v15 = a3;
    else
      v15 = a1;
    if (v14)
      v16 = a3;
    else
      v16 = 0;
    if ((a2 & 1) != 0)
      return v16;
    else
      return v15;
  }
  return a1;
}

uint64_t static CombiningAffinityScorer.min(children:requireAll:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t, char, uint64_t, char);
  uint64_t v9;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 1;
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  *(_BYTE *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = v5;
  type metadata accessor for CombiningAffinityScorer(0);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  v8 = (uint64_t (**)(uint64_t, char, uint64_t, char))(v7
                                                             + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *v8 = partial apply for closure #1 in static CombiningAffinityScorer.min(children:requireAll:);
  v8[1] = (uint64_t (*)(uint64_t, char, uint64_t, char))v6;
  swift_bridgeObjectRetain();
  UUID.init()();
  v9 = v7 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  return v7;
}

uint64_t closure #1 in static CombiningAffinityScorer.min(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;

  swift_beginAccess();
  v14 = *(unsigned __int8 *)(a5 + 16);
  swift_beginAccess();
  *(_BYTE *)(a5 + 16) = 0;
  if ((a4 & 1) != 0)
  {
    if ((a6 & 1) != 0)
    {
      swift_beginAccess();
      if ((*(_BYTE *)(a7 + 16) & 1) == 0)
      {
        swift_beginAccess();
        *(_BYTE *)(a7 + 16) = 1;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_1B4BE6000, v18, v19, "CombiningAffinityScorer with requireAll got nil value, returning nil", v20, 2u);
        MEMORY[0x1B5E44758](v20, -1, -1);
      }

      return 0;
    }
  }
  else
  {
    if (a1 >= a3)
      v15 = a3;
    else
      v15 = a1;
    if (v14)
      v16 = a3;
    else
      v16 = 0;
    if ((a2 & 1) != 0)
      return v16;
    else
      return v15;
  }
  return a1;
}

uint64_t static CombiningAffinityScorer.sum(children:requireAll:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t, char, uint64_t, char);
  uint64_t v9;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 1;
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  *(_BYTE *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = v5;
  type metadata accessor for CombiningAffinityScorer(0);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  v8 = (uint64_t (**)(uint64_t, char, uint64_t, char))(v7
                                                             + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *v8 = partial apply for closure #1 in static CombiningAffinityScorer.sum(children:requireAll:);
  v8[1] = (uint64_t (*)(uint64_t, char, uint64_t, char))v6;
  swift_bridgeObjectRetain();
  UUID.init()();
  v9 = v7 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  return v7;
}

uint64_t closure #1 in static CombiningAffinityScorer.sum(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, unsigned __int8 a6, uint64_t a7)
{
  unsigned __int8 v14;
  uint64_t result;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  BOOL v20;

  swift_beginAccess();
  v14 = *(_BYTE *)(a5 + 16);
  result = swift_beginAccess();
  *(_BYTE *)(a5 + 16) = 0;
  if ((a4 & 1) != 0)
  {
    if ((a6 & 1) != 0)
    {
      swift_beginAccess();
      if ((*(_BYTE *)(a7 + 16) & 1) == 0)
      {
        swift_beginAccess();
        *(_BYTE *)(a7 + 16) = 1;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1B4BE6000, v17, v18, "CombiningAffinityScorer with requireAll got nil value, returning nil", v19, 2u);
        MEMORY[0x1B5E44758](v19, -1, -1);
      }

      return 0;
    }
    return a1;
  }
  if ((a2 & 1) != 0)
  {
    if (((a6 ^ 1 | v14) & 1) != 0)
      return a3;
    else
      return 0;
  }
  v20 = __OFADD__(a1, a3);
  a1 += a3;
  if (!v20)
    return a1;
  __break(1u);
  return result;
}

uint64_t static CombiningAffinityScorer.first(children:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, char, uint64_t);
  uint64_t v4;

  type metadata accessor for CombiningAffinityScorer(0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  v3 = (uint64_t (**)(uint64_t, char, uint64_t))(v2
                                                       + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *v3 = closure #1 in static CombiningAffinityScorer.first(children:);
  v3[1] = 0;
  swift_bridgeObjectRetain();
  UUID.init()();
  v4 = v2 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v4 = 0;
  *(_WORD *)(v4 + 8) = 256;
  return v2;
}

uint64_t closure #1 in static CombiningAffinityScorer.first(children:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return a3;
  return result;
}

uint64_t static CombiningAffinityScorer.last(children:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t, uint64_t, char);
  uint64_t v4;

  type metadata accessor for CombiningAffinityScorer(0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = a1;
  v3 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, char))(v2
                                                                + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *v3 = closure #1 in static CombiningAffinityScorer.last(children:);
  v3[1] = 0;
  swift_bridgeObjectRetain();
  UUID.init()();
  v4 = v2 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v4 = 0;
  *(_WORD *)(v4 + 8) = 256;
  return v2;
}

uint64_t closure #1 in static CombiningAffinityScorer.last(children:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) == 0)
    return a3;
  return result;
}

uint64_t static CombiningAffinityScorer.invert(child:fallbackValue:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityScorer>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B4EE3F50;
  outlined init with copy of ReferenceResolutionClientProtocol(a1, v6 + 32);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_BYTE *)(v7 + 24) = a3 & 1;
  type metadata accessor for CombiningAffinityScorer(0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v6;
  v9 = (_QWORD *)(v8 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
  *v9 = partial apply for closure #1 in static CombiningAffinityScorer.invert(child:fallbackValue:);
  v9[1] = v7;
  UUID.init()();
  v10 = v8 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v10 = 0;
  *(_WORD *)(v10 + 8) = 256;
  return v8;
}

void CombiningAffinityScorer.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CombiningAffinityScorer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t CombiningAffinityScorer.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t CombiningAffinityScorer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CombiningAffinityScorer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ComparingAffinityScorer.score.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score);
}

uint64_t ComparingAffinityScorer.comparison.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison);
}

uint64_t ComparingAffinityScorer.first.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first, a1);
}

uint64_t ComparingAffinityScorer.second.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, a1, &demangling cache variable for type metadata for AffinityValueFetcher?);
}

uint64_t ComparingAffinityScorer.__allocating_init(score:comparison:_:_:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = swift_allocObject();
  v11 = v10 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score;
  *(_QWORD *)v11 = a1;
  *(_BYTE *)(v11 + 8) = a2 & 1;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison) = a3;
  outlined init with copy of ReferenceResolutionClientProtocol(a4, v10 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  outlined init with copy of ReferenceResolutionClientProtocol?(a5, v10 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
  UUID.init()();
  v12 = v10 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v12 = 0;
  *(_WORD *)(v12 + 8) = 256;
  outlined destroy of ReferenceResolutionClientProtocol?(a5, &demangling cache variable for type metadata for AffinityValueFetcher?);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v10;
}

uint64_t ComparingAffinityScorer.init(score:comparison:_:_:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  v8 = v5 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score;
  *(_QWORD *)v8 = a1;
  *(_BYTE *)(v8 + 8) = a2 & 1;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison) = a3;
  outlined init with copy of ReferenceResolutionClientProtocol(a4, v5 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  outlined init with copy of ReferenceResolutionClientProtocol?(a5, v5 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
  UUID.init()();
  v9 = v5 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
  *(_QWORD *)v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  outlined destroy of ReferenceResolutionClientProtocol?(a5, &demangling cache variable for type metadata for AffinityValueFetcher?);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v5;
}

void ComparingAffinityScorer.computeScore(for:loopCheck:)(uint64_t a1)
{
  uint64_t v1;

  AffinityValueComparison.evaluate(input:_:_:)(a1, v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first, v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, *(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison));
}

void AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1B4CBDFF4(int a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, os_log_t log, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _DWORD *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;

  outlined init with copy of ReferenceResolutionClientProtocol?(a3, (uint64_t)&v60, &demangling cache variable for type metadata for AffinityValueFetcher?);
  if (!v61)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v60, &demangling cache variable for type metadata for AffinityValueFetcher?);
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(_QWORD *)v50 = 2;
    *(_BYTE *)(v50 + 8) = 1;
    swift_willThrow();
    return v38 & 1;
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v60, (uint64_t)v62);
  v40 = v36[3];
  v41 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v40);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 8))(v38, v40, v41);
  if (v35)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    return v38 & 1;
  }
  v44 = v43;
  if (!v43)
    goto LABEL_10;
  v45 = v42;
  v46 = v63;
  v47 = v64;
  __swift_project_boxed_opaque_existential_1(v62, v63);
  v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 8))(v38, v46, v47);
  if (!v49)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    if (one-time initialization token for executor != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (_DWORD *)swift_slowAlloc();
      *(_QWORD *)&v60 = swift_slowAlloc();
      *v55 = 136315138;
      __asm { BR              X10 }
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    LOBYTE(v38) = 0;
    return v38 & 1;
  }
  LOBYTE(v38) = closure #2 in AffinityValueComparison.evaluate(input:_:_:)(v45, v44, v48, v49);
  if (one-time initialization token for executor != -1)
    swift_once();
  v56 = type metadata accessor for Logger();
  __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = Logger.logObject.getter();
  v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = swift_slowAlloc();
    *(_QWORD *)&v60 = swift_slowAlloc();
    *(_DWORD *)v59 = 136315906;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v39 - 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v59 + 12) = 2080;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  return v38 & 1;
}

void ComparingAffinityScorer.debugDescription.getter()
{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(69);
  v1._object = (void *)0x80000001B4EF6640;
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x7261706D6F63202CLL;
  v3._object = (void *)0xED00003D6E6F7369;
  String.append(_:)(v3);
  __asm { BR              X10 }
}

uint64_t sub_1B4CBE774()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  _QWORD v9[13];

  v2._countAndFlagsBits = 62;
  v2._object = v1;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x3D7473726966202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityValueFetcher);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x646E6F636573202CLL;
  v5._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v5);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, (uint64_t)v9, &demangling cache variable for type metadata for AffinityValueFetcher?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityValueFetcher?);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v9[5];
}

uint64_t AffinityValueComparison.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4CBE8E0 + 4 * byte_1B4EE402C[a1]))(60, 0xE100000000000000);
}

uint64_t sub_1B4CBE8E0()
{
  return 62;
}

uint64_t sub_1B4CBE8E8()
{
  return 15676;
}

uint64_t sub_1B4CBE8F4()
{
  return 15678;
}

uint64_t sub_1B4CBE900()
{
  return 15677;
}

uint64_t sub_1B4CBE90C()
{
  return 15649;
}

uint64_t sub_1B4CBE918()
{
  return 42;
}

uint64_t sub_1B4CBE920()
{
  return 33;
}

void ComparingAffinityScorer.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ComparingAffinityScorer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ComparingAffinityScorer.__ivar_destroyer()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  return outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
}

uint64_t ComparingAffinityScorer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
  return v0;
}

uint64_t ComparingAffinityScorer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
  return swift_deallocClassInstance();
}

BOOL closure #1 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  BOOL v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20[0] = a3;
  v8 = type metadata accessor for TypeIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v20 - v13;
  v15 = MEMORY[0x1E0DEA968];
  v23 = MEMORY[0x1E0DEA968];
  v21 = a1;
  v22 = a2;
  swift_bridgeObjectRetain();
  TypeIdentifier.init(for:)();
  static Transformation.defaultLengthLimit.getter();
  static Transformation.transform<A>(_:to:lengthLimit:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v14, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    v17 = v24;
    v23 = v15;
    v21 = v20[0];
    v22 = a4;
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    static Transformation.transform<A>(_:to:lengthLimit:)();
    v16(v12, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    return v17 < v20[1];
  }
  return v18;
}

BOOL closure #2 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  BOOL v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20[0] = a3;
  v8 = type metadata accessor for TypeIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v20 - v13;
  v15 = MEMORY[0x1E0DEA968];
  v23 = MEMORY[0x1E0DEA968];
  v21 = a1;
  v22 = a2;
  swift_bridgeObjectRetain();
  TypeIdentifier.init(for:)();
  static Transformation.defaultLengthLimit.getter();
  static Transformation.transform<A>(_:to:lengthLimit:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v14, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    v17 = v24;
    v23 = v15;
    v21 = v20[0];
    v22 = a4;
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    static Transformation.transform<A>(_:to:lengthLimit:)();
    v16(v12, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    return v20[1] < v17;
  }
  return v18;
}

BOOL closure #3 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  BOOL v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20[0] = a3;
  v8 = type metadata accessor for TypeIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v20 - v13;
  v15 = MEMORY[0x1E0DEA968];
  v23 = MEMORY[0x1E0DEA968];
  v21 = a1;
  v22 = a2;
  swift_bridgeObjectRetain();
  TypeIdentifier.init(for:)();
  static Transformation.defaultLengthLimit.getter();
  static Transformation.transform<A>(_:to:lengthLimit:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v14, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    v17 = v24;
    v23 = v15;
    v21 = v20[0];
    v22 = a4;
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    static Transformation.transform<A>(_:to:lengthLimit:)();
    v16(v12, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    return v20[1] >= v17;
  }
  return v18;
}

BOOL closure #4 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  BOOL v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20[0] = a3;
  v8 = type metadata accessor for TypeIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v20 - v13;
  v15 = MEMORY[0x1E0DEA968];
  v23 = MEMORY[0x1E0DEA968];
  v21 = a1;
  v22 = a2;
  swift_bridgeObjectRetain();
  TypeIdentifier.init(for:)();
  static Transformation.defaultLengthLimit.getter();
  static Transformation.transform<A>(_:to:lengthLimit:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v14, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    v17 = v24;
    v23 = v15;
    v21 = v20[0];
    v22 = a4;
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    static Transformation.transform<A>(_:to:lengthLimit:)();
    v16(v12, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    return v17 >= v20[1];
  }
  return v18;
}

uint64_t closure #5 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t closure #6 in AffinityValueComparison.evaluate(input:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;

  if (a1 == a3 && a2 == a4)
    v4 = 0;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
  return v4 & 1;
}

uint64_t AffinityValueComparison.requiredChildCount.getter(char a1)
{
  if ((a1 & 0xFE) == 6)
    return 1;
  else
    return 2;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AffinityValueComparison(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B4CBF248@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_1B4CBF2AC + 4 * byte_1B4EE403C[a2]))(62, a1, 60);
}

uint64_t sub_1B4CBF2AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 62 && v1 == v2)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance AffinityValueComparison()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1B4CBF3B0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AffinityValueComparison()
{
  __asm { BR              X10 }
}

uint64_t sub_1B4CBF450()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AffinityValueComparison()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1B4CBF4E8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AffinityValueComparison@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AffinityValueComparison.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AffinityValueComparison()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B4CBF5A8 + 4 * byte_1B4EE405C[*v0]))();
}

void sub_1B4CBF5A8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 62;
  a1[1] = v1;
}

void sub_1B4CBF5B4(_QWORD *a1@<X8>)
{
  *a1 = 15676;
  a1[1] = 0xE200000000000000;
}

void sub_1B4CBF5C4(_QWORD *a1@<X8>)
{
  *a1 = 15678;
  a1[1] = 0xE200000000000000;
}

void sub_1B4CBF5D4(_QWORD *a1@<X8>)
{
  *a1 = 15677;
  a1[1] = 0xE200000000000000;
}

void sub_1B4CBF5E4(_QWORD *a1@<X8>)
{
  *a1 = 15649;
  a1[1] = 0xE200000000000000;
}

void sub_1B4CBF5F4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 42;
  a1[1] = v1;
}

void sub_1B4CBF600(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 33;
  a1[1] = v1;
}

uint64_t FixedValueFetcher.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FixedValueFetcher.__allocating_init(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t FixedValueFetcher.init(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t FixedValueFetcher.fetchValue(input:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FixedValueFetcher.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FixedValueFetcher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AffinityValueFetcher.fetchValue(input:) in conformance FixedValueFetcher()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t EnvironmentValueFetcher.provider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EnvironmentValueFetcher.valueKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *EnvironmentValueFetcher.__allocating_init(plist:)(uint64_t a1)
{
  swift_allocObject();
  return EnvironmentValueFetcher.init(plist:)(a1);
}

_QWORD *EnvironmentValueFetcher.init(plist:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39[4];

  v2 = v1;
  outlined init with copy of Any(a1, (uint64_t)v39);
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v29))
      goto LABEL_18;
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_1B4BE6000, v28, v29, "EnvironmentValueFetcher needs string argument", v30, 2u);
    v31 = v30;
    goto LABEL_16;
  }
  v39[0] = v37;
  v39[1] = v38;
  v4 = lazy protocol witness table accessor for type String and conformance String();
  v5 = (_QWORD *)MEMORY[0x1B5E43A44](46, 0xE100000000000000, 1, 1, MEMORY[0x1E0DEA968], v4);
  if (v5[2] != 2)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain();
    v28 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v33))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_18;
    }
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v39[0] = v35;
    *(_DWORD *)v34 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v28, v33, "EnvironmentValueFetcher needs 2-part provider.value keypath, got \"%s\"", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v35, -1, -1);
    v31 = v34;
LABEL_16:
    MEMORY[0x1B5E44758](v31, -1, -1);
LABEL_18:

    __swift_destroy_boxed_opaque_existential_1(a1);
    type metadata accessor for EnvironmentValueFetcher();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_bridgeObjectRelease();
  if (!v5[2])
  {
    __break(1u);
    goto LABEL_23;
  }
  v6 = v5[4];
  v7 = v5[5];
  v8 = v5[6];
  v9 = v5[7];
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x1B5E4339C](v6, v7, v8, v9);
  v12 = v11;
  swift_bridgeObjectRelease();
  v2[2] = v10;
  v2[3] = v12;
  if (v5[2] < 2uLL)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = v5[8];
  v14 = v5[9];
  v15 = v5[10];
  v16 = v5[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = MEMORY[0x1B5E4339C](v13, v14, v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  v2[4] = v17;
  v2[5] = v19;
  if (one-time initialization token for executor != -1)
LABEL_24:
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  swift_retain_n();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v39[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = (*(uint64_t (**)(void))(*v2 + 120))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v21, v22, "%s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v24, -1, -1);
    MEMORY[0x1B5E44758](v23, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

uint64_t EnvironmentValueFetcher.__allocating_init(provider:valueKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  EnvironmentValueFetcher.init(provider:valueKey:)(a1, a2, a3, a4);
  return v8;
}

_QWORD *EnvironmentValueFetcher.init(provider:valueKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = (*(uint64_t (**)(void))(*v4 + 120))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v4;
}

uint64_t EnvironmentValueFetcher.fetchValue(input:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  type metadata accessor for SiriEnvironment();
  v1 = static SiriEnvironment.forCurrentTask.getter();
  if (!v1)
    v1 = static SiriEnvironment.default.getter();
  v2 = v1;
  v7 = (*(uint64_t (**)(void))(*v0 + 120))();
  v8 = v3;
  v4._countAndFlagsBits = 0x615668637465662ELL;
  v4._object = (void *)0xED0000292865756CLL;
  String.append(_:)(v4);
  swift_retain();
  swift_retain();
  v5 = specialized logAction<A>(label:_:)(v7, v8, v2, v0);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release();
  return v5;
}

uint64_t closure #1 in EnvironmentValueFetcher.fetchValue(input:)@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  char v16;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v20;
  Swift::String_optional v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[4];
  v6 = (void *)a1[5];
  v7 = dispatch thunk of SiriEnvironment.providers.getter();
  v8 = specialized Sequence.compactMap<A>(_:)(v7);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    result = swift_bridgeObjectRelease();
    countAndFlagsBits = 0;
    object = 0;
LABEL_15:
    *a2 = countAndFlagsBits;
    a2[1] = (uint64_t)object;
    return result;
  }
  v24 = v5;
  v23 = a2;
  swift_bridgeObjectRetain();
  v10 = (uint64_t *)(v8 + 40);
  while (1)
  {
    v11 = *v10;
    ObjectType = swift_getObjectType();
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
    swift_unknownObjectRetain();
    if (v13(ObjectType, v11) == v4 && v14 == v3)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      break;
    swift_unknownObjectRelease();
    v10 += 2;
    if (!--v9)
    {
      result = swift_bridgeObjectRelease_n();
      countAndFlagsBits = 0;
      object = 0;
      a2 = v23;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_13:
  v20._object = v6;
  v20._countAndFlagsBits = v24;
  v21 = SiriEnvironmentStringKeyedValueFetching.getValue(forKey:)(v20);
  countAndFlagsBits = v21.value._countAndFlagsBits;
  object = v21.value._object;
  result = swift_unknownObjectRelease();
  if (!v22)
  {
    a2 = v23;
    goto LABEL_15;
  }
  return result;
}

uint64_t EnvironmentValueFetcher.debugDescription.getter()
{
  _QWORD *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;

  _StringGuts.grow(_:)(53);
  v1._object = (void *)0x80000001B4EF6690;
  v1._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v1);
  v2 = v0[2];
  v3 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x65756C6176202C22;
  v5._object = (void *)0xED0000223D79654BLL;
  String.append(_:)(v5);
  v7 = v0[4];
  v6 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v7;
  v8._object = v6;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 10530;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t EnvironmentValueFetcher.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EnvironmentValueFetcher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AffinityValueFetcher.fetchValue(input:) in conformance EnvironmentValueFetcher()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EnvironmentValueFetcher()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t static AffinityScore.kAffinityScoreVersion.getter()
{
  return 1;
}

uint64_t static AffinityScore.kAffinityScoreDefaultVersion.getter()
{
  return 0;
}

uint64_t static AffinityScore.loadAffinityScorer(from:defaultVersion:)@<X0>(uint64_t a1@<X8>)
{
  return specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001B4EF66C0, (void (*)(_QWORD *__return_ptr, _QWORD))partial apply for closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:), a1);
}

uint64_t closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  double v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  void *v79;
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t);
  int64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)();
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t (**v155)();
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  uint64_t v160;
  unint64_t v161;
  int64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  uint8_t *v174;
  uint64_t v175;
  unint64_t v176;
  int64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  _QWORD *v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  uint64_t v194;
  unint64_t v195;
  int64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  uint8_t *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  NSObject *v215;
  os_log_type_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  void *v221;
  void *v222;
  char v223;
  NSObject *v224;
  os_log_type_t v225;
  uint8_t *v226;
  uint64_t v227;
  NSObject *v228;
  os_log_type_t v229;
  uint8_t *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t *v233;
  char v234;
  int64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  NSObject *v241;
  os_log_type_t v242;
  uint64_t v243;
  uint64_t v244;
  NSObject *v245;
  os_log_type_t v246;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  void (*v257)(char *, uint64_t, uint64_t);
  uint64_t v258;
  uint64_t v259;
  void (*v260)(char *, uint64_t);
  uint64_t v261;
  int v262;
  int v263;
  void *v264;
  uint64_t v265;
  void *v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  double v277;
  uint64_t *v278;
  uint64_t v279;
  _OWORD v280[2];
  uint64_t v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  Swift::String v287;

  v4 = v3;
  v277 = *(double *)&a2;
  v278 = a3;
  v279 = type metadata accessor for Logger();
  v276 = *(_QWORD *)(v279 - 8);
  v6 = MEMORY[0x1E0C80A78](v279);
  v8 = (char *)&v255 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v267 = (char *)&v255 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v269 = (char *)&v255 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v255 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v268 = (char *)&v255 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v270 = (char *)&v255 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v271 = (char *)&v255 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v272 = (char *)&v255 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v273 = (char *)&v255 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v274 = (char *)&v255 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v275 = (char *)&v255 - v29;
  MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v255 - v30;
  v32 = type metadata accessor for TypeIdentifier();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v255 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)&v282);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v36 = *(_QWORD *)&v280[0];
    if (one-time initialization token for executor != -1)
      swift_once();
    __swift_project_value_buffer(v279, (uint64_t)static Logger.executor);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.debug.getter();
    v39 = os_log_type_enabled(v37, v38);
    v40 = v278;
    if (v39)
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v41 = 134217984;
      *(_QWORD *)&v282 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v37, v38, "FixedAffinityScorer(score: %ld)", v41, 0xCu);
      MEMORY[0x1B5E44758](v41, -1, -1);
    }

    v42 = type metadata accessor for FixedAffinityScorer(0);
    v43 = swift_allocObject();
    UUID.init()();
    v44 = v43 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
    *(_QWORD *)v44 = v36;
    *(_BYTE *)(v44 + 8) = 0;
LABEL_7:
    v40[3] = v42;
    result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, type metadata accessor for FixedAffinityScorer, (uint64_t)&protocol conformance descriptor for FixedAffinityScorer);
LABEL_16:
    v40[4] = result;
    *v40 = v43;
    return result;
  }
  outlined init with copy of Any(a1, (uint64_t)&v282);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v46 = *(_QWORD *)&v280[0];
    v47 = round(*(double *)v280);
    if ((~*(_QWORD *)&v47 & 0x7FF0000000000000) != 0)
    {
      if (v47 > -9.22337204e18)
      {
        if (v47 < 9.22337204e18)
        {
          if (one-time initialization token for executor == -1)
          {
LABEL_13:
            v48 = (uint64_t)v47;
            __swift_project_value_buffer(v279, (uint64_t)static Logger.executor);
            v49 = Logger.logObject.getter();
            v50 = static os_log_type_t.debug.getter();
            v51 = os_log_type_enabled(v49, v50);
            v40 = v278;
            if (v51)
            {
              v52 = swift_slowAlloc();
              *(_DWORD *)v52 = 134218240;
              *(_QWORD *)&v282 = v48;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v52 + 12) = 2048;
              *(_QWORD *)&v282 = v46;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl(&dword_1B4BE6000, v49, v50, "FixedAffinityScorer(score: %ld) (rounded from double value %f)", (uint8_t *)v52, 0x16u);
              MEMORY[0x1B5E44758](v52, -1, -1);
            }

            v53 = type metadata accessor for FixedAffinityScorer(0);
            v43 = swift_allocObject();
            UUID.init()();
            v54 = v43 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
            *(_QWORD *)v54 = v48;
            *(_BYTE *)(v54 + 8) = 0;
            v40[3] = v53;
            result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, type metadata accessor for FixedAffinityScorer, (uint64_t)&protocol conformance descriptor for FixedAffinityScorer);
            goto LABEL_16;
          }
LABEL_69:
          v277 = v47;
          swift_once();
          v47 = v277;
          goto LABEL_13;
        }
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_68;
  }
  outlined init with copy of Any(a1, (uint64_t)&v282);
  v55 = MEMORY[0x1E0DEA968];
  if ((swift_dynamicCast() & 1) != 0)
  {
    v266 = v3;
    v56 = *((_QWORD *)&v280[0] + 1);
    v57 = HIBYTE(*((_QWORD *)&v280[0] + 1)) & 0xFLL;
    if ((*((_QWORD *)&v280[0] + 1) & 0x2000000000000000) == 0)
      v57 = *(_QWORD *)&v280[0] & 0xFFFFFFFFFFFFLL;
    if (!v57)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for executor != -1)
        swift_once();
      __swift_project_value_buffer(v279, (uint64_t)static Logger.executor);
      v65 = Logger.logObject.getter();
      v66 = static os_log_type_t.debug.getter();
      v67 = os_log_type_enabled(v65, v66);
      v40 = v278;
      if (v67)
      {
        v68 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v68 = 0;
        _os_log_impl(&dword_1B4BE6000, v65, v66, "FixedAffinityScorer(score: nil) (from empty string)", v68, 2u);
        MEMORY[0x1B5E44758](v68, -1, -1);
      }

      v42 = type metadata accessor for FixedAffinityScorer(0);
      v43 = swift_allocObject();
      UUID.init()();
      v69 = v43 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
      *(_QWORD *)v69 = 0;
      *(_BYTE *)(v69 + 8) = 1;
      goto LABEL_7;
    }
    v283 = v55;
    v282 = v280[0];
    v265 = *(_QWORD *)&v280[0];
    swift_bridgeObjectRetain();
    TypeIdentifier.init(for:)();
    static Transformation.defaultLengthLimit.getter();
    v58 = v266;
    static Transformation.transform<A>(_:to:lengthLimit:)();
    if (!v58)
    {
      v70 = v265;
      v266 = 0;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v282);
      v71 = *(_QWORD *)&v280[0];
      if (one-time initialization token for executor != -1)
        swift_once();
      __swift_project_value_buffer(v279, (uint64_t)static Logger.executor);
      swift_bridgeObjectRetain();
      v72 = Logger.logObject.getter();
      v73 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = swift_slowAlloc();
        v75 = swift_slowAlloc();
        *(_QWORD *)&v282 = v75;
        *(_DWORD *)v74 = 134218242;
        *(_QWORD *)&v280[0] = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v74 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v56, (uint64_t *)&v282);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v72, v73, "FixedAffinityScorer(score: %ld) (from string \"%s\")", (uint8_t *)v74, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v75, -1, -1);
        MEMORY[0x1B5E44758](v74, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v76 = type metadata accessor for FixedAffinityScorer(0);
      v43 = swift_allocObject();
      UUID.init()();
      v77 = v43 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
      *(_QWORD *)v77 = v71;
      *(_BYTE *)(v77 + 8) = 0;
      v40 = v278;
      v278[3] = v76;
      v78 = &lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer;
      v79 = &protocol conformance descriptor for FixedAffinityScorer;
      v80 = type metadata accessor for FixedAffinityScorer;
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v282);
    v4 = 0;
  }
  outlined init with copy of Any(a1, (uint64_t)&v282);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_40;
  v59 = *(_QWORD *)&v280[0];
  specialized Dictionary.getAsType<A>(key:)(1701869940, 0xE400000000000000, *(uint64_t *)&v280[0]);
  if (v4)
    return swift_bridgeObjectRelease();
  if (!v60)
  {
    swift_bridgeObjectRelease();
LABEL_40:
    v81 = v279;
    if (one-time initialization token for executor != -1)
      swift_once();
    __swift_project_value_buffer(v81, (uint64_t)static Logger.executor);
    v82 = Logger.logObject.getter();
    v83 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v82, v83))
      goto LABEL_45;
    v84 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v84 = 0;
    v85 = "bad encoding dict";
    goto LABEL_44;
  }
  v61 = String.lowercased()();
  countAndFlagsBits = v61._countAndFlagsBits;
  object = v61._object;
  swift_bridgeObjectRelease();
  v64 = specialized Dictionary.getAsType<A>(key:)(0x6E6572646C696863, 0xE800000000000000, v59);
  if (v64)
    v88 = v64;
  else
    v88 = MEMORY[0x1E0DEE9D8];
  v89 = specialized Dictionary.getAsType<A>(key:)(0x4165726975716572, 0xEA00000000006C6CLL, v59);
  v90 = specialized Dictionary.getAsType<A>(key:)(0x6E6F6973726576, 0xE700000000000000, v59);
  v92 = *(_QWORD *)&v277;
  if ((v91 & 1) == 0)
    v92 = v90;
  v277 = *(double *)&v92;
  v93 = specialized Dictionary.getAsType<A>(key:)(0x65726F6373, 0xE500000000000000, v59);
  v265 = v59;
  if (*(uint64_t *)&v277 > 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1)
      swift_once();
    v95 = v279;
    v96 = __swift_project_value_buffer(v279, (uint64_t)static Logger.executor);
    v97 = v276;
    (*(void (**)(char *, uint64_t, uint64_t))(v276 + 16))(v8, v96, v95);
    v98 = Logger.logObject.getter();
    v99 = static os_log_type_t.error.getter();
    v100 = os_log_type_enabled(v98, v99);
    v101 = *(_QWORD *)&v277;
    if (v100)
    {
      v102 = swift_slowAlloc();
      *(_DWORD *)v102 = 134218240;
      *(_QWORD *)&v282 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v102 + 12) = 2048;
      *(_QWORD *)&v282 = 1;
      v97 = v276;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v98, v99, "bad version: got %ld, newer than our version %ld", (uint8_t *)v102, 0x16u);
      MEMORY[0x1B5E44758](v102, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v97 + 8))(v8, v95);
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(_QWORD *)v103 = v101;
    *(_BYTE *)(v103 + 8) = 0;
    return swift_willThrow();
  }
  v261 = v93;
  v262 = v94;
  v266 = 0;
  v256 = v15;
  v263 = v89 & 1;
  if (one-time initialization token for executor != -1)
    swift_once();
  v104 = v279;
  v105 = __swift_project_value_buffer(v279, (uint64_t)static Logger.executor);
  v106 = v276;
  v107 = *(void (**)(char *, uint64_t, uint64_t))(v276 + 16);
  v258 = v105;
  v257 = v107;
  ((void (*)(char *))v107)(v31);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v108 = Logger.logObject.getter();
  v109 = static os_log_type_t.debug.getter();
  LODWORD(v260) = v109;
  if (os_log_type_enabled(v108, v109))
  {
    v110 = swift_slowAlloc();
    v255 = swift_slowAlloc();
    *(_QWORD *)&v280[0] = v255;
    *(_DWORD *)v110 = 136315906;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v282 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61._countAndFlagsBits, (unint64_t)v61._object, (uint64_t *)v280);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v110 + 12) = 2080;
    *(_QWORD *)&v282 = v261;
    BYTE8(v282) = v262 & 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
    v111 = String.init<A>(describing:)();
    *(_QWORD *)&v282 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, (uint64_t *)v280);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v110 + 22) = 2048;
    v113 = *(_QWORD *)(v88 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v282 = v113;
    object = v61._object;
    countAndFlagsBits = v61._countAndFlagsBits;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v110 + 32) = 1024;
    LODWORD(v282) = v263;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v108, (os_log_type_t)v260, "Loading scorer type=%s, score=%s, childCount=%ld, requireAll=%{BOOL}d", (uint8_t *)v110, 0x26u);
    v114 = v255;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v114, -1, -1);
    MEMORY[0x1B5E44758](v110, -1, -1);

    v115 = *(void (**)(char *, uint64_t))(v276 + 8);
    v115(v31, v279);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v115 = *(void (**)(char *, uint64_t))(v106 + 8);
    v115(v31, v104);
  }
  v260 = v115;
  v264 = object;
  v259 = countAndFlagsBits;
  if (countAndFlagsBits == 7235949 && object == (void *)0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v116 = *(_QWORD *)(v88 + 16);
    if (v116)
    {
      v284 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v116, 0);
      v276 = v88;
      v117 = v88 + 32;
      while (1)
      {
        v118 = outlined init with copy of Any(v117, (uint64_t)v280);
        MEMORY[0x1E0C80A78](v118);
        v119 = *(_QWORD *)&v277;
        *(&v255 - 2) = (uint64_t)v280;
        *(&v255 - 1) = v119;
        v120 = v266;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001B4EF66C0, (void (*)(_QWORD *__return_ptr, _QWORD))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v282);
        v266 = v120;
        if (v120)
          break;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v280);
        v121 = v284;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v121 + 16) + 1, 1);
          v121 = v284;
        }
        v123 = *(_QWORD *)(v121 + 16);
        v122 = *(_QWORD *)(v121 + 24);
        if (v123 >= v122 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v122 > 1, v123 + 1, 1);
          v121 = v284;
        }
        *(_QWORD *)(v121 + 16) = v123 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v282, v121 + 40 * v123 + 32);
        v117 += 32;
        if (!--v116)
        {
          swift_bridgeObjectRelease();
          goto LABEL_96;
        }
      }
LABEL_156:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v280);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    v121 = MEMORY[0x1E0DEE9D8];
LABEL_96:
    if (*(_QWORD *)(v121 + 16))
    {
      swift_bridgeObjectRelease();
      v132 = swift_allocObject();
      *(_BYTE *)(v132 + 16) = 1;
      v133 = swift_allocObject();
      *(_BYTE *)(v133 + 16) = 0;
      v134 = swift_allocObject();
      *(_QWORD *)(v134 + 16) = v132;
      *(_BYTE *)(v134 + 24) = v263;
      *(_QWORD *)(v134 + 32) = v133;
      v135 = type metadata accessor for CombiningAffinityScorer(0);
      v136 = swift_allocObject();
      v43 = v136;
      *(_QWORD *)(v136 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v121;
      v137 = OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer;
      v138 = closure #1 in static CombiningAffinityScorer.min(children:requireAll:)partial apply;
LABEL_118:
      v155 = (uint64_t (**)())(v136 + v137);
      *v155 = v138;
      v155[1] = (uint64_t (*)())v134;
      swift_bridgeObjectRetain();
      UUID.init()();
      v156 = v43 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
      *(_QWORD *)v156 = 0;
      *(_WORD *)(v156 + 8) = 256;
      swift_bridgeObjectRelease();
      v40 = v278;
      v278[3] = v135;
LABEL_119:
      v78 = (unint64_t *)&lazy protocol witness table cache variable for type CombiningAffinityScorer and conformance CachingAffinityScorer;
      v79 = &protocol conformance descriptor for CachingAffinityScorer;
      v80 = type metadata accessor for CombiningAffinityScorer;
LABEL_38:
      result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(v78, v80, (uint64_t)v79);
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    v257(v275, v258, v279);
    swift_bridgeObjectRetain();
    v139 = Logger.logObject.getter();
    v140 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v139, v140))
    {
      v141 = (uint8_t *)swift_slowAlloc();
      v142 = swift_slowAlloc();
      *(_QWORD *)&v282 = v142;
      *(_DWORD *)v141 = 136315138;
      v143 = (unint64_t)v264;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v259, v143, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v139, v140, "bad operand count, \"%s\" operator has no children", v141, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v142, -1, -1);
      MEMORY[0x1B5E44758](v141, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v144 = v275;
    goto LABEL_102;
  }
  v276 = v88;
  if (countAndFlagsBits == 7889261 && object == (void *)0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v124 = *(_QWORD *)(v276 + 16);
    if (v124)
    {
      v284 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v124, 0);
      v125 = v276 + 32;
      while (1)
      {
        v126 = outlined init with copy of Any(v125, (uint64_t)v280);
        MEMORY[0x1E0C80A78](v126);
        v127 = *(_QWORD *)&v277;
        *(&v255 - 2) = (uint64_t)v280;
        *(&v255 - 1) = v127;
        v128 = v266;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001B4EF66C0, (void (*)(_QWORD *__return_ptr, _QWORD))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v282);
        v266 = v128;
        if (v128)
          goto LABEL_156;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v280);
        v129 = v284;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v129 + 16) + 1, 1);
          v129 = v284;
        }
        v131 = *(_QWORD *)(v129 + 16);
        v130 = *(_QWORD *)(v129 + 24);
        if (v131 >= v130 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v130 > 1, v131 + 1, 1);
          v129 = v284;
        }
        *(_QWORD *)(v129 + 16) = v131 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v282, v129 + 40 * v131 + 32);
        v125 += 32;
        if (!--v124)
        {
          swift_bridgeObjectRelease();
          goto LABEL_116;
        }
      }
    }
    swift_bridgeObjectRelease();
    v129 = MEMORY[0x1E0DEE9D8];
LABEL_116:
    if (*(_QWORD *)(v129 + 16))
    {
      swift_bridgeObjectRelease();
      v153 = swift_allocObject();
      *(_BYTE *)(v153 + 16) = 1;
      v154 = swift_allocObject();
      *(_BYTE *)(v154 + 16) = 0;
      v134 = swift_allocObject();
      *(_QWORD *)(v134 + 16) = v153;
      *(_BYTE *)(v134 + 24) = v263;
      *(_QWORD *)(v134 + 32) = v154;
      v135 = type metadata accessor for CombiningAffinityScorer(0);
      v136 = swift_allocObject();
      v43 = v136;
      *(_QWORD *)(v136 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v129;
      v137 = OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer;
      v138 = closure #1 in static CombiningAffinityScorer.max(children:requireAll:)partial apply;
      goto LABEL_118;
    }
    swift_bridgeObjectRelease();
    v257(v274, v258, v279);
    swift_bridgeObjectRetain();
    v157 = Logger.logObject.getter();
    v158 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v157, v158))
    {
      v159 = (uint8_t *)swift_slowAlloc();
      v160 = swift_slowAlloc();
      *(_QWORD *)&v282 = v160;
      *(_DWORD *)v159 = 136315138;
      v161 = (unint64_t)v264;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v259, v161, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v157, v158, "bad operand count, \"%s\" operator has no children", v159, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v160, -1, -1);
      MEMORY[0x1B5E44758](v159, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v144 = v274;
    goto LABEL_102;
  }
  if (v259 == 7173491 && v264 == (void *)0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v145 = *(_QWORD *)(v276 + 16);
    if (v145)
    {
      v284 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v145, 0);
      v146 = v276 + 32;
      while (1)
      {
        v147 = outlined init with copy of Any(v146, (uint64_t)v280);
        MEMORY[0x1E0C80A78](v147);
        v148 = *(_QWORD *)&v277;
        *(&v255 - 2) = (uint64_t)v280;
        *(&v255 - 1) = v148;
        v149 = v266;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001B4EF66C0, (void (*)(_QWORD *__return_ptr, _QWORD))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v282);
        v266 = v149;
        if (v149)
          goto LABEL_156;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v280);
        v150 = v284;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v150 + 16) + 1, 1);
          v150 = v284;
        }
        v152 = *(_QWORD *)(v150 + 16);
        v151 = *(_QWORD *)(v150 + 24);
        if (v152 >= v151 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v151 > 1, v152 + 1, 1);
          v150 = v284;
        }
        *(_QWORD *)(v150 + 16) = v152 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v282, v150 + 40 * v152 + 32);
        v146 += 32;
        if (!--v145)
        {
          swift_bridgeObjectRelease();
          goto LABEL_137;
        }
      }
    }
    swift_bridgeObjectRelease();
    v150 = MEMORY[0x1E0DEE9D8];
LABEL_137:
    if (*(_QWORD *)(v150 + 16))
    {
      swift_bridgeObjectRelease();
      v170 = swift_allocObject();
      *(_BYTE *)(v170 + 16) = 1;
      v171 = swift_allocObject();
      *(_BYTE *)(v171 + 16) = 0;
      v134 = swift_allocObject();
      *(_QWORD *)(v134 + 16) = v170;
      *(_BYTE *)(v134 + 24) = v263;
      *(_QWORD *)(v134 + 32) = v171;
      v135 = type metadata accessor for CombiningAffinityScorer(0);
      v136 = swift_allocObject();
      v43 = v136;
      *(_QWORD *)(v136 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v150;
      v137 = OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer;
      v138 = closure #1 in static CombiningAffinityScorer.sum(children:requireAll:)partial apply;
      goto LABEL_118;
    }
    swift_bridgeObjectRelease();
    v257(v273, v258, v279);
    swift_bridgeObjectRetain();
    v172 = Logger.logObject.getter();
    v173 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v172, v173))
    {
      v174 = (uint8_t *)swift_slowAlloc();
      v175 = swift_slowAlloc();
      *(_QWORD *)&v282 = v175;
      *(_DWORD *)v174 = 136315138;
      v176 = (unint64_t)v264;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v259, v176, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v172, v173, "bad operand count, \"%s\" operator has no children", v174, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v175, -1, -1);
      MEMORY[0x1B5E44758](v174, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v144 = v273;
    goto LABEL_102;
  }
  if (v259 == 0x7473726966 && v264 == (void *)0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v162 = *(_QWORD *)(v276 + 16);
    if (v162)
    {
      v284 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v162, 0);
      v163 = v276 + 32;
      while (1)
      {
        v164 = outlined init with copy of Any(v163, (uint64_t)v280);
        MEMORY[0x1E0C80A78](v164);
        v165 = *(_QWORD *)&v277;
        *(&v255 - 2) = (uint64_t)v280;
        *(&v255 - 1) = v165;
        v166 = v266;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001B4EF66C0, (void (*)(_QWORD *__return_ptr, _QWORD))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v282);
        v266 = v166;
        if (v166)
          goto LABEL_156;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v280);
        v167 = v284;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v167 + 16) + 1, 1);
          v167 = v284;
        }
        v169 = *(_QWORD *)(v167 + 16);
        v168 = *(_QWORD *)(v167 + 24);
        if (v169 >= v168 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v168 > 1, v169 + 1, 1);
          v167 = v284;
        }
        *(_QWORD *)(v167 + 16) = v169 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v282, v167 + 40 * v169 + 32);
        v163 += 32;
        if (!--v162)
        {
          swift_bridgeObjectRelease();
          goto LABEL_157;
        }
      }
    }
    swift_bridgeObjectRelease();
    v167 = MEMORY[0x1E0DEE9D8];
LABEL_157:
    if (*(_QWORD *)(v167 + 16))
    {
      swift_bridgeObjectRelease();
      v185 = type metadata accessor for CombiningAffinityScorer(0);
      v186 = swift_allocObject();
      v43 = v186;
      *(_QWORD *)(v186 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v167;
      v187 = OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer;
      v188 = closure #1 in static CombiningAffinityScorer.first(children:);
LABEL_159:
      v189 = (_QWORD *)(v186 + v187);
      *v189 = v188;
      v189[1] = 0;
      swift_bridgeObjectRetain();
      UUID.init()();
      v190 = v43 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
      *(_QWORD *)v190 = 0;
      *(_WORD *)(v190 + 8) = 256;
      swift_bridgeObjectRelease();
      v40 = v278;
      v278[3] = v185;
      v78 = (unint64_t *)&lazy protocol witness table cache variable for type CombiningAffinityScorer and conformance CachingAffinityScorer;
      v79 = &protocol conformance descriptor for CachingAffinityScorer;
      v80 = type metadata accessor for CombiningAffinityScorer;
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    v257(v272, v258, v279);
    swift_bridgeObjectRetain();
    v191 = Logger.logObject.getter();
    v192 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v191, v192))
    {
      v193 = (uint8_t *)swift_slowAlloc();
      v194 = swift_slowAlloc();
      *(_QWORD *)&v282 = v194;
      *(_DWORD *)v193 = 136315138;
      v195 = (unint64_t)v264;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v259, v195, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v191, v192, "bad operand count, \"%s\" operator has no children", v193, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v194, -1, -1);
      MEMORY[0x1B5E44758](v193, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v144 = v272;
    goto LABEL_102;
  }
  if (v259 == 1953718636 && v264 == (void *)0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v177 = *(_QWORD *)(v276 + 16);
    if (v177)
    {
      v284 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v177, 0);
      v178 = v276 + 32;
      while (1)
      {
        v179 = outlined init with copy of Any(v178, (uint64_t)v280);
        MEMORY[0x1E0C80A78](v179);
        v180 = *(_QWORD *)&v277;
        *(&v255 - 2) = (uint64_t)v280;
        *(&v255 - 1) = v180;
        v181 = v266;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001B4EF66C0, (void (*)(_QWORD *__return_ptr, _QWORD))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v282);
        v266 = v181;
        if (v181)
          goto LABEL_156;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v280);
        v182 = v284;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v182 + 16) + 1, 1);
          v182 = v284;
        }
        v184 = *(_QWORD *)(v182 + 16);
        v183 = *(_QWORD *)(v182 + 24);
        if (v184 >= v183 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v183 > 1, v184 + 1, 1);
          v182 = v284;
        }
        *(_QWORD *)(v182 + 16) = v184 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v282, v182 + 40 * v184 + 32);
        v178 += 32;
        if (!--v177)
        {
          swift_bridgeObjectRelease();
          goto LABEL_177;
        }
      }
    }
    swift_bridgeObjectRelease();
    v182 = MEMORY[0x1E0DEE9D8];
LABEL_177:
    if (*(_QWORD *)(v182 + 16))
    {
      swift_bridgeObjectRelease();
      v185 = type metadata accessor for CombiningAffinityScorer(0);
      v186 = swift_allocObject();
      v43 = v186;
      *(_QWORD *)(v186 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v182;
      v187 = OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer;
      v188 = closure #1 in static CombiningAffinityScorer.last(children:);
      goto LABEL_159;
    }
    swift_bridgeObjectRelease();
    v257(v271, v258, v279);
    swift_bridgeObjectRetain();
    v204 = Logger.logObject.getter();
    v205 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v204, v205))
    {
      v206 = (uint8_t *)swift_slowAlloc();
      v207 = swift_slowAlloc();
      *(_QWORD *)&v282 = v207;
      *(_DWORD *)v206 = 136315138;
      v208 = (unint64_t)v264;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v259, v208, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v204, v205, "bad operand count, \"%s\" operator has no children", v206, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v207, -1, -1);
      MEMORY[0x1B5E44758](v206, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v144 = v271;
LABEL_102:
    v260(v144, v279);
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    v87 = 2;
    goto LABEL_47;
  }
  if (v259 == 0x747265766E69 && v264 == (void *)0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v196 = *(_QWORD *)(v276 + 16);
    if (v196)
    {
      v284 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v196, 0);
      v197 = v276 + 32;
      while (1)
      {
        v198 = outlined init with copy of Any(v197, (uint64_t)v280);
        MEMORY[0x1E0C80A78](v198);
        v199 = *(_QWORD *)&v277;
        *(&v255 - 2) = (uint64_t)v280;
        *(&v255 - 1) = v199;
        v200 = v266;
        specialized logAction<A>(label:_:)(0xD000000000000012, 0x80000001B4EF66C0, (void (*)(_QWORD *__return_ptr, _QWORD))closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply, (uint64_t)&v282);
        v266 = v200;
        if (v200)
          goto LABEL_156;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v280);
        v201 = v284;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v201 + 16) + 1, 1);
          v201 = v284;
        }
        v203 = *(_QWORD *)(v201 + 16);
        v202 = *(_QWORD *)(v201 + 24);
        if (v203 >= v202 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v202 > 1, v203 + 1, 1);
          v201 = v284;
        }
        *(_QWORD *)(v201 + 16) = v203 + 1;
        outlined init with take of ReferenceResolutionClientProtocol(&v282, v201 + 40 * v203 + 32);
        v197 += 32;
        if (!--v196)
        {
          swift_bridgeObjectRelease();
          goto LABEL_187;
        }
      }
    }
    swift_bridgeObjectRelease();
    v201 = MEMORY[0x1E0DEE9D8];
LABEL_187:
    v209 = *(_QWORD *)(v201 + 16);
    if (v209 != 1)
    {
      v257(v270, v258, v279);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v215 = Logger.logObject.getter();
      v216 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v215, v216))
      {
        v217 = swift_slowAlloc();
        v218 = swift_slowAlloc();
        *(_QWORD *)&v282 = v218;
        *(_DWORD *)v217 = 136315394;
        v219 = (unint64_t)v264;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v259, v219, (uint64_t *)&v282);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v217 + 12) = 2048;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v280[0] = v209;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v215, v216, "bad operand count, \"%s\" operator has %ld children (should have 1)", (uint8_t *)v217, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v218, -1, -1);
        MEMORY[0x1B5E44758](v217, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      v144 = v270;
      goto LABEL_102;
    }
    result = swift_bridgeObjectRelease();
    if (*(_QWORD *)(v201 + 16))
    {
      outlined init with copy of ReferenceResolutionClientProtocol(v201 + 32, (uint64_t)&v282);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityScorer>);
      v210 = swift_allocObject();
      *(_OWORD *)(v210 + 16) = xmmword_1B4EE3F50;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v282, v210 + 32);
      v211 = swift_allocObject();
      *(_QWORD *)(v211 + 16) = v261;
      *(_BYTE *)(v211 + 24) = v262 & 1;
      v212 = type metadata accessor for CombiningAffinityScorer(0);
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_children) = v210;
      v213 = (_QWORD *)(v43 + OBJC_IVAR____TtC14SiriKitRuntime23CombiningAffinityScorer_reducer);
      *v213 = partial apply for closure #1 in static CombiningAffinityScorer.invert(child:fallbackValue:);
      v213[1] = v211;
      UUID.init()();
      v214 = v43 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
      *(_QWORD *)v214 = 0;
      *(_WORD *)(v214 + 8) = 256;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v282);
      v40 = v278;
      v278[3] = v212;
      goto LABEL_119;
    }
    __break(1u);
    goto LABEL_235;
  }
  if ((v259 != 0x657261706D6F63 || v264 != (void *)0xE700000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v257(v267, v258, v279);
    swift_bridgeObjectRetain();
    v228 = Logger.logObject.getter();
    v229 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v228, v229))
    {
      v230 = (uint8_t *)swift_slowAlloc();
      v231 = swift_slowAlloc();
      *(_QWORD *)&v282 = v231;
      *(_DWORD *)v230 = 136315138;
      v232 = (unint64_t)v264;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v259, v232, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v228, v229, "unknown node type %s; throwing bad encoding", v230, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v231, -1, -1);
      MEMORY[0x1B5E44758](v230, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v233 = &v285;
    goto LABEL_221;
  }
  swift_bridgeObjectRelease();
  v220 = v266;
  v277 = COERCE_DOUBLE(specialized Dictionary.getAsType<A>(key:)(0x726F74617265706FLL, 0xE800000000000000, v265));
  if (v220)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v222 = v221;
  swift_bridgeObjectRelease();
  if (!v222)
  {
    swift_bridgeObjectRelease();
    v82 = Logger.logObject.getter();
    v83 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v82, v83))
      goto LABEL_45;
    v84 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v84 = 0;
    v85 = "bad comparison operator encoding; missing or non-string operator";
LABEL_44:
    _os_log_impl(&dword_1B4BE6000, v82, v83, v85, v84, 2u);
    MEMORY[0x1B5E44758](v84, -1, -1);
LABEL_45:

LABEL_46:
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    v87 = 3;
LABEL_47:
    *(_QWORD *)v86 = v87;
    *(_BYTE *)(v86 + 8) = 1;
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  *(double *)&v287._countAndFlagsBits = v277;
  v287._object = v222;
  v223 = specialized AffinityValueComparison.init(rawValue:)(v287);
  if (v223 == 8)
  {
    swift_bridgeObjectRelease();
    v257(v268, v258, v279);
    swift_bridgeObjectRetain();
    v224 = Logger.logObject.getter();
    v225 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v224, v225))
    {
      v226 = (uint8_t *)swift_slowAlloc();
      v227 = swift_slowAlloc();
      *(_QWORD *)&v282 = v227;
      *(_DWORD *)v226 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v277, (unint64_t)v222, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v224, v225, "unknown comparison operator %s; throwing badEncoding", v226, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v227, -1, -1);
      MEMORY[0x1B5E44758](v226, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v233 = &v286;
LABEL_221:
    v260((char *)*(v233 - 32), v279);
    goto LABEL_46;
  }
  v234 = v223;
  v235 = *(_QWORD *)(v276 + 16);
  if ((v223 & 0xFE) == 6)
    v236 = 1;
  else
    v236 = 2;
  if (v235 != v236)
  {
    v257(v269, v258, v279);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v241 = Logger.logObject.getter();
    v242 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v241, v242))
    {
      v243 = swift_slowAlloc();
      v244 = swift_slowAlloc();
      *(_QWORD *)&v282 = v244;
      *(_DWORD *)v243 = 134218498;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v280[0] = v235;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v243 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v277, (unint64_t)v222, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v243 + 22) = 2048;
      *(_QWORD *)&v280[0] = v236;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v241, v242, "bad operand count %ld for operator %s; needs %ld",
        (uint8_t *)v243,
        0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v244, -1, -1);
      MEMORY[0x1B5E44758](v243, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v144 = v269;
    goto LABEL_102;
  }
  v284 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v235, 0);
  v237 = v276 + 32;
  while (v235)
  {
    outlined init with copy of Any(v237, (uint64_t)v280);
    static AffinityScore.loadValueFetcher(from:)((uint64_t)v280, (uint64_t *)&v282);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v280);
    v238 = v284;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v238 + 16) + 1, 1);
      v238 = v284;
    }
    v240 = *(_QWORD *)(v238 + 16);
    v239 = *(_QWORD *)(v238 + 24);
    if (v240 >= v239 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v239 > 1, v240 + 1, 1);
      v238 = v284;
    }
    *(_QWORD *)(v238 + 16) = v240 + 1;
    result = outlined init with take of ReferenceResolutionClientProtocol(&v282, v238 + 32 + 40 * v240);
    v237 += 32;
    if (!--v235)
    {
      swift_bridgeObjectRelease();
      v257(v256, v258, v279);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v245 = Logger.logObject.getter();
      v246 = static os_log_type_t.debug.getter();
      LODWORD(v276) = v246;
      if (os_log_type_enabled(v245, v246))
      {
        v248 = swift_slowAlloc();
        v275 = (char *)swift_slowAlloc();
        *(_QWORD *)&v282 = v275;
        *(_DWORD *)v248 = 136315394;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v280[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v277, (unint64_t)v222, (uint64_t *)&v282);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v248 + 12) = 2048;
        v249 = *(_QWORD *)(v238 + 16);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v280[0] = v249;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v245, (os_log_type_t)v276, "returning CombiningAffinityScorer(oper=%s, children=%ld)", (uint8_t *)v248, 0x16u);
        v250 = v275;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v250, -1, -1);
        MEMORY[0x1B5E44758](v248, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      result = ((uint64_t (*)(char *, uint64_t))v260)(v256, v279);
      v251 = *(_QWORD *)(v238 + 16);
      if (v251 == 2)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(v238 + 32, (uint64_t)&v282);
        outlined init with copy of ReferenceResolutionClientProtocol(v238 + 72, (uint64_t)v280);
        swift_bridgeObjectRelease();
        v252 = type metadata accessor for ComparingAffinityScorer(0);
      }
      else
      {
        if (!v251)
          goto LABEL_236;
        outlined init with copy of ReferenceResolutionClientProtocol(v238 + 32, (uint64_t)&v282);
        swift_bridgeObjectRelease();
        v252 = type metadata accessor for ComparingAffinityScorer(0);
        memset(v280, 0, sizeof(v280));
        v281 = 0;
      }
      v43 = swift_allocObject();
      v253 = v43 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_score;
      *(_QWORD *)v253 = v261;
      *(_BYTE *)(v253 + 8) = v262 & 1;
      *(_BYTE *)(v43 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_comparison) = v234;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v282, v43 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_first);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v280, v43 + OBJC_IVAR____TtC14SiriKitRuntime23ComparingAffinityScorer_second, &demangling cache variable for type metadata for AffinityValueFetcher?);
      UUID.init()();
      v254 = v43 + OBJC_IVAR____TtC14SiriKitRuntime21CachingAffinityScorer_scoreState;
      *(_QWORD *)v254 = 0;
      *(_WORD *)(v254 + 8) = 256;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v280, &demangling cache variable for type metadata for AffinityValueFetcher?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v282);
      v40 = v278;
      v278[3] = v252;
      result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ComparingAffinityScorer and conformance CachingAffinityScorer, type metadata accessor for ComparingAffinityScorer, (uint64_t)&protocol conformance descriptor for CachingAffinityScorer);
      goto LABEL_16;
    }
  }
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.getAsType<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v4, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(_QWORD *)v7 = 3;
    *(_BYTE *)(v7 + 8) = 1;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v4, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(_QWORD *)v7 = 3;
    *(_BYTE *)(v7 + 8) = 1;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v7;
  unsigned __int8 v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if (!*(_QWORD *)(a3 + 16))
    return 2;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
    return 2;
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v4, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(_QWORD *)v7 = 3;
    *(_BYTE *)(v7 + 8) = 1;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

{
  unint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v4, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
    swift_allocError();
    *(_QWORD *)v7 = 3;
    *(_BYTE *)(v7 + 8) = 1;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

uint64_t static AffinityScore.loadValueFetcher(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _OWORD v60[4];
  _BYTE v61[32];
  _BYTE v62[32];
  _OWORD v63[2];
  _OWORD v64[3];

  outlined init with copy of Any(a1, (uint64_t)v64);
  if (swift_dynamicCast())
  {
    v4 = *(_QWORD *)&v63[0];
    if (one-time initialization token for executor != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v8 = 134217984;
      *(_QWORD *)&v64[0] = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v6, v7, "FixedValueFetcher(value: %ld)", v8, 0xCu);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }

    *(_QWORD *)&v64[0] = v4;
    v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v11 = v10;
    v12 = type metadata accessor for FixedValueFetcher();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
    *(_QWORD *)(result + 24) = v11;
    a2[3] = v12;
    goto LABEL_25;
  }
  outlined init with copy of Any(a1, (uint64_t)v64);
  if (swift_dynamicCast())
  {
    v14 = *(_QWORD *)&v63[0];
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v18 = 134217984;
      *(_QWORD *)&v64[0] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v16, v17, "FixedValueFetcher(value: %f)", v18, 0xCu);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

    *(_QWORD *)&v64[0] = 0;
    *((_QWORD *)&v64[0] + 1) = 0xE000000000000000;
    Double.write<A>(to:)();
    v19 = v64[0];
    v20 = type metadata accessor for FixedValueFetcher();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v19;
LABEL_24:
    a2[3] = v20;
LABEL_25:
    a2[4] = (uint64_t)&protocol witness table for FixedValueFetcher;
    *a2 = result;
    return result;
  }
  outlined init with copy of Any(a1, (uint64_t)v64);
  if (swift_dynamicCast())
  {
    v21 = v63[0];
    if (one-time initialization token for executor != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      *(_QWORD *)&v64[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v63[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, *((unint64_t *)&v21 + 1), (uint64_t *)v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v23, v24, "FixedValueFetcher(value: \"%s\")", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v26, -1, -1);
      MEMORY[0x1B5E44758](v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v20 = type metadata accessor for FixedValueFetcher();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v21;
    goto LABEL_24;
  }
  outlined init with copy of Any(a1, (uint64_t)v64);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  if (swift_dynamicCast())
  {
    if (*(_QWORD *)(*(_QWORD *)&v63[0] + 16)
      && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D6E6F7269766E65, 0xEB00000000746E65),
          (v28 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)&v63[0] + 56) + 32 * v27, (uint64_t)v64);
    }
    else
    {
      memset(v64, 0, 32);
    }
    if (*(_QWORD *)(*(_QWORD *)&v63[0] + 16)
      && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x7475706E69, 0xE500000000000000), (v35 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)&v63[0] + 56) + 32 * v34, (uint64_t)v63);
    }
    else
    {
      memset(v63, 0, sizeof(v63));
    }
    swift_bridgeObjectRelease();
    v60[3] = xmmword_1B4EE3BA0;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v64, (uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v61, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v60, (uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v57)
    {
      outlined init with take of Any(&v56, &v58);
      outlined init with take of Any(&v58, &v56);
      v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      v38 = v36[2];
      v37 = v36[3];
      if (v38 >= v37 >> 1)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v36);
      v36[2] = v38 + 1;
      outlined init with take of Any(&v56, &v36[4 * v38 + 4]);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v62, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v60, (uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v57)
    {
      outlined init with take of Any(&v56, &v58);
      outlined init with take of Any(&v58, &v56);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      v40 = v36[2];
      v39 = v36[3];
      if (v40 >= v39 >> 1)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v36);
      v36[2] = v40 + 1;
      outlined init with take of Any(&v56, &v36[4 * v40 + 4]);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_arrayDestroy();
    v41 = v36[2];
    swift_bridgeObjectRelease();
    if (v41 == 1)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v64, (uint64_t)&v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v59)
      {
        outlined init with take of Any(&v58, v60);
        outlined init with copy of Any((uint64_t)v60, (uint64_t)&v58);
        v42 = type metadata accessor for EnvironmentValueFetcher();
        swift_allocObject();
        v43 = (uint64_t)EnvironmentValueFetcher.init(plist:)((uint64_t)&v58);
        if (v43)
        {
          v44 = &protocol witness table for EnvironmentValueFetcher;
LABEL_63:
          a2[3] = v42;
          a2[4] = (uint64_t)v44;
          *a2 = v43;
LABEL_65:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
          goto LABEL_66;
        }
        goto LABEL_64;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t)&v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v59)
      {
        outlined init with take of Any(&v58, v60);
        outlined init with copy of Any((uint64_t)v60, (uint64_t)&v58);
        v42 = type metadata accessor for InputValueFetcher();
        swift_allocObject();
        v43 = InputValueFetcher.init(plist:)((uint64_t)&v58);
        if (v43)
        {
          v44 = &protocol witness table for InputValueFetcher;
          goto LABEL_63;
        }
LABEL_64:
        lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
        swift_allocError();
        *(_QWORD *)v50 = 3;
        *(_BYTE *)(v50 + 8) = 1;
        swift_willThrow();
        goto LABEL_65;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (one-time initialization token for executor != -1)
        swift_once();
      v51 = type metadata accessor for Logger();
      __swift_project_value_buffer(v51, (uint64_t)static Logger.executor);
      v52 = Logger.logObject.getter();
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v54 = 0;
        _os_log_impl(&dword_1B4BE6000, v52, v53, "loadValueFetcher logic error", v54, 2u);
        MEMORY[0x1B5E44758](v54, -1, -1);
      }

      lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
      swift_allocError();
      *(_QWORD *)v55 = 1;
      *(_BYTE *)(v55 + 8) = 1;
    }
    else
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.executor);
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_1B4BE6000, v46, v47, "value fetcher must be either an input fetcher XOR an environment value fetcher", v48, 2u);
        MEMORY[0x1B5E44758](v48, -1, -1);
      }

      lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
      swift_allocError();
      *(_QWORD *)v49 = 3;
      *(_BYTE *)(v49 + 8) = 1;
    }
    swift_willThrow();
LABEL_66:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_1B4BE6000, v30, v31, "bad encoding, not fixed or a dict", v32, 2u);
    MEMORY[0x1B5E44758](v32, -1, -1);
  }

  lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError();
  swift_allocError();
  *(_QWORD *)v33 = 3;
  *(_BYTE *)(v33 + 8) = 1;
  return swift_willThrow();
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  MEMORY[0x1E0C80A78](a1);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Result();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t specialized logAction<A>(label:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v27[5];
  uint64_t v28;
  _QWORD v29[5];
  __int128 v30[2];

  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v25 = a3;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = a5;
    v14 = a4;
    v15 = swift_slowAlloc();
    *(_QWORD *)&v30[0] = v15;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "==>> %s", v12, 0xCu);
    swift_arrayDestroy();
    v16 = v15;
    a4 = v14;
    a5 = v13;
    MEMORY[0x1B5E44758](v16, -1, -1);
    v17 = v12;
    a3 = v25;
    MEMORY[0x1B5E44758](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  closure #1 in implicit closure #1 in RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(a3, a4, (uint64_t *)v30);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v30, (uint64_t)v29);
  swift_bridgeObjectRetain_n();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v28 = v21;
    *(_DWORD *)v20 = 136315394;
    swift_bridgeObjectRetain();
    v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v29, (uint64_t)v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScorer);
    v22 = String.init<A>(describing:)();
    v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    _os_log_impl(&dword_1B4BE6000, v18, v19, "<<== %s -> %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }

  outlined init with take of ReferenceResolutionClientProtocol(v30, a5);
  return swift_bridgeObjectRelease();
}

void logAction<A>(label:_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v34 - v14;
  if (one-time initialization token for executor != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v38 = v17;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v36 = v15;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v35 = a6;
    v23 = v22;
    v41 = v22;
    v34 = a4;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain();
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, a2, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v18, v19, "==>> %s", v21, 0xCu);
    swift_arrayDestroy();
    v24 = v23;
    a6 = v35;
    MEMORY[0x1B5E44758](v24, -1, -1);
    v25 = v21;
    v15 = v36;
    MEMORY[0x1B5E44758](v25, -1, -1);

  }
  else
  {

    v26 = swift_bridgeObjectRelease_n();
  }
  a3(v26);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v27(v15, a6, a5);
  swift_bridgeObjectRetain_n();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v41 = v31;
    *(_DWORD *)v30 = 136315394;
    v38 = v11;
    swift_bridgeObjectRetain();
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, a2, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2080;
    v27(v37, (uint64_t)v15, a5);
    v32 = String.init<A>(describing:)();
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v15, a5);
    _os_log_impl(&dword_1B4BE6000, v28, v29, "<<== %s -> %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v31, -1, -1);
    MEMORY[0x1B5E44758](v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, a5);
  }

}

uint64_t partial apply for closure #1 in logAction<A>(label:_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 24))();
  if (v2)
    *a1 = v2;
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for RemoteConversationClient();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        result = Hasher._finalize()();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for LNSystemProtocol();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Task<SABaseCommand?, Error>>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v5 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v6 = ~(-1 << v4);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v1 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    v9 = v2 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v5[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v5[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v5[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v26 = 1 << *(_BYTE *)(v1 + 32);
                if (v26 > 63)
                  bzero((void *)(v1 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v5 = -1 << v26;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v16 = v5[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v5[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      Task.hash(into:)();
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v3 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v27 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v27[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v27[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v27 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v27[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  unint64_t *v45;
  uint64_t v46;

  v45 = a4;
  v46 = a5;
  v7 = v5;
  v44 = a2;
  v8 = a2(0);
  v43 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - v9;
  v11 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v12 = static _SetStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 56);
    v42 = (_QWORD *)(v11 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v40 = v5;
    v41 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    result = swift_retain();
    v20 = 0;
    while (1)
    {
      if (v17)
      {
        v22 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v23 = v22 | (v20 << 6);
      }
      else
      {
        v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v24 >= v41)
          goto LABEL_33;
        v25 = v42[v24];
        ++v20;
        if (!v25)
        {
          v20 = v24 + 1;
          if (v24 + 1 >= v41)
            goto LABEL_33;
          v25 = v42[v20];
          if (!v25)
          {
            v20 = v24 + 2;
            if (v24 + 2 >= v41)
              goto LABEL_33;
            v25 = v42[v20];
            if (!v25)
            {
              v26 = v24 + 3;
              if (v26 >= v41)
              {
LABEL_33:
                swift_release();
                v7 = v40;
                v38 = 1 << *(_BYTE *)(v11 + 32);
                if (v38 > 63)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v11 + 16) = 0;
                break;
              }
              v25 = v42[v26];
              if (!v25)
              {
                while (1)
                {
                  v20 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    goto LABEL_39;
                  if (v20 >= v41)
                    goto LABEL_33;
                  v25 = v42[v20];
                  ++v26;
                  if (v25)
                    goto LABEL_23;
                }
              }
              v20 = v26;
            }
          }
        }
LABEL_23:
        v17 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v20 << 6);
      }
      v27 = v11;
      v28 = *(_QWORD *)(v11 + 48);
      v29 = *(_QWORD *)(v43 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 32);
      v30(v10, v28 + v29 * v23, v8);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(v45, v44, v46);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v31 = -1 << *(_BYTE *)(v13 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
      {
        v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v18 + 8 * v33);
        }
        while (v37 == -1);
        v21 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v30)(*(_QWORD *)(v13 + 48) + v21 * v29, v10, v8);
      ++*(_QWORD *)(v13 + 16);
      v11 = v27;
    }
  }
  result = swift_release();
  *v7 = v13;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Task<SABaseCommand?, Error>>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9EE08], &demangling cache variable for type metadata for _SetStorage<ConversationSessionKey>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v27 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release();
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Task<SABaseCommand?, Error>>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v5 = v1 + 56;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v1 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  v9 = v2 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v8)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v8)
        goto LABEL_33;
      v16 = *(_QWORD *)(v5 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v8)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    Task.hash(into:)();
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v3 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v3 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v8)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v8)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v26 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v26)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v26)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v26)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v26)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v26)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t (*v39)(uint64_t);
  unint64_t *v40;
  uint64_t v41;

  v40 = a4;
  v41 = a5;
  v7 = v5;
  v39 = a2;
  v8 = a2(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - v10;
  v12 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_release();
LABEL_35:
    *v7 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v36 = v5;
  v37 = v12 + 56;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v38 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain();
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v25 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v37 + 8 * v25);
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v38)
        goto LABEL_33;
      v26 = *(_QWORD *)(v37 + 8 * v21);
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v38)
          goto LABEL_33;
        v26 = *(_QWORD *)(v37 + 8 * v21);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, *(_QWORD *)(v12 + 48) + v28 * v24, v8);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(v40, v39, v41);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v14 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v19 + 8 * v31);
      }
      while (v35 == -1);
      v22 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v22 * v28, v11, v8);
    ++*(_QWORD *)(v14 + 16);
  }
  v27 = v25 + 3;
  if (v27 >= v38)
  {
LABEL_33:
    result = swift_release_n();
    v7 = v36;
    goto LABEL_35;
  }
  v26 = *(_QWORD *)(v37 + 8 * v27);
  if (v26)
  {
    v21 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    v21 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v21 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v37 + 8 * v21);
    ++v27;
    if (v26)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for AppShortcutGeneralizedInvocation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, v11, MEMORY[0x1E0D9C498]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C488], MEMORY[0x1E0D9C4A0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for UserID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, v11, MEMORY[0x1E0D9EF90]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF98]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for ConversationSessionKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, v11, MEMORY[0x1E0D9EE18]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE20]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t lazy protocol witness table accessor for type AffinityScoreError and conformance AffinityScoreError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AffinityScoreError and conformance AffinityScoreError;
  if (!lazy protocol witness table cache variable for type AffinityScoreError and conformance AffinityScoreError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AffinityScoreError, &type metadata for AffinityScoreError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AffinityScoreError and conformance AffinityScoreError);
  }
  return result;
}

uint64_t partial apply for closure #1 in CombiningAffinityScorer.computeScore(for:loopCheck:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in CombiningAffinityScorer.computeScore(for:loopCheck:)(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1B4CC7E90()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CombiningAffinityScorer.max(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return closure #1 in static CombiningAffinityScorer.max(children:requireAll:)(a1, a2 & 1, a3, a4 & 1, *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t type metadata accessor for CombiningAffinityScorer(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for CombiningAffinityScorer);
}

uint64_t partial apply for closure #1 in static CombiningAffinityScorer.min(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return closure #1 in static CombiningAffinityScorer.min(children:requireAll:)(a1, a2 & 1, a3, a4 & 1, *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t partial apply for closure #1 in static CombiningAffinityScorer.sum(children:requireAll:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return closure #1 in static CombiningAffinityScorer.sum(children:requireAll:)(a1, a2 & 1, a3, a4 & 1, *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t sub_1B4CC7F08()
{
  return swift_deallocObject();
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for RemoteConversationClient();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v25;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v26 = v18;
    if (*(_QWORD *)(v18 + 24) <= *(_QWORD *)(v18 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v19 = v26;
    }
    else
    {
      v19 = v18;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v6 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    {
      v13 = *(_QWORD *)(v6 + 48);
      v14 = *(_QWORD *)(v13 + 8 * v12);
      v15 = *(_QWORD *)(a2 + 112);
      v16 = *(_QWORD *)(a2 + 120);
      v17 = *(_QWORD *)(v14 + 112) == v15 && *(_QWORD *)(v14 + 120) == v16;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_13:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      v20 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v20;
        if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v21 = *(_QWORD *)(v13 + 8 * v12);
        v22 = *(_QWORD *)(v21 + 112) == v15 && *(_QWORD *)(v21 + 120) == v16;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = *v3;
    *v3 = 0x8000000000000000;
    v24 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v24, v12, isUniquelyReferenced_nonNull_native);
    *v3 = v27;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  _QWORD *v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for LNSystemProtocol();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v28 = (_QWORD *)v22;
    if (*(_QWORD *)(v22 + 24) <= *(_QWORD *)(v22 + 16))
    {
      v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      v23 = v28;
    }
    else
    {
      v23 = (_QWORD *)v22;
      v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *v3 = (uint64_t)v23;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for LNSystemProtocol();
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = type metadata accessor for AppShortcutGeneralizedInvocation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C488], &demangling cache variable for type metadata for _SetStorage<AppShortcutGeneralizedInvocation>, &lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E0D9C498]);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9C488], &demangling cache variable for type metadata for _SetStorage<AppShortcutGeneralizedInvocation>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C488], &demangling cache variable for type metadata for _SetStorage<AppShortcutGeneralizedInvocation>, &lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E0D9C498]);
  }
  v13 = *v3;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C488], MEMORY[0x1E0D9C498]);
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C488], MEMORY[0x1E0D9C4A0]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>, &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>, &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  }
  v13 = *v3;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = type metadata accessor for UserID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], &demangling cache variable for type metadata for _SetStorage<UserID>, &lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E0D9EF90]);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9EF80], &demangling cache variable for type metadata for _SetStorage<UserID>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], &demangling cache variable for type metadata for _SetStorage<UserID>, &lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E0D9EF90]);
  }
  v13 = *v3;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF90]);
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF98]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = type metadata accessor for ConversationSessionKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], &demangling cache variable for type metadata for _SetStorage<ConversationSessionKey>, &lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E0D9EE18]);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9EE08], &demangling cache variable for type metadata for _SetStorage<ConversationSessionKey>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], &demangling cache variable for type metadata for _SetStorage<ConversationSessionKey>, &lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E0D9EE18]);
  }
  v13 = *v3;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE20]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_22;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  v10 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for RemoteConversationClient();
    v11 = *(_QWORD *)(v8 + 48);
    v12 = *(_QWORD *)(v11 + 8 * a2);
    v13 = *(_QWORD *)(v5 + 112);
    v14 = *(_QWORD *)(v5 + 120);
    v15 = *(_QWORD *)(v12 + 112) == v13 && *(_QWORD *)(v12 + 120) == v14;
    if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v16 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(_QWORD *)(v11 + 8 * a2);
        if (*(_QWORD *)(v17 + 112) != v13 || *(_QWORD *)(v17 + 120) != v14)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v19 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = v5;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for LNSystemProtocol();
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

unint64_t specialized AffinityValueComparison.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AffinityValueComparison.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t type metadata accessor for EnvironmentValueFetcher()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t instantiation function for generic protocol witness table for FixedAffinityScorer(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, type metadata accessor for FixedAffinityScorer, (uint64_t)&protocol conformance descriptor for FixedAffinityScorer);
  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, type metadata accessor for FixedAffinityScorer, (uint64_t)&protocol conformance descriptor for FixedAffinityScorer);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for FixedAffinityScorer(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for FixedAffinityScorer);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in FixedAffinityScorer()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
}

uint64_t instantiation function for generic protocol witness table for CachingAffinityScorer(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CachingAffinityScorer and conformance CachingAffinityScorer, type metadata accessor for CachingAffinityScorer, (uint64_t)&protocol conformance descriptor for CachingAffinityScorer);
  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CachingAffinityScorer and conformance CachingAffinityScorer, type metadata accessor for CachingAffinityScorer, (uint64_t)&protocol conformance descriptor for CachingAffinityScorer);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CachingAffinityScorer(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for CachingAffinityScorer);
}

unint64_t lazy protocol witness table accessor for type AffinityValueComparison and conformance AffinityValueComparison()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AffinityValueComparison and conformance AffinityValueComparison;
  if (!lazy protocol witness table cache variable for type AffinityValueComparison and conformance AffinityValueComparison)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AffinityValueComparison, &type metadata for AffinityValueComparison);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AffinityValueComparison and conformance AffinityValueComparison);
  }
  return result;
}

uint64_t dispatch thunk of AffinityScorer.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AffinityScorer.score(for:loopCheck:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t getEnumTagSinglePayload for AffinityScoreError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AffinityScoreError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AffinityScoreError(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for AffinityScoreError(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AffinityScoreError()
{
  return &type metadata for AffinityScoreError;
}

uint64_t ObjC metadata update function for FixedAffinityScorer()
{
  return type metadata accessor for FixedAffinityScorer(0);
}

uint64_t type metadata completion function for FixedAffinityScorer()
{
  return type metadata completion function for FixedAffinityScorer();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FixedAffinityScorer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FixedAffinityScorer.__allocating_init(score:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 96))(a1, a2 & 1);
}

uint64_t dispatch thunk of FixedAffinityScorer.score(for:loopCheck:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t ObjC metadata update function for CachingAffinityScorer()
{
  return type metadata accessor for CachingAffinityScorer(0);
}

uint64_t type metadata completion function for CachingAffinityScorer()
{
  return type metadata completion function for FixedAffinityScorer();
}

uint64_t method lookup function for CachingAffinityScorer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CachingAffinityScorer.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of CachingAffinityScorer.score(for:loopCheck:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of CachingAffinityScorer.computeScore(for:loopCheck:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t ObjC metadata update function for CombiningAffinityScorer()
{
  return type metadata accessor for CombiningAffinityScorer(0);
}

uint64_t type metadata completion function for CombiningAffinityScorer()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for CombiningAffinityScorer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CombiningAffinityScorer.__allocating_init(children:reducer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t ObjC metadata update function for ComparingAffinityScorer()
{
  return type metadata accessor for ComparingAffinityScorer(0);
}

uint64_t type metadata accessor for ComparingAffinityScorer(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ComparingAffinityScorer);
}

uint64_t type metadata completion function for ComparingAffinityScorer()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for ComparingAffinityScorer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ComparingAffinityScorer.__allocating_init(score:comparison:_:_:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 176))(a1, a2 & 1);
}

uint64_t dispatch thunk of ComparingAffinityScorer.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t getEnumTagSinglePayload for AffinityValueComparison(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AffinityValueComparison(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B4CC9CE0 + 4 * byte_1B4EE4069[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B4CC9D14 + 4 * byte_1B4EE4064[v4]))();
}

uint64_t sub_1B4CC9D14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CC9D1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CC9D24);
  return result;
}

uint64_t sub_1B4CC9D30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CC9D38);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B4CC9D3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CC9D44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for AffinityValueComparison(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AffinityValueComparison()
{
  return &type metadata for AffinityValueComparison;
}

uint64_t dispatch thunk of AffinityValueFetcher.fetchValue(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for FixedValueFetcher()
{
  return objc_opt_self();
}

uint64_t method lookup function for FixedValueFetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FixedValueFetcher.__allocating_init(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of FixedValueFetcher.fetchValue(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t method lookup function for EnvironmentValueFetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EnvironmentValueFetcher.__allocating_init(plist:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of EnvironmentValueFetcher.__allocating_init(provider:valueKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of EnvironmentValueFetcher.fetchValue(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of EnvironmentValueFetcher.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

ValueMetadata *type metadata accessor for AffinityScore()
{
  return &type metadata for AffinityScore;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CachingAffinityScorer.ScoreState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CachingAffinityScorer.ScoreState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10) = v3;
  return result;
}

uint64_t getEnumTag for CachingAffinityScorer.ScoreState(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for CachingAffinityScorer.ScoreState(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    *(_BYTE *)(result + 9) = 0;
  }
  return result;
}

void *type metadata accessor for CachingAffinityScorer.ScoreState()
{
  return &unk_1E6842A00;
}

uint64_t sub_1B4CC9EDC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CombiningAffinityScorer.invert(child:fallbackValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  if ((a4 & 1) != 0)
    return *(_QWORD *)(v4 + 16);
  else
    return 0;
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)partial apply()
{
  return partial apply for closure #1 in static AffinityScore.loadAffinityScorer(from:defaultVersion:)();
}

uint64_t static AffinityScorerUtils.topCloseableEntity(candidates:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];
  _QWORD *v22[5];

  v4 = type metadata accessor for RREntity();
  v20 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RRCandidate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v22);
  v11 = v22[0];
  v12 = v22[0][2];
  if (v12)
  {
    v18 = a2;
    v13 = 0;
    v14 = (char *)v22[0] + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v19 = MEMORY[0x1E0DEE9B8] + 8;
    while (v13 < v11[2])
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v14[*(_QWORD *)(v8 + 72) * v13], v7);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (v22[3])
      {
        outlined init with copy of Any?((uint64_t)v22, (uint64_t)v21);
        type metadata accessor for UsoEntity_common_App();
        if (swift_dynamicCast()
          || (type metadata accessor for UsoEntity_common_Window(), swift_dynamicCast()))
        {
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
          a2 = v18;
          (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v10, v7);
          v15 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v15, 1, v7);
        }
        type metadata accessor for UsoEntity_common_AppEntity();
        if (swift_dynamicCast()
          || (type metadata accessor for UsoEntity_common_UserEntity(), swift_dynamicCast()))
        {
          swift_retain();
          dispatch thunk of CodeGenBase.usoIdentifiers.getter();
          swift_bridgeObjectRelease();
          swift_release_n();
        }
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
      ++v13;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v12 == v13)
      {
        swift_release();
        v15 = 1;
        a2 = v18;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v15, 1, v7);
      }
    }
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    v15 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v15, 1, v7);
  }
  return result;
}

uint64_t UsoIdentifier.isApplicationRepresentable.getter()
{
  return 0;
}

uint64_t UsoIdentifier.isEnvironmentRepresentable.getter()
{
  return 0;
}

uint64_t UsoIdentifier.hasEnvironmentNamespace.getter()
{
  return 0;
}

uint64_t static AffinityScorerUtils.topOpenableEntity(candidates:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];
  _QWORD *v22[5];

  v4 = type metadata accessor for RREntity();
  v20 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RRCandidate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v22);
  v11 = v22[0];
  v12 = v22[0][2];
  if (v12)
  {
    v18 = a2;
    v13 = 0;
    v14 = (char *)v22[0] + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v19 = MEMORY[0x1E0DEE9B8] + 8;
    while (v13 < v11[2])
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v14[*(_QWORD *)(v8 + 72) * v13], v7);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (v22[3])
      {
        outlined init with copy of Any?((uint64_t)v22, (uint64_t)v21);
        type metadata accessor for UsoEntity_common_App();
        if (swift_dynamicCast())
        {
          swift_release();
          if ((RRCandidate.isOnScreen.getter() & 1) == 0)
          {
            swift_release();
            v15 = v18;
            (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v10, v7);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
            return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
          }
        }
        else
        {
          type metadata accessor for UsoEntity_common_AppEntity();
          if (swift_dynamicCast())
          {
            swift_retain();
            dispatch thunk of CodeGenBase.usoIdentifiers.getter();
            swift_bridgeObjectRelease();
            swift_release_n();
          }
        }
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
      ++v13;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v12 == v13)
      {
        swift_release();
        a2 = v18;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
      }
    }
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
  }
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for RRCandidate() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler))
                 - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  Swift::Int v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  double v45;
  double v46;
  double v47;
  _BOOL4 v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  unint64_t v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  char *v68;
  uint64_t *v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  Swift::Int v145;
  char *v146;
  uint64_t v147;
  Swift::Int v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  void (*v152)(_QWORD, _QWORD, _QWORD);
  uint64_t v153;
  Swift::Int v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t *v158;
  uint64_t v159;
  char *v160;
  Swift::Int v161;
  uint64_t v162;
  uint64_t v163;

  v2 = v1;
  v4 = type metadata accessor for RRCandidate();
  v163 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v149 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v160 = (char *)&v143 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v155 = (char *)&v143 - v10;
  MEMORY[0x1E0C80A78](v9);
  v157 = (char *)&v143 - v11;
  v12 = a1;
  v13 = a1[1];
  result = _minimumMergeRunLength(_:)(v13);
  if (result < v13)
  {
    if (v13 >= 0)
      v15 = v13;
    else
      v15 = v13 + 1;
    if (v13 >= -1)
    {
      v145 = result;
      if (v13 < 2)
      {
        v20 = (char *)MEMORY[0x1E0DEE9D8];
        v19 = MEMORY[0x1E0DEE9D8]
            + ((*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80));
        v144 = MEMORY[0x1E0DEE9D8];
        if (v13 != 1)
        {
          v22 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          v86 = v12;
          if (v22 < 2)
            goto LABEL_117;
          goto LABEL_104;
        }
      }
      else
      {
        v16 = v15 >> 1;
        v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v17 + 16) = v16;
        v18 = (*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
        v144 = v17;
        v19 = v17 + v18;
      }
      v21 = 0;
      v20 = (char *)MEMORY[0x1E0DEE9D8];
      v151 = v19;
      v158 = v12;
      v159 = v4;
      while (1)
      {
        v23 = v21;
        v24 = v21 + 1;
        v150 = v21;
        if (v21 + 1 >= v13)
        {
          v39 = v21 + 1;
          v49 = v158;
        }
        else
        {
          v25 = *v158;
          v153 = v25;
          v26 = v163;
          v27 = *(_QWORD *)(v163 + 72);
          v161 = v13;
          v162 = v27;
          v28 = *(void (**)(_QWORD, _QWORD, _QWORD))(v163 + 16);
          v28(v157, v25 + v27 * v24, v4);
          v29 = v25 + v27 * v23;
          v30 = v155;
          v28(v155, v29, v4);
          v31 = v157;
          RRCandidate.score.getter();
          v33 = v32;
          RRCandidate.score.getter();
          v35 = v34;
          v36 = *(void (**)(_QWORD, _QWORD))(v26 + 8);
          v37 = v30;
          v23 = v150;
          v36(v37, v4);
          v36(v31, v4);
          v38 = v162;
          v39 = v23 + 2;
          if (v23 + 2 >= v161)
          {
            v13 = v161;
          }
          else
          {
            v146 = v20;
            v147 = v2;
            v156 = v162 * v24;
            v40 = v153;
            v154 = v162 * v39;
            while (1)
            {
              v41 = v39;
              v42 = v157;
              v43 = v159;
              v28(v157, v40 + v154, v159);
              v44 = v155;
              v28(v155, v40 + v156, v43);
              RRCandidate.score.getter();
              v46 = v45;
              RRCandidate.score.getter();
              v48 = v47 >= v46;
              v36(v44, v43);
              v36(v42, v43);
              if (v35 < v33 == v48)
                break;
              v39 = v41 + 1;
              v38 = v162;
              v40 += v162;
              if (v161 == v41 + 1)
              {
                v13 = v161;
                v39 = v161;
                v20 = v146;
                v2 = v147;
                v4 = v159;
                v23 = v150;
                goto LABEL_24;
              }
            }
            v4 = v159;
            v39 = v41;
            v20 = v146;
            v2 = v147;
            v23 = v150;
            v13 = v161;
            v38 = v162;
          }
LABEL_24:
          v49 = v158;
          if (v35 < v33)
          {
            if (v39 < v23)
              goto LABEL_141;
            if (v23 < v39)
            {
              v146 = v20;
              v147 = v2;
              v50 = 0;
              v51 = v38 * (v39 - 1);
              v52 = v23;
              v53 = v39 * v38;
              v54 = v52;
              v55 = v52 * v38;
              do
              {
                if (v54 != v39 + v50 - 1)
                {
                  v56 = v153;
                  if (!v153)
                    goto LABEL_146;
                  v57 = v39;
                  v58 = v153 + v55;
                  v59 = v153 + v51;
                  v156 = *(_QWORD *)(v163 + 32);
                  ((void (*)(char *, uint64_t, uint64_t))v156)(v149, v153 + v55, v159);
                  if (v55 < v51 || v58 >= v56 + v53)
                  {
                    v4 = v159;
                    swift_arrayInitWithTakeFrontToBack();
                  }
                  else
                  {
                    v4 = v159;
                    if (v55 != v51)
                      swift_arrayInitWithTakeBackToFront();
                  }
                  ((void (*)(uint64_t, char *, uint64_t))v156)(v59, v149, v4);
                  v49 = v158;
                  v39 = v57;
                  v38 = v162;
                }
                ++v54;
                --v50;
                v51 -= v38;
                v53 -= v38;
                v55 += v38;
              }
              while (v54 < v39 + v50);
              v20 = v146;
              v2 = v147;
              v23 = v150;
              v13 = v161;
            }
          }
        }
        if (v39 < v13)
        {
          if (__OFSUB__(v39, v23))
            goto LABEL_139;
          if (v39 - v23 < v145)
          {
            if (__OFADD__(v23, v145))
              goto LABEL_142;
            if (v23 + v145 >= v13)
              v60 = v13;
            else
              v60 = v23 + v145;
            if (v60 < v23)
            {
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
              break;
            }
            if (v39 != v60)
            {
              v146 = v20;
              v147 = v2;
              v61 = *(_QWORD *)(v163 + 72);
              v152 = *(void (**)(_QWORD, _QWORD, _QWORD))(v163 + 16);
              v153 = v61;
              v62 = v61 * (v39 - 1);
              v63 = v39 * v61;
              v148 = v60;
              do
              {
                v65 = 0;
                v156 = v39;
                v154 = v63;
                while (1)
                {
                  v66 = *v49;
                  v161 = v63 + v65;
                  v162 = v23;
                  v67 = v63 + v65 + v66;
                  v68 = v157;
                  v69 = v49;
                  v70 = v152;
                  v152(v157, v67, v4);
                  v71 = v62;
                  v72 = v62 + v65 + v66;
                  v73 = v69;
                  v74 = v155;
                  v70(v155, v72, v4);
                  RRCandidate.score.getter();
                  v76 = v75;
                  RRCandidate.score.getter();
                  v78 = v77;
                  v79 = *(void (**)(_QWORD, _QWORD))(v163 + 8);
                  v79(v74, v4);
                  v79(v68, v4);
                  if (v78 >= v76)
                    break;
                  v80 = *v73;
                  if (!*v73)
                    goto LABEL_144;
                  v63 = v154;
                  v62 = v71;
                  v81 = v80 + v71 + v65;
                  v82 = *(void (**)(_QWORD, _QWORD, _QWORD))(v163 + 32);
                  v4 = v159;
                  v82(v160, v80 + v154 + v65, v159);
                  swift_arrayInitWithTakeFrontToBack();
                  v82(v81, v160, v4);
                  v65 -= v153;
                  v23 = v162 + 1;
                  v64 = v156;
                  v49 = v158;
                  if (v156 == v162 + 1)
                    goto LABEL_49;
                }
                v4 = v159;
                v64 = v156;
                v49 = v73;
                v62 = v71;
                v63 = v154;
LABEL_49:
                v39 = v64 + 1;
                v62 += v153;
                v63 += v153;
                v23 = v150;
              }
              while (v39 != v148);
              v39 = v148;
              v20 = v146;
              v2 = v147;
            }
          }
        }
        if (v39 < v23)
          goto LABEL_134;
        v83 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
        v85 = *((_QWORD *)v20 + 2);
        v84 = *((_QWORD *)v20 + 3);
        v22 = v85 + 1;
        if (v85 >= v84 >> 1)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v85 + 1, 1, v20);
        v86 = v83;
        *((_QWORD *)v20 + 2) = v22;
        v87 = v20 + 32;
        v88 = &v20[16 * v85 + 32];
        *(_QWORD *)v88 = v23;
        *((_QWORD *)v88 + 1) = v39;
        v156 = v39;
        if (v85)
        {
          while (1)
          {
            v89 = v22 - 1;
            if (v22 >= 4)
            {
              v94 = &v87[16 * v22];
              v95 = *((_QWORD *)v94 - 8);
              v96 = *((_QWORD *)v94 - 7);
              v100 = __OFSUB__(v96, v95);
              v97 = v96 - v95;
              if (v100)
                goto LABEL_123;
              v99 = *((_QWORD *)v94 - 6);
              v98 = *((_QWORD *)v94 - 5);
              v100 = __OFSUB__(v98, v99);
              v92 = v98 - v99;
              v93 = v100;
              if (v100)
                goto LABEL_124;
              v101 = v22 - 2;
              v102 = &v87[16 * v22 - 32];
              v104 = *(_QWORD *)v102;
              v103 = *((_QWORD *)v102 + 1);
              v100 = __OFSUB__(v103, v104);
              v105 = v103 - v104;
              if (v100)
                goto LABEL_126;
              v100 = __OFADD__(v92, v105);
              v106 = v92 + v105;
              if (v100)
                goto LABEL_129;
              if (v106 >= v97)
              {
                v124 = &v87[16 * v89];
                v126 = *(_QWORD *)v124;
                v125 = *((_QWORD *)v124 + 1);
                v100 = __OFSUB__(v125, v126);
                v127 = v125 - v126;
                if (v100)
                  goto LABEL_133;
                v117 = v92 < v127;
                goto LABEL_93;
              }
            }
            else
            {
              if (v22 != 3)
              {
                v118 = *((_QWORD *)v20 + 4);
                v119 = *((_QWORD *)v20 + 5);
                v100 = __OFSUB__(v119, v118);
                v111 = v119 - v118;
                v112 = v100;
                goto LABEL_87;
              }
              v91 = *((_QWORD *)v20 + 4);
              v90 = *((_QWORD *)v20 + 5);
              v100 = __OFSUB__(v90, v91);
              v92 = v90 - v91;
              v93 = v100;
            }
            if ((v93 & 1) != 0)
              goto LABEL_125;
            v101 = v22 - 2;
            v107 = &v87[16 * v22 - 32];
            v109 = *(_QWORD *)v107;
            v108 = *((_QWORD *)v107 + 1);
            v110 = __OFSUB__(v108, v109);
            v111 = v108 - v109;
            v112 = v110;
            if (v110)
              goto LABEL_128;
            v113 = &v87[16 * v89];
            v115 = *(_QWORD *)v113;
            v114 = *((_QWORD *)v113 + 1);
            v100 = __OFSUB__(v114, v115);
            v116 = v114 - v115;
            if (v100)
              goto LABEL_131;
            if (__OFADD__(v111, v116))
              goto LABEL_132;
            if (v111 + v116 >= v92)
            {
              v117 = v92 < v116;
LABEL_93:
              if (v117)
                v89 = v101;
              goto LABEL_95;
            }
LABEL_87:
            if ((v112 & 1) != 0)
              goto LABEL_127;
            v120 = &v87[16 * v89];
            v122 = *(_QWORD *)v120;
            v121 = *((_QWORD *)v120 + 1);
            v100 = __OFSUB__(v121, v122);
            v123 = v121 - v122;
            if (v100)
              goto LABEL_130;
            if (v123 < v111)
              goto LABEL_14;
LABEL_95:
            v128 = v89 - 1;
            if (v89 - 1 >= v22)
            {
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
              goto LABEL_143;
            }
            if (!*v86)
              goto LABEL_145;
            v129 = v20;
            v130 = &v87[16 * v128];
            v131 = *(_QWORD *)v130;
            v132 = &v87[16 * v89];
            v133 = *((_QWORD *)v132 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)(*v86 + *(_QWORD *)(v163 + 72) * *(_QWORD *)v130, *v86 + *(_QWORD *)(v163 + 72) * *(_QWORD *)v132, *v86 + *(_QWORD *)(v163 + 72) * v133, v151);
            if (v2)
              goto LABEL_117;
            if (v133 < v131)
              goto LABEL_120;
            if (v89 > *((_QWORD *)v129 + 2))
              goto LABEL_121;
            *(_QWORD *)v130 = v131;
            *(_QWORD *)&v87[16 * v128 + 8] = v133;
            v134 = *((_QWORD *)v129 + 2);
            if (v89 >= v134)
              goto LABEL_122;
            v20 = v129;
            v22 = v134 - 1;
            memmove(&v87[16 * v89], v132 + 16, 16 * (v134 - 1 - v89));
            *((_QWORD *)v129 + 2) = v134 - 1;
            v86 = v158;
            v4 = v159;
            if (v134 <= 2)
              goto LABEL_14;
          }
        }
        v22 = 1;
LABEL_14:
        v13 = v86[1];
        v21 = v156;
        if (v156 >= v13)
        {
          v19 = v151;
          if (v22 < 2)
          {
LABEL_117:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v144 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
LABEL_104:
          v135 = *v86;
          while (1)
          {
            v136 = v22 - 2;
            if (v22 < 2)
              goto LABEL_135;
            if (!v135)
              goto LABEL_147;
            v137 = v20;
            v138 = v20 + 32;
            v139 = *(_QWORD *)&v20[16 * v136 + 32];
            v140 = *(_QWORD *)&v20[16 * v22 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)(v135 + *(_QWORD *)(v163 + 72) * v139, v135 + *(_QWORD *)(v163 + 72) * *(_QWORD *)&v138[16 * v22 - 16], v135 + *(_QWORD *)(v163 + 72) * v140, v19);
            if (v2)
              goto LABEL_117;
            if (v140 < v139)
              goto LABEL_136;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v137 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v137);
            if (v136 >= *((_QWORD *)v137 + 2))
              goto LABEL_137;
            v141 = &v137[16 * v136 + 32];
            *(_QWORD *)v141 = v139;
            *((_QWORD *)v141 + 1) = v140;
            v142 = *((_QWORD *)v137 + 2);
            if (v22 > v142)
              goto LABEL_138;
            v20 = v137;
            memmove(&v137[16 * v22 + 16], &v137[16 * v22 + 32], 16 * (v142 - v22));
            *((_QWORD *)v137 + 2) = v142 - 1;
            v22 = v142 - 1;
            if (v142 <= 2)
              goto LABEL_117;
          }
        }
      }
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v13 < 0)
    goto LABEL_140;
  if (v13)
    return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v13, 1, v12);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  Swift::Int v20;
  _QWORD *v21;
  Swift::Int v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v36 = a1;
  v7 = type metadata accessor for RRCandidate();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v43 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v39 = (char *)&v34 - v12;
  result = MEMORY[0x1E0C80A78](v11);
  v38 = (char *)&v34 - v14;
  v42 = a3;
  v35 = a2;
  if (a3 != a2)
  {
    v15 = v8[9];
    v37 = (void (*)(char *, uint64_t, uint64_t))v8[2];
    v46 = v15 * (v42 - 1);
    v40 = v15;
    v16 = v15 * v42;
    v44 = a4;
LABEL_5:
    v17 = 0;
    v45 = v36;
    v41 = v16;
    while (1)
    {
      v18 = *a4;
      v19 = v16 + v17 + *a4;
      v20 = v38;
      v21 = v8;
      v22 = v37;
      v37(v38, v19, v7);
      v23 = v39;
      v22(v39, v46 + v17 + v18, v7);
      v8 = v21;
      v16 = v41;
      RRCandidate.score.getter();
      v25 = v24;
      RRCandidate.score.getter();
      v27 = v26;
      v28 = (void (*)(char *, uint64_t))v8[1];
      v28(v23, v7);
      v29 = v20;
      a4 = v44;
      result = ((uint64_t (*)(char *, uint64_t))v28)(v29, v7);
      if (v27 >= v25)
      {
LABEL_4:
        v46 += v40;
        v16 += v40;
        if (++v42 == v35)
          return result;
        goto LABEL_5;
      }
      v30 = *a4;
      if (!*a4)
        break;
      v31 = v30 + v46 + v17;
      v32 = v8;
      v33 = (void (*)(char *, uint64_t, uint64_t))v8[4];
      v33(v43, v30 + v16 + v17, v7);
      swift_arrayInitWithTakeFrontToBack();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v33)(v31, v43, v7);
      v17 -= v40;
      a4 = v44;
      ++v45;
      v8 = v32;
      if (v42 == v45)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v43 = a1;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v7 = MEMORY[0x1E0C80A78](v52);
  v53 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v47 = (char *)&v41 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v41 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v45 = (char *)&v41 - v14;
  result = MEMORY[0x1E0C80A78](v13);
  v59 = (uint64_t)&v41 - v17;
  v51 = a3;
  v42 = a2;
  if (a3 != a2)
  {
    v18 = *(_QWORD *)(v16 + 72);
    v19 = v18 * (v51 - 1);
    v48 = v18;
    v20 = v18 * v51;
    v44 = a4;
    v21 = (uint64_t)v45;
LABEL_5:
    v22 = 0;
    v56 = v43;
    v49 = v20;
    v50 = v19;
    while (1)
    {
      v23 = *a4;
      v55 = v20 + v22;
      v24 = v59;
      outlined init with copy of ReferenceResolutionClientProtocol?(v20 + v22 + v23, v59, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v54 = v19 + v22;
      outlined init with copy of ReferenceResolutionClientProtocol?(v19 + v22 + v23, v21, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v25 = v52;
      v26 = *(int *)(v52 + 48);
      v27 = v46;
      v28 = &v46[v26];
      v29 = v24 + v26;
      v30 = type metadata accessor for UUID();
      v57 = *(_QWORD *)(v30 - 8);
      v31 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
      v31(v27, v24, v30);
      outlined init with copy of ConversationHelperInput(v29, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v58 = *(_QWORD *)v28;
      outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v28);
      v32 = *(int *)(v25 + 48);
      v33 = v47;
      v34 = &v47[v32];
      v35 = v21 + v32;
      v31(v47, v21, v30);
      v20 = v49;
      outlined init with copy of ConversationHelperInput(v35, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v36 = *(_QWORD *)v34;
      outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v34);
      v37 = *(void (**)(char *, uint64_t))(v57 + 8);
      v37(v33, v30);
      v38 = v27;
      v19 = v50;
      v37(v38, v30);
      a4 = v44;
      outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      result = outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      if (v36 >= v58)
      {
LABEL_4:
        v19 += v48;
        v20 += v48;
        if (++v51 == v42)
          return result;
        goto LABEL_5;
      }
      v39 = *a4;
      if (!*a4)
        break;
      v40 = v39 + v19 + v22;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v39 + v20 + v22, v53, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      swift_arrayInitWithTakeFrontToBack();
      result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v53, v40, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v22 -= v48;
      if (v51 == ++v56)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(char *, unint64_t, uint64_t);
  char *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void (*v27)(char *, uint64_t);
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t result;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, unint64_t, uint64_t);
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;

  v8 = type metadata accessor for RRCandidate();
  v9 = MEMORY[0x1E0C80A78](v8);
  v55 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v51 - v11;
  v56 = v13;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_62;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_63;
  v16 = (uint64_t)(a2 - a1) / v14;
  v59 = a1;
  v58 = a4;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v31 = a4 + v19;
      v57 = a4 + v19;
      v59 = a2;
      v54 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        v33 = -v14;
        v34 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
        v52 = a4;
        v53 = v34;
        do
        {
          v35 = a3 + v33;
          v36 = v53;
          v53(v12, v31 + v33, v8);
          v37 = a2 + v33;
          v38 = a3;
          v39 = v12;
          v40 = v55;
          v36(v55, a2 + v33, v8);
          RRCandidate.score.getter();
          v42 = v41;
          RRCandidate.score.getter();
          v44 = v43;
          v45 = *(void (**)(char *, uint64_t))(v56 + 8);
          v46 = v40;
          v12 = v39;
          v45(v46, v8);
          v45(v39, v8);
          if (v44 >= v42)
          {
            v49 = v57;
            v57 += v33;
            if (v38 < v49 || v35 >= v49)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v38 != v49)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v37 = a2;
            v48 = v52;
          }
          else
          {
            if (v38 < a2 || v35 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v48 = v52;
            }
            else
            {
              v47 = v38 == a2;
              v48 = v52;
              if (!v47)
                swift_arrayInitWithTakeBackToFront();
            }
            v59 += v33;
          }
          v31 = v57;
          if (v57 <= v48)
            break;
          a2 = v37;
          a3 = v35;
        }
        while (v37 > v54);
      }
      goto LABEL_60;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v54 = a4 + v18;
    v57 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
      do
      {
        v21(v12, a2, v8);
        v22 = v55;
        v21(v55, a4, v8);
        RRCandidate.score.getter();
        v24 = v23;
        RRCandidate.score.getter();
        v26 = v25;
        v27 = *(void (**)(char *, uint64_t))(v56 + 8);
        v27(v22, v8);
        v27(v12, v8);
        v28 = v59;
        if (v26 >= v24)
        {
          v30 = v58 + v14;
          if (v59 < v58 || v59 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v59 != v58)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v58 = v30;
          v29 = a2;
        }
        else
        {
          v29 = a2 + v14;
          if (v59 < a2 || v59 >= v29)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v59 == a2)
          {
            v28 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v59 = v28 + v14;
        a4 = v58;
        if (v58 >= v54)
          break;
        a2 = v29;
      }
      while (v29 < a3);
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v59, &v58, (uint64_t *)&v57);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int64_t v39;
  void (*v40)(char *, uint64_t);
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  void (*v64)(char *, uint64_t);
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v9 = MEMORY[0x1E0C80A78](v8);
  v82 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v81 = (char *)&v71 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v79 = (uint64_t)&v71 - v14;
  MEMORY[0x1E0C80A78](v13);
  v80 = (uint64_t)&v71 - v15;
  v17 = *(_QWORD *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v17 == -1)
    goto LABEL_61;
  v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1)
    goto LABEL_62;
  v19 = (uint64_t)(a2 - a1) / v17;
  v87 = a1;
  v86 = a4;
  v20 = v18 / v17;
  if (v19 >= v18 / v17)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      v22 = v20 * v17;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v47 = a4 + v22;
      v85 = a4 + v22;
      v87 = a2;
      if (v22 >= 1 && a1 < a2)
      {
        v49 = -v17;
        v78 = v8;
        v73 = a1;
        v74 = a4;
        v72 = -v17;
        do
        {
          v83 = a3;
          v84 = a2;
          v77 = a3 + v49;
          v50 = v80;
          outlined init with copy of ReferenceResolutionClientProtocol?(v47 + v49, v80, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          v75 = a2 + v49;
          v51 = v79;
          outlined init with copy of ReferenceResolutionClientProtocol?(a2 + v49, v79, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          v52 = *(int *)(v8 + 48);
          v53 = v81;
          v54 = (unint64_t *)&v81[v52];
          v55 = v50 + v52;
          v56 = type metadata accessor for UUID();
          v57 = *(_QWORD *)(v56 - 8);
          v58 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
          v58(v53, v50, v56);
          outlined init with copy of ConversationHelperInput(v55, (uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          v76 = *v54;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v54);
          v59 = *(int *)(v8 + 48);
          v60 = v82;
          v61 = &v82[v59];
          v62 = v51 + v59;
          v58(v82, v51, v56);
          outlined init with copy of ConversationHelperInput(v62, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          v63 = *(_QWORD *)v61;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v61);
          v64 = *(void (**)(char *, uint64_t))(v57 + 8);
          v64(v60, v56);
          v64(v53, v56);
          outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          outlined destroy of ReferenceResolutionClientProtocol?(v50, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          if (v63 >= (uint64_t)v76)
          {
            v68 = v84;
            v69 = v85;
            v85 += v72;
            v49 = v72;
            v65 = v77;
            if (v83 < v69 || v77 >= v69)
            {
              v8 = v78;
              swift_arrayInitWithTakeFrontToBack();
              v67 = v73;
              v66 = v74;
            }
            else
            {
              v8 = v78;
              v67 = v73;
              v66 = v74;
              if (v83 != v69)
                swift_arrayInitWithTakeBackToFront();
            }
          }
          else
          {
            v49 = v72;
            v65 = v77;
            if (v83 < v84 || v77 >= v84)
            {
              v68 = v75;
              v8 = v78;
              swift_arrayInitWithTakeFrontToBack();
              v67 = v73;
              v66 = v74;
            }
            else
            {
              v8 = v78;
              v67 = v73;
              v66 = v74;
              v68 = v75;
              if (v83 != v84)
                swift_arrayInitWithTakeBackToFront();
            }
            v87 += v49;
          }
          v47 = v85;
          if (v85 <= v66)
            break;
          a2 = v68;
          a3 = v65;
        }
        while (v68 > v67);
      }
      goto LABEL_59;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    v21 = v19 * v17;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v76 = a4 + v21;
    v85 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      v78 = v8;
      v83 = a3;
      v75 = v17;
      v24 = v79;
      do
      {
        v84 = a2;
        v25 = a2;
        v26 = v80;
        outlined init with copy of ReferenceResolutionClientProtocol?(v25, v80, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
        outlined init with copy of ReferenceResolutionClientProtocol?(a4, v24, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
        v27 = *(int *)(v8 + 48);
        v28 = v81;
        v29 = &v81[v27];
        v30 = v26 + v27;
        v31 = type metadata accessor for UUID();
        v32 = *(_QWORD *)(v31 - 8);
        v33 = v8;
        v34 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
        v34(v28, v26, v31);
        outlined init with copy of ConversationHelperInput(v30, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        v77 = *(_QWORD *)v29;
        outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v29);
        v35 = *(int *)(v33 + 48);
        v36 = v82;
        v37 = &v82[v35];
        v38 = v24 + v35;
        v34(v82, v24, v31);
        outlined init with copy of ConversationHelperInput(v38, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
        v39 = *(_QWORD *)v37;
        outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v37);
        v40 = *(void (**)(char *, uint64_t))(v32 + 8);
        v40(v36, v31);
        v40(v28, v31);
        outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
        outlined destroy of ReferenceResolutionClientProtocol?(v26, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
        v41 = v87;
        if (v39 >= (uint64_t)v77)
        {
          v45 = v84;
          v42 = v75;
          v46 = v86 + v75;
          if (v87 < v86 || v87 >= v46)
          {
            v8 = v78;
            swift_arrayInitWithTakeFrontToBack();
            v44 = v83;
          }
          else
          {
            v44 = v83;
            v8 = v78;
            if (v87 != v86)
              swift_arrayInitWithTakeBackToFront();
          }
          v86 = v46;
          v43 = v45;
        }
        else
        {
          v42 = v75;
          v43 = v84 + v75;
          if (v87 < v84 || v87 >= v43)
          {
            v8 = v78;
            swift_arrayInitWithTakeFrontToBack();
            v44 = v83;
          }
          else
          {
            v44 = v83;
            v8 = v78;
            if (v87 == v84)
              v41 = v84;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        v87 = v41 + v42;
        a4 = v86;
        if (v86 >= v76)
          break;
        a2 = v43;
      }
      while (v43 < v44);
    }
LABEL_59:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v87, &v86, (uint64_t *)&v85);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AffinityScorerUtils.getEntitySpans(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  int isUniquelyReferenced_nonNull_native;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;

  v0 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v65 = *(_QWORD *)(v0 - 8);
  v66 = v0;
  MEMORY[0x1E0C80A78](v0);
  v64 = (char *)&v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v68 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v63 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v67 = (char *)&v62 - v16;
  v17 = USOParse.userParse.getter();
  v18 = MEMORY[0x1B5E3FA6C](v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v62 = v13;
    v20 = v18 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v21 = *(_QWORD *)(v3 + 72);
    v22 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v22(v5, v20, v2);
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v20 += v21;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        v23 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v12, v5, v2);
    v23 = 0;
LABEL_8:
    v13 = v62;
  }
  else
  {
    v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, v23, 1, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1)
      goto LABEL_45;
    goto LABEL_11;
  }
  v28 = v64;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v29 = v63;
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v28, v66);
  v31 = v67;
  v30 = v68;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v29, v13);
  static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
  v34 = dispatch thunk of Graph.nodes.getter();
  v35 = v34;
  v36 = *(_QWORD *)(v34 + 16);
  if (!v36)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v32 = MEMORY[0x1E0DEE9D8];
LABEL_40:
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v13);
    return v32;
  }
  v62 = v13;
  v37 = *(_QWORD *)(type metadata accessor for Node() - 8);
  v38 = v35 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
  v39 = *(_QWORD *)(v37 + 72);
  swift_bridgeObjectRetain();
  v32 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v40 = Node.entitySpans.getter();
    v41 = *(_QWORD *)(v40 + 16);
    v42 = *(_QWORD *)(v32 + 16);
    v43 = v42 + v41;
    if (__OFADD__(v42, v41))
      break;
    v44 = v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v43 <= *(_QWORD *)(v32 + 24) >> 1)
    {
      if (*(_QWORD *)(v44 + 16))
        goto LABEL_29;
    }
    else
    {
      if (v42 <= v43)
        v46 = v42 + v41;
      else
        v46 = v42;
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v46, 1, v32);
      if (*(_QWORD *)(v44 + 16))
      {
LABEL_29:
        v47 = *(_QWORD *)(v32 + 16);
        v48 = (*(_QWORD *)(v32 + 24) >> 1) - v47;
        v49 = type metadata accessor for UsoEntitySpan();
        if (v48 < v41)
          goto LABEL_43;
        v50 = *(_QWORD *)(v49 - 8);
        v51 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
        v52 = *(_QWORD *)(v50 + 72);
        v53 = v32 + v51 + v52 * v47;
        v54 = v44 + v51;
        v55 = v52 * v41;
        v56 = v53 + v55;
        v57 = v54 + v55;
        if (v54 < v56 && v53 < v57)
        {
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        if (v41)
        {
          v59 = *(_QWORD *)(v32 + 16);
          v60 = __OFADD__(v59, v41);
          v61 = v59 + v41;
          if (v60)
            goto LABEL_44;
          *(_QWORD *)(v32 + 16) = v61;
        }
        goto LABEL_19;
      }
    }
    if (v41)
      goto LABEL_42;
LABEL_19:
    swift_bridgeObjectRelease();
    v38 += v39;
    if (!--v36)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      v13 = v62;
      v31 = v67;
      v30 = v68;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  swift_once();
LABEL_11:
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1B4BE6000, v25, v26, "Could not extract userStatedTask, returning empty entity spans", v27, 2u);
    MEMORY[0x1B5E44758](v27, -1, -1);
  }

  return MEMORY[0x1E0DEE9D8];
}

ValueMetadata *type metadata accessor for AffinityScorerUtils()
{
  return &type metadata for AffinityScorerUtils;
}

unint64_t specialized AffinityScorer.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000013;
}

uint64_t one-time initialization function for kAffinityScorers()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityScoring>);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xD00000000000001ELL;
  *(_QWORD *)(v0 + 56) = &type metadata for AlarmAffinityScorer;
  *(_QWORD *)(v0 + 64) = &protocol witness table for AlarmAffinityScorer;
  *(_QWORD *)(v0 + 40) = 0x80000001B4EF68F0;
  *(_QWORD *)(v0 + 96) = &type metadata for AppLaunchAffinityScorer;
  *(_QWORD *)(v0 + 104) = &protocol witness table for AppLaunchAffinityScorer;
  *(_QWORD *)(v0 + 72) = 0xD00000000000001ELL;
  *(_QWORD *)(v0 + 80) = 0x80000001B4EF6910;
  *(_QWORD *)(v0 + 136) = &type metadata for CAMRootFlowAffinityScorer;
  *(_QWORD *)(v0 + 144) = &protocol witness table for CAMRootFlowAffinityScorer;
  *(_QWORD *)(v0 + 112) = 0xD000000000000020;
  *(_QWORD *)(v0 + 120) = 0x80000001B4EF6930;
  *(_QWORD *)(v0 + 176) = &type metadata for CarCommandsAffinityScorer;
  *(_QWORD *)(v0 + 184) = &protocol witness table for CarCommandsAffinityScorer;
  *(_QWORD *)(v0 + 152) = 0xD00000000000002CLL;
  *(_QWORD *)(v0 + 160) = 0x80000001B4EF6960;
  *(_QWORD *)(v0 + 216) = &type metadata for CalendarAffinityScorer;
  *(_QWORD *)(v0 + 224) = &protocol witness table for CalendarAffinityScorer;
  *(_QWORD *)(v0 + 192) = 0xD000000000000029;
  *(_QWORD *)(v0 + 200) = 0x80000001B4EF6990;
  *(_QWORD *)(v0 + 256) = &type metadata for ContactsAffinityScorer;
  *(_QWORD *)(v0 + 264) = &protocol witness table for ContactsAffinityScorer;
  *(_QWORD *)(v0 + 232) = 0xD000000000000029;
  *(_QWORD *)(v0 + 240) = 0x80000001B4EF69C0;
  *(_QWORD *)(v0 + 296) = &type metadata for EmergencyAffinityScorer;
  *(_QWORD *)(v0 + 304) = &protocol witness table for EmergencyAffinityScorer;
  *(_QWORD *)(v0 + 272) = 0xD000000000000022;
  *(_QWORD *)(v0 + 280) = 0x80000001B4EF69F0;
  *(_QWORD *)(v0 + 336) = &type metadata for FindMyAffinityScorer;
  *(_QWORD *)(v0 + 344) = &protocol witness table for FindMyAffinityScorer;
  *(_QWORD *)(v0 + 312) = 0xD000000000000026;
  *(_QWORD *)(v0 + 320) = 0x80000001B4EF6A20;
  *(_QWORD *)(v0 + 376) = &type metadata for HomeAutomationAffinityScorer;
  *(_QWORD *)(v0 + 384) = &protocol witness table for HomeAutomationAffinityScorer;
  *(_QWORD *)(v0 + 352) = 0xD00000000000002FLL;
  *(_QWORD *)(v0 + 360) = 0x80000001B4EF6A50;
  *(_QWORD *)(v0 + 416) = &type metadata for InformationAffinityScorer;
  *(_QWORD *)(v0 + 424) = &protocol witness table for InformationAffinityScorer;
  *(_QWORD *)(v0 + 392) = 0xD000000000000024;
  *(_QWORD *)(v0 + 400) = 0x80000001B4EF6A80;
  *(_QWORD *)(v0 + 456) = &type metadata for MessagesAffinityScorer;
  *(_QWORD *)(v0 + 464) = &protocol witness table for MessagesAffinityScorer;
  *(_QWORD *)(v0 + 432) = 0xD000000000000031;
  *(_QWORD *)(v0 + 440) = 0x80000001B4EF6AB0;
  *(_OWORD *)(v0 + 16) = xmmword_1B4EE4500;
  *(_QWORD *)(v0 + 496) = &type metadata for NotificationAffinityScorer;
  *(_QWORD *)(v0 + 504) = &protocol witness table for NotificationAffinityScorer;
  *(_QWORD *)(v0 + 472) = 0xD00000000000002ELL;
  *(_QWORD *)(v0 + 480) = 0x80000001B4EF6AF0;
  *(_QWORD *)(v0 + 536) = &type metadata for PlaybackControlsAffinityScorer;
  *(_QWORD *)(v0 + 544) = &protocol witness table for PlaybackControlsAffinityScorer;
  *(_QWORD *)(v0 + 512) = 0xD00000000000002FLL;
  *(_QWORD *)(v0 + 520) = 0x80000001B4EF6B20;
  *(_QWORD *)(v0 + 576) = &type metadata for SettingsAffinityScorer;
  *(_QWORD *)(v0 + 584) = &protocol witness table for SettingsAffinityScorer;
  *(_QWORD *)(v0 + 552) = 0xD000000000000029;
  *(_QWORD *)(v0 + 560) = 0x80000001B4EF6B50;
  *(_QWORD *)(v0 + 616) = &type metadata for SiriAudioAffinityScorer;
  *(_QWORD *)(v0 + 624) = &protocol witness table for SiriAudioAffinityScorer;
  *(_QWORD *)(v0 + 592) = 0xD00000000000002CLL;
  *(_QWORD *)(v0 + 600) = 0x80000001B4EF6B80;
  *(_QWORD *)(v0 + 656) = &type metadata for SiriClockFlowAffinityScorer;
  *(_QWORD *)(v0 + 664) = &protocol witness table for SiriClockFlowAffinityScorer;
  *(_QWORD *)(v0 + 632) = 0xD00000000000001ELL;
  *(_QWORD *)(v0 + 640) = 0x80000001B4EF6BB0;
  *(_QWORD *)(v0 + 696) = &type metadata for SiriLinkFlowAffinityScorer;
  *(_QWORD *)(v0 + 704) = &protocol witness table for SiriLinkFlowAffinityScorer;
  *(_QWORD *)(v0 + 680) = 0x80000001B4EF6BD0;
  *(_QWORD *)(v0 + 672) = 0xD000000000000021;
  *(_QWORD *)(v0 + 736) = &type metadata for SocialConversationAffinityScorer;
  *(_QWORD *)(v0 + 744) = &protocol witness table for SocialConversationAffinityScorer;
  *(_QWORD *)(v0 + 712) = 0xD000000000000033;
  *(_QWORD *)(v0 + 720) = 0x80000001B4EF6C00;
  *(_QWORD *)(v0 + 776) = &type metadata for SystemCommandsAffinityScorer;
  *(_QWORD *)(v0 + 784) = &protocol witness table for SystemCommandsAffinityScorer;
  *(_QWORD *)(v0 + 752) = 0xD00000000000002FLL;
  *(_QWORD *)(v0 + 760) = 0x80000001B4EF6C40;
  *(_QWORD *)(v0 + 816) = &type metadata for PhoneAffinityScorer;
  *(_QWORD *)(v0 + 824) = &protocol witness table for PhoneAffinityScorer;
  *(_QWORD *)(v0 + 792) = 0xD00000000000002ALL;
  *(_QWORD *)(v0 + 800) = 0x80000001B4EF6C70;
  *(_QWORD *)(v0 + 856) = &type metadata for ReaderAffinityScorer;
  *(_QWORD *)(v0 + 864) = &protocol witness table for ReaderAffinityScorer;
  *(_QWORD *)(v0 + 832) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 840) = 0x80000001B4EF6CA0;
  *(_QWORD *)(v0 + 896) = &type metadata for TimerAffinityScorer;
  *(_QWORD *)(v0 + 904) = &protocol witness table for TimerAffinityScorer;
  *(_QWORD *)(v0 + 872) = 0xD000000000000026;
  *(_QWORD *)(v0 + 880) = 0x80000001B4EF6CC0;
  *(_QWORD *)(v0 + 936) = &type metadata for TranslationAffinityScorer;
  *(_QWORD *)(v0 + 944) = &protocol witness table for TranslationAffinityScorer;
  *(_QWORD *)(v0 + 912) = 0xD00000000000002CLL;
  *(_QWORD *)(v0 + 920) = 0x80000001B4EF6CF0;
  *(_QWORD *)(v0 + 976) = &type metadata for NotebookAffinityScorer;
  *(_QWORD *)(v0 + 984) = &protocol witness table for NotebookAffinityScorer;
  *(_QWORD *)(v0 + 952) = 0xD000000000000021;
  *(_QWORD *)(v0 + 960) = 0x80000001B4EF6D20;
  *(_QWORD *)(v0 + 1016) = &type metadata for HealthAffinityScorer;
  *(_QWORD *)(v0 + 1024) = &protocol witness table for HealthAffinityScorer;
  *(_QWORD *)(v0 + 992) = 0xD000000000000021;
  *(_QWORD *)(v0 + 1000) = 0x80000001B4EF6D50;
  *(_QWORD *)(v0 + 1056) = &type metadata for PhotosAffinityScorer;
  *(_QWORD *)(v0 + 1064) = &protocol witness table for PhotosAffinityScorer;
  *(_QWORD *)(v0 + 1032) = 0xD000000000000027;
  *(_QWORD *)(v0 + 1040) = 0x80000001B4EF6D80;
  *(_QWORD *)(v0 + 1096) = &type metadata for SiriVideoAffinityScorer;
  *(_QWORD *)(v0 + 1104) = &protocol witness table for SiriVideoAffinityScorer;
  *(_QWORD *)(v0 + 1072) = 0xD000000000000026;
  *(_QWORD *)(v0 + 1080) = 0x80000001B4EF6DB0;
  v22 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 27, 0);
  v1 = v22;
  for (i = 32; i != 1112; i += 40)
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + i, (uint64_t)&v16);
    v3 = v17;
    v4 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    *(_QWORD *)&v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    *((_QWORD *)&v19 + 1) = v5;
    outlined init with take of ReferenceResolutionClientProtocol(&v16, (uint64_t)v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = v1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v1 + 16) + 1, 1);
      v1 = v22;
    }
    v8 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    if (v8 >= v7 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v1 = v22;
    }
    *(_QWORD *)(v1 + 16) = v8 + 1;
    v9 = v1 + 56 * v8;
    v10 = v19;
    v11 = v20[0];
    v12 = v20[1];
    *(_QWORD *)(v9 + 80) = v21;
    *(_OWORD *)(v9 + 48) = v11;
    *(_OWORD *)(v9 + 64) = v12;
    *(_OWORD *)(v9 + 32) = v10;
  }
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScoring);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (*(_QWORD *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AffinityScoring>);
    v13 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9E0];
  }
  *(_QWORD *)&v19 = v13;
  v14 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v14, 1, &v19);
  result = swift_release();
  static AffinityScorerManager.kAffinityScorers = v19;
  return result;
}

uint64_t *AffinityScorerManager.kAffinityScorers.unsafeMutableAddressor()
{
  if (one-time initialization token for kAffinityScorers != -1)
    swift_once();
  return &static AffinityScorerManager.kAffinityScorers;
}

uint64_t static AffinityScorerManager.kAffinityScorers.getter()
{
  if (one-time initialization token for kAffinityScorers != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void *AffinityScorerManager.DefaultAffinityScorer.pommesConfidenceThreshold.unsafeMutableAddressor()
{
  return &static AffinityScorerManager.DefaultAffinityScorer.pommesConfidenceThreshold;
}

double static AffinityScorerManager.DefaultAffinityScorer.pommesConfidenceThreshold.getter()
{
  return 0.5;
}

uint64_t AffinityScorerManager.DefaultAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t AffinityScorerManager.DefaultAffinityScorer.score.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

SiriKitRuntime::AffinityScorerManager::DefaultAffinityScorer __swiftcall AffinityScorerManager.DefaultAffinityScorer.init(score:)(SiriKitRuntime::Affinity score)
{
  void *v2;
  uint64_t v3;
  SiriKitRuntime::AffinityScorerManager::DefaultAffinityScorer result;

  v2 = (void *)0x80000001B4EF6860;
  v3 = 0xD000000000000023;
  result.bundleIdentifier._object = v2;
  result.bundleIdentifier._countAndFlagsBits = v3;
  result.score = score;
  return result;
}

uint64_t AffinityScorerManager.DefaultAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized AffinityScorerManager.DefaultAffinityScorer.score(input:environment:)(a1, a5);
}

uint64_t protocol witness for AffinityScoring.bundleIdentifier.getter in conformance AffinityScorerManager.DefaultAffinityScorer()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *AffinityScorerManager.kDefaultScorer.unsafeMutableAddressor()
{
  return &static AffinityScorerManager.kDefaultScorer;
}

unint64_t static AffinityScorerManager.kDefaultScorer.getter()
{
  return 0xD000000000000023;
}

void static AffinityScorerManager.affinityScorer(for:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17[2];

  if (one-time initialization token for kAffinityScorers != -1)
    swift_once();
  v6 = static AffinityScorerManager.kAffinityScorers;
  if (*(_QWORD *)(static AffinityScorerManager.kAffinityScorers + 16))
  {
    swift_bridgeObjectRetain();
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v8 & 1) != 0)
    {
      outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)&v14);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v15 + 1))
      {
        outlined init with take of ReferenceResolutionClientProtocol(&v14, (uint64_t)v17);
        outlined init with take of ReferenceResolutionClientProtocol(v17, a3);
        return;
      }
    }
    else
    {
      v16 = 0;
      v14 = 0u;
      v15 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
  }
  outlined destroy of AffinityScoring?((uint64_t)&v14);
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    *(_QWORD *)&v17[0] = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "No AffinityScorer found for %s, returning default.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(_QWORD *)(a3 + 24) = &type metadata for AffinityScorerManager.DefaultAffinityScorer;
  *(_QWORD *)(a3 + 32) = &protocol witness table for AffinityScorerManager.DefaultAffinityScorer;
  *(_QWORD *)a3 = 0xD000000000000023;
  *(_QWORD *)(a3 + 8) = 0x80000001B4EF6860;
  *(_BYTE *)(a3 + 16) = 2;
}

uint64_t Affinity.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Affinity(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Affinity()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Affinity()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Affinity()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Affinity@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Affinity.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Affinity(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t AffinityScoringAdapter.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AffinityScoringAdapter.affinityScorer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AffinityScoringAdapter() + 20);
  return outlined init with copy of ReferenceResolutionClientProtocol(v3, a1);
}

uint64_t AffinityScoringAdapter.init(affinityScorer:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UUID.init()();
  v4 = a2 + *(int *)(type metadata accessor for AffinityScoringAdapter() + 20);
  return outlined init with take of ReferenceResolutionClientProtocol(a1, v4);
}

uint64_t AffinityScoringAdapter.score(for:loopCheck:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for AffinityScoringAdapter() + 20));
  v4 = v3[3];
  v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  type metadata accessor for SiriEnvironment();
  v6 = static SiriEnvironment.default.getter();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v6, v4, v5);
  swift_release();
  return v7;
}

uint64_t protocol witness for AffinityScorer.id.getter in conformance AffinityScoringAdapter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  __int128 v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48[3];
  id v49;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  outlined init with copy of (String, AffinityScoring)(a1 + 32, (uint64_t)&v46);
  v7 = v46;
  v8 = v47;
  v44 = v46;
  v45 = v47;
  outlined init with take of ReferenceResolutionClientProtocol(v48, (uint64_t)v43);
  v9 = (_QWORD *)*a3;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v8;
    outlined init with take of ReferenceResolutionClientProtocol(v43, v20[7] + 40 * v11);
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (!v25)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 88;
    while (1)
    {
      outlined init with copy of (String, AffinityScoring)(v26, (uint64_t)&v46);
      v27 = v46;
      v28 = v47;
      v44 = v46;
      v45 = v47;
      outlined init with take of ReferenceResolutionClientProtocol(v48, (uint64_t)v43);
      v29 = (_QWORD *)*a3;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        break;
      v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_25;
      }
      if ((v35 & 1) != 0)
        goto LABEL_10;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = (uint64_t *)(v37[6] + 16 * v30);
      *v38 = v27;
      v38[1] = v28;
      outlined init with take of ReferenceResolutionClientProtocol(v43, v37[7] + 40 * v30);
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_24;
      v37[2] = v40;
      v26 += 56;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v49 = v18;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x80000001B4EF6E20;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of AffinityScoring?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScoring?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t specialized Affinity.init(rawValue:)(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t type metadata accessor for AffinityScoringAdapter()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AffinityScoringAdapter;
  if (!type metadata singleton initialization cache for AffinityScoringAdapter)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type Affinity and conformance Affinity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Affinity and conformance Affinity;
  if (!lazy protocol witness table cache variable for type Affinity and conformance Affinity)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for Affinity, &type metadata for Affinity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Affinity and conformance Affinity);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AffinityScoringAdapter(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AffinityScoringAdapter and conformance AffinityScoringAdapter, (uint64_t (*)(uint64_t))type metadata accessor for AffinityScoringAdapter, (uint64_t)&protocol conformance descriptor for AffinityScoringAdapter);
  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AffinityScoringAdapter and conformance AffinityScoringAdapter, (uint64_t (*)(uint64_t))type metadata accessor for AffinityScoringAdapter, (uint64_t)&protocol conformance descriptor for AffinityScoringAdapter);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for AffinityScorerManager()
{
  return &type metadata for AffinityScorerManager;
}

uint64_t initializeBufferWithCopyOfBuffer for AffinityScorerManager.DefaultAffinityScorer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AffinityScorerManager.DefaultAffinityScorer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AffinityScorerManager.DefaultAffinityScorer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AffinityScorerManager.DefaultAffinityScorer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AffinityScorerManager.DefaultAffinityScorer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AffinityScorerManager.DefaultAffinityScorer()
{
  return &type metadata for AffinityScorerManager.DefaultAffinityScorer;
}

uint64_t storeEnumTagSinglePayload for Affinity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B4CCD2EC + 4 * byte_1B4EE451A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B4CCD320 + 4 * byte_1B4EE4515[v4]))();
}

uint64_t sub_1B4CCD320(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CCD328(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CCD330);
  return result;
}

uint64_t sub_1B4CCD33C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CCD344);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B4CCD348(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CCD350(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Affinity()
{
  return &type metadata for Affinity;
}

uint64_t dispatch thunk of AffinityScoring.bundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AffinityScoring.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t destroy for AffinityScoringAdapter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(a2 + 20));
}

uint64_t initializeWithCopy for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  return a1;
}

uint64_t assignWithCopy for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(a3 + 20)), (uint64_t *)(a2 + *(int *)(a3 + 20)));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  return a1;
}

uint64_t assignWithTake for AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  __swift_destroy_boxed_opaque_existential_1(a1 + v7);
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AffinityScoringAdapter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4CCD6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AffinityScoringAdapter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4CCD774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for AffinityScoringAdapter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined init with copy of (String, AffinityScoring)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AffinityScoring));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

SiriKitRuntime::AlarmAffinityScorer __swiftcall AlarmAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::AlarmAffinityScorer result;

  v0 = (void *)0x80000001B4EF68F0;
  v1 = 0xD00000000000001ELL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t AlarmAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t one-time initialization function for kAppBundleIdMatches()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppBundleIdMatches);
  result = swift_arrayDestroy();
  static AlarmAffinityScorer.kAppBundleIdMatches = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppBundleIdMatches);
  result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kAppBundleIdMatches = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppBundleIdMatches);
  result = swift_arrayDestroy();
  static ReaderAffinityScorer.kAppBundleIdMatches = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppBundleIdMatches);
  result = swift_arrayDestroy();
  static TimerAffinityScorer.kAppBundleIdMatches = v0;
  return result;
}

uint64_t *AlarmAffinityScorer.kAppBundleIdMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppBundleIdMatches != -1)
    swift_once();
  return &static AlarmAffinityScorer.kAppBundleIdMatches;
}

uint64_t static AlarmAffinityScorer.kAppBundleIdMatches.getter()
{
  if (one-time initialization token for kAppBundleIdMatches != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t specialized AlarmAffinityScorer.supportedAppIsOnScreen(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  BOOL v64;
  char *v65;
  char *v66;
  unint64_t i;
  unint64_t v68;
  _QWORD *v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::Int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  BOOL v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  BOOL v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t j;
  unint64_t v93;
  _QWORD *v94;
  BOOL v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int v108;
  char *v109;
  void (*v110)(char *, char *, uint64_t);
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  void (*v118)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v119;
  char *v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  void (*v123)(char *, uint64_t, uint64_t);
  char *v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  void (*v128)(char *, _QWORD, uint64_t);
  unint64_t v129;
  void (*v130)(char *);
  unint64_t v131;
  char *v132;
  unint64_t v133;
  char v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(char *, uint64_t);
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  int v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1E0C80A78](v2);
  v202 = (uint64_t)&v160 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RRMetadata();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v194 = (char *)&v160 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v201 = (char *)&v160 - v8;
  v9 = type metadata accessor for RRDataSourceMetadataValue();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v162 = (char *)&v160 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v177 = (char *)&v160 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v191 = (char *)&v160 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v185 = (char *)&v160 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v184 = (char *)&v160 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v176 = (char *)&v160 - v22;
  MEMORY[0x1E0C80A78](v21);
  v182 = (char *)&v160 - v23;
  v24 = type metadata accessor for UsoIdentifier();
  v197 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x1E0C80A78](v24);
  v188 = (char *)&v160 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v193 = (char *)&v160 - v28;
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v160 - v29;
  v181 = type metadata accessor for RREntity();
  v174 = *(_QWORD *)(v181 - 8);
  v31 = MEMORY[0x1E0C80A78](v181);
  v173 = (char *)&v160 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v175 = (char *)&v160 - v33;
  v179 = type metadata accessor for RRCandidate();
  MEMORY[0x1E0C80A78](v179);
  v183 = (char *)&v160 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = *(_QWORD *)(a1 + 16);
  if (!v172)
    return 0;
  v36 = v34;
  v171 = type metadata accessor for UsoEntity_common_App();
  v170 = a1 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  v190 = *MEMORY[0x1E0DA3D48];
  v166 = *MEMORY[0x1E0DA3DC0];
  v161 = *MEMORY[0x1E0DA3DB8];
  v169 = *(_QWORD *)(v36 + 72);
  v167 = v36;
  v168 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v160 = a1;
  swift_bridgeObjectRetain();
  v37 = 0;
  v199 = v4;
  v200 = v10;
  v195 = v5;
  v196 = v24;
  v198 = v30;
  while (1)
  {
    v178 = v37;
    v168(v183, v170 + v169 * v37, v179);
    v38 = v175;
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    v180 = *(void (**)(char *, uint64_t))(v174 + 8);
    v180(v38, v181);
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    v39 = v203;
    if (v203)
    {
      swift_retain();
      v40 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      result = swift_release();
      v42 = MEMORY[0x1E0DEE9D8];
      v204 = MEMORY[0x1E0DEE9D8];
      v187 = *(_QWORD *)(v40 + 16);
      if (v187)
      {
        v165 = v39;
        v43 = 0;
        v44 = v196;
        v186 = v40;
        while (1)
        {
          if (v43 >= *(_QWORD *)(v40 + 16))
          {
            __break(1u);
            goto LABEL_118;
          }
          v46 = *(_QWORD *)(v197 + 72);
          v192 = (char *)((*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80));
          v189 = v46;
          v47 = &v192[v40 + v46 * v43];
          v48 = *(void (**)(char *, char *, uint64_t))(v197 + 16);
          v48(v30, v47, v44);
          if (one-time initialization token for kAppBundleIdMatches != -1)
            swift_once();
          v49 = static AlarmAffinityScorer.kAppBundleIdMatches;
          v50 = UsoIdentifier.appBundleId.getter();
          v52 = v51;
          if (*(_QWORD *)(v49 + 16))
          {
            v53 = v50;
            Hasher.init(_seed:)();
            String.hash(into:)();
            v54 = Hasher._finalize()();
            v55 = -1 << *(_BYTE *)(v49 + 32);
            v56 = v54 & ~v55;
            v57 = v49 + 56;
            if (((*(_QWORD *)(v49 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) != 0)
            {
              v58 = *(_QWORD *)(v49 + 48);
              v59 = (_QWORD *)(v58 + 16 * v56);
              v60 = *v59 == v53 && v59[1] == v52;
              if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_27:
                swift_bridgeObjectRelease();
                v65 = v193;
                v66 = v198;
                v44 = v196;
                v48(v193, v198, v196);
LABEL_50:
                v87 = v197;
                (*(void (**)(char *, uint64_t))(v197 + 8))(v65, v44);
                v88 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
                v88(v188, v66, v44);
                v89 = v204;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v89 + 16) + 1, 1);
                  v44 = v196;
                  v89 = v204;
                }
                v4 = v199;
                v10 = v200;
                v40 = v186;
                v91 = *(_QWORD *)(v89 + 16);
                v90 = *(_QWORD *)(v89 + 24);
                if (v91 >= v90 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v91 + 1, 1);
                  v44 = v196;
                  v89 = v204;
                }
                *(_QWORD *)(v89 + 16) = v91 + 1;
                result = ((uint64_t (*)(char *, char *, uint64_t))v88)(&v192[v89 + v91 * v189], v188, v44);
                v204 = v89;
                v30 = v198;
                goto LABEL_10;
              }
              v61 = ~v55;
              v62 = (v56 + 1) & v61;
              if (((*(_QWORD *)(v57 + ((v62 >> 3) & 0xFFFFFFFFFFFFF8)) >> v62) & 1) != 0)
              {
                v63 = (_QWORD *)(v58 + 16 * v62);
                v64 = *v63 == v53 && v63[1] == v52;
                if (v64 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_27;
                for (i = v62 + 1; ; i = v68 + 1)
                {
                  v68 = i & v61;
                  if (((*(_QWORD *)(v57 + (((i & v61) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v61)) & 1) == 0)
                    break;
                  v69 = (_QWORD *)(v58 + 16 * v68);
                  v70 = *v69 == v53 && v69[1] == v52;
                  if (v70 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    goto LABEL_27;
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          v48(v193, v198, v196);
          v71 = static AlarmAffinityScorer.kAppBundleIdMatches;
          v72 = UsoIdentifier.value.getter();
          v74 = v73;
          if (*(_QWORD *)(v71 + 16))
          {
            v75 = v72;
            Hasher.init(_seed:)();
            String.hash(into:)();
            v76 = Hasher._finalize()();
            v77 = -1 << *(_BYTE *)(v71 + 32);
            v78 = v76 & ~v77;
            v79 = v71 + 56;
            if (((*(_QWORD *)(v71 + 56 + ((v78 >> 3) & 0xFFFFFFFFFFFFF8)) >> v78) & 1) != 0)
            {
              v80 = *(_QWORD *)(v71 + 48);
              v81 = (_QWORD *)(v80 + 16 * v78);
              v82 = *v81 == v75 && v81[1] == v74;
              if (v82 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_49:
                swift_bridgeObjectRelease();
                v44 = v196;
                v65 = v193;
                v66 = v198;
                goto LABEL_50;
              }
              v83 = ~v77;
              v84 = (v78 + 1) & ~v77;
              if (((*(_QWORD *)(v79 + ((v84 >> 3) & 0xFFFFFFFFFFFFF8)) >> v84) & 1) != 0)
              {
                v85 = (_QWORD *)(v80 + 16 * v84);
                v86 = *v85 == v75 && v85[1] == v74;
                if (v86 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_49;
                for (j = v84 + 1; ; j = v93 + 1)
                {
                  v93 = j & v83;
                  if (((*(_QWORD *)(v79 + (((j & v83) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v83)) & 1) == 0)
                    break;
                  v94 = (_QWORD *)(v80 + 16 * v93);
                  v95 = *v94 == v75 && v94[1] == v74;
                  if (v95 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    goto LABEL_49;
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          v44 = v196;
          v45 = *(void (**)(char *, uint64_t))(v197 + 8);
          v45(v193, v196);
          v30 = v198;
          result = ((uint64_t (*)(char *, uint64_t))v45)(v198, v44);
          v4 = v199;
          v10 = v200;
          v40 = v186;
LABEL_10:
          ++v43;
          v5 = v195;
          if (v43 == v187)
          {
            v42 = v204;
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
      v96 = *(_QWORD *)(v42 + 16);
      swift_release();
      swift_release();
      v97 = v194;
      if (v96)
      {
        (*(void (**)(char *, uint64_t))(v167 + 8))(v183, v179);
LABEL_114:
        v159 = 1;
LABEL_115:
        swift_bridgeObjectRelease();
        return v159;
      }
    }
    else
    {
      v97 = v194;
    }
    v98 = v173;
    RRCandidate.entity.getter();
    v99 = RREntity.metadata.getter();
    v180(v98, v181);
    v100 = *(_QWORD *)(v99 + 16);
    if (v100)
    {
      v101 = v99 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v189 = v99;
      swift_bridgeObjectRetain();
      v102 = *(_QWORD *)(v5 + 72);
      v192 = *(char **)(v5 + 16);
      v103 = MEMORY[0x1E0DEE9D8];
      do
      {
        v104 = v103;
        v105 = v9;
        v106 = v201;
        v107 = v192;
        ((void (*)(char *, unint64_t, uint64_t))v192)(v201, v101, v4);
        ((void (*)(char *, char *, uint64_t))v107)(v97, v106, v4);
        v108 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v97, v4);
        if (v108 == v190)
        {
          (*(void (**)(char *, uint64_t))(v5 + 96))(v97, v4);
          v109 = v97;
          v110 = *(void (**)(char *, char *, uint64_t))(v200 + 32);
          v111 = v104;
          v112 = v185;
          v113 = v202;
          v114 = v102;
          v115 = v5;
          v116 = v200;
          v110(v185, v109, v105);
          v117 = v112;
          v103 = v111;
          v110((char *)v113, v117, v105);
          v118 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v116 + 56);
          v9 = v105;
          v119 = v105;
          v10 = v116;
          v5 = v115;
          v102 = v114;
          v4 = v199;
          v118(v113, 0, 1, v119);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v201, v4);
        }
        else
        {
          v120 = v97;
          v121 = *(void (**)(char *, uint64_t))(v5 + 8);
          v121(v120, v4);
          v122 = v105;
          v10 = v200;
          v9 = v122;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 56))(v202, 1, 1);
          v103 = v104;
          v121(v201, v4);
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v202, 1, v9) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v202, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          v123 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
          v124 = v184;
          v123(v184, v202, v9);
          v123(v191, (uint64_t)v124, v9);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v103 + 16) + 1, 1, v103);
          v126 = *(_QWORD *)(v103 + 16);
          v125 = *(_QWORD *)(v103 + 24);
          if (v126 >= v125 >> 1)
            v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v125 > 1, v126 + 1, 1, v103);
          *(_QWORD *)(v103 + 16) = v126 + 1;
          v123((char *)(v103+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v126), (uint64_t)v191, v9);
          v4 = v199;
          v5 = v195;
        }
        v97 = v194;
        v101 += v102;
        --v100;
      }
      while (v100);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      v103 = MEMORY[0x1E0DEE9D8];
    }
    v127 = v182;
    v128 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
    v128(v182, v166, v9);
    v192 = *(char **)(v103 + 16);
    if (!v192)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v127, v9);
      goto LABEL_4;
    }
    v164 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v129 = v103 + v164;
    v130 = *(void (**)(char *))(v10 + 16);
    v131 = v103;
    v132 = v176;
    v186 = v129;
    v189 = (uint64_t)v130;
    v130(v176);
    v133 = lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue();
    swift_bridgeObjectRetain();
    v187 = v133;
    v134 = dispatch thunk of static Equatable.== infix(_:_:)();
    v135 = *(void (**)(char *, uint64_t))(v10 + 8);
    v135(v132, v9);
    if ((v134 & 1) == 0)
      break;
    swift_bridgeObjectRelease();
    v136 = v162;
    v137 = v182;
    v138 = v131;
LABEL_85:
    v139 = v186;
LABEL_86:
    v135(v137, v9);
    v128(v177, v161, v9);
    ((void (*)(char *, uint64_t, uint64_t))v189)(v136, v139, v9);
    swift_bridgeObjectRetain();
    v140 = dispatch thunk of static Equatable.== infix(_:_:)();
    v135(v136, v9);
    if ((v140 & 1) == 0)
    {
      if (v192 == (char *)1)
        goto LABEL_88;
      v148 = *(_QWORD *)(v200 + 72);
      ((void (*)(char *, uint64_t, uint64_t))v189)(v136, v139 + v148, v9);
      v149 = dispatch thunk of static Equatable.== infix(_:_:)();
      v135(v136, v9);
      if ((v149 & 1) == 0)
      {
        if (v192 != (char *)2)
        {
          v150 = v138 + v164 + 2 * v148;
          v151 = 2;
          do
          {
            result = ((uint64_t (*)(char *, unint64_t, uint64_t))v189)(v136, v150, v9);
            v152 = (char *)(v151 + 1);
            if (__OFADD__(v151, 1))
              goto LABEL_119;
            v153 = dispatch thunk of static Equatable.== infix(_:_:)();
            v135(v136, v9);
            if ((v153 & 1) != 0)
              goto LABEL_3;
            ++v151;
            v150 += v148;
          }
          while (v152 != v192);
        }
LABEL_88:
        swift_bridgeObjectRelease();
        v135(v177, v9);
        swift_bridgeObjectRelease();
        if (one-time initialization token for kAppBundleIdMatches != -1)
          swift_once();
        v141 = static AlarmAffinityScorer.kAppBundleIdMatches;
        v142 = v175;
        v143 = v183;
        RRCandidate.entity.getter();
        v144 = RREntity.appBundleId.getter();
        v146 = v145;
        v180(v142, v181);
        LOBYTE(v141) = specialized Set.contains(_:)(v144, v146, v141);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v167 + 8))(v143, v179);
        v4 = v199;
        v10 = v200;
        v5 = v195;
        v30 = v198;
        if ((v141 & 1) != 0)
          goto LABEL_114;
        goto LABEL_5;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    v135(v177, v9);
    v4 = v199;
    v10 = v200;
    v5 = v195;
LABEL_4:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v167 + 8))(v183, v179);
    v30 = v198;
LABEL_5:
    v37 = v178 + 1;
    if (v178 + 1 == v172)
    {
      v159 = 0;
      goto LABEL_115;
    }
  }
  v163 = v131;
  if (v192 == (char *)1)
    goto LABEL_104;
  v139 = v186;
  v165 = *(_QWORD *)(v200 + 72);
  ((void (*)(char *, uint64_t, uint64_t))v189)(v132, v186 + v165, v9);
  v147 = dispatch thunk of static Equatable.== infix(_:_:)();
  v135(v132, v9);
  v138 = v163;
  if ((v147 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v136 = v162;
    v137 = v182;
    goto LABEL_86;
  }
  if (v192 == (char *)2)
  {
LABEL_104:
    swift_bridgeObjectRelease();
LABEL_105:
    v10 = v200;
    v135(v182, v9);
    goto LABEL_4;
  }
  v154 = v163 + v164 + 2 * v165;
  v155 = 2;
  v136 = v162;
  while (1)
  {
    v156 = v176;
    result = ((uint64_t (*)(char *, unint64_t, uint64_t))v189)(v176, v154, v9);
    v157 = (char *)(v155 + 1);
    if (__OFADD__(v155, 1))
      break;
    v158 = dispatch thunk of static Equatable.== infix(_:_:)();
    v135(v156, v9);
    if ((v158 & 1) != 0)
    {
      v138 = v163;
      swift_bridgeObjectRelease();
      v137 = v182;
      goto LABEL_85;
    }
    ++v155;
    v154 += v165;
    if (v157 == v192)
    {
      swift_bridgeObjectRelease();
      v4 = v199;
      v5 = v195;
      goto LABEL_105;
    }
  }
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
  return result;
}

uint64_t specialized AlarmAffinityScorer.priorityForSharedTask(_:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[32];

  v0 = type metadata accessor for RREntity();
  v47 = *(_QWORD *)(v0 - 8);
  v48 = v0;
  MEMORY[0x1E0C80A78](v0);
  v46 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for RRCandidate();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v45 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v42 - v6;
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v54, (uint64_t)&v51);
  if (v53)
  {
    type metadata accessor for UsoTask_noVerb_uso_NoEntity();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
LABEL_28:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return 2;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v51 = UsoTask.baseEntityAsString.getter();
  v52 = v8;
  strcpy((char *)v50, "uso_NoEntity");
  BYTE5(v50[1]) = 0;
  HIWORD(v50[1]) = -5120;
  v44 = lazy protocol witness table accessor for type String and conformance String();
  v9 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
    goto LABEL_28;
  SiriEnvironment.salientEntitiesProvider.getter();
  v10 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  v11 = MEMORY[0x1E0DEE9D8];
  v49 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  v43 = v12;
  if (v12)
  {
    v13 = 0;
    v42 = v2;
    while (v13 < *(_QWORD *)(v10 + 16))
    {
      v14 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v15 = *(_QWORD *)(v3 + 72);
      v16 = v10;
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v7, v10 + v14 + v15 * v13, v2);
      v17 = v46;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v48);
      v18 = UsoTask.verbString.getter();
      v20 = v19;
      swift_release();
      v51 = v18;
      v52 = v20;
      strcpy((char *)v50, "common_Alarm");
      BYTE5(v50[1]) = 0;
      HIWORD(v50[1]) = -5120;
      v21 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
      {
        v22 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
        v22(v45, v7, v2);
        v23 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
          v23 = v49;
        }
        v25 = *(_QWORD *)(v23 + 16);
        v24 = *(_QWORD *)(v23 + 24);
        if (v25 >= v24 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          v23 = v49;
        }
        *(_QWORD *)(v23 + 16) = v25 + 1;
        v26 = v23 + v14 + v25 * v15;
        v2 = v42;
        v22((char *)v26, v45, v42);
        v49 = v23;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      }
      ++v13;
      v10 = v16;
      if (v43 == v13)
      {
        v11 = v49;
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor == -1)
    {
LABEL_20:
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
      swift_retain();
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        v31 = swift_slowAlloc();
        v51 = v31;
        *(_DWORD *)v30 = 136315138;
        v32 = swift_retain();
        v33 = MEMORY[0x1B5E434D4](v32, v2);
        v35 = v34;
        swift_release();
        v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v28, v29, "AlarmAffinityScorer found salient alarm entities %s", v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v31, -1, -1);
        MEMORY[0x1B5E44758](v30, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return 3;
    }
LABEL_33:
    swift_once();
    goto LABEL_20;
  }
  swift_release();
  v36 = specialized AlarmAffinityScorer.supportedAppIsOnScreen(with:)(v10);
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1B4BE6000, v38, v39, "AlarmAffinityScorer found commonApp entity with Clock/NanoAlarm bundle ID", v40, 2u);
      MEMORY[0x1B5E44758](v40, -1, -1);
    }

    goto LABEL_28;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return 0;
}

uint64_t specialized AlarmAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD v26[4];

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for USOParse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    if (specialized static AffinityScorerUtils.getTask(_:)())
    {
      v26[2] = UsoTask.baseEntityAsString.getter();
      v26[3] = v8;
      v26[0] = 0x6D72616C41;
      v26[1] = 0xE500000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      v9 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
      {
        if ((specialized static AlarmAffinityScorer.isCreateAlarmTaskWithRelativeOffset(task:)() & 1) != 0)
        {
          if (one-time initialization token for executor != -1)
            swift_once();
          v10 = type metadata accessor for Logger();
          __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
          v11 = Logger.logObject.getter();
          v12 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v11, v12))
            goto LABEL_25;
          v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v13 = 0;
          v14 = "AlarmAffinityScorer Task is \"Create Alarm\" with a relative offset duration – alarm should not take a f"
                "irst pass; timer should handle first";
        }
        else
        {
          if (one-time initialization token for executor != -1)
            swift_once();
          v24 = type metadata accessor for Logger();
          __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
          v11 = Logger.logObject.getter();
          v12 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v11, v12))
            goto LABEL_25;
          v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v13 = 0;
          v14 = "AlarmAffinityScorer Task contains \"Alarm\" – using .default affinity";
        }
        _os_log_impl(&dword_1B4BE6000, v11, v12, v14, v13, 2u);
        MEMORY[0x1B5E44758](v13, -1, -1);
LABEL_25:

        swift_release();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return 2;
      }
      v18 = specialized AlarmAffinityScorer.priorityForSharedTask(_:environment:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1B4BE6000, v21, v22, "AlarmAffinityScorer Could not extract usoTask from parse", v23, 2u);
        MEMORY[0x1B5E44758](v23, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17))
    {

      return 2;
    }
    v18 = 2;
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "AlarmAffinityScorer Not a USO parse – .default", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  return v18;
}

uint64_t getEnumTagSinglePayload for AlarmAffinityScorer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmAffinityScorer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmAffinityScorer()
{
  return &type metadata for AlarmAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue;
  if (!lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue)
  {
    v1 = type metadata accessor for RRDataSourceMetadataValue();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA3DD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue);
  }
  return result;
}

void one-time initialization function for forceEnabled()
{
  static AmbiguityFeatureFlags.forceEnabled = MEMORY[0x1E0DEE9E0];
}

{
  static SydneyConversationFeatureFlags.forceEnabled = MEMORY[0x1E0DEE9E0];
}

{
  static SiriKitFlowFeatureFlagDefinitions.forceEnabled = MEMORY[0x1E0DEE9E0];
}

{
  static SiriPlaybackControlFeature.forceEnabled = MEMORY[0x1E0DEE9E0];
}

{
  static SiriPhoneFeature.forceEnabled = MEMORY[0x1E0DEE9E0];
}

{
  static LinkFeature.forceEnabled = MEMORY[0x1E0DEE9E0];
}

uint64_t *AmbiguityFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static AmbiguityFeatureFlags.forceEnabled;
}

uint64_t static AmbiguityFeatureFlags.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AmbiguityFeatureFlags.forceEnabled.setter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  static AmbiguityFeatureFlags.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AmbiguityFeatureFlags.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

const char *AmbiguityFeatureFlags.domain.getter()
{
  return "SiriKitRuntime";
}

const char *AmbiguityFeatureFlags.feature.getter(char a1)
{
  if (!a1)
    return "affinity_scoring_v2";
  if (a1 == 1)
    return "input_paraphrasing_flows";
  return "app_shortcuts_omitting_app_name";
}

BOOL static AmbiguityFeatureFlags.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AmbiguityFeatureFlags.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int AmbiguityFeatureFlags.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance AmbiguityFeatureFlags()
{
  return "SiriKitRuntime";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance AmbiguityFeatureFlags()
{
  _BYTE *v0;
  const char *v1;

  v1 = "input_paraphrasing_flows";
  if (*v0 != 1)
    v1 = "app_shortcuts_omitting_app_name";
  if (*v0)
    return v1;
  else
    return "affinity_scoring_v2";
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance AmbiguityFeatureFlags()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance AmbiguityFeatureFlags(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  static AmbiguityFeatureFlags.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

unint64_t instantiation function for generic protocol witness table for AmbiguityFeatureFlags(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AmbiguityFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AmbiguityFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4CCFC78 + 4 * byte_1B4EE4775[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4CCFCAC + 4 * asc_1B4EE4770[v4]))();
}

uint64_t sub_1B4CCFCAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CCFCB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CCFCBCLL);
  return result;
}

uint64_t sub_1B4CCFCC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CCFCD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4CCFCD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CCFCDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AmbiguityFeatureFlags()
{
  return &type metadata for AmbiguityFeatureFlags;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_Sds5NeverOTg504_s14d62KitRuntime16AmbiguityServiceC17findBestActionFor21conversationh260Input0j6HelperL00jM016actionCandidates02rrO08fallback20previousConversation11inputOriginAA0dE8ResponseVSgAA0skL0C_AA0smL0VAA0sM0CSay0A3Cam0H9CandidateVGSay0A28ReferenceResolutionDataModel11RRCandidateVG0aB4Flow0L0VAA06RemoteS6ClientCSgSStYaKFSd0A8NLUTypes0a14_f1_g3_K5I56Vcfu_33_8b0e7d0ff9134e4aee37f7deef662011A10_SdTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v12;
    v4 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      Siri_Nlu_External_UserParse.comparableProbability.getter();
      v8 = v7;
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10 + 32) = v8;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AmbiguityServiceResponse.correctionsOutput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1, a1, &demangling cache variable for type metadata for Input?);
}

uint64_t AmbiguityServiceResponse.ambiguityOutput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AmbiguityServiceResponse(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for AmbiguityOutput?);
}

uint64_t AmbiguityServiceResponse.topParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AmbiguityServiceResponse(0) + 24);
  v4 = type metadata accessor for Parse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AmbiguityServiceResponse.init(correctionsOutput:ambiguityOutput:topParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a1, a4, &demangling cache variable for type metadata for Input?);
  v7 = type metadata accessor for AmbiguityServiceResponse(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, a4 + *(int *)(v7 + 20), &demangling cache variable for type metadata for AmbiguityOutput?);
  v8 = a4 + *(int *)(v7 + 24);
  v9 = type metadata accessor for Parse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a3, v9);
}

void *AmbiguityService.kPommesQueryConfidenceThreshold.unsafeMutableAddressor()
{
  return &static AmbiguityService.kPommesQueryConfidenceThreshold;
}

double static AmbiguityService.kPommesQueryConfidenceThreshold.getter()
{
  return 0.7;
}

uint64_t AmbiguityService.__allocating_init(correctionsService:camBridge:)(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = swift_allocObject();
  type metadata accessor for ServerFallbackDisablingUtils();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v5[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v5[4] = 0;
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(a2, v4 + 24);
  return v4;
}

uint64_t AmbiguityService.init(correctionsService:camBridge:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  _QWORD *v5;

  type metadata accessor for ServerFallbackDisablingUtils();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v5[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v5[4] = 0;
  *(_QWORD *)(v2 + 64) = v5;
  *(_QWORD *)(v2 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(a2, v2 + 24);
  return v2;
}

Swift::Void __swiftcall AmbiguityService.newSessionStarted()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[6];
  v2 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  swift_release();
}

uint64_t AmbiguityService.newTurnStarted(executionUUID:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[6];
  v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 64))(a1, v3, v4);
  v5 = (_QWORD *)v1[2];
  v6 = v5[5];
  v7 = v5[6];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v6, v7);
}

uint64_t AmbiguityService.getDefaultResponse(input:conversationUserInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a3;
  v5 = type metadata accessor for Parse();
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  MEMORY[0x1E0C80A78](v5);
  v26 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v26 - v14;
  v16 = type metadata accessor for Input();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  CorrectionsService.getCorrectionsAction(input:conversationUserInput:)(a1, a2, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for Input?);
    v20 = type metadata accessor for AmbiguityServiceResponse(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v29, 1, 1, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v19, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    v22 = type metadata accessor for AmbiguityOutput(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v9, 1, 1, v22);
    v23 = v26;
    Input.parse.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v24 = v29;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v13, v29, &demangling cache variable for type metadata for Input?);
    v25 = type metadata accessor for AmbiguityServiceResponse(0);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v24 + *(int *)(v25 + 20), &demangling cache variable for type metadata for AmbiguityOutput?);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v24 + *(int *)(v25 + 24), v23, v28);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
  }
}

int64_t specialized Sequence<>.max()(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v2 <= v14)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t AmbiguityService.deinit()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  return v0;
}

uint64_t AmbiguityService.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AmbiguityServiceProviding.newSessionStarted() in conformance AmbiguityService()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 24), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  return swift_release();
}

uint64_t *initializeBufferWithCopyOfBuffer for AmbiguityServiceResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Input();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = type metadata accessor for AmbiguityOutput(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(v12, v13, v7);
      }
      else
      {
        *v12 = *v13;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = *(int *)(a3 + 24);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for Parse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

char *initializeWithCopy for AmbiguityServiceResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for Input();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for AmbiguityOutput(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Parse();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

char *assignWithCopy for AmbiguityServiceResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;

  v6 = type metadata accessor for Input();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v27 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3;
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for AmbiguityOutput(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v14, v15, v6);
      }
      else
      {
        *(_QWORD *)v14 = *(_QWORD *)v15;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_21;
    }
LABEL_13:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_21;
  }
  if (v20)
  {
    outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for AmbiguityOutput);
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for AmbiguityOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v14, v15, v6);
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_21:
  v22 = *(int *)(v12 + 24);
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for Parse();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

char *initializeWithTake for AmbiguityServiceResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for Input();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for AmbiguityOutput(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(v13 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Parse();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

char *assignWithTake for AmbiguityServiceResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;

  v6 = type metadata accessor for Input();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v27 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3;
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for AmbiguityOutput(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      if (a1 == a2)
        goto LABEL_21;
      outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for AmbiguityOutput);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v14, v15, v6);
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
      v21 = *(_QWORD *)(v17 + 64);
      goto LABEL_14;
    }
    outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for AmbiguityOutput);
LABEL_13:
    v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?)
                                - 8)
                    + 64);
LABEL_14:
    memcpy(v14, v15, v21);
    goto LABEL_21;
  }
  if (v20)
    goto LABEL_13;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v14, v15, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(v17 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_21:
  v22 = *(int *)(v12 + 24);
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for Parse();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t sub_1B4CD0F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for Parse();
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1B4CD101C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for Parse();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AmbiguityServiceResponse()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for Input?, (void (*)(uint64_t))MEMORY[0x1E0D9C588]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, &lazy cache variable for type metadata for AmbiguityOutput?, (void (*)(uint64_t))type metadata accessor for AmbiguityOutput);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Parse();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Input?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_QWORD *assignWithCopy for AmbiguityOutput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for AmbiguityOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Input();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for AmbiguityOutput(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AmbiguityOutput(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for AmbiguityOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AmbiguityOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AmbiguityOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AmbiguityOutput()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AmbiguityOutput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AmbiguityService()
{
  return objc_opt_self();
}

uint64_t method lookup function for AmbiguityService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AmbiguityService.__allocating_init(correctionsService:camBridge:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AmbiguityServiceProviding.newSessionStarted()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AmbiguityServiceProviding.newTurnStarted(executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of AmbiguityServiceProviding.createRankedInput(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AmbiguityServiceProviding.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a12 + 32) + *(_QWORD *)(a12 + 32));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v12 + 16) = v18;
  *v18 = v12;
  v18[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t AnnounceContext.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceContext.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceContext.__allocating_init(activeTasks:executedTasks:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t AnnounceContext.init(activeTasks:executedTasks:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t AnnounceContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for AnnounceContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnnounceContext.__allocating_init(activeTasks:executedTasks:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return v2 & 1;
  if (*(_BYTE *)(a2 + 32) == (result & 1))
    return 1;
  if (v2 == 1)
    return 0;
  v3 = 33;
  while (1)
  {
    v4 = v3 - 31;
    if (__OFADD__(v3 - 32, 1))
      break;
    v5 = *(_BYTE *)(a2 + v3) ^ result;
    if ((v5 & 1) != 0)
    {
      ++v3;
      if (v4 != v2)
        continue;
    }
    LOBYTE(v2) = v5 ^ 1;
    return v2 & 1;
  }
  __break(1u);
  return result;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X12 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X12 }
}

{
  __asm { BR              X11 }
}

uint64_t sub_1B4CD16B0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B4CD1724 + 4 * byte_1B4EE4985[a2]))(0x6E776F6E6BLL);
}

uint64_t sub_1B4CD1724(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E776F6E6BLL && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, ExecutionOverrideDecision.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, AppResolutionType.rawValue.getter);
}

uint64_t sub_1B4CD1840(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_1B4CD18FC + 4 * byte_1B4EE4993[a2]))(v2 - 1);
}

uint64_t sub_1B4CD18FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == v1 - 1 && v2 == 0x80000001B4EF4F10)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1B4CD1A4C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B4CD1ACC + 4 * byte_1B4EE49A0[a2]))(0x75716552746F6F72);
}

uint64_t sub_1B4CD1ACC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x75716552746F6F72 && v1 == 0xED00006449747365)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = a3();
  v6 = v5;
  if (v4 == a3() && v6 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1B4CD1C80(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B4CD1D40 + 4 * byte_1B4EE49AB[a2]))(0x646E616D6D6F63);
}

uint64_t sub_1B4CD1D40(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x646E616D6D6F63 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x726564697374756FLL;
  else
    v3 = 0x72656E776FLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x726564697374756FLL;
  else
    v5 = 0x72656E776FLL;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B4CD1F28(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B4CD1FB0 + 4 * byte_1B4EE49B8[a2]))(0xD000000000000014);
}

uint64_t sub_1B4CD1FB0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000014 && v1 == 0x80000001B4EF4970)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000018;
  v3 = 0x80000001B4EF48E0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000016;
    else
      v5 = 0xD000000000000019;
    if (v4 == 1)
      v6 = 0x80000001B4EF4900;
    else
      v6 = 0x80000001B4EF4920;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000018;
  v6 = 0x80000001B4EF48E0;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000016;
    else
      v2 = 0xD000000000000019;
    if (v7 == 1)
      v3 = 0x80000001B4EF4900;
    else
      v3 = 0x80000001B4EF4920;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void AnnounceExecutionOverride.overrideType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

double one-time initialization function for announceTypes()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnounceTypeOverride.Type>);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1B4EE3BA0;
  *(_QWORD *)(v0 + 32) = &type metadata for AnnounceTypeOverrideMessages;
  *(_QWORD *)(v0 + 40) = &protocol witness table for AnnounceTypeOverrideMessages;
  *(_QWORD *)(v0 + 48) = &type metadata for AnnounceTypeOverridePhoneCall;
  *(_QWORD *)(v0 + 56) = &protocol witness table for AnnounceTypeOverridePhoneCall;
  static AnnounceExecutionOverride.announceTypes = v0;
  return result;
}

uint64_t *AnnounceExecutionOverride.announceTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for announceTypes != -1)
    swift_once();
  return &static AnnounceExecutionOverride.announceTypes;
}

uint64_t static AnnounceExecutionOverride.announceTypes.getter()
{
  if (one-time initialization token for announceTypes != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void AnnounceExecutionOverride.ruleType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

uint64_t AnnounceExecutionOverride.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceExecutionOverride.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceExecutionOverride.topNlParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Siri_Nlu_External_UserParse?(v1 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, a1);
}

uint64_t outlined init with copy of Siri_Nlu_External_UserParse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AnnounceExecutionOverride.isTriggerlessFollowup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup);
}

uint64_t AnnounceExecutionOverride.isMitigated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated);
}

uint64_t AnnounceExecutionOverride.isMedocSupported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported);
}

uint64_t AnnounceExecutionOverride.__allocating_init(activeTasks:executedTasks:topNlParse:isTriggerlessFollowup:isMitigated:isMedocSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 1028;
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(v12 + 32) = a2;
  outlined init with take of Siri_Nlu_External_UserParse?(a3, v12 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse);
  *(_BYTE *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup) = a4;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated) = a5;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported) = a6;
  return v12;
}

uint64_t AnnounceExecutionOverride.init(activeTasks:executedTasks:topNlParse:isTriggerlessFollowup:isMitigated:isMedocSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  uint64_t v6;

  *(_WORD *)(v6 + 16) = 1028;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  outlined init with take of Siri_Nlu_External_UserParse?(a3, v6 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse);
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup) = a4;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated) = a5;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported) = a6;
  return v6;
}

uint64_t outlined init with take of Siri_Nlu_External_UserParse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void AnnounceExecutionOverride.triggerlessFollowupRulesWithoutFlexibleAnnounce()(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 176))(&v11);
  v3 = v11;
  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "With trigger less followup evaluation result from Announce rule is %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  *a1 = v3;
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall AnnounceExecutionOverride.executionOverrideDecisionForTriggerlessFollowup()()
{
  char *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  SiriKitRuntime::ExecutionOverrideDecision result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *, uint64_t *, uint64_t);
  uint64_t *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 (*v48)(uint64_t *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 (*v52)(uint64_t *, uint64_t);
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  _BYTE *v57;
  uint8_t *v58;
  uint8_t *v59;
  char v60;
  _BYTE *v61;
  char v62;
  void (*v63)(_BYTE *, uint64_t);
  char v64;
  ValueMetadata *v65;
  _UNKNOWN **v66;
  char v67;
  _BYTE *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  int v81;
  uint64_t v82;
  _UNKNOWN **v83;
  ValueMetadata *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  char v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  _BYTE v99[12];
  int v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[3];
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[3];
  ValueMetadata *v112;
  _UNKNOWN **v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116[3];
  uint64_t v117;
  unint64_t v118;

  v105 = v0;
  v2 = *v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v99[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v99[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v104 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v9 = *(_QWORD *)(v104 - 8);
  v10 = MEMORY[0x1E0C80A78](v104);
  v12 = &v99[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v103 = &v99[-v13];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  MEMORY[0x1E0C80A78](v14);
  v16 = &v99[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for Siri_Nlu_External_Task();
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (uint64_t *)&v99[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = &v99[-v22];
  v24 = *(void (**)(uint64_t))(v2 + 184);
  v26 = v25;
  v24(v21);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for Siri_Nlu_External_Task?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1B4BE6000, v28, v29, "Unable to retrieve task from activeTasks or executedTasks in SessionState for triggerless followup. Rejecting.", v30, 2u);
      MEMORY[0x1B5E44758](v30, -1, -1);
    }

LABEL_17:
    *v105 = 1;
    return result;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(v23, v16, v17);
  v102 = v23;
  static AnnounceExecutionOverride.announceTypeForTask(_:)((uint64_t)&v114);
  if (!v115)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v114, &demangling cache variable for type metadata for AnnounceTypeOverride?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
    v37 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v26 + 16);
    v38 = v102;
    v37(v20, (uint64_t *)v102, v17);
    v39 = v26;
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      *(_QWORD *)&v114 = v43;
      *(_DWORD *)v42 = 136315138;
      v104 = (uint64_t)(v42 + 4);
      type metadata accessor for SiriNLUTypesPrintUtils();
      v117 = v17;
      v118 = lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v116);
      v37(boxed_opaque_existential_1, v20, v17);
      v45 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
      v47 = v46;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
      v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v48 = *(unsigned __int8 (**)(uint64_t *, uint64_t))(v39 + 8);
      v48(v20, v17);
      _os_log_impl(&dword_1B4BE6000, v40, v41, "Unable to identify announce type of task: %s.", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v43, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);

      result = v48((uint64_t *)v102, v17);
    }
    else
    {

      v52 = *(unsigned __int8 (**)(uint64_t *, uint64_t))(v39 + 8);
      v52(v20, v17);
      result = v52((uint64_t *)v38, v17);
    }
    goto LABEL_17;
  }
  v32 = v26;
  outlined init with take of ReferenceResolutionClientProtocol(&v114, (uint64_t)v116);
  outlined init with copy of Siri_Nlu_External_UserParse?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, (uint64_t)v5);
  v33 = type metadata accessor for Siri_Nlu_External_UserParse();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v5, 1, v33) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1, 1, v104);
    v35 = v32;
LABEL_20:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    v56 = os_log_type_enabled(v54, v55);
    v57 = v102;
    if (v56)
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_1B4BE6000, v54, v55, "Unable to retrieve UserDialogAct from parse.", v58, 2u);
      v59 = v58;
      v35 = v32;
      MEMORY[0x1B5E44758](v59, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v57, v17);
    v60 = 1;
    goto LABEL_37;
  }
  v49 = MEMORY[0x1B5E3FA6C]();
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v5, v33);
  if (*(_QWORD *)(v49 + 16))
  {
    v50 = v104;
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v9 + 16))(v8, v49 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v104);
    v51 = 0;
    v35 = v32;
  }
  else
  {
    v51 = 1;
    v35 = v32;
    v50 = v104;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, v51, 1, v50);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v50) == 1)
    goto LABEL_20;
  v61 = v103;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v103, v8, v50);
  v62 = Siri_Nlu_External_UserDialogAct.hasWantedToRepeat.getter();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v61, v50);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v116, (uint64_t)&v114);
  if ((v62 & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
    v63 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
    v63(v12, v50);
LABEL_31:
    v68 = v102;
    if (one-time initialization token for executor != -1)
      swift_once();
    v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)static Logger.executor);
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v72 = 0;
      _os_log_impl(&dword_1B4BE6000, v70, v71, "Accepting WantedToRepeat / UserCancelled dialog act.", v72, 2u);
      MEMORY[0x1B5E44758](v72, -1, -1);
    }

    v63(v103, v50);
    (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v68, v17);
    goto LABEL_36;
  }
  v64 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v114, (uint64_t)v111);
  if ((v64 & 1) != 0)
  {
    v65 = v112;
    v66 = v113;
    __swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
    v67 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v66[2])(v65, v66);
  }
  else
  {
    v67 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  v63 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v63(v12, v50);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
  if ((v67 & 1) != 0)
    goto LABEL_31;
  v73 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
  v74 = v102;
  if (!v73)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v78 = type metadata accessor for Logger();
    __swift_project_value_buffer(v78, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v116, (uint64_t)v111);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v116, (uint64_t)v108);
    v79 = Logger.logObject.getter();
    v80 = static os_log_type_t.debug.getter();
    v81 = v80;
    if (os_log_type_enabled(v79, v80))
    {
      v82 = swift_slowAlloc();
      v101 = swift_slowAlloc();
      v107 = v101;
      *(_DWORD *)v82 = 136315394;
      v100 = v81;
      v84 = v112;
      v83 = v113;
      __swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
      v85 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v83[1])(v84, v83);
      v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      *(_WORD *)(v82 + 12) = 2080;
      v87 = v109;
      v88 = v110;
      __swift_project_boxed_opaque_existential_1(v108, v109);
      v89 = *(uint64_t (**)(uint64_t, uint64_t))(v88 + 24);
      v90 = v88;
      v50 = v104;
      v91 = v89(v87, v90);
      v92 = (v91 & 1) == 0;
      if ((v91 & 1) != 0)
        v93 = 0;
      else
        v93 = 5525326;
      if (v92)
        v94 = 0xE300000000000000;
      else
        v94 = 0xE000000000000000;
      v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
      _os_log_impl(&dword_1B4BE6000, v79, (os_log_type_t)v100, "UserDialog was not of type UsoTask. AnnounceType %s DOES %s allow non-UsoTask parses.", (uint8_t *)v82, 0x16u);
      v95 = v101;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v95, -1, -1);
      MEMORY[0x1B5E44758](v82, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
    }

    v96 = v117;
    v97 = v118;
    __swift_project_boxed_opaque_existential_1(v116, v117);
    LOBYTE(v96) = (*(uint64_t (**)(uint64_t, unint64_t))(v97 + 24))(v96, v97);
    v63(v103, v50);
    (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v74, v17);
    if ((v96 & 1) != 0)
      v60 = 11;
    else
      v60 = 1;
    goto LABEL_37;
  }
  v75 = v117;
  v76 = v118;
  __swift_project_boxed_opaque_existential_1(v116, v117);
  if (((*(uint64_t (**)(uint64_t, unint64_t))(v76 + 32))(v75, v76) & 1) == 0)
    goto LABEL_61;
  v112 = &type metadata for AnnounceTypeGlobalOverride;
  v113 = &protocol witness table for AnnounceTypeGlobalOverride;
  v111[0] = swift_allocObject();
  AnnounceTypeGlobalOverride.init()((SiriKitRuntime::AnnounceTypeGlobalOverride *)(v111[0] + 16));
  static AnnounceExecutionOverride.executionOverrideDecisionForAnnounceType(announceType:followupUsoTask:)(v111, (char *)v108);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
  if (ExecutionOverrideDecision.rawValue.getter() != 0x747065636361 || v77 != 0xE600000000000000)
  {
    v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v35 = v32;
    if ((v98 & 1) != 0)
    {
      swift_release();
      goto LABEL_60;
    }
LABEL_61:
    static AnnounceExecutionOverride.executionOverrideDecisionForAnnounceType(announceType:followupUsoTask:)(v116, v105);
    swift_release();
    v63(v103, v50);
    (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v74, v17);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  }
  swift_release();
  swift_bridgeObjectRelease();
  v35 = v32;
LABEL_60:
  v63(v103, v50);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v74, v17);
LABEL_36:
  v60 = 11;
LABEL_37:
  *v105 = v60;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
}

double static AnnounceExecutionOverride.announceTypeForTask(_:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  double result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[2];

  v2 = type metadata accessor for Siri_Nlu_External_Task();
  v3 = MEMORY[0x1E0C80A78](v2);
  v49 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_Task.task.getter();
  v9 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10 = MEMORY[0x1B5E400FC](v9);
  v11 = (char *)v9;
  if (!(v10 >> 62))
  {
    v12 = a1;
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_38:
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
    swift_retain_n();
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      v44 = swift_slowAlloc();
      *(_QWORD *)&v52[0] = v44;
      *(_DWORD *)v43 = 136315138;
      v45 = dispatch thunk of Graph.description.getter();
      *(_QWORD *)&v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v41, v42, "Unable to convert UsoGraphSiriNL to UsoTask for graph %s.", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v44, -1, -1);
      MEMORY[0x1B5E44758](v43, -1, -1);
      swift_release();

      goto LABEL_44;
    }

LABEL_43:
    swift_release_n();
    goto LABEL_44;
  }
  v12 = a1;
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_38;
LABEL_3:
  if ((v10 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v10);
LABEL_6:
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor == -1)
      goto LABEL_7;
    goto LABEL_47;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
LABEL_47:
  swift_once();
LABEL_7:
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  swift_retain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v49 = v11;
    v18 = v17;
    *(_QWORD *)&v52[0] = v17;
    *(_DWORD *)v16 = 136315394;
    v19 = UsoTask.baseEntityAsString.getter();
    *(_QWORD *)&v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    v21 = UsoTask.verbString.getter();
    *(_QWORD *)&v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Found UsoTask %s::%s.", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    MEMORY[0x1B5E44758](v16, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (v51)
  {
    outlined init with take of Any(&v50, v52);
    outlined init with copy of Any((uint64_t)v52, (uint64_t)&v50);
    type metadata accessor for UsoTask_read_common_Message();
    if (swift_dynamicCast())
    {
      swift_release();
      *(_QWORD *)(v12 + 24) = &type metadata for AnnounceTypeOverrideMessages;
      *(_QWORD *)(v12 + 32) = &protocol witness table for AnnounceTypeOverrideMessages;
      v23 = swift_allocObject();
      *(_QWORD *)v12 = v23;
      AnnounceTypeOverrideMessages.init()((SiriKitRuntime::AnnounceTypeOverrideMessages *)(v23 + 16));
    }
    else
    {
      type metadata accessor for UsoTask_summarise_common_PhoneCall();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_read_common_Notification();
        if (swift_dynamicCast())
        {
          swift_release();
          *(_QWORD *)(v12 + 24) = &type metadata for AnnounceTypeOverrideGenericNotification;
          *(_QWORD *)(v12 + 32) = &protocol witness table for AnnounceTypeOverrideGenericNotification;
          v33 = swift_allocObject();
          *(_QWORD *)v12 = v33;
          v34 = MEMORY[0x1E0DEE9D8];
          v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
          swift_release();
          swift_release();
          *(_QWORD *)(v33 + 16) = 0xD00000000000001BLL;
          *(_QWORD *)(v33 + 24) = 0x80000001B4EF7030;
          *(_DWORD *)(v33 + 32) = 16843009;
        }
        else
        {
          type metadata accessor for UsoTask_summarise_common_NotebookList();
          if (swift_dynamicCast()
            || (type metadata accessor for UsoTask_snooze_common_Reminder(), swift_dynamicCast())
            || (type metadata accessor for UsoTask_update_common_Reminder(), swift_dynamicCast()))
          {
            swift_release();
            *(_QWORD *)(v12 + 24) = &type metadata for AnnounceTypeOverrideReminder;
            *(_QWORD *)(v12 + 32) = &protocol witness table for AnnounceTypeOverrideReminder;
            v36 = swift_allocObject();
            *(_QWORD *)v12 = v36;
            AnnounceTypeOverrideReminder.init()((SiriKitRuntime::AnnounceTypeOverrideReminder *)(v36 + 16));
            goto LABEL_25;
          }
          type metadata accessor for UsoTask_summarise_common_Voicemail();
          if (swift_dynamicCast())
          {
            swift_release();
            *(_QWORD *)(v12 + 24) = &type metadata for AnnounceTypeOverrideVoicemail;
            *(_QWORD *)(v12 + 32) = &protocol witness table for AnnounceTypeOverrideVoicemail;
            v38 = swift_allocObject();
            *(_QWORD *)v12 = v38;
            AnnounceTypeOverrideVoicemail.init()((SiriKitRuntime::AnnounceTypeOverrideVoicemail *)(v38 + 16));
            goto LABEL_25;
          }
          type metadata accessor for UsoTask_noVerb_common_UserEntity();
          if (!swift_dynamicCast())
          {
            type metadata accessor for UsoTask_send_common_Announcement();
            if (swift_dynamicCast()
              || (type metadata accessor for UsoTask_reply_common_Announcement(), swift_dynamicCast())
              || (type metadata accessor for UsoTask_play_common_Announcement(), swift_dynamicCast())
              || (type metadata accessor for UsoTask_stop_common_Announcement(), swift_dynamicCast()))
            {
              swift_release();
              *(_QWORD *)(v12 + 24) = &type metadata for AnnounceTypeOverrideMitigationForIntercomRequest;
              *(_QWORD *)(v12 + 32) = &protocol witness table for AnnounceTypeOverrideMitigationForIntercomRequest;
              v39 = swift_allocObject();
              *(_QWORD *)v12 = v39;
              AnnounceTypeOverrideMitigationForIntercomRequest.init()((SiriKitRuntime::AnnounceTypeOverrideMitigationForIntercomRequest *)(v39 + 16));
            }
            else
            {
              type metadata accessor for UsoTask_noVerb_common_Workout();
              if (!swift_dynamicCast())
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
                swift_release();
                swift_release();
                *(_QWORD *)(v12 + 32) = 0;
                *(_OWORD *)v12 = 0u;
                *(_OWORD *)(v12 + 16) = 0u;
                goto LABEL_27;
              }
              swift_release();
              *(_QWORD *)(v12 + 24) = &type metadata for AnnounceTypeOverrideWorkoutReminder;
              *(_QWORD *)(v12 + 32) = &protocol witness table for AnnounceTypeOverrideWorkoutReminder;
              v47 = swift_allocObject();
              *(_QWORD *)v12 = v47;
              AnnounceTypeOverrideWorkoutReminder.init()((SiriKitRuntime::AnnounceTypeOverrideWorkoutReminder *)(v47 + 16));
            }
            goto LABEL_25;
          }
          swift_release();
          *(_QWORD *)(v12 + 24) = &type metadata for AnnounceTypeOverrideIntercom;
          *(_QWORD *)(v12 + 32) = &protocol witness table for AnnounceTypeOverrideIntercom;
          v33 = swift_allocObject();
          *(_QWORD *)v12 = v33;
          v34 = MEMORY[0x1E0DEE9D8];
          v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
          swift_release();
          swift_release();
          *(_QWORD *)(v33 + 16) = 0xD000000000000010;
          *(_QWORD *)(v33 + 24) = 0x80000001B4EF7010;
          *(_DWORD *)(v33 + 32) = 16777217;
        }
        *(_QWORD *)(v33 + 40) = v34;
        *(_QWORD *)(v33 + 48) = v35;
LABEL_26:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
LABEL_27:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
        return result;
      }
      swift_release();
      *(_QWORD *)(v12 + 24) = &type metadata for AnnounceTypeOverridePhoneCall;
      *(_QWORD *)(v12 + 32) = &protocol witness table for AnnounceTypeOverridePhoneCall;
      v32 = swift_allocObject();
      *(_QWORD *)v12 = v32;
      AnnounceTypeOverridePhoneCall.init()((SiriKitRuntime::AnnounceTypeOverridePhoneCall *)(v32 + 16));
    }
LABEL_25:
    swift_release();
    swift_release();
    goto LABEL_26;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_retain_n();
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v24, v25))
  {

    swift_release();
    goto LABEL_43;
  }
  v26 = swift_slowAlloc();
  v27 = swift_slowAlloc();
  *(_QWORD *)&v52[0] = v27;
  *(_DWORD *)v26 = 136315394;
  v28 = UsoTask.baseEntityAsString.getter();
  *(_QWORD *)&v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)v52);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v26 + 12) = 2080;
  v30 = UsoTask.verbString.getter();
  *(_QWORD *)&v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v52);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B4BE6000, v24, v25, "Unable to run codegen converter on UsoTask %s::%s.", (uint8_t *)v26, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v27, -1, -1);
  MEMORY[0x1B5E44758](v26, -1, -1);
  swift_release();
  swift_release();

LABEL_44:
  *(_QWORD *)(v12 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  return result;
}

void __swiftcall AnnounceTypeGlobalOverride.init()(SiriKitRuntime::AnnounceTypeGlobalOverride *__return_ptr retstr)
{
  uint64_t inited;
  void *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0x415F6E6F6D6D6F63;
  *(_QWORD *)(inited + 40) = 0xEA00000000007070;
  *(_QWORD *)(inited + 48) = &outlined read-only object #1 of AnnounceTypeGlobalOverride.init();
  strcpy((char *)(inited + 56), "uso_NoEntity");
  *(_BYTE *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  *(_QWORD *)(inited + 72) = &outlined read-only object #2 of AnnounceTypeGlobalOverride.init();
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x80000001B4EF3790;
  *(_QWORD *)(inited + 96) = &outlined read-only object #3 of AnnounceTypeGlobalOverride.init();
  strcpy((char *)(inited + 104), "common_Message");
  *(_BYTE *)(inited + 119) = -18;
  *(_QWORD *)(inited + 120) = &outlined read-only object #4 of AnnounceTypeGlobalOverride.init();
  strcpy((char *)(inited + 128), "common_Setting");
  *(_BYTE *)(inited + 143) = -18;
  *(_OWORD *)(inited + 16) = xmmword_1B4EE4F30;
  *(_QWORD *)(inited + 144) = &outlined read-only object #5 of AnnounceTypeGlobalOverride.init();
  *(_QWORD *)(inited + 152) = 0xD000000000000013;
  *(_QWORD *)(inited + 160) = 0x80000001B4EF3800;
  *(_QWORD *)(inited + 168) = &outlined read-only object #6 of AnnounceTypeGlobalOverride.init();
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._countAndFlagsBits = 0x6C61626F6C47;
  retstr->name._object = (void *)0xE600000000000000;
  *(_DWORD *)&retstr->rejectDecision = 16777217;
  retstr->validVerbsForAllEntities._rawValue = &outlined read-only object #0 of AnnounceTypeGlobalOverride.init();
  retstr->validEntityToVerbMap._rawValue = v3;
}

_QWORD *static AnnounceExecutionOverride.executionOverrideDecisionForAnnounceType(announceType:followupUsoTask:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t type;
  uint64_t v48;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;

  if (one-time initialization token for executor != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v57);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v54);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v51);
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v48 = swift_slowAlloc();
    v50 = v48;
    *(_DWORD *)v6 = 136316162;
    v7 = UsoTask.baseEntityAsString.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v9 = UsoTask.verbString.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 2080;
    type = v5;
    v11 = v58;
    v12 = v59;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    *(_WORD *)(v6 + 32) = 2080;
    v15 = v55;
    v16 = v56;
    __swift_project_boxed_opaque_existential_1(v54, v55);
    (*(void (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
    v17 = MEMORY[0x1B5E434D4]();
    v19 = v18;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
    *(_WORD *)(v6 + 42) = 2080;
    v20 = v52;
    v21 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    (*(void (**)(uint64_t, uint64_t))(v21 + 56))(v20, v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v22 = Dictionary.description.getter();
    v24 = v23;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    _os_log_impl(&dword_1B4BE6000, v4, type, "Validating task: %s::%s\nwith AnnounceType: %s\nwith allowed verb set: %s\nand allowed entityToVerb map: %s", (uint8_t *)v6, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v48, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  }

  v25 = a1[3];
  v26 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  v27 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 48))(v25, v26);
  v28 = UsoTask.verbString.getter();
  LOBYTE(v26) = specialized Sequence<>.contains(_:)(v28, v29, v27);
  swift_bridgeObjectRelease();
  result = (_QWORD *)swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
    goto LABEL_7;
  v32 = a1[3];
  v33 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v32);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 56))(v32, v33);
  v35 = UsoTask.baseEntityAsString.getter();
  if (*(_QWORD *)(v34 + 16))
  {
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    if ((v38 & 1) != 0)
    {
      v39 = *(_QWORD **)(*(_QWORD *)(v34 + 56) + 8 * v37);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40 = UsoTask.verbString.getter();
      v42 = specialized Sequence<>.contains(_:)(v40, v41, v39);
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
      {
        v43 = a1[3];
        v44 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v43);
        result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v44 + 40))(v57, v43, v44);
        v31 = v57[0];
        goto LABEL_8;
      }
LABEL_7:
      v31 = 11;
LABEL_8:
      *a2 = v31;
      return result;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = a1[3];
  v46 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v45);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v46 + 40))(v45, v46);
}

uint64_t AnnounceExecutionOverride.getAnnounceTask()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;

  v3 = type metadata accessor for Siri_Nlu_External_Task();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v41 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v41 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v41 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v41 - v17;
  v19 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v19 + 16))
  {
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    v20((char *)&v41 - v17, v19 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
    if (one-time initialization token for executor != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    v20(v16, (unint64_t)v18, v3);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v43 = (uint8_t *)swift_slowAlloc();
      v44 = a1;
      v46 = v43;
      *(_DWORD *)v24 = 136315138;
      v42 = v24 + 4;
      v20(v13, (unint64_t)v16, v3);
      v25 = String.init<A>(describing:)();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Found announceTask in SessionState's activeTasks: %s", v24, 0xCu);
      v27 = v43;
      swift_arrayDestroy();
      a1 = v44;
      MEMORY[0x1B5E44758](v27, -1, -1);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v18, v3);
  }
  else
  {
    v28 = *(_QWORD *)(v1 + 32);
    if (!*(_QWORD *)(v28 + 16))
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    v29(v10, v28 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
    if (one-time initialization token for executor != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
    v29(v7, (unint64_t)v10, v3);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v44 = a1;
      v35 = v34;
      v46 = (uint8_t *)v34;
      v43 = v33;
      *(_DWORD *)v33 = 136315138;
      v42 = v33 + 4;
      v29(v13, (unint64_t)v7, v3);
      v36 = String.init<A>(describing:)();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v38 = v43;
      _os_log_impl(&dword_1B4BE6000, v31, v32, "Found announceTask in SessionState's executedTasks: %s", v43, 0xCu);
      swift_arrayDestroy();
      v39 = v35;
      a1 = v44;
      MEMORY[0x1B5E44758](v39, -1, -1);
      MEMORY[0x1B5E44758](v38, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v10, v3);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
}

uint64_t AnnounceExecutionOverride.parseContainsAnnounceIntercomTask()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE v16[40];

  v1 = *v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for Siri_Nlu_External_Task();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t))(v1 + 184))(v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_Task?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "Parse does not contain an announce intercom task.", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v9, v4, v5);
    static AnnounceExecutionOverride.announceTypeForTask(_:)((uint64_t)v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for AnnounceTypeOverride?);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  return 0;
}

void __swiftcall AnnounceTypeOverrideMessages.init()(SiriKitRuntime::AnnounceTypeOverrideMessages *__return_ptr retstr)
{
  uint64_t inited;
  void *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE4F40;
  strcpy((char *)(inited + 32), "common_Email");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(_QWORD *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideMessages.init();
  *(_QWORD *)(inited + 56) = 0xD000000000000014;
  *(_QWORD *)(inited + 64) = 0x80000001B4EF37B0;
  *(_QWORD *)(inited + 72) = &outlined read-only object #1 of AnnounceTypeOverrideMessages.init();
  strcpy((char *)(inited + 80), "common_Message");
  *(_BYTE *)(inited + 95) = -18;
  *(_QWORD *)(inited + 96) = &outlined read-only object #2 of AnnounceTypeOverrideMessages.init();
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._countAndFlagsBits = 0xD000000000000010;
  retstr->name._object = (void *)0x80000001B4EF7050;
  *(_DWORD *)&retstr->rejectDecision = 16842753;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverridePhoneCall.init()(SiriKitRuntime::AnnounceTypeOverridePhoneCall *__return_ptr retstr)
{
  uint64_t inited;
  void *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x80000001B4EF3790;
  *(_QWORD *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverridePhoneCall.init();
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  strcpy((char *)retstr, "AnnounceCalls");
  HIWORD(retstr->name._object) = -4864;
  *(_DWORD *)&retstr->rejectDecision = 65794;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideGenericNotification.init()(SiriKitRuntime::AnnounceTypeOverrideGenericNotification *__return_ptr retstr)
{
  void *v2;
  void *v3;

  v2 = (void *)MEMORY[0x1E0DEE9D8];
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  retstr->name._countAndFlagsBits = 0xD00000000000001BLL;
  retstr->name._object = (void *)0x80000001B4EF7030;
  *(_DWORD *)&retstr->rejectDecision = 16843009;
  retstr->validVerbsForAllEntities._rawValue = v2;
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideReminder.init()(SiriKitRuntime::AnnounceTypeOverrideReminder *__return_ptr retstr)
{
  uint64_t inited;
  void *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3BA0;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x80000001B4EF37D0;
  *(_QWORD *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideReminder.init();
  *(_QWORD *)(inited + 56) = 0x525F6E6F6D6D6F63;
  *(_QWORD *)(inited + 64) = 0xEF7265646E696D65;
  *(_QWORD *)(inited + 72) = &outlined read-only object #1 of AnnounceTypeOverrideReminder.init();
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._countAndFlagsBits = 0xD000000000000010;
  retstr->name._object = (void *)0x80000001B4EF7070;
  *(_DWORD *)&retstr->rejectDecision = 16777217;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideVoicemail.init()(SiriKitRuntime::AnnounceTypeOverrideVoicemail *__return_ptr retstr)
{
  uint64_t inited;
  void *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3BA0;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x80000001B4EF3820;
  *(_QWORD *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideVoicemail.init();
  *(_QWORD *)(inited + 56) = 0xD000000000000010;
  *(_QWORD *)(inited + 64) = 0x80000001B4EF3790;
  *(_QWORD *)(inited + 72) = &outlined read-only object #1 of AnnounceTypeOverrideVoicemail.init();
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._countAndFlagsBits = 0xD000000000000011;
  retstr->name._object = (void *)0x80000001B4EF7090;
  *(_DWORD *)&retstr->rejectDecision = 1;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideIntercom.init()(SiriKitRuntime::AnnounceTypeOverrideIntercom *__return_ptr retstr)
{
  void *v2;
  void *v3;

  v2 = (void *)MEMORY[0x1E0DEE9D8];
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  retstr->name._countAndFlagsBits = 0xD000000000000010;
  retstr->name._object = (void *)0x80000001B4EF7010;
  *(_DWORD *)&retstr->rejectDecision = 16777217;
  retstr->validVerbsForAllEntities._rawValue = v2;
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideMitigationForIntercomRequest.init()(SiriKitRuntime::AnnounceTypeOverrideMitigationForIntercomRequest *__return_ptr retstr)
{
  uint64_t inited;
  void *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x80000001B4EF3800;
  *(_QWORD *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideMitigationForIntercomRequest.init();
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._countAndFlagsBits = 0xD00000000000001ALL;
  retstr->name._object = (void *)0x80000001B4EF70B0;
  *(_DWORD *)&retstr->rejectDecision = 16777219;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  retstr->validEntityToVerbMap._rawValue = v3;
}

void __swiftcall AnnounceTypeOverrideWorkoutReminder.init()(SiriKitRuntime::AnnounceTypeOverrideWorkoutReminder *__return_ptr retstr)
{
  uint64_t inited;
  void *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  strcpy((char *)(inited + 32), "common_Workout");
  *(_BYTE *)(inited + 47) = -18;
  *(_QWORD *)(inited + 48) = &outlined read-only object #0 of AnnounceTypeOverrideWorkoutReminder.init();
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  retstr->name._countAndFlagsBits = 0xD000000000000017;
  retstr->name._object = (void *)0x80000001B4EF70D0;
  *(_DWORD *)&retstr->rejectDecision = 65537;
  retstr->validVerbsForAllEntities._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  retstr->validEntityToVerbMap._rawValue = v3;
}

uint64_t AnnounceExecutionOverride.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  return v0;
}

uint64_t AnnounceTypeGlobalOverride.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void AnnounceTypeGlobalOverride.rejectDecision.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t AnnounceTypeGlobalOverride.allowsCancellation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AnnounceTypeGlobalOverride.allowsNonUsoTasks.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t AnnounceTypeGlobalOverride.allowsGlobalIntents.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t AnnounceUsoVerbOverride.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4CD529C + 4 * byte_1B4EE49BE[a1]))(0x656C62616E65, 0xE600000000000000);
}

uint64_t sub_1B4CD529C()
{
  return 0x656C6261736964;
}

uint64_t sub_1B4CD52B4()
{
  return 0x6B6361626C6C6163;
}

uint64_t sub_1B4CD52CC()
{
  return 1819042147;
}

uint64_t sub_1B4CD52DC()
{
  return 0x726577736E61;
}

uint64_t sub_1B4CD52EC()
{
  return 0x7075676E6168;
}

uint64_t sub_1B4CD52FC()
{
  return 1684956531;
}

uint64_t sub_1B4CD530C()
{
  return 0x796C706572;
}

uint64_t sub_1B4CD5320()
{
  return 2036427888;
}

uint64_t sub_1B4CD5330()
{
  return 0x74736575716572;
}

unint64_t sub_1B4CD5348()
{
  return 0xD000000000000013;
}

uint64_t sub_1B4CD5364()
{
  return 0x657A6F6F6E73;
}

uint64_t sub_1B4CD5374()
{
  return 0x736972616D6D7573;
}

uint64_t sub_1B4CD5390()
{
  return 0x657461647075;
}

uint64_t sub_1B4CD53A0()
{
  return 1886352499;
}

uint64_t sub_1B4CD53B0()
{
  return 1684104562;
}

uint64_t sub_1B4CD53C0()
{
  return 0x746165706572;
}

uint64_t sub_1B4CD53D0()
{
  return 1852141679;
}

uint64_t sub_1B4CD53E0()
{
  return 0x657461657263;
}

uint64_t sub_1B4CD53F0()
{
  return 0x6573756170;
}

uint64_t AnnounceTypeGlobalOverride.validVerbsForAllEntities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceUsoEntity.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4CD544C + 4 * byte_1B4EE49D2[a1]))(0x4D5F6E6F6D6D6F63, 0xEE00656761737365);
}

unint64_t sub_1B4CD544C()
{
  return 0xD000000000000010;
}

uint64_t sub_1B4CD5524()
{
  return 0x535F6E6F6D6D6F63;
}

uint64_t sub_1B4CD5548()
{
  return 0x6E456F4E5F6F7375;
}

uint64_t sub_1B4CD5568()
{
  return 0x575F6E6F6D6D6F63;
}

uint64_t AnnounceTypeGlobalOverride.validEntityToVerbMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AnnounceTypeOverride.allowsCancellation.getter in conformance AnnounceTypeGlobalOverride()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t protocol witness for AnnounceTypeOverride.allowsNonUsoTasks.getter in conformance AnnounceTypeGlobalOverride()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t protocol witness for AnnounceTypeOverride.allowsGlobalIntents.getter in conformance AnnounceTypeGlobalOverride()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 19);
}

void protocol witness for AnnounceTypeOverride.rejectDecision.getter in conformance AnnounceTypeGlobalOverride(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t protocol witness for AnnounceTypeOverride.validVerbsForAllEntities.getter in conformance AnnounceTypeGlobalOverride()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AnnounceTypeOverride.validEntityToVerbMap.getter in conformance AnnounceTypeGlobalOverride()
{
  return swift_bridgeObjectRetain();
}

double protocol witness for AnnounceTypeOverride.init() in conformance AnnounceTypeOverrideIntercom@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  double result;

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)a1 = 0xD000000000000010;
  *(_QWORD *)(a1 + 8) = 0x80000001B4EF7010;
  *(_QWORD *)&result = 16777217;
  *(_DWORD *)(a1 + 16) = 16777217;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

unint64_t protocol witness for AnnounceTypeOverride.init() in conformance AnnounceTypeOverrideGenericNotification@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t result;

  v2 = MEMORY[0x1E0DEE9D8];
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)a1 = 0xD00000000000001BLL;
  *(_QWORD *)(a1 + 8) = 0x80000001B4EF7030;
  *(_DWORD *)(a1 + 16) = 16843009;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t))AnnounceUsoEntity.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(a1, a2, (void (*)(uint64_t))AnnounceUsoEntity.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(_QWORD))AnnounceUsoEntity.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(uint64_t))AnnounceUsoEntity.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceUsoEntity@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AnnounceUsoEntity.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceUsoEntity@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AnnounceUsoEntity.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoVerbOverride(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t))AnnounceUsoVerbOverride.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  if (v7 == a5(v6) && v9 == v10)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoVerbOverride(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(a1, a2, (void (*)(uint64_t))AnnounceUsoVerbOverride.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;

  v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceUsoVerbOverride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(_QWORD))AnnounceUsoVerbOverride.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unsigned __int8 *v4;

  a4(*v4);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoVerbOverride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(uint64_t))AnnounceUsoVerbOverride.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;

  v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceUsoVerbOverride@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized AnnounceUsoVerbOverride.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceUsoVerbOverride@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AnnounceUsoVerbOverride.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t objectdestroyTm_1()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t specialized AnnounceUsoEntity.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceUsoEntity.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

uint64_t specialized AnnounceUsoVerbOverride.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x14)
    return 20;
  else
    return v0;
}

unint64_t lazy protocol witness table accessor for type AnnounceUsoEntity and conformance AnnounceUsoEntity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnnounceUsoEntity and conformance AnnounceUsoEntity;
  if (!lazy protocol witness table cache variable for type AnnounceUsoEntity and conformance AnnounceUsoEntity)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AnnounceUsoEntity, &type metadata for AnnounceUsoEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceUsoEntity and conformance AnnounceUsoEntity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnounceUsoVerbOverride and conformance AnnounceUsoVerbOverride()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnnounceUsoVerbOverride and conformance AnnounceUsoVerbOverride;
  if (!lazy protocol witness table cache variable for type AnnounceUsoVerbOverride and conformance AnnounceUsoVerbOverride)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AnnounceUsoVerbOverride, &type metadata for AnnounceUsoVerbOverride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceUsoVerbOverride and conformance AnnounceUsoVerbOverride);
  }
  return result;
}

uint64_t ObjC metadata update function for AnnounceExecutionOverride()
{
  return type metadata accessor for AnnounceExecutionOverride();
}

void type metadata completion function for AnnounceExecutionOverride()
{
  unint64_t v0;

  type metadata accessor for Siri_Nlu_External_UserParse?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for AnnounceExecutionOverride()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.__allocating_init(activeTasks:executedTasks:topNlParse:isTriggerlessFollowup:isMitigated:isMedocSupported:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.evaluate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.shouldOverrideMitigatorAndIsIntercomTask()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.executionOverrideDecisionForTriggerlessFollowup()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of AnnounceExecutionOverride.getAnnounceTask()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

void type metadata accessor for Siri_Nlu_External_UserParse?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Siri_Nlu_External_UserParse?)
  {
    type metadata accessor for Siri_Nlu_External_UserParse();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_UserParse?);
  }
}

uint64_t dispatch thunk of AnnounceTypeOverride.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.allowsCancellation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.allowsNonUsoTasks.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.allowsGlobalIntents.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.rejectDecision.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.validVerbsForAllEntities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.validEntityToVerbMap.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AnnounceTypeOverride.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceTypeGlobalOverride()
{
  return &type metadata for AnnounceTypeGlobalOverride;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideMessages()
{
  return &type metadata for AnnounceTypeOverrideMessages;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverridePhoneCall()
{
  return &type metadata for AnnounceTypeOverridePhoneCall;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideIntercom()
{
  return &type metadata for AnnounceTypeOverrideIntercom;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideMitigationForIntercomRequest()
{
  return &type metadata for AnnounceTypeOverrideMitigationForIntercomRequest;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideGenericNotification()
{
  return &type metadata for AnnounceTypeOverrideGenericNotification;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideReminder()
{
  return &type metadata for AnnounceTypeOverrideReminder;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideWorkoutReminder()
{
  return &type metadata for AnnounceTypeOverrideWorkoutReminder;
}

uint64_t destroy for AnnounceTypeGlobalOverride()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnnounceTypeGlobalOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnnounceTypeGlobalOverride(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnnounceTypeGlobalOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceTypeGlobalOverride(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnounceTypeGlobalOverride(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceTypeOverrideVoicemail()
{
  return &type metadata for AnnounceTypeOverrideVoicemail;
}

uint64_t getEnumTagSinglePayload for AnnounceUsoEntity(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnounceUsoEntity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1B4CD5FD8 + 4 * byte_1B4EE49E3[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1B4CD600C + 4 * byte_1B4EE49DE[v4]))();
}

uint64_t sub_1B4CD600C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CD6014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CD601CLL);
  return result;
}

uint64_t sub_1B4CD6028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CD6030);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1B4CD6034(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CD603C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceUsoEntity()
{
  return &type metadata for AnnounceUsoEntity;
}

uint64_t getEnumTagSinglePayload for AnnounceUsoVerbOverride(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnounceUsoVerbOverride(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1B4CD6134 + 4 * byte_1B4EE49ED[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1B4CD6168 + 4 * byte_1B4EE49E8[v4]))();
}

uint64_t sub_1B4CD6168(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CD6170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CD6178);
  return result;
}

uint64_t sub_1B4CD6184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CD618CLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1B4CD6190(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CD6198(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceUsoVerbOverride()
{
  return &type metadata for AnnounceUsoVerbOverride;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t AnyFlow.instrumentationId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B4EE3F50;
  v1 = ObjectIdentifier.hashValue.getter();
  v2 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v0 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v0 + 64) = v2;
  *(_QWORD *)(v0 + 32) = v1;
  return String.init(format:_:)();
}

SiriKitRuntime::AppLaunchAffinityScorer __swiftcall AppLaunchAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::AppLaunchAffinityScorer result;

  v0 = (void *)0x80000001B4EF6910;
  v1 = 0xD00000000000001ELL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t AppLaunchAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t AppLaunchAffinityScorer.score(_:environment:)()
{
  return specialized AppLaunchAffinityScorer.score(_:environment:)();
}

uint64_t AppLaunchAffinityScorer.score(_:)()
{
  return 0;
}

uint64_t AppLaunchAffinityScorer.score(_:usoParse:environment:)()
{
  return 0;
}

uint64_t specialized AppLaunchAffinityScorer.score(_:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE v21[32];
  _QWORD v22[4];

  v0 = type metadata accessor for RREntity();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for RRCandidate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  if (v22[0])
  {
    v11 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
    swift_release();
    if (v11)
    {
      dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  SiriEnvironment.salientEntitiesProvider.getter();
  v12 = (_QWORD *)dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  static AffinityScorerUtils.topOpenableEntity(candidates:)(v12, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v13 = &demangling cache variable for type metadata for RRCandidate?;
    v14 = v6;
LABEL_20:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, v13);
    return 5;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  static UsoEntity_CodeGenConverter.convert(entity:)();
  swift_release();
  if (!v22[3])
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
LABEL_19:
    v13 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v14 = v22;
    goto LABEL_20;
  }
  outlined init with copy of Any?((uint64_t)v22, (uint64_t)v21);
  type metadata accessor for UsoEntity_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoEntity_common_Window();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoEntity_common_AppEntity();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
        swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      goto LABEL_19;
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "AppLaunchAffinityScorer found valid Window/App entity for open::uso_NoEntity parse", v18, 2u);
    MEMORY[0x1B5E44758](v18, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return 3;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD v20[2];
  uint64_t v21;
  _BYTE v22[32];
  _BYTE v23[24];
  uint64_t v24;

  v0 = type metadata accessor for RREntity();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RRCandidate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  SiriEnvironment.salientEntitiesProvider.getter();
  v8 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return 5;
  }
  v10 = *(unsigned __int8 *)(v5 + 80);
  v20[0] = v8;
  v11 = v8 + ((v10 + 32) & ~v10);
  v12 = *(_QWORD *)(v5 + 72);
  v21 = v5;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v20[1] = MEMORY[0x1E0DEE9B8] + 8;
  v13(v7, v11, v4);
  while (1)
  {
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (!v24)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v4);
      goto LABEL_4;
    }
    outlined init with copy of Any?((uint64_t)v23, (uint64_t)v22);
    type metadata accessor for UsoEntity_common_App();
    if (swift_dynamicCast())
      break;
    type metadata accessor for UsoEntity_common_Window();
    if (swift_dynamicCast())
      break;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
LABEL_4:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v11 += v12;
    if (!--v9)
      goto LABEL_16;
    v13(v7, v11, v4);
  }
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
  v14 = v21;
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "AppLaunchAffinityScorer found valid app/window entity for close::common_App parse", v18, 2u);
    MEMORY[0x1B5E44758](v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v4);
  return 3;
}

uint64_t specialized AppLaunchAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD v30[3];
  _BYTE v31[32];
  _BYTE v32[24];
  uint64_t v33;

  v30[1] = a2;
  v2 = type metadata accessor for USOParse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Parse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v30[0] = v7;
    v14 = v5;
    v15 = v3;
    v16 = v2;
    v17 = v13;
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1B4BE6000, v11, v12, "AppLaunchAffinityScorer running", v13, 2u);
    v18 = v17;
    v2 = v16;
    v3 = v15;
    v5 = v14;
    v7 = v30[0];
    MEMORY[0x1B5E44758](v18, -1, -1);
  }

  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) != *MEMORY[0x1E0D9C678])
  {
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "AppLaunchAffinityScorer got unimplemented parse", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 2;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v33)
    goto LABEL_30;
  outlined init with copy of Any?((uint64_t)v32, (uint64_t)v31);
  type metadata accessor for UsoTask_open_uso_NoEntity();
  if (swift_dynamicCast())
  {
    v19 = specialized AppLaunchAffinityScorer.score(_:environment:)();
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_close_uso_NoEntity();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v30[2] && (v25 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter(), swift_release(), v25))
    {
      dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    goto LABEL_33;
  }
  type metadata accessor for UsoTask_close_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_open_common_Setting();
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      swift_release();
      swift_release();
LABEL_28:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return 0;
    }
    type metadata accessor for UsoTask_enable_common_Setting();
    if (swift_dynamicCast())
    {
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      goto LABEL_28;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
LABEL_30:
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1B4BE6000, v26, v27, "AppLaunchAffinityScorer got unimplemented USO parse", v28, 2u);
      MEMORY[0x1B5E44758](v28, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_33;
  }
  v19 = specialized AppLaunchAffinityScorer.score(_:environment:)();
LABEL_10:
  v20 = v19;
  v21 = v19;
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  if (v21 == 5)
  {
LABEL_33:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 2;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v20;
}

ValueMetadata *type metadata accessor for AppLaunchAffinityScorer()
{
  return &type metadata for AppLaunchAffinityScorer;
}

uint64_t AppResolutionResult.selectedApp.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;

  v1 = v0;
  v2 = type metadata accessor for AppResolutionResult();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0D979C0] || v6 == *MEMORY[0x1E0D979D8])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    return *(_QWORD *)v5;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
}

uint64_t AppResolutionType.flowAppResolutionType.getter()
{
  char *v0;

  return dword_1B4EE5108[*v0];
}

SiriKitRuntime::AppResolutionType_optional __swiftcall AppResolutionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriKitRuntime::AppResolutionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AppResolutionType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 12;
  if (v5 < 0xC)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static AppResolutionType.allCases.getter()
{
  return &outlined read-only object #0 of static AppResolutionType.allCases.getter;
}

uint64_t AppResolutionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4CD71A0
                                                                     + 4 * asc_1B4EE4FC0[*v0]))(0xD000000000000019, 0x80000001B4EF38E0);
}

uint64_t sub_1B4CD71A0()
{
  return 0x6E49746F4E707041;
}

unint64_t sub_1B4CD71C4()
{
  return 0xD000000000000012;
}

uint64_t sub_1B4CD71E0()
{
  return 0x6465727265666E49;
}

uint64_t sub_1B4CD71F8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 9;
}

uint64_t sub_1B4CD7280()
{
  return 0x656C655372657355;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppResolutionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type AppResolutionType and conformance AppResolutionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppResolutionType and conformance AppResolutionType;
  if (!lazy protocol witness table cache variable for type AppResolutionType and conformance AppResolutionType)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AppResolutionType, &type metadata for AppResolutionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppResolutionType and conformance AppResolutionType);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AppResolutionType()
{
  Hasher.init(_seed:)();
  AppResolutionType.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AppResolutionType()
{
  AppResolutionType.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppResolutionType()
{
  Hasher.init(_seed:)();
  AppResolutionType.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

SiriKitRuntime::AppResolutionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AppResolutionType(Swift::String *a1)
{
  return AppResolutionType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AppResolutionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AppResolutionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type [AppResolutionType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AppResolutionType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AppResolutionType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [AppResolutionType]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AppResolutionType] and conformance [A]);
  }
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance AppResolutionType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AppResolutionType.allCases.getter;
}

uint64_t storeEnumTagSinglePayload for AppResolutionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1B4CD74E4 + 4 * byte_1B4EE4FD1[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1B4CD7518 + 4 * byte_1B4EE4FCC[v4]))();
}

uint64_t sub_1B4CD7518(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CD7520(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CD7528);
  return result;
}

uint64_t sub_1B4CD7534(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CD753CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1B4CD7540(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CD7548(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppResolutionType()
{
  return &type metadata for AppResolutionType;
}

Swift::Void __swiftcall AppShortcutExpansionContextBuilder.newSessionStarted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[AppShortcutExpansionContext] New session started", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  type metadata accessor for ConditionalIntentMetadataStore();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9E0];
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v6;
  swift_release();
}

Swift::Void __swiftcall AppShortcutExpansionContextBuilder.newTurnStarted()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[AppShortcutExpansionContext] New turn started", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_beginAccess();
  v6 = v1[3];
  v1[4] = 0;
  v1[5] = 0;
  v1[3] = 0;
  outlined consume of AppShortcutExpansionContext?(v6);
}

uint64_t *AppShortcutExpansionContext.emptyContext.unsafeMutableAddressor()
{
  if (one-time initialization token for emptyContext != -1)
    swift_once();
  return &static AppShortcutExpansionContext.emptyContext;
}

uint64_t AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[11] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 80);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v5 = v1 + 32;
    v4 = *(_QWORD *)(v1 + 32);
    v3 = *(_QWORD *)(v5 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v4, v3);
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v7;
    *v7 = v0;
    v7[1] = AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:);
    return AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD **)(v0 + 80);
  swift_release();
  v5 = v4[3];
  v4[3] = v3;
  v4[4] = v1;
  v4[5] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined consume of AppShortcutExpansionContext?(v5);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
}

uint64_t AppShortcutExpansionContextBuilder.build(rrCandidates:appShortcutTargets:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConditionalIntentMetadataStore.debugDescription.getter()
{
  return ConditionalIntentMetadataStore.debugDescription.getter(29, 0xD00000000000001BLL, 0x80000001B4EF7180, &demangling cache variable for type metadata for [String : [String : Bool]]);
}

Swift::Bool __swiftcall ConditionalIntentMetadataStore.isConditionalIntent(appBundleId:actionId:)(Swift::String appBundleId, Swift::String actionId)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;

  v3 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_6;
  object = actionId._object;
  countAndFlagsBits = actionId._countAndFlagsBits;
  v6 = appBundleId._object;
  v7 = appBundleId._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, (uint64_t)v6);
  if ((v9 & 1) == 0
    || (v10 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        !*(_QWORD *)(v10 + 16)))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    v12 = 0;
    return v12 & 1;
  }
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Bool __swiftcall ConditionalIntentMetadataStore.isPersistedConditionalIntent(appBundleId:actionId:)(Swift::String appBundleId, Swift::String actionId)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;

  v3 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  object = actionId._object;
  countAndFlagsBits = actionId._countAndFlagsBits;
  v6 = appBundleId._object;
  v7 = appBundleId._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, (uint64_t)v6);
  if ((v9 & 1) == 0
    || (v10 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        !*(_QWORD *)(v10 + 16)))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v13 = *(_BYTE *)(*(_QWORD *)(v10 + 56) + v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t ConditionalIntentMetadataStore.rawDictionary()()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConditionalIntentMetadataStore()
{
  return ConditionalIntentMetadataStore.debugDescription.getter();
}

uint64_t IntentStatesStore.__allocating_init(conditionalIntentsStates:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t IntentStatesStore.init(conditionalIntentsStates:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t IntentStatesStore.debugDescription.getter()
{
  return ConditionalIntentMetadataStore.debugDescription.getter(21, 0xD000000000000013, 0x80000001B4EF71A0, &demangling cache variable for type metadata for [String : [String : NSNumber]]);
}

uint64_t ConditionalIntentMetadataStore.debugDescription.getter(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Swift::String v6;

  _StringGuts.grow(_:)(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v6._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return a2;
}

Swift::Bool __swiftcall IntentStatesStore.isConditionallyActive(appBundleId:actionId:)(Swift::String appBundleId, Swift::String actionId)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  id v13;
  unsigned __int8 v14;

  v3 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  object = actionId._object;
  countAndFlagsBits = actionId._countAndFlagsBits;
  v6 = appBundleId._object;
  v7 = appBundleId._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, (uint64_t)v6);
  if ((v9 & 1) == 0
    || (v10 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        !*(_QWORD *)(v10 + 16)))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v13 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v13, sel_BOOLValue);

  return v14;
}

Swift::Bool __swiftcall IntentStatesStore.isEmpty()()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) == 0;
}

uint64_t IntentStatesStore.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ConditionalIntentMetadataStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntentStatesStore()
{
  return IntentStatesStore.debugDescription.getter();
}

uint64_t AppShortcutExpansionContext.mapConditionalIntentMetadata.getter()
{
  return swift_retain();
}

uint64_t AppShortcutExpansionContext.mapConditionalIntentsStates.getter()
{
  return swift_retain();
}

uint64_t one-time initialization function for emptyContext()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  type metadata accessor for ConditionalIntentMetadataStore();
  v0 = swift_allocObject();
  v1 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  type metadata accessor for IntentStatesStore();
  result = swift_allocObject();
  v3 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(result + 16) = v1;
  static AppShortcutExpansionContext.emptyContext = v3;
  *(_QWORD *)algn_1ED515578 = v0;
  qword_1ED515580 = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  if (one-time initialization token for emptySessionContext != -1)
    swift_once();
  v0 = static LinkExpansionContext.SessionContext.emptySessionContext;
  v1 = one-time initialization token for emptyTurnContext;
  swift_retain();
  if (v1 != -1)
    swift_once();
  static LinkExpansionContext.emptyContext = v0;
  unk_1EF0F3470 = static LinkExpansionContext.TurnContext.emptyTurnContext;
  return swift_retain();
}

uint64_t static AppShortcutExpansionContext.emptyContext.getter()
{
  uint64_t v0;

  if (one-time initialization token for emptyContext != -1)
    swift_once();
  v0 = static AppShortcutExpansionContext.emptyContext;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return v0;
}

unint64_t AppShortcutExpansionContext.debugDescription.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0 = Set.description.getter();
  v2 = v1;
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0xD000000000000016;
  v5._object = (void *)0x80000001B4EF71E0;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  type metadata accessor for ConditionalIntentMetadataStore();
  swift_retain();
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8236;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 0xD000000000000013;
  v8._object = (void *)0x80000001B4EF7200;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  type metadata accessor for IntentStatesStore();
  swift_retain();
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0xD00000000000001ALL;
  v10._object = (void *)0x80000001B4EF7220;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

uint64_t AppShortcutExpansionContext.conditionalIntentsStates.getter()
{
  return swift_retain();
}

uint64_t AppShortcutExpansionContext.conditionalIntentMetadataStore.getter()
{
  return swift_retain();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppShortcutExpansionContext()
{
  return AppShortcutExpansionContext.debugDescription.getter();
}

uint64_t protocol witness for AppShortcutContextProviding.salientAppBundleIds.getter in conformance AppShortcutExpansionContext()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AppShortcutContextProviding.mapConditionalIntentMetadata.getter in conformance AppShortcutExpansionContext()
{
  return swift_retain();
}

uint64_t protocol witness for AppShortcutContextProviding.conditionalIntentsStates.getter in conformance AppShortcutExpansionContext()
{
  return swift_retain();
}

uint64_t AppShortcutExpansionContextBuilder.cachedConditionalIntentsMetadata.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t AppShortcutExpansionContextBuilder.cachedConditionalIntentsMetadata.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*AppShortcutExpansionContextBuilder.cachedConditionalIntentsMetadata.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t AppShortcutExpansionContextBuilder.appShortcutExpansionContext.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  outlined copy of AppShortcutExpansionContext?(v1);
  return v1;
}

uint64_t AppShortcutExpansionContextBuilder.appShortcutExpansionContext.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;

  swift_beginAccess();
  v7 = v3[3];
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = a3;
  return outlined consume of AppShortcutExpansionContext?(v7);
}

uint64_t (*AppShortcutExpansionContextBuilder.appShortcutExpansionContext.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t AppShortcutExpansionContextBuilder.metadataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 48, a1);
}

uint64_t AppShortcutExpansionContextBuilder.appShortcutStateProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 88, a1);
}

_QWORD *AppShortcutExpansionContextBuilder.__allocating_init(metadataProvider:appShortcutStateProvider:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v4 = (_QWORD *)swift_allocObject();
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = specialized AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)((uint64_t)v9, (uint64_t)v15, v4, v5, v11, v6, v12);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

_QWORD *AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  v18 = specialized AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)((uint64_t)v10, (uint64_t)v16, v3, v6, v12, v7, v13);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v18;
}

uint64_t AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[15] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[AppShortcutExpansionContext] Collecting TurnContext", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = v0[14];
  v6 = v0[12];

  v0[17] = specialized AppShortcutExpansionContextBuilder.extractOnScreenBundleIDs(from:)(v6);
  swift_beginAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16) + 16);
  v8 = (_QWORD *)v0[14];
  if (v7)
  {
    v9 = v8[14];
    v10 = v8[15];
    __swift_project_boxed_opaque_existential_1(v8 + 11, v9);
    v11 = v8[2];
    v0[20] = v11;
    v17 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v10 + 8) + *(_QWORD *)(v10 + 8));
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc();
    v0[21] = v12;
    *v12 = v0;
    v12[1] = AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:);
    return v17(v0[13], v11, v9, v10);
  }
  else
  {
    v14 = v8[9];
    v15 = v8[10];
    __swift_project_boxed_opaque_existential_1(v8 + 6, v14);
    v18 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v15 + 16) + *(_QWORD *)(v15 + 16));
    v16 = (_QWORD *)swift_task_alloc();
    v0[18] = v16;
    *v16 = v0;
    v16[1] = AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:);
    return v18(v14, v15);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t, uint64_t);

  v1 = v0[14];
  v2 = specialized AppShortcutExpansionContextBuilder.extractActionMetadata(actionsMetadata:)(v0[19]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  swift_release();
  v3 = (_QWORD *)v0[14];
  v4 = v3[14];
  v5 = v3[15];
  __swift_project_boxed_opaque_existential_1(v3 + 11, v4);
  v6 = v3[2];
  v0[20] = v6;
  v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 8) + *(_QWORD *)(v5 + 8));
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  v0[21] = v7;
  *v7 = v0;
  v7[1] = AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:);
  return v9(v0[13], v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 112);
  swift_release();
  type metadata accessor for IntentStatesStore();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  v4 = *(_QWORD *)(v2 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 64) = v7;
    v13 = v9;
    *(_QWORD *)(v0 + 72) = v4;
    *(_QWORD *)(v0 + 80) = v3;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "[AppShortcutExpansionContext] TurnContext: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

    swift_release();
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();

  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 136), v4, v3);
}

uint64_t AppShortcutExpansionContextBuilder.collectTurnContext(rrCandidates:appShortcutTargets:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t AppShortcutExpansionContextBuilder.deinit()
{
  uint64_t v0;

  swift_release();
  outlined consume of AppShortcutExpansionContext?(*(_QWORD *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  return v0;
}

uint64_t AppShortcutExpansionContextBuilder.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  outlined consume of AppShortcutExpansionContext?(*(_QWORD *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConditionalIntentMetadataStore()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for IntentStatesStore()
{
  return objc_opt_self();
}

uint64_t outlined copy of AppShortcutExpansionContext?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

_QWORD *specialized AppShortcutExpansionContextBuilder.init(metadataProvider:appShortcutStateProvider:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v14;
  uint64_t v15;

  a3[9] = a4;
  a3[10] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3 + 6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  a3[14] = a5;
  a3[15] = a7;
  v14 = __swift_allocate_boxed_opaque_existential_1(a3 + 11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v14, a2, a5);
  type metadata accessor for ConditionalIntentMetadataStore();
  a3[4] = 0;
  a3[5] = 0;
  a3[3] = 0;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = MEMORY[0x1E0DEE9E0];
  a3[2] = v15;
  return a3;
}

uint64_t method lookup function for ConditionalIntentMetadataStore()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for IntentStatesStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IntentStatesStore.__allocating_init(conditionalIntentsStates:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AppShortcutContextProviding.salientAppBundleIds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AppShortcutContextProviding.mapConditionalIntentMetadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AppShortcutContextProviding.conditionalIntentsStates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for AppShortcutExpansionContext()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for AppShortcutExpansionContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AppShortcutExpansionContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppShortcutExpansionContext(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutExpansionContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutExpansionContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutExpansionContext()
{
  return &type metadata for AppShortcutExpansionContext;
}

uint64_t type metadata accessor for AppShortcutExpansionContextBuilder()
{
  return objc_opt_self();
}

uint64_t method lookup function for AppShortcutExpansionContextBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppShortcutExpansionContextBuilder.__allocating_init(metadataProvider:appShortcutStateProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t specialized AppShortcutExpansionContextBuilder.extractOnScreenBundleIDs(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void *v49;
  void *v50;
  BOOL v51;
  char v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  int v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, _QWORD, uint64_t);
  void (*v82)(char *, unint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char *v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t result;
  void (*v97)(char *, char *, uint64_t);
  char *v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  void (*v105)(char *, uint64_t);
  char *v106;
  char v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t, uint64_t);
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[2];
  unint64_t v140;
  char *v141;
  unsigned int v142;
  unint64_t v143;
  char *v144;
  void (*v145)(char *, _QWORD, uint64_t);
  unsigned int v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, unint64_t, uint64_t);
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  void (*v172)(char *, uint64_t);
  int v173;
  char *v174;
  void (*v175)(char *, char *, uint64_t);
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v139 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RRMetadata();
  v171 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v178 = (char *)v139 - v9;
  v179 = type metadata accessor for RRDataSourceMetadataValue();
  v10 = *(_QWORD *)(v179 - 8);
  v11 = MEMORY[0x1E0C80A78](v179);
  v13 = (char *)v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v152 = (char *)v139 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v174 = (char *)v139 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v169 = (char *)v139 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v168 = (char *)v139 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v162 = (char *)v139 - v23;
  MEMORY[0x1E0C80A78](v22);
  v156 = (char *)v139 - v24;
  v25 = type metadata accessor for RREntity();
  v165 = *(_QWORD *)(v25 - 8);
  v166 = v25;
  v26 = MEMORY[0x1E0C80A78](v25);
  v154 = (char *)v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v147 = (char *)v139 - v29;
  MEMORY[0x1E0C80A78](v28);
  v151 = (char *)v139 - v30;
  v31 = type metadata accessor for RRCandidate();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v153 = (char *)v139 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v141 = (char *)v139 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v160 = (char *)v139 - v38;
  MEMORY[0x1E0C80A78](v37);
  v167 = (char *)v139 - v39;
  v40 = MEMORY[0x1E0DEE9D8];
  v180 = MEMORY[0x1E0DEE9D8];
  v41 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v157 = v31;
  v161 = v32;
  v150 = v41;
  if (!v41)
  {
    v122 = v40;
    v123 = v40;
LABEL_65:
    swift_bridgeObjectRelease();
    v124 = *(_QWORD *)(v122 + 16);
    if (v124)
    {
      v180 = v123;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v124, 0);
      v125 = *(unsigned __int8 *)(v32 + 80);
      v179 = v122;
      v126 = v122 + ((v125 + 32) & ~v125);
      v127 = *(_QWORD *)(v32 + 72);
      v128 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
      v129 = v153;
      do
      {
        v128(v129, v126, v31);
        v130 = v154;
        RRCandidate.entity.getter();
        v131 = RREntity.appBundleId.getter();
        v133 = v132;
        (*(void (**)(char *, uint64_t))(v165 + 8))(v130, v166);
        (*(void (**)(char *, uint64_t))(v161 + 8))(v129, v31);
        v134 = v180;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v134 + 16) + 1, 1);
          v134 = v180;
        }
        v136 = *(_QWORD *)(v134 + 16);
        v135 = *(_QWORD *)(v134 + 24);
        if (v136 >= v135 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1);
          v134 = v180;
        }
        *(_QWORD *)(v134 + 16) = v136 + 1;
        v137 = v134 + 16 * v136;
        *(_QWORD *)(v137 + 32) = v131;
        *(_QWORD *)(v137 + 40) = v133;
        v126 += v127;
        --v124;
        v31 = v157;
      }
      while (v124);
      swift_release();
    }
    else
    {
      swift_release();
      v134 = MEMORY[0x1E0DEE9D8];
    }
    v138 = specialized Set.init<A>(_:)(v134);
    swift_bridgeObjectRelease();
    return v138;
  }
  v144 = v13;
  v176 = v8;
  v42 = 0;
  v43 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v155 = *(_QWORD *)(v32 + 72);
  v139[1] = a1;
  v140 = v43;
  v149 = a1 + v43;
  v164 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v173 = *MEMORY[0x1E0DA3D48];
  v146 = *MEMORY[0x1E0DA3DC0];
  v142 = *MEMORY[0x1E0DA3DB8];
  v170 = v4;
  v177 = v10;
  while (1)
  {
    v163 = v42;
    v164(v167, v149 + v155 * v42, v31);
    v46 = v151;
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    v47 = *(void (**)(char *, uint64_t))(v165 + 8);
    v47(v46, v166);
    v48 = UsoTask.verbString.getter();
    v50 = v49;
    swift_release();
    if (one-time initialization token for kUsoCommonAppEntityName != -1)
      swift_once();
    v51 = v48 == kUsoCommonAppEntityName._countAndFlagsBits && v50 == kUsoCommonAppEntityName._object;
    v44 = v160;
    if (v51)
    {
      swift_bridgeObjectRelease();
      v164(v44, (uint64_t)v167, v31);
    }
    else
    {
      v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v164(v44, (uint64_t)v167, v31);
      if ((v52 & 1) == 0)
        goto LABEL_5;
    }
    v53 = v147;
    RRCandidate.entity.getter();
    v54 = RREntity.metadata.getter();
    v47(v53, v166);
    v55 = *(_QWORD *)(v54 + 16);
    if (v55)
    {
      v56 = v171;
      v57 = v54 + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
      v159 = (void (*)(char *, unint64_t, uint64_t))v54;
      swift_bridgeObjectRetain();
      v58 = *(_QWORD *)(v56 + 72);
      v175 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
      v59 = MEMORY[0x1E0DEE9D8];
      v60 = v176;
      do
      {
        v61 = v178;
        v62 = v175;
        v175(v178, (char *)v57, v5);
        v62(v60, v61, v5);
        v63 = (*(uint64_t (**)(char *, uint64_t))(v56 + 88))(v60, v5);
        if (v63 == v173)
        {
          (*(void (**)(char *, uint64_t))(v56 + 96))(v60, v5);
          v64 = v60;
          v65 = v177;
          v66 = *(void (**)(char *, char *, uint64_t))(v177 + 32);
          v67 = v179;
          v172 = (void (*)(char *, uint64_t))v59;
          v68 = v5;
          v69 = v56;
          v70 = v169;
          v66(v169, v64, v179);
          v71 = v70;
          v56 = v69;
          v5 = v68;
          v59 = (unint64_t)v172;
          v66(v4, v71, v67);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v4, 0, 1, v67);
          (*(void (**)(char *, uint64_t))(v56 + 8))(v178, v5);
        }
        else
        {
          v72 = v60;
          v73 = *(void (**)(char *, uint64_t))(v56 + 8);
          v73(v72, v5);
          v65 = v177;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v177 + 56))(v4, 1, 1, v179);
          v73(v178, v5);
        }
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v4, 1, v179) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v4);
        }
        else
        {
          v74 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
          v75 = v168;
          v76 = v179;
          v74(v168, v4, v179);
          v74(v174, v75, v76);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, v59);
          v78 = *(_QWORD *)(v59 + 16);
          v77 = *(_QWORD *)(v59 + 24);
          if (v78 >= v77 >> 1)
            v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v59);
          *(_QWORD *)(v59 + 16) = v78 + 1;
          v74((char *)(v59+ ((*(unsigned __int8 *)(v177 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80))+ *(_QWORD *)(v177 + 72) * v78), v174, v179);
          v4 = v170;
          v56 = v171;
        }
        v60 = v176;
        v57 += v58;
        --v55;
      }
      while (v55);
      swift_bridgeObjectRelease_n();
      v31 = v157;
      v10 = v177;
    }
    else
    {
      swift_bridgeObjectRelease();
      v59 = MEMORY[0x1E0DEE9D8];
    }
    v79 = v162;
    v80 = v156;
    v81 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
    v81(v156, v146, v179);
    v175 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
    if (v175)
      break;
    v32 = v161;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v80, v179);
LABEL_4:
    swift_bridgeObjectRelease();
    v44 = v160;
LABEL_5:
    v45 = *(void (**)(char *, uint64_t))(v32 + 8);
    v45(v44, v31);
    v45(v167, v31);
LABEL_6:
    v42 = v163 + 1;
    if (v163 + 1 == v150)
    {
      v122 = v180;
      v123 = MEMORY[0x1E0DEE9D8];
      goto LABEL_65;
    }
  }
  v145 = v81;
  v143 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v82 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
  v148 = v59 + v143;
  v83 = v179;
  v159 = v82;
  ((void (*)(char *))v82)(v79);
  v84 = v10;
  v85 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3DC8], MEMORY[0x1E0DA3DD8]);
  swift_bridgeObjectRetain();
  v158 = v85;
  v10 = v84;
  v86 = dispatch thunk of static Equatable.== infix(_:_:)();
  v87 = v162;
  v88 = v86;
  v172 = *(void (**)(char *, uint64_t))(v84 + 8);
  v172(v162, v83);
  if ((v88 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  if (v175 == (void (*)(char *, char *, uint64_t))1)
  {
    swift_bridgeObjectRelease();
    v32 = v161;
LABEL_47:
    v172(v80, v179);
    goto LABEL_4;
  }
  v89 = *(_QWORD *)(v84 + 72);
  v90 = v179;
  v159(v87, v148 + v89, v179);
  v91 = dispatch thunk of static Equatable.== infix(_:_:)();
  v92 = v162;
  v93 = v91;
  v172(v162, v90);
  if ((v93 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = v177;
LABEL_49:
    v101 = v148;
    v102 = v80;
    v103 = v179;
    v104 = v172;
    v172(v102, v179);
    v145(v152, v142, v103);
    v105 = v104;
    v106 = v144;
    v159(v144, v101, v103);
    swift_bridgeObjectRetain();
    v107 = dispatch thunk of static Equatable.== infix(_:_:)();
    v104(v106, v103);
    if ((v107 & 1) == 0)
    {
      if (v175 == (void (*)(char *, char *, uint64_t))1)
        goto LABEL_51;
      v148 = *(_QWORD *)(v10 + 72);
      v112 = v144;
      v113 = v179;
      v159(v144, v101 + v148, v179);
      v114 = dispatch thunk of static Equatable.== infix(_:_:)();
      v105(v112, v113);
      if ((v114 & 1) == 0)
      {
        if (v175 != (void (*)(char *, char *, uint64_t))2)
        {
          v115 = v59 + v143 + 2 * v148;
          v116 = 2;
          do
          {
            v117 = v144;
            result = ((uint64_t (*)(char *, unint64_t, uint64_t))v159)(v144, v115, v179);
            v118 = (void (*)(char *, char *, uint64_t))(v116 + 1);
            if (__OFADD__(v116, 1))
              goto LABEL_76;
            v119 = v179;
            v120 = dispatch thunk of static Equatable.== infix(_:_:)();
            v121 = v117;
            v105 = v172;
            v172(v121, v119);
            if ((v120 & 1) != 0)
              goto LABEL_3;
            ++v116;
            v115 += v148;
          }
          while (v118 != v175);
        }
LABEL_51:
        swift_bridgeObjectRelease();
        v105(v152, v179);
        swift_bridgeObjectRelease();
        v32 = v161;
        (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v31);
        v108 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
        v108(v141, v167, v31);
        v109 = v180;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v109 + 16) + 1, 1);
          v109 = v180;
        }
        v111 = *(_QWORD *)(v109 + 16);
        v110 = *(_QWORD *)(v109 + 24);
        if (v111 >= v110 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
          v109 = v180;
        }
        *(_QWORD *)(v109 + 16) = v111 + 1;
        v108((char *)(v109 + v140 + v111 * v155), v141, v31);
        v180 = v109;
        v4 = v170;
        goto LABEL_6;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    v105(v152, v179);
    v32 = v161;
    v4 = v170;
    goto LABEL_4;
  }
  if (v175 == (void (*)(char *, char *, uint64_t))2)
  {
    swift_bridgeObjectRelease();
    v32 = v161;
LABEL_46:
    v10 = v177;
    goto LABEL_47;
  }
  v94 = v59 + v143 + 2 * v89;
  v95 = 2;
  while (1)
  {
    result = ((uint64_t (*)(char *, unint64_t, uint64_t))v159)(v92, v94, v179);
    v97 = (void (*)(char *, char *, uint64_t))(v95 + 1);
    if (__OFADD__(v95, 1))
      break;
    v98 = v92;
    v99 = v179;
    v100 = dispatch thunk of static Equatable.== infix(_:_:)();
    v172(v98, v99);
    if ((v100 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v31 = v157;
      v10 = v177;
      v80 = v156;
      goto LABEL_49;
    }
    ++v95;
    v94 += v89;
    v92 = v162;
    v80 = v156;
    if (v97 == v175)
    {
      swift_bridgeObjectRelease();
      v31 = v157;
      v32 = v161;
      v4 = v170;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_76:
  __break(1u);
  return result;
}

uint64_t specialized AppShortcutExpansionContextBuilder.extractActionMetadata(actionsMetadata:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  id v33;
  void *v34;
  char v35;
  id v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  id v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  void *v51;
  char isUniquelyReferenced_nonNull_native;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t result;
  unsigned __int8 v83;
  unint64_t (*v84)@<X0>(unint64_t *@<X8>);
  uint64_t v85;
  int64_t v86;
  uint64_t v88;
  void *v89;
  int64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;

  v85 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  if (v1 < 64)
    v2 = ~(-1 << v1);
  else
    v2 = -1;
  v91 = v2 & *(_QWORD *)(a1 + 64);
  v86 = (unint64_t)(v1 + 63) >> 6;
  v3 = (void *)*MEMORY[0x1E0D43A20];
  swift_bridgeObjectRetain();
  v84 = 0;
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v89 = v3;
  while (2)
  {
    v92 = v5;
    if (!v91)
    {
      v8 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_105;
      if (v8 >= v86)
        goto LABEL_100;
      v9 = *(_QWORD *)(v85 + 8 * v8);
      v10 = v4 + 1;
      if (!v9)
      {
        v10 = v8 + 1;
        if (v8 + 1 >= v86)
          goto LABEL_100;
        v9 = *(_QWORD *)(v85 + 8 * v10);
        if (!v9)
        {
          v10 = v8 + 2;
          if (v8 + 2 >= v86)
            goto LABEL_100;
          v9 = *(_QWORD *)(v85 + 8 * v10);
          if (!v9)
          {
            v11 = v8 + 3;
            if (v11 < v86)
            {
              v9 = *(_QWORD *)(v85 + 8 * v11);
              if (v9)
              {
                v10 = v11;
                goto LABEL_21;
              }
              while (1)
              {
                v10 = v11 + 1;
                if (__OFADD__(v11, 1))
                  goto LABEL_108;
                if (v10 >= v86)
                  break;
                v9 = *(_QWORD *)(v85 + 8 * v10);
                ++v11;
                if (v9)
                  goto LABEL_21;
              }
            }
LABEL_100:
            v81 = v5;
            swift_release();
            _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v84);
            type metadata accessor for ConditionalIntentMetadataStore();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v81;
            return result;
          }
        }
      }
LABEL_21:
      v90 = v10;
      v91 = (v9 - 1) & v9;
      v7 = __clz(__rbit64(v9)) + (v10 << 6);
      goto LABEL_22;
    }
    v6 = __clz(__rbit64(v91));
    v90 = v4;
    v91 &= v91 - 1;
    v7 = v6 | (v4 << 6);
LABEL_22:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v7);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v7);
    v14 = v12[1];
    v88 = *v12;
    v95 = v13 + 64;
    v15 = 1 << *(_BYTE *)(v13 + 32);
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v17 = v16 & *(_QWORD *)(v13 + 64);
    v96 = (unint64_t)(v15 + 63) >> 6;
    v93 = v14;
    swift_bridgeObjectRetain();
    v97 = v13;
    swift_bridgeObjectRetain();
    v18 = 0;
    while (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v18 << 6);
LABEL_44:
      v24 = (uint64_t *)(*(_QWORD *)(v97 + 48) + 16 * v20);
      v26 = *v24;
      v25 = v24[1];
      v27 = *(void **)(*(_QWORD *)(v97 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
      v99 = v27;
      v28 = objc_msgSend(v99, sel_systemProtocols);
      type metadata accessor for LNSystemProtocol();
      v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v30 = objc_msgSend((id)objc_opt_self(), sel_conditionallyEnabledProtocol);
      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        v31 = _CocoaArrayWrapper.endIndex.getter();
        if (!v31)
        {
LABEL_26:

          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
      }
      else
      {
        v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v31)
          goto LABEL_26;
      }
      v94 = v26;
      v98 = v25;
      v32 = v18;
      if ((v29 & 0xC000000000000001) != 0)
        v33 = (id)MEMORY[0x1B5E43B94](0, v29);
      else
        v33 = *(id *)(v29 + 32);
      v34 = v33;
      v35 = static NSObject.== infix(_:_:)();

      if ((v35 & 1) != 0)
        goto LABEL_49;
      if (v31 == 1)
      {
LABEL_55:

        swift_bridgeObjectRelease();
LABEL_56:
        v18 = v32;
LABEL_27:
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
      else
      {
        if ((v29 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1B5E43B94](1, v29);
          v41 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          if ((v41 & 1) == 0)
          {
            if (v31 == 2)
              goto LABEL_55;
            v42 = 2;
            while (1)
            {
              MEMORY[0x1B5E43B94](v42, v29);
              v43 = v42 + 1;
              if (__OFADD__(v42, 1))
                break;
              v44 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if ((v44 & 1) != 0)
                goto LABEL_75;
              ++v42;
              if (v43 == v31)
              {

                swift_bridgeObjectRelease();
                v3 = v89;
                goto LABEL_56;
              }
            }
            __break(1u);
LABEL_102:
            __break(1u);
            goto LABEL_103;
          }
        }
        else
        {
          v45 = *(id *)(v29 + 40);
          v46 = static NSObject.== infix(_:_:)();

          if ((v46 & 1) == 0)
          {
            if (v31 == 2)
              goto LABEL_55;
            v47 = 6;
            v18 = v32;
            while (1)
            {
              v48 = v47 - 3;
              if (__OFADD__(v47 - 4, 1))
                break;
              v32 = v18;
              v49 = *(id *)(v29 + 8 * v47);
              v50 = static NSObject.== infix(_:_:)();

              if ((v50 & 1) != 0)
              {
LABEL_75:

                swift_bridgeObjectRelease();
                v3 = v89;
                goto LABEL_50;
              }
              ++v47;
              v18 = v32;
              if (v48 == v31)
              {

                swift_bridgeObjectRelease();
                v3 = v89;
                goto LABEL_27;
              }
            }
LABEL_103:
            __break(1u);
            goto LABEL_104;
          }
        }
LABEL_49:

        swift_bridgeObjectRelease();
LABEL_50:
        swift_bridgeObjectRelease();
        v36 = objc_msgSend(v99, sel_systemProtocolMetadata);
        type metadata accessor for LNSystemProtocolIdentifier(0);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LNSystemProtocolMetadata);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
        v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        v18 = v32;
        if (!*(_QWORD *)(v37 + 16))
        {
          swift_bridgeObjectRelease();

          goto LABEL_67;
        }
        v38 = v3;
        specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v39 & 1) != 0)
        {
          swift_unknownObjectRetain();

          swift_bridgeObjectRelease();
          objc_opt_self();
          v40 = swift_dynamicCastObjCClass();
          if (v40)
          {
            v51 = (void *)v40;
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            v83 = objc_msgSend(v51, sel_persistState);
            _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v84);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v54 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v93);
            v55 = v92[2];
            v56 = (v53 & 1) == 0;
            v57 = v55 + v56;
            if (__OFADD__(v55, v56))
              goto LABEL_106;
            v58 = v53;
            if (v92[3] >= v57)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                specialized _NativeDictionary.copy()();
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
              v59 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v93);
              if ((v58 & 1) != (v60 & 1))
                goto LABEL_111;
              v54 = v59;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            if ((v58 & 1) == 0)
            {
              v61 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
              v92[(v54 >> 6) + 8] |= 1 << v54;
              v62 = (uint64_t *)(v92[6] + 16 * v54);
              *v62 = v88;
              v62[1] = v93;
              *(_QWORD *)(v92[7] + 8 * v54) = v61;
              v63 = v92[2];
              v64 = __OFADD__(v63, 1);
              v65 = v63 + 1;
              if (v64)
                goto LABEL_109;
              v92[2] = v65;
              swift_bridgeObjectRetain();
            }
            v66 = v92[7];
            swift_bridgeObjectRelease();
            v67 = 8 * v54;
            v68 = swift_isUniquelyReferenced_nonNull_native();
            v69 = *(_QWORD **)(v66 + 8 * v54);
            *(_QWORD *)(v66 + 8 * v54) = 0x8000000000000000;
            v71 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v98);
            v72 = v69[2];
            v73 = (v70 & 1) == 0;
            v74 = v72 + v73;
            if (__OFADD__(v72, v73))
              goto LABEL_107;
            v75 = v70;
            if (v69[3] >= v74)
            {
              if ((v68 & 1) != 0)
              {
                if ((v70 & 1) != 0)
                  goto LABEL_93;
              }
              else
              {
                specialized _NativeDictionary.copy()();
                if ((v75 & 1) != 0)
                  goto LABEL_93;
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v74, v68);
              v76 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v98);
              if ((v75 & 1) != (v77 & 1))
                goto LABEL_111;
              v71 = v76;
              if ((v75 & 1) != 0)
              {
LABEL_93:
                *(_BYTE *)(v69[7] + v71) = v83;
                goto LABEL_94;
              }
            }
            v69[(v71 >> 6) + 8] |= 1 << v71;
            v78 = (uint64_t *)(v69[6] + 16 * v71);
            *v78 = v94;
            v78[1] = v98;
            *(_BYTE *)(v69[7] + v71) = v83;
            v79 = v69[2];
            v64 = __OFADD__(v79, 1);
            v80 = v79 + 1;
            if (v64)
              goto LABEL_110;
            v69[2] = v80;
            swift_bridgeObjectRetain();
LABEL_94:
            *(_QWORD *)(v66 + v67) = v69;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease_n();

            v84 = specialized thunk for @callee_guaranteed () -> (@owned [String : Bool]);
            v18 = v32;
          }
          else
          {
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();

          }
        }
        else
        {
          swift_bridgeObjectRelease();

LABEL_67:
          swift_bridgeObjectRelease();
        }
      }
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_102;
    if (v21 >= v96)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      swift_release();
      v5 = v92;
      v4 = v90;
      continue;
    }
    break;
  }
  v22 = *(_QWORD *)(v95 + 8 * v21);
  ++v18;
  if (v22)
    goto LABEL_43;
  v18 = v21 + 1;
  if (v21 + 1 >= v96)
    goto LABEL_5;
  v22 = *(_QWORD *)(v95 + 8 * v18);
  if (v22)
    goto LABEL_43;
  v18 = v21 + 2;
  if (v21 + 2 >= v96)
    goto LABEL_5;
  v22 = *(_QWORD *)(v95 + 8 * v18);
  if (v22)
  {
LABEL_43:
    v17 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_44;
  }
  v23 = v21 + 3;
  if (v23 >= v96)
    goto LABEL_5;
  v22 = *(_QWORD *)(v95 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_43;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v96)
      goto LABEL_5;
    v22 = *(_QWORD *)(v95 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_43;
  }
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of RRDataSourceMetadataValue?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *AppShortcutParseExpansion.__allocating_init(appShortcutExpansionContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t AppShortcutParseExpansion.appShortcutExpansionContext.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return v1;
}

_QWORD *AppShortcutParseExpansion.init(appShortcutExpansionContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[4];
  _BOOL4 v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71[5];
  uint64_t v72;

  v69 = a4;
  v67 = a3;
  v64 = a2;
  v68 = type metadata accessor for Siri_Nlu_External_Parser();
  v5 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v58[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *(_QWORD *)a1;
  v70 = *(void **)(a1 + 8);
  v16 = *(void **)(a1 + 24);
  v63 = *(_QWORD *)(a1 + 16);
  v66 = *(unsigned int *)(a1 + 32);
  v65 = *(unsigned __int8 *)(a1 + 36);
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v17 = swift_beginAccess();
  v18 = static LinkFeature.forceEnabled;
  if (*(_QWORD *)(static LinkFeature.forceEnabled + 16)
    && (v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v20 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v18 + 56) + v19) != 1)
      goto LABEL_19;
  }
  else
  {
    v71[3] = (uint64_t)&type metadata for LinkFeature;
    v71[4] = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    v21 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    if ((v21 & 1) == 0)
    {
LABEL_19:
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v67, v11);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v68);
      v38 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v10, 0, 1, v38);
      swift_bridgeObjectRetain();
      LOBYTE(v71[0]) = v65;
      v39 = v69;
      USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
      v40 = type metadata accessor for USOParse();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
    }
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v64 + 24) + 16);
  if (!*(_QWORD *)(v22 + 16))
    goto LABEL_19;
  v61 = v16;
  v23 = swift_retain();
  v24 = v15;
  v25 = (uint64_t)v70;
  swift_bridgeObjectRetain();
  v62 = v24;
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  if ((v27 & 1) == 0
    || (v60 = v23,
        v28 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v26),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        !*(_QWORD *)(v28 + 16)))
  {
    swift_release();
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v29 = v61;
  swift_bridgeObjectRetain();
  v30 = v63;
  specialized __RawDictionaryStorage.find<A>(_:)(v63, (uint64_t)v29);
  if ((v31 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  v32._countAndFlagsBits = v62;
  v32._object = v70;
  v33._countAndFlagsBits = v30;
  v33._object = v29;
  v59 = IntentStatesStore.isConditionallyActive(appBundleId:actionId:)(v32, v33);
  swift_release();
  if (v59)
  {
    v34._countAndFlagsBits = v62;
    v34._object = v70;
    v35._countAndFlagsBits = v30;
    v35._object = v29;
    v59 = ConditionalIntentMetadataStore.isPersistedConditionalIntent(appBundleId:actionId:)(v34, v35);
    v36 = *(_QWORD *)(v64 + 16);
    v37 = (uint64_t)v70;
    swift_bridgeObjectRetain();
    LODWORD(v64) = specialized Set.contains(_:)(v62, v37, v36);
    swift_bridgeObjectRelease();
    if (v59 || (v64 & 1) != 0)
    {
      swift_release();
      goto LABEL_19;
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
    v53 = (unint64_t)v70;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v54 = (unint64_t)v29;
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    v55 = os_log_type_enabled(v45, v46);
    v56 = v63;
    if (!v55)
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_32;
    }
    v49 = swift_slowAlloc();
    v50 = swift_slowAlloc();
    v71[0] = v50;
    *(_DWORD *)v49 = 136315394;
    swift_bridgeObjectRetain();
    v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v53, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v49 + 12) = 2080;
    swift_bridgeObjectRetain();
    v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v54, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v51 = "[AppShortcutExpansion] Dropping non persisted conditional intent as the bundle isn't on screen: %s - %s";
LABEL_31:
    _os_log_impl(&dword_1B4BE6000, v45, v46, v51, (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v50, -1, -1);
    MEMORY[0x1B5E44758](v49, -1, -1);

LABEL_32:
    swift_release();
    goto LABEL_33;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
  v43 = (unint64_t)v70;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v44 = (unint64_t)v29;
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.debug.getter();
  v47 = os_log_type_enabled(v45, v46);
  v48 = v63;
  if (v47)
  {
    v49 = swift_slowAlloc();
    v50 = swift_slowAlloc();
    v71[0] = v50;
    *(_DWORD *)v49 = 136315394;
    swift_bridgeObjectRetain();
    v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v43, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v49 + 12) = 2080;
    swift_bridgeObjectRetain();
    v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v44, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v51 = "[AppShortcutExpansion] Dropping disabled conditional intent: %s - %s";
    goto LABEL_31;
  }

  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_33:
  v57 = type metadata accessor for USOParse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v69, 1, 1, v57);
}

uint64_t closure #1 in AppShortcutParseExpansion.expand(nlParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  v16 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1E0C80A78](v8);
  v10 = *(_BYTE *)(a1 + 20);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  v12 = *MEMORY[0x1E0D9F108];
  v13 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v7, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
  swift_bridgeObjectRetain();
  v17 = v10;
  return USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
}

uint64_t AppShortcutParseExpansion.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for AppShortcutParseExpansion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppShortcutParseExpansion.__allocating_init(appShortcutExpansionContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AppShortcutParseExpansion.expand(nlParse:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t AppShortcutStateProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)
                                                + async function pointer to specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v7(a1, a2);
}

void specialized thunk for @callee_guaranteed () -> (@owned [String])(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
}

uint64_t AppShortcutStateProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AppShortcutStateProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AppShortcutStateProvider.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)
                                                + async function pointer to specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v7(a1, a2);
}

uint64_t specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD *@<X8>);
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  int64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char **v38;
  char **v39;
  void **p_cache;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  void *v63;
  unint64_t v64;
  char **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  Class isa;
  uint64_t v75;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[2];

  v81[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 16);
  v2 = MEMORY[0x1E0DEE9E0];
  if (v1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 136) + 16);
    v4 = swift_bridgeObjectRetain();
    v5 = 0;
    v78 = MEMORY[0x1E0DEE9E0];
    v6 = (uint64_t *)(v4 + 56);
    do
    {
      if (*(_QWORD *)(v3 + 16))
      {
        v8 = *(v6 - 3);
        v7 = *(v6 - 2);
        v10 = *(v6 - 1);
        v9 = *v6;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
        if ((v12 & 1) != 0
          && (v13 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11),
              swift_bridgeObjectRetain(),
              swift_bridgeObjectRelease(),
              *(_QWORD *)(v13 + 16)))
        {
          swift_bridgeObjectRetain();
          v79 = v10;
          specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
          v15 = v14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v15 & 1) != 0)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v5);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v81[0] = v78;
            v77 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
            v18 = *(_QWORD *)(v78 + 16);
            v19 = (v17 & 1) == 0;
            v20 = v18 + v19;
            if (__OFADD__(v18, v19))
              goto LABEL_62;
            v21 = v17;
            if (*(_QWORD *)(v78 + 24) >= v20)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                v78 = v81[0];
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
              v78 = v81[0];
              v77 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
              if ((v21 & 1) != (v22 & 1))
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            swift_bridgeObjectRelease();
            if ((v21 & 1) == 0)
            {
              *(_QWORD *)(v78 + 8 * (v77 >> 6) + 64) |= 1 << v77;
              v23 = (uint64_t *)(*(_QWORD *)(v78 + 48) + 16 * v77);
              *v23 = v8;
              v23[1] = v7;
              *(_QWORD *)(*(_QWORD *)(v78 + 56) + 8 * v77) = MEMORY[0x1E0DEE9D8];
              v24 = *(_QWORD *)(v78 + 16);
              v25 = v24 + 1;
              v26 = __OFADD__(v24, 1);
              swift_bridgeObjectRetain();
              if (v26)
                goto LABEL_63;
              *(_QWORD *)(v78 + 16) = v25;
            }
            v27 = *(_QWORD *)(v78 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v28 = *(_QWORD **)(v27 + 8 * v77);
            v29 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v27 + 8 * v77) = v28;
            if ((v29 & 1) == 0)
            {
              v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
              *(_QWORD *)(v27 + 8 * v77) = v28;
            }
            v31 = v28[2];
            v30 = v28[3];
            if (v31 >= v30 >> 1)
            {
              v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
              *(_QWORD *)(v27 + 8 * v77) = v28;
            }
            v28[2] = v31 + 1;
            v32 = &v28[2 * v31];
            v32[4] = v79;
            v32[5] = v9;
            swift_bridgeObjectRelease();
            v5 = specialized thunk for @callee_guaranteed () -> (@owned [String]);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v6 += 5;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    v2 = MEMORY[0x1E0DEE9E0];
  }
  else
  {
    v5 = 0;
    v78 = MEMORY[0x1E0DEE9E0];
  }
  v33 = 0;
  v80 = v0 + 80;
  *(_QWORD *)(v0 + 144) = v78;
  *(_QWORD *)(v0 + 152) = v5;
  v34 = *(_BYTE *)(v78 + 32);
  *(_BYTE *)(v0 + 232) = v34;
  v35 = 1 << v34;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(v78 + 64);
  *(_QWORD *)(v0 + 160) = v2;
  v38 = &selRef_reason;
  v39 = &selRef_reason;
  p_cache = &OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper.cache;
  while (1)
  {
    if (v37)
    {
      v41 = (v37 - 1) & v37;
      v42 = __clz(__rbit64(v37)) | (v33 << 6);
      v43 = *(_QWORD *)(v0 + 144);
      goto LABEL_53;
    }
    v44 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_61;
    }
    v45 = (unint64_t)((1 << *(_BYTE *)(v0 + 232)) + 63) >> 6;
    v43 = *(_QWORD *)(v0 + 144);
    if (v44 >= v45)
      goto LABEL_59;
    v46 = v43 + 64;
    v47 = *(_QWORD *)(v43 + 64 + 8 * v44);
    ++v33;
    if (!v47)
    {
      v33 = v44 + 1;
      if (v44 + 1 >= v45)
        goto LABEL_59;
      v47 = *(_QWORD *)(v46 + 8 * v33);
      if (!v47)
      {
        v33 = v44 + 2;
        if (v44 + 2 >= v45)
          goto LABEL_59;
        v47 = *(_QWORD *)(v46 + 8 * v33);
        if (!v47)
          break;
      }
    }
LABEL_52:
    v41 = (v47 - 1) & v47;
    v42 = __clz(__rbit64(v47)) + (v33 << 6);
LABEL_53:
    *(_QWORD *)(v0 + 168) = v33;
    *(_QWORD *)(v0 + 176) = v41;
    v49 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * v42);
    v50 = *v49;
    *(_QWORD *)(v0 + 184) = *v49;
    v51 = v49[1];
    *(_QWORD *)(v0 + 192) = v51;
    v52 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53 = (void *)MEMORY[0x1B5E432E8](v50, v51);
    v54 = objc_msgSend(v52, v38[6], v53);
    *(_QWORD *)(v0 + 200) = v54;

    *(_QWORD *)(v0 + 80) = 0;
    v55 = objc_msgSend(v54, v39[7], v80);
    *(_QWORD *)(v0 + 208) = v55;
    v56 = *(void **)(v0 + 80);
    if (v55)
    {
      v72 = v55;
      v73 = v56;
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 216) = isa;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
      *(_QWORD *)(v0 + 112) = swift_continuation_init();
      *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 88) = 0x40000000;
      *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : NSNumber];
      *(_QWORD *)(v0 + 104) = &block_descriptor_0;
      objc_msgSend(v72, sel_fetchStateForAppIntentIdentifiers_completionHandler_, isa, v80);
      return swift_continuation_await();
    }
    v57 = v56;
    swift_bridgeObjectRelease();
    v58 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (p_cache[49] != (void *)-1)
      swift_once();
    v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain();
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.error.getter();
    v62 = os_log_type_enabled(v60, v61);
    v64 = *(_QWORD *)(v0 + 192);
    v63 = *(void **)(v0 + 200);
    if (v62)
    {
      v65 = v38;
      v66 = *(_QWORD *)(v0 + 184);
      v67 = swift_slowAlloc();
      v68 = swift_slowAlloc();
      v81[0] = v68;
      *(_DWORD *)v67 = 136315138;
      swift_bridgeObjectRetain();
      v69 = v66;
      v38 = v65;
      *(_QWORD *)(v67 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v64, v81);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v60, v61, "[AppShortcuts] Cannot fetch intent state for: App - %s", (uint8_t *)v67, 0xCu);
      swift_arrayDestroy();
      v70 = v68;
      v39 = &selRef_reason;
      MEMORY[0x1B5E44758](v70, -1, -1);
      v71 = v67;
      p_cache = (void **)(&OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper + 16);
      MEMORY[0x1B5E44758](v71, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    v33 = *(_QWORD *)(v0 + 168);
    v37 = *(_QWORD *)(v0 + 176);
  }
  v48 = v44 + 3;
  if (v48 < v45)
  {
    v47 = *(_QWORD *)(v46 + 8 * v48);
    if (!v47)
    {
      while (1)
      {
        v33 = v48 + 1;
        if (__OFADD__(v48, 1))
          break;
        if (v33 >= v45)
          goto LABEL_59;
        v47 = *(_QWORD *)(v46 + 8 * v33);
        ++v48;
        if (v47)
          goto LABEL_52;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
    }
    v33 = v48;
    goto LABEL_52;
  }
LABEL_59:
  v75 = *(_QWORD *)(v0 + 152);
  swift_release();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v75);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 224) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  int64_t v28;
  unint64_t v29;
  char **v30;
  char **v31;
  void **p_cache;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  void *v55;
  unint64_t v56;
  char **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  Class isa;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69[2];

  v69[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 120);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 80) = v3;
  v68 = (_QWORD *)(v0 + 80);
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (v6 & 1) == 0;
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
    goto LABEL_40;
  v11 = v6;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 160) + 24) >= v10)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 184);
    v12 = *(_QWORD *)(v0 + 192);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v10, isUniquelyReferenced_nonNull_native);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    if ((v11 & 1) != (v15 & 1))
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    v7 = v14;
  }
  v17 = (_QWORD *)*v68;
  if ((v11 & 1) != 0)
  {
    v18 = v17[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v18 + 8 * v7) = v4;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 192);
    v17[(v7 >> 6) + 8] |= 1 << v7;
    v21 = (_QWORD *)(v17[6] + 16 * v7);
    *v21 = v20;
    v21[1] = v19;
    *(_QWORD *)(v17[7] + 8 * v7) = v4;
    v22 = v17[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_41;
    v17[2] = v24;
    swift_bridgeObjectRetain();
  }
  v26 = *(void **)(v0 + 208);
  v25 = *(void **)(v0 + 216);
  v27 = *(void **)(v0 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v28 = *(_QWORD *)(v0 + 168);
  v29 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 160) = v17;
  v30 = &selRef_reason;
  v31 = &selRef_reason;
  p_cache = &OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper.cache;
  while (1)
  {
    if (v29)
    {
      v33 = (v29 - 1) & v29;
      v34 = __clz(__rbit64(v29)) | (v28 << 6);
      v35 = *(_QWORD *)(v0 + 144);
      goto LABEL_31;
    }
    v36 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    v37 = (unint64_t)((1 << *(_BYTE *)(v0 + 232)) + 63) >> 6;
    v35 = *(_QWORD *)(v0 + 144);
    if (v36 >= v37)
      goto LABEL_37;
    v38 = v35 + 64;
    v39 = *(_QWORD *)(v35 + 64 + 8 * v36);
    ++v28;
    if (!v39)
    {
      v28 = v36 + 1;
      if (v36 + 1 >= v37)
        goto LABEL_37;
      v39 = *(_QWORD *)(v38 + 8 * v28);
      if (!v39)
      {
        v28 = v36 + 2;
        if (v36 + 2 >= v37)
          goto LABEL_37;
        v39 = *(_QWORD *)(v38 + 8 * v28);
        if (!v39)
          break;
      }
    }
LABEL_30:
    v33 = (v39 - 1) & v39;
    v34 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_31:
    *(_QWORD *)(v0 + 168) = v28;
    *(_QWORD *)(v0 + 176) = v33;
    v41 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 16 * v34);
    v42 = *v41;
    *(_QWORD *)(v0 + 184) = *v41;
    v43 = v41[1];
    *(_QWORD *)(v0 + 192) = v43;
    v44 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = (void *)MEMORY[0x1B5E432E8](v42, v43);
    v46 = objc_msgSend(v44, v30[6], v45);
    *(_QWORD *)(v0 + 200) = v46;

    *(_QWORD *)(v0 + 80) = 0;
    v47 = objc_msgSend(v46, v31[7], v68);
    *(_QWORD *)(v0 + 208) = v47;
    v48 = *(void **)(v0 + 80);
    if (v47)
    {
      v64 = v47;
      v65 = v48;
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 216) = isa;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
      *(_QWORD *)(v0 + 112) = swift_continuation_init();
      *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 88) = 0x40000000;
      *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : NSNumber];
      *(_QWORD *)(v0 + 104) = &block_descriptor_0;
      objc_msgSend(v64, sel_fetchStateForAppIntentIdentifiers_completionHandler_, isa, v68);
      return swift_continuation_await();
    }
    v49 = v48;
    swift_bridgeObjectRelease();
    v50 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (p_cache[49] != (void *)-1)
      swift_once();
    v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain();
    v52 = Logger.logObject.getter();
    v53 = static os_log_type_t.error.getter();
    v54 = os_log_type_enabled(v52, v53);
    v56 = *(_QWORD *)(v0 + 192);
    v55 = *(void **)(v0 + 200);
    if (v54)
    {
      v57 = v30;
      v58 = *(_QWORD *)(v0 + 184);
      v59 = swift_slowAlloc();
      v60 = swift_slowAlloc();
      v69[0] = v60;
      *(_DWORD *)v59 = 136315138;
      swift_bridgeObjectRetain();
      v61 = v58;
      v30 = v57;
      *(_QWORD *)(v59 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v56, v69);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v52, v53, "[AppShortcuts] Cannot fetch intent state for: App - %s", (uint8_t *)v59, 0xCu);
      swift_arrayDestroy();
      v62 = v60;
      v31 = &selRef_reason;
      MEMORY[0x1B5E44758](v62, -1, -1);
      v63 = v59;
      p_cache = (void **)(&OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper + 16);
      MEMORY[0x1B5E44758](v63, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    v28 = *(_QWORD *)(v0 + 168);
    v29 = *(_QWORD *)(v0 + 176);
  }
  v40 = v36 + 3;
  if (v40 < v37)
  {
    v39 = *(_QWORD *)(v38 + 8 * v40);
    if (!v39)
    {
      while (1)
      {
        v28 = v40 + 1;
        if (__OFADD__(v40, 1))
          break;
        if (v28 >= v37)
          goto LABEL_37;
        v39 = *(_QWORD *)(v38 + 8 * v28);
        ++v40;
        if (v39)
          goto LABEL_30;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
    }
    v28 = v40;
    goto LABEL_30;
  }
LABEL_37:
  v67 = *(_QWORD *)(v0 + 152);
  swift_release();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v67);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  void **p_cache;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void *v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  Class isa;
  uint64_t v44;
  void *v45;
  uint64_t v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  v1 = v0 + 80;
  v2 = *(void **)(v0 + 216);
  v3 = *(void **)(v0 + 208);
  swift_willThrow();

  v4 = *(_QWORD *)(v0 + 224);
  v5 = static Logger.executor;
  p_cache = &OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper.cache;
  while (1)
  {
    if (p_cache[49] != (void *)-1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)v5);
    swift_bridgeObjectRetain();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v0 + 192);
    v11 = *(void **)(v0 + 200);
    if (v10)
    {
      v45 = (void *)v4;
      v13 = p_cache;
      v14 = *(_QWORD *)(v0 + 184);
      v15 = swift_slowAlloc();
      v16 = v5;
      v17 = swift_slowAlloc();
      v46[0] = v17;
      *(_DWORD *)v15 = 136315138;
      swift_bridgeObjectRetain();
      v18 = v14;
      p_cache = v13;
      *(_QWORD *)(v15 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v12, v46);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v8, v9, "[AppShortcuts] Cannot fetch intent state for: App - %s", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      v19 = v17;
      v5 = v16;
      v1 = v0 + 80;
      MEMORY[0x1B5E44758](v19, -1, -1);
      MEMORY[0x1B5E44758](v15, -1, -1);

      v20 = v45;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v20 = (void *)v4;
    }

    v21 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 176);
    if (v22)
    {
      v23 = (v22 - 1) & v22;
      v24 = __clz(__rbit64(v22)) | (v21 << 6);
      v25 = *(_QWORD *)(v0 + 144);
      goto LABEL_23;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v27 = (unint64_t)((1 << *(_BYTE *)(v0 + 232)) + 63) >> 6;
    v25 = *(_QWORD *)(v0 + 144);
    if (v26 >= v27)
      goto LABEL_26;
    v28 = v25 + 64;
    v29 = *(_QWORD *)(v25 + 64 + 8 * v26);
    ++v21;
    if (!v29)
    {
      v21 = v26 + 1;
      if (v26 + 1 >= v27)
        goto LABEL_26;
      v29 = *(_QWORD *)(v28 + 8 * v21);
      if (!v29)
      {
        v21 = v26 + 2;
        if (v26 + 2 >= v27)
          goto LABEL_26;
        v29 = *(_QWORD *)(v28 + 8 * v21);
        if (!v29)
          break;
      }
    }
LABEL_22:
    v23 = (v29 - 1) & v29;
    v24 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_23:
    *(_QWORD *)(v0 + 168) = v21;
    *(_QWORD *)(v0 + 176) = v23;
    v31 = (uint64_t *)(*(_QWORD *)(v25 + 48) + 16 * v24);
    v32 = *v31;
    *(_QWORD *)(v0 + 184) = *v31;
    v33 = v31[1];
    *(_QWORD *)(v0 + 192) = v33;
    v34 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35 = (void *)MEMORY[0x1B5E432E8](v32, v33);
    v36 = objc_msgSend(v34, sel_policyWithBundleIdentifier_, v35);
    *(_QWORD *)(v0 + 200) = v36;

    *(_QWORD *)(v0 + 80) = 0;
    v37 = objc_msgSend(v36, sel_connectionWithError_, v1);
    *(_QWORD *)(v0 + 208) = v37;
    v38 = *(void **)(v0 + 80);
    if (v37)
    {
      v40 = v37;
      v41 = v38;
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 216) = isa;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = specialized AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
      *(_QWORD *)(v0 + 112) = swift_continuation_init();
      *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 88) = 0x40000000;
      *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : NSNumber];
      *(_QWORD *)(v0 + 104) = &block_descriptor_0;
      objc_msgSend(v40, sel_fetchStateForAppIntentIdentifiers_completionHandler_, isa, v1);
      return swift_continuation_await();
    }
    v39 = v38;
    swift_bridgeObjectRelease();
    v4 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  v30 = v26 + 3;
  if (v30 < v27)
  {
    v29 = *(_QWORD *)(v28 + 8 * v30);
    if (!v29)
    {
      while (1)
      {
        v21 = v30 + 1;
        if (__OFADD__(v30, 1))
          break;
        if (v21 >= v27)
          goto LABEL_26;
        v29 = *(_QWORD *)(v28 + 8 * v21);
        ++v30;
        if (v29)
          goto LABEL_22;
      }
LABEL_28:
      __break(1u);
    }
    v21 = v30;
    goto LABEL_22;
  }
LABEL_26:
  v44 = *(_QWORD *)(v0 + 152);
  swift_release();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v44);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

uint64_t dispatch thunk of AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v11(a1, a2, a3, a4);
}

uint64_t type metadata accessor for AppShortcutStateProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for AppShortcutStateProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppShortcutStateProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t WorkItem.name.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t WorkItem.work.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  return a3;
}

_QWORD *AsyncSerialQueue.__allocating_init(queueName:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = MEMORY[0x1E0DEE9D8];
  v6[3] = 0;
  v6[4] = 0;
  v6[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  v6[6] = v7;
  v6[7] = a1;
  v6[8] = a2;
  v8 = (char *)v6 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger;
  v9 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a3, v9);
  return v6;
}

_QWORD *AsyncSerialQueue.init(queueName:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v3[2] = MEMORY[0x1E0DEE9D8];
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  v3[6] = v7;
  v3[7] = a1;
  v3[8] = a2;
  v8 = (char *)v3 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger;
  v9 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a3, v9);
  return v3;
}

void AsyncSerialQueue.add(taskName:work:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  os_unfair_lock_s *v9;

  v9 = (os_unfair_lock_s *)(v4[6] + 16);
  os_unfair_lock_lock(v9);
  closure #1 in AsyncSerialQueue.add(taskName:work:)(v4, a1, a2, a3, a4);
  os_unfair_lock_unlock(v9);
}

uint64_t closure #1 in AsyncSerialQueue.add(taskName:work:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v27[3];
  uint64_t v28;

  v5 = a5;
  v8 = a1[5];
  if (v8)
  {
    v9 = a1[4];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v22 = v9;
      v12 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v27[0] = v23;
      *(_DWORD *)v12 = 136446722;
      swift_bridgeObjectRetain();
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2082;
      v13 = a1[7];
      v14 = a1[8];
      swift_bridgeObjectRetain();
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2080;
      swift_bridgeObjectRetain();
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v8, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v10, v11, "Adding workItem: %{public}s to queue: %{public}s, which is currently executing task: %s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v23, -1, -1);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    v5 = a5;
  }
  v15 = a1 + 2;
  swift_beginAccess();
  v16 = (_QWORD *)a1[2];
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a1[2] = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    *v15 = v16;
  }
  v19 = v16[2];
  v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
    *v15 = v16;
  }
  v16[2] = v19 + 1;
  v20 = &v16[4 * v19];
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = a4;
  v20[7] = v5;
  result = swift_endAccess();
  if (!a1[3])
  {
    a1[3] = AsyncSerialQueue.runAll()();
    return swift_release();
  }
  return result;
}

uint64_t AsyncSerialQueue.runAll()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v4);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = dispatch thunk of Actor.unownedExecutor.getter();
      v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &async function pointer to partial apply for closure #1 in AsyncSerialQueue.runAll();
  *(_QWORD *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  return swift_task_create();
}

uint64_t closure #1 in AsyncSerialQueue.runAll()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in AsyncSerialQueue.runAll()()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(void);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(os_unfair_lock_s **)(v1 + 48);
  *(_QWORD *)(v0 + 56) = v2;
  v3 = v2 + 4;
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.runAll();
  *(_QWORD *)(v4 + 24) = v1;
  os_unfair_lock_lock(v3);
  (*(void (**)(void))(v4 + 16))();
  v5 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 56) + 16);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = v6;
  v9 = *(int **)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 80) = v7;
  *(_QWORD *)(v0 + 88) = v9;
  *(_QWORD *)(v0 + 96) = v8;
  os_unfair_lock_unlock(v5);
  swift_task_dealloc();
  if (!v7)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v12 = (uint64_t (*)(void))((char *)v9 + *v9);
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = closure #1 in AsyncSerialQueue.runAll();
  return v12();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t (*v17)(void);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 56) + 16);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = partial apply for closure #2 in closure #1 in AsyncSerialQueue.runAll();
  *(_QWORD *)(v4 + 24) = v2;
  os_unfair_lock_lock(v3);
  (*(void (**)(void))(v4 + 16))();
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v0 + 56) + 16));
    return swift_task_dealloc();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 48);
    v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 56) + 16);
    os_unfair_lock_unlock(v8);
    outlined consume of WorkItem?(v6, v5);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_release();
    v9 = swift_task_alloc();
    *(_QWORD *)(v9 + 16) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.runAll();
    *(_QWORD *)(v9 + 24) = v7;
    os_unfair_lock_lock(v8);
    (*(void (**)(void))(v9 + 16))();
    v11 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 56) + 16);
    v12 = *(_QWORD *)(v0 + 16);
    v13 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 72) = v12;
    v15 = *(int **)(v0 + 32);
    v14 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 80) = v13;
    *(_QWORD *)(v0 + 88) = v15;
    *(_QWORD *)(v0 + 96) = v14;
    os_unfair_lock_unlock(v11);
    swift_task_dealloc();
    if (v13)
    {
      v17 = (uint64_t (*)(void))((char *)v15 + *v15);
      swift_bridgeObjectRetain();
      swift_retain();
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 104) = v16;
      *v16 = v0;
      v16[1] = closure #1 in AsyncSerialQueue.runAll();
      return v17();
    }
    else
    {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t closure #1 in closure #1 in AsyncSerialQueue.runAll()@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1 + 2;
  swift_beginAccess();
  v5 = (_QWORD *)a1[2];
  if (v5[2])
  {
    v7 = v5[4];
    v6 = v5[5];
    v9 = v5[6];
    v8 = v5[7];
    result = swift_beginAccess();
    if (*(_QWORD *)(*v4 + 16))
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      a1[4] = v7;
      a1[5] = v6;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
      *a2 = v7;
      a2[1] = v6;
      a2[2] = v9;
      a2[3] = v8;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    a1[3] = 0;
    result = swift_release();
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t AsyncSerialQueue.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger;
  v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AsyncSerialQueue.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger;
  v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR14SiriKitRuntime25PluginLookupByIntentTopic_p_Tg5TQ0_;
  return v6(a1);
}

uint64_t destroy for WorkItem()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for WorkItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for WorkItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for WorkItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkItem()
{
  return &type metadata for WorkItem;
}

uint64_t ObjC metadata update function for AsyncSerialQueue()
{
  return type metadata accessor for AsyncSerialQueue();
}

uint64_t type metadata accessor for AsyncSerialQueue()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AsyncSerialQueue;
  if (!type metadata singleton initialization cache for AsyncSerialQueue)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AsyncSerialQueue()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AsyncSerialQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncSerialQueue.__allocating_init(queueName:logger:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of AsyncSerialQueue.add(taskName:work:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of AsyncSerialQueue.wait()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 216) + *(_QWORD *)(*(_QWORD *)v0 + 216));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t sub_1B4CDD938()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.runAll()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[6] = v2;
  return swift_task_switch();
}

uint64_t sub_1B4CDD9C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AsyncSerialQueue.runAll()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return closure #1 in closure #1 in AsyncSerialQueue.runAll()(v1, a1);
}

uint64_t partial apply for closure #2 in closure #1 in AsyncSerialQueue.runAll()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of WorkItem?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t ManagedContinuation.resume(throwing:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v2 = type metadata accessor for Result();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - v4;
  *(uint64_t *)((char *)&v8 - v4) = (uint64_t)a1;
  swift_storeEnumTagMultiPayload();
  v6 = a1;
  ManagedContinuation.resume(with:)((uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a3;
  v12[5] = a4;
  v12[6] = a1;
  v12[7] = a2;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v7[2] = a6;
  v7[3] = a7;
  v10 = (uint64_t (*)(void))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc();
  v7[4] = v8;
  *v8 = v7;
  v8[1] = closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:);
  return v10();
}

uint64_t closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 40);
  v2 = *(void (**)(void *))(v0 + 16);
  v3 = v1;
  v2(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t ManagedContinuation.__allocating_init()()
{
  swift_allocObject();
  return ManagedContinuation.().init()();
}

uint64_t closure #1 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v0 = type metadata accessor for Result();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (uint64_t *)((char *)&v6 - v2);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  v4 = swift_allocError();
  CancellationError.init()();
  *v3 = v4;
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v3);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t partial apply for closure #1 in withCancellableContinuation<A>(body:)()
{
  return closure #1 in withCancellableContinuation<A>(body:)();
}

uint64_t closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *a2;
  return swift_task_switch();
}

uint64_t _unsafeInheritExecutor_withTaskCancellationHandler<A>(handler:operation:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return withTaskCancellationHandler<A>(operation:onCancel:)();
}

uint64_t sub_1B4CDE120()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(int **)(v0 + 32);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(_OWORD *)(v3 + 16) = v4;
  v7 = (uint64_t (*)(void))((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 32) = v5;
  *v5 = v3;
  v5[1] = closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:);
  return v7();
}

uint64_t partial apply for closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 24));
}

uint64_t ManagedContinuation.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v2 = type metadata accessor for CheckedContinuation();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - v5;
  swift_allocObject();
  v7 = ManagedContinuation.().init()();
  v8 = *(_QWORD *)(v2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v6, a1, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v2);
  v9 = v7 + *(_QWORD *)(*(_QWORD *)v7 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v9, v6, v3);
  swift_endAccess();
  return v7;
}

uint64_t specialized ManagedContinuation.updateState(continuation:result:)(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t (*v32)();
  void *v33;
  char v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  id v39;
  void *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char v46;

  v40 = a2;
  v44 = a1;
  v4 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v39 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v39 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x1E0C80A78](v14);
  v41 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v42 = (char *)&v39 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v39 - v20;
  v43 = *(_QWORD *)(*(_QWORD *)v3 + 104);
  objc_msgSend(*(id *)(v3 + v43), sel_lock);
  if (v4 != 255)
  {
    v22 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 96);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v22 + 8) == 255)
    {
      v39 = *(id *)v22;
      v23 = v40;
      *(_QWORD *)v22 = v40;
      *(_BYTE *)(v22 + 8) = v4;
      outlined copy of Result<SABaseCommand?, Error>(v23);
      outlined consume of Result<SABaseCommand?, Error>?(v39, 0xFFu);
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v44, (uint64_t)v13, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v24(v13, 1, v14) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v25(v21, v13, v14);
    v25(v11, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
    v26 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 88);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v11, v26, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
    swift_endAccess();
  }
  v27 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 88);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v27, (uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  if (v24(v8, 1, v14) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v29 = v42;
    v28(v42, v8, v14);
    v30 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 96);
    swift_beginAccess();
    v31 = *(unsigned __int8 *)(v30 + 8);
    if (v31 != 255)
    {
      v33 = *(void **)v30;
      v34 = v31 & 1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, 1, 1, v14);
      swift_beginAccess();
      outlined copy of Result<SABaseCommand?, Error>(v33);
      outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v11, v27, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?);
      swift_endAccess();
      v35 = v41;
      v28(v41, v29, v14);
      v45 = v33;
      v46 = v34;
      v36 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v37 = swift_allocObject();
      v28((char *)(v37 + v36), v35, v14);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v45, v37 + ((v16 + v36 + 7) & 0xFFFFFFFFFFFFFFF8), &demangling cache variable for type metadata for Result<SABaseCommand?, Error>);
      v32 = partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
  }
  v32 = (uint64_t (*)())destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
LABEL_13:
  ((void (*)(id))v32)(objc_msgSend(*(id *)(v3 + v43), sel_unlock));
  return swift_release();
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t (*v32)();
  void *v33;
  char v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  void *v39;
  void *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char v46;

  v40 = a2;
  v44 = a1;
  v4 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v39 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v39 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x1E0C80A78](v14);
  v41 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v42 = (char *)&v39 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v39 - v20;
  v43 = *(_QWORD *)(*(_QWORD *)v3 + 104);
  objc_msgSend(*(id *)(v3 + v43), sel_lock);
  if (v4 != 255)
  {
    v22 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 96);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v22 + 8) == 255)
    {
      v39 = *(void **)v22;
      v23 = v40;
      *(_QWORD *)v22 = v40;
      *(_BYTE *)(v22 + 8) = v4;
      outlined copy of Result<(), Error>(v23, v4 & 1);
      outlined consume of Result<(), Error>?(v39, 0xFFu);
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v44, (uint64_t)v13, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v24(v13, 1, v14) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v25(v21, v13, v14);
    v25(v11, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
    v26 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 88);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v11, v26, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
    swift_endAccess();
  }
  v27 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 88);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v27, (uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  if (v24(v8, 1, v14) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v29 = v42;
    v28(v42, v8, v14);
    v30 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 96);
    swift_beginAccess();
    v31 = *(unsigned __int8 *)(v30 + 8);
    if (v31 != 255)
    {
      v33 = *(void **)v30;
      v34 = v31 & 1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, 1, 1, v14);
      swift_beginAccess();
      outlined copy of Result<(), Error>(v33, v34);
      outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v11, v27, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
      swift_endAccess();
      v35 = v41;
      v28(v41, v29, v14);
      v45 = v33;
      v46 = v34;
      v36 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v37 = swift_allocObject();
      v28((char *)(v37 + v36), v35, v14);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v45, v37 + ((v16 + v36 + 7) & 0xFFFFFFFFFFFFFFF8), &demangling cache variable for type metadata for Result<(), Error>);
      v32 = partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
  }
  v32 = (uint64_t (*)())destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
LABEL_13:
  ((void (*)(id))v32)(objc_msgSend(*(id *)(v3 + v43), sel_unlock));
  return swift_release();
}

uint64_t specialized ManagedContinuation.updateState(continuation:result:)(void (*a1)(unint64_t, char *, uint64_t), void *a2, void *a3, unsigned __int8 a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t (*v35)();
  uint64_t v36;
  void *v37;
  char v38;
  char *v39;
  char *v40;
  void (*v41)(unint64_t, char *, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(unint64_t, char *, uint64_t);
  _QWORD v54[2];
  char v55;

  v48 = a2;
  v49 = a3;
  v53 = a1;
  v5 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v45 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v45 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x1E0C80A78](v15);
  v50 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v51 = (char *)&v45 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v45 - v21;
  v52 = *(_QWORD *)(*(_QWORD *)v4 + 104);
  objc_msgSend(*(id *)(v4 + v52), sel_lock);
  if (v5 != 255)
  {
    v23 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 96);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v23 + 16) == 255)
    {
      v24 = *(void **)v23;
      v46 = *(_QWORD *)(v23 + 8);
      v47 = v24;
      v25 = v48;
      v26 = (uint64_t)v49;
      *(_QWORD *)v23 = v48;
      *(_QWORD *)(v23 + 8) = v26;
      *(_BYTE *)(v23 + 16) = v5;
      outlined copy of Result<RemoteConversation?, Error>(v25, v26, v5 & 1);
      outlined consume of Result<RemoteConversation?, Error>?(v47, v46, 0xFFu);
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v53, (uint64_t)v14, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v27(v14, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v28(v22, v14, v15);
    v28(v12, v22, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
    v29 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 88);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v12, v29, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
    swift_endAccess();
  }
  v30 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 88);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v30, (uint64_t)v9, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  if (v27(v9, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  }
  else
  {
    v31 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v32 = v51;
    v31(v51, v9, v15);
    v33 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 96);
    swift_beginAccess();
    v34 = *(unsigned __int8 *)(v33 + 16);
    if (v34 != 255)
    {
      v53 = (void (*)(unint64_t, char *, uint64_t))v31;
      v36 = *(_QWORD *)(v33 + 8);
      v49 = *(void **)v33;
      v37 = v49;
      v38 = v34 & 1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, 1, 1, v15);
      swift_beginAccess();
      outlined copy of Result<RemoteConversation?, Error>(v37, v36, v38);
      outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v12, v30, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
      swift_endAccess();
      v39 = v50;
      v40 = v32;
      v41 = v53;
      v53((unint64_t)v50, v40, v15);
      v54[0] = v49;
      v54[1] = v36;
      v55 = v38;
      v42 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      v43 = swift_allocObject();
      v41(v43 + v42, v39, v15);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v54, v43 + ((v17 + v42 + 7) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)&demangling cache variable for type metadata for Result<RemoteConversation?, Error>);
      v35 = partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v15);
  }
  v35 = (uint64_t (*)())destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
LABEL_13:
  ((void (*)(id))v35)(objc_msgSend(*(id *)(v4 + v52), sel_unlock));
  return swift_release();
}

uint64_t ManagedContinuation<A>.resume()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v2, 0, 0);
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
}

ValueMetadata *type metadata accessor for AsyncTaskUtils()
{
  return &type metadata for AsyncTaskUtils;
}

uint64_t type metadata completion function for ManagedContinuation()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Result();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ManagedContinuation()
{
  return swift_lookUpClassMethod();
}

uint64_t specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v5;

  v2 = *(void **)a2;
  if (*(_BYTE *)(a2 + 8) == 1)
  {
    v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    v5 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

{
  id v2;

  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    v2 = *(id *)a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

{
  id v2;

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v2 = *(id *)a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1B4CDF2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  outlined consume of Result<RemoteConversation?, Error>(*(id *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_BYTE *)(v0 + v4 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(v0 + v2, v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
}

{
  return partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(&demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(unint64_t, unint64_t))specialized closure #2 in ManagedContinuation.updateState(continuation:result:));
}

{
  return partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>, (uint64_t (*)(unint64_t, unint64_t))specialized closure #2 in ManagedContinuation.updateState(continuation:result:));
}

uint64_t sub_1B4CDF370()
{
  return objectdestroy_11Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>, (void (*)(_QWORD, _QWORD))outlined consume of Result<(), Error>);
}

uint64_t sub_1B4CDF398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v2 = type metadata accessor for CheckedContinuation();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for Result() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  if (swift_getEnumCaseMultiPayload() == 1)

  else
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v7, v1);
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CancellationError and conformance CancellationError;
  if (!lazy protocol witness table cache variable for type CancellationError and conformance CancellationError)
  {
    v1 = type metadata accessor for CancellationError();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DF05E8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError);
  }
  return result;
}

uint64_t sub_1B4CDF4F8()
{
  return objectdestroy_11Tm(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>, (void (*)(_QWORD, _QWORD))outlined consume of Result<SABaseCommand?, Error>);
}

uint64_t partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(uint64_t *a1, uint64_t (*a2)(unint64_t, unint64_t))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return a2(v2 + v4, v2 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
}

void outlined consume of Result<SABaseCommand?, Error>?(id a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<SABaseCommand?, Error>(a1);
}

const char *AutoBugCapture.domain.unsafeMutableAddressor()
{
  return "SiriAssistant";
}

uint64_t static AutoBugCapture.domain.getter()
{
  return 0x6973734169726953;
}

void *AutoBugCapture.sessionDuration.unsafeMutableAddressor()
{
  return &static AutoBugCapture.sessionDuration;
}

double static AutoBugCapture.sessionDuration.getter()
{
  return 30.0;
}

uint64_t static AutoBugCapture.ErrorType.sirikitRuntime.getter()
{
  return 0x5274696B69726973;
}

uint64_t static AutoBugCapture.ErrorSubType.nl.getter()
{
  return 27758;
}

uint64_t static AutoBugCapture.ErrorContext.camGibberish.getter()
{
  return 0x65626269476D6163;
}

uint64_t static AutoBugCapture.generateSnapshot(type:subType:context:)()
{
  uint64_t result;

  result = AFIsInternalInstall();
  if ((_DWORD)result)
  {
    type metadata accessor for AutoBugCaptureManager();
    swift_allocObject();
    AutoBugCaptureManager.init(domain:sessionDuration:)();
    dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)();
    return swift_release();
  }
  return result;
}

void closure #1 in static AutoBugCapture.generateSnapshot(type:subType:context:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.instrumentation);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "AutoBugCapture#generateSnapshot ABC result: %{BOOL}d", v2, 8u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

ValueMetadata *type metadata accessor for AutoBugCapture()
{
  return &type metadata for AutoBugCapture;
}

ValueMetadata *type metadata accessor for AutoBugCapture.ErrorType()
{
  return &type metadata for AutoBugCapture.ErrorType;
}

ValueMetadata *type metadata accessor for AutoBugCapture.ErrorSubType()
{
  return &type metadata for AutoBugCapture.ErrorSubType;
}

ValueMetadata *type metadata accessor for AutoBugCapture.ErrorContext()
{
  return &type metadata for AutoBugCapture.ErrorContext;
}

uint64_t lazy protocol witness table accessor for type BargeInMode and conformance BargeInMode(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for BargeInMode();
    result = MEMORY[0x1B5E44668](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t BargeInContext.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  _QWORD v16[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for BargeInMode();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v7._object = (void *)0x80000001B4EF7570;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  BargeInContext.mode.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v8._countAndFlagsBits = 0x61767265746E6920;
  v8._object = (void *)0xEB00000000203A6CLL;
  String.append(_:)(v8);
  BargeInContext.approximatePreviousTTSInterval.getter();
  v9 = type metadata accessor for DateInterval();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v2, 1, v9) == 1)
  {
    outlined destroy of DateInterval?((uint64_t)v2);
    v11 = (void *)0xE500000000000000;
    v12 = 0x3E6C696E3CLL;
  }
  else
  {
    v12 = MEMORY[0x1B5E3E350]();
    v11 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v2, v9);
  }
  v14._countAndFlagsBits = v12;
  v14._object = v11;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return v16[0];
}

uint64_t outlined destroy of DateInterval?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x1E0C80A78](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v24 - v16;
  v18 = dispatch thunk of Collection.count.getter();
  if (!v18)
    return static Array._allocateUninitialized(_:)();
  v19 = v18;
  v25 = v15;
  v39 = Array.init()();
  v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  v36 = v17;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t ConversationRequestProcessorBase.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationRequestProcessorBase.messagePublisher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 24, a1);
}

uint64_t ConversationRequestProcessorBase.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationRequestProcessorBase.rootRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationRequestProcessorBase.assistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationRequestProcessorBase.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], a1);
}

_QWORD *ConversationRequestProcessorBase.__allocating_init(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 *a10, uint64_t a11)
{
  _QWORD *v18;
  char *v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  v18 = (_QWORD *)swift_allocObject();
  v18[12] = a1;
  v18[13] = a2;
  v19 = (char *)v18 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v20 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a3, v20);
  v18[8] = a4;
  v18[9] = a5;
  v18[10] = a6;
  v18[11] = a7;
  outlined init with take of ReferenceResolutionClientProtocol(a10, (uint64_t)(v18 + 3));
  v18[2] = a11;
  return v18;
}

_QWORD *ConversationRequestProcessorBase.init(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 *a10, uint64_t a11)
{
  _QWORD *v11;
  char *v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  v11[12] = a1;
  v11[13] = a2;
  v19 = (char *)v11 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v20 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a3, v20);
  v11[8] = a4;
  v11[9] = a5;
  v11[10] = a6;
  v11[11] = a7;
  outlined init with take of ReferenceResolutionClientProtocol(a10, (uint64_t)(v11 + 3));
  v11[2] = a11;
  return v11;
}

uint64_t ConversationRequestProcessorBase.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ConversationRequestProcessorBase.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t (*ConversationRequestAwareBridgeBase.currentRequestProcessor.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ConversationRequestAwareBridgeBase.candidateRequestProcessors.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + direct field offset for ConversationRequestAwareBridgeBase.candidateRequestProcessors);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t ConversationRequestAwareBridgeBase.requestMessagesHandledByBridgeBase.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestAwareBridgeBase.previousProcessorTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout, (uint64_t (*)(_QWORD))MEMORY[0x1E0DEF4A8], a1);
}

uint64_t ConversationRequestAwareBridgeBase.__allocating_init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14;

  swift_allocObject();
  v14 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease();
  return v14;
}

uint64_t ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;

  v7 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t static ConversationRequestAwareBridgeBase.readPreviousProcessorTimeoutFromDefault()@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v3 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4EF7830);
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (!v4)
    goto LABEL_5;
  v5 = (void *)MEMORY[0x1B5E432E8](0xD000000000000023, 0x80000001B4EF7850);
  v6 = objc_msgSend(v4, sel_stringForKey_, v5);

  if (!v6)
  {

LABEL_5:
    v15 = type metadata accessor for DispatchTimeInterval();
    v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v13 = a1;
    v14 = 1;
    return v12(v13, v14, 1, v15);
  }

  v7 = (void *)MEMORY[0x1B5E432E8](0xD000000000000023, 0x80000001B4EF7850);
  v8 = objc_msgSend(v4, sel_integerForKey_, v7);

  *a1 = v8;
  v9 = *MEMORY[0x1E0DEF490];
  v10 = type metadata accessor for DispatchTimeInterval();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 104))(a1, v9, v10);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v13 = a1;
  v14 = 0;
  v15 = v10;
  return v12(v13, v14, 1, v15);
}

_QWORD *ConversationMessageDispatchingBridgeBase.init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v11 = *(_QWORD *)(*v6 + 80);
  type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(255, v11, (uint64_t)a3, a4);
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v6[15] = Dictionary.init(dictionaryLiteral:)();
  static Array._allocateUninitialized(_:)();
  v6[16] = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase(255, v11, v12, v13);
  type metadata accessor for Dictionary();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v6[17] = Dictionary.init(dictionaryLiteral:)();
  v6[2] = a1;
  v6[3] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, (uint64_t)(v6 + 4));
  v6[9] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v6 + 10));
  v14 = (char *)v6 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  v15 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a6, v15);
  return v6;
}

uint64_t ConversationRequestAwareBridgeBase.registerMessages()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t (*(*)(uint64_t))(uint64_t), uint64_t, uint64_t);
  uint64_t started;
  uint64_t v5;
  void (*v6)(uint64_t (*(*)(uint64_t))(uint64_t), uint64_t, uint64_t);
  uint64_t v7;

  v1 = *(_QWORD **)v0;
  if (*(_BYTE *)(v0
                + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) == 1)
  {
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v1[39];
    *(_QWORD *)(v2 + 24) = v1[40];
    v3 = (void (*)(uint64_t (*(*)(uint64_t))(uint64_t), uint64_t, uint64_t))v1[58];
    started = type metadata accessor for StartRequestMessageBase();
    v3(partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessages(), v2, started);
    swift_release();
  }
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v1[39];
  *(_QWORD *)(v5 + 24) = v1[40];
  v6 = *(void (**)(uint64_t (*(*)(uint64_t))(uint64_t), uint64_t, uint64_t))(*(_QWORD *)v0 + 464);
  v7 = type metadata accessor for EndRequestMessageBase();
  v6(partial apply for closure #2 in ConversationRequestAwareBridgeBase.registerMessages(), v5, v7);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void (*v9)(uint64_t);

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  v9 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 136);
  swift_retain();
  v9(a1);
  return swift_release();
}

uint64_t closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void (*v9)(uint64_t);

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  v9 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 144);
  swift_retain();
  v9(a1);
  return swift_release();
}

void ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;

  type metadata accessor for RequestMessageBase();
  v7 = swift_dynamicCastMetatype();
  if (v7)
  {
    v8 = v7;
    v9 = *(os_unfair_lock_s **)(v3
                              + direct field offset for ConversationRequestAwareBridgeBase.requestMessagesHandledByBridgeBase);
    v10 = v9 + 4;
    v11 = v9 + 6;
    os_unfair_lock_lock(v9 + 6);
    closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(v10, v8);
    os_unfair_lock_unlock(v11);
  }
  ConversationMessageDispatchingBridgeBase.registerMessageHandler<A>(_:)(a1, a2, a3);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *);
  void (*v43)(uint64_t *, _QWORD);
  _QWORD v44[2];
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  uint64_t v52[7];

  v4 = v3;
  v47 = a1;
  v48 = a2;
  v6 = *v3;
  v7 = type metadata accessor for Logger();
  v49 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v46 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52[0] = a3;
  swift_getMetatypeMetadata();
  v12 = String.init<A>(describing:)();
  v14 = v13;
  v15 = *(uint64_t (**)(uint64_t))(*v3 + 176);
  v16 = swift_bridgeObjectRetain();
  v17 = v15(v16);
  v50 = v12;
  v52[0] = v12;
  v52[1] = v14;
  v18 = v6;
  v19 = *(_QWORD *)(v6 + 312);
  v22 = type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(0, v19, v20, v21);
  MEMORY[0x1B5E4327C](v51, v52, v17, MEMORY[0x1E0DEA968], v22, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v51[0];
  swift_release();
  if (v23)
  {
    swift_bridgeObjectRetain();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v52[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain();
      v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v14, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v24, v25, "Message type: %s is already registered. Ignoring this request", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v27, -1, -1);
      MEMORY[0x1B5E44758](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
  else
  {
    v28 = v11;
    v44[1] = v22;
    v45 = v7;
    type metadata accessor for StartRequestMessageBase();
    v29 = swift_dynamicCastMetatype();
    v30 = (uint64_t)v46;
    v31 = v18;
    v32 = a3;
    v33 = v49;
    v34 = v50;
    if (v29)
    {
      v35 = type metadata accessor for TaskPriority();
      v36 = (uint64_t)v28;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v28, 1, 1, v35);
      v37 = one-time initialization token for shared;
      swift_retain();
      if (v37 != -1)
        swift_once();
      swift_beginAccess();
      v38 = static MessageBusActor.shared;
      v39 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
      v40 = (_QWORD *)swift_allocObject();
      v40[2] = v38;
      v40[3] = v39;
      v40[4] = v32;
      v40[5] = v4;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v36, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:), (uint64_t)v40);
      swift_release();
      v33 = v49;
      v34 = v50;
    }
    type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandler(0, v19, *(_QWORD *)(v31 + 320), v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v30, (uint64_t)v4 + direct field offset for ConversationMessageDispatchingBridgeBase.logger, v45);
    v41 = ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(v47, v48, v30);
    v52[5] = v14;
    v52[6] = v41;
    v52[4] = v34;
    v42 = *(uint64_t (**)(uint64_t *))(*v4 + 192);
    swift_retain();
    v43 = (void (*)(uint64_t *, _QWORD))v42(v52);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v43(v52, 0);
  }
}

uint64_t closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v4 = *a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a2;
  *a1 = v4;
  return result;
}

void ConversationMessageDispatchingBridgeBase.registerMessageHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *);
  void (*v28)(uint64_t *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[4];
  _QWORD v33[3];

  v4 = v3;
  v30 = a1;
  v31 = a2;
  v6 = *v3;
  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[0] = a3;
  swift_getMetatypeMetadata();
  v11 = String.init<A>(describing:)();
  v13 = v12;
  v14 = *(uint64_t (**)(uint64_t))(*v3 + 176);
  v15 = swift_bridgeObjectRetain();
  v16 = v14(v15);
  v32[0] = v11;
  v32[1] = v13;
  v17 = *(_QWORD *)(v6 + 80);
  v20 = type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(0, v17, v18, v19);
  MEMORY[0x1B5E4327C](v33, v32, v16, MEMORY[0x1E0DEA968], v20, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v33[0];
  swift_release();
  if (v21)
  {
    swift_bridgeObjectRetain();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v32[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain();
      v33[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Message type: %s is already registered so ignore this request", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v25, -1, -1);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
  else
  {
    type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandler(0, v17, v17, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, (uint64_t)v4 + direct field offset for ConversationMessageDispatchingBridgeBase.logger, v7);
    v26 = ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(v30, v31, (uint64_t)v10);
    v33[1] = v13;
    v33[2] = v26;
    v33[0] = v11;
    v27 = *(uint64_t (**)(uint64_t *))(*v4 + 192);
    swift_retain();
    v28 = (void (*)(uint64_t *, _QWORD))v27(v32);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v28(v32, 0);
  }
}

uint64_t closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(v1 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) & 1) == 0)
    *(_BYTE *)(v1 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(a1, a2, a3, &direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.handleMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)v2 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  swift_retain_n();
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v38 = v5;
  v39 = v4;
  v37 = v7;
  if (v12)
  {
    v13 = swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v41 = v35;
    *(_DWORD *)v13 = 136315394;
    v36 = (uint64_t)v8;
    v15 = v2[2];
    v16 = v2[3];
    swift_bridgeObjectRetain();
    ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2112;
    ObjectType = (uint64_t)v9;
    v17 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v9;

    _os_log_impl(&dword_1B4BE6000, v10, v11, "Bridge \"%s\" received message: %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v14, -1, -1);
    v18 = v35;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);
  }
  else
  {

    swift_release_n();
  }

  v19 = (*(uint64_t (**)(id))(*v2 + 264))(v9);
  if (((*(uint64_t (**)(void))(*(_QWORD *)v19 + 104))() & 1) != 0)
  {
    v20 = v9;
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      v24 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      v41 = v36;
      *(_DWORD *)v24 = 136315394;
      LODWORD(v35) = v23;
      ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageBase.Type);
      v25 = String.init<A>(describing:)();
      ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      v27 = v37;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v28 = v39;
      v29 = dispatch thunk of CustomStringConvertible.description.getter();
      v31 = v30;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v28);
      ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v21, (os_log_type_t)v35, "handleMessage got message type %s with message id: %s which is not registered with the bridge", (uint8_t *)v24, 0x16u);
      v32 = v36;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v32, -1, -1);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }
    else
    {

    }
  }
  else
  {
    (*(void (**)(_QWORD *, id))(*(_QWORD *)v19 + 88))(v2, v9);
  }
  return swift_release();
}

uint64_t ConversationRequestAwareBridgeBase.createRequestProcessor(_:_:_:_:)()
{
  NSObject *v0;
  os_log_type_t v1;
  uint8_t *v2;

  v0 = Logger.logObject.getter();
  v1 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v0, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, v0, v1, "createRequestProcessor() method from base class called. Please implement this method in your RequestProcessorBase implementation", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

  return 0;
}

uint64_t ConversationRequestAwareBridgeBase.tryToDipatchCommandToProcessor<A>(_:executionContextInfo:reply:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(void *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;

  v11 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 376))();
  if (!v11)
  {
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v55 = v25;
      *(_DWORD *)v24 = 136315138;
      v26 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v22, v23, "There is no request processor to serve command: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v25, -1, -1);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

    return 0;
  }
  v12 = v11;
  v53 = a5;
  v54 = a2;
  v14 = *(_QWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 88);
  swift_bridgeObjectRetain();
  v15 = objc_msgSend(a1, sel_refId);
  if (!v15)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    v28 = a1;
    swift_retain_n();
    v29 = v28;
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      v55 = v33;
      *(_DWORD *)v32 = 136315650;
      v34 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      v36 = objc_msgSend(v29, sel_refId);
      if (v36)
      {
        v37 = v36;
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v40 = v39;

      }
      else
      {
        v40 = 0xE300000000000000;
        v38 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 22) = 2080;
      v49 = *(_QWORD *)(v12 + 80);
      v50 = *(_QWORD *)(v12 + 88);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v30, v31, "Received %s with refId: %s whereas current rootRequestId is: %s .. ignoring this command", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v33, -1, -1);
      MEMORY[0x1B5E44758](v32, -1, -1);

      swift_release();
    }
    else
    {

      swift_release_n();
    }
    return 0;
  }
  v16 = v15;
  v51 = a3;
  v52 = a4;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  if (v14 != v17 || v13 != v19)
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      goto LABEL_17;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease_n();
LABEL_17:
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    v44 = swift_slowAlloc();
    v55 = v44;
    *(_DWORD *)v43 = 136315138;
    v45 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v41, v42, "Dispatching %s", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v44, -1, -1);
    MEMORY[0x1B5E44758](v43, -1, -1);
  }

  v47 = (void (*)(void *, uint64_t, uint64_t, uint64_t))v53(v12);
  v47(a1, v54, v51, v52);
  swift_release();
  swift_release();
  return 1;
}

void ConversationRequestAwareBridgeBase.handleStartRequestInternal(_:)(void *a1, NSObject *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t *, _QWORD);
  void (*v51)(uint64_t);
  uint64_t v52;
  void (*v53)(void *, uint64_t);
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t ObjectType;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65[4];
  uint64_t v66;

  v3 = v2;
  v64 = a2;
  v5 = *v2;
  v6 = type metadata accessor for UUID();
  v62 = *(_QWORD *)(v6 - 8);
  v63 = v6;
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType();
  v9 = RequestMessageBase.requestId.getter();
  v11 = v10;
  v60 = MessageBase.assistantId.getter();
  v13 = v12;
  v14 = (*(uint64_t (**)(void))(*v2 + 376))();
  if (!v14)
    goto LABEL_7;
  v16 = *(_QWORD *)(v14 + 64);
  v15 = *(_QWORD *)(v14 + 72);
  swift_bridgeObjectRetain();
  swift_release();
  if (v16 == v9 && v15 == v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v32 = a1;
    swift_bridgeObjectRetain();
    v64 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v33))
    {
      v34 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v65[0] = v35;
      *(_DWORD *)v34 = 136315650;
      swift_bridgeObjectRetain();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12) = 2080;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v36 = v63;
      v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v8, v36);
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 22) = 2080;
      swift_getObjectType();
      v40 = _typeName(_:qualified:)();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v64, v33, "Got a duplicate start request message to requestId: %s messageId: %s type: %s ignoring the new start", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      MEMORY[0x1B5E44758](v34, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    return;
  }
LABEL_7:
  v19 = RequestMessageBase.requestId.getter();
  v21 = v20;
  v22 = (*(uint64_t (**)(void))(*v3 + 400))();
  v65[0] = v19;
  v65[1] = v21;
  v59 = *(_QWORD *)(v5 + 320);
  MEMORY[0x1B5E4327C](&v66, v65, v22, MEMORY[0x1E0DEA968]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v66;
  if (v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    v25 = a1;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      *(_DWORD *)v28 = 136315138;
      v64 = (v28 + 4);
      v65[0] = v29;
      v30 = RequestMessageBase.requestId.getter();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v26, v27, "Got StartRequest for a request for which we've previously seen speech candidates. Will promote candidate request processor to active for requestId=%s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v29, -1, -1);
      MEMORY[0x1B5E44758](v28, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v58 = swift_slowAlloc();
      v65[0] = v58;
      *(_DWORD *)v45 = 136315138;
      v57[1] = v45 + 4;
      v46 = v45;
      swift_bridgeObjectRetain();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v43, v44, "Creating new RequestProcessor to handle StartRequest<requestId: %s>", v45, 0xCu);
      v47 = v58;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v47, -1, -1);
      MEMORY[0x1B5E44758](v46, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    SessionMessageBase.sessionId.getter();
    v48 = ((uint64_t (*)(uint64_t))v64[2].isa)(ObjectType);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, unint64_t, uint64_t, uint64_t))(*v3 + 472))(v60, v13, v8, v9, v11, v48, v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v8, v63);
  }
  v50 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*v3 + 416))(v65);
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  v50(v65, 0);
  v51 = *(void (**)(uint64_t))(*v3 + 384);
  v52 = swift_retain();
  v51(v52);
  if (v23)
  {
    v53 = *(void (**)(void *, uint64_t))(*v3 + 496);
    swift_retain();
    v53(a1, v23);
    swift_release_n();
  }
  else
  {
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_1B4BE6000, v54, v55, "Could not create an instance of RequestProcessor", v56, 2u);
      MEMORY[0x1B5E44758](v56, -1, -1);
    }

  }
}

void ConversationRequestAwareBridgeBase.__allocating_init(_:_:_:_:_:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConversationRequestAwareBridgeBase.init(_:_:_:_:_:)()
{
  specialized ConversationRequestAwareBridgeBase.init(_:_:_:_:_:)();
}

uint64_t ConversationRequestAwareBridgeBase.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v1 = v0 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout;
  v2 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t ConversationRequestAwareBridgeBase.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  ConversationMessageDispatchingBridgeBase.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v1 = v0 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout;
  v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ConversationRequestAwareBridgeBase.__deallocating_deinit()
{
  return ConversationRequestAwareBridgeBase.__deallocating_deinit((void (*)(void))ConversationRequestAwareBridgeBase.deinit);
}

uint64_t ConversationMessageDispatchingBridgeBase.methodDispatcher.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationMessageDispatchingBridgeBase.methodDispatcher.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationMessageDispatchingBridgeBase.registeredMethod.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ConversationMessageDispatchingBridgeBase.registeredMethod.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationMessageDispatchingBridgeBase.registeredMethod.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationMessageDispatchingBridgeBase.commandsDispatcher.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 136) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationMessageDispatchingBridgeBase.commandsDispatcher.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationMessageDispatchingBridgeBase.messageTypesForSubscription()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v1 = *v0;
  v2 = (*(uint64_t (**)(void))(*v0 + 176))();
  v3 = *(_QWORD *)(v1 + 80);
  type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(0, v3, v4, v5);
  v12[5] = v2;
  v12[2] = v3;
  v6 = type metadata accessor for Dictionary.Values();
  v7 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageBase.Type);
  v8 = MEMORY[0x1B5E44668](MEMORY[0x1E0DE9FA0], v6);
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ConversationMessageDispatchingBridgeBase.messageTypesForSubscription(), (uint64_t)v12, v6, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t ConversationMessageDispatchingBridgeBase.aceCommandsGroups()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  (*(void (**)(void))(*v0 + 200))();
  type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase(255, *(_QWORD *)(v1 + 80), v2, v3);
  type metadata accessor for Dictionary();
  v4 = type metadata accessor for Dictionary.Keys();
  MEMORY[0x1B5E44668](MEMORY[0x1E0DE9ED0], v4);
  return Array.init<A>(_:)();
}

uint64_t ConversationMessageDispatchingBridgeBase.aceCommands(forGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;

  v5 = *v2;
  v6 = *(uint64_t (**)(uint64_t))(*v2 + 200);
  v7 = swift_bridgeObjectRetain();
  v8 = v6(v7);
  v17[0] = a1;
  v17[1] = a2;
  type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase(255, *(_QWORD *)(v5 + 80), v9, v10);
  v11 = MEMORY[0x1E0DEA968];
  v12 = MEMORY[0x1E0DEA978];
  v13 = type metadata accessor for Dictionary();
  MEMORY[0x1B5E4327C](&v18, v17, v8, v11, v13, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v18;
  if (!v18)
  {
    swift_getTupleTypeMetadata2();
    static Array._allocateUninitialized(_:)();
    v14 = Dictionary.init(dictionaryLiteral:)();
  }
  v17[0] = v14;
  v15 = type metadata accessor for Dictionary.Keys();
  MEMORY[0x1B5E44668](MEMORY[0x1E0DE9ED0], v15);
  return Array.init<A>(_:)();
}

uint64_t ConversationMessageDispatchingBridgeBase.findRegisterMethod(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[2];
  uint64_t v28;

  v2 = v1;
  v4 = *v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v27[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v27[-1] - v9;
  v11 = type metadata accessor for Mirror();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v27[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Mirror?(a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Mirror?);
    type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(0, *(_QWORD *)(v4 + 80), v15, v16);
    return swift_allocObject();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v27[0] = Mirror.subjectType.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    v18 = String.init<A>(describing:)();
    v20 = v19;
    v21 = (*(uint64_t (**)(void))(*v2 + 176))();
    v27[0] = v18;
    v27[1] = v20;
    v24 = type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(0, *(_QWORD *)(v4 + 80), v22, v23);
    MEMORY[0x1B5E4327C](&v28, v27, v21, MEMORY[0x1E0DEA968], v24, MEMORY[0x1E0DEA978]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v28;
    if (!v28)
    {
      Mirror.superclassMirror.getter();
      v17 = ConversationMessageDispatchingBridgeBase.findRegisterMethod(_:)(v8);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Mirror?);
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v17;
}

void ConversationMessageDispatchingBridgeBase.registerCommandHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(uint64_t *);
  void (*v52)(uint64_t *, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD v65[4];
  uint64_t v66;

  v4 = v3;
  v8 = *(_QWORD *)v3;
  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v13 = objc_msgSend(v62, sel_groupIdentifier);
  if (v13)
  {
    v14 = v13;
    v61 = v10;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    v18 = objc_msgSend(v62, sel_encodedClassName);
    if (v18)
    {
      v19 = v18;
      v56 = v9;
      v57 = a1;
      v58 = a2;
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

      v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200);
      v23 = swift_bridgeObjectRetain();
      v24 = v22(v23);
      v60 = v15;
      v63 = v15;
      v64 = v17;
      v54 = *(_QWORD *)(v8 + 80);
      v27 = type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase(255, v54, v25, v26);
      v28 = MEMORY[0x1E0DEA968];
      v29 = MEMORY[0x1E0DEA978];
      v30 = type metadata accessor for Dictionary();
      MEMORY[0x1B5E4327C](v65, &v63, v24, v28, v30, v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = v65[0];
      v55 = v30;
      if (!v65[0])
      {
        swift_getTupleTypeMetadata2();
        static Array._allocateUninitialized(_:)();
        v31 = Dictionary.init(dictionaryLiteral:)();
      }
      v33 = v59;
      v32 = v60;
      v66 = v31;
      v63 = v59;
      v64 = v21;
      swift_bridgeObjectRetain();
      MEMORY[0x1B5E4327C](v65, &v63, v31, MEMORY[0x1E0DEA968], v27, MEMORY[0x1E0DEA978]);
      swift_bridgeObjectRelease();
      v34 = v65[0];
      swift_release();
      v35 = &unk_1ED515000;
      if (v34)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v36 = Logger.logObject.getter();
        v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc();
          v53 = swift_slowAlloc();
          v63 = v53;
          *(_DWORD *)v38 = 136315394;
          swift_bridgeObjectRetain();
          v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v17, &v63);
          v39 = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v38 + 12) = 2080;
          swift_bridgeObjectRetain();
          v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v21, &v63);
          v33 = v59;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B4BE6000, v36, v37, "There is already a method register to handle command: %s:%s, replacing", (uint8_t *)v38, 0x16u);
          v40 = v53;
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v40, -1, -1);
          v41 = v38;
          v35 = (_QWORD *)&unk_1ED515000;
          MEMORY[0x1B5E44758](v41, -1, -1);

          v32 = v60;
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

        }
      }
      type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandler(0, v54, v54, a3);
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v12, &v4[v35[270]], v56);
      v65[3] = ConversationMessageDispatchingBridgeBase.CommandHandler.__allocating_init(_:_:)(v57, v58, (uint64_t)v12);
      v63 = v33;
      v64 = v21;
      swift_retain();
      Dictionary.updateValue(_:forKey:)();
      swift_bridgeObjectRelease();
      swift_release();
      v65[1] = v17;
      v65[2] = v66;
      v65[0] = v32;
      v51 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v4 + 216);
      swift_bridgeObjectRetain();
      v52 = (void (*)(uint64_t *, _QWORD))v51(&v63);
      type metadata accessor for Dictionary();
      Dictionary.updateValue(_:forKey:)();
      swift_bridgeObjectRelease();
      v52(&v63, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      v45 = swift_slowAlloc();
      v63 = v45;
      *(_DWORD *)v44 = 136315138;
      v65[0] = a3;
      swift_getMetatypeMetadata();
      v49 = String.init<A>(describing:)();
      v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v48 = "Cannot get command encode name %s";
      goto LABEL_12;
    }
LABEL_13:

    return;
  }
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v42, v43))
    goto LABEL_13;
  v44 = (uint8_t *)swift_slowAlloc();
  v45 = swift_slowAlloc();
  v63 = v45;
  *(_DWORD *)v44 = 136315138;
  v65[0] = a3;
  swift_getMetatypeMetadata();
  v46 = String.init<A>(describing:)();
  v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v63);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v48 = "Cannot get command group identifier %s";
LABEL_12:
  _os_log_impl(&dword_1B4BE6000, v42, v43, v48, v44, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v45, -1, -1);
  MEMORY[0x1B5E44758](v44, -1, -1);

LABEL_16:
}

void ConversationMessageDispatchingBridgeBase.defaultHandle(_:executionContextInfo:reply:)(void *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD);
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v5 = v4;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v55 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v13 = a1;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v52 = v10;
    v17 = v16;
    v50 = (_QWORD *)swift_slowAlloc();
    v51 = swift_slowAlloc();
    v58 = v51;
    *(_DWORD *)v17 = 136315394;
    v53 = v9;
    v54 = a4;
    v19 = *(_QWORD *)(v5 + 16);
    v18 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain();
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2112;
    v56 = (uint64_t)v13;
    v20 = v5;
    v21 = a3;
    v22 = v13;
    v9 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v23 = v50;
    *v50 = v13;

    a3 = v21;
    v5 = v20;
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Bridge:%s received %@", (uint8_t *)v17, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v23, -1, -1);
    v24 = v51;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v24, -1, -1);
    v25 = v17;
    v10 = v52;
    MEMORY[0x1B5E44758](v25, -1, -1);

    if (!a3)
      return;
  }
  else
  {

    swift_release_n();
    if (!a3)
      return;
  }
  v26 = objc_allocWithZone(MEMORY[0x1E0D87FF0]);
  swift_retain();
  v27 = objc_msgSend(v26, sel_init);
  v28 = v55;
  UUID.init()();
  v29 = UUID.uuidString.getter();
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
  v32 = (void *)MEMORY[0x1B5E432E8](v29, v31);
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setAceId_, v32);

  v33 = v27;
  v34 = objc_msgSend(v13, sel_aceId);
  objc_msgSend(v33, sel_setRefId_, v34);

  v58 = 0;
  v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v58 = 0x20656764697242;
  v59 = 0xE700000000000000;
  v35 = *(_QWORD *)(v5 + 16);
  v36 = *(void **)(v5 + 24);
  swift_bridgeObjectRetain();
  v37._countAndFlagsBits = v35;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._object = (void *)0x80000001B4EF7590;
  v38._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v38);
  v39 = objc_msgSend(v13, sel_encodedClassName);
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0;
  }
  v44 = (void *)objc_opt_self();
  v56 = v41;
  v57 = v43;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v45._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46 = (void *)MEMORY[0x1B5E432E8](v58, v59);
  swift_bridgeObjectRelease();
  v47 = objc_msgSend(v44, sel_errorWithCode_description_, 2000, v46);

  v48 = v33;
  v49 = v47;
  a3(v33, v47);

  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)a3);
}

uint64_t ConversationMessageDispatchingBridgeBase.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationMessageDispatchingBridgeBase.messagePublisher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 32, a1);
}

uint64_t ConversationMessageDispatchingBridgeBase.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationMessageDispatchingBridgeBase.conversationSessionsManaging.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 80, a1);
}

uint64_t ConversationMessageDispatchingBridgeBase.logger.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&direct field offset for ConversationMessageDispatchingBridgeBase.logger, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], a1);
}

uint64_t ConversationMessageDispatchingBridgeBase.__allocating_init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  ConversationMessageDispatchingBridgeBase.init(_:_:_:_:_:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandlerBase.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(a1, a2, a3, &direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = v8 + *a4;
  v10 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a3, v10);
  return v8;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandlerBase.getMessageType()()
{
  return type metadata accessor for MessageBase();
}

Swift::Bool __swiftcall ConversationMessageDispatchingBridgeBase.MessageHandlerBase.isBase()()
{
  return 1;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandlerBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandlerBase.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.method.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.logger.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], a1);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.init(_:_:)(a1, a2, a3, &direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.getMessageType()()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 136);
}

void ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init()()
{
  ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init()();
}

{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConversationMessageDispatchingBridgeBase.MessageHandler.init()()
{
  specialized ConversationMessageDispatchingBridgeBase.MessageHandler.init()();
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__ivar_destroyer()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__ivar_destroyer(&direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.deinit()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.deinit(&direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__deallocating_deinit()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__deallocating_deinit(&direct field offset for ConversationMessageDispatchingBridgeBase.MessageHandler.logger);
}

unint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.commandType()()
{
  return type metadata accessor for SABaseClientBoundCommand();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandlerBase.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.logger.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], a1);
}

uint64_t ConversationRequestProcessorBase.sessionId.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *a1;
  v6 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.init(_:_:)(a1, a2, a3, &direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v6 = v4 + *a4;
  v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a3, v7);
  return v4;
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.commandType()()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 128);
}

void ConversationMessageDispatchingBridgeBase.CommandHandler.__allocating_init()()
{
  ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init()();
}

void ConversationMessageDispatchingBridgeBase.CommandHandler.init()()
{
  specialized ConversationMessageDispatchingBridgeBase.MessageHandler.init()();
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.__ivar_destroyer()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__ivar_destroyer(&direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__ivar_destroyer(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v3 = v1 + *a1;
  v4 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.deinit()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.deinit(&direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.deinit(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v3 = v1 + *a1;
  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v1;
}

uint64_t ConversationMessageDispatchingBridgeBase.CommandHandler.__deallocating_deinit()
{
  return ConversationMessageDispatchingBridgeBase.MessageHandler.__deallocating_deinit(&direct field offset for ConversationMessageDispatchingBridgeBase.CommandHandler.logger);
}

uint64_t ConversationMessageDispatchingBridgeBase.MessageHandler.__deallocating_deinit(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v3 = v1 + *a1;
  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t ConversationMessageDispatchingBridgeBase.__deallocating_deinit()
{
  return ConversationRequestAwareBridgeBase.__deallocating_deinit((void (*)(void))ConversationMessageDispatchingBridgeBase.deinit);
}

uint64_t ConversationRequestAwareBridgeBase.__deallocating_deinit(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40[2];
  __int128 v41[2];

  v8 = v7;
  v37 = a7;
  v38 = a5;
  v33 = a2;
  v34 = a4;
  v39 = a3;
  v32 = a1;
  v10 = type metadata accessor for Logger();
  v35 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for DispatchTimeInterval();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)(v7 + direct field offset for ConversationRequestAwareBridgeBase.currentRequestProcessor) = 0;
  v20 = direct field offset for ConversationRequestAwareBridgeBase.candidateRequestProcessors;
  swift_retain();
  *(_QWORD *)(v7 + v20) = Dictionary.init()();
  v21 = direct field offset for ConversationRequestAwareBridgeBase.requestMessagesHandledByBridgeBase;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<[RequestMessageBase.Type], os_unfair_lock_s>);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v7 + v21) = v22;
  v23 = direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest;
  *(_BYTE *)(v7 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) = 0;
  *(_BYTE *)(v7 + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) = a6;
  *(_BYTE *)(v7 + v23) = a6;
  static ConversationRequestAwareBridgeBase.readPreviousProcessorTimeoutFromDefault()(v15);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    *v19 = 500;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0DEF490], v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v7 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout, v19, v16);
  }
  else
  {
    v24 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v17 + 32);
    v24(v19, v15, v16);
    v24((_QWORD *)(v8 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout), v19, v16);
  }
  swift_release();
  v25 = v39;
  outlined init with copy of ReferenceResolutionClientProtocol(v39, (uint64_t)v41);
  v26 = v38;
  outlined init with copy of ReferenceResolutionClientProtocol(v38, (uint64_t)v40);
  v28 = v35;
  v27 = v36;
  v29 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v12, v37, v36);
  v30 = v34;
  swift_unknownObjectRetain();
  ConversationMessageDispatchingBridgeBase.init(_:_:_:_:_:)(v32, v33, v41, v30, v40, (uint64_t)v12);
  swift_retain();
  ConversationRequestAwareBridgeBase.registerMessages()();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
  __swift_destroy_boxed_opaque_existential_1(v26);
  __swift_destroy_boxed_opaque_existential_1(v25);
  return v8;
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConversationMessageDispatchingBridgeBase.MessageHandler);
}

uint64_t sub_1B4CE3EB8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)(a1, v4, v5, v6);
}

void specialized ConversationRequestAwareBridgeBase.init(_:_:_:_:_:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t partial apply for closure #1 in ConversationMessageDispatchingBridgeBase.messageTypesForSubscription()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConversationMessageDispatchingBridgeBase.CommandHandler);
}

unint64_t type metadata accessor for SABaseClientBoundCommand()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SABaseClientBoundCommand;
  if (!lazy cache variable for type metadata for SABaseClientBoundCommand)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SABaseClientBoundCommand);
  }
  return result;
}

void specialized ConversationMessageDispatchingBridgeBase.MessageHandler.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B4CE4038@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 376))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CE4068(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 384);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B4CE4098()
{
  return 16;
}

__n128 sub_1B4CE40A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B4CE40B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 400))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CE40E0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 408);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4CE4110()
{
  return 16;
}

__n128 sub_1B4CE411C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B4CE4128@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CE4158(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 160);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4CE4188()
{
  return 8;
}

uint64_t sub_1B4CE4194@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CE41C4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 184);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4CE41F4()
{
  return 8;
}

_QWORD *sub_1B4CE4200(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B4CE420C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CE423C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 208);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4CE426C()
{
  return 8;
}

uint64_t ObjC metadata update function for ConversationRequestProcessorBase()
{
  return type metadata accessor for ConversationRequestProcessorBase();
}

uint64_t type metadata accessor for ConversationRequestProcessorBase()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationRequestProcessorBase;
  if (!type metadata singleton initialization cache for ConversationRequestProcessorBase)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ConversationRequestProcessorBase()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ConversationRequestProcessorBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationRequestProcessorBase.__allocating_init(_:_:_:_:_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationRequestProcessorBase.handleStartRequest(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ConversationRequestProcessorBase.handleEndRequest(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t type metadata completion function for ConversationRequestAwareBridgeBase()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ConversationRequestAwareBridgeBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConversationRequestAwareBridgeBase);
}

uint64_t method lookup function for ConversationRequestAwareBridgeBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.currentRequestProcessor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.currentRequestProcessor.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.currentRequestProcessor.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.candidateRequestProcessors.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.candidateRequestProcessors.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.candidateRequestProcessors.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.__allocating_init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.registerMessageHandler<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.createRequestProcessor(_:_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.tryToDipatchCommandToProcessor<A>(_:executionContextInfo:reply:handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.dispatchCommandToProcessor<A>(_:executionContextInfo:reply:handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of ConversationRequestAwareBridgeBase.postMessage(_:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t type metadata completion function for ConversationMessageDispatchingBridgeBase()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConversationMessageDispatchingBridgeBase);
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.methodDispatcher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.methodDispatcher.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.methodDispatcher.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registeredMethod.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registeredMethod.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registeredMethod.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.commandsDispatcher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.commandsDispatcher.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.commandsDispatcher.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.__allocating_init(_:_:_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.messageTypesForSubscription()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.aceCommandsGroups()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.aceCommands(forGroup:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.handleMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.getHandleMethod(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.handle(_:executionContextInfo:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registerMessageHandler<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.registerCommandHandler<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.defaultHandle(_:executionContextInfo:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase.MessageHandlerBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandlerBase.handleMethod(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandlerBase.isBase()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandlerBase.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata completion function for ConversationMessageDispatchingBridgeBase.MessageHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase.MessageHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.MessageHandler.__allocating_init(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t type metadata completion function for ConversationMessageDispatchingBridgeBase.MessageHandlerBase()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase.CommandHandlerBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.CommandHandlerBase.handle(_:_:executionContextInfo:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.CommandHandlerBase.commandType()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.CommandHandlerBase.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata completion function for ConversationMessageDispatchingBridgeBase.CommandHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ConversationMessageDispatchingBridgeBase.CommandHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationMessageDispatchingBridgeBase.CommandHandler.__allocating_init(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of StartRequestMessageForConversation.optionalRequestContextData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of StartRequestMessageForConversation.rootRequestId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of StartRequestMessageForConversation.inputOrigin.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1B4CE482C()
{
  return swift_deallocObject();
}

uint64_t (*partial apply for closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v3 + 32) = a1;
  swift_retain();
  return partial apply for closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages();
}

uint64_t sub_1B4CE489C()
{
  return swift_deallocObject();
}

uint64_t (*partial apply for closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v3 + 32) = a1;
  swift_retain();
  return partial apply for closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages();
}

uint64_t sub_1B4CE490C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(a1, v1[4], v1[2], v1[3]);
}

uint64_t partial apply for closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(a1, v1[4], v1[2], v1[3]);
}

uint64_t outlined init with copy of Mirror?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void closure #1 in closure #1 in CachedPluginCatalog.init(capabilityCache:packageCache:sharedFlowPluginServiceClient:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v8 = *a1;
  v7 = a1[1];
  v9 = *a2;
  if (!*(_QWORD *)(*a2 + 16))
  {
LABEL_7:
    if (one-time initialization token for executor != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      *(_QWORD *)&v37[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, (uint64_t *)v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Warning: No bundle ID found for %s when reading plugin catalog from cache", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v25, -1, -1);
      v26 = v24;
LABEL_11:
      MEMORY[0x1B5E44758](v26, -1, -1);

LABEL_13:
      v20 = 0;
      goto LABEL_14;
    }
LABEL_12:

    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v15 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v13);
  v16 = (void *)v15[1];
  v36 = *v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = *a3;
  if (!*(_QWORD *)(*a3 + 16))
    goto LABEL_16;
  swift_bridgeObjectRetain();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v36, (uint64_t)v16);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v27 = *a4;
    if (*(_QWORD *)(*a4 + 16))
    {
      swift_bridgeObjectRetain();
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v29 & 1) != 0)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        type metadata accessor for RemoteFlowPluginPackage();
        memset(v37, 0, sizeof(v37));
        v38 = 0;
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        v20 = RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v36, v16, v8, v7, v30, a5, (uint64_t)v37);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v37[0] = *a3;
        *a3 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v20, v36, (uint64_t)v16, isUniquelyReferenced_nonNull_native);
        *a3 = *(_QWORD *)&v37[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain();
    v22 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      *(_QWORD *)&v37[0] = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, (unint64_t)v16, (uint64_t *)v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v22, v33, "Warning: No intent topics supported by %s when reading plugin catalog from cache", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      v26 = v34;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  v20 = *(_QWORD **)(*(_QWORD *)(v17 + 56) + 8 * v18);
  swift_retain();
  swift_bridgeObjectRelease_n();
LABEL_14:
  *a6 = v20;
}

uint64_t CachedPluginCatalog.findRemoteFlowPlugins(intentTopic:)(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0))
    return swift_bridgeObjectRetain();
  else
    return MEMORY[0x1E0DEE9D8];
}

_QWORD *CachedPluginCatalog.getConversationHandler(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized CachedPluginCatalog.getConversationHandler(id:)(a1, a2, a4);
}

uint64_t CachedPluginCatalog.pluginCount.getter(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t CachedPluginCatalog.intentTopicCount.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CachedPluginCatalog.sharedFlowPluginServiceClientKey.unsafeMutableAddressor()
{
  return CachedPluginCatalog.sharedFlowPluginServiceClientKey.unsafeMutableAddressor(&one-time initialization token for sharedFlowPluginServiceClientKey, (uint64_t)static CachedPluginCatalog.sharedFlowPluginServiceClientKey);
}

uint64_t CachedPluginCatalog.ignoreOSVersionKey.unsafeMutableAddressor()
{
  return CachedPluginCatalog.sharedFlowPluginServiceClientKey.unsafeMutableAddressor(&one-time initialization token for ignoreOSVersionKey, (uint64_t)static CachedPluginCatalog.ignoreOSVersionKey);
}

uint64_t CachedPluginCatalog.sharedFlowPluginServiceClientKey.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for CodingUserInfoKey();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t one-time initialization function for sharedFlowPluginServiceClientKey(uint64_t a1)
{
  return one-time initialization function for sharedFlowPluginServiceClientKey(a1, static CachedPluginCatalog.sharedFlowPluginServiceClientKey);
}

uint64_t static CachedPluginCatalog.sharedFlowPluginServiceClientKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static CachedPluginCatalog.sharedFlowPluginServiceClientKey.getter(&one-time initialization token for sharedFlowPluginServiceClientKey, (uint64_t)static CachedPluginCatalog.sharedFlowPluginServiceClientKey, a1);
}

uint64_t one-time initialization function for ignoreOSVersionKey(uint64_t a1)
{
  return one-time initialization function for sharedFlowPluginServiceClientKey(a1, static CachedPluginCatalog.ignoreOSVersionKey);
}

uint64_t one-time initialization function for sharedFlowPluginServiceClientKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v6, a2);
  v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  v8 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  __break(1u);
  return result;
}

uint64_t static CachedPluginCatalog.ignoreOSVersionKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static CachedPluginCatalog.sharedFlowPluginServiceClientKey.getter(&one-time initialization token for ignoreOSVersionKey, (uint64_t)static CachedPluginCatalog.ignoreOSVersionKey, a1);
}

uint64_t static CachedPluginCatalog.sharedFlowPluginServiceClientKey.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional __swiftcall CachedPluginCatalog.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CachedPluginCatalog.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return (SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional)3;
  else
    return (SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional)v3;
}

SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional __swiftcall CachedPluginCatalog.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::CachedPluginCatalog::CodingKeys_optional)3;
}

uint64_t CachedPluginCatalog.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CachedPluginCatalog.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6F6973726556736FLL;
  if (a1 == 1)
    return 0x696C696261706163;
  return 0x736567616B636170;
}

uint64_t CachedPluginCatalog.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6F6973726556736FLL;
  if (a1 == 1)
    return 0x696C696261706163;
  return 0x736567616B636170;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CachedPluginCatalog.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x696C696261706163;
  v4 = 0xEC00000073656974;
  if (v2 != 1)
  {
    v3 = 0x736567616B636170;
    v4 = 0xE800000000000000;
  }
  if (*a1)
    v5 = v3;
  else
    v5 = 0x6F6973726556736FLL;
  if (v2)
    v6 = v4;
  else
    v6 = 0xE90000000000006ELL;
  v7 = 0x696C696261706163;
  v8 = 0xEC00000073656974;
  if (*a2 != 1)
  {
    v7 = 0x736567616B636170;
    v8 = 0xE800000000000000;
  }
  if (*a2)
    v9 = v7;
  else
    v9 = 0x6F6973726556736FLL;
  if (*a2)
    v10 = v8;
  else
    v10 = 0xE90000000000006ELL;
  if (v5 == v9 && v6 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CachedPluginCatalog.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CachedPluginCatalog.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CachedPluginCatalog.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CachedPluginCatalog.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CachedPluginCatalog.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CachedPluginCatalog.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE90000000000006ELL;
  v4 = 0xEC00000073656974;
  v5 = 0x696C696261706163;
  if (v2 != 1)
  {
    v5 = 0x736567616B636170;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6F6973726556736FLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CachedPluginCatalog.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696C696261706163;
  if (*v0 != 1)
    v1 = 0x736567616B636170;
  if (*v0)
    return v1;
  else
    return 0x6F6973726556736FLL;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance CachedPluginCatalog.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CachedPluginCatalog.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CachedPluginCatalog.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance CachedPluginCatalog.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CachedPluginCatalog.CodingKeys()
{
  lazy protocol witness table accessor for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CachedPluginCatalog.CodingKeys()
{
  lazy protocol witness table accessor for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CachedPluginCatalog.init(from:)(_QWORD *a1)
{
  return specialized CachedPluginCatalog.init(from:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CachedPluginCatalog@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = specialized CachedPluginCatalog.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for PluginLookupByIntentTopic.findRemoteFlowPlugins(intentTopic:) in conformance CachedPluginCatalog(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (*(_QWORD *)(*(_QWORD *)v1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0))
    return swift_bridgeObjectRetain();
  else
    return MEMORY[0x1E0DEE9D8];
}

_QWORD *protocol witness for PluginLookupByIntentTopic.getConversationHandler(id:) in conformance CachedPluginCatalog(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized CachedPluginCatalog.getConversationHandler(id:)(a1, a2, *(_QWORD *)(v2 + 8));
}

uint64_t PluginCapabilityCatalog<>.getConversationHandler(id:)()
{
  uint64_t result;

  result = dispatch thunk of PluginCatalog.getPlugin(id:)();
  if (result)
  {
    type metadata accessor for RemoteFlowPluginBundleConversationHandler();
    result = swift_dynamicCastClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for PluginLookupByIntentTopic.findRemoteFlowPlugins(intentTopic:) in conformance <> PluginCapabilityCatalog<A>()
{
  return dispatch thunk of PluginCapabilityCatalog.getPackages(capability:)();
}

uint64_t protocol witness for PluginLookupByIntentTopic.getConversationHandler(id:) in conformance <> PluginCapabilityCatalog<A>()
{
  uint64_t result;

  result = dispatch thunk of PluginCatalog.getPlugin(id:)();
  if (result)
  {
    type metadata accessor for RemoteFlowPluginBundleConversationHandler();
    result = swift_dynamicCastClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t specialized static CachedPluginCatalog.load(cacheUrl:sharedFlowPluginServiceClient:ignoreOSVersion:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(_QWORD *, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];
  uint64_t v39;
  uint64_t v40;

  LODWORD(v36) = a3;
  v37 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v37 - 8);
  v6 = MEMORY[0x1E0C80A78](v37);
  v35 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v35 - v8;
  v10 = type metadata accessor for CodingUserInfoKey();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v15 = URL.path.getter();
  v16 = (void *)MEMORY[0x1B5E432E8](v15);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v14, sel_fileExistsAtPath_, v16);

  if (v17)
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    if (one-time initialization token for sharedFlowPluginServiceClientKey != -1)
      swift_once();
    v18 = __swift_project_value_buffer(v10, (uint64_t)static CachedPluginCatalog.sharedFlowPluginServiceClientKey);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v19(v13, v18, v10);
    v40 = type metadata accessor for SharedFlowPluginServiceClient();
    v39 = a2;
    swift_retain();
    v20 = (void (*)(_QWORD *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify();
    specialized Dictionary.subscript.setter((uint64_t)&v39, (uint64_t)v13);
    v20(v38, 0);
    if ((v36 & 1) != 0)
    {
      if (one-time initialization token for ignoreOSVersionKey != -1)
        swift_once();
      v21 = __swift_project_value_buffer(v10, (uint64_t)static CachedPluginCatalog.ignoreOSVersionKey);
      v19(v13, v21, v10);
      v40 = MEMORY[0x1E0DEAFA0];
      LOBYTE(v39) = 1;
      v22 = (void (*)(_QWORD *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify();
      specialized Dictionary.subscript.setter((uint64_t)&v39, (uint64_t)v13);
      v22(v38, 0);
    }
    v23 = Data.init(contentsOf:options:)();
    v25 = v24;
    lazy protocol witness table accessor for type CachedPluginCatalog and conformance CachedPluginCatalog();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v23, v25);
    swift_release();
    return v39;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    v27 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v37);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v39 = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = URL.path.getter();
      v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v27);
      _os_log_impl(&dword_1B4BE6000, v28, v29, "CachedPluginCatalog: No cache file exists at %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v31, -1, -1);
      MEMORY[0x1B5E44758](v30, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v27);
    }

    return 0;
  }
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t i;
  BOOL v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(unint64_t, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int64_t v60;
  void (*v61)(unint64_t, char *, uint64_t);
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66[2];
  uint64_t v67;

  v6 = v5;
  v64 = a4;
  v11 = type metadata accessor for IntentTopic();
  v55 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v53 = (char *)&v48 - v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<IntentTopic, [RemoteFlowPluginPackage]>);
  v16 = static _DictionaryStorage.copy(original:)();
  v17 = v16;
  v18 = 0;
  v56 = a1;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v19 = v21;
  v22 = 1 << *(_BYTE *)(v20 - 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v19;
  v50 = v20;
  v51 = (unint64_t)(v22 + 63) >> 6;
  v52 = v16 + 64;
  v54 = v16;
  v49 = v11;
  v58 = v14;
  if (!v24)
    goto LABEL_5;
LABEL_4:
  v59 = (v24 - 1) & v24;
  v60 = v18;
  for (i = __clz(__rbit64(v24)) | (v18 << 6); ; i = __clz(__rbit64(v28)) + (v27 << 6))
  {
    v31 = v55;
    v30 = v56;
    v32 = *(_QWORD *)(v56 + 48);
    v62 = *(_QWORD *)(v55 + 72) * i;
    v33 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v53, v32 + v62, v11);
    v34 = *(_QWORD *)(v30 + 56);
    v63 = i;
    v35 = *(_QWORD *)(v34 + 8 * i);
    v36 = *(void (**)(unint64_t, char *, uint64_t))(v31 + 32);
    v37 = v35;
    v38 = v58;
    v61 = v36;
    v36((unint64_t)v58, v33, v11);
    v39 = MEMORY[0x1E0DEE9D8];
    v67 = MEMORY[0x1E0DEE9D8];
    v40 = *(_QWORD *)(v37 + 16);
    if (v40)
      break;
    swift_bridgeObjectRetain();
    swift_retain();
LABEL_26:
    swift_bridgeObjectRelease();
    swift_release();
    v44 = v63;
    *(_QWORD *)(v52 + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v63;
    v17 = v54;
    v61(*(_QWORD *)(v54 + 48) + v62, v38, v11);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v44) = v39;
    v45 = *(_QWORD *)(v17 + 16);
    v26 = __OFADD__(v45, 1);
    v46 = v45 + 1;
    if (v26)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    *(_QWORD *)(v17 + 16) = v46;
    v24 = v59;
    v18 = v60;
    if (v59)
      goto LABEL_4;
LABEL_5:
    v26 = __OFADD__(v18, 1);
    v27 = v18 + 1;
    if (v26)
      goto LABEL_35;
    if (v27 >= v51)
      return v17;
    v28 = *(_QWORD *)(v50 + 8 * v27);
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v51)
        return v17;
      v28 = *(_QWORD *)(v50 + 8 * v29);
      if (!v28)
      {
        v29 = v27 + 2;
        if (v27 + 2 >= v51)
          return v17;
        v28 = *(_QWORD *)(v50 + 8 * v29);
        if (!v28)
        {
          v29 = v27 + 3;
          if (v27 + 3 >= v51)
            return v17;
          v28 = *(_QWORD *)(v50 + 8 * v29);
          if (!v28)
          {
            while (1)
            {
              v27 = v29 + 1;
              if (__OFADD__(v29, 1))
                goto LABEL_36;
              if (v27 >= v51)
                return v17;
              v28 = *(_QWORD *)(v50 + 8 * v27);
              ++v29;
              if (v28)
                goto LABEL_15;
            }
          }
        }
      }
      v27 = v29;
    }
LABEL_15:
    v59 = (v28 - 1) & v28;
    v60 = v27;
  }
  swift_bridgeObjectRetain_n();
  swift_retain();
  v57 = v37;
  v41 = (uint64_t *)(v37 + 40);
  while (1)
  {
    v42 = *v41;
    v66[0] = *(v41 - 1);
    v66[1] = v42;
    swift_bridgeObjectRetain();
    closure #1 in closure #1 in CachedPluginCatalog.init(capabilityCache:packageCache:sharedFlowPluginServiceClient:)(v66, a2, a3, v64, a5, &v65);
    if (v6)
      break;
    v6 = 0;
    v43 = swift_bridgeObjectRelease();
    if (v65)
    {
      MEMORY[0x1B5E43498](v43);
      if (*(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v41 += 2;
    if (!--v40)
    {
      swift_bridgeObjectRelease();
      v39 = v67;
      v11 = v49;
      v38 = v58;
      goto LABEL_26;
    }
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized CachedPluginCatalog.init(capabilityCache:packageCache:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char isUniquelyReferenced_nonNull_native;
  char v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  char v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;

  v100 = a3;
  v5 = type metadata accessor for IntentTopic();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v111 = (char *)&v98 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: IntentTopic, value: [String])?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v105 = (char *)&v98 - v15;
  type metadata accessor for RemoteFlowPluginPackage();
  v117 = Dictionary.init(minimumCapacity:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IntentTopic]);
  v116 = (_QWORD *)Dictionary.init(minimumCapacity:)();
  v107 = a2;
  v16 = Dictionary.init(minimumCapacity:)();
  v17 = *(_QWORD *)(a1 + 64);
  v101 = a1 + 64;
  v115 = (_QWORD *)v16;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v102 = (unint64_t)(v18 + 63) >> 6;
  v103 = a1;
  v99 = v102 - 1;
  swift_bridgeObjectRetain();
  v106 = 0;
  v104 = v14;
  while (1)
  {
    if (v20)
    {
      v108 = (v20 - 1) & v20;
      v21 = (uint64_t)v105;
      v22 = __clz(__rbit64(v20)) | (v106 << 6);
LABEL_7:
      v23 = v103;
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v14, *(_QWORD *)(v103 + 48) + *(_QWORD *)(v6 + 72) * v22, v5);
      v24 = *(_QWORD *)(v23 + 56);
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: IntentTopic, value: [String]));
      *(_QWORD *)&v14[*(int *)(v25 + 48)] = *(_QWORD *)(v24 + 8 * v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 0, 1, v25);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    v21 = (uint64_t)v105;
    v26 = v106 + 1;
    if (__OFADD__(v106, 1))
      goto LABEL_89;
    if (v26 < v102)
    {
      v27 = *(_QWORD *)(v101 + 8 * v26);
      if (v27)
        goto LABEL_11;
      v28 = v106 + 2;
      ++v106;
      if (v26 + 1 < v102)
      {
        v27 = *(_QWORD *)(v101 + 8 * v28);
        if (v27)
          goto LABEL_14;
        v106 = v26 + 1;
        if (v26 + 2 < v102)
        {
          v27 = *(_QWORD *)(v101 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_11;
          }
          v28 = v26 + 3;
          v106 = v26 + 2;
          if (v26 + 3 < v102)
          {
            v27 = *(_QWORD *)(v101 + 8 * v28);
            if (v27)
            {
LABEL_14:
              v26 = v28;
LABEL_11:
              v108 = (v27 - 1) & v27;
              v22 = __clz(__rbit64(v27)) + (v26 << 6);
              v106 = v26;
              goto LABEL_7;
            }
            while (1)
            {
              v26 = v28 + 1;
              if (__OFADD__(v28, 1))
                goto LABEL_91;
              if (v26 >= v102)
                break;
              v27 = *(_QWORD *)(v101 + 8 * v26);
              ++v28;
              if (v27)
                goto LABEL_11;
            }
            v106 = v99;
          }
        }
      }
    }
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: IntentTopic, value: [String]));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 1, 1, v29);
    v108 = 0;
LABEL_26:
    outlined init with take of (key: IntentTopic, value: [String])?((uint64_t)v14, v21);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: IntentTopic, value: [String]));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v21, 1, v30) == 1)
    {
      swift_release();
      v63 = 0;
      v64 = *(_QWORD *)(v107 + 64);
      v112 = v107 + 64;
      v65 = 1 << *(_BYTE *)(v107 + 32);
      v66 = -1;
      if (v65 < 64)
        v66 = ~(-1 << v65);
      v67 = v66 & v64;
      v68 = v115;
      v113 = (unint64_t)(v65 + 63) >> 6;
      while (1)
      {
        if (v67)
        {
          v70 = __clz(__rbit64(v67));
          v67 &= v67 - 1;
          v71 = v70 | (v63 << 6);
        }
        else
        {
          v72 = v63 + 1;
          if (__OFADD__(v63, 1))
            goto LABEL_88;
          if (v72 >= v113)
            goto LABEL_83;
          v73 = *(_QWORD *)(v112 + 8 * v72);
          ++v63;
          if (!v73)
          {
            v63 = v72 + 1;
            if (v72 + 1 >= v113)
              goto LABEL_83;
            v73 = *(_QWORD *)(v112 + 8 * v63);
            if (!v73)
            {
              v63 = v72 + 2;
              if (v72 + 2 >= v113)
                goto LABEL_83;
              v73 = *(_QWORD *)(v112 + 8 * v63);
              if (!v73)
              {
                v74 = v72 + 3;
                if (v74 >= v113)
                  goto LABEL_83;
                v73 = *(_QWORD *)(v112 + 8 * v74);
                if (!v73)
                {
                  while (1)
                  {
                    v63 = v74 + 1;
                    if (__OFADD__(v74, 1))
                      goto LABEL_90;
                    if (v63 >= v113)
                      break;
                    v73 = *(_QWORD *)(v112 + 8 * v63);
                    ++v74;
                    if (v73)
                      goto LABEL_71;
                  }
LABEL_83:
                  v115 = v68;
                  swift_release();
                  v95 = v100;
                  swift_retain();
                  v96 = specialized _NativeDictionary.mapValues<A>(_:)(v103, (uint64_t *)&v115, &v117, (uint64_t *)&v116, v95);
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return v96;
                }
                v63 = v74;
              }
            }
          }
LABEL_71:
          v67 = (v73 - 1) & v73;
          v71 = __clz(__rbit64(v73)) + (v63 << 6);
        }
        v75 = 16 * v71;
        v76 = (uint64_t *)(*(_QWORD *)(v107 + 48) + v75);
        v78 = *v76;
        v77 = v76[1];
        v79 = (uint64_t *)(*(_QWORD *)(v107 + 56) + v75);
        v81 = *v79;
        v80 = v79[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v114 = v68;
        v84 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v80);
        v85 = v68[2];
        v86 = (v83 & 1) == 0;
        v87 = v85 + v86;
        if (__OFADD__(v85, v86))
          goto LABEL_86;
        v88 = v83;
        if (v68[3] >= v87)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v68 = v114;
            if ((v83 & 1) != 0)
              goto LABEL_54;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v68 = v114;
            if ((v88 & 1) != 0)
              goto LABEL_54;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v87, isUniquelyReferenced_nonNull_native);
          v89 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v80);
          if ((v88 & 1) != (v90 & 1))
            goto LABEL_92;
          v84 = v89;
          v68 = v114;
          if ((v88 & 1) != 0)
          {
LABEL_54:
            v69 = (_QWORD *)(v68[7] + 16 * v84);
            swift_bridgeObjectRelease();
            *v69 = v78;
            v69[1] = v77;
            goto LABEL_55;
          }
        }
        v68[(v84 >> 6) + 8] |= 1 << v84;
        v91 = (uint64_t *)(v68[6] + 16 * v84);
        *v91 = v81;
        v91[1] = v80;
        v92 = (_QWORD *)(v68[7] + 16 * v84);
        *v92 = v78;
        v92[1] = v77;
        v93 = v68[2];
        v61 = __OFADD__(v93, 1);
        v94 = v93 + 1;
        if (v61)
          goto LABEL_87;
        v68[2] = v94;
        swift_bridgeObjectRetain();
LABEL_55:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    v31 = *(_QWORD *)(v21 + *(int *)(v30 + 48));
    v110 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    v110(v111, v21, v5);
    v109 = v31;
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
      break;
LABEL_4:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v111, v5);
    v14 = v104;
    v20 = v108;
  }
  v33 = (uint64_t *)(v109 + 40);
  while (1)
  {
    v112 = v32;
    v35 = *(v33 - 1);
    v36 = *v33;
    v37 = (uint64_t)v116;
    v38 = v116[2];
    swift_bridgeObjectRetain();
    v113 = v35;
    if (v38)
    {
      swift_bridgeObjectRetain();
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
      v40 = MEMORY[0x1E0DEE9D8];
      if ((v41 & 1) != 0)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v39);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = MEMORY[0x1E0DEE9D8];
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v111, v5);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
    v43 = *(_QWORD *)(v40 + 16);
    v42 = *(_QWORD *)(v40 + 24);
    if (v43 >= v42 >> 1)
      v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v40);
    *(_QWORD *)(v40 + 16) = v43 + 1;
    v44 = v6;
    v45 = v40
        + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
        + *(_QWORD *)(v6 + 72) * v43;
    v46 = v9;
    v47 = v5;
    v110((char *)v45, (uint64_t)v9, v5);
    v48 = (uint64_t)v116;
    v49 = swift_isUniquelyReferenced_nonNull_native();
    v114 = (_QWORD *)v48;
    v51 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v36);
    v52 = *(_QWORD *)(v48 + 16);
    v53 = (v50 & 1) == 0;
    v54 = v52 + v53;
    if (__OFADD__(v52, v53))
      break;
    v55 = v50;
    if (*(_QWORD *)(v48 + 24) >= v54)
    {
      if ((v49 & 1) != 0)
      {
        v58 = v114;
        if ((v50 & 1) != 0)
          goto LABEL_29;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v58 = v114;
        if ((v55 & 1) != 0)
          goto LABEL_29;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, v49);
      v56 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v36);
      if ((v55 & 1) != (v57 & 1))
        goto LABEL_92;
      v51 = v56;
      v58 = v114;
      if ((v55 & 1) != 0)
      {
LABEL_29:
        v34 = v58[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v34 + 8 * v51) = v40;
        goto LABEL_30;
      }
    }
    v58[(v51 >> 6) + 8] |= 1 << v51;
    v59 = (_QWORD *)(v58[6] + 16 * v51);
    *v59 = v113;
    v59[1] = v36;
    *(_QWORD *)(v58[7] + 8 * v51) = v40;
    v60 = v58[2];
    v61 = __OFADD__(v60, 1);
    v62 = v60 + 1;
    if (v61)
      goto LABEL_85;
    v58[2] = v62;
    swift_bridgeObjectRetain();
LABEL_30:
    v33 += 2;
    v116 = v58;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = v112 - 1;
    v5 = v47;
    v6 = v44;
    v9 = v46;
    if (v112 == 1)
      goto LABEL_4;
  }
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_QWORD *specialized CachedPluginCatalog.getConversationHandler(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  _QWORD *v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  v6 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  swift_release();
  return v6;
}

unint64_t specialized CachedPluginCatalog.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CachedPluginCatalog.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t specialized CachedPluginCatalog.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _OWORD *v48;
  char v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74[3];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v69 = type metadata accessor for CodingUserInfoKey();
  v2 = *(_QWORD *)(v69 - 8);
  v3 = MEMORY[0x1E0C80A78](v69);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v62 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CachedPluginCatalog.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v71 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys();
  v13 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    goto LABEL_38;
  v66 = v7;
  v67 = v5;
  v68 = v2;
  v14 = v69;
  v70 = v9;
  LOBYTE(v74[0]) = 0;
  v15 = KeyedDecodingContainer.decode(_:forKey:)();
  v17 = v16;
  v64 = v8;
  v65 = v11;
  v18 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v19 = objc_msgSend(v18, sel_operatingSystemVersionString);

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v23 = v22;
  if (v15 == v20 && v17 == v22)
  {
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v71, (uint64_t)v74);
    v26 = v14;
    goto LABEL_13;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v71, (uint64_t)v74);
  v26 = v14;
  if ((v25 & 1) != 0)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    goto LABEL_14;
  }
  v27 = v23;
  v63 = v15;
  v28 = v75;
  v29 = v76;
  __swift_project_boxed_opaque_existential_1(v74, v75);
  v30 = MEMORY[0x1B5E43F0C](v28, v29);
  if (one-time initialization token for ignoreOSVersionKey != -1)
    swift_once();
  v31 = __swift_project_value_buffer(v26, (uint64_t)static CachedPluginCatalog.ignoreOSVersionKey);
  v32 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v66, v31, v26);
  v33 = v63;
  if (*(_QWORD *)(v30 + 16) && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v35 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v30 + 56) + 32 * v34, (uint64_t)&v72);
  }
  else
  {
    v72 = 0u;
    v73 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v32, v26);
  if (!*((_QWORD *)&v73 + 1))
  {
    outlined destroy of Any?((uint64_t)&v72);
    goto LABEL_31;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_31:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    goto LABEL_32;
  }
  v49 = v77;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  if ((v49 & 1) == 0)
  {
LABEL_32:
    if (one-time initialization token for executor != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc();
      v54 = v17;
      v55 = swift_slowAlloc();
      v74[0] = v55;
      *(_DWORD *)v53 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v54, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v27, v74);
      v33 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v51, v52, "Not using cached plugin information, as it is from %s and we are running %s.", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      v56 = v55;
      v17 = v54;
      MEMORY[0x1B5E44758](v56, -1, -1);
      MEMORY[0x1B5E44758](v53, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v57 = v64;
    v58 = v65;
    lazy protocol witness table accessor for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError();
    v8 = swift_allocError();
    *v59 = v20;
    v59[1] = v27;
    v59[2] = v33;
    v59[3] = v17;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v57);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_14:
  v36 = v71[3];
  v37 = v71[4];
  __swift_project_boxed_opaque_existential_1(v71, v36);
  v38 = MEMORY[0x1B5E43F0C](v36, v37);
  v39 = v68;
  if (one-time initialization token for sharedFlowPluginServiceClientKey != -1)
    swift_once();
  v40 = __swift_project_value_buffer(v26, (uint64_t)static CachedPluginCatalog.sharedFlowPluginServiceClientKey);
  v41 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v67, v40, v26);
  v42 = v64;
  if (*(_QWORD *)(v38 + 16) && (v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41), (v44 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v38 + 56) + 32 * v43, (uint64_t)&v72);
  }
  else
  {
    v72 = 0u;
    v73 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v26);
  if (!*((_QWORD *)&v73 + 1))
  {
    outlined destroy of Any?((uint64_t)&v72);
    goto LABEL_24;
  }
  type metadata accessor for SharedFlowPluginServiceClient();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:
    v47 = v70;
    lazy protocol witness table accessor for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError();
    swift_allocError();
    *v48 = 0u;
    v48[1] = 0u;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v65, v42);
LABEL_38:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    return v8;
  }
  v45 = v77;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IntentTopic : [String]]);
  LOBYTE(v77) = 1;
  lazy protocol witness table accessor for type [IntentTopic : [String]] and conformance <> [A : B]();
  v46 = v65;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v60 = v72;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : String]);
  LOBYTE(v77) = 2;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v8 = specialized CachedPluginCatalog.init(capabilityCache:packageCache:sharedFlowPluginServiceClient:)(v60, v72, v45);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v42);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  return v8;
}

unint64_t lazy protocol witness table accessor for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CachedPluginCatalog.CodingKeys, &type metadata for CachedPluginCatalog.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CachedPluginCatalog.CodingKeys, &type metadata for CachedPluginCatalog.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CachedPluginCatalog.CodingKeys, &type metadata for CachedPluginCatalog.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CachedPluginCatalog.CodingKeys, &type metadata for CachedPluginCatalog.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.CodingKeys and conformance CachedPluginCatalog.CodingKeys);
  }
  return result;
}

uint64_t destroy for CachedPluginCatalog()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for CachedPluginCatalog(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CachedPluginCatalog(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CachedPluginCatalog(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CachedPluginCatalog()
{
  return &type metadata for CachedPluginCatalog;
}

uint64_t storeEnumTagSinglePayload for CachedPluginCatalog.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4CE76D0 + 4 * byte_1B4EE5805[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4CE7704 + 4 * asc_1B4EE5800[v4]))();
}

uint64_t sub_1B4CE7704(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CE770C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CE7714);
  return result;
}

uint64_t sub_1B4CE7720(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CE7728);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4CE772C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CE7734(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CachedPluginCatalog.CodingKeys()
{
  return &type metadata for CachedPluginCatalog.CodingKeys;
}

unint64_t destroy for CachedPluginCatalog.FlowPluginCacheError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CachedPluginCatalog.FlowPluginCacheError(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for CachedPluginCatalog.FlowPluginCacheError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CachedPluginCatalog.FlowPluginCacheError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedPluginCatalog.FlowPluginCacheError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CachedPluginCatalog.FlowPluginCacheError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for CachedPluginCatalog.FlowPluginCacheError(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedPluginCatalog.FlowPluginCacheError()
{
  return &type metadata for CachedPluginCatalog.FlowPluginCacheError;
}

uint64_t dispatch thunk of PluginLookupByIntentTopic.findRemoteFlowPlugins(intentTopic:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of PluginLookupByIntentTopic.getConversationHandler(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

unint64_t lazy protocol witness table accessor for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CachedPluginCatalog.FlowPluginCacheError, &type metadata for CachedPluginCatalog.FlowPluginCacheError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog.FlowPluginCacheError and conformance CachedPluginCatalog.FlowPluginCacheError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v2 = MEMORY[0x1E0DEA9A0];
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  }
  return result;
}

uint64_t outlined init with take of (key: IntentTopic, value: [String])?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: IntentTopic, value: [String])?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type CachedPluginCatalog and conformance CachedPluginCatalog()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachedPluginCatalog and conformance CachedPluginCatalog;
  if (!lazy protocol witness table cache variable for type CachedPluginCatalog and conformance CachedPluginCatalog)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CachedPluginCatalog, &type metadata for CachedPluginCatalog);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedPluginCatalog and conformance CachedPluginCatalog);
  }
  return result;
}

SiriKitRuntime::CalendarAffinityScorer __swiftcall CalendarAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::CalendarAffinityScorer result;

  v0 = (void *)0x80000001B4EF6990;
  v1 = 0xD000000000000029;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t CalendarAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized CalendarAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  char v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, unint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v0 = type metadata accessor for RREntity();
  v63 = *(_QWORD *)(v0 - 8);
  v64 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v56 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for RRCandidate();
  v65 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v4 = (char *)v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Parse();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for USOParse();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v8, v5) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v13 = specialized static AffinityScorerUtils.getTask(_:)();
    if (!v13)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_1B4BE6000, v28, v29, "[CalendarAffinityScorer] Unable to extract task from uso parse, returning .default", v30, 2u);
        MEMORY[0x1B5E44758](v30, -1, -1);
      }

      goto LABEL_23;
    }
    v14 = v13;
    if (UsoTask.baseEntityAsString.getter() == 0x6E456F4E5F6F7375 && v15 == 0xEC00000079746974)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
LABEL_8:
        if (one-time initialization token for executor != -1)
          swift_once();
        v18 = type metadata accessor for Logger();
        __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
        v19 = Logger.logObject.getter();
        v20 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v21 = 0;
          _os_log_impl(&dword_1B4BE6000, v19, v20, "[CalendarAffinityScorer] UsoTask is not a shared task, returning .default", v21, 2u);
          MEMORY[0x1B5E44758](v21, -1, -1);
        }

        swift_release();
LABEL_23:
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        return 2;
      }
    }
    if (UsoTask.verbString.getter() != 0x657461647075 || v31 != 0xE600000000000000)
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v32 & 1) != 0)
        goto LABEL_32;
      if (UsoTask.verbString.getter() != 0x6574656C6564 || v33 != 0xE600000000000000)
      {
        v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v55 & 1) == 0)
          goto LABEL_8;
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
LABEL_32:
    v59 = v12;
    SiriEnvironment.salientEntitiesProvider.getter();
    v34 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
    swift_release();
    v35 = *(_QWORD *)(v34 + 16);
    if (v35)
    {
      v56[2] = v14;
      v57 = v10;
      v58 = v9;
      v36 = v34 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v65 + 16);
      v60 = *(_QWORD *)(v65 + 72);
      v61 = v37;
      v56[1] = v34;
      swift_bridgeObjectRetain();
      v38 = v62;
      while (1)
      {
        v61(v4, v36, v38);
        RRCandidate.entity.getter();
        RREntity.usoEntity.getter();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v2, v64);
        v39 = UsoTask.verbString.getter();
        v41 = v40;
        swift_release();
        v68 = v39;
        v69 = v41;
        v66 = 0xD000000000000014;
        v67 = 0x80000001B4EF78A0;
        lazy protocol witness table accessor for type String and conformance String();
        LOBYTE(v39) = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v65 + 8))(v4, v38);
        if ((v39 & 1) != 0)
          break;
        v36 += v60;
        if (!--v35)
        {
          swift_bridgeObjectRelease_n();
          v10 = v57;
          v9 = v58;
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRelease_n();
      if (one-time initialization token for executor != -1)
        swift_once();
      v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.debug.getter();
      v50 = os_log_type_enabled(v48, v49);
      v52 = v57;
      v51 = v58;
      if (v50)
      {
        v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v53 = 0;
        _os_log_impl(&dword_1B4BE6000, v48, v49, "[CalendarAffinityScorer] calendar event entities found in salient entities, returning .high", v53, 2u);
        MEMORY[0x1B5E44758](v53, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v59, v51);
      return 3;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_38:
      v42 = v59;
      if (one-time initialization token for executor != -1)
        swift_once();
      v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v46 = 0;
        _os_log_impl(&dword_1B4BE6000, v44, v45, "[CalendarAffinityScorer] No calendar event entities found in salient entities, returning .unsupported", v46, 2u);
        MEMORY[0x1B5E44758](v46, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v42, v9);
      return 0;
    }
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (one-time initialization token for executor != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, v24))
  {

    return 2;
  }
  v25 = 2;
  v26 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v26 = 0;
  _os_log_impl(&dword_1B4BE6000, v23, v24, "[CalendarAffinityScorer] Not a Uso parse, returning .default", v26, 2u);
  MEMORY[0x1B5E44758](v26, -1, -1);

  return v25;
}

ValueMetadata *type metadata accessor for CalendarAffinityScorer()
{
  return &type metadata for CalendarAffinityScorer;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12RankedActionV03topG0_SayAF0E5ParseOG17alternativeParsestG_AHs5NeverOTg503_s7d5Cam12fg9VSayAA0B5i46OGACIgngr_AC03topD0_AF17alternativeParsestACs5L136OIegnrzr_TR04_s14a12KitRuntime13b55BridgeImplC13collateParses4rcId13rankedActionsSay0aD012cd22VGSS_AJtFZA2I_SayAG0D5E8OGtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v3);
  v25 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CamParse();
  MEMORY[0x1E0C80A78](v5);
  v24 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RankedAction();
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  MEMORY[0x1E0C80A78](v7);
  v19 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v18 = v1;
    v27 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = v27;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    v12 = *(_QWORD *)(v11 - 8);
    v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v20 = *(_QWORD *)(v12 + 72);
    v21 = v11;
    v14 = v19;
    do
    {
      v26 = v10;
      RankedAction.flowHandlerId.getter();
      RankedAction.parse.getter();
      RankedAction.score.getter();
      RankedAction.loggingId.getter();
      swift_bridgeObjectRetain();
      RankedAction.userData.getter();
      v10 = v26;
      RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)();
      v27 = v10;
      v16 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v14 = v19;
        v10 = v27;
      }
      *(_QWORD *)(v10 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v10+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v16, v14, v23);
      v13 += v20;
      --v9;
    }
    while (v9);
  }
  return v10;
}

Swift::String *kSiriLinkFlowBundleId.unsafeMutableAddressor()
{
  return &kSiriLinkFlowBundleId;
}

uint64_t CamBridgeImpl.enabledCamFeaturesForDevice.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CamBridgeImpl.enabledCamFeaturesForDevice.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CamBridgeImpl.enabledCamFeaturesForDevice.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t CamBridgeImpl.trialExperimentManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 104, a1);
}

uint64_t CamBridgeImpl.camState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of CamBridgeImpl.CamState((uint64_t *)(v1 + 144), a1);
}

uint64_t key path setter for CamBridgeImpl.camState : CamBridgeImpl(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v5[3];

  outlined init with copy of CamBridgeImpl.CamState(a1, (uint64_t)v5);
  v3 = *a2 + 144;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CamState(v5, v3);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  return outlined destroy of CamBridgeImpl.CamState((uint64_t)v5);
}

uint64_t CamBridgeImpl.camState.setter(__int128 *a1)
{
  uint64_t v1;

  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CamState(a1, v1 + 144);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  return outlined destroy of CamBridgeImpl.CamState((uint64_t)a1);
}

uint64_t (*CamBridgeImpl.camState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CamBridgeImpl.camState.modify;
}

uint64_t CamBridgeImpl.camState.modify(uint64_t a1, char a2)
{
  return CamBridgeImpl.camState.modify(a1, a2, (uint64_t (*)(uint64_t))CamBridgeImpl.camState.didset);
}

uint64_t CamBridgeImpl.caarState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of CamBridgeImpl.CaarState((uint64_t *)(v1 + 192), a1);
}

uint64_t key path setter for CamBridgeImpl.caarState : CamBridgeImpl(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v5[3];

  outlined init with copy of CamBridgeImpl.CaarState(a1, (uint64_t)v5);
  v3 = *a2 + 192;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CaarState(v5, v3);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  return outlined destroy of CamBridgeImpl.CaarState((uint64_t)v5);
}

uint64_t CamBridgeImpl.caarState.setter(__int128 *a1)
{
  uint64_t v1;

  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CaarState(a1, v1 + 192);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  return outlined destroy of CamBridgeImpl.CaarState((uint64_t)a1);
}

uint64_t outlined assign with copy of CamBridgeImpl.CaarState(__int128 *a1, uint64_t a2)
{
  assignWithCopy for CamBridgeImpl.CaarState(a2, a1);
  return a2;
}

void CamBridgeImpl.caarState.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9[6];
  uint64_t v10;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CaarState((uint64_t *)(v1 + 192), (uint64_t)v9);
    v7 = String.init<A>(describing:)();
    v9[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "CamBridge: caarState set to %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t (*CamBridgeImpl.caarState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CamBridgeImpl.caarState.modify;
}

uint64_t CamBridgeImpl.caarState.modify(uint64_t a1, char a2)
{
  return CamBridgeImpl.camState.modify(a1, a2, (uint64_t (*)(uint64_t))CamBridgeImpl.caarState.didset);
}

uint64_t CamBridgeImpl.camBridgeState.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t key path setter for CamBridgeImpl.camBridgeState : CamBridgeImpl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 240) = v2;
  swift_retain_n();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  return swift_release();
}

uint64_t CamBridgeImpl.camBridgeState.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 240) = a1;
  swift_retain();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  return swift_release();
}

uint64_t (*CamBridgeImpl.camBridgeState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CamBridgeImpl.camBridgeState.modify;
}

uint64_t CamBridgeImpl.camBridgeState.modify(uint64_t a1, char a2)
{
  return CamBridgeImpl.camState.modify(a1, a2, (uint64_t (*)(uint64_t))CamBridgeImpl.camBridgeState.didset);
}

uint64_t CamBridgeImpl.camState.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return a3(result);
  return result;
}

uint64_t CamBridgeImpl.__allocating_init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a3;
  v7 = swift_allocObject();
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = __swift_mutable_project_boxed_opaque_existential_1(a2, v9);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  v15 = *(_QWORD *)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 32);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a4, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  v20 = specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(a1, (uint64_t)v12, v23, (uint64_t)v18, v7, v9, v15, v8, v14);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v20;
}

uint64_t CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[2];

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = __swift_mutable_project_boxed_opaque_existential_1(a2, v9);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  v15 = *(_QWORD *)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 32);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a4, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  v20 = specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(a1, (uint64_t)v12, a3, (uint64_t)v18, v22[1], v9, v15, v8, v14);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v20;
}

uint64_t static CamBridgeImpl.isCaarSupportedOnThisDevice.getter()
{
  return 1;
}

uint64_t one-time initialization function for shared()
{
  id v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;

  v0 = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 125, (unsigned __int128)0, (unsigned __int128)0, 0);
  type metadata accessor for TrialExperimentationAssetManager();
  v1 = swift_allocObject();
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(_QWORD *)(v1 + 16) = v0;
  *(_QWORD *)(v1 + 24) = v2;
  type metadata accessor for CamBridgeImpl();
  v3 = swift_allocObject();
  result = specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(2u, (uint64_t)&v5, v1, v3);
  static CamBridgeImpl.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for MessageBusActor();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  static MessageBusActor.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for FlowActor();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  static FlowActor.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  if (one-time initialization token for kSharedFlowExtensionObserver != -1)
    swift_once();
  v0 = kSharedFlowExtensionObserver;
  type metadata accessor for FlowExtensionDiscoverer();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  static FlowExtensionDiscoverer.shared = v1;
  return swift_retain();
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ReactiveUIEventActor();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 128) = 0;
  static ReactiveUIEventActor.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ConversationActor();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  static ConversationActor.shared = v0;
  return result;
}

uint64_t *CamBridgeImpl.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static CamBridgeImpl.shared;
}

uint64_t static CamBridgeImpl.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static CamBridgeImpl.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  static CamBridgeImpl.shared = a1;
  return swift_release();
}

uint64_t (*static CamBridgeImpl.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t static CamBridgeImpl.isCamUncertaintyPromptSupportedOnThisDevice.getter()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = (id)AFCurrentUserInterfaceIdiom();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4)
    v6 = 1;
  else
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t static CamBridgeImpl.isCamActionAmbiguitySupportedOnThisDevice.getter()
{
  return 1;
}

uint64_t CamBridgeImpl.asyncWarmUpIfSupported()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char v24;
  char v25;

  v1 = *v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v0 + 18, (uint64_t)&v21);
  if (v25 != 3
    || v24
    || v21 != 1
    || (v5 = vorrq_s8(v22, v23), *(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL))))
  {
    outlined destroy of CamBridgeImpl.CamState((uint64_t)&v21);
  }
  else
  {
    outlined destroy of CamBridgeImpl.CamState((uint64_t)&v21);
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CaarState(v0 + 24, (uint64_t)&v21);
    if (v24 == 3 && v21 == 1)
    {
      v6 = vorrq_s8(v22, v23);
      if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)))
      {
        outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v21);
        v7 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
        if (one-time initialization token for shared != -1)
          swift_once();
        swift_beginAccess();
        v8 = static MessageBusActor.shared;
        v9 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
        v10 = swift_allocObject();
        *(_QWORD *)(v10 + 16) = v8;
        *(_QWORD *)(v10 + 24) = v9;
        swift_retain();
        return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in CamBridgeImpl.asyncWarmUpIfSupported(), v10);
      }
    }
    outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v21);
  }
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = one-time initialization token for shared;
  swift_retain();
  if (v13 != -1)
    swift_once();
  swift_beginAccess();
  v14 = static MessageBusActor.shared;
  v15 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v14;
  v16[3] = v15;
  v16[4] = v0;
  v16[5] = v1;
  swift_retain();
  v11 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #2 in CamBridgeImpl.asyncWarmUpIfSupported(), (uint64_t)v16);
  outlined init with copy of CamBridgeImpl.CamState(v0 + 18, (uint64_t)&v21);
  if (v25 != 3
    || v24
    || v21 != 1
    || (v17 = vorrq_s8(v22, v23),
        *(_QWORD *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))))
  {
    outlined destroy of CamBridgeImpl.CamState((uint64_t)&v21);
    v21 = v11;
    v25 = 0;
    swift_beginAccess();
    swift_retain();
    outlined assign with copy of CamBridgeImpl.CamState((__int128 *)&v21, (uint64_t)(v0 + 18));
    swift_endAccess();
    CamBridgeImpl.camState.didset();
  }
  outlined destroy of CamBridgeImpl.CamState((uint64_t)&v21);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CaarState(v0 + 24, (uint64_t)&v21);
  if (v24 != 3
    || v21 != 1
    || (v18 = vorrq_s8(v22, v23),
        *(_QWORD *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))))
  {
    outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v21);
    v21 = v11;
    v24 = 0;
    swift_beginAccess();
    swift_retain();
    outlined assign with copy of CamBridgeImpl.CaarState((__int128 *)&v21, (uint64_t)(v0 + 24));
    swift_endAccess();
    CamBridgeImpl.caarState.didset();
  }
  outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v21);
  return v11;
}

uint64_t closure #1 in CamBridgeImpl.asyncWarmUpIfSupported()()
{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #2 in CamBridgeImpl.asyncWarmUpIfSupported()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[108] = a4;
  v5 = type metadata accessor for CamFeature();
  v4[109] = v5;
  v4[110] = *(_QWORD *)(v5 - 8);
  v4[111] = swift_task_alloc();
  v4[112] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[113] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #2 in CamBridgeImpl.asyncWarmUpIfSupported()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t *v11;
  int8x16_t v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t *v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 912) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "CamBridge: Trying to initialise CAAR", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 864);

  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + 56, v0 + 432, &demangling cache variable for type metadata for CaarProviding?);
  v6 = *(_QWORD *)(v0 + 456);
  if (v6)
  {
    v7 = *(_QWORD *)(v0 + 464);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 456));
    v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 8) + *(_QWORD *)(v7 + 8));
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 920) = v8;
    *v8 = v0;
    v8[1] = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
    return v51(v0 + 472, v6, v7);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 432, &demangling cache variable for type metadata for CaarProviding?);
  *(_OWORD *)(v0 + 472) = 0u;
  *(_OWORD *)(v0 + 488) = 0u;
  *(_QWORD *)(v0 + 504) = 0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 472, v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 552, v0 + 392, &demangling cache variable for type metadata for CaarRankingProviding?);
  if (!*(_QWORD *)(v0 + 416))
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 392, &demangling cache variable for type metadata for CaarRankingProviding?);
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v0 + 864);
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 392), v0 + 352);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 352, v0 + 304);
  *(_BYTE *)(v0 + 344) = 1;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CaarState((__int128 *)(v0 + 304), v10 + 192);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  outlined destroy of CamBridgeImpl.CaarState(v0 + 304);
  __swift_destroy_boxed_opaque_existential_1(v0 + 352);
  v11 = (uint64_t *)(v10 + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v11, v0 + 160);
  if (*(_BYTE *)(v0 + 201) == 3 && !*(_BYTE *)(v0 + 200) && *(_QWORD *)(v0 + 160) == 1)
  {
    v12 = vorrq_s8(*(int8x16_t *)(v0 + 168), *(int8x16_t *)(v0 + 184));
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
      swift_release();
      outlined destroy of CamBridgeImpl.CamState(v0 + 160);
LABEL_16:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  outlined destroy of CamBridgeImpl.CamState(v0 + 160);
  outlined init with copy of CamBridgeImpl.CamState(v11, v0 + 112);
  if (*(_BYTE *)(v0 + 153) == 1)
  {
    v13 = *(_BYTE *)(v0 + 152);
    __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  }
  else
  {
    outlined destroy of CamBridgeImpl.CamState(v0 + 112);
    v13 = 4;
  }
  *(_BYTE *)(v0 + 58) = v13;
  v14 = (id)AFCurrentUserInterfaceIdiom();
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
LABEL_22:
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 880) + 104);
    v20(*(_QWORD *)(v0 + 896), *MEMORY[0x1E0D97A98], *(_QWORD *)(v0 + 872));
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v23 = *(_QWORD *)(v21 + 16);
    v22 = *(_QWORD *)(v21 + 24);
    if (v23 >= v22 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v21);
    v24 = *(_QWORD *)(v0 + 896);
    v25 = *(_QWORD *)(v0 + 880);
    v26 = *(_QWORD *)(v0 + 872);
    *(_QWORD *)(v21 + 16) = v23 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v21+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v23, v24, v26);
    goto LABEL_26;
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    goto LABEL_22;
  v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 880) + 104);
  v21 = MEMORY[0x1E0DEE9D8];
LABEL_26:
  v20(*(_QWORD *)(v0 + 888), *MEMORY[0x1E0D97AA0], *(_QWORD *)(v0 + 872));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1, v21);
  v28 = *(_QWORD *)(v21 + 16);
  v27 = *(_QWORD *)(v21 + 24);
  if (v28 >= v27 >> 1)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v21);
  v29 = *(_QWORD *)(v0 + 888);
  v30 = *(_QWORD *)(v0 + 880);
  v31 = *(_QWORD *)(v0 + 872);
  v32 = *(_QWORD *)(v0 + 864);
  *(_QWORD *)(v21 + 16) = v28 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32))(v21+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v28, v29, v31);
  swift_beginAccess();
  *(_QWORD *)(v32 + 96) = v21;
  swift_bridgeObjectRelease();
  swift_retain_n();
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  v52 = (uint64_t *)(v32 + 96);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = *(_QWORD *)(v0 + 872);
    v36 = (uint8_t *)swift_slowAlloc();
    v37 = swift_slowAlloc();
    v54 = v37;
    *(_DWORD *)v36 = 136315138;
    v38 = swift_bridgeObjectRetain();
    v39 = MEMORY[0x1B5E434D4](v38, v35);
    v41 = v40;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 824) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v33, v34, "CamBridge: Adding feature flags: %s", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v37, -1, -1);
    MEMORY[0x1B5E44758](v36, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_1B4BE6000, v42, v43, "CamBridge: Trying to initialise CAM", v44, 2u);
    MEMORY[0x1B5E44758](v44, -1, -1);
  }
  v45 = *(_QWORD **)(v0 + 864);

  v46 = v45 + 2;
  v47 = v45[5];
  v48 = v45[6];
  __swift_project_boxed_opaque_existential_1(v46, v47);
  v49 = *v52;
  *(_QWORD *)(v0 + 936) = *v52;
  v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v48 + 8) + *(_QWORD *)(v48 + 8));
  swift_bridgeObjectRetain();
  v50 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 944) = v50;
  *v50 = v0;
  v50[1] = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
  return v53(v0 + 592, v49, v47, v48);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 928) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int8x16_t v3;
  char v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(_QWORD, _QWORD, _QWORD);
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  __swift_destroy_boxed_opaque_existential_1(v0 + 432);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 472, v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 552, v0 + 392, &demangling cache variable for type metadata for CaarRankingProviding?);
  if (!*(_QWORD *)(v0 + 416))
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 392, &demangling cache variable for type metadata for CaarRankingProviding?);
    goto LABEL_10;
  }
  v1 = *(_QWORD *)(v0 + 864);
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 392), v0 + 352);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 352, v0 + 304);
  *(_BYTE *)(v0 + 344) = 1;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CaarState((__int128 *)(v0 + 304), v1 + 192);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  outlined destroy of CamBridgeImpl.CaarState(v0 + 304);
  __swift_destroy_boxed_opaque_existential_1(v0 + 352);
  v2 = (uint64_t *)(v1 + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v2, v0 + 160);
  if (*(_BYTE *)(v0 + 201) == 3 && !*(_BYTE *)(v0 + 200) && *(_QWORD *)(v0 + 160) == 1)
  {
    v3 = vorrq_s8(*(int8x16_t *)(v0 + 168), *(int8x16_t *)(v0 + 184));
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
      swift_release();
      outlined destroy of CamBridgeImpl.CamState(v0 + 160);
LABEL_10:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  outlined destroy of CamBridgeImpl.CamState(v0 + 160);
  outlined init with copy of CamBridgeImpl.CamState(v2, v0 + 112);
  if (*(_BYTE *)(v0 + 153) == 1)
  {
    v4 = *(_BYTE *)(v0 + 152);
    __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  }
  else
  {
    outlined destroy of CamBridgeImpl.CamState(v0 + 112);
    v4 = 4;
  }
  *(_BYTE *)(v0 + 58) = v4;
  v6 = (id)AFCurrentUserInterfaceIdiom();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
LABEL_16:
    v12 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 880) + 104);
    v12(*(_QWORD *)(v0 + 896), *MEMORY[0x1E0D97A98], *(_QWORD *)(v0 + 872));
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v15 = *(_QWORD *)(v13 + 16);
    v14 = *(_QWORD *)(v13 + 24);
    if (v15 >= v14 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1, v13);
    v16 = *(_QWORD *)(v0 + 896);
    v17 = *(_QWORD *)(v0 + 880);
    v18 = *(_QWORD *)(v0 + 872);
    *(_QWORD *)(v13 + 16) = v15 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v13+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v15, v16, v18);
    goto LABEL_20;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
    goto LABEL_16;
  v12 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 880) + 104);
  v13 = MEMORY[0x1E0DEE9D8];
LABEL_20:
  v12(*(_QWORD *)(v0 + 888), *MEMORY[0x1E0D97AA0], *(_QWORD *)(v0 + 872));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
  v20 = *(_QWORD *)(v13 + 16);
  v19 = *(_QWORD *)(v13 + 24);
  if (v20 >= v19 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v13);
  v21 = *(_QWORD *)(v0 + 888);
  v22 = *(_QWORD *)(v0 + 880);
  v23 = *(_QWORD *)(v0 + 872);
  v24 = *(_QWORD *)(v0 + 864);
  *(_QWORD *)(v13 + 16) = v20 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(v13+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v20, v21, v23);
  swift_beginAccess();
  *(_QWORD *)(v24 + 96) = v13;
  swift_bridgeObjectRelease();
  swift_retain_n();
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  v43 = (uint64_t *)(v24 + 96);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = *(_QWORD *)(v0 + 872);
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v45 = v29;
    *(_DWORD *)v28 = 136315138;
    v30 = swift_bridgeObjectRetain();
    v31 = MEMORY[0x1B5E434D4](v30, v27);
    v33 = v32;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 824) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v25, v26, "CamBridge: Adding feature flags: %s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v28, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_1B4BE6000, v34, v35, "CamBridge: Trying to initialise CAM", v36, 2u);
    MEMORY[0x1B5E44758](v36, -1, -1);
  }
  v37 = *(_QWORD **)(v0 + 864);

  v38 = v37 + 2;
  v39 = v37[5];
  v40 = v37[6];
  __swift_project_boxed_opaque_existential_1(v38, v39);
  v41 = *v43;
  *(_QWORD *)(v0 + 936) = *v43;
  v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v40 + 8) + *(_QWORD *)(v40 + 8));
  swift_bridgeObjectRetain();
  v42 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 944) = v42;
  *v42 = v0;
  v42[1] = closure #2 in CamBridgeImpl.asyncWarmUpIfSupported();
  return v44(v0 + 592, v41, v39, v40);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 952) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(v0 + 58);
  v2 = *(_QWORD *)(v0 + 864);
  swift_release();
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 592), v0 + 512);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 512, v0 + 64);
  *(_BYTE *)(v0 + 104) = v1;
  *(_BYTE *)(v0 + 105) = 1;
  swift_beginAccess();
  outlined assign with copy of CamBridgeImpl.CamState((__int128 *)(v0 + 64), v2 + 144);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  outlined destroy of CamBridgeImpl.CamState(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 512);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v18;

  v1 = *(void **)(v0 + 928);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 432);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 928);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v18 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 848) = v6;
    v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 856) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "CamBridge: Error initializing CAAR(will retry on next Siri session): %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    v12 = *(void **)(v0 + 928);

  }
  v13 = *(void **)(v0 + 928);
  v14 = *(_QWORD *)(v0 + 864);
  *(_QWORD *)(v0 + 256) = v13;
  *(_BYTE *)(v0 + 296) = 2;
  swift_beginAccess();
  v15 = v13;
  outlined assign with copy of CamBridgeImpl.CaarState((__int128 *)(v0 + 256), v14 + 192);
  swift_endAccess();
  CamBridgeImpl.caarState.didset();
  outlined destroy of CamBridgeImpl.CaarState(v0 + 256);
  *(_QWORD *)(v0 + 16) = v13;
  *(_BYTE *)(v0 + 57) = 2;
  swift_beginAccess();
  v16 = v13;
  outlined assign with copy of CamBridgeImpl.CamState((__int128 *)(v0 + 16), v14 + 144);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  outlined destroy of CamBridgeImpl.CamState(v0 + 16);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v17;

  v1 = *(void **)(v0 + 952);
  swift_release();
  swift_bridgeObjectRelease();
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 952);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 840) = v6;
    v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 832) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "CamBridge: Error initializing CAM (will retry on next Siri session): %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    v12 = *(void **)(v0 + 952);

  }
  v13 = *(void **)(v0 + 952);
  v14 = *(_QWORD *)(v0 + 864) + 144;
  *(_QWORD *)(v0 + 208) = v13;
  *(_BYTE *)(v0 + 249) = 2;
  swift_beginAccess();
  v15 = v13;
  outlined assign with copy of CamBridgeImpl.CamState((__int128 *)(v0 + 208), v14);
  swift_endAccess();
  CamBridgeImpl.camState.didset();
  outlined destroy of CamBridgeImpl.CamState(v0 + 208);

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 552, &demangling cache variable for type metadata for CaarRankingProviding?);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v5[10] = swift_task_alloc();
  v6 = type metadata accessor for PluginAction();
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[14] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

void implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_QWORD *)(v0[7] + 16))
  {
    v1 = v0[13];
    v2 = v0[10];
    type metadata accessor for RankedAction();
    v3 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
    RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v2, v1);
    outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for ActionParaphrase?);
    v4 = (_QWORD *)swift_task_alloc();
    v0[15] = (uint64_t)v4;
    *v4 = v0;
    v4[1] = implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
    CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)(v0[5], v0[13], v0[8], v0[9]);
  }
  else
  {
    __break(1u);
  }
}

uint64_t implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;

  v4[13] = a1;
  v4[14] = a2;
  v7 = type metadata accessor for PluginAction();
  v4[15] = v7;
  v4[16] = *(_QWORD *)(v7 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = type metadata accessor for ConversationParaphraseResult(0);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[22] = static MessageBusActor.shared;
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc();
  v4[23] = v8;
  *v8 = v4;
  v8[1] = CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:);
  return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(a2, a4);
}

uint64_t CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 192) = a1;
  *(_QWORD *)(v3 + 200) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 192))
  {
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    v2 = *(_QWORD *)(v0 + 104);
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 2, 2, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD, void *, _QWORD, _QWORD, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[24];
  v2 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(_QWORD, void *, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v5 + 8)
                                                                                + *(_QWORD *)(v5 + 8));
  v6 = (_QWORD *)swift_task_alloc();
  v0[27] = v6;
  *v6 = v0;
  v6[1] = CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:);
  return v8(v0[21], &async function pointer to closure #1 in RemoteConversationClient.paraphrase(), 0, v0[19], v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 160);
  swift_release();
  outlined init with copy of ConversationHelperInput(v1, v2, type metadata accessor for ConversationParaphraseResult);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = *(uint64_t **)(v0 + 160);
    v5 = *v3;
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 16))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
    swift_bridgeObjectRetain();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 128);
    if (v8)
    {
      v23 = v5;
      v13 = swift_slowAlloc();
      v24 = swift_slowAlloc();
      *(_DWORD *)v13 = 136315394;
      v25 = v24;
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B770], MEMORY[0x1E0D9B788]);
      v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v4, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v6, v7, "CamBridge: Received ActionParaphrase for %s with error %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v24, -1, -1);
      MEMORY[0x1B5E44758](v13, -1, -1);
      swift_release_n();

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      swift_release();
    }
    outlined destroy of CamOutput(v9, type metadata accessor for ConversationParaphraseResult);
    v19 = 1;
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 104);
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 168), type metadata accessor for ConversationParaphraseResult);
    swift_release_n();
    v18 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, v16, v18);
    v19 = 0;
  }
  v20 = *(_QWORD *)(v0 + 104);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, v19, 2, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  swift_release();
  swift_release_n();
  v1 = *(void **)(v0 + 224);
  if (one-time initialization token for executor != -1)
    swift_once();
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v7 = v1;
  v8 = v1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v13 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 120);
  if (v11)
  {
    v15 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v15 = 136315394;
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B770], MEMORY[0x1E0D9B788]);
    v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 12) = 2080;
    swift_getErrorValue();
    v18 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v9, v10, "CamBridge: Did not receive any ActionParaphrase for %s. %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v23, -1, -1);
    MEMORY[0x1B5E44758](v15, -1, -1);

  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v20 = *(_QWORD *)(v0 + 104);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 2, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  swift_release();
  v1 = *(void **)(v0 + 200);
  if (one-time initialization token for executor != -1)
    swift_once();
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v7 = v1;
  v8 = v1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v13 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 120);
  if (v11)
  {
    v15 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v15 = 136315394;
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B770], MEMORY[0x1E0D9B788]);
    v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 12) = 2080;
    swift_getErrorValue();
    v18 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v9, v10, "CamBridge: Did not receive any ActionParaphrase for %s. %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v23, -1, -1);
    MEMORY[0x1B5E44758](v15, -1, -1);

  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v20 = *(_QWORD *)(v0 + 104);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 2, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v5[10] = swift_task_alloc();
  v6 = type metadata accessor for PluginAction();
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[14] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

void implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_QWORD *)(v0[7] + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v1 = v0[13];
    v2 = v0[10];
    type metadata accessor for RankedAction();
    v3 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
    RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v2, v1);
    outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for ActionParaphrase?);
    v4 = (_QWORD *)swift_task_alloc();
    v0[15] = (uint64_t)v4;
    *v4 = v0;
    v4[1] = implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
    CamBridgeImpl.probePluginActionForActionParaphrase(pluginAction:conversationHelper:conversationHelperInput:)(v0[5], v0[13], v0[8], v0[9]);
  }
}

uint64_t implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

uint64_t ParaphraseProbeResult.toActionParaphrase()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v4 = type metadata accessor for ParaphraseProbeResult();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v2, (uint64_t)v6, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 2, v8);
  v10 = type metadata accessor for ActionParaphrase();
  v11 = *(_QWORD *)(v10 - 8);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
    return outlined destroy of CamOutput((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v6, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = type metadata accessor for UUID();
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = specialized Dictionary._Variant.subscript.modify(v2, (uint64_t)v5);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t CamBridgeImpl.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for CaarProviding?);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  outlined destroy of CamBridgeImpl.CamState(v0 + 144);
  outlined destroy of CamBridgeImpl.CaarState(v0 + 192);
  swift_release();
  return v0;
}

uint64_t CamBridgeImpl.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for CaarProviding?);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  outlined destroy of CamBridgeImpl.CamState(v0 + 144);
  outlined destroy of CamBridgeImpl.CaarState(v0 + 192);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CamBridge.camBridgeState.getter in conformance CamBridgeImpl()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t protocol witness for CamBridge.asyncWarmUpIfSupported() in conformance CamBridgeImpl()
{
  return CamBridgeImpl.asyncWarmUpIfSupported()();
}

uint64_t protocol witness for CamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:) in conformance CamBridgeImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for CamBridge.commit(action:) in conformance CamBridgeImpl(char a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return CamBridgeImpl.commit(action:)(a1);
}

uint64_t RealCamProvider.provideCamInstance(camEnabledFeatures:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  type metadata accessor for CamSingletonProvider();
  result = static CamSingletonProvider.cam(camEnabledFeatures:)();
  if (!v1)
  {
    v4 = type metadata accessor for RealCamWrapper();
    v5 = swift_allocObject();
    result = outlined init with take of ReferenceResolutionClientProtocol(&v6, v5 + 16);
    a1[3] = v4;
    a1[4] = (uint64_t)&protocol witness table for RealCamWrapper;
    *a1 = v5;
  }
  return result;
}

uint64_t RealCamWrapper.__allocating_init(wrapping:)(__int128 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(a1, v2 + 16);
  return v2;
}

uint64_t protocol witness for CamProviding.provideCamInstance(camEnabledFeatures:) in conformance RealCamProvider(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  type metadata accessor for CamSingletonProvider();
  static CamSingletonProvider.cam(camEnabledFeatures:)();
  v3 = type metadata accessor for RealCamWrapper();
  v4 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v6, v4 + 16);
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for RealCamWrapper;
  *a1 = v4;
  return protocol witness for CamProviding.provideCamInstance(camEnabledFeatures:) in conformance RealCamProvider(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t RealCaarProvider.provideCaarInstance()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;

  type metadata accessor for CaarProvider();
  static CaarProvider.caar()();
  v2 = type metadata accessor for RealCaarWrapper();
  v3 = swift_allocObject();
  result = outlined init with take of ReferenceResolutionClientProtocol(&v5, v3 + 16);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for RealCaarWrapper;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for CaarProviding.provideCaarInstance() in conformance RealCaarProvider(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  type metadata accessor for CaarProvider();
  static CaarProvider.caar()();
  v3 = type metadata accessor for RealCaarWrapper();
  v4 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v6, v4 + 16);
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for RealCaarWrapper;
  *a1 = v4;
  return protocol witness for CamProviding.provideCamInstance(camEnabledFeatures:) in conformance RealCamProvider(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t RealCamWrapper.wrapped.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t RealCamWrapper.init(wrapping:)(__int128 *a1)
{
  uint64_t v1;

  outlined init with take of ReferenceResolutionClientProtocol(a1, v1 + 16);
  return v1;
}

uint64_t RealCamWrapper.getCamAction(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for CamResponse();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RealCamWrapper.getCamAction(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 32) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 32) + 40));
  dispatch thunk of Cam.action(request:)();
  CamResponse.camAction.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RealCamWrapper.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t RealCamWrapper.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t RealCaarWrapper.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

unint64_t ParaphraseProbeResult.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for ActionParaphrase();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ParaphraseProbeResult();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v1, (uint64_t)v8, v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 2, v10);
  if (v11)
  {
    v12 = 0xD000000000000010;
    if (v11 != 1)
      return 0xD00000000000001DLL;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ActionParaphrase and conformance ActionParaphrase, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9BBC8], MEMORY[0x1E0D9BBE8]);
    v12 = dispatch thunk of CustomStringConvertible.description.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v12;
}

void (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x68uLL);
  *a1 = v4;
  v5 = type metadata accessor for UUID();
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v4[10] = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 16))(v7, a2, v5);
  v4[11] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[12] = specialized _NativeDictionary.subscript.modify(v4 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, int64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v10 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  if (v14)
  {
    v15 = *a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * a4) = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      specialized _NativeDictionary._insert(at:key:value:)(a4, v13, v14, v15);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  int8x16_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  __int16 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _UNKNOWN **v41;
  __int128 v42;
  ValueMetadata *v43;
  _UNKNOWN **v44;

  v7 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v31 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v31 - v15;
  v43 = &type metadata for RealCamProvider;
  v44 = &protocol witness table for RealCamProvider;
  v40 = type metadata accessor for TrialExperimentationAssetManager();
  v41 = &protocol witness table for TrialExperimentationAssetManager;
  *(_QWORD *)&v39 = a3;
  *(_QWORD *)(a4 + 96) = MEMORY[0x1E0DEE9D8];
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  if (v7 == 2)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "CamBridge: CAAR is supported on this device", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    *(_OWORD *)(a4 + 192) = 0u;
    *(_QWORD *)(a4 + 224) = 0;
    *(_OWORD *)(a4 + 208) = 0u;
    *(_BYTE *)(a4 + 232) = 3;
    v34.i64[0] = (uint64_t)&type metadata for RealCaarProvider;
    v34.i64[1] = (uint64_t)&protocol witness table for RealCaarProvider;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v36, &demangling cache variable for type metadata for CaarProviding?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v32, (uint64_t)&v36, &demangling cache variable for type metadata for CaarProviding?);
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CaarState((uint64_t *)(a4 + 192), (uint64_t)&v32);
    if (v35 == 3 && v32 == 1)
    {
      v21 = vorrq_s8(v33, v34);
      if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)))
      {
        outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v32);
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_1B4BE6000, v22, v23, "CamBridge: Marking CAM as unsupported as CAM cannot work without CAAR results", v24, 2u);
          MEMORY[0x1B5E44758](v24, -1, -1);
        }

        outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for CaarProviding?);
        goto LABEL_16;
      }
    }
    outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v32);
    v26 = specialized static CamBridgeImpl.isCamSupportedOnThisDevice.getter();
    outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for CaarProviding?);
    if ((v26 & 1) == 0)
    {
LABEL_16:
      *(_QWORD *)(a4 + 144) = 1;
      *(_OWORD *)(a4 + 152) = 0u;
      *(_OWORD *)(a4 + 168) = 0u;
      *(_WORD *)(a4 + 184) = 768;
      goto LABEL_19;
    }
    *(_OWORD *)(a4 + 169) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_BYTE *)(a4 + 185) = 3;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v36, &demangling cache variable for type metadata for CaarProviding?);
    if ((v7 & 1) != 0)
    {
      *(_QWORD *)(a4 + 224) = 0;
      *(_OWORD *)(a4 + 192) = 0u;
      *(_OWORD *)(a4 + 208) = 0u;
      *(_BYTE *)(a4 + 232) = 3;
      outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v36, &demangling cache variable for type metadata for CaarProviding?);
      outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for CaarProviding?);
      v25 = 0;
    }
    else
    {
      v25 = 1;
      *(_QWORD *)(a4 + 192) = 1;
      *(_OWORD *)(a4 + 200) = 0u;
      *(_OWORD *)(a4 + 216) = 0u;
      *(_BYTE *)(a4 + 232) = 3;
      v36 = 0u;
      v37 = 0u;
      v38 = 0;
      outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for CaarProviding?);
    }
    v32 = v25;
    v33 = 0u;
    v34 = 0u;
    v35 = 768;
    outlined init with take of CamBridgeImpl.CamState((__int128 *)&v32, (_OWORD *)(a4 + 144));
  }
LABEL_19:
  v27 = type metadata accessor for UUID();
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v28(v16, 1, 1, v27);
  v28(v14, 1, 1, v27);
  v28(v11, 1, 1, v27);
  type metadata accessor for CamBridgeState();
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v16, v29 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v14, v29 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v11, v29 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(a4 + 240) = v29;
  outlined init with take of ReferenceResolutionClientProtocol(&v42, a4 + 16);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v36, a4 + 56, &demangling cache variable for type metadata for CaarProviding?);
  outlined init with take of ReferenceResolutionClientProtocol(&v39, a4 + 104);
  return a4;
}

uint64_t specialized CamBridgeImpl.init(forceSupported:camProvider:caarProvider:trialExperimentManager:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  int8x16_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  __int16 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v43 = a3;
  v15 = a1;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v44 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v42 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v42 - v22;
  v56 = a6;
  v57 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a2, a6);
  v53 = a7;
  v54 = a9;
  v25 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v25, a4, a7);
  *(_QWORD *)(a5 + 96) = MEMORY[0x1E0DEE9D8];
  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  if (v15 == 2)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1B4BE6000, v27, v28, "CamBridge: CAAR is supported on this device", v29, 2u);
      MEMORY[0x1B5E44758](v29, -1, -1);
    }

    *(_OWORD *)(a5 + 192) = 0u;
    *(_QWORD *)(a5 + 224) = 0;
    *(_OWORD *)(a5 + 208) = 0u;
    *(_BYTE *)(a5 + 232) = 3;
    v47.i64[0] = (uint64_t)&type metadata for RealCaarProvider;
    v47.i64[1] = (uint64_t)&protocol witness table for RealCaarProvider;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v49, &demangling cache variable for type metadata for CaarProviding?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v45, (uint64_t)&v49, &demangling cache variable for type metadata for CaarProviding?);
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CaarState((uint64_t *)(a5 + 192), (uint64_t)&v45);
    if (v48 == 3 && v45 == 1)
    {
      v30 = vorrq_s8(v46, v47);
      if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)))
      {
        outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v45);
        v31 = Logger.logObject.getter();
        v32 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v33 = 0;
          _os_log_impl(&dword_1B4BE6000, v31, v32, "CamBridge: Marking CAM as unsupported as CAM cannot work without CAAR results", v33, 2u);
          MEMORY[0x1B5E44758](v33, -1, -1);
        }

        outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for CaarProviding?);
        goto LABEL_16;
      }
    }
    outlined destroy of CamBridgeImpl.CaarState((uint64_t)&v45);
    v35 = specialized static CamBridgeImpl.isCamSupportedOnThisDevice.getter();
    outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for CaarProviding?);
    if ((v35 & 1) == 0)
    {
LABEL_16:
      *(_QWORD *)(a5 + 144) = 1;
      *(_OWORD *)(a5 + 152) = 0u;
      *(_OWORD *)(a5 + 168) = 0u;
      *(_WORD *)(a5 + 184) = 768;
      goto LABEL_19;
    }
    *(_OWORD *)(a5 + 169) = 0u;
    *(_OWORD *)(a5 + 144) = 0u;
    *(_OWORD *)(a5 + 160) = 0u;
    *(_BYTE *)(a5 + 185) = 3;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v49, &demangling cache variable for type metadata for CaarProviding?);
    if ((v15 & 1) != 0)
    {
      *(_QWORD *)(a5 + 224) = 0;
      *(_OWORD *)(a5 + 192) = 0u;
      *(_OWORD *)(a5 + 208) = 0u;
      *(_BYTE *)(a5 + 232) = 3;
      v36 = v43;
      outlined init with copy of ReferenceResolutionClientProtocol?(v43, (uint64_t)&v49, &demangling cache variable for type metadata for CaarProviding?);
      outlined destroy of ReferenceResolutionClientProtocol?(v36, &demangling cache variable for type metadata for CaarProviding?);
      v34 = 0;
    }
    else
    {
      v34 = 1;
      *(_QWORD *)(a5 + 192) = 1;
      *(_OWORD *)(a5 + 200) = 0u;
      *(_OWORD *)(a5 + 216) = 0u;
      *(_BYTE *)(a5 + 232) = 3;
      v49 = 0u;
      v50 = 0u;
      v51 = 0;
      outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for CaarProviding?);
    }
    v45 = v34;
    v46 = 0u;
    v47 = 0u;
    v48 = 768;
    outlined init with take of CamBridgeImpl.CamState((__int128 *)&v45, (_OWORD *)(a5 + 144));
  }
LABEL_19:
  v37 = type metadata accessor for UUID();
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
  v38(v23, 1, 1, v37);
  v38(v21, 1, 1, v37);
  v39 = (uint64_t)v44;
  v38(v44, 1, 1, v37);
  type metadata accessor for CamBridgeState();
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v23, v40 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v21, v40 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v39, v40 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(a5 + 240) = v40;
  outlined init with take of ReferenceResolutionClientProtocol(&v55, a5 + 16);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v49, a5 + 56, &demangling cache variable for type metadata for CaarProviding?);
  outlined init with take of ReferenceResolutionClientProtocol(&v52, a5 + 104);
  return a5;
}

uint64_t specialized static CamBridgeImpl.isCamSupportedOnThisDevice.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unsigned __int8 *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v33[2];
  unsigned int v34;
  uint64_t v35;
  uint64_t v36[2];

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v4 = (unsigned __int8 *)(static CamFeatureFlag.forceEnabled + 16);
  v5 = (os_unfair_lock_s *)(static CamFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static CamFeatureFlag.forceEnabled + 20));
  closure #1 in CamFeatureFlag.isEnabled.getter(v4, v36);
  os_unfair_lock_unlock(v5);
  v6 = LOBYTE(v36[0]);
  if (LOBYTE(v36[0]) == 1)
  {
    v7 = (id)AFCurrentUserInterfaceIdiom();
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    if (v8 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v10 != v11)
      _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v13, v0);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v33[1] = v13;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v34 = v6;
    v19 = v18;
    v36[0] = v18;
    v33[0] = v1;
    *(_DWORD *)v17 = 136315138;
    v20 = (unsigned __int8 *)(static CamFeatureFlag.forceEnabled + 16);
    v21 = (os_unfair_lock_s *)(static CamFeatureFlag.forceEnabled + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(static CamFeatureFlag.forceEnabled + 20));
    closure #1 in CamFeatureFlag.isEnabled.getter(v20, &v35);
    os_unfair_lock_unlock(v21);
    if ((_BYTE)v35)
      v22 = 3042927;
    else
      v22 = 778462831;
    if ((_BYTE)v35)
      v23 = 0xE300000000000000;
    else
      v23 = 0xE400000000000000;
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v14, v15, "CamBridge: CAM feature flag is %s", v17, 0xCu);
    swift_arrayDestroy();
    v24 = v19;
    v6 = v34;
    MEMORY[0x1B5E44758](v24, -1, -1);
    MEMORY[0x1B5E44758](v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v33[0] + 8))(v3, v0);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  v25 = static os_log_type_t.default.getter();
  v26 = Logger.logObject.getter();
  v27 = v25;
  if (os_log_type_enabled(v26, v25))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    *(_DWORD *)v28 = 136315138;
    v36[0] = v29;
    if ((_DWORD)v6)
      v30 = 0x6574726F70707573;
    else
      v30 = 0x7070757320746F6ELL;
    if ((_DWORD)v6)
      v31 = 0xEA00000000002E64;
    else
      v31 = 0xEE002E646574726FLL;
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v26, v27, "CamBridge: CAM is %s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v28, -1, -1);
  }

  return v6;
}

uint64_t sub_1B4CEDB6C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in CamBridgeImpl.asyncWarmUpIfSupported()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #2 in CamBridgeImpl.asyncWarmUpIfSupported()(a1, v4, v5, v6);
}

uint64_t sub_1B4CEDC10()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CamBridgeImpl.asyncWarmUpIfSupported()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in CamBridgeImpl.asyncWarmUpIfSupported()();
}

uint64_t outlined init with take of ConversationHelperInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationHelperInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationHelperInput(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(a1, v5, v6, v7, v8);
}

uint64_t sub_1B4CEDD74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)))(a1, v4);
}

uint64_t partial apply for implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationHelperInput(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(a1, v5, v6, v7, v8);
}

uint64_t type metadata accessor for RealCamWrapper()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for RealCaarWrapper()
{
  return objc_opt_self();
}

uint64_t sub_1B4CEDEE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;

  v3 = (uint64_t *)(*a1 + 144);
  swift_beginAccess();
  return outlined init with copy of CamBridgeImpl.CamState(v3, a2);
}

uint64_t sub_1B4CEDF30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;

  v3 = (uint64_t *)(*a1 + 192);
  swift_beginAccess();
  return outlined init with copy of CamBridgeImpl.CaarState(v3, a2);
}

uint64_t sub_1B4CEDF80@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 240);
  return swift_retain();
}

uint64_t type metadata accessor for CamBridgeImpl()
{
  return objc_opt_self();
}

uint64_t method lookup function for CamBridgeImpl()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CamBridgeImpl.__allocating_init(forceSupported:camProvider:caarProvider:trialExperimentManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CamBridgeImpl.CamState(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    switch(v4)
    {
      case 2u:

        break;
      case 1u:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    v5 = *(unsigned __int8 *)(a2 + 41);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 41) = 2;
    }
    else if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      *(_BYTE *)(a1 + 41) = 1;
    }
    else if (v5)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 41) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CamBridgeImpl.CamState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CamBridgeImpl.CamState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for CamBridgeImpl.CamState(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CamBridgeImpl.CamState()
{
  return &type metadata for CamBridgeImpl.CamState;
}

uint64_t assignWithCopy for CamBridgeImpl.CaarState(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    switch(v4)
    {
      case 2u:

        break;
      case 1u:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v6 = *(void **)a2;
      v7 = v6;
      *(_QWORD *)a1 = v6;
      *(_BYTE *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      v8 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v9 = *a2;
      v10 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CamBridgeImpl.CaarState(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    switch(v4)
    {
      case 2u:

        break;
      case 1u:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CamBridgeImpl.CaarState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CamBridgeImpl.CaarState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CamBridgeImpl.CaarState(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t destructiveInjectEnumTag for CamBridgeImpl.CaarState(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CamBridgeImpl.CaarState()
{
  return &type metadata for CamBridgeImpl.CaarState;
}

uint64_t dispatch thunk of CamProviding.provideCamInstance(camEnabledFeatures:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CaarProviding.provideCaarInstance()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 8) + *(_QWORD *)(a3 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

ValueMetadata *type metadata accessor for RealCamProvider()
{
  return &type metadata for RealCamProvider;
}

ValueMetadata *type metadata accessor for RealCaarProvider()
{
  return &type metadata for RealCaarProvider;
}

uint64_t dispatch thunk of CamActionProviding.getCamAction(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 8) + *(_QWORD *)(a8 + 8));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t method lookup function for RealCamWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RealCamWrapper.__allocating_init(wrapping:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for RealCaarWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t *initializeBufferWithCopyOfBuffer for ParaphraseProbeResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for ActionParaphrase();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for ParaphraseProbeResult(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for ActionParaphrase();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for ParaphraseProbeResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for ActionParaphrase();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for ParaphraseProbeResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for ActionParaphrase();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)a1, &demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for ActionParaphrase();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for ParaphraseProbeResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for ActionParaphrase();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for ParaphraseProbeResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for ActionParaphrase();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)a1, &demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for ActionParaphrase();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParaphraseProbeResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4CEEC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ParaphraseProbeResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4CEEC9C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for ParaphraseProbeResult(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for ParaphraseProbeResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t type metadata completion function for ParaphraseProbeResult()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ActionParaphrase();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t protocol witness for CamProviding.provideCamInstance(camEnabledFeatures:) in conformance RealCamProvider(uint64_t (*a1)(void))
{
  return a1();
}

_OWORD *outlined init with take of CamBridgeImpl.CamState(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(__int128 *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t CamBridgeState.__allocating_init(requestLoggingId:camLoggingId:caarLoggingId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of UUID?(a1, v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId);
  outlined init with take of UUID?(a2, v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId);
  outlined init with take of UUID?(a3, v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId);
  return v6;
}

SiriKitRuntime::ConversationAction_optional __swiftcall CamBridgeState.getCamAction(rcId:)(Swift::String rcId)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  unint64_t v5;
  char v6;
  SiriKitRuntime::ConversationAction_optional v7;

  object = rcId._object;
  countAndFlagsBits = rcId._countAndFlagsBits;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v6 & 1) != 0)
      v7.value = *(_BYTE *)(*(_QWORD *)(v4 + 56) + v5);
    else
      v7.value = SiriKitRuntime_ConversationAction_unknownDefault;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.value = SiriKitRuntime_ConversationAction_unknownDefault;
  }
  swift_endAccess();
  return v7;
}

uint64_t CamBridgeState.requestLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UUID?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, a1);
}

uint64_t CamBridgeState.camLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UUID?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, a1);
}

uint64_t CamBridgeState.caarLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UUID?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, a1);
}

uint64_t CamBridgeState.init(requestLoggingId:camLoggingId:caarLoggingId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of UUID?(a1, v3 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId);
  outlined init with take of UUID?(a2, v3 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId);
  outlined init with take of UUID?(a3, v3 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId);
  return v3;
}

uint64_t CamBridgeState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId);
  return v0;
}

uint64_t ObjC metadata update function for CamBridgeState()
{
  return type metadata accessor for CamBridgeState();
}

void type metadata completion function for CamBridgeState()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for CamBridgeState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CamBridgeState.__allocating_init(requestLoggingId:camLoggingId:caarLoggingId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

uint64_t CamFeatureFlag.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static CamFeatureFlag.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static CamFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static CamFeatureFlag.forceEnabled + 20));
  closure #1 in CamFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t one-time initialization function for forceEnabled()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  static CamFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  static CaptureSiriXToolOutputFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  static ConversationBridgeFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  static FlexibleAnnounceFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  static SiriCAMAppDisambiguationFeatureFlag.forceEnabled = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  static StopRepromptFeatureFlag.forceEnabled = result;
  return result;
}

uint64_t *CamFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static CamFeatureFlag.forceEnabled;
}

uint64_t static CamFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return swift_retain();
}

const char *CamFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *CamFeatureFlag.feature.getter()
{
  return "conversational_action_manager";
}

unsigned __int8 *closure #1 in CamFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  char v4;
  char v5;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v3 = *result;
  if (v3 == 2)
  {
    v7 = &type metadata for CamFeatureFlag;
    v8 = lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag();
    v4 = isFeatureEnabled(_:)();
    result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v5 = v4 & 1;
  }
  else
  {
    v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static CamFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void CamFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int CamFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CamFeatureFlag()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CamFeatureFlag()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CamFeatureFlag()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag;
  if (!lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CamFeatureFlag, &type metadata for CamFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag;
  if (!lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CamFeatureFlag, &type metadata for CamFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance CamFeatureFlag()
{
  return "conversational_action_manager";
}

uint64_t getEnumTagSinglePayload for CamFeatureFlag(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CamFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4CEF4F0 + 4 * byte_1B4EE5CD8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4CEF510 + 4 * byte_1B4EE5CDD[v4]))();
}

_BYTE *sub_1B4CEF4F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4CEF510(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4CEF518(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4CEF520(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4CEF528(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4CEF530(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for CamFeatureFlag()
{
  return 0;
}

ValueMetadata *type metadata accessor for CamFeatureFlag()
{
  return &type metadata for CamFeatureFlag;
}

uint64_t CamParse.asLinkParse(userData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  _QWORD v44[2];
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[32];

  v3 = v2;
  v50 = a2;
  v5 = type metadata accessor for USOParse();
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v45 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v46 = (char *)v44 - v8;
  v9 = type metadata accessor for Parse();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v49 = (_QWORD *)((char *)v44 - v14);
  v15 = type metadata accessor for CamParse();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v3, v15);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  v20 = *MEMORY[0x1E0D97A40];
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v19 == v20
    && *(_QWORD *)(a1 + 16)
    && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x80000001B4EF7CA0), (v22 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)v53), (swift_dynamicCast() & 1) != 0))
  {
    v23 = v52;
    v44[1] = v51;
    v24 = v49;
    CamParse.asSKEParse()(v49);
    v25 = v10;
    v26 = v9;
    (*(void (**)(char *, _QWORD *, uint64_t))(v10 + 16))(v13, v24, v9);
    if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v13, v9) == *MEMORY[0x1E0D9C678])
    {
      v44[0] = v23;
      (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
      v28 = v46;
      v27 = v47;
      v29 = v48;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v46, v13, v48);
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v45, v28, v29);
      if (*(_QWORD *)(a1 + 16))
      {
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E456B6E696CLL, 0xEE00657079547974);
        if ((v31 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v30, (uint64_t)v53);
          swift_dynamicCast();
        }
      }
      v37 = v50;
      LinkParse.init(usoParse:actionId:entityId:entityDisplayName:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v49, v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v37, *MEMORY[0x1E0D9C680], v9);
      v36 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v39 = *(void (**)(char *, uint64_t))(v10 + 8);
      v39(v13, v9);
      if (one-time initialization token for executor != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v43 = 0;
        _os_log_impl(&dword_1B4BE6000, v41, v42, "CamBridge: Could not get USO parse to add to Link Parse", v43, 2u);
        MEMORY[0x1B5E44758](v43, -1, -1);
      }

      v39((char *)v49, v9);
      v36 = 1;
      v37 = v50;
    }
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    v25 = v10;
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1B4BE6000, v33, v34, "CamBridge: Could not retrieve details from RankedAction for constructing a link parse.", v35, 2u);
      MEMORY[0x1B5E44758](v35, -1, -1);
    }

    v36 = 1;
    v37 = v50;
    v26 = v9;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v37, v36, 1, v26);
}

BOOL static ConversationAction.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ConversationAction.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int ConversationAction.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ConversationAction and conformance ConversationAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationAction and conformance ConversationAction;
  if (!lazy protocol witness table cache variable for type ConversationAction and conformance ConversationAction)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationAction, &type metadata for ConversationAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationAction and conformance ConversationAction);
  }
  return result;
}

_QWORD *assignWithCopy for CamOutput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Input();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for CamOutput(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t dispatch thunk of CamBridge.camBridgeState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CamBridge.asyncWarmUpIfSupported()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a10 + 24) + *(_QWORD *)(a10 + 24));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 16) = v18;
  *v18 = v10;
  v18[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t dispatch thunk of CamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a11 + 32) + *(_QWORD *)(a11 + 32));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 16) = v18;
  *v18 = v11;
  v18[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t dispatch thunk of CamBridge.commit(rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 40) + *(_QWORD *)(a4 + 40));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CamBridge.commit(action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 48) + *(_QWORD *)(a3 + 48));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of CamBridge.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 56)
                                                                                     + *(_QWORD *)(a6 + 56));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of CamBridge.setupNewTurn(executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CamBridge.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t storeEnumTagSinglePayload for ConversationAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B4CF0030 + 4 * byte_1B4EE5DA5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B4CF0064 + 4 * asc_1B4EE5DA0[v4]))();
}

uint64_t sub_1B4CF0064(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CF006C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CF0074);
  return result;
}

uint64_t sub_1B4CF0080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CF0088);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B4CF008C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CF0094(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

SiriKitRuntime::CAMRootFlowAffinityScorer __swiftcall CAMRootFlowAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::CAMRootFlowAffinityScorer result;

  v0 = (void *)0x80000001B4EF6930;
  v1 = 0xD000000000000020;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t CAMRootFlowAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized CAMRootFlowAffinityScorer.repeatRecentDialogIntentAffinity(intent:environment:)(unsigned __int8 a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = a1;
  v2 = a1 - 1;
  type metadata accessor for RecentDialogsEnvironmentProvider();
  lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider();
  v3 = *(_QWORD *)dispatch thunk of SiriEnvironment.subscript.getter();
  if (v2 > 1)
  {
    v12 = (*(uint64_t (**)(void))(v3 + 128))();
    swift_release();
    if ((v12 & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v7))
        goto LABEL_16;
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v24 = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x80000001B4EF7D20, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v11 = "CAMRootFlowAffinityScorer: has a dialog to repeat, returning high confidence for %s.";
      goto LABEL_15;
    }
  }
  else
  {
    v4 = (*(uint64_t (**)(void))(v3 + 152))();
    swift_release();
    if ((v4 & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v7))
        goto LABEL_16;
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v24 = v9;
      if (v1 == 2)
        v10 = 0x80000001B4EF7CC0;
      else
        v10 = 0x80000001B4EF7CF0;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, v10, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v11 = "CAMRootFlowAffinityScorer: has a dialog to go back to, returning high confidence for %s.";
LABEL_15:
      _os_log_impl(&dword_1B4BE6000, v6, v7, v11, v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);
LABEL_16:

      return 3;
    }
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v24 = v19;
    *(_DWORD *)v18 = 136315138;
    v20 = 0x80000001B4EF7CF0;
    if (v1 != 1)
      v20 = 0x80000001B4EF7CC0;
    if (v1)
      v21 = v20;
    else
      v21 = 0x80000001B4EF7D20;
    v22 = v19;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v16, v17, "CAMRootFlowAffinityScorer: no replayable recent dialogs for %s, returning low confidence.", v18, 0xCu);
    v14 = 1;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);

  }
  else
  {

    return 1;
  }
  return v14;
}

uint64_t specialized CAMRootFlowAffinityScorer.taskInterruptionAffinity(input:environemnt:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  const char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v2 = type metadata accessor for Siri_Nlu_External_UserParse();
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  MEMORY[0x1E0C80A78](v2);
  v59 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for USOParse();
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  MEMORY[0x1E0C80A78](v4);
  v58 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Input();
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v65 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v66 = (char *)&v57 - v9;
  v10 = type metadata accessor for UniversalActionFeatureFlags();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Parse();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v64 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v57 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v57 - v21;
  Input.parse.getter();
  v23 = Parse.hasDirectDismissal.getter();
  v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v22, v14);
  if ((v23 & 1) == 0)
  {
    Input.parse.getter();
    v30 = Parse.hasThankYou.getter();
    v24(v22, v14);
    if ((v30 & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        v29 = "CAMRootFlowAffinityScorer Got thank you.";
        goto LABEL_11;
      }
LABEL_13:
      v32 = 3;
      goto LABEL_14;
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0D9C380], v10);
    v34 = UniversalActionFeatureFlags.isEnabled.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v36 = v66;
    v35 = v67;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    v37(v66, a1, v68);
    if ((v34 & 1) != 0)
    {
      Input.parse.getter();
      v38 = Parse.hasCancelled.getter();
      v24(v20, v14);
      v39 = v65;
      v40 = v68;
      v37(v65, (uint64_t)v36, v68);
      if ((v38 & 1) != 0)
      {
        v41 = *(void (**)(char *, uint64_t))(v67 + 8);
        v41(v39, v40);
        v41(v36, v40);
LABEL_21:
        v44 = v64;
        Input.parse.getter();
        if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v44, v14) == *MEMORY[0x1E0D9C678])
        {
          (*(void (**)(char *, uint64_t))(v15 + 96))(v44, v14);
          v45 = v60;
          v46 = v58;
          v47 = v44;
          v48 = v61;
          (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v47, v61);
          v49 = v59;
          v50 = USOParse.userParse.getter();
          v51 = MEMORY[0x1B5E3FA6C](v50);
          (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v63);
          v52 = *(_QWORD *)(v51 + 16);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v48);
          if (v52 > 1)
            return 0;
        }
        else
        {
          v24(v44, v14);
        }
        if (one-time initialization token for executor != -1)
          swift_once();
        v55 = type metadata accessor for Logger();
        __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
        v26 = Logger.logObject.getter();
        v56 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v26, v56))
        {
          v32 = 1;
          goto LABEL_14;
        }
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_1B4BE6000, v26, v56, "CAMRootFlowAffinityScorer Got user cancelled.", v28, 2u);
        v32 = 1;
        goto LABEL_12;
      }
      Input.parse.getter();
      v42 = Parse.hasRejected.getter();
      v24(v22, v14);
      v43 = *(void (**)(char *, uint64_t))(v67 + 8);
      v43(v39, v40);
      v43(v36, v40);
      if ((v42 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v68);
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
    v26 = Logger.logObject.getter();
    v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v54))
    {
      v32 = 0;
      goto LABEL_14;
    }
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1B4BE6000, v26, v54, "CAMRootFlowAffinityScorer Got an unsupported universal action.", v28, 2u);
    v32 = 0;
    goto LABEL_12;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v26, v27))
    goto LABEL_13;
  v28 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v28 = 0;
  v29 = "CAMRootFlowAffinityScorer Got direct dismissal.";
LABEL_11:
  _os_log_impl(&dword_1B4BE6000, v26, v27, v29, v28, 2u);
  v32 = 3;
LABEL_12:
  MEMORY[0x1B5E44758](v28, -1, -1);
LABEL_14:

  return v32;
}

uint64_t specialized CAMRootFlowAffinityScorer.score(input:environment:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned __int8 v6;
  void (*v7)(char *, uint64_t);
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  v2 = type metadata accessor for Parse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  v6 = specialized static RepeatRecentDialogIntent.fromParse(_:)((uint64_t)v5);
  v7 = *(void (**)(char *, uint64_t))(v3 + 8);
  v7(v5, v2);
  if (v6 != 3)
    return specialized CAMRootFlowAffinityScorer.repeatRecentDialogIntentAffinity(intent:environment:)(v6);
  Input.parse.getter();
  v8 = Parse.interpretableAsUniversalAction.getter();
  v7(v5, v2);
  if ((v8 & 1) != 0)
    return specialized CAMRootFlowAffinityScorer.taskInterruptionAffinity(input:environemnt:)(a1);
  if (one-time initialization token for executor != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v9 = 2;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1B4BE6000, v11, v12, "CAMRootFlowAffinityScorer: not a universal action special case, returning default score.", v13, 2u);
    MEMORY[0x1B5E44758](v13, -1, -1);

  }
  else
  {

    return 2;
  }
  return v9;
}

ValueMetadata *type metadata accessor for CAMRootFlowAffinityScorer()
{
  return &type metadata for CAMRootFlowAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider;
  if (!lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider)
  {
    v1 = type metadata accessor for RecentDialogsEnvironmentProvider();
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for RecentDialogsEnvironmentProvider, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider);
  }
  return result;
}

uint64_t CancelExecutionTurn.executionRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CancelExecutionTurn.__allocating_init(executionRequestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t CancelExecutionTurn.init(executionRequestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t CancelExecutionTurn.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CancelExecutionTurn()
{
  return CancelExecutionTurn.debugDescription.getter();
}

uint64_t method lookup function for CancelExecutionTurn()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CancelExecutionTurn.__allocating_init(executionRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

void CandidateRequestMessage.message.getter(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B4CF0EF8()
{
  uint64_t v0;
  id v1;

  v1 = (id)(v0 & 0x1FFFFFFFFFFFFFFFLL);
  return v0 & 0x1FFFFFFFFFFFFFFFLL;
}

void sub_1B4CF0F14()
{
  JUMPOUT(0x1B4CF0F00);
}

_QWORD *initializeBufferWithCopyOfBuffer for CandidateRequestMessage(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)(*a2 & 0x1FFFFFFFFFFFFFFFLL);
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for CandidateRequestMessage(_QWORD *a1)
{

}

uint64_t *assignWithCopy for CandidateRequestMessage(uint64_t *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = (void *)(*a2 & 0x1FFFFFFFFFFFFFFFLL);
  v4 = *a1;
  *a1 = *a2;
  v5 = (void *)(v4 & 0x1FFFFFFFFFFFFFFFLL);
  v6 = v3;

  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for CandidateRequestMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CandidateRequestMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7A && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 122);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x79)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CandidateRequestMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x79)
  {
    *(_QWORD *)result = a2 - 122;
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for CandidateRequestMessage(_QWORD *a1)
{
  return *a1 >> 61;
}

_QWORD *destructiveProjectEnumData for CandidateRequestMessage(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *destructiveInjectEnumTag for CandidateRequestMessage(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

ValueMetadata *type metadata accessor for CandidateRequestMessage()
{
  return &type metadata for CandidateRequestMessage;
}

uint64_t *CaptureSiriXToolOutputFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static CaptureSiriXToolOutputFeatureFlag.forceEnabled;
}

uint64_t static CaptureSiriXToolOutputFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return swift_retain();
}

const char *CaptureSiriXToolOutputFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *CaptureSiriXToolOutputFeatureFlag.feature.getter()
{
  return "captureSiriXToolOutput";
}

uint64_t CaptureSiriXToolOutputFeatureFlag.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static CaptureSiriXToolOutputFeatureFlag.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static CaptureSiriXToolOutputFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static CaptureSiriXToolOutputFeatureFlag.forceEnabled + 20));
  closure #1 in CaptureSiriXToolOutputFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

unsigned __int8 *closure #1 in CaptureSiriXToolOutputFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  char v4;
  char v5;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v3 = *result;
  if (v3 == 2)
  {
    v7 = &type metadata for CaptureSiriXToolOutputFeatureFlag;
    v8 = lazy protocol witness table accessor for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag();
    v4 = isFeatureEnabled(_:)();
    result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v5 = v4 & 1;
  }
  else
  {
    v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static CaptureSiriXToolOutputFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void CaptureSiriXToolOutputFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int CaptureSiriXToolOutputFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag;
  if (!lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CaptureSiriXToolOutputFeatureFlag, &type metadata for CaptureSiriXToolOutputFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag;
  if (!lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CaptureSiriXToolOutputFeatureFlag, &type metadata for CaptureSiriXToolOutputFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureSiriXToolOutputFeatureFlag and conformance CaptureSiriXToolOutputFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance CaptureSiriXToolOutputFeatureFlag()
{
  return "captureSiriXToolOutput";
}

uint64_t storeEnumTagSinglePayload for CaptureSiriXToolOutputFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4CF13AC + 4 * asc_1B4EE5F40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4CF13CC + 4 * byte_1B4EE5F45[v4]))();
}

_BYTE *sub_1B4CF13AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4CF13CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4CF13D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4CF13DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4CF13E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4CF13EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CaptureSiriXToolOutputFeatureFlag()
{
  return &type metadata for CaptureSiriXToolOutputFeatureFlag;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_SS9namespace_SSSg5valuets5NeverOTg5038_sS3SSgIggoo_S2S9namespace_AA5valuets5F174OIegnrzr_TR150_s12SiriOntology7UsoTaskC0A10KitRuntimeE35firstCarCommandsUserVocabIdentifier33_62490FE03E7AB891D874A741A997DD8CLLAA12SpanPropertyVSgvgSS_SSSgtSSXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v19 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v19;
  result = specialized Set.startIndex.getter(a1);
  v5 = result;
  v7 = v6;
  v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != v7)
      goto LABEL_14;
    v18 = v9;
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v5);
    v11 = *v10;
    v12 = v10[1];
    v14 = *(_QWORD *)(v19 + 16);
    v13 = *(_QWORD *)(v19 + 24);
    swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    *(_QWORD *)(v19 + 16) = v14 + 1;
    v15 = (_QWORD *)(v19 + 32 * v14);
    v15[4] = v11;
    v15[5] = v12;
    v15[6] = 0;
    v15[7] = 0;
    result = specialized _NativeSet.index(after:)(v5, v7, v18 & 1, a1);
    v5 = result;
    v7 = v16;
    v9 = v17 & 1;
    if (!--v1)
    {
      outlined consume of Set<String>.Index._Variant(result, v16, v9);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;

  if (a1 >> 62)
    goto LABEL_34;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = MEMORY[0x1E0DEE9D8];
    v4 = 4;
    while (1)
    {
      v5 = v4 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      MEMORY[0x1B5E43B94](v4 - 4, a1);
      v6 = v4 - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_29;
LABEL_11:
      v7 = UsoEntity.entitySpans.getter();
      swift_release();
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v3 + 16);
      v10 = v9 + v8;
      if (__OFADD__(v9, v8))
        goto LABEL_30;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v10 <= *(_QWORD *)(v3 + 24) >> 1)
      {
        if (*(_QWORD *)(v7 + 16))
          goto LABEL_20;
      }
      else
      {
        if (v9 <= v10)
          v12 = v9 + v8;
        else
          v12 = v9;
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v12, 1, v3);
        if (*(_QWORD *)(v7 + 16))
        {
LABEL_20:
          v13 = *(_QWORD *)(v3 + 16);
          v14 = (*(_QWORD *)(v3 + 24) >> 1) - v13;
          v15 = type metadata accessor for UsoEntitySpan();
          if (v14 < v8)
            goto LABEL_32;
          v16 = *(_QWORD *)(v15 - 8);
          v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          v18 = *(_QWORD *)(v16 + 72);
          v19 = v3 + v17 + v18 * v13;
          v20 = v7 + v17;
          v21 = v18 * v8;
          v22 = v19 + v21;
          v23 = v20 + v21;
          if (v20 < v22 && v19 < v23)
          {
            result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v8)
          {
            v25 = *(_QWORD *)(v3 + 16);
            v26 = __OFADD__(v25, v8);
            v27 = v25 + v8;
            if (v26)
              goto LABEL_33;
            *(_QWORD *)(v3 + 16) = v27;
          }
          goto LABEL_5;
        }
      }
      if (v8)
        goto LABEL_31;
LABEL_5:
      swift_bridgeObjectRelease();
      ++v4;
      if (v6 == v2)
        goto LABEL_36;
    }
    swift_retain();
    v6 = v4 - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_11;
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
  }
  v3 = MEMORY[0x1E0DEE9D8];
LABEL_36:
  swift_bridgeObjectRelease();
  return v3;
}

SiriKitRuntime::CarCommandsAffinityScorer __swiftcall CarCommandsAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::CarCommandsAffinityScorer result;

  v0 = (void *)0x80000001B4EF6960;
  v1 = 0xD00000000000002CLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t one-time initialization function for kDonatedVocabNamespaceMatches()
{
  uint64_t inited;
  uint64_t v1;
  Swift::Int v2;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v1;
  v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches = v2;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kDonatedVocabNamespaceMatches != -1)
    swift_once();
  return &static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches;
}

uint64_t static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kDonatedVocabNamespaceMatches);
}

uint64_t one-time initialization function for kUserEntityNamespaceMatches()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kUserEntityNamespaceMatches);
  result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kUserEntityNamespaceMatches = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kUserEntityNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kUserEntityNamespaceMatches != -1)
    swift_once();
  return &static CarCommandsAffinityScorer.kUserEntityNamespaceMatches;
}

uint64_t static CarCommandsAffinityScorer.kUserEntityNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kUserEntityNamespaceMatches);
}

uint64_t one-time initialization function for kSettingsNamespaceMatches()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kSettingsNamespaceMatches);
  result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kSettingsNamespaceMatches = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kSettingsNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kSettingsNamespaceMatches != -1)
    swift_once();
  return &static CarCommandsAffinityScorer.kSettingsNamespaceMatches;
}

uint64_t static CarCommandsAffinityScorer.kSettingsNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSettingsNamespaceMatches);
}

uint64_t one-time initialization function for kAppNameMatches()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAppNameMatches);
  result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kAppNameMatches = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kAppNameMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppNameMatches != -1)
    swift_once();
  return &static CarCommandsAffinityScorer.kAppNameMatches;
}

uint64_t static CarCommandsAffinityScorer.kAppNameMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kAppNameMatches);
}

uint64_t one-time initialization function for kFloatSettingValuesForVolume()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kFloatSettingValuesForVolume);
  result = swift_arrayDestroy();
  static CarCommandsAffinityScorer.kFloatSettingValuesForVolume = v0;
  return result;
}

uint64_t *CarCommandsAffinityScorer.kFloatSettingValuesForVolume.unsafeMutableAddressor()
{
  if (one-time initialization token for kFloatSettingValuesForVolume != -1)
    swift_once();
  return &static CarCommandsAffinityScorer.kFloatSettingValuesForVolume;
}

uint64_t static CarCommandsAffinityScorer.kFloatSettingValuesForVolume.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kFloatSettingValuesForVolume);
}

uint64_t static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t CarCommandsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t CarCommandsAffinityScorer.hasOverrideMatch(on:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int isUniquelyReferenced_nonNull_native;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  char v82;
  uint64_t v83;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  NSObject *v105;
  uint64_t v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  void (*v116)(char *, uint64_t);
  char *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  int v121;
  char *v122;
  char *v123;
  Swift::Int v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  NSObject *v128;
  uint64_t v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  os_log_type_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  os_log_type_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t result;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(_QWORD, _QWORD, _QWORD);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;

  v185 = a4;
  v179 = a3;
  v177 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v165 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v165 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v175 = (uint64_t)&v165 - v13;
  MEMORY[0x1E0C80A78](v12);
  v184 = (char *)&v165 - v14;
  v15 = type metadata accessor for SpanProperty();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v165 = (char *)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v166 = (char *)&v165 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v165 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v173 = (char *)&v165 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v165 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v174 = (char *)&v165 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v178 = (char *)&v165 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v186 = (char *)&v165 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v183 = (char *)&v165 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v165 - v38;
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v165 - v40;
  if (one-time initialization token for kDonatedVocabNamespaceMatches != -1)
    swift_once();
  v182 = v41;
  v170 = v8;
  v171 = v28;
  v172 = v23;
  v42 = swift_bridgeObjectRetain();
  v189 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_SS9namespace_SSSg5valuets5NeverOTg5038_sS3SSgIggoo_S2S9namespace_AA5valuets5F174OIegnrzr_TR150_s12SiriOntology7UsoTaskC0A10KitRuntimeE35firstCarCommandsUserVocabIdentifier33_62490FE03E7AB891D874A741A997DD8CLLAA12SpanPropertyVSgvgSS_SSSgtSSXEfU_Tf3nnnpf_nTf1cn_n(v42);
  swift_bridgeObjectRelease();
  v180 = a1;
  v43 = UsoTask.userEntityNamesNodes()();
  v44 = specialized Sequence.flatMap<A>(_:)(v43);
  swift_bridgeObjectRelease();
  v45 = *(_QWORD *)(v44 + 16);
  v191 = v16;
  v192 = v15;
  v187 = v44;
  if (v45)
  {
    v46 = *(_QWORD *)(type metadata accessor for UsoEntitySpan() - 8);
    v47 = (v44
                     + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80)));
    v48 = *(char **)(v46 + 72);
    swift_bridgeObjectRetain();
    v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v50 = v39;
      v51 = v11;
      v52 = UsoEntitySpan.properties.getter();
      v15 = *(_QWORD *)(v52 + 16);
      v53 = v49[2];
      v54 = v53 + v15;
      if (__OFADD__(v53, v15))
        break;
      v55 = v52;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v54 > v49[3] >> 1)
      {
        if (v53 <= v54)
          v57 = v53 + v15;
        else
          v57 = v53;
        v49 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v57, 1, (unint64_t)v49);
      }
      v11 = v51;
      v39 = v50;
      if (*(_QWORD *)(v55 + 16))
      {
        v58 = v49[2];
        if ((v49[3] >> 1) - v58 < v15)
          goto LABEL_102;
        v59 = (*(unsigned __int8 *)(v191 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
        v60 = *(_QWORD *)(v191 + 72);
        v61 = (char *)v49 + v59 + v60 * v58;
        if (v55 + v59 < (unint64_t)&v61[v60 * v15] && (unint64_t)v61 < v55 + v59 + v60 * v15)
        {
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        if (v15)
        {
          v63 = v49[2];
          v64 = __OFADD__(v63, v15);
          v65 = v63 + v15;
          if (v64)
            goto LABEL_103;
          v49[2] = v65;
        }
      }
      else if (v15)
      {
        goto LABEL_101;
      }
      swift_bridgeObjectRelease();
      v47 = &v48[(_QWORD)v47];
      if (!--v45)
      {
        swift_bridgeObjectRelease();
        v16 = v191;
        v15 = v192;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_26:
  v66 = v49[2];
  v67 = v189;
  v68 = v183;
  if (!v66)
  {
LABEL_57:
    v89 = (uint64_t)v184;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v184, 1, 1, v15);
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }
  v176 = v11;
  v69 = (char *)v49 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v70 = *(_QWORD *)(v16 + 72);
  v71 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 16);
  swift_bridgeObjectRetain();
  v72 = 0;
  v181 = (uint64_t *)(v67 + 56);
  v169 = v66;
  v168 = v69;
  v167 = v70;
  v190 = v71;
  while (1)
  {
    v188 = v72;
    v71(v39, &v69[v70 * v72], v15);
    v74 = *(_QWORD *)(v67 + 16);
    if (v74)
      break;
LABEL_29:
    v73 = v188 + 1;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v39, v15);
    v72 = v73;
    v81 = v73 == v66;
    v71 = v190;
    if (v81)
    {
      swift_bridgeObjectRelease();
      v11 = v176;
      goto LABEL_57;
    }
  }
  swift_bridgeObjectRetain();
  v75 = v181;
  while (1)
  {
    v76 = *(v75 - 3);
    v77 = *(v75 - 2);
    v78 = *v75;
    if (*v75)
      break;
    swift_bridgeObjectRetain();
    if (v76 == SpanProperty.key.getter() && v77 == v83)
      goto LABEL_54;
    v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v85 & 1) != 0)
      goto LABEL_55;
LABEL_33:
    v75 += 4;
    if (!--v74)
    {
      v67 = v189;
      swift_bridgeObjectRelease();
      v16 = v191;
      v66 = v169;
      v69 = v168;
      v70 = v167;
      goto LABEL_29;
    }
  }
  v79 = *(v75 - 1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v81 = v76 == SpanProperty.key.getter() && v77 == v80;
  if (v81)
  {
    swift_bridgeObjectRelease();
    v190(v68, v39, v192);
  }
  else
  {
    v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v190(v68, v39, v192);
    if ((v82 & 1) == 0)
      goto LABEL_32;
  }
  v86 = SpanProperty.valueString.getter();
  if (!v87)
  {
LABEL_32:
    v15 = v192;
    (*(void (**)(char *, uint64_t))(v191 + 8))(v68, v192);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_33;
  }
  if (v79 != v86 || v78 != v87)
  {
    v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v15 = v192;
    (*(void (**)(char *, uint64_t))(v191 + 8))(v68, v192);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if ((v88 & 1) != 0)
      goto LABEL_55;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  v15 = v192;
  (*(void (**)(char *, uint64_t))(v191 + 8))(v68, v192);
  swift_bridgeObjectRelease();
LABEL_54:
  swift_bridgeObjectRelease_n();
LABEL_55:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v191;
  v89 = (uint64_t)v184;
  (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v184, v39, v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v89, 0, 1, v15);
  swift_bridgeObjectRelease();
  v11 = v176;
LABEL_58:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v91 = v90(v89, 1, v15);
  v93 = v185;
  v92 = v186;
  if (v91 != 1)
  {
    v102 = v182;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v182, v89, v15);
    if (one-time initialization token for executor != -1)
      swift_once();
    v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)static Logger.executor);
    v104 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v104(v92, v102, v15);
    swift_bridgeObjectRetain_n();
    v105 = Logger.logObject.getter();
    v106 = v16;
    v107 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v105, v107))
    {
      v108 = swift_slowAlloc();
      v109 = v15;
      v110 = swift_slowAlloc();
      v194 = v93;
      v195 = v110;
      *(_DWORD *)v108 = 136315394;
      v193 = v179;
      swift_bridgeObjectRetain();
      v111 = String.init<A>(describing:)();
      v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, &v195);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v108 + 12) = 2080;
      v113 = v186;
      v104(v178, v186, v109);
      v114 = String.init<A>(describing:)();
      v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, &v195);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v116 = *(void (**)(char *, uint64_t))(v191 + 8);
      v116(v113, v109);
      _os_log_impl(&dword_1B4BE6000, v105, v107, "%s found user vocab identifier (%s)", (uint8_t *)v108, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v110, -1, -1);
      MEMORY[0x1B5E44758](v108, -1, -1);

      v117 = v182;
      v118 = v109;
LABEL_77:
      v116(v117, v118);
      return 1;
    }

    v116 = *(void (**)(char *, uint64_t))(v106 + 8);
    v116(v92, v15);
    swift_bridgeObjectRelease_n();
    v117 = v102;
    goto LABEL_76;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v89, &demangling cache variable for type metadata for SpanProperty?);
  if ((UsoTask.hasCarPlayCannedDialog.getter() & 1) == 0)
  {
    SiriEnvironment.currentDevice.getter();
    v119 = dispatch thunk of CurrentDevice.supportsVehicleData.getter();
    swift_release();
    if ((v119 & 1) == 0)
      return 0;
    v120 = v175;
    UsoTask.firstBasicUserEntityMatch.getter(v175);
    if (v90(v120, 1, v15) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v120, &demangling cache variable for type metadata for SpanProperty?);
      if (one-time initialization token for kSettingsNamespaceMatches != -1)
        swift_once();
      UsoTask.firstSettingMatch(on:)(static CarCommandsAffinityScorer.kSettingsNamespaceMatches, (int64_t)v11);
      v121 = v90((uint64_t)v11, 1, v15);
      v122 = v173;
      v123 = v172;
      if (v121 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for SpanProperty?);
        v124 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of CarCommandsAffinityScorer.hasOverrideMatch(on:in:));
        swift_arrayDestroy();
        v125 = (uint64_t)v170;
        UsoTask.firstSettingMatch(on:)(v124, (int64_t)v170);
        swift_bridgeObjectRelease();
        if (v90(v125, 1, v15) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v125, &demangling cache variable for type metadata for SpanProperty?);
          return 0;
        }
        v148 = v166;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v166, v125, v15);
        v149 = SpanProperty.valueString.getter();
        if (!v150)
          goto LABEL_97;
        v151 = v149;
        v152 = v150;
        if (one-time initialization token for kFloatSettingValuesForVolume != -1)
          swift_once();
        v153 = specialized Set.contains(_:)(v151, v152, static CarCommandsAffinityScorer.kFloatSettingValuesForVolume);
        swift_bridgeObjectRelease();
        if ((v153 & 1) == 0)
        {
LABEL_97:
          (*(void (**)(char *, uint64_t))(v16 + 8))(v148, v15);
          return 0;
        }
        if (one-time initialization token for executor != -1)
          swift_once();
        v154 = type metadata accessor for Logger();
        __swift_project_value_buffer(v154, (uint64_t)static Logger.executor);
        v155 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
        v48 = v165;
        v50 = v166;
        v155(v165, v166, v15);
        swift_bridgeObjectRetain_n();
        v47 = Logger.logObject.getter();
        v49 = (_QWORD *)v16;
        v156 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v47, v156))
        {
LABEL_104:

          v116 = (void (*)(char *, uint64_t))v49[1];
          v116(v48, v15);
          swift_bridgeObjectRelease_n();
          v117 = v50;
          goto LABEL_76;
        }
        v157 = swift_slowAlloc();
        v132 = v15;
        v158 = swift_slowAlloc();
        v194 = v93;
        v195 = v158;
        *(_DWORD *)v157 = 136315394;
        v193 = v179;
        swift_bridgeObjectRetain();
        v159 = String.init<A>(describing:)();
        v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v160, &v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v157 + 12) = 2080;
        v161 = v165;
        v155(v178, v165, v132);
        v162 = String.init<A>(describing:)();
        v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v162, v163, &v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v116 = *(void (**)(char *, uint64_t))(v191 + 8);
        v116(v161, v132);
        _os_log_impl(&dword_1B4BE6000, v47, v156, "%s found a volume related setting while connected to a vehicle that supports vehicle data (%s)", (uint8_t *)v157, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v158, -1, -1);
        MEMORY[0x1B5E44758](v157, -1, -1);

        v138 = (uint64_t *)&v196;
LABEL_87:
        v117 = (char *)*(v138 - 32);
        v118 = v132;
        goto LABEL_77;
      }
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v173, v11, v15);
      if (one-time initialization token for executor != -1)
        swift_once();
      v139 = type metadata accessor for Logger();
      __swift_project_value_buffer(v139, (uint64_t)static Logger.executor);
      v140 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v140(v123, v122, v15);
      swift_bridgeObjectRetain_n();
      v128 = Logger.logObject.getter();
      v129 = v16;
      v141 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v128, v141))
      {
        v142 = swift_slowAlloc();
        v132 = v15;
        v192 = swift_slowAlloc();
        v194 = v93;
        v195 = v192;
        *(_DWORD *)v142 = 136315394;
        v193 = v179;
        swift_bridgeObjectRetain();
        v143 = String.init<A>(describing:)();
        v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, &v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v142 + 12) = 2080;
        v140(v178, v123, v15);
        v145 = String.init<A>(describing:)();
        v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v145, v146, &v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v116 = *(void (**)(char *, uint64_t))(v191 + 8);
        v116(v123, v15);
        _os_log_impl(&dword_1B4BE6000, v128, v141, "%s found a CarCommands setting match while connected to a vehicle that supports vehicle data (%s)", (uint8_t *)v142, 0x16u);
        v147 = v192;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v147, -1, -1);
        MEMORY[0x1B5E44758](v142, -1, -1);

        v138 = &v197;
        goto LABEL_87;
      }
    }
    else
    {
      v122 = v174;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v174, v120, v15);
      if (one-time initialization token for executor != -1)
        swift_once();
      v126 = type metadata accessor for Logger();
      __swift_project_value_buffer(v126, (uint64_t)static Logger.executor);
      v127 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v123 = v171;
      v127(v171, v122, v15);
      swift_bridgeObjectRetain_n();
      v128 = Logger.logObject.getter();
      v129 = v16;
      v130 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v128, v130))
      {
        v131 = swift_slowAlloc();
        v132 = v15;
        v192 = swift_slowAlloc();
        v194 = v93;
        v195 = v192;
        *(_DWORD *)v131 = 136315394;
        v193 = v179;
        swift_bridgeObjectRetain();
        v133 = String.init<A>(describing:)();
        v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v134, &v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v131 + 12) = 2080;
        v127(v178, v123, v15);
        v135 = String.init<A>(describing:)();
        v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, &v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v116 = *(void (**)(char *, uint64_t))(v191 + 8);
        v116(v123, v15);
        _os_log_impl(&dword_1B4BE6000, v128, v130, "%s found a CarCommandsUserEntityNoun while connected to a vehicle that supports vehicle data (%s)", (uint8_t *)v131, 0x16u);
        v137 = v192;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v137, -1, -1);
        MEMORY[0x1B5E44758](v131, -1, -1);

        v138 = &v198;
        goto LABEL_87;
      }
    }

    v116 = *(void (**)(char *, uint64_t))(v129 + 8);
    v116(v123, v15);
    swift_bridgeObjectRelease_n();
    v117 = v122;
LABEL_76:
    v118 = v15;
    goto LABEL_77;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v94 = type metadata accessor for Logger();
  __swift_project_value_buffer(v94, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v95 = Logger.logObject.getter();
  v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc();
    v98 = swift_slowAlloc();
    v194 = v93;
    v195 = v98;
    *(_DWORD *)v97 = 136315138;
    v193 = v179;
    swift_bridgeObjectRetain();
    v99 = String.init<A>(describing:)();
    v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v195);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v95, v96, "%s found CarPlay canned dialog", v97, 0xCu);
    v101 = 1;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v98, -1, -1);
    MEMORY[0x1B5E44758](v97, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    return 1;
  }
  return v101;
}

BOOL CarCommandsAffinityScorer.hasMediumProbabilityMatch(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  os_log_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  int v36;
  os_log_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SpanProperty();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v35 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v35 - v16;
  if (one-time initialization token for kSettingsNamespaceMatches != -1)
    swift_once();
  UsoTask.firstSettingMatch(on:)(static CarCommandsAffinityScorer.kSettingsNamespaceMatches, (int64_t)v7);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (v18 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for SpanProperty?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    if (one-time initialization token for executor != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
    v39 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v39(v15, v17, v8);
    swift_bridgeObjectRetain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      v23 = swift_slowAlloc();
      v37 = v20;
      v24 = a2;
      v25 = v23;
      v38 = swift_slowAlloc();
      v41 = a3;
      v42 = v38;
      *(_DWORD *)v25 = 136315394;
      v35 = v25 + 4;
      v40 = v24;
      swift_bridgeObjectRetain();
      v36 = v22;
      v26 = String.init<A>(describing:)();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      v39(v12, v15, v8);
      v28 = String.init<A>(describing:)();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v30 = *(void (**)(char *, uint64_t))(v9 + 8);
      v30(v15, v8);
      v31 = v37;
      _os_log_impl(&dword_1B4BE6000, v37, (os_log_type_t)v36, "%s found basic setting match (%s)", (uint8_t *)v25, 0x16u);
      v32 = v38;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v32, -1, -1);
      MEMORY[0x1B5E44758](v25, -1, -1);

      v30(v17, v8);
    }
    else
    {

      v33 = *(void (**)(char *, uint64_t))(v9 + 8);
      v33(v15, v8);
      swift_bridgeObjectRelease_n();
      v33(v17, v8);
    }
  }
  return v18 != 1;
}

uint64_t UsoTask.hasCarPlayCannedDialog.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (UsoTask.verbString.getter() == 1852141679 && v3 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v5 = 0;
    if ((v4 & 1) == 0)
      goto LABEL_10;
  }
  if (one-time initialization token for kAppNameMatches != -1)
    swift_once();
  if (UsoTask.firstAppContaining(names:)(static CarCommandsAffinityScorer.kAppNameMatches))
  {
    swift_release();
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
LABEL_10:
  v6 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of UsoTask.hasCarPlayCannedDialog.getter);
  swift_arrayDestroy();
  UsoTask.firstSettingMatch(on:)(v6, (int64_t)v2);
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for SpanProperty();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for SpanProperty?);
    v9 = 0;
  }
  else
  {
    v10 = SpanProperty.valueString.getter();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    if (v12)
    {
      if (v10 == 0x61635F7075746573 && v12 == 0xED000079616C7072)
      {
        swift_bridgeObjectRelease();
        v9 = 1;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v9 = 0;
    }
  }
  return (v5 | v9) & 1;
}

uint64_t UsoTask.firstBasicUserEntityMatch.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  int isUniquelyReferenced_nonNull_native;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(_QWORD, _QWORD, _QWORD);
  uint64_t v84;

  v2 = v1;
  v78 = a1;
  v3 = type metadata accessor for SpanProperty();
  v82 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v79 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v80 = (char *)&v72 - v6;
  if (one-time initialization token for kUserEntityNamespaceMatches != -1)
    goto LABEL_76;
  while (1)
  {
    v7 = static CarCommandsAffinityScorer.kUserEntityNamespaceMatches;
    v8 = *(_QWORD *)(static CarCommandsAffinityScorer.kUserEntityNamespaceMatches + 16);
    v9 = MEMORY[0x1E0DEE9D8];
    if (!v8)
      break;
    v76 = v2;
    v77 = v3;
    v84 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v84;
    v10 = specialized Set.startIndex.getter(v7);
    v3 = v11;
    v13 = v12 & 1;
    v81 = v7 + 56;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(v7 + 32))
    {
      if (((*(_QWORD *)(v81 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_70;
      if (*(_DWORD *)(v7 + 36) != (_DWORD)v3)
        goto LABEL_71;
      LODWORD(v83) = v13;
      v14 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v10);
      v15 = *v14;
      v2 = (uint64_t *)v14[1];
      v84 = v9;
      v16 = *(_QWORD *)(v9 + 16);
      v17 = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v16 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v16 + 1, 1);
        v9 = v84;
      }
      *(_QWORD *)(v9 + 16) = v16 + 1;
      v18 = (_QWORD *)(v9 + 32 * v16);
      v18[4] = v15;
      v18[5] = v2;
      v18[6] = 0;
      v18[7] = 0;
      v19 = specialized _NativeSet.index(after:)(v10, v3, v83 & 1, v7);
      v10 = v19;
      v3 = v20;
      v13 = v21 & 1;
      if (!--v8)
      {
        outlined consume of Set<String>.Index._Variant(v19, v20, v13);
        swift_bridgeObjectRelease();
        v3 = v77;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_once();
  }
LABEL_12:
  v22 = specialized _arrayForceCast<A, B>(_:)(v9);
  swift_bridgeObjectRelease();
  v23 = UsoTask.userEntityNamesNodes()();
  v24 = specialized Sequence.flatMap<A>(_:)(v23);
  swift_bridgeObjectRelease();
  v2 = *(uint64_t **)(v24 + 16);
  v81 = v24;
  if (v2)
  {
    v25 = v22;
    v26 = *(_QWORD *)(type metadata accessor for UsoEntitySpan() - 8);
    v27 = v24 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    v28 = *(_QWORD *)(v26 + 72);
    swift_bridgeObjectRetain();
    v29 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v30 = UsoEntitySpan.properties.getter();
      v31 = *(_QWORD *)(v30 + 16);
      v32 = *(_QWORD *)(v29 + 16);
      v33 = v32 + v31;
      if (__OFADD__(v32, v31))
        goto LABEL_72;
      v34 = v30;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v33 <= *(_QWORD *)(v29 + 24) >> 1)
      {
        if (*(_QWORD *)(v34 + 16))
          goto LABEL_25;
      }
      else
      {
        if (v32 <= v33)
          v36 = v32 + v31;
        else
          v36 = v32;
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v36, 1, v29);
        if (*(_QWORD *)(v34 + 16))
        {
LABEL_25:
          v37 = *(_QWORD *)(v29 + 16);
          if ((*(_QWORD *)(v29 + 24) >> 1) - v37 < v31)
            goto LABEL_74;
          v38 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
          v39 = *(_QWORD *)(v82 + 72);
          v40 = v29 + v38 + v39 * v37;
          if (v34 + v38 < v40 + v39 * v31 && v40 < v34 + v38 + v39 * v31)
          {
            result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v31)
          {
            v42 = *(_QWORD *)(v29 + 16);
            v43 = __OFADD__(v42, v31);
            v44 = v42 + v31;
            if (v43)
              goto LABEL_75;
            *(_QWORD *)(v29 + 16) = v44;
          }
          goto LABEL_15;
        }
      }
      if (v31)
        goto LABEL_73;
LABEL_15:
      swift_bridgeObjectRelease();
      v27 += v28;
      v2 = (uint64_t *)((char *)v2 - 1);
      if (!v2)
      {
        swift_bridgeObjectRelease();
        v22 = v25;
        goto LABEL_36;
      }
    }
  }
  v29 = MEMORY[0x1E0DEE9D8];
LABEL_36:
  v45 = *(_QWORD *)(v29 + 16);
  v46 = v80;
  if (!v45)
  {
LABEL_67:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v78, 1, 1, v3);
    goto LABEL_68;
  }
  v47 = v29 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
  v48 = *(_QWORD *)(v82 + 72);
  v49 = *(void (**)(_QWORD, _QWORD, _QWORD))(v82 + 16);
  swift_bridgeObjectRetain();
  v50 = 0;
  v76 = (uint64_t *)(v22 + 56);
  v77 = v22;
  v73 = v47;
  v74 = v45;
  v72 = v48;
  v83 = v49;
  while (1)
  {
    v49(v46, v47 + v48 * v50, v3);
    v51 = *(_QWORD *)(v22 + 16);
    if (v51)
      break;
LABEL_39:
    ++v50;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v46, v3);
    if (v50 == v45)
    {
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
  }
  v75 = v50;
  v52 = v3;
  swift_bridgeObjectRetain();
  v53 = v76;
  while (1)
  {
    v54 = *(v53 - 3);
    v55 = *(v53 - 2);
    v56 = *v53;
    if (*v53)
      break;
    swift_bridgeObjectRetain();
    if (v54 == SpanProperty.key.getter() && v55 == v65)
      goto LABEL_64;
    v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v67 & 1) != 0)
      goto LABEL_65;
LABEL_43:
    v53 += 4;
    --v51;
    v46 = v80;
    if (!v51)
    {
      v22 = v77;
      swift_bridgeObjectRelease();
      v3 = v52;
      v47 = v73;
      v45 = v74;
      v48 = v72;
      v49 = v83;
      v50 = v75;
      goto LABEL_39;
    }
  }
  v57 = *(v53 - 1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v58 = v46;
  if (v54 == SpanProperty.key.getter() && v55 == v59)
  {
    swift_bridgeObjectRelease();
    v62 = v79;
    v83(v79, v58, v52);
    v63 = SpanProperty.valueString.getter();
    if (!v64)
      goto LABEL_42;
  }
  else
  {
    v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v62 = v79;
    v83(v79, v58, v52);
    if ((v61 & 1) == 0 || (v63 = SpanProperty.valueString.getter(), !v64))
    {
LABEL_42:
      (*(void (**)(char *, uint64_t))(v82 + 8))(v62, v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_43;
    }
  }
  if (v57 != v63 || v56 != v64)
  {
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v79, v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if ((v68 & 1) != 0)
      goto LABEL_65;
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v79, v52);
  swift_bridgeObjectRelease();
LABEL_64:
  swift_bridgeObjectRelease_n();
LABEL_65:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v69 = v82;
  v70 = v78;
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v78, v80, v52);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v70, 0, 1, v52);
LABEL_68:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t UsoTask.firstSettingMatch(on:)@<X0>(int64_t a1@<X0>, int64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int isUniquelyReferenced_nonNull_native;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  BOOL v46;
  uint64_t v47;
  _QWORD *v48;
  BOOL v49;
  int64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, unint64_t, uint64_t);
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t vars0;

  v4 = type metadata accessor for SpanProperty();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = UsoTask.arguments.getter();
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v11 >> 62)
        goto LABEL_65;
      if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        do
        {
          if ((v11 & 0xC000000000000001) != 0)
          {
            MEMORY[0x1B5E43B94](0, v11);
          }
          else
          {
            if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_69:
              LODWORD(vars0) = 0;
              v63 = 1092;
              LOBYTE(v62) = 2;
              result = _fatalErrorMessage(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            swift_retain();
          }
          swift_bridgeObjectRelease();
          v12 = dispatch thunk of UsoValue.getAsEntity()();
          swift_release();
          if (!v12)
            return (*(uint64_t (**)(int64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
          type metadata accessor for UsoEntity_common_Setting();
          swift_retain();
          static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
          swift_release();
          v13 = v61;
          if (!v61)
          {
            swift_release();
            return (*(uint64_t (**)(int64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
          }
          v14 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
          if (!v14)
          {
            (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
            swift_release();
            return swift_release();
          }
          v15 = v14;
          v52[0] = v13;
          v52[1] = v12;
          v53 = a2;
          v54 = v14;
          v16 = *(_QWORD *)(v14 + 16);
          v59 = a1;
          if (!v16)
          {
            v19 = MEMORY[0x1E0DEE9D8];
LABEL_39:
            v55 = *(_QWORD *)(v19 + 16);
            if (v55)
            {
              v58 = v19 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
              v60 = (char *)(a1 + 56);
              v33 = *(_QWORD *)(v5 + 72);
              v56 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
              v57 = v33;
              swift_bridgeObjectRetain();
              v34 = 0;
              do
              {
                v56(v7, v58 + v57 * v34, v4);
                v35 = v7;
                v36 = SpanProperty.key.getter();
                v38 = v37;
                if (*(_QWORD *)(v59 + 16))
                {
                  v39 = v36;
                  v40 = v59;
                  Hasher.init(_seed:)();
                  String.hash(into:)();
                  v41 = Hasher._finalize()();
                  v42 = -1 << *(_BYTE *)(v40 + 32);
                  v43 = v41 & ~v42;
                  if (((*(_QWORD *)&v60[(v43 >> 3) & 0xFFFFFFFFFFFFF8] >> v43) & 1) != 0)
                  {
                    v44 = *(_QWORD *)(v59 + 48);
                    v45 = (_QWORD *)(v44 + 16 * v43);
                    v46 = *v45 == v39 && v45[1] == v38;
                    if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
LABEL_56:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v50 = v53;
                      (*(void (**)(int64_t, char *, uint64_t))(v5 + 32))(v53, v35, v4);
                      (*(void (**)(int64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v50, 0, 1, v4);
                      swift_release();
                      goto LABEL_59;
                    }
                    v47 = ~v42;
                    while (1)
                    {
                      v43 = (v43 + 1) & v47;
                      if (((*(_QWORD *)&v60[(v43 >> 3) & 0xFFFFFFFFFFFFF8] >> v43) & 1) == 0)
                        break;
                      v48 = (_QWORD *)(v44 + 16 * v43);
                      v49 = *v48 == v39 && v48[1] == v38;
                      if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        goto LABEL_56;
                    }
                  }
                }
                ++v34;
                swift_bridgeObjectRelease();
                v7 = v35;
                (*(void (**)(char *, uint64_t))(v5 + 8))(v35, v4);
              }
              while (v34 != v55);
              swift_bridgeObjectRelease();
            }
            (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v53, 1, 1, v4);
            swift_release();
LABEL_59:
            swift_bridgeObjectRelease();
            swift_release();
            return swift_bridgeObjectRelease();
          }
          v60 = v7;
          v17 = *(_QWORD *)(type metadata accessor for UsoEntitySpan() - 8);
          v11 = v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
          v18 = *(_QWORD *)(v17 + 72);
          swift_bridgeObjectRetain();
          v19 = MEMORY[0x1E0DEE9D8];
          while (1)
          {
            v21 = UsoEntitySpan.properties.getter();
            v22 = *(_QWORD *)(v21 + 16);
            a2 = *(_QWORD *)(v19 + 16);
            a1 = a2 + v22;
            if (__OFADD__(a2, v22))
              break;
            v7 = (char *)v21;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (isUniquelyReferenced_nonNull_native && a1 <= *(_QWORD *)(v19 + 24) >> 1)
            {
              if (*((_QWORD *)v7 + 2))
                goto LABEL_26;
            }
            else
            {
              if (a2 <= a1)
                v24 = a2 + v22;
              else
                v24 = a2;
              v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v19);
              if (*((_QWORD *)v7 + 2))
              {
LABEL_26:
                v25 = *(_QWORD *)(v19 + 16);
                if ((*(_QWORD *)(v19 + 24) >> 1) - v25 < v22)
                  goto LABEL_63;
                v26 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
                v27 = *(_QWORD *)(v5 + 72);
                v28 = v19 + v26 + v27 * v25;
                if ((unint64_t)&v7[v26] < v28 + v27 * v22 && v28 < (unint64_t)&v7[v26 + v27 * v22])
                  goto LABEL_69;
                swift_arrayInitWithCopy();
                if (v22)
                {
                  v30 = *(_QWORD *)(v19 + 16);
                  v31 = __OFADD__(v30, v22);
                  v32 = v30 + v22;
                  if (v31)
                    goto LABEL_64;
                  *(_QWORD *)(v19 + 16) = v32;
                }
                goto LABEL_16;
              }
            }
            if (v22)
              goto LABEL_62;
LABEL_16:
            swift_bridgeObjectRelease();
            v11 += v18;
            if (!--v16)
            {
              swift_bridgeObjectRelease();
              a1 = v59;
              v7 = v60;
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          swift_bridgeObjectRetain();
          v51 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        while (v51);
      }
    }
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(int64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
}

uint64_t UsoTask.firstAppContaining(names:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  int isUniquelyReferenced_nonNull_native;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t vars0;

  v2 = type metadata accessor for SpanProperty();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = UsoTask.arguments.getter();
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_13;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
  if ((v11 & 1) == 0)
    goto LABEL_13;
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v12 >> 62)
    goto LABEL_61;
  if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  if ((v12 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_65:
      LODWORD(vars0) = 0;
      v55 = 1092;
      LOBYTE(v54) = 2;
      result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v13 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v13)
    return 0;
  type metadata accessor for UsoEntity_common_App();
  swift_retain();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  v14 = v53;
  if (!v53)
  {
    swift_release();
    return v14;
  }
  v50 = a1;
  v15 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
  if (!v15)
  {
LABEL_38:
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_55;
  }
  v16 = v15;
  a1 = *(_QWORD *)(v15 + 16);
  v48 = v14;
  v49 = v8;
  v47[1] = v13;
  if (!a1)
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
    goto LABEL_40;
  }
  v17 = *(_QWORD *)(type metadata accessor for UsoEntitySpan() - 8);
  v12 = v16 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v18 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 72);
  v51 = v16;
  v52 = v18;
  swift_bridgeObjectRetain();
  v19 = MEMORY[0x1E0DEE9D8];
  do
  {
    v21 = UsoEntitySpan.properties.getter();
    v22 = *(_QWORD *)(v21 + 16);
    v23 = *(_QWORD *)(v19 + 16);
    v8 = (char *)(v23 + v22);
    if (__OFADD__(v23, v22))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      swift_bridgeObjectRetain();
      v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v46)
        goto LABEL_13;
      goto LABEL_5;
    }
    v24 = v21;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && (uint64_t)v8 <= *(_QWORD *)(v19 + 24) >> 1)
    {
      if (!*(_QWORD *)(v24 + 16))
        goto LABEL_16;
    }
    else
    {
      if (v23 <= (uint64_t)v8)
        v26 = v23 + v22;
      else
        v26 = v23;
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v26, 1, v19);
      if (!*(_QWORD *)(v24 + 16))
      {
LABEL_16:
        if (v22)
          goto LABEL_58;
        goto LABEL_17;
      }
    }
    v27 = *(_QWORD *)(v19 + 16);
    if ((*(_QWORD *)(v19 + 24) >> 1) - v27 < v22)
      goto LABEL_59;
    v28 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v29 = *(_QWORD *)(v3 + 72);
    v30 = v19 + v28 + v29 * v27;
    if (v24 + v28 < v30 + v29 * v22 && v30 < v24 + v28 + v29 * v22)
      goto LABEL_65;
    swift_arrayInitWithCopy();
    if (v22)
    {
      v32 = *(_QWORD *)(v19 + 16);
      v33 = __OFADD__(v32, v22);
      v34 = v32 + v22;
      if (v33)
        goto LABEL_60;
      *(_QWORD *)(v19 + 16) = v34;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    v12 += (unint64_t)v52;
    --a1;
  }
  while (a1);
  swift_bridgeObjectRelease_n();
  v14 = v48;
  v8 = v49;
  if (!v19)
    goto LABEL_38;
LABEL_40:
  v35 = *(_QWORD *)(v19 + 16);
  if (!v35)
  {
    v45 = 1;
    goto LABEL_54;
  }
  v36 = v19 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v37 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v51 = *(_QWORD *)(v3 + 72);
  v52 = v37;
  swift_bridgeObjectRetain();
  while (2)
  {
    v52(v5, v36, v2);
    v38 = SpanProperty.valueString.getter();
    if (v39)
    {
      v40 = v38;
      v41 = v39;
      if (SpanProperty.key.getter() == 0x656D614E707061 && v42 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_49:
        v44 = specialized Set.contains(_:)(v40, v41, v50);
        swift_bridgeObjectRelease();
        if ((v44 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v8 = v49;
          (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v49, v5, v2);
          v45 = 0;
          goto LABEL_52;
        }
      }
      else
      {
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v43 & 1) != 0)
          goto LABEL_49;
        swift_bridgeObjectRelease();
      }
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v36 += v51;
    if (--v35)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v45 = 1;
  v8 = v49;
LABEL_52:
  v14 = v48;
LABEL_54:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, v45, 1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
LABEL_55:
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for SpanProperty?);
    return 0;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for SpanProperty?);
  }
  return v14;
}

uint64_t UsoTask.userEntityNamesNodes()()
{
  unint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v0 = UsoTask.arguments.getter();
  if (!*(_QWORD *)(v0 + 16))
    goto LABEL_17;
  v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E4572657375, 0xEC00000073656974);
  if ((v2 & 1) == 0)
    goto LABEL_17;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!(v3 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_17:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v0 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v0)
    goto LABEL_17;
LABEL_5:
  if ((v3 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_26:
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v13)
        goto LABEL_13;
LABEL_20:
      swift_bridgeObjectRelease();
      v9 = 0;
      goto LABEL_21;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v4 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  v5 = UsoEntity.attributes.getter();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_20;
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x80000001B4EF7DC0);
  if ((v7 & 1) == 0)
    goto LABEL_20;
  v0 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (v0 >> 62)
    goto LABEL_26;
  if (!*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_20;
LABEL_13:
  if ((v0 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v0);
    goto LABEL_16;
  }
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_16:
    swift_bridgeObjectRelease();
    v9 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
LABEL_21:
    v10 = swift_retain();
    v11 = closure #1 in UsoTask.userEntityNamesNodes()(v10);
    swift_release();
    v12 = closure #1 in UsoTask.userEntityNamesNodes()(v9);
    specialized Array.append<A>(contentsOf:)(v12);
    swift_release();
    swift_release();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.firstSpanPropertyWithKeyValueMatchingAny(identifiers:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  int isUniquelyReferenced_nonNull_native;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  BOOL v48;
  char v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD, _QWORD);
  uint64_t v71;
  char *v72;
  char *v73;

  v6 = type metadata accessor for SpanProperty();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v73 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v72 = (char *)&v62 - v10;
  v11 = *(_QWORD *)(a2 + 16);
  v66 = a3;
  v67 = a1;
  if (!v11)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(type metadata accessor for UsoEntitySpan() - 8);
  v13 = a2 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v71 = a2;
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x1E0DEE9D8];
  do
  {
    v16 = UsoEntitySpan.properties.getter();
    v17 = *(_QWORD *)(v16 + 16);
    v18 = *(_QWORD *)(v15 + 16);
    v19 = v18 + v17;
    if (__OFADD__(v18, v17))
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v20 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v19 <= *(_QWORD *)(v15 + 24) >> 1)
    {
      if (!*(_QWORD *)(v20 + 16))
        goto LABEL_3;
    }
    else
    {
      if (v18 <= v19)
        v22 = v18 + v17;
      else
        v22 = v18;
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v15);
      if (!*(_QWORD *)(v20 + 16))
      {
LABEL_3:
        if (v17)
          goto LABEL_59;
        goto LABEL_4;
      }
    }
    v23 = *(_QWORD *)(v15 + 16);
    if ((*(_QWORD *)(v15 + 24) >> 1) - v23 < v17)
      goto LABEL_60;
    v24 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v25 = *(_QWORD *)(v7 + 72);
    v26 = v15 + v24 + v25 * v23;
    if (v20 + v24 < v26 + v25 * v17 && v26 < v20 + v24 + v25 * v17)
      goto LABEL_62;
    swift_arrayInitWithCopy();
    if (v17)
    {
      v28 = *(_QWORD *)(v15 + 16);
      v29 = __OFADD__(v28, v17);
      v30 = v28 + v17;
      if (v29)
        goto LABEL_61;
      *(_QWORD *)(v15 + 16) = v30;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v13 += v14;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  a3 = v66;
  a1 = v67;
LABEL_25:
  v31 = *(_QWORD *)(v15 + 16);
  v32 = v72;
  if (!v31)
  {
    v60 = 1;
    goto LABEL_56;
  }
  v33 = v15 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v34 = *(_QWORD *)(a1 + 16);
  v35 = *(_QWORD *)(v7 + 72);
  v36 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
  swift_bridgeObjectRetain();
  v37 = 0;
  v64 = v31;
  v65 = (uint64_t *)(a1 + 56);
  v62 = v34;
  v63 = v33;
  v69 = v35;
  v70 = v36;
  while (1)
  {
    v68 = v37;
    v36(v32, v33 + v35 * v37, v6);
    if (v34)
      break;
LABEL_28:
    v38 = v68 + 1;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
    v37 = v38;
    v48 = v38 == v31;
    v36 = v70;
    if (v48)
    {
      swift_bridgeObjectRelease();
      v60 = 1;
      a3 = v66;
      goto LABEL_56;
    }
  }
  swift_bridgeObjectRetain();
  v39 = v65;
  v40 = v34;
  while (2)
  {
    v41 = *(v39 - 3);
    v42 = *(v39 - 2);
    v43 = *v39;
    if (!*v39)
    {
      swift_bridgeObjectRetain();
      if (v41 == SpanProperty.key.getter() && v42 == v52)
        goto LABEL_54;
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v54 & 1) != 0)
        goto LABEL_55;
      goto LABEL_32;
    }
    v44 = v7;
    v45 = v6;
    v71 = *(v39 - 1);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v46 = v72;
    v48 = v41 == SpanProperty.key.getter() && v42 == v47;
    if (v48)
    {
      swift_bridgeObjectRelease();
      v55 = v46;
      v6 = v45;
      v70(v73, v55, v45);
      goto LABEL_47;
    }
    v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v50 = v73;
    v51 = v46;
    v6 = v45;
    v70(v73, v51, v45);
    if ((v49 & 1) == 0)
      goto LABEL_31;
LABEL_47:
    v56 = SpanProperty.valueString.getter();
    v50 = v73;
    if (!v57)
    {
LABEL_31:
      v7 = v44;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v35 = v69;
LABEL_32:
      v39 += 4;
      if (!--v40)
      {
        swift_bridgeObjectRelease();
        v32 = v72;
        v33 = v63;
        v31 = v64;
        v34 = v62;
        goto LABEL_28;
      }
      continue;
    }
    break;
  }
  v7 = v44;
  if (v71 != v56 || v43 != v57)
  {
    v58 = v73;
    v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v58, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v35 = v69;
    if ((v59 & 1) != 0)
      goto LABEL_55;
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v6);
  swift_bridgeObjectRelease();
LABEL_54:
  swift_bridgeObjectRelease_n();
LABEL_55:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a3 = v66;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v66, v72, v6);
  v60 = 0;
LABEL_56:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v60, 1, v6);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in UsoTask.userEntityNamesNodes()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = MEMORY[0x1E0DEE9D8];
  if (!a1)
    return v1;
  swift_retain();
  v2 = UsoEntity.attributes.getter();
  if (!*(_QWORD *)(v2 + 16)
    || (v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x73656D616ELL, 0xE500000000000000), (v4 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_release();
    return v1;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v1;
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease();
    v1 = MEMORY[0x1E0DEE9D8];
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    return v1;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v6 = result;
  if (!result)
    goto LABEL_19;
LABEL_6:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
        MEMORY[0x1B5E43B94](i, v5);
      else
        swift_retain();
      v9 = dispatch thunk of UsoValue.getAsEntity()();
      v10 = swift_release();
      if (v9)
      {
        MEMORY[0x1B5E43498](v10);
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v1 = v11;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.firstSpanPropertyWithKeyMatchingAny(values:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int isUniquelyReferenced_nonNull_native;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, unint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;

  v54 = a1;
  v48 = a3;
  v4 = type metadata accessor for SpanProperty();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  v53 = v7;
  if (!v8)
  {
    v12 = MEMORY[0x1E0DEE9D8];
LABEL_25:
    v49 = *(_QWORD *)(v12 + 16);
    if (v49)
    {
      v52 = v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v28 = v54 + 56;
      v29 = *(_QWORD *)(v5 + 72);
      v50 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      v51 = v29;
      swift_bridgeObjectRetain();
      v30 = 0;
      do
      {
        v50(v7, v52 + v51 * v30, v4);
        v31 = SpanProperty.key.getter();
        v33 = v32;
        if (*(_QWORD *)(v54 + 16))
        {
          v34 = v31;
          v35 = v54;
          Hasher.init(_seed:)();
          String.hash(into:)();
          v36 = Hasher._finalize()();
          v37 = -1 << *(_BYTE *)(v35 + 32);
          v38 = v36 & ~v37;
          if (((*(_QWORD *)(v28 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) != 0)
          {
            v39 = *(_QWORD *)(v54 + 48);
            v40 = (_QWORD *)(v39 + 16 * v38);
            v41 = *v40 == v34 && v40[1] == v33;
            if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_42:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v45 = v48;
              (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v48, v53, v4);
              v46 = 0;
              goto LABEL_45;
            }
            v42 = ~v37;
            while (1)
            {
              v38 = (v38 + 1) & v42;
              if (((*(_QWORD *)(v28 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
                break;
              v43 = (_QWORD *)(v39 + 16 * v38);
              v44 = *v43 == v34 && v43[1] == v33;
              if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_42;
            }
          }
        }
        ++v30;
        swift_bridgeObjectRelease();
        v7 = v53;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v53, v4);
      }
      while (v30 != v49);
      swift_bridgeObjectRelease();
    }
    v46 = 1;
    v45 = v48;
LABEL_45:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v45, v46, 1, v4);
    return swift_bridgeObjectRelease();
  }
  v9 = *(_QWORD *)(type metadata accessor for UsoEntitySpan() - 8);
  v10 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = *(_QWORD *)(v9 + 72);
  v52 = a2;
  swift_bridgeObjectRetain();
  v12 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v13 = UsoEntitySpan.properties.getter();
    v14 = *(_QWORD *)(v13 + 16);
    v15 = *(_QWORD *)(v12 + 16);
    v16 = v15 + v14;
    if (__OFADD__(v15, v14))
      break;
    v17 = v13;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v16 <= *(_QWORD *)(v12 + 24) >> 1)
    {
      if (*(_QWORD *)(v17 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v15 <= v16)
        v19 = v15 + v14;
      else
        v19 = v15;
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v19, 1, v12);
      if (*(_QWORD *)(v17 + 16))
      {
LABEL_14:
        v20 = *(_QWORD *)(v12 + 16);
        if ((*(_QWORD *)(v12 + 24) >> 1) - v20 < v14)
          goto LABEL_48;
        v21 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        v22 = *(_QWORD *)(v5 + 72);
        v23 = v12 + v21 + v22 * v20;
        if (v17 + v21 < v23 + v22 * v14 && v23 < v17 + v21 + v22 * v14)
          goto LABEL_50;
        swift_arrayInitWithCopy();
        if (v14)
        {
          v25 = *(_QWORD *)(v12 + 16);
          v26 = __OFADD__(v25, v14);
          v27 = v25 + v14;
          if (v26)
            goto LABEL_49;
          *(_QWORD *)(v12 + 16) = v27;
        }
        goto LABEL_4;
      }
    }
    if (v14)
      goto LABEL_47;
LABEL_4:
    swift_bridgeObjectRelease();
    v10 += v11;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      v7 = v53;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL specialized CarCommandsAffinityScorer.hasHighProbabilityMatch(on:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  os_log_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  int v36;
  os_log_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SpanProperty();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v35 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v35 - v16;
  UsoTask.firstBasicUserEntityMatch.getter((uint64_t)v7);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (v18 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for SpanProperty?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    if (one-time initialization token for executor != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
    v39 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v39(v15, v17, v8);
    swift_bridgeObjectRetain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      v23 = swift_slowAlloc();
      v37 = v20;
      v24 = a2;
      v25 = v23;
      v38 = swift_slowAlloc();
      v41 = a3;
      v42 = v38;
      *(_DWORD *)v25 = 136315394;
      v35 = v25 + 4;
      v40 = v24;
      swift_bridgeObjectRetain();
      v36 = v22;
      v26 = String.init<A>(describing:)();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      v39(v12, v15, v8);
      v28 = String.init<A>(describing:)();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v30 = *(void (**)(char *, uint64_t))(v9 + 8);
      v30(v15, v8);
      v31 = v37;
      _os_log_impl(&dword_1B4BE6000, v37, (os_log_type_t)v36, "%s found basic carCommandsUserEntityNoun match (%s)", (uint8_t *)v25, 0x16u);
      v32 = v38;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v32, -1, -1);
      MEMORY[0x1B5E44758](v25, -1, -1);

      v30(v17, v8);
    }
    else
    {

      v33 = *(void (**)(char *, uint64_t))(v9 + 8);
      v33(v15, v8);
      swift_bridgeObjectRelease_n();
      v33(v17, v8);
    }
  }
  return v18 != 1;
}

ValueMetadata *type metadata accessor for CarCommandsAffinityScorer()
{
  return &type metadata for CarCommandsAffinityScorer;
}

uint64_t outlined consume of Set<String>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t ClearExecutionContext.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ClearExecutionContext.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ClearExecutionContext.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ClearExecutionContext.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for ClearExecutionContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for ClearExecutionContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClearExecutionContext.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t ResultSelected.isMitigated.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ResultSelected.endpointMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ResultSelected.init(isMitigated:endpointMode:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3 & 1;
  return result;
}

uint64_t CommitResultCandidate.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void CommitResultCandidate.resultSelectedMessage.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_BYTE *)(v1 + 48);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
}

uint64_t CommitResultCandidate.__allocating_init(resultCandidateId:resultSelectedMessage:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  char v9;

  result = swift_allocObject();
  v7 = *a3;
  v8 = *((_QWORD *)a3 + 1);
  v9 = a3[16];
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = v8;
  *(_BYTE *)(result + 48) = v9;
  return result;
}

uint64_t CommitResultCandidate.init(resultCandidateId:resultSelectedMessage:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v4 = *a3;
  v5 = *((_QWORD *)a3 + 1);
  v6 = a3[16];
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  *(_BYTE *)(v3 + 48) = v6;
  return v3;
}

uint64_t CommitResultCandidate.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  _StringGuts.grow(_:)(26);
  v1 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v8 = v1;
  v2._object = (void *)0x80000001B4EF7E10;
  v2._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v2);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

uint64_t CommitResultCandidate.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CommitResultCandidate.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CommitResultCandidate()
{
  return CommitResultCandidate.debugDescription.getter();
}

uint64_t getEnumTagSinglePayload for ResultSelected(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[17])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResultSelected(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResultSelected()
{
  return &type metadata for ResultSelected;
}

uint64_t type metadata accessor for CommitResultCandidate()
{
  return objc_opt_self();
}

uint64_t method lookup function for CommitResultCandidate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CommitResultCandidate.__allocating_init(resultCandidateId:resultSelectedMessage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t CommitResultCandidateId.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommitResultCandidateId.__allocating_init(resultCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t CommitResultCandidateId.init(resultCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t CommitResultCandidateId.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CommitResultCandidateId()
{
  return CommitResultCandidateId.debugDescription.getter();
}

uint64_t method lookup function for CommitResultCandidateId()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CommitResultCandidateId.__allocating_init(resultCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

void ComponentIdGeneratorImpl.derivedIdentifier(for:from:)(uint64_t a1)
{
  void *v2;
  Class isa;
  id v4;

  v2 = (void *)objc_opt_self();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, sel_derivedIdentifierForComponent_fromSourceIdentifier_, a1, isa);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

void protocol witness for ComponentIdGenerator.derivedIdentifier(for:from:) in conformance ComponentIdGeneratorImpl(uint64_t a1)
{
  void *v2;
  Class isa;
  id v4;

  v2 = (void *)objc_opt_self();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, sel_derivedIdentifierForComponent_fromSourceIdentifier_, a1, isa);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of ComponentIdGenerator.derivedIdentifier(for:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for ComponentIdGeneratorImpl()
{
  return &type metadata for ComponentIdGeneratorImpl;
}

uint64_t CompositeExecutionOverrides.overrides.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CompositeExecutionOverrides.newBuilder()()
{
  uint64_t result;

  type metadata accessor for CompositeExecutionOverrides.Builder();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t CompositeExecutionOverrides.Builder.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t CompositeExecutionOverrides.Builder.add(rule:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v15[24];
  uint64_t v16;
  uint64_t v17;

  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v15);
  v2 = (_QWORD *)(v1 + 16);
  swift_beginAccess();
  v3 = *(_QWORD **)(v1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 16) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *v2 = v3;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
    *v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
  v7 = v16;
  v8 = v17;
  v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
  MEMORY[0x1E0C80A78](v9);
  v11 = v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 22;
  (*(void (**)(_BYTE *))(v12 + 16))(v11);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, (uint64_t)v11, (uint64_t *)(v1 + 16), v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  swift_endAccess();
  return swift_retain();
}

uint64_t CompositeExecutionOverrides.Builder.addAll(rules:)()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0);
  swift_endAccess();
  return swift_retain();
}

uint64_t CompositeExecutionOverrides.Builder.build()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for CompositeExecutionOverrides();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompositeExecutionOverrides.Builder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CompositeExecutionOverrides.Builder.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of ReferenceResolutionClientProtocol(&v12, v10 + 40 * a1 + 32);
}

uint64_t method lookup function for CompositeExecutionOverrides()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for CompositeExecutionOverrides.Builder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CompositeExecutionOverrides.Builder.add(rule:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of CompositeExecutionOverrides.Builder.addAll(rules:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of CompositeExecutionOverrides.Builder.build()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of CompositeExecutionOverrides.Builder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t CompositePreExecutionRules.rules.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CompositePreExecutionRules.newBuilder()()
{
  uint64_t result;

  type metadata accessor for CompositePreExecutionRules.Builder();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t CompositePreExecutionRules.Builder.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t CompositePreExecutionRules.Builder.add(rule:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v15[24];
  uint64_t v16;
  uint64_t v17;

  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v15);
  v2 = (_QWORD *)(v1 + 16);
  swift_beginAccess();
  v3 = *(_QWORD **)(v1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 16) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *v2 = v3;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
    *v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
  v7 = v16;
  v8 = v17;
  v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
  MEMORY[0x1E0C80A78](v9);
  v11 = v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 22;
  (*(void (**)(_BYTE *))(v12 + 16))(v11);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, (uint64_t)v11, (uint64_t *)(v1 + 16), v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  swift_endAccess();
  return swift_retain();
}

uint64_t CompositePreExecutionRules.Builder.addAll(rules:)()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0);
  swift_endAccess();
  return swift_retain();
}

uint64_t CompositePreExecutionRules.Builder.build()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for CompositePreExecutionRules();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompositePreExecutionRules.Builder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CompositePreExecutionRules.Builder.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t method lookup function for CompositePreExecutionRules()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for CompositePreExecutionRules.Builder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CompositePreExecutionRules.Builder.add(rule:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of CompositePreExecutionRules.Builder.addAll(rules:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of CompositePreExecutionRules.Builder.build()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of CompositePreExecutionRules.Builder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t closure #1 in ConcurrentTaskPool.add(work:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v7();
}

uint64_t ConcurrentTaskPool.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ConcurrentTaskPool.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v1;
  return v0;
}

uint64_t ConcurrentTaskPool.init()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v1;
  return v0;
}

uint64_t sub_1B4CF67C8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConcurrentTaskPool.add(work:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6();
}

uint64_t method lookup function for ConcurrentTaskPool()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConcurrentTaskPool.add(task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ConcurrentTaskPool.add(work:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ConcurrentTaskPool.wait()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 136) + *(_QWORD *)(*(_QWORD *)v0 + 136));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of ConcurrentTaskPool.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of Waitable.wait()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

SiriKitRuntime::ContactsAffinityScorer __swiftcall ContactsAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::ContactsAffinityScorer result;

  v0 = (void *)0x80000001B4EF69C0;
  v1 = 0xD000000000000029;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t ContactsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void one-time initialization function for localesToExclude()
{
  static ContactsAffinityScorer.localesToExclude = &outlined read-only object #0 of one-time initialization function for localesToExclude;
}

uint64_t USOParse.usoIdentifiers.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v0 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  USOParse.userParse.getter();
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v16 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v19);
  }
  return v16;
}

uint64_t Array<A>.containsContactIdentifier.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for Google_Protobuf_StringValue();
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v26 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return 0;
  v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v29 = *(_QWORD *)(v6 + 72);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v26 = a1;
  swift_bridgeObjectRetain();
  while (1)
  {
    v14(v11, v13, v5);
    if (Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter() == 0x73746361746E6F43
      && v17 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      v14(v9, (uint64_t)v11, v5);
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v14(v9, (uint64_t)v11, v5);
      if ((v18 & 1) == 0)
      {
        v22 = *(void (**)(char *, uint64_t))(v6 + 8);
        v22(v9, v5);
        v22(v11, v5);
        goto LABEL_4;
      }
    }
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v19 = Google_Protobuf_StringValue.value.getter();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v28);
    if (v19 == 0x64695F6D657469 && v21 == 0xE700000000000000)
      break;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v9, v5);
    v16(v11, v5);
    if ((v15 & 1) != 0)
      goto LABEL_15;
LABEL_4:
    v13 += v29;
    if (!--v12)
    {
      v23 = 0;
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease();
  v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  v24(v9, v5);
  v24(v11, v5);
LABEL_15:
  v23 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t UsoTask.isAgeRequest.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  _BYTE v11[32];
  _BYTE v12[24];
  uint64_t v13;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v13)
    goto LABEL_17;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_checkExistence_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v2 = swift_release();
      if (!v10)
        goto LABEL_5;
      v3 = MEMORY[0x1B5E40210](v2);
      swift_release();
      if (!v3)
        goto LABEL_5;
LABEL_15:
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      v8 = 1;
      goto LABEL_23;
    }
    type metadata accessor for UsoTask_request_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v4 = swift_release();
      if (!v10 || (v5 = MEMORY[0x1B5E40210](v4), v4 = swift_release(), !v5))
      {
        v6 = MEMORY[0x1B5E4075C](&v10, v4);
        if (!v10 || (v7 = MEMORY[0x1B5E40210](v6), swift_release(), !v7))
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
          goto LABEL_19;
        }
      }
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
LABEL_17:
    v8 = 0;
    goto LABEL_23;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v0 = swift_release();
  if (v10)
  {
    v1 = MEMORY[0x1B5E40210](v0);
    swift_release();
    if (v1)
      goto LABEL_15;
  }
LABEL_5:
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
LABEL_19:
  swift_release();
  if (v10)
  {
    v8 = UsoEntity_common_Person.isAgeRequestPerson.getter();
    swift_release();
  }
  else
  {
    v8 = 0;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
LABEL_23:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

uint64_t UsoTask.hasPartialContactsSpanMatches.getter()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[32];
  _BYTE v7[24];
  uint64_t v8;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v8)
    goto LABEL_26;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_summarise_common_Person();
  if (swift_dynamicCast())
    goto LABEL_5;
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (swift_dynamicCast())
    goto LABEL_5;
  type metadata accessor for UsoTask_read_common_Person();
  if (swift_dynamicCast())
    goto LABEL_5;
  type metadata accessor for UsoTask_update_common_Person();
  if (swift_dynamicCast())
  {
    v1 = swift_retain();
    MEMORY[0x1B5E4078C](&v5, v1);
    swift_release();
    if (v5)
    {
      v2 = UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter();
      swift_release();
    }
    else
    {
      v2 = 0;
    }
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    goto LABEL_20;
  }
  type metadata accessor for UsoTask_checkExistence_common_Person();
  if (swift_dynamicCast())
  {
LABEL_5:
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v5)
    {
      v0 = UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter();
      swift_release();
    }
    else
    {
      v0 = 0;
    }
    swift_release();
    goto LABEL_9;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (!swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
LABEL_26:
    v0 = 0;
    goto LABEL_27;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  if (v5)
  {
    v2 = UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter();
    swift_release();
  }
  else
  {
    v2 = 0;
  }
  v4 = swift_retain();
  MEMORY[0x1B5E4075C](&v5, v4);
LABEL_20:
  swift_release();
  if (!v5)
  {
    swift_release();
    if ((v2 & 1) == 0)
    {
      v0 = 0;
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  v0 = UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter();
  swift_release();
  swift_release();
  if ((v2 & 1) != 0)
LABEL_24:
    v0 = 1;
LABEL_9:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
LABEL_27:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0 & 1;
}

BOOL UsoTask.hasContactIDs.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  _BYTE v12[24];
  uint64_t v13;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v13)
    goto LABEL_25;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_summarise_common_Person();
  if (swift_dynamicCast()
    || (type metadata accessor for UsoTask_noVerb_common_Person(), swift_dynamicCast())
    || (type metadata accessor for UsoTask_read_common_Person(), swift_dynamicCast()))
  {
LABEL_5:
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v10)
    {
      v0 = UsoEntity_common_Person.contactIDs.getter();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      v0 = MEMORY[0x1E0DEE9D8];
    }
    v1 = *(_QWORD *)(v0 + 16);
    goto LABEL_9;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_checkExistence_common_Person();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_request_common_Person();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        swift_release();
        if (v10)
        {
          v5 = UsoEntity_common_Person.contactIDs.getter();
          swift_release();
        }
        else
        {
          v5 = MEMORY[0x1E0DEE9D8];
        }
        v6 = *(_QWORD *)(v5 + 16);
        swift_bridgeObjectRelease();
        v9 = swift_retain();
        MEMORY[0x1B5E4075C](&v10, v9);
        goto LABEL_20;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
LABEL_25:
      v2 = 0;
      goto LABEL_26;
    }
    goto LABEL_5;
  }
  v3 = swift_retain();
  MEMORY[0x1B5E4078C](&v10, v3);
  swift_release();
  if (v10)
  {
    v4 = UsoEntity_common_Person.contactIDs.getter();
    swift_release();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9D8];
  }
  v6 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
LABEL_20:
  swift_release();
  if (v10)
  {
    v7 = UsoEntity_common_Person.contactIDs.getter();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  v1 = v6 | *(_QWORD *)(v7 + 16);
LABEL_9:
  swift_bridgeObjectRelease();
  v2 = v1 != 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
LABEL_26:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v2;
}

uint64_t UsoTask.isMeCardTask.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  int v86;
  uint64_t *v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  uint64_t *v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  void (*v117)(_QWORD, _QWORD, _QWORD);
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  void (*v121)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char v129;
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t, uint64_t, uint64_t);
  int v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  char *v145;
  void (*v146)(char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  unsigned int (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  char *v160;
  char v161;
  void (*v162)(char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t, uint64_t);
  _QWORD *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _BYTE v198[16];
  char v199[8];
  uint64_t v200;

  v193 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  v195 = *(_QWORD *)(v193 - 8);
  MEMORY[0x1E0C80A78](v193);
  v192 = (char *)&v167 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  v1 = MEMORY[0x1E0C80A78](v194);
  v171 = (uint64_t)&v167 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = MEMORY[0x1E0C80A78](v1);
  v184 = (uint64_t)&v167 - v4;
  v5 = MEMORY[0x1E0C80A78](v3);
  v180 = (char *)&v167 - v6;
  v7 = MEMORY[0x1E0C80A78](v5);
  v182 = (uint64_t)&v167 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v190 = (uint64_t *)((char *)&v167 - v10);
  v11 = MEMORY[0x1E0C80A78](v9);
  v189 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v167 - v12);
  v13 = MEMORY[0x1E0C80A78](v11);
  v191 = (char *)&v167 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v167 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v169 = (uint64_t)&v167 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v174 = (char *)&v167 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v172 = (char *)&v167 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v170 = (uint64_t)&v167 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v176 = (uint64_t)&v167 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v177 = (uint64_t)&v167 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v173 = (uint64_t)&v167 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v178 = (char *)&v167 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v179 = (char *)&v167 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v175 = (uint64_t)&v167 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v186 = (char *)&v167 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v183 = (char *)&v167 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v181 = (uint64_t)&v167 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v187 = (uint64_t)&v167 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v188 = (uint64_t)&v167 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v185 = (uint64_t)&v167 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v52 = (char *)&v167 - v51;
  v53 = MEMORY[0x1E0C80A78](v50);
  v55 = (char *)&v167 - v54;
  v56 = MEMORY[0x1E0C80A78](v53);
  v58 = (char *)&v167 - v57;
  v59 = MEMORY[0x1E0C80A78](v56);
  v61 = (char *)&v167 - v60;
  v62 = MEMORY[0x1E0C80A78](v59);
  v64 = (char *)&v167 - v63;
  v65 = MEMORY[0x1E0C80A78](v62);
  v67 = (char *)&v167 - v66;
  v68 = MEMORY[0x1E0C80A78](v65);
  v70 = (char *)&v167 - v69;
  MEMORY[0x1E0C80A78](v68);
  v72 = (char *)&v167 - v71;
  static UsoTask_CodegenConverter.convert(task:)();
  if (v200)
  {
    v168 = v55;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v199, (uint64_t)v198, (uint64_t *)&demangling cache variable for type metadata for Any?);
    type metadata accessor for UsoTask_summarise_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v73 = swift_release();
      if (v196)
      {
        MEMORY[0x1B5E401EC](v73);
        swift_release();
        v74 = v193;
        v75 = v195;
      }
      else
      {
        v75 = v195;
        v74 = v193;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v72, 1, 1, v193);
      }
      (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v70, *MEMORY[0x1E0DA1220], v74);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v70, 0, 1, v74);
      v84 = (uint64_t)&v16[*(int *)(v194 + 48)];
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v72, (uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v70, v84, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
      if (v85((uint64_t)v16, 1, v74) == 1)
      {
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v70, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v86 = v85(v84, 1, v74);
        if (v86 == 1)
          v87 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        else
          v87 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
        if (v86 == 1)
          v88 = -1;
        else
          v88 = 0;
      }
      else
      {
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)v67, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v85(v84, 1, v74) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v70, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          (*(void (**)(char *, uint64_t))(v75 + 8))(v67, v74);
          v88 = 0;
          v87 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
        }
        else
        {
          v93 = v192;
          (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v192, v84, v74);
          lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
          v88 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          v94 = *(void (**)(char *, uint64_t))(v75 + 8);
          v94(v93, v74);
          v87 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v70, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v94(v67, v74);
        }
      }
      v95 = (uint64_t)v16;
      v96 = v87;
      goto LABEL_109;
    }
    type metadata accessor for UsoTask_noVerb_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v76 = swift_release();
      if (v196)
      {
        MEMORY[0x1B5E401EC](v76);
        swift_release();
        v77 = v193;
        v78 = v195;
      }
      else
      {
        v78 = v195;
        v77 = v193;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v64, 1, 1, v193);
      }
      v97 = (uint64_t)v191;
      (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v61, *MEMORY[0x1E0DA1220], v77);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v61, 0, 1, v77);
      v98 = v97 + *(int *)(v194 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v64, v97, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v61, v98, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
      if (v99(v97, 1, v77) == 1)
      {
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v100 = v99(v98, 1, v77);
LABEL_38:
        if (v100 == 1)
          v106 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        else
          v106 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
        if (v100 == 1)
          v88 = -1;
        else
          v88 = 0;
        goto LABEL_107;
      }
      outlined init with copy of ReferenceResolutionClientProtocol?(v97, (uint64_t)v58, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      if (v99(v98, 1, v77) != 1)
      {
        v103 = v195;
        v104 = v192;
        (*(void (**)(char *, uint64_t, uint64_t))(v195 + 32))(v192, v98, v77);
        lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
        v88 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v105 = *(void (**)(char *, uint64_t))(v103 + 8);
        v105(v104, v77);
        v106 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v105(v58, v77);
LABEL_107:
        v95 = v97;
LABEL_108:
        v96 = v106;
LABEL_109:
        outlined destroy of ReferenceResolutionClientProtocol?(v95, v96);
        goto LABEL_110;
      }
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v195 + 8))(v58, v77);
LABEL_46:
      v88 = 0;
      v106 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
      goto LABEL_107;
    }
    type metadata accessor for UsoTask_read_common_Person();
    v79 = swift_dynamicCast();
    v80 = v193;
    v81 = v195;
    if (v79)
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v82 = swift_release();
      v83 = (uint64_t)v168;
      if (v196)
      {
        MEMORY[0x1B5E401EC](v82);
        swift_release();
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v168, 1, 1, v80);
      }
      v97 = (uint64_t)v189;
      (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v52, *MEMORY[0x1E0DA1220], v80);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v52, 0, 1, v80);
      v107 = v97 + *(int *)(v194 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v83, v97, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v52, v107, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v108 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
      if (v108(v97, 1, v80) == 1)
      {
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v52, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v100 = v108(v107, 1, v80);
        goto LABEL_38;
      }
      v109 = v185;
      outlined init with copy of ReferenceResolutionClientProtocol?(v97, v185, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      if (v108(v107, 1, v80) != 1)
      {
        v113 = v192;
        (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v192, v107, v80);
        lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
        v88 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v114 = *(void (**)(char *, uint64_t))(v81 + 8);
        v114(v113, v80);
        v106 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v52, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v114((char *)v109, v80);
        goto LABEL_107;
      }
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v52, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v109, v80);
      goto LABEL_46;
    }
    type metadata accessor for UsoTask_update_common_Person();
    if (swift_dynamicCast())
    {
      v89 = v197;
      v90 = swift_retain();
      MEMORY[0x1B5E4078C](&v196, v90);
      v91 = swift_release();
      v191 = v89;
      v92 = v188;
      if (v196)
      {
        MEMORY[0x1B5E401EC](v91);
        swift_release();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v188, 1, 1, v80);
      }
      v116 = (uint64_t)v186;
      v115 = v187;
      v117 = (void (*)(_QWORD, _QWORD, _QWORD))v190;
      v118 = *MEMORY[0x1E0DA1220];
      v189 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 104);
      v189(v187, v118, v80);
      v119 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
      v119(v115, 0, 1, v80);
      v120 = (uint64_t)v117 + *(int *)(v194 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v92, (uint64_t)v190, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v121 = (void (*)(_QWORD, _QWORD, _QWORD))v190;
      outlined init with copy of ReferenceResolutionClientProtocol?(v115, v120, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
      if (v122((uint64_t)v121, 1, v80) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v115, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v121 = (void (*)(_QWORD, _QWORD, _QWORD))v190;
        outlined destroy of ReferenceResolutionClientProtocol?(v92, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v122(v120, 1, v80) == 1)
        {
          v123 = (uint64_t)v121;
LABEL_55:
          outlined destroy of ReferenceResolutionClientProtocol?(v123, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          swift_release();
LABEL_100:
          v88 = 1;
LABEL_110:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
          goto LABEL_111;
        }
        goto LABEL_58;
      }
      v124 = v181;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v121, v181, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      if (v122(v120, 1, v80) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v187, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v188, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v124, v80);
LABEL_58:
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v121, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
        v125 = (uint64_t)v183;
LABEL_59:
        v126 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        if (v196)
        {
          MEMORY[0x1B5E401EC](v126);
          swift_release();
        }
        else
        {
          v119(v125, 1, 1, v80);
        }
        v189(v116, v118, v80);
        v119(v116, 0, 1, v80);
        v97 = v182;
        v131 = v182 + *(int *)(v194 + 48);
        outlined init with copy of ReferenceResolutionClientProtocol?(v125, v182, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v116, v131, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v122(v97, 1, v80) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v125, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v132 = v122(v131, 1, v80);
          goto LABEL_98;
        }
        v133 = v175;
        outlined init with copy of ReferenceResolutionClientProtocol?(v97, v175, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v122(v131, 1, v80) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v134 = v125;
LABEL_103:
          outlined destroy of ReferenceResolutionClientProtocol?(v134, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v133, v80);
          goto LABEL_104;
        }
        v141 = v192;
        (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v192, v131, v80);
        lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
        v88 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v142 = v125;
        v143 = *(void (**)(char *, uint64_t))(v81 + 8);
        v143(v141, v80);
        v106 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v144 = v142;
        goto LABEL_106;
      }
      v127 = (uint64_t)v121;
      v128 = v192;
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v192, v120, v80);
      lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
      v129 = dispatch thunk of static Equatable.== infix(_:_:)();
      v130 = *(void (**)(char *, uint64_t))(v81 + 8);
      v130(v128, v80);
      outlined destroy of ReferenceResolutionClientProtocol?(v187, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?(v188, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v130((char *)v124, v80);
      v116 = (uint64_t)v186;
      outlined destroy of ReferenceResolutionClientProtocol?(v127, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v125 = (uint64_t)v183;
      if ((v129 & 1) == 0)
        goto LABEL_59;
LABEL_64:
      swift_release();
      goto LABEL_100;
    }
    type metadata accessor for UsoTask_checkExistence_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v101 = swift_release();
      v102 = (uint64_t)v179;
      if (v196)
      {
        MEMORY[0x1B5E401EC](v101);
        swift_release();
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v179, 1, 1, v80);
      }
      v135 = (uint64_t)v180;
      v136 = (uint64_t)v178;
      (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v178, *MEMORY[0x1E0DA1220], v80);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v136, 0, 1, v80);
      v137 = v135 + *(int *)(v194 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v102, v135, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v136, v137, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v138 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
      if (v138(v135, 1, v80) == 1)
      {
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?(v136, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v139 = v138(v137, 1, v80);
        if (v139 == 1)
          v106 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        else
          v106 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
        if (v139 == 1)
          v88 = -1;
        else
          v88 = 0;
        v95 = v135;
      }
      else
      {
        v140 = v173;
        outlined init with copy of ReferenceResolutionClientProtocol?(v135, v173, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v138(v137, 1, v80) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v136, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v140, v80);
          v88 = 0;
          v106 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
        }
        else
        {
          v145 = v192;
          (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v192, v137, v80);
          lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
          v88 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          v146 = *(void (**)(char *, uint64_t))(v81 + 8);
          v146(v145, v80);
          v106 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
          outlined destroy of ReferenceResolutionClientProtocol?(v136, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v146((char *)v140, v80);
        }
        v95 = v135;
      }
      goto LABEL_108;
    }
    type metadata accessor for UsoTask_request_common_Person();
    if (swift_dynamicCast())
    {
      v110 = v197;
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v111 = swift_release();
      v191 = v110;
      v112 = v177;
      if (v196)
      {
        MEMORY[0x1B5E401EC](v111);
        swift_release();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v177, 1, 1, v80);
      }
      v147 = (uint64_t)v174;
      v148 = v184;
      v149 = v176;
      v150 = *MEMORY[0x1E0DA1220];
      v190 = *(_QWORD **)(v81 + 104);
      ((void (*)(uint64_t, uint64_t, uint64_t))v190)(v176, v150, v80);
      v151 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
      v151(v149, 0, 1, v80);
      v152 = v148 + *(int *)(v194 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v112, v184, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v153 = v184;
      outlined init with copy of ReferenceResolutionClientProtocol?(v149, v152, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v154 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
      if (v154(v153, 1, v80) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v149, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v153 = v184;
        outlined destroy of ReferenceResolutionClientProtocol?(v112, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v154(v152, 1, v80) == 1)
        {
          v123 = v153;
          goto LABEL_55;
        }
      }
      else
      {
        v155 = v170;
        outlined init with copy of ReferenceResolutionClientProtocol?(v153, v170, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v154(v152, 1, v80) != 1)
        {
          v159 = v153;
          v160 = v192;
          (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v192, v152, v80);
          lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
          v161 = dispatch thunk of static Equatable.== infix(_:_:)();
          v162 = *(void (**)(char *, uint64_t))(v81 + 8);
          v162(v160, v80);
          outlined destroy of ReferenceResolutionClientProtocol?(v176, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v177, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v162((char *)v155, v80);
          v147 = (uint64_t)v174;
          v156 = outlined destroy of ReferenceResolutionClientProtocol?(v159, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v157 = (uint64_t)v172;
          if ((v161 & 1) != 0)
            goto LABEL_64;
LABEL_91:
          v158 = MEMORY[0x1B5E4075C](&v196, v156);
          if (v196)
          {
            MEMORY[0x1B5E401EC](v158);
            swift_release();
          }
          else
          {
            v151(v157, 1, 1, v80);
          }
          ((void (*)(uint64_t, uint64_t, uint64_t))v190)(v147, v150, v80);
          v151(v147, 0, 1, v80);
          v97 = v171;
          v163 = v171 + *(int *)(v194 + 48);
          outlined init with copy of ReferenceResolutionClientProtocol?(v157, v171, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined init with copy of ReferenceResolutionClientProtocol?(v147, v163, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          if (v154(v97, 1, v80) == 1)
          {
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v147, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v157, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            v132 = v154(v163, 1, v80);
LABEL_98:
            if (v132 == 1)
            {
              outlined destroy of ReferenceResolutionClientProtocol?(v97, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
              goto LABEL_100;
            }
LABEL_104:
            outlined destroy of ReferenceResolutionClientProtocol?(v97, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
            v88 = 0;
            goto LABEL_110;
          }
          v133 = v169;
          outlined init with copy of ReferenceResolutionClientProtocol?(v97, v169, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          if (v154(v163, 1, v80) == 1)
          {
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v147, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            v134 = v157;
            goto LABEL_103;
          }
          v164 = v157;
          v165 = v192;
          (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v192, v163, v80);
          lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
          v88 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          v143 = *(void (**)(char *, uint64_t))(v81 + 8);
          v143(v165, v80);
          v106 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
          outlined destroy of ReferenceResolutionClientProtocol?(v147, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v144 = v164;
LABEL_106:
          outlined destroy of ReferenceResolutionClientProtocol?(v144, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v143((char *)v133, v80);
          goto LABEL_107;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v176, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v177, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v155, v80);
      }
      v156 = outlined destroy of ReferenceResolutionClientProtocol?(v153, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
      v157 = (uint64_t)v172;
      goto LABEL_91;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
  }
  v88 = 0;
LABEL_111:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v199, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v88 & 1;
}

uint64_t UsoEntity_common_Person.contactIDs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  char *v14;
  unint64_t v15;
  void (*v16)(char *, uint64_t);
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;

  v0 = type metadata accessor for IdentifierAppBundle();
  v52 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v51 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v53 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v45 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v45 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v45 - v11;
  result = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  v14 = (char *)MEMORY[0x1E0DEE9D8];
  if (!result)
    result = MEMORY[0x1E0DEE9D8];
  v54 = (char *)MEMORY[0x1E0DEE9D8];
  v50 = *(_QWORD *)(result + 16);
  if (v50)
  {
    v48 = result;
    v49 = v0;
    v15 = 0;
    v47 = v10;
    while (1)
    {
      if (v15 >= *(_QWORD *)(result + 16))
      {
        __break(1u);
        return result;
      }
      v17 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v18 = *(_QWORD *)(v3 + 72);
      v19 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
      v19(v12, result + v17 + v18 * v15, v2);
      v20 = v51;
      UsoIdentifier.appBundleSemantic.getter();
      v21 = IdentifierAppBundle.rawValue.getter();
      v23 = v22;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v49);
      if (v21 == 0x73746361746E6F43 && v23 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        v24 = v47;
        v19(v47, (unint64_t)v12, v2);
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v24 = v47;
        v19(v47, (unint64_t)v12, v2);
        if ((v25 & 1) == 0)
          goto LABEL_5;
      }
      v26 = UsoIdentifier.namespace.getter();
      if (!v27)
      {
LABEL_5:
        v16 = *(void (**)(char *, uint64_t))(v3 + 8);
        v16(v24, v2);
        goto LABEL_6;
      }
      if (v26 == 0x64695F6D657469 && v27 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v24, v2);
LABEL_18:
        v29 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
        v29(v46, v12, v2);
        v30 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1);
          v30 = v54;
        }
        v32 = *((_QWORD *)v30 + 2);
        v31 = *((_QWORD *)v30 + 3);
        if (v32 >= v31 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
          v30 = v54;
        }
        *((_QWORD *)v30 + 2) = v32 + 1;
        v29(&v30[v17 + v32 * v18], v46, v2);
        v54 = v30;
        goto LABEL_7;
      }
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v16 = *(void (**)(char *, uint64_t))(v3 + 8);
      v16(v24, v2);
      if ((v28 & 1) != 0)
        goto LABEL_18;
LABEL_6:
      v16(v12, v2);
LABEL_7:
      ++v15;
      result = v48;
      if (v50 == v15)
      {
        v33 = v54;
        v14 = (char *)MEMORY[0x1E0DEE9D8];
        goto LABEL_25;
      }
    }
  }
  v33 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_25:
  swift_bridgeObjectRelease();
  v34 = *((_QWORD *)v33 + 2);
  if (v34)
  {
    v54 = v14;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
    v35 = &v33[(*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)];
    v36 = *(_QWORD *)(v3 + 72);
    v51 = v33;
    v52 = v36;
    v37 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    do
    {
      v38 = v53;
      v37(v53, v35, v2);
      v39 = UsoIdentifier.value.getter();
      v41 = v40;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v38, v2);
      v14 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1);
        v14 = v54;
      }
      v43 = *((_QWORD *)v14 + 2);
      v42 = *((_QWORD *)v14 + 3);
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        v14 = v54;
      }
      *((_QWORD *)v14 + 2) = v43 + 1;
      v44 = &v14[16 * v43];
      *((_QWORD *)v44 + 4) = v39;
      *((_QWORD *)v44 + 5) = v41;
      v35 += v52;
      --v34;
    }
    while (v34);
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter()
{
  uint64_t matched;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  char *v48;
  char v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, unint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;

  matched = type metadata accessor for MatchInfo.MatchSignals();
  v65 = *(_QWORD *)(matched - 8);
  v66 = matched;
  MEMORY[0x1E0C80A78](matched);
  v64 = (char *)&v57 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v57 - v6;
  v67 = type metadata accessor for MatchInfo();
  v8 = *(_QWORD *)(v67 - 8);
  v9 = MEMORY[0x1E0C80A78](v67);
  v61 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v62 = (char *)&v57 - v11;
  v12 = type metadata accessor for UsoEntitySpan();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v60 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v57 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v57 - v19;
  v21 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
  if (v21)
    v22 = v21;
  else
    v22 = MEMORY[0x1E0DEE9D8];
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
    v63 = v7;
    v58 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v59 = v5;
    v24 = v22 + v58;
    v25 = *(_QWORD *)(v13 + 72);
    v72 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
    v73 = v25;
    v70 = v22;
    swift_bridgeObjectRetain();
    v26 = v24;
    v68 = v23;
    v69 = v18;
    v71 = v13;
    while (1)
    {
      v72(v20, v26, v12);
      v28 = UsoEntitySpan.originAppId.getter();
      if (v29)
      {
        if (v28 == 0x73746361746E6F43 && v29 == 0xE800000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v30 & 1) == 0)
            goto LABEL_7;
        }
        v31 = (uint64_t)v63;
        UsoEntitySpan.matchInfo.getter();
        v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
        v33 = v8;
        v34 = v67;
        if (v32(v31, 1, v67) != 1)
        {
          v35 = v62;
          (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v62, v31, v34);
          v36 = v64;
          static MatchInfo.MatchSignals.exactMatch.getter();
          v37 = MatchInfo.hasMatchSignals(_:)();
          (*(void (**)(char *, uint64_t))(v65 + 8))(v36, v66);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v34);
          v38 = v71;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v12);
          v8 = v33;
          v13 = v38;
          if ((v37 & 1) != 0)
          {
            swift_bridgeObjectRelease_n();
            return 0;
          }
          goto LABEL_8;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for MatchInfo?);
        v8 = v33;
        v13 = v71;
      }
LABEL_7:
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_8:
      v26 += v73;
      --v23;
      v27 = v69;
      if (!v23)
      {
        v40 = v70;
        result = swift_bridgeObjectRelease();
        v41 = 0;
        v74 = MEMORY[0x1E0DEE9D8];
        v42 = (uint64_t)v59;
        v43 = v67;
        while (1)
        {
          if (v41 >= *(_QWORD *)(v40 + 16))
          {
            __break(1u);
            return result;
          }
          v72(v27, v24, v12);
          v44 = UsoEntitySpan.originAppId.getter();
          if (!v45)
            goto LABEL_19;
          if (v44 == 0x73746361746E6F43 && v45 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v46 & 1) == 0)
              goto LABEL_19;
          }
          UsoEntitySpan.matchInfo.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v42, 1, v43) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for MatchInfo?);
          }
          else
          {
            v47 = v61;
            (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v61, v42, v43);
            v48 = v64;
            static MatchInfo.MatchSignals.partialMatch.getter();
            v49 = MatchInfo.hasMatchSignals(_:)();
            v50 = v48;
            v43 = v67;
            (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v66);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v47, v43);
            if ((v49 & 1) != 0)
            {
              v51 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
              v51(v60, v27, v12);
              v52 = v74;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v52 + 16) + 1, 1);
                v52 = v74;
              }
              v54 = *(_QWORD *)(v52 + 16);
              v53 = *(_QWORD *)(v52 + 24);
              if (v54 >= v53 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
                v52 = v74;
              }
              *(_QWORD *)(v52 + 16) = v54 + 1;
              result = ((uint64_t (*)(unint64_t, char *, uint64_t))v51)(v52 + v58 + v54 * v73, v60, v12);
              v74 = v52;
              v42 = (uint64_t)v59;
              v43 = v67;
              goto LABEL_20;
            }
          }
LABEL_19:
          result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v27, v12);
LABEL_20:
          ++v41;
          v24 += v73;
          v40 = v70;
          if (v68 == v41)
          {
            v55 = v74;
            goto LABEL_36;
          }
        }
      }
    }
  }
  v55 = MEMORY[0x1E0DEE9D8];
LABEL_36:
  swift_bridgeObjectRelease();
  v56 = *(_QWORD *)(v55 + 16);
  swift_release();
  return v56 != 0;
}

uint64_t UsoEntity_common_Person.isAgeRequestPerson.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;

  v0 = type metadata accessor for DateComponents();
  v75 = *(_QWORD *)(v0 - 8);
  v76 = v0;
  MEMORY[0x1E0C80A78](v0);
  v70 = (char *)v67 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v68 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v69 = (uint64_t)v67 - v6;
  MEMORY[0x1E0C80A78](v5);
  v71 = (char *)v67 - v7;
  v8 = type metadata accessor for DateTimeResolver();
  v87 = *(_QWORD *)(v8 - 8);
  v88 = v8;
  MEMORY[0x1E0C80A78](v8);
  v86 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>?);
  MEMORY[0x1E0C80A78](v10);
  v89 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  v91 = *(_QWORD *)(v93 - 8);
  v12 = MEMORY[0x1E0C80A78](v93);
  v77 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v78 = (char *)v67 - v14;
  v15 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy();
  v83 = *(_QWORD *)(v15 - 8);
  v84 = v15;
  MEMORY[0x1E0C80A78](v15);
  v85 = (char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DateTimeResolutionSpec.ExpandToType();
  v81 = *(_QWORD *)(v17 - 8);
  v82 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DateTimeResolutionSpec();
  v79 = *(_QWORD *)(v20 - 8);
  v80 = v20;
  MEMORY[0x1E0C80A78](v20);
  v92 = (char *)v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v22);
  v23 = type metadata accessor for Calendar();
  v74 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v90 = (char *)v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DateTimeResolutionContext.Hemisphere();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for TimeZone();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v94 = (char *)v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Locale();
  v31 = MEMORY[0x1E0C80A78](v30);
  v32 = MEMORY[0x1E0C80A78](v31);
  v33 = MEMORY[0x1E0C80A78](v32);
  v34 = MEMORY[0x1B5E40204](v33);
  if (!v34)
    return 0;
  v67[0] = v23;
  v35 = v34;
  v36 = UsoEntity_common_Date.toDate()();
  if (!v36)
  {
    swift_release();
    return 0;
  }
  v67[1] = v35;
  v37 = v36;
  type metadata accessor for DateTime.Time();
  swift_allocObject();
  swift_retain();
  DateTime.Time.init(withHour:)();
  type metadata accessor for DateTime();
  swift_allocObject();
  v67[2] = v37;
  DateTime.init(withDate:time:)();
  static Locale.autoupdatingCurrent.getter();
  static Locale.autoupdatingCurrent.getter();
  static Locale.autoupdatingCurrent.getter();
  static TimeZone.autoupdatingCurrent.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, *MEMORY[0x1E0D98778], v25);
  v38 = v90;
  static Calendar.autoupdatingCurrent.getter();
  static Date.now.getter();
  type metadata accessor for DateTimeResolutionContext();
  swift_allocObject();
  v39 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v19, *MEMORY[0x1E0D98720], v82);
  (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v85, *MEMORY[0x1E0D98708], v84);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v40 = v92;
  DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)();
  v41 = v86;
  DateTimeResolver.init()();
  v42 = v89;
  DateTimeResolver.makeRecommendation(value:context:spec:)();
  v85 = (char *)v39;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v41, v88);
  v45 = v91;
  v46 = v93;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v42, 0, 1, v93);
  v47 = v78;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v78, v42, v46);
  v48 = v77;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v77, v47, v46);
  v49 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v48, v46);
  if (v49 == *MEMORY[0x1E0D985E8] || v49 == *MEMORY[0x1E0D985D8])
  {
    (*(void (**)(char *, uint64_t))(v45 + 96))(v48, v46);
    static Calendar.current.getter();
    v57 = v94;
    static TimeZone.current.getter();
    v58 = (void *)DateTime.toINDateComponentsRange(calendar:timeZone:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v57, v73);
    (*(void (**)(char *, _QWORD))(v74 + 8))(v38, v67[0]);
    v43 = (unint64_t)objc_msgSend(v58, sel_startDateComponents);

    if (!v43)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v40, v80);
      v62 = (uint64_t)v71;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v71, 1, 1, v76);
LABEL_24:
      outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for DateComponents?);
      return v43;
    }
    v59 = v70;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v40, v80);
    v61 = v75;
    v60 = v76;
    v62 = (uint64_t)v71;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v71, v59, v76);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v60);
LABEL_23:
    v43 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v62, 1, v60) != 1;
    goto LABEL_24;
  }
  v50 = v94;
  if (v49 != *MEMORY[0x1E0D985E0])
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v63 = *(void (**)(char *, uint64_t))(v45 + 8);
    v63(v47, v46);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v40, v80);
    v63(v48, v46);
    return 0;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v45 + 96))(v48, v46);
  v51 = *(_QWORD *)v48;
  if (!(*(_QWORD *)v48 >> 62))
  {
    if (*(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_12;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  v66 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v66)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v40, v80);
    return 0;
  }
LABEL_12:
  if ((v51 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v51);
    goto LABEL_15;
  }
  if (*(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_15:
    swift_bridgeObjectRelease();
    static Calendar.current.getter();
    static TimeZone.current.getter();
    v52 = v50;
    v53 = (void *)DateTime.toINDateComponentsRange(calendar:timeZone:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v52, v73);
    (*(void (**)(char *, _QWORD))(v74 + 8))(v38, v67[0]);
    v54 = objc_msgSend(v53, sel_startDateComponents);

    if (v54)
    {
      v55 = v68;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
      swift_release();

      v56 = 0;
    }
    else
    {
      swift_release();
      v56 = 1;
      v55 = v68;
    }
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v40, v80);
    v61 = v75;
    v64 = v56;
    v60 = v76;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v55, v64, 1, v76);
    v65 = (uint64_t)v55;
    v62 = v69;
    outlined init with take of DateComponents?(v65, v69);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

unint64_t specialized ContactsAffinityScorer.getContactTask(from:)()
{
  unint64_t v0;
  _BYTE v2[32];
  __int128 v3;
  __int128 v4;

  v0 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v0)
  {
    v3 = 0u;
    v4 = 0u;
    goto LABEL_16;
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!*((_QWORD *)&v4 + 1))
  {
    swift_release();
LABEL_15:
    v0 = 0;
    goto LABEL_16;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v3, (uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_summarise_common_Person();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_Person();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_read_common_Person();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_update_common_Person();
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_checkExistence_common_Person();
          if (!swift_dynamicCast())
          {
            type metadata accessor for UsoTask_request_common_Person();
            if (!swift_dynamicCast())
            {
              type metadata accessor for UsoTask_create_common_Person();
              if (!swift_dynamicCast())
              {
                type metadata accessor for UsoTask_delete_common_Person();
                if (!swift_dynamicCast())
                {
                  type metadata accessor for UsoTask_update_common_Communication();
                  if (!swift_dynamicCast())
                  {
                    swift_release();
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
                    goto LABEL_15;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
LABEL_16:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t specialized ContactsAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  const char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v63[2];
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  v67 = a2;
  v2 = type metadata accessor for Locale();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for USOParse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Parse();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 88))(v13, v10) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    v14 = v7;
    v15 = v9;
    if (one-time initialization token for localesToExclude != -1)
      swift_once();
    v16 = (char *)static ContactsAffinityScorer.localesToExclude;
    v17 = *((_QWORD *)static ContactsAffinityScorer.localesToExclude + 2);
    if (v17)
    {
      v64 = v14;
      v65 = v9;
      v66 = v6;
      swift_bridgeObjectRetain_n();
      v63[1] = v16;
      v18 = (uint64_t *)(v16 + 40);
      while (1)
      {
        v20 = *(v18 - 1);
        v19 = *v18;
        swift_bridgeObjectRetain();
        SiriEnvironment.currentDevice.getter();
        dispatch thunk of CurrentDevice.siriLocale.getter();
        swift_release();
        v21 = Locale.identifier.getter();
        v23 = v22;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        if (v20 == v21 && v19 == v23)
          break;
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
          goto LABEL_36;
        v18 += 2;
        if (!--v17)
        {
          swift_bridgeObjectRelease_n();
          v15 = v65;
          v6 = v66;
          v14 = v64;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_36:
      swift_bridgeObjectRelease_n();
      v47 = v65;
      v48 = USOParse.usoIdentifiers.getter();
      v49 = Array<A>.containsContactIdentifier.getter(v48);
      swift_bridgeObjectRelease();
      v50 = v66;
      v51 = v64;
      if ((v49 & 1) != 0)
      {
        if (one-time initialization token for executor != -1)
          swift_once();
        v52 = type metadata accessor for Logger();
        __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
        v53 = Logger.logObject.getter();
        v54 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v55 = 0;
          _os_log_impl(&dword_1B4BE6000, v53, v54, "#ContactsAffinityScorer preventing any domain boosting logic from executing in reported locale, returning .default", v55, 2u);
          MEMORY[0x1B5E44758](v55, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v50);
        return 2;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v56 = type metadata accessor for Logger();
      __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
      v57 = Logger.logObject.getter();
      v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v59 = 0;
        _os_log_impl(&dword_1B4BE6000, v57, v58, "#ContactsAffinityScorer did not find any relevant usoIdentifier, returning low affinity score.", v59, 2u);
        MEMORY[0x1B5E44758](v59, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v50);
      return 1;
    }
LABEL_13:
    if (!specialized ContactsAffinityScorer.getContactTask(from:)())
    {
      v42 = v15;
      if (one-time initialization token for executor != -1)
        swift_once();
      v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v46 = 0;
        _os_log_impl(&dword_1B4BE6000, v44, v45, "#ContactsAffinityScorer did not find any relevant usoIdentifiers or tasks, returning low affinity score.", v46, 2u);
        MEMORY[0x1B5E44758](v46, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v42, v6);
      return 1;
    }
    v26 = v15;
    if ((UsoTask.isAgeRequest.getter() & 1) != 0 && (UsoTask.hasPartialContactsSpanMatches.getter() & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v28, v29))
        goto LABEL_60;
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      v31 = "#ContactsAffinityScorer found recognized task but with partial span matches, returning default affinity score.";
LABEL_59:
      _os_log_impl(&dword_1B4BE6000, v28, v29, v31, v30, 2u);
      MEMORY[0x1B5E44758](v30, -1, -1);
LABEL_60:
      swift_release();

      (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v6);
      return 2;
    }
    if (UsoTask.hasContactIDs.getter())
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v38, v39))
        goto LABEL_54;
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      v41 = "#ContactsAffinityScorer found recognized task with contact IDs, returning high affinity score.";
    }
    else
    {
      if ((UsoTask.isMeCardTask.getter() & 1) == 0)
      {
        if (one-time initialization token for executor != -1)
          swift_once();
        v61 = type metadata accessor for Logger();
        __swift_project_value_buffer(v61, (uint64_t)static Logger.executor);
        v28 = Logger.logObject.getter();
        v29 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v28, v29))
          goto LABEL_60;
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        v31 = "#ContactsAffinityScorer found recognized task but no contact IDs, returning default affinity score.";
        goto LABEL_59;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v60 = type metadata accessor for Logger();
      __swift_project_value_buffer(v60, (uint64_t)static Logger.executor);
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v38, v39))
      {
LABEL_54:
        swift_release();

        (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v6);
        return 3;
      }
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      v41 = "#ContactsAffinityScorer found recognized task for user, returning high affinity score.";
    }
    _os_log_impl(&dword_1B4BE6000, v38, v39, v41, v40, 2u);
    MEMORY[0x1B5E44758](v40, -1, -1);
    goto LABEL_54;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (one-time initialization token for executor != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v33, v34))
  {

    return 2;
  }
  v35 = 2;
  v36 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v36 = 0;
  _os_log_impl(&dword_1B4BE6000, v33, v34, "#ContactsAffinityScorer returning default affinity score.", v36, 2u);
  MEMORY[0x1B5E44758](v36, -1, -1);

  return v35;
}

ValueMetadata *type metadata accessor for ContactsAffinityScorer()
{
  return &type metadata for ContactsAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues)
  {
    v1 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA1238], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues);
  }
  return result;
}

uint64_t outlined init with take of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *static ContextTypeKey.allCases.getter()
{
  return &outlined read-only object #0 of static ContextTypeKey.allCases.getter;
}

uint64_t ContextTypeKey.rawValue.getter(char a1)
{
  uint64_t result;

  result = 0xD000000000000019;
  if (a1)
  {
    if (a1 == 1)
      return 0x4C4E79636167656CLL;
    else
      return 0xD00000000000001ALL;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContextTypeKey(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x4C4E79636167656CLL;
  v4 = 0xEF747865746E6F43;
  v5 = 0x80000001B4EF4590;
  if (v2 != 1)
  {
    v3 = 0xD00000000000001ALL;
    v4 = 0x80000001B4EF4590;
  }
  if (*a1)
    v6 = v3;
  else
    v6 = 0xD000000000000019;
  if (v2)
    v7 = v4;
  else
    v7 = 0x80000001B4EF4560;
  v8 = 0x4C4E79636167656CLL;
  if (*a2 == 1)
    v5 = 0xEF747865746E6F43;
  else
    v8 = 0xD00000000000001ALL;
  if (*a2)
    v9 = v8;
  else
    v9 = 0xD000000000000019;
  if (*a2)
    v10 = v5;
  else
    v10 = 0x80000001B4EF4560;
  if (v6 == v9 && v7 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContextTypeKey()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContextTypeKey()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContextTypeKey()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ContextTypeKey@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ContextTypeKey.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContextTypeKey(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xD000000000000019;
  v3 = 0xEF747865746E6F43;
  v4 = 0x4C4E79636167656CLL;
  if (*v1 != 1)
  {
    v4 = 0xD00000000000001ALL;
    v3 = 0x80000001B4EF4590;
  }
  if (*v1)
  {
    v2 = v4;
    v5 = v3;
  }
  else
  {
    v5 = 0x80000001B4EF4560;
  }
  *a1 = v2;
  a1[1] = v5;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContextTypeKey(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ContextTypeKey;
}

unint64_t specialized ContextTypeKey.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContextTypeKey.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type ContextTypeKey and conformance ContextTypeKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContextTypeKey and conformance ContextTypeKey;
  if (!lazy protocol witness table cache variable for type ContextTypeKey and conformance ContextTypeKey)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ContextTypeKey, &type metadata for ContextTypeKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContextTypeKey and conformance ContextTypeKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContextTypeKey] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ContextTypeKey] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContextTypeKey] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ContextTypeKey]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContextTypeKey] and conformance [A]);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContextTypeKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4CFB46C + 4 * byte_1B4EE634D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4CFB4A0 + 4 * asc_1B4EE6348[v4]))();
}

uint64_t sub_1B4CFB4A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CFB4A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CFB4B0);
  return result;
}

uint64_t sub_1B4CFB4BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CFB4C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4CFB4C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CFB4D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContextTypeKey()
{
  return &type metadata for ContextTypeKey;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v27;
  _QWORD *v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  _QWORD v51[4];
  _QWORD *v52;

  v4 = type metadata accessor for ConversationSessionKey();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v49 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v45 = (char *)&v42 - v8;
  v46 = a1;
  v9 = *(_QWORD *)(a1 + 56);
  v43 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v44 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    if (v12)
    {
      v47 = (v12 - 1) & v12;
      v48 = v13;
      v15 = __clz(__rbit64(v12)) | (v13 << 6);
    }
    else
    {
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_36;
      if (v16 >= v44)
        return swift_release();
      v17 = *(_QWORD *)(v43 + 8 * v16);
      v18 = v13 + 1;
      if (!v17)
      {
        v18 = v13 + 2;
        if (v13 + 2 >= v44)
          return swift_release();
        v17 = *(_QWORD *)(v43 + 8 * v18);
        if (!v17)
        {
          v18 = v13 + 3;
          if (v13 + 3 >= v44)
            return swift_release();
          v17 = *(_QWORD *)(v43 + 8 * v18);
          if (!v17)
          {
            v18 = v13 + 4;
            if (v13 + 4 >= v44)
              return swift_release();
            v17 = *(_QWORD *)(v43 + 8 * v18);
            if (!v17)
            {
              v19 = v13 + 5;
              if (v13 + 5 >= v44)
                return swift_release();
              v17 = *(_QWORD *)(v43 + 8 * v19);
              if (!v17)
              {
                while (1)
                {
                  v18 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_37;
                  if (v18 >= v44)
                    return swift_release();
                  v17 = *(_QWORD *)(v43 + 8 * v18);
                  ++v19;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v18 = v13 + 5;
            }
          }
        }
      }
LABEL_23:
      v47 = (v17 - 1) & v17;
      v48 = v18;
      v15 = __clz(__rbit64(v17)) + (v18 << 6);
    }
    v20 = v45;
    v21 = *(_QWORD *)(v5 + 72);
    v22 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v22(v45, *(_QWORD *)(v46 + 48) + v21 * v15, v4);
    v23 = v5;
    v24 = v49;
    v25 = v4;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v49, v20, v4);
    memset(v50, 0, sizeof(v50));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = (_QWORD *)*a2;
    v27 = v52;
    v28 = a2;
    *a2 = 0x8000000000000000;
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
    v31 = v27[2];
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      break;
    v34 = v29;
    if (v27[3] >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_38;
      v30 = v35;
    }
    v4 = v25;
    v37 = v52;
    if ((v34 & 1) != 0)
    {
      v14 = 32 * v30;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v52[7] + v14, (uint64_t)v51, &demangling cache variable for type metadata for Sendable?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v50, v37[7] + v14, &demangling cache variable for type metadata for Sendable?);
    }
    else
    {
      v52[(v30 >> 6) + 8] |= 1 << v30;
      v22((char *)(v37[6] + v30 * v21), v49, v25);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v50, v37[7] + 32 * v30, &demangling cache variable for type metadata for Sendable?);
      v38 = v37[2];
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        goto LABEL_35;
      v37[2] = v40;
      memset(v51, 0, 24);
      v51[3] = 1;
    }
    v12 = v47;
    v13 = v48;
    a2 = v28;
    *v28 = v37;
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v51, &demangling cache variable for type metadata for Sendable??);
    v5 = v23;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v49, v25);
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.toLegacyNLContext()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue();
  v2 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Siri_Nlu_External_LegacyNLContext.LegacyContextSource();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_LegacyNLContext.init()();
  Com_Apple_Siri_Product_Proto_PromptContext.dictationPrompt.getter();
  Siri_Nlu_External_LegacyNLContext.dictationPrompt.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.getter();
  Siri_Nlu_External_LegacyNLContext.strictPrompt.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.getter();
  Siri_Nlu_External_LegacyNLContext.previousDomainName.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.getter();
  Siri_Nlu_External_LegacyNLContext.listenAfterSpeaking.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0D9F600], v5);
  Siri_Nlu_External_LegacyNLContext.legacyContextSource.setter();
  v9 = Com_Apple_Siri_Product_Proto_PromptContext.responseOptions.getter();
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v24[2] = a1;
    v27 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = *(unsigned __int8 *)(v2 + 80);
    v24[1] = v9;
    v12 = v9 + ((v11 + 32) & ~v11);
    v25 = *(_QWORD *)(v2 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    v14 = v2;
    do
    {
      v15 = v26;
      v13(v4, v12, v26);
      v16 = Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v15);
      v19 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v19 = v27;
      }
      v21 = *(_QWORD *)(v19 + 16);
      v20 = *(_QWORD *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v19 = v27;
      }
      *(_QWORD *)(v19 + 16) = v21 + 1;
      v22 = v19 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v16;
      *(_QWORD *)(v22 + 40) = v18;
      v12 += v25;
      --v10;
      v2 = v14;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
  }
  return MEMORY[0x1B5E3FC70](v19);
}

void key path setter for ContextUpdater.finalNativeFlowContextCommand : ContextUpdater(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 256);
  *(_QWORD *)(v3 + 256) = v2;
  v5 = v2;

}

uint64_t key path setter for ContextUpdater.finalActiveTasks : ContextUpdater(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 264) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for ContextUpdater.finalExecutedTasks : ContextUpdater(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 272) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for ContextUpdater.userId : ContextUpdater(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 368))(v6);
}

uint64_t ContextUpdater.userId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v3, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  return swift_endAccess();
}

uint64_t (*ContextUpdater.userId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ContextUpdater.domainHints.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v21;

  v21 = swift_allocObject();
  ContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return v21;
}

_QWORD *ContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v13;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v19 = MEMORY[0x1E0DEE9D8];
  v13[30] = MEMORY[0x1E0DEE9D8];
  v13[32] = 0;
  v13[33] = v19;
  v13[35] = 0;
  v13[36] = 0;
  v20 = (char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId;
  v13[34] = v19;
  v21 = type metadata accessor for UserID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_domainHints) = v19;
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)(v13 + 2));
  outlined init with copy of ReferenceResolutionClientProtocol(a2, (uint64_t)(v13 + 7));
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)(v13 + 12));
  v13[17] = a4;
  v13[18] = a5;
  v13[19] = a6;
  v13[20] = a7;
  v13[21] = a8;
  v13[22] = a9;
  v13[23] = a10;
  outlined init with copy of ReferenceResolutionClientProtocol(a11, (uint64_t)(v13 + 24));
  v13[31] = a12;
  type metadata accessor for SessionStateContextKeysManager();
  v22 = (_QWORD *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = 0;
  v22[2] = v23;
  v24 = specialized Dictionary.init(dictionaryLiteral:)(v19);
  v25 = MEMORY[0x1E0DEE9E8];
  v22[3] = v24;
  v22[4] = v25;
  __swift_destroy_boxed_opaque_existential_1(a11);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  v13[29] = v22;
  v26 = (uint64_t)v13 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a13, v26, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_endAccess();
  return v13;
}

_QWORD *SessionStateContextKeysManager.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v0 = (_QWORD *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v0[2] = v1;
  v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v3 = MEMORY[0x1E0DEE9E8];
  v0[3] = v2;
  v0[4] = v3;
  return v0;
}

void closure #1 in ContextUpdater.close()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Synced=%{BOOL}d the context to context collector", v2, 8u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

uint64_t ContextUpdater.applySystemDialogActs(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(uint64_t *, char *);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20[4];

  v3 = type metadata accessor for ConversationSessionKey();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && *(_QWORD *)(a1 + 16))
  {
    v7 = *(_QWORD *)(v1 + 232);
    v20[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_SystemDialogAct]);
    v20[0] = a1;
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D9EDD8], v3);
    v8 = *(void (**)(uint64_t *, char *))(*(_QWORD *)v7 + 152);
    swift_bridgeObjectRetain_n();
    v8(v20, v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v20[0] = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
      v15 = MEMORY[0x1B5E43504](a1, v14);
      v19[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v10, v11, "Applied SDA: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v13, -1, -1);
      MEMORY[0x1B5E44758](v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    v17 = *(_QWORD *)(v1 + 232);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D9EDD8], v3);
    (*(void (**)(char *))(*(_QWORD *)v17 + 160))(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return 0;
}

uint64_t ContextUpdater.applyNewTasks(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD v16[4];

  v2 = v1;
  v4 = type metadata accessor for ConversationSessionKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      swift_beginAccess();
      *(_QWORD *)(v1 + 264) = a1;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v1 + 232);
      v16[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]);
      v16[0] = a1;
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D9EDA0], v4);
      (*(void (**)(_QWORD *, char *))(*(_QWORD *)v8 + 152))(v16, v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1B4BE6000, v10, v11, "Removing activeTasks as instructed by execution", v12, 2u);
        MEMORY[0x1B5E44758](v12, -1, -1);
      }

      v13 = *(_QWORD *)(v2 + 232);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D9EDA0], v4);
      (*(void (**)(char *))(*(_QWORD *)v13 + 168))(v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return 0;
}

uint64_t ContextUpdater.applyCompletedTasks(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD v16[4];

  v2 = v1;
  v4 = type metadata accessor for ConversationSessionKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      swift_beginAccess();
      *(_QWORD *)(v1 + 272) = a1;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v1 + 232);
      v16[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]);
      v16[0] = a1;
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D9EDB0], v4);
      (*(void (**)(_QWORD *, char *))(*(_QWORD *)v8 + 152))(v16, v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1B4BE6000, v10, v11, "Removing executedTasks as instructed by execution", v12, 2u);
        MEMORY[0x1B5E44758](v12, -1, -1);
      }

      v13 = *(_QWORD *)(v2 + 232);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D9EDB0], v4);
      (*(void (**)(char *))(*(_QWORD *)v13 + 168))(v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return 0;
}

uint64_t ContextUpdater.applyRREntities(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80));
      v7 = type metadata accessor for RRFilter();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
      v8 = swift_allocObject();
      swift_weakInit();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = a1;
      swift_retain();
      swift_bridgeObjectRetain();
      dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for RRFilter?);
      return swift_release();
    }
  }
  return result;
}

void closure #1 in ContextUpdater.applyRREntities(_:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, char *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42[10];

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ConversationSessionKey();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v28 = a1;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
    v30 = a1;
    v31 = a1;
    v41 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v42[0] = v34;
      *(_DWORD *)v33 = 136315138;
      swift_getErrorValue();
      v35 = Error.localizedDescription.getter();
      v42[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(a1, 1);
      outlined consume of Result<(), Error>(a1, 1);
      _os_log_impl(&dword_1B4BE6000, v41, v32, "#ContextUpdater: Entity donation to RRaaS was unsuccessful as %s.", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v34, -1, -1);
      MEMORY[0x1B5E44758](v33, -1, -1);

      outlined consume of Result<(), Error>(a1, 1);
    }
    else
    {
      outlined consume of Result<(), Error>(a1, 1);
      outlined consume of Result<(), Error>(a1, 1);

    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "#ContextUpdater: Entity donation to RRaaS was successful", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v19 = Strong;
      swift_beginAccess();
      v20 = swift_weakLoadStrong();
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 232);
        swift_retain();
        swift_release();
        v42[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
        v42[0] = a4;
        (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0D9EDF8], v10);
        v22 = *(void (**)(uint64_t *, char *))(*(_QWORD *)v21 + 152);
        swift_bridgeObjectRetain();
        v22(v42, v13);
        swift_release();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      }
      v23 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v9, 1, 1, v23);
      v24 = one-time initialization token for shared;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v24 != -1)
        swift_once();
      swift_beginAccess();
      v25 = static MessageBusActor.shared;
      v26 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
      v27 = (_QWORD *)swift_allocObject();
      v27[2] = v25;
      v27[3] = v26;
      v27[4] = v19;
      v27[5] = a4;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ContextUpdater.applyRREntities(_:), (uint64_t)v27);
      swift_release();
      swift_release();
    }
    else
    {
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_1B4BE6000, v37, v38, "#ContextUpdater: Entity donation to RRaaS was unsuccessful as self is no more.", v39, 2u);
        MEMORY[0x1B5E44758](v39, -1, -1);
      }

    }
  }
}

uint64_t closure #1 in closure #1 in ContextUpdater.applyRREntities(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ContextUpdater.applyRREntities(_:)()
{
  uint64_t v0;

  ContextUpdater.applyDisplayHints(_:)(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void SessionStateContextKeysManager.updateValue(_:forKey:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, (uint64_t (*)(void))partial apply for closure #1 in SessionStateContextKeysManager.updateValue(_:forKey:));
  os_unfair_lock_unlock(v1);
}

void closure #1 in SessionStateContextKeysManager.updateValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationSessionKey?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ConversationSessionKey();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v23 - v12;
  v24 = v14;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v15((char *)v23 - v12, a2, v8);
  outlined init with copy of Any(a3, (uint64_t)v26);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v26, (uint64_t)v13);
  swift_endAccess();
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a2, (uint64_t)v7);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for ConversationSessionKey?);
  swift_endAccess();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  v15(v11, a2, v8);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v26[0] = v20;
    *(_DWORD *)v19 = 136315138;
    v23[1] = v19 + 4;
    v15(v13, (uint64_t)v11, v8);
    v21 = String.init<A>(describing:)();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v8);
    _os_log_impl(&dword_1B4BE6000, v17, v18, "StateKey: \"%s\" appended for update", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v8);
  }

}

uint64_t closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[5];
  uint64_t v16;

  v4 = type metadata accessor for ConversationSessionKey();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v15 - v9;
  swift_beginAccess();
  v11 = swift_bridgeObjectRetain();
  v12 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
  swift_bridgeObjectRelease();
  v16 = v12;
  swift_beginAccess();
  v15[4] = *(_QWORD *)(a1 + 32);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0D9EDD0], v4);
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v13 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v13, &v16);
  result = swift_bridgeObjectRelease_n();
  *a2 = v16;
  return result;
}

uint64_t closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, _QWORD, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t result;
  _QWORD v17[5];
  uint64_t v18;

  v4 = type metadata accessor for ConversationSessionKey();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v17 - v9;
  swift_beginAccess();
  v11 = swift_bridgeObjectRetain();
  v12 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
  swift_bridgeObjectRelease();
  v18 = v12;
  swift_beginAccess();
  v17[4] = *(_QWORD *)(a1 + 32);
  v13 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v13(v8, *MEMORY[0x1E0D9EDD8], v4);
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  v13(v8, *MEMORY[0x1E0D9EDA0], v4);
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  v14(v10, v4);
  v13(v8, *MEMORY[0x1E0D9EDB0], v4);
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  v14(v10, v4);
  v15 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v15, &v18);
  result = swift_bridgeObjectRelease_n();
  *a2 = v18;
  return result;
}

uint64_t SessionStateContextKeysManager.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

_QWORD *SessionStateContextKeysManager.init()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v0[2] = v1;
  v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v3 = MEMORY[0x1E0DEE9E8];
  v0[3] = v2;
  v0[4] = v3;
  return v0;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = *v21;
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      swift_bridgeObjectRetain();
      return 0;
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3, _QWORD *a4)
{
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v8 = (_QWORD *)*a4;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v16 = (_QWORD *)*a4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_unknownObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*a4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void partial apply for closure #1 in SessionStateContextKeysManager.updateValue(_:forKey:)()
{
  uint64_t *v0;

  closure #1 in SessionStateContextKeysManager.updateValue(_:forKey:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest()(v1, a1);
}

uint64_t partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest()(v1, a1);
}

uint64_t sub_1B4CFE550@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 264))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CFE584@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 288))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CFE5B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 312))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CFE5EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 360))();
}

uint64_t sub_1B4CFE618@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 384))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4CFE648(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 392);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for ContextUpdater()
{
  return type metadata accessor for ContextUpdater();
}

void type metadata completion function for ContextUpdater()
{
  unint64_t v0;

  type metadata accessor for UserID?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ContextUpdater()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ContextUpdater.finalNativeFlowContextCommand.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of ContextUpdater.finalActiveTasks.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of ContextUpdater.finalExecutedTasks.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of ContextUpdater.userId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of ContextUpdater.userId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of ContextUpdater.userId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of ContextUpdater.domainHints.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of ContextUpdater.domainHints.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of ContextUpdater.domainHints.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of ContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 408))();
}

uint64_t dispatch thunk of ContextUpdater.applyContextUpdate(_:metadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of ContextUpdater.applyServerContextUpdateCandidate(_:metadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of ContextUpdater.updateServerContext()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of ContextUpdater.close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of ContextUpdater.applyResponseText(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of ContextUpdater.applyNativeFlowContext(_:emptyServerContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

void type metadata accessor for UserID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UserID?)
  {
    type metadata accessor for UserID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UserID?);
  }
}

uint64_t method lookup function for SessionStateContextKeysManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.updateValue(_:forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.removeKey(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.provideKeysToFlush(metadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t sub_1B4CFE8CC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ContextUpdater.applyRREntities(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in ContextUpdater.applyRREntities(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t specialized ContextUpdater.convertPayloadToUsoEntity(payload:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  uint64_t v11;
  _BYTE v13[48];
  uint64_t v14;

  v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DA03B8];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = 0;
  memset(&v13[16], 0, 32);
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Siri_Nl_Core_Protocol_UsoGraph and conformance Siri_Nl_Core_Protocol_UsoGraph, v6, MEMORY[0x1E0DA03B0]);
  Message.init(serializedData:extensions:partial:options:)();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for USOSerializedGraph);
  v10 = (void *)MEMORY[0x1B5E43864](v9);
  if (USOSerializedGraph.usoSerializedGraphToUsoGraphSiriNl()())
  {
    v11 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();

    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v5);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v5);

    return 0;
  }
  return v11;
}

uint64_t sub_1B4CFEB4C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ContextUpdater.applyRREntities(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in ContextUpdater.applyRREntities(_:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_18Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t ExecutionContextUpdateScope.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6C61626F6C67;
  if (a1 == 1)
    return 0x55746E6572727563;
  return 0x72657355656D6F68;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionContextUpdateScope(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x55746E6572727563;
  v4 = 0xEB00000000726573;
  if (v2 != 1)
  {
    v3 = 0x72657355656D6F68;
    v4 = 0xE900000000000073;
  }
  if (*a1)
    v5 = v3;
  else
    v5 = 0x6C61626F6C67;
  if (v2)
    v6 = v4;
  else
    v6 = 0xE600000000000000;
  v7 = 0x55746E6572727563;
  v8 = 0xEB00000000726573;
  if (*a2 != 1)
  {
    v7 = 0x72657355656D6F68;
    v8 = 0xE900000000000073;
  }
  if (*a2)
    v9 = v7;
  else
    v9 = 0x6C61626F6C67;
  if (*a2)
    v10 = v8;
  else
    v10 = 0xE600000000000000;
  if (v5 == v9 && v6 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionContextUpdateScope()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecutionContextUpdateScope()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionContextUpdateScope()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionContextUpdateScope@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ExecutionContextUpdateScope.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionContextUpdateScope(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xEB00000000726573;
  v5 = 0x55746E6572727563;
  if (v2 != 1)
  {
    v5 = 0x72657355656D6F68;
    v4 = 0xE900000000000073;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6C61626F6C67;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t specialized ExecutionContextUpdateScope.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionContextUpdateScope.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type ExecutionContextUpdateScope and conformance ExecutionContextUpdateScope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExecutionContextUpdateScope and conformance ExecutionContextUpdateScope;
  if (!lazy protocol witness table cache variable for type ExecutionContextUpdateScope and conformance ExecutionContextUpdateScope)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ExecutionContextUpdateScope, &type metadata for ExecutionContextUpdateScope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionContextUpdateScope and conformance ExecutionContextUpdateScope);
  }
  return result;
}

uint64_t dispatch thunk of ContextUpdating.applyContextUpdate(_:metadata:scope:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ContextUpdating.applyServerContextUpdateCandidate(_:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ContextUpdating.updateServerContext()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ContextUpdating.applyResponseText(_:scope:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ContextUpdating.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t storeEnumTagSinglePayload for ExecutionContextUpdateScope(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4CFF120 + 4 * byte_1B4EE65C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4CFF154 + 4 * byte_1B4EE65C0[v4]))();
}

uint64_t sub_1B4CFF154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CFF15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4CFF164);
  return result;
}

uint64_t sub_1B4CFF170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4CFF178);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4CFF17C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4CFF184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExecutionContextUpdateScope()
{
  return &type metadata for ExecutionContextUpdateScope;
}

uint64_t Conversation.taskObserver.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  return MEMORY[0x1B5E44848](v1);
}

uint64_t Conversation.taskObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*Conversation.taskObserver.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1B5E44848](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return Conversation.taskObserver.modify;
}

void Conversation.taskObserver.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t Conversation.rootEnvironment.getter()
{
  return swift_retain();
}

uint64_t key path setter for Conversation.rcId : Conversation(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t Conversation.rcId.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Conversation.rcId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Conversation.rcId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for Conversation.hypothesisId : Conversation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v7 = *a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v6, v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

uint64_t Conversation.hypothesisId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t Conversation.hypothesisId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

uint64_t (*Conversation.hypothesisId.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t Conversation.isPaused.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
  swift_beginAccess();
  return *v1;
}

uint64_t Conversation.isPaused.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*Conversation.isPaused.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t Conversation.correctionsFlow.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow);
  }
  else
  {
    v2 = closure #1 in Conversation.correctionsFlow.getter(v0);
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t closure #1 in Conversation.correctionsFlow.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14[2];
  __int128 v15;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId + 8);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v4 = ResponseFactory.init()();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  outlined init with copy of ReferenceResolutionClientProtocol(a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine, (uint64_t)v14);
  static SiriKitEventSender.current.getter();
  type metadata accessor for SiriCorrectionsFlow();
  v5 = (_QWORD *)swift_allocObject();
  v6 = (char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  v7 = type metadata accessor for PluginAction();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput;
  v9 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state;
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_QWORD *)v10 + 4) = 0;
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v4;
  outlined init with take of ReferenceResolutionClientProtocol(&v15, (uint64_t)(v5 + 5));
  outlined init with take of ReferenceResolutionClientProtocol(v14, (uint64_t)(v5 + 10));
  outlined init with take of ReferenceResolutionClientProtocol(&v13, (uint64_t)v5 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  *(_QWORD *)&v15 = v5;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (uint64_t (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow, (uint64_t)&protocol conformance descriptor for SiriCorrectionsFlow);
  v11 = Flow.eraseToAnyFlow()();
  swift_release();
  return v11;
}

uint64_t Conversation.correctionsFlow.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = a1;
  return swift_release();
}

uint64_t (*Conversation.correctionsFlow.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = Conversation.correctionsFlow.getter();
  return Conversation.correctionsFlow.modify;
}

uint64_t Conversation.correctionsFlow.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = *a1;
  return swift_release();
}

uint64_t Conversation.__allocating_init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a6;
  v26 = a7;
  v24 = a4;
  v15 = *(_QWORD *)(a9 + 24);
  v16 = *(_QWORD *)(a9 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a9, v15);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = specialized Conversation.__allocating_init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(a1, a2, a3, v24, a5, v25, v26, a8, (uint64_t)v19, v9, v15, v16);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a9);
  return v21;
}

uint64_t Conversation.__allocating_init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = *(_QWORD *)(a5 + 24);
  v17 = *(_QWORD *)(a5 + 32);
  v18 = __swift_mutable_project_boxed_opaque_existential_1(a5, v16);
  v19 = specialized Conversation.__allocating_init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(a1, a2, a3, a4, v18, a6, a7, a8, a9, a10, v10, v16, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v19;
}

uint64_t Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a4;
  v25 = a7;
  v26 = a8;
  v15 = *(_QWORD *)(a5 + 24);
  v16 = *(_QWORD *)(a5 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a5, v15);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(a1, a2, a3, v24, (uint64_t)v19, a6, v25, v26, a9, a10, v23, v15, v16);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v21;
}

uint64_t Conversation.cancel()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v0 + 40) + 112) + 192))();
  if (v1)
  {
    v2 = v1;
    *(_QWORD *)(v0 + 48) = v1;
    *(_QWORD *)(v0 + 56) = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v2 + 16);
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    swift_beginAccess();
    Conversation.State.cancel()();
    swift_endAccess();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  FlowAgent.cancel()();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 48) = v2;
    *(_QWORD *)(v0 + 56) = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v2 + 16);
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    swift_beginAccess();
    Conversation.State.cancel()();
    swift_endAccess();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

Swift::Void __swiftcall Conversation.State.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1E0C80A78](v1);
  outlined init with take of StringKeyedValue(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_1B4CFFEE0 + 4 * byte_1B4EE66B0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B4CFFEE0()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
  swift_release();
  outlined destroy of CamOutput(v0, type metadata accessor for SiriRequest);
  return swift_storeEnumTagMultiPayload();
}

BOOL Conversation.isCancelled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v10;

  v1 = type metadata accessor for Conversation.State(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v10 - v5;
  v7 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v7, (uint64_t)v6, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput((uint64_t)v6, (uint64_t)v4, type metadata accessor for Conversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5)
    outlined destroy of CamOutput((uint64_t)v4, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput((uint64_t)v6, type metadata accessor for Conversation.State);
  return EnumCaseMultiPayload == 5;
}

BOOL Conversation.State.isCancelled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v7;

  v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5)
    outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for Conversation.State);
  return EnumCaseMultiPayload == 5;
}

uint64_t Conversation.ensureReady(timeout:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[12] = a1;
  v2[13] = v1;
  v3 = type metadata accessor for TimeoutError();
  v2[14] = v3;
  v2[15] = *(_QWORD *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = type metadata accessor for ConversationCommitResult();
  v2[18] = swift_task_alloc();
  v2[19] = type metadata accessor for Conversation.State(0);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

void Conversation.ensureReady(timeout:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for Conversation.State);
  v3 = (char *)sub_1B4D00498 + 4 * word_1B4EE66B6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B4D00498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;
  unint64_t v26;

  v2 = *(_QWORD *)(v1 + 168);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
  swift_release();
  outlined destroy of CamOutput(v2, type metadata accessor for SiriRequest);
  if (one-time initialization token for executor != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 160);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v25 = v8;
    *(_DWORD *)v7 = 136315138;
    outlined init with copy of ConversationHelperInput(v0, v6, type metadata accessor for Conversation.State);
    Conversation.State.description.getter();
    v10 = v9;
    v12 = v11;
    outlined destroy of CamOutput(v6, type metadata accessor for Conversation.State);
    *(_QWORD *)(v1 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[Conversation] ensureReady can only be called for commited conversation, not state %s.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v13 = *(_QWORD *)(v1 + 160);
  v25 = 0;
  v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v14._object = (void *)0x80000001B4EF8260;
  v14._countAndFlagsBits = 0xD000000000000044;
  String.append(_:)(v14);
  outlined init with copy of ConversationHelperInput(v0, v13, type metadata accessor for Conversation.State);
  Conversation.State.description.getter();
  v16 = v15;
  v18 = v17;
  outlined destroy of CamOutput(v13, type metadata accessor for Conversation.State);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v22 = v25;
  v21 = v26;
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  swift_allocError();
  *v23 = v22;
  v23[1] = v21;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t Conversation.ensureReady(timeout:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of CamOutput(*(_QWORD *)(v2 + 144), (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  swift_release();
  *(_BYTE *)(*(_QWORD *)(v0 + 104) + *(_QWORD *)(v0 + 184)) = 0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Conversation ensured Ready.", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  _QWORD *v8;
  uint64_t (*v9)(void);
  void **p_cache;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void *v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;

  v1 = (void *)v0[25];
  swift_release();
  v0[8] = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
    if (one-time initialization token for executor != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "[Conversation] Failed to ensure conversation is ready to handle next request within a time limit.\nMostly due to long running execution or flow forgets to call completion.", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }
    v7 = (void *)v0[25];

    lazy protocol witness table accessor for type TimedOutError and conformance TimedOutError();
    swift_allocError();
    *v8 = 0xD00000000000009BLL;
    v8[1] = 0x80000001B4EF81C0;
    swift_willThrow();
    swift_release_n();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v9 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    p_cache = &OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper.cache;
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = (void *)v0[25];
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = v11;
    v14 = v11;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = (void *)v0[25];
    if (v17)
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v29 = v20;
      *(_DWORD *)v19 = 136315138;
      v0[9] = v18;
      v21 = v18;
      v22 = String.init<A>(describing:)();
      v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v15, v16, "[Conversation] error in running speculation/commit task while ensuring the runtime is ready (will ignore): %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v20, -1, -1);
      v24 = v19;
      p_cache = (void **)(&OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper + 16);
      MEMORY[0x1B5E44758](v24, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();

    }
    *(_BYTE *)(v0[13] + v0[23]) = 0;
    if (p_cache[49] != (void *)-1)
      swift_once();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v25, v26, "Conversation ensured Ready.", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();

    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v9 = (uint64_t (*)(void))v0[1];
  }
  return v9();
}

void Conversation.State.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1E0C80A78](v1);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_1B4D0112C + 4 * byte_1B4EE66C2[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B4D0112C()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
  swift_release();
  outlined destroy of CamOutput(v0, type metadata accessor for SiriRequest);
  return 0x6465747065636361;
}

uint64_t closure #1 in Conversation.ensureReady(timeout:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ConversationCommitResult();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return Task.value.getter();
}

uint64_t Conversation.accept(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = type metadata accessor for Conversation.State(0);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v4 = type metadata accessor for OSSignpostID();
  v3[23] = v4;
  v3[24] = *(_QWORD *)(v4 - 8);
  v3[25] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v3[26] = v5;
  v3[27] = *(_QWORD *)(v5 - 8);
  v3[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Conversation.accept(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);

  static os_signpost_type_t.event.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 192);
  v24 = *(_QWORD *)(v0 + 184);
  v25 = *(_QWORD *)(v0 + 128);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B4EE3F50;
  *(_DWORD *)(v0 + 328) = *(_DWORD *)(type metadata accessor for SiriRequest(0) + 20);
  Input.identifier.getter();
  v7 = UUID.uuidString.getter();
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v9;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v4, v24);
  v10 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  *(_QWORD *)(v0 + 232) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  v11 = v25 + v10;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v11, v5, type metadata accessor for Conversation.State);
  Conversation.State.assertReady(function:)((uint64_t)"accept(request:)", 16, 2);
  v12 = *(_QWORD *)(v0 + 216);
  v26 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(uint64_t **)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 128);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 176), type metadata accessor for Conversation.State);
  v17 = *v15;
  v18 = v15[1];
  v19 = (_QWORD *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  *v19 = v17;
  v19[1] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Input.identifier.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v26);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v14, v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v20 = v16 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v13, v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  *(_QWORD *)(v0 + 240) = SiriEnvironment.callState.getter();
  v27 = (uint64_t (*)(void))((int)*MEMORY[0x1E0D9C3A8] + MEMORY[0x1E0D9C3A8]);
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v21;
  *v21 = v0;
  v21[1] = Conversation.accept(request:);
  return v27();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 112);
  *(_QWORD *)(v0 + 256) = v1;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v1 + 184))() & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1B4BE6000, v3, v4, "Checking if corrections flow accepts input", v5, 2u);
      MEMORY[0x1B5E44758](v5, -1, -1);
    }

    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v6;
    *v6 = v0;
    v6[1] = Conversation.accept(request:);
    v7 = *(_QWORD *)(v0 + 128);
    v6[2] = *(_QWORD *)(v0 + 120);
    v6[3] = v7;
    return swift_task_switch();
  }
  else
  {
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))();
    if (v9)
    {
      v10 = v9;
      *(_QWORD *)(v0 + 280) = v9;
      *(_QWORD *)(v0 + 288) = swift_weakLoadStrong();
      v11 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v0 + 296) = v11;
      swift_retain();
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 304) = v12;
      *v12 = v0;
      v12[1] = Conversation.accept(request:);
      return Conversation.updateFlowEnvironment(flowAgent:request:)(v11, *(_QWORD *)(v0 + 120));
    }
    else
    {
      **(_BYTE **)(v0 + 112) = 0;
      type metadata accessor for UserInputResult();
      swift_storeEnumTagMultiPayload();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (*(_QWORD *)(v0 + 272))
  {
    v1 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 272);
    v2 = (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)v1 + 208))(&v9, 0);
    swift_release();
    v4 = *(_QWORD *)(v0 + 160);
    v3 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128) + *(_QWORD *)(v0 + 232);
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>))
                + 48);
    outlined init with copy of ConversationHelperInput(v5, v3, type metadata accessor for SiriRequest);
    *(_QWORD *)(v3 + v7) = v2;
    swift_storeEnumTagMultiPayload();
    outlined init with take of StringKeyedValue(v3, v4, type metadata accessor for Conversation.State);
    swift_beginAccess();
    outlined assign with take of Conversation.State(v4, v6);
    swift_endAccess();
    type metadata accessor for UserInputResult();
  }
  else
  {
    **(_BYTE **)(v0 + 112) = 0;
    type metadata accessor for UserInputResult();
  }
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(int *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 312) = *(_QWORD *)(*(_QWORD *)(v0 + 280) + 16);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 320) = v3;
  *v3 = v0;
  v3[1] = Conversation.accept(request:);
  return FlowAgent.on(input:)(v2 + v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (*(_BYTE *)(v0 + 332) == 1)
  {
    swift_release();
    v1 = *(_QWORD *)(v0 + 280);
    v3 = *(_QWORD *)(v0 + 160);
    v2 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 128) + *(_QWORD *)(v0 + 232);
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>))
                + 48);
    outlined init with copy of ConversationHelperInput(v4, v2, type metadata accessor for SiriRequest);
    *(_QWORD *)(v2 + v6) = v1;
    swift_storeEnumTagMultiPayload();
    outlined init with take of StringKeyedValue(v2, v3, type metadata accessor for Conversation.State);
    swift_beginAccess();
    outlined assign with take of Conversation.State(v3, v5);
    swift_endAccess();
    type metadata accessor for UserInputResult();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 288);
    swift_release();
    if (v7)
    {
      v8 = *(_QWORD *)(v0 + 288);
      *(_QWORD *)(v0 + 280) = v8;
      *(_QWORD *)(v0 + 288) = swift_weakLoadStrong();
      v9 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v0 + 296) = v9;
      swift_retain();
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 304) = v10;
      *v10 = v0;
      v10[1] = Conversation.accept(request:);
      return Conversation.updateFlowEnvironment(flowAgent:request:)(v9, *(_QWORD *)(v0 + 120));
    }
    **(_BYTE **)(v0 + 112) = 0;
    type metadata accessor for UserInputResult();
  }
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Conversation.accept(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t Conversation.accept(request:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 332) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t Conversation.State.assertReady(function:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int EnumCaseMultiPayload;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  _QWORD *v20;
  _QWORD v21[2];
  int v22;

  v22 = a3;
  v4 = type metadata accessor for Conversation.State(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v21 - v8;
  outlined init with copy of ConversationHelperInput(v3, (uint64_t)v21 - v8, type metadata accessor for Conversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of CamOutput((uint64_t)v9, type metadata accessor for Conversation.State);
  if (EnumCaseMultiPayload == 5)
  {
    v21[0] = 0;
    v21[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    strcpy((char *)v21, "Cannot call ");
    BYTE5(v21[1]) = 0;
    HIWORD(v21[1]) = -5120;
    v11._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x80000001B4EF8330;
    v12._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v12);
    v14 = v21[0];
    v13 = v21[1];
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
  }
  else
  {
    outlined init with copy of ConversationHelperInput(v3, (uint64_t)v7, type metadata accessor for Conversation.State);
    v15 = swift_getEnumCaseMultiPayload();
    result = outlined destroy of CamOutput((uint64_t)v7, type metadata accessor for Conversation.State);
    if (v15 == 4)
      return result;
    v21[0] = 0;
    v21[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v17._countAndFlagsBits = 0x6320746F6E6E6143;
    v17._object = (void *)0xEC000000206C6C61;
    String.append(_:)(v17);
    v18._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0xD00000000000002BLL;
    v19._object = (void *)0x80000001B4EF8300;
    String.append(_:)(v19);
    v14 = v21[0];
    v13 = v21[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  }
  swift_allocError();
  *v20 = v14;
  v20[1] = v13;
  return swift_willThrow();
}

uint64_t Conversation.paraphrase()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for OSSignpostID();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v4 = type metadata accessor for OSSignposter();
  v2[10] = v4;
  v2[11] = *(_QWORD *)(v4 - 8);
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[13] = swift_task_alloc();
  type metadata accessor for Conversation.State(0);
  v2[14] = swift_task_alloc();
  type metadata accessor for SiriRequest(0);
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Conversation.paraphrase()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[14];
  v2 = v0[15];
  v3 = v0[6] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v3, v1, type metadata accessor for Conversation.State);
  v4 = Conversation.State.assertAcceptedInput(function:)(v2, (uint64_t)"paraphrase()", 12, 2);
  v0[16] = v4;
  v5 = v4;
  v6 = v0[15];
  v7 = v0[13];
  outlined destroy of CamOutput(v0[14], type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v6, type metadata accessor for SiriRequest);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v5;
  swift_retain();
  v0[17] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5(v7, (uint64_t)&async function pointer to partial apply for closure #1 in Conversation.paraphrase(), (uint64_t)v9);
  if (one-time initialization token for executor != -1)
    swift_once();
  v11 = v0[11];
  v10 = v0[12];
  v12 = v0[10];
  v13 = __swift_project_value_buffer(v12, (uint64_t)static Signposter.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  static OSSignpostID.exclusive.getter();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  v0[18] = OSSignposter.beginIntervalTelemetryEnabled(_:id:)("ParaphraseTime", 14, 2, v0[9]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[19] = (uint64_t)v1;
  type metadata accessor for ConversationParaphraseResult(0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v1 = v0;
  v1[1] = Conversation.paraphrase();
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[11];
  v1 = v0[12];
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  $defer #1 <A>() in OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(v1, "ParaphraseTime", 14, 2, v0[18]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[11];
  v1 = v0[12];
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  $defer #1 <A>() in OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(v1, "ParaphraseTime", 14, 2, v0[18]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Conversation.State.assertAcceptedInput(function:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int EnumCaseMultiPayload;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  _QWORD *v21;
  _QWORD v23[2];
  _QWORD v24[2];
  int v25;

  v5 = v4;
  v25 = a4;
  v23[1] = a3;
  v7 = type metadata accessor for Conversation.State(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v23 - v11;
  outlined init with copy of ConversationHelperInput(v5, (uint64_t)v23 - v11, type metadata accessor for Conversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of CamOutput((uint64_t)v12, type metadata accessor for Conversation.State);
  if (EnumCaseMultiPayload == 5)
  {
    v24[0] = 0;
    v24[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    strcpy((char *)v24, "Cannot call ");
    BYTE5(v24[1]) = 0;
    HIWORD(v24[1]) = -5120;
    v14._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x80000001B4EF8330;
    v15._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v15);
    v17 = v24[0];
    v16 = v24[1];
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
  }
  else
  {
    outlined init with copy of ConversationHelperInput(v5, (uint64_t)v10, type metadata accessor for Conversation.State);
    if (!swift_getEnumCaseMultiPayload())
    {
      v17 = *(_QWORD *)&v10[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>))
                                   + 48)];
      outlined init with take of StringKeyedValue((uint64_t)v10, a1, type metadata accessor for SiriRequest);
      return v17;
    }
    outlined destroy of CamOutput((uint64_t)v10, type metadata accessor for Conversation.State);
    v24[0] = 0;
    v24[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v18._countAndFlagsBits = 0x6320746F6E6E6143;
    v18._object = (void *)0xEC000000206C6C61;
    String.append(_:)(v18);
    v19._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD000000000000026;
    v20._object = (void *)0x80000001B4EF8390;
    String.append(_:)(v20);
    v17 = v24[0];
    v16 = v24[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  }
  swift_allocError();
  *v21 = v17;
  v21[1] = v16;
  swift_willThrow();
  return v17;
}

uint64_t closure #1 in Conversation.paraphrase()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a4;
  v5 = type metadata accessor for ActionParaphrase();
  v4[4] = v5;
  v4[5] = *(_QWORD *)(v5 - 8);
  v4[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in Conversation.paraphrase()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = closure #1 in Conversation.paraphrase();
  return FlowAgent.paraphrase()(*(_QWORD *)(v0 + 48));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 32))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  type metadata accessor for ConversationParaphraseResult(0);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Conversation.prepare()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[10] = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v1[11] = swift_task_alloc();
  v2 = type metadata accessor for UUID();
  v1[12] = v2;
  v1[13] = *(_QWORD *)(v2 - 8);
  v1[14] = swift_task_alloc();
  v1[15] = type metadata accessor for Conversation.State(0);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v3 = type metadata accessor for SiriRequest(0);
  v1[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[20] = v4;
  v1[21] = *(_QWORD *)(v4 + 64);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t type;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for Conversation.State);
  v38 = Conversation.State.assertAcceptedInput(function:)(v1, (uint64_t)"prepare()", 9, 2);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 144), type metadata accessor for Conversation.State);
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  outlined init with copy of ConversationHelperInput(v4, v5, type metadata accessor for SiriRequest);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 184);
  v39 = v3;
  if (v9)
  {
    type = v8;
    v11 = *(_QWORD *)(v0 + 112);
    v35 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 96);
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v40[0] = v14;
    *(_DWORD *)v13 = 136315394;
    Input.identifier.getter();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v11, v12);
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v10, type metadata accessor for SiriRequest);
    *(_WORD *)(v13 + 12) = 2080;
    v18 = ObjectIdentifier.debugDescription.getter();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v7, type, "[Conversation] Submits speculation task %s. %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v14, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

  }
  else
  {
    outlined destroy of CamOutput(v10, type metadata accessor for SiriRequest);

    swift_release_n();
  }
  v20 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 160);
  v24 = *(uint64_t **)(v0 + 136);
  v36 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 88);
  v34 = v25;
  v27 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v25, 1, 1, v27);
  outlined init with copy of ConversationHelperInput(v20, v21, type metadata accessor for SiriRequest);
  v28 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Conversation and conformance Conversation, type metadata accessor for Conversation, (uint64_t)&protocol conformance descriptor for Conversation);
  v29 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v30 = (v22 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v26;
  *(_QWORD *)(v31 + 24) = v28;
  outlined init with take of StringKeyedValue(v21, v31 + v29, type metadata accessor for SiriRequest);
  *(_QWORD *)(v31 + v30) = v26;
  *(_QWORD *)(v31 + ((v30 + 15) & 0xFFFFFFFFFFFFFFF8)) = v38;
  swift_retain_n();
  swift_retain();
  v32 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime4NodeCyAF9FlowAgentCGSg_Tgm5(v34, (uint64_t)&async function pointer to partial apply for closure #1 in Conversation.prepare(), v31);
  outlined destroy of CamOutput(v20, type metadata accessor for SiriRequest);
  *v24 = v32;
  v24[1] = v38;
  swift_storeEnumTagMultiPayload();
  outlined init with take of StringKeyedValue((uint64_t)v24, v36, type metadata accessor for Conversation.State);
  swift_beginAccess();
  outlined assign with take of Conversation.State(v36, v39);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Conversation.prepare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a1;
  v6[10] = a4;
  v7 = type metadata accessor for UUID();
  v6[13] = v7;
  v6[14] = *(_QWORD *)(v7 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = type metadata accessor for SiriRequest(0);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in Conversation.prepare()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[18];
  v2 = v0[10];
  v3 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for SiriRequest);
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[18];
  if (v6)
  {
    v8 = v0[15];
    v9 = v0[13];
    v18 = v0[14];
    v10 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v10 = 136315394;
    Input.identifier.getter();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v8, v9);
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v7, type metadata accessor for SiriRequest);
    *(_WORD *)(v10 + 12) = 2080;
    v14 = ObjectIdentifier.debugDescription.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[Conversation] Running queued speculation task %s. %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

  }
  else
  {
    outlined destroy of CamOutput(v0[18], type metadata accessor for SiriRequest);

    swift_release_n();
  }
  v16 = (_QWORD *)swift_task_alloc();
  v0[20] = v16;
  *v16 = v0;
  v16[1] = closure #1 in Conversation.prepare();
  return Conversation.speculativelyExecute(from:)(v0[12]);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 136), type metadata accessor for SiriRequest);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 112);
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v15 = v7;
    *(_DWORD *)v6 = 136315394;
    Input.identifier.getter();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, v5);
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v3, type metadata accessor for SiriRequest);
    *(_WORD *)(v6 + 12) = 2080;
    v11 = ObjectIdentifier.debugDescription.getter();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v1, v2, "[Conversation] Done running queued speculation task %s. %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 136), type metadata accessor for SiriRequest);
    swift_release_n();
  }

  **(_QWORD **)(v0 + 72) = *(_QWORD *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Conversation.prepare()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v4 = (_QWORD *)*v2;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v4[1])();
}

uint64_t Conversation.flexibleExecutionSupport()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for FlexibleExecutionSupportOptions();
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(_QWORD *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v2[8] = v5;
  v2[9] = *(_QWORD *)(v5 - 8);
  v2[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  v2[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Conversation.flexibleExecutionSupport()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = __swift_project_value_buffer(*(_QWORD *)(v0 + 64), (uint64_t)static Logger.executor);
  *(_QWORD *)(v0 + 96) = v2;
  Logger.debugF(file:function:)();
  v3 = (*(uint64_t (**)(void))(**(_QWORD **)(v1 + 112) + 216))();
  if (v3)
  {
    *(_QWORD *)(v0 + 104) = *(_QWORD *)(v3 + 16);
    swift_retain();
    swift_release();
    return swift_task_switch();
  }
  else
  {
    specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/Conversation.swift", 33, 2, (uint64_t)"flexibleExecutionSupport()", 26, 2, v2);
    if (one-time initialization token for none != -1)
      swift_once();
    v5 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = __swift_project_value_buffer(v5, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v8, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 112);
  swift_retain();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(unint64_t, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  dispatch thunk of AnyFlow.flexibleExecutionSupport.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 96);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/Conversation.swift", 33, 2, (uint64_t)"flexibleExecutionSupport()", 26, 2, v4);
    if (one-time initialization token for none != -1)
      swift_once();
    v5 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = __swift_project_value_buffer(v5, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v8, v5);
    swift_release();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 32);
    v16 = *(_QWORD *)(v0 + 16);
    v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32);
    v17(v16, *(_QWORD *)(v0 + 88), v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v13);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16))(v12, v16, v15);
    v18 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v19 = swift_allocObject();
    v17(v19 + v18, v12, v15);
    specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #3 in Conversation.flexibleExecutionSupport());
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #3 in Conversation.flexibleExecutionSupport()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD v10[2];

  v2 = type metadata accessor for FlexibleExecutionSupportOptions();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(70);
  v6._object = (void *)0x80000001B4EF8740;
  v6._countAndFlagsBits = 0xD000000000000044;
  String.append(_:)(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return v10[0];
}

uint64_t Conversation.commit()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for OSSignpostID();
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v4 = type metadata accessor for OSSignposter();
  v2[14] = v4;
  v2[15] = *(_QWORD *)(v4 - 8);
  v2[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for Conversation.State(0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Conversation.commit()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.ensureJetsamTransaction()(v1);
  OS_dispatch_semaphore.signal()();
  v2 = (void *)SiriEnvironment.currentProcess.getter();
  v3 = (void *)dispatch thunk of CurrentProcess.idleTracker.getter();

  if (v3)
  {
    v4 = dispatch thunk of IdleTracker.track(name:)();

  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = v4;
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v39 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = ObjectIdentifier.debugDescription.getter();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "[Conversation] Submits commit task. %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v13, v12, type metadata accessor for Conversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v39 = 0;
    v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
    swift_allocError();
    *v18 = 0xD00000000000002FLL;
    v18[1] = 0x80000001B4EF8470;
    swift_willThrow();
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (EnumCaseMultiPayload == 2)
  {
    v16 = 0;
    v17 = **(_QWORD **)(v0 + 168);
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v32 = *(_QWORD *)(v0 + 168);
    v39 = 0;
    v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v33._countAndFlagsBits = 0x6320746F6E6E6143;
    v33._object = (void *)0xEC000000206C6C61;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 0x292874696D6D6F63;
    v34._object = (void *)0xE800000000000000;
    String.append(_:)(v34);
    v35._countAndFlagsBits = 0xD00000000000002DLL;
    v35._object = (void *)0x80000001B4EF8440;
    String.append(_:)(v35);
    v36 = v39;
    v37 = v40;
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *v38 = v36;
    v38[1] = v37;
    swift_willThrow();
    outlined destroy of CamOutput(v32, type metadata accessor for Conversation.State);
    goto LABEL_19;
  }
  v15 = *(uint64_t **)(v0 + 168);
  v16 = *v15;
  v17 = v15[1];
LABEL_15:
  *(_QWORD *)(v0 + 176) = v17;
  *(_QWORD *)(v0 + 184) = v16;
  v19 = *(_QWORD *)(v0 + 152);
  v20 = *(uint64_t **)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 80);
  v23 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 1, 1, v23);
  v24 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Conversation and conformance Conversation, type metadata accessor for Conversation, (uint64_t)&protocol conformance descriptor for Conversation);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v22;
  v25[3] = v24;
  v25[4] = v22;
  v25[5] = v16;
  v25[6] = v17;
  swift_retain();
  swift_retain_n();
  swift_retain();
  v26 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24ConversationCommitResultO_Tgm5(v21, (uint64_t)&async function pointer to partial apply for closure #1 in Conversation.commit(), (uint64_t)v25);
  *(_QWORD *)(v0 + 192) = v26;
  *v20 = v26;
  swift_storeEnumTagMultiPayload();
  outlined init with take of StringKeyedValue((uint64_t)v20, v19, type metadata accessor for Conversation.State);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Conversation.State(v19, v13);
  swift_endAccess();
  if (one-time initialization token for executor != -1)
    swift_once();
  v28 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 112);
  v30 = __swift_project_value_buffer(v29, (uint64_t)static Signposter.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v30, v29);
  static OSSignpostID.exclusive.getter();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  v0[25] = OSSignposter.beginIntervalTelemetryEnabled(_:id:)("execution_time", 14, 2, v0[13]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[26] = (uint64_t)v1;
  type metadata accessor for ConversationCommitResult();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v1 = v0;
  v1[1] = Conversation.commit();
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[15];
  v1 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  v5 = v0[11];
  v6 = v0[12];
  $defer #1 <A>() in OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(v1, "execution_time", 14, 2, v0[25]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[15];
  v1 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  v5 = v0[11];
  v6 = v0[12];
  $defer #1 <A>() in OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(v1, "execution_time", 14, 2, v0[25]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Conversation.commit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[16] = a5;
  v6[17] = a6;
  v6[14] = a1;
  v6[15] = a4;
  v6[18] = type metadata accessor for Conversation.State(0);
  v6[19] = swift_task_alloc();
  v6[20] = type metadata accessor for ConversationCommitResult();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in Conversation.commit()()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v2, v3))
  {

    swift_release_n();
    if (v0[16])
      goto LABEL_5;
LABEL_9:
    v13 = v0[17];
    v0[26] = v13;
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc();
    v0[27] = v14;
    *v14 = v0;
    v14[1] = closure #1 in Conversation.commit();
    return Conversation.execute(from:)(v0[14], v13);
  }
  v4 = (uint8_t *)swift_slowAlloc();
  v5 = swift_slowAlloc();
  v15 = v5;
  *(_DWORD *)v4 = 136315138;
  v6 = ObjectIdentifier.debugDescription.getter();
  v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B4BE6000, v2, v3, "[Conversation] Running queued commit task. %s", v4, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v5, -1, -1);
  MEMORY[0x1B5E44758](v4, -1, -1);

  if (!v0[16])
    goto LABEL_9;
LABEL_5:
  swift_retain();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1B4BE6000, v8, v9, "[Conversation] Speculation task is still running, will wait for it to complete.", v10, 2u);
    MEMORY[0x1B5E44758](v10, -1, -1);
  }

  v11 = (_QWORD *)swift_task_alloc();
  v0[24] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Node<FlowAgent>?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v11 = v0;
  v11[1] = closure #1 in Conversation.commit();
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  swift_release();
  v1 = v0[12];
  v0[26] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[27] = v2;
  *v2 = v0;
  v2[1] = closure #1 in Conversation.commit();
  return Conversation.execute(from:)(v0[14], v1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _BYTE *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = v0[28];
  static Task<>.checkCancellation()();
  if (v1)
  {
    v2 = v0[19];
    v3 = v0[14];
    v4 = v0[15];
    swift_storeEnumTagMultiPayload();
    v5 = v4 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
    swift_beginAccess();
    outlined assign with take of Conversation.State(v2, v5);
    swift_endAccess();
    swift_willThrow();
    swift_release();
    outlined destroy of CamOutput(v3, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v6 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v7 = (_BYTE *)(v0[15] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
    swift_beginAccess();
    if (*v7 == 1)
    {
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1B4BE6000, v8, v9, "[Conversation] commit paused.", v10, 2u);
        MEMORY[0x1B5E44758](v10, -1, -1);
      }

      swift_release();
    }
    else
    {
      outlined init with copy of ConversationHelperInput(v0[14], v0[22], (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.debug.getter();
      v13 = os_log_type_enabled(v11, v12);
      v14 = v0[22];
      if (v13)
      {
        v15 = v0[21];
        v16 = (uint8_t *)swift_slowAlloc();
        v17 = swift_slowAlloc();
        v24 = v17;
        *(_DWORD *)v16 = 136315138;
        outlined init with copy of ConversationHelperInput(v14, v15, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
        v18 = String.init<A>(describing:)();
        v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of CamOutput(v14, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
        _os_log_impl(&dword_1B4BE6000, v11, v12, "[Conversation] commit done, result: %s.", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v17, -1, -1);
        MEMORY[0x1B5E44758](v16, -1, -1);

        swift_release();
      }
      else
      {
        swift_release();
        outlined destroy of CamOutput(v14, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);

      }
    }
    v20 = v0[19];
    v21 = v0[15];
    swift_storeEnumTagMultiPayload();
    v22 = v21 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
    swift_beginAccess();
    outlined assign with take of Conversation.State(v20, v22);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v6 = (uint64_t (*)(void))v0[1];
  }
  return v6();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Bool __swiftcall Conversation.isEmpty()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 112) + 184))() & 1;
}

Swift::Bool __swiftcall Conversation.isCorrectable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2) & 1;
}

uint64_t Conversation.stackCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 112) + 160))();
}

uint64_t Conversation.topFlowAgent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 112) + 216))();
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  swift_release();
  return v2;
}

BOOL Conversation.isReady.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v10;

  v1 = type metadata accessor for Conversation.State(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v10 - v5;
  v7 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v7, (uint64_t)v6, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput((uint64_t)v6, (uint64_t)v4, type metadata accessor for Conversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 4)
    outlined destroy of CamOutput((uint64_t)v4, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput((uint64_t)v6, type metadata accessor for Conversation.State);
  return EnumCaseMultiPayload == 4;
}

BOOL Conversation.State.isReady.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v7;

  v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 4)
    outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for Conversation.State);
  return EnumCaseMultiPayload == 4;
}

uint64_t Conversation.speculativelyExecute(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[27] = a1;
  v2[28] = v1;
  v3 = type metadata accessor for PrepareResponseType();
  v2[29] = v3;
  v2[30] = *(_QWORD *)(v3 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v4 = type metadata accessor for PrepareResponse();
  v2[33] = v4;
  v2[34] = *(_QWORD *)(v4 - 8);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = type metadata accessor for Conversation.State(0);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Conversation.speculativelyExecute(from:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34[2];

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = &unk_1ED515000;
  if (v4)
  {
    v7 = swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    v8 = v34[0];
    *(_DWORD *)v7 = 136315394;
    v9 = (uint64_t *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
    swift_beginAccess();
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v12 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
    v13 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v34);
    v6 = (_QWORD *)&unk_1ED515000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[Conversation] Speculatively executing rcId: %s, plugin: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  v14 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 368) = type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  *(_QWORD *)(v0 + 376) = v6[100];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextStarted(rcId:fromPlugin:)();
  swift_release();
  swift_bridgeObjectRelease();
  v15 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused;
  *(_QWORD *)(v0 + 384) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  *(_QWORD *)(v0 + 392) = v15;
  swift_retain();
  swift_beginAccess();
  swift_beginAccess();
  *(_DWORD *)(v0 + 520) = *MEMORY[0x1E0D9BF70];
  *(_DWORD *)(v0 + 524) = *MEMORY[0x1E0D9BF78];
  v17 = *(_QWORD *)(v0 + 352);
  v16 = *(_QWORD *)(v0 + 360);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384), v16, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v16, v17, type metadata accessor for Conversation.State);
  v18 = (swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD;
  outlined destroy of CamOutput(v17, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v16, type metadata accessor for Conversation.State);
  if (v18)
    goto LABEL_11;
  v19 = *(_QWORD *)(v0 + 224);
  if ((*(_BYTE *)(v19 + *(_QWORD *)(v0 + 392)) & 1) != 0)
    goto LABEL_11;
  v21 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 344);
  outlined init with copy of ConversationHelperInput(v19 + *(_QWORD *)(v0 + 384), v20, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v20, v21, type metadata accessor for Conversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v23 = *(_QWORD *)(v0 + 344);
  if (EnumCaseMultiPayload == 5)
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 344), type metadata accessor for Conversation.State);
    goto LABEL_11;
  }
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 336), type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v23, type metadata accessor for Conversation.State);
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
LABEL_11:
    outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 304), type metadata accessor for Conversation.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v24 = *(_QWORD *)(v0 + 392);
      v25 = *(_QWORD *)(v0 + 224);
      swift_release();
      swift_release();
      if (*(_BYTE *)(v25 + v24) == 1)
      {
        v27 = *(_QWORD *)(v0 + 312);
        v26 = *(uint64_t **)(v0 + 320);
        v28 = *(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384);
        *v26 = v14;
        swift_storeEnumTagMultiPayload();
        outlined init with take of StringKeyedValue((uint64_t)v26, v27, type metadata accessor for Conversation.State);
        swift_beginAccess();
        swift_retain();
        outlined assign with take of Conversation.State(v27, v28);
        swift_endAccess();
        v33 = v14;
LABEL_17:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v33);
      }
      swift_release();
    }
    else
    {
      v29 = *(_QWORD *)(v0 + 304);
      swift_release();
      outlined destroy of CamOutput(v29, type metadata accessor for Conversation.State);
    }
    v33 = 0;
    goto LABEL_17;
  }
  if (v14 || (v14 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v0 + 224) + 112) + 216))()) != 0)
  {
    *(_QWORD *)(v0 + 400) = v14;
    *(_QWORD *)(v0 + 408) = *(_QWORD *)(v14 + 16);
    swift_retain();
    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v31;
    *v31 = v0;
    v31[1] = Conversation.speculativelyExecute(from:);
    return FlowAgent.prepare()(*(_QWORD *)(v0 + 288));
  }
  else
  {
    static ConversationSELFHelper.shared.getter();
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *v32 = 0xD00000000000002FLL;
    v32[1] = 0x80000001B4EF8710;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;

  v1 = *(_DWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  PrepareResponse.type.getter();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v2, v3);
  if (v5 == v1)
  {
    v6 = (uint64_t *)(*(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 376));
    v7 = *v6;
    v8 = v6[1];
    *(_QWORD *)(v0 + 424) = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    v9 = PrepareResponse.next.getter();
    *(_QWORD *)(v0 + 432) = v9;
    v10 = PrepareResponse.onChildFlowCompletion.getter();
    *(_QWORD *)(v0 + 440) = v10;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 448) = v11;
    *v11 = v0;
    v11[1] = Conversation.speculativelyExecute(from:);
    return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v7, v8, *(_QWORD *)(v0 + 400), v9, 0, 0, v10);
  }
  else if (v5 == *(_DWORD *)(v0 + 524))
  {
    return swift_task_switch();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 240);
    v13 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 232);
    static ConversationSELFHelper.shared.getter();
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(33);
    *(_QWORD *)(v0 + 184) = 0;
    *(_QWORD *)(v0 + 192) = 0xE000000000000000;
    v16._object = (void *)0x80000001B4EF85D0;
    v16._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v16);
    PrepareResponse.type.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Runtime/Conversation.swift", 95, 2, 439);
  }
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = PrepareResponse.next.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v7 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 264);
  if (v5)
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v9(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
  }
  else
  {
    v10 = PrepareResponse.needsExecute.getter();
    v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v9(v6, v8);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(v0 + 328);
      v12 = *(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384);
      swift_beginAccess();
      outlined init with copy of ConversationHelperInput(v12, v11, type metadata accessor for Conversation.State);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        v13 = *(_QWORD *)(v0 + 400);
        v14 = (_QWORD *)(*(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384));
        swift_retain();
        outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for Conversation.State);
        *v14 = v13;
        swift_storeEnumTagMultiPayload();
      }
      v15 = *(_QWORD *)(v0 + 328);
      v16 = *(_QWORD *)(v0 + 288);
      v17 = *(_QWORD *)(v0 + 264);
      swift_retain();
      outlined destroy of CamOutput(v15, type metadata accessor for Conversation.State);
      swift_endAccess();
      swift_release();
      static ConversationSELFHelper.shared.getter();
      swift_bridgeObjectRetain();
      dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextEnded(rcId:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v9(v16, v17);
      v36 = *(_QWORD *)(v0 + 400);
      goto LABEL_17;
    }
  }
  v9(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 264));
  swift_release();
  swift_release();
  v18 = *(_QWORD *)(v0 + 352);
  v19 = *(_QWORD *)(v0 + 360);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384), v19, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v19, v18, type metadata accessor for Conversation.State);
  v20 = (swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD;
  outlined destroy of CamOutput(v18, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v19, type metadata accessor for Conversation.State);
  v21 = *(_QWORD *)(v0 + 224);
  if (v20 || (*(_BYTE *)(v21 + *(_QWORD *)(v0 + 392)) & 1) != 0)
  {
LABEL_12:
    outlined init with copy of ConversationHelperInput(v21 + *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 304), type metadata accessor for Conversation.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v27 = *(_QWORD *)(v0 + 392);
      v28 = *(_QWORD *)(v0 + 224);
      swift_release();
      swift_release();
      if (*(_BYTE *)(v28 + v27) == 1)
      {
        v30 = *(_QWORD *)(v0 + 312);
        v29 = *(_QWORD **)(v0 + 320);
        v31 = *(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384);
        *v29 = 0;
        swift_storeEnumTagMultiPayload();
        outlined init with take of StringKeyedValue((uint64_t)v29, v30, type metadata accessor for Conversation.State);
        swift_beginAccess();
        outlined assign with take of Conversation.State(v30, v31);
        swift_endAccess();
      }
    }
    else
    {
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 304), type metadata accessor for Conversation.State);
    }
    v36 = 0;
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v36);
  }
  v22 = *(_QWORD *)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 344);
  outlined init with copy of ConversationHelperInput(v21 + *(_QWORD *)(v0 + 384), v23, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v23, v22, type metadata accessor for Conversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v25 = *(_QWORD *)(v0 + 344);
  if (EnumCaseMultiPayload == 5)
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 344), type metadata accessor for Conversation.State);
    v21 = *(_QWORD *)(v0 + 224);
    goto LABEL_12;
  }
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 336), type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v25, type metadata accessor for Conversation.State);
  v26 = static Task<>.isCancelled.getter();
  v21 = *(_QWORD *)(v0 + 224);
  if ((v26 & 1) != 0)
    goto LABEL_12;
  v33 = (*(uint64_t (**)(void))(**(_QWORD **)(v21 + 112) + 216))();
  if (v33)
  {
    *(_QWORD *)(v0 + 400) = v33;
    *(_QWORD *)(v0 + 408) = *(_QWORD *)(v33 + 16);
    swift_retain();
    v34 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v34;
    *v34 = v0;
    v34[1] = Conversation.speculativelyExecute(from:);
    return FlowAgent.prepare()(*(_QWORD *)(v0 + 288));
  }
  else
  {
    static ConversationSELFHelper.shared.getter();
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *v35 = 0xD00000000000002FLL;
    v35[1] = 0x80000001B4EF8710;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 456) = *(_QWORD *)(*(_QWORD *)(v0 + 408) + 112);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 464) = dispatch thunk of AnyFlow.siriEnvironment.getter();
  return swift_task_switch();
}

{
  FlowAgent.complete()();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v1 = PrepareResponse.next.getter();
  *(_QWORD *)(v0 + 472) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 400);
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 480) = v3;
    *v3 = v0;
    v3[1] = Conversation.speculativelyExecute(from:);
    v4 = *(_QWORD *)(v0 + 224);
    v3[14] = v2;
    v3[15] = v4;
    return swift_task_switch();
  }
  v7 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD **)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384);
  *v6 = *(_QWORD *)(v0 + 400);
  swift_storeEnumTagMultiPayload();
  outlined init with take of StringKeyedValue((uint64_t)v6, v7, type metadata accessor for Conversation.State);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Conversation.State(v7, v8);
  swift_endAccess();
  v9 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 272);
  static ConversationSELFHelper.shared.getter();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextEnded(rcId:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  v13 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 360);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384), v12, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v12, v13, type metadata accessor for Conversation.State);
  LODWORD(v10) = (swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD;
  outlined destroy of CamOutput(v13, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v12, type metadata accessor for Conversation.State);
  v14 = *(_QWORD *)(v0 + 224);
  if (!(_DWORD)v10 && (*(_BYTE *)(v14 + *(_QWORD *)(v0 + 392)) & 1) == 0)
  {
    v15 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 344);
    outlined init with copy of ConversationHelperInput(v14 + *(_QWORD *)(v0 + 384), v16, type metadata accessor for Conversation.State);
    outlined init with copy of ConversationHelperInput(v16, v15, type metadata accessor for Conversation.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v18 = *(_QWORD *)(v0 + 344);
    if (EnumCaseMultiPayload == 5)
    {
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 344), type metadata accessor for Conversation.State);
      v14 = *(_QWORD *)(v0 + 224);
    }
    else
    {
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 336), type metadata accessor for Conversation.State);
      outlined destroy of CamOutput(v18, type metadata accessor for Conversation.State);
      v19 = static Task<>.isCancelled.getter();
      v14 = *(_QWORD *)(v0 + 224);
      if ((v19 & 1) == 0)
      {
        v25 = (*(uint64_t (**)(void))(**(_QWORD **)(v14 + 112) + 216))();
        if (v25)
        {
          *(_QWORD *)(v0 + 400) = v25;
          *(_QWORD *)(v0 + 408) = *(_QWORD *)(v25 + 16);
          swift_retain();
          v26 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 416) = v26;
          *v26 = v0;
          v26[1] = Conversation.speculativelyExecute(from:);
          return FlowAgent.prepare()(*(_QWORD *)(v0 + 288));
        }
        else
        {
          static ConversationSELFHelper.shared.getter();
          swift_bridgeObjectRetain();
          dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
          swift_release();
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
          swift_allocError();
          *v27 = 0xD00000000000002FLL;
          v27[1] = 0x80000001B4EF8710;
          swift_willThrow();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
      }
    }
  }
  outlined init with copy of ConversationHelperInput(v14 + *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 304), type metadata accessor for Conversation.State);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = *(_QWORD *)(v0 + 392);
    v21 = *(_QWORD *)(v0 + 224);
    swift_release();
    swift_release();
    if (*(_BYTE *)(v21 + v20) == 1)
    {
      v23 = *(_QWORD *)(v0 + 312);
      v22 = *(_QWORD **)(v0 + 320);
      v24 = *(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384);
      *v22 = 0;
      swift_storeEnumTagMultiPayload();
      outlined init with take of StringKeyedValue((uint64_t)v22, v23, type metadata accessor for Conversation.State);
      swift_beginAccess();
      outlined assign with take of Conversation.State(v23, v24);
      swift_endAccess();
    }
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 304), type metadata accessor for Conversation.State);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[58];
  v2 = v0[51];
  v3 = (uint64_t *)(v0[28] + v0[47]);
  v4 = *v3;
  v5 = v3[1];
  v0[61] = v5;
  v6 = *(_QWORD *)(v2 + 152);
  v0[62] = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = PrepareResponse.onChildFlowCompletion.getter();
  v0[63] = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v0[64] = v8;
  *v8 = v0;
  v8[1] = Conversation.speculativelyExecute(from:);
  return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v4, v5, 0, v0[59], v6, v1, v7);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  swift_release();
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 272);
  static ConversationSELFHelper.shared.getter();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextEnded(rcId:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384), v5, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v5, v4, type metadata accessor for Conversation.State);
  v6 = (swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD;
  outlined destroy of CamOutput(v4, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v5, type metadata accessor for Conversation.State);
  v7 = *(_QWORD *)(v0 + 224);
  if (!v6 && (*(_BYTE *)(v7 + *(_QWORD *)(v0 + 392)) & 1) == 0)
  {
    v8 = *(_QWORD *)(v0 + 336);
    v9 = *(_QWORD *)(v0 + 344);
    outlined init with copy of ConversationHelperInput(v7 + *(_QWORD *)(v0 + 384), v9, type metadata accessor for Conversation.State);
    outlined init with copy of ConversationHelperInput(v9, v8, type metadata accessor for Conversation.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v11 = *(_QWORD *)(v0 + 344);
    if (EnumCaseMultiPayload == 5)
    {
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 344), type metadata accessor for Conversation.State);
      v7 = *(_QWORD *)(v0 + 224);
    }
    else
    {
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 336), type metadata accessor for Conversation.State);
      outlined destroy of CamOutput(v11, type metadata accessor for Conversation.State);
      v12 = static Task<>.isCancelled.getter();
      v7 = *(_QWORD *)(v0 + 224);
      if ((v12 & 1) == 0)
      {
        v19 = (*(uint64_t (**)(void))(**(_QWORD **)(v7 + 112) + 216))();
        if (v19)
        {
          *(_QWORD *)(v0 + 400) = v19;
          *(_QWORD *)(v0 + 408) = *(_QWORD *)(v19 + 16);
          swift_retain();
          v20 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 416) = v20;
          *v20 = v0;
          v20[1] = Conversation.speculativelyExecute(from:);
          return FlowAgent.prepare()(*(_QWORD *)(v0 + 288));
        }
        else
        {
          static ConversationSELFHelper.shared.getter();
          swift_bridgeObjectRetain();
          dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
          swift_release();
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
          swift_allocError();
          *v21 = 0xD00000000000002FLL;
          v21[1] = 0x80000001B4EF8710;
          swift_willThrow();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
      }
    }
  }
  outlined init with copy of ConversationHelperInput(v7 + *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 304), type metadata accessor for Conversation.State);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = *(_QWORD *)(v0 + 392);
    v14 = *(_QWORD *)(v0 + 224);
    swift_release();
    swift_release();
    if (*(_BYTE *)(v14 + v13) == 1)
    {
      v16 = *(_QWORD *)(v0 + 312);
      v15 = *(_QWORD **)(v0 + 320);
      v17 = *(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 384);
      *v15 = 0;
      swift_storeEnumTagMultiPayload();
      outlined init with take of StringKeyedValue((uint64_t)v15, v16, type metadata accessor for Conversation.State);
      swift_beginAccess();
      outlined assign with take of Conversation.State(v16, v17);
      swift_endAccess();
    }
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 304), type metadata accessor for Conversation.State);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

BOOL Conversation.State.shouldContinueSpeculating.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BOOL8 v4;
  uint64_t v6;

  v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  v4 = ((swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD) == 0;
  outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for Conversation.State);
  return v4;
}

uint64_t Conversation.State.prepareComplete(selectedFlow:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;

  v3 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput((uint64_t)v1, (uint64_t)v5, v6);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    outlined destroy of CamOutput((uint64_t)v1, type metadata accessor for Conversation.State);
    *v1 = a1;
    swift_storeEnumTagMultiPayload();
    swift_retain();
  }
  return outlined destroy of CamOutput((uint64_t)v5, type metadata accessor for Conversation.State);
}

uint64_t Conversation.execute(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationCommitResult?);
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v4 = type metadata accessor for ConversationCommitResult();
  v3[50] = v4;
  v3[51] = *(_QWORD *)(v4 - 8);
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowUnhandledReason?);
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  v5 = type metadata accessor for FlowUnhandledReason();
  v3[56] = v5;
  v3[57] = *(_QWORD *)(v5 - 8);
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v3[62] = swift_task_alloc();
  v6 = type metadata accessor for PluginAction();
  v3[63] = v6;
  v3[64] = *(_QWORD *)(v6 - 8);
  v3[65] = swift_task_alloc();
  v7 = type metadata accessor for ExecuteResponseType();
  v3[66] = v7;
  v3[67] = *(_QWORD *)(v7 - 8);
  v3[68] = swift_task_alloc();
  v3[69] = swift_task_alloc();
  v8 = type metadata accessor for DispatchTimeInterval();
  v3[70] = v8;
  v3[71] = *(_QWORD *)(v8 - 8);
  v3[72] = swift_task_alloc();
  v9 = type metadata accessor for ExecuteResponse();
  v3[73] = v9;
  v3[74] = *(_QWORD *)(v9 - 8);
  v3[75] = swift_task_alloc();
  v10 = type metadata accessor for PrepareResponseType();
  v3[76] = v10;
  v3[77] = *(_QWORD *)(v10 - 8);
  v3[78] = swift_task_alloc();
  v3[79] = swift_task_alloc();
  v11 = type metadata accessor for PrepareResponse();
  v3[80] = v11;
  v3[81] = *(_QWORD *)(v11 - 8);
  v3[82] = swift_task_alloc();
  v3[83] = swift_task_alloc();
  v3[84] = type metadata accessor for Conversation.State(0);
  v3[85] = swift_task_alloc();
  v3[86] = swift_task_alloc();
  v3[87] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[88] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Conversation.execute(from:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 712) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = &unk_1ED515000;
  if (v4)
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v83 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = (uint64_t *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
    swift_beginAccess();
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    v6 = (_QWORD *)&unk_1ED515000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[Conversation] Finally executing rcId: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  v12 = *(_QWORD *)(v0 + 704);
  v13 = *(_QWORD *)(v0 + 376);
  v79 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 720) = type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  v14 = v6[100];
  *(_QWORD *)(v0 + 728) = v14;
  v15 = (uint64_t *)(v13 + v14);
  swift_beginAccess();
  v16 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  *(_QWORD *)(v0 + 736) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  v17 = v13 + v16;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v17, v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v18 = *(_QWORD *)(v13 + 112);
  *(_QWORD *)(v0 + 744) = v18;
  v19 = *(void (**)(uint64_t))(*(_QWORD *)v18 + 160);
  v20 = swift_bridgeObjectRetain();
  v19(v20);
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextStarted(rcId:hypothesisId:fromPlugin:stackDepth:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v0 + 344) = 0;
  if (v79)
  {
    v21 = *(_QWORD *)(v79 + 16);
    v22 = *(_QWORD *)(v0 + 376) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
    swift_beginAccess();
    v23 = MEMORY[0x1B5E44848](v22);
    *(_QWORD *)(v0 + 752) = v23;
    if (v23)
    {
      v24 = *(_QWORD *)(v22 + 8);
      ObjectType = swift_getObjectType();
      v28 = v21 + 152;
      v27 = *(_QWORD *)(v21 + 152);
      v26 = *(_QWORD *)(v28 + 8);
      v30 = *v15;
      v29 = v15[1];
      *(_QWORD *)(v0 + 760) = v29;
      v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v24 + 8)
                                                                                         + *(_QWORD *)(v24 + 8));
      swift_bridgeObjectRetain();
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 768) = v31;
      *v31 = v0;
      v31[1] = Conversation.execute(from:);
      return v80(v26, v27, v30, v29, ObjectType, v24);
    }
  }
  v33 = *(_QWORD *)(v0 + 696);
  v34 = *(_QWORD *)(v0 + 688);
  v35 = *(_QWORD *)(v0 + 376);
  v36 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  *(_QWORD *)(v0 + 776) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  v37 = v35 + v36;
  *(_QWORD *)(v0 + 784) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused;
  swift_retain();
  swift_beginAccess();
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v37, v33, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v33, v34, type metadata accessor for Conversation.State);
  v38 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of CamOutput(v34, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v33, type metadata accessor for Conversation.State);
  if (v38 == 2)
  {
    *(_DWORD *)(v0 + 1112) = *MEMORY[0x1E0D9BF70];
    *(_DWORD *)(v0 + 1116) = *MEMORY[0x1E0D9BF78];
    v39 = (_DWORD *)MEMORY[0x1E0D9BF40];
    *(_DWORD *)(v0 + 1120) = *MEMORY[0x1E0DEF4A0];
    *(_DWORD *)(v0 + 1124) = *v39;
    *(_DWORD *)(v0 + 1128) = *MEMORY[0x1E0D9BF48];
    *(_DWORD *)(v0 + 1132) = *MEMORY[0x1E0D9BF38];
    v40 = *(_QWORD *)(v0 + 368);
    if ((static Task<>.isCancelled.getter() & 1) == 0
      && (*(_BYTE *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 784)) & 1) == 0)
    {
      if (v40 || (v40 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))()) != 0)
      {
        *(_QWORD *)(v0 + 792) = v40;
        *(_QWORD *)(v0 + 800) = *(_QWORD *)(v40 + 16);
        swift_retain();
        v41 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 808) = v41;
        *v41 = v0;
        v41[1] = Conversation.execute(from:);
        return FlowAgent.prepare()(*(_QWORD *)(v0 + 664));
      }
      v76 = *(_QWORD *)(v0 + 680);
      v77 = *(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      outlined assign with take of Conversation.State(v76, v77);
      swift_endAccess();
      v40 = 0;
    }
  }
  else
  {
    v40 = *(_QWORD *)(v0 + 368);
  }
  *(_QWORD *)(v0 + 1088) = v40;
  v42 = *(_QWORD *)(v0 + 704);
  v43 = *(_QWORD *)(v0 + 376);
  v44 = v43 + *(_QWORD *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v44, v42, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v42, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v45 = v43 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  v46 = MEMORY[0x1B5E44848](v45);
  *(_QWORD *)(v0 + 1096) = v46;
  if (v46)
  {
    v47 = *(_QWORD *)(v45 + 8);
    v48 = swift_getObjectType();
    v81 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v47 + 16) + *(_QWORD *)(v47 + 16));
    v49 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1104) = v49;
    *v49 = v0;
    v49[1] = Conversation.execute(from:);
    return v81(v48, v47);
  }
  else
  {
    v50 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v50)
    {
      v51 = v50;
      swift_retain_n();
      v52 = Logger.logObject.getter();
      v53 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc();
        v82 = swift_slowAlloc();
        v83 = v82;
        *(_DWORD *)v54 = 136315394;
        *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v54 + 12) = 2080;
        v55 = type metadata accessor for Siri_Nlu_External_Task();
        v56 = swift_bridgeObjectRetain();
        v57 = MEMORY[0x1B5E434D4](v56, v55);
        v59 = v58;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v52, v53, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v82, -1, -1);
        MEMORY[0x1B5E44758](v54, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v66 = *(_QWORD **)(v0 + 360);
      v67 = *(_QWORD *)(*(_QWORD *)(v51 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      v68 = MEMORY[0x1E0DEE9D8];
      *v66 = v67;
      v66[1] = v68;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v60 = v0 + 344;
      v61 = Logger.logObject.getter();
      v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = swift_slowAlloc();
        v64 = swift_slowAlloc();
        v83 = v64;
        *(_DWORD *)v63 = 136315394;
        *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v63 + 12) = 2080;
        swift_beginAccess();
        v78 = v64;
        if (*(_QWORD *)v60)
        {
          v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v60 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          v65 = MEMORY[0x1E0DEE9D8];
        }
        v69 = type metadata accessor for Siri_Nlu_External_Task();
        v70 = MEMORY[0x1B5E434D4](v65, v69);
        v72 = v71;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v61, v62, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v63, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v78, -1, -1);
        MEMORY[0x1B5E44758](v63, -1, -1);

      }
      else
      {

      }
      swift_beginAccess();
      v73 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)v60)
      {
        v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v60 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        v74 = MEMORY[0x1E0DEE9D8];
      }
      v75 = *(_QWORD **)(v0 + 360);
      swift_release();
      *v75 = v73;
      v75[1] = v74;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  *(_QWORD *)(v0 + 776) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  v5 = v3 + v4;
  *(_QWORD *)(v0 + 784) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused;
  swift_retain();
  swift_beginAccess();
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v5, v1, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v1, v2, type metadata accessor for Conversation.State);
  v6 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of CamOutput(v2, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v1, type metadata accessor for Conversation.State);
  if (v6 == 2)
  {
    *(_DWORD *)(v0 + 1112) = *MEMORY[0x1E0D9BF70];
    *(_DWORD *)(v0 + 1116) = *MEMORY[0x1E0D9BF78];
    v7 = (_DWORD *)MEMORY[0x1E0D9BF40];
    *(_DWORD *)(v0 + 1120) = *MEMORY[0x1E0DEF4A0];
    *(_DWORD *)(v0 + 1124) = *v7;
    *(_DWORD *)(v0 + 1128) = *MEMORY[0x1E0D9BF48];
    *(_DWORD *)(v0 + 1132) = *MEMORY[0x1E0D9BF38];
    v8 = *(_QWORD *)(v0 + 368);
    if ((static Task<>.isCancelled.getter() & 1) == 0
      && (*(_BYTE *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 784)) & 1) == 0)
    {
      if (v8 || (v8 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))()) != 0)
      {
        *(_QWORD *)(v0 + 792) = v8;
        *(_QWORD *)(v0 + 800) = *(_QWORD *)(v8 + 16);
        swift_retain();
        v9 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 808) = v9;
        *v9 = v0;
        v9[1] = Conversation.execute(from:);
        return FlowAgent.prepare()(*(_QWORD *)(v0 + 664));
      }
      v45 = *(_QWORD *)(v0 + 680);
      v46 = *(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      outlined assign with take of Conversation.State(v45, v46);
      swift_endAccess();
      v8 = 0;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 368);
  }
  *(_QWORD *)(v0 + 1088) = v8;
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 376);
  v13 = v12 + *(_QWORD *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v13, v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v14 = v12 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  v15 = MEMORY[0x1B5E44848](v14);
  *(_QWORD *)(v0 + 1096) = v15;
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 8);
    ObjectType = swift_getObjectType();
    v48 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v16 + 16) + *(_QWORD *)(v16 + 16));
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1104) = v18;
    *v18 = v0;
    v18[1] = Conversation.execute(from:);
    return v48(ObjectType, v16);
  }
  else
  {
    v19 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v19)
    {
      v20 = v19;
      swift_retain_n();
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc();
        v49 = swift_slowAlloc();
        v50 = v49;
        *(_DWORD *)v23 = 136315394;
        *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v23 + 12) = 2080;
        v24 = type metadata accessor for Siri_Nlu_External_Task();
        v25 = swift_bridgeObjectRetain();
        v26 = MEMORY[0x1B5E434D4](v25, v24);
        v28 = v27;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v21, v22, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v49, -1, -1);
        MEMORY[0x1B5E44758](v23, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v35 = *(_QWORD **)(v0 + 360);
      v36 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      v37 = MEMORY[0x1E0DEE9D8];
      *v35 = v36;
      v35[1] = v37;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v29 = v0 + 344;
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc();
        v33 = swift_slowAlloc();
        v50 = v33;
        *(_DWORD *)v32 = 136315394;
        *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2080;
        swift_beginAccess();
        v47 = v33;
        if (*(_QWORD *)v29)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          v34 = MEMORY[0x1E0DEE9D8];
        }
        v38 = type metadata accessor for Siri_Nlu_External_Task();
        v39 = MEMORY[0x1B5E434D4](v34, v38);
        v41 = v40;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v30, v31, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v47, -1, -1);
        MEMORY[0x1B5E44758](v32, -1, -1);

      }
      else
      {

      }
      swift_beginAccess();
      v42 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)v29)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        v43 = MEMORY[0x1E0DEE9D8];
      }
      v44 = *(_QWORD **)(v0 + 360);
      swift_release();
      *v44 = v42;
      v44[1] = v43;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;

  v1 = *(_DWORD *)(v0 + 1112);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 608);
  PrepareResponse.type.getter();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == v1)
  {
    v6 = (uint64_t *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 728));
    v7 = *v6;
    v8 = v6[1];
    *(_QWORD *)(v0 + 816) = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    v9 = PrepareResponse.next.getter();
    *(_QWORD *)(v0 + 824) = v9;
    v10 = PrepareResponse.onChildFlowCompletion.getter();
    *(_QWORD *)(v0 + 832) = v10;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 840) = v11;
    *v11 = v0;
    v11[1] = Conversation.execute(from:);
    return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v7, v8, *(_QWORD *)(v0 + 792), v9, 0, 0, v10);
  }
  else if (v5 == *(_DWORD *)(v0 + 1116))
  {
    return swift_task_switch();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 624);
    v14 = *(_QWORD *)(v0 + 616);
    v15 = *(_QWORD *)(v0 + 608);
    _StringGuts.grow(_:)(33);
    *(_QWORD *)(v0 + 280) = 0;
    *(_QWORD *)(v0 + 288) = 0xE000000000000000;
    v16._object = (void *)0x80000001B4EF85D0;
    v16._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v16);
    PrepareResponse.type.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Runtime/Conversation.swift", 95, 2, 496);
  }
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 656);
  v3 = *(_QWORD *)(v0 + 648);
  v4 = *(_QWORD *)(v0 + 640);
  v5 = PrepareResponse.needsExecute.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v6 = *(_QWORD *)(v0 + 656);
  v7 = *(_QWORD *)(v0 + 648);
  v8 = *(_QWORD *)(v0 + 640);
  if ((v5 & 1) != 0)
  {
    v9 = PrepareResponse.next.getter();
    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    *(_QWORD *)(v0 + 848) = v10;
    v10(v6, v8);
    swift_release();
    if (!v9)
    {
      v11 = *(_QWORD *)(v0 + 568);
      **(_QWORD **)(v0 + 576) = 300;
      (*(void (**)(void))(v11 + 104))();
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 856) = v12;
      *v12 = v0;
      v12[1] = Conversation.execute(from:);
      return FlowAgent.execute(timeout:)(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 576));
    }
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(*(_QWORD *)(v0 + 656), *(_QWORD *)(v0 + 640));
  }
  v10(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 640));
  swift_release();
  swift_release();
  v14 = *(_QWORD *)(v0 + 696);
  v15 = *(_QWORD *)(v0 + 688);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776), v14, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v14, v15, type metadata accessor for Conversation.State);
  v16 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of CamOutput(v15, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v14, type metadata accessor for Conversation.State);
  if (v16 == 2
    && (static Task<>.isCancelled.getter() & 1) == 0
    && (*(_BYTE *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 784)) & 1) == 0)
  {
    v17 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v17)
    {
      *(_QWORD *)(v0 + 792) = v17;
      *(_QWORD *)(v0 + 800) = *(_QWORD *)(v17 + 16);
      swift_retain();
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 808) = v18;
      *v18 = v0;
      v18[1] = Conversation.execute(from:);
      return FlowAgent.prepare()(*(_QWORD *)(v0 + 664));
    }
    v19 = *(_QWORD *)(v0 + 680);
    v20 = *(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of Conversation.State(v19, v20);
    swift_endAccess();
  }
  *(_QWORD *)(v0 + 1088) = 0;
  v21 = *(_QWORD *)(v0 + 704);
  v22 = *(_QWORD *)(v0 + 376);
  v23 = v22 + *(_QWORD *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v23, v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v24 = v22 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  v25 = MEMORY[0x1B5E44848](v24);
  *(_QWORD *)(v0 + 1096) = v25;
  if (v25)
  {
    v26 = *(_QWORD *)(v24 + 8);
    ObjectType = swift_getObjectType();
    v55 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v26 + 16) + *(_QWORD *)(v26 + 16));
    v28 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1104) = v28;
    *v28 = v0;
    v28[1] = Conversation.execute(from:);
    return v55(ObjectType, v26);
  }
  else
  {
    v29 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v29)
    {
      v30 = v29;
      swift_retain_n();
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc();
        v56 = swift_slowAlloc();
        v57 = v56;
        *(_DWORD *)v33 = 136315394;
        *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v33 + 12) = 2080;
        v34 = type metadata accessor for Siri_Nlu_External_Task();
        v35 = swift_bridgeObjectRetain();
        v36 = MEMORY[0x1B5E434D4](v35, v34);
        v38 = v37;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v31, v32, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v56, -1, -1);
        MEMORY[0x1B5E44758](v33, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v44 = *(_QWORD **)(v0 + 360);
      v45 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      v46 = MEMORY[0x1E0DEE9D8];
      *v44 = v45;
      v44[1] = v46;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v39 = v0 + 344;
      v40 = Logger.logObject.getter();
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = swift_slowAlloc();
        v54 = swift_slowAlloc();
        v57 = v54;
        *(_DWORD *)v42 = 136315394;
        *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v42 + 12) = 2080;
        swift_beginAccess();
        if (*(_QWORD *)v39)
        {
          v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v39 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          v43 = MEMORY[0x1E0DEE9D8];
        }
        v47 = type metadata accessor for Siri_Nlu_External_Task();
        v48 = MEMORY[0x1B5E434D4](v43, v47);
        v50 = v49;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v40, v41, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v54, -1, -1);
        MEMORY[0x1B5E44758](v42, -1, -1);

      }
      else
      {

      }
      swift_beginAccess();
      v51 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)v39)
      {
        v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v39 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        v52 = MEMORY[0x1E0DEE9D8];
      }
      v53 = *(_QWORD **)(v0 + 360);
      swift_release();
      *v53 = v51;
      v53[1] = v52;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 864) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[71] + 8))(v2[72], v2[70]);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 872) = *(_QWORD *)(*(_QWORD *)(v0 + 800) + 112);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 880) = dispatch thunk of AnyFlow.siriEnvironment.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[99];
  FlowAgent.complete()();
  v2 = (_QWORD *)swift_task_alloc();
  v0[111] = v2;
  *v2 = v0;
  v2[1] = Conversation.execute(from:);
  v3 = v0[47];
  v2[14] = v1;
  v2[15] = v3;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[112];
  v2 = v0[110];
  v3 = v0[100];
  v4 = (uint64_t *)(v0[47] + v0[91]);
  swift_release();
  v0[43] = v1;
  v5 = *v4;
  v6 = v4[1];
  v0[113] = v6;
  swift_bridgeObjectRetain();
  v7 = PrepareResponse.next.getter();
  v0[114] = v7;
  v8 = *(_QWORD *)(v3 + 152);
  v0[115] = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = PrepareResponse.onChildFlowCompletion.getter();
  v0[116] = v9;
  v10 = (_QWORD *)swift_task_alloc();
  v0[117] = v10;
  *v10 = v0;
  v10[1] = Conversation.execute(from:);
  return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v5, v6, 0, v7, v8, v2, v9);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 648);
  v3 = *(_QWORD *)(v0 + 640);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 696);
  v5 = *(_QWORD *)(v0 + 688);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776), v4, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v4, v5, type metadata accessor for Conversation.State);
  LODWORD(v1) = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of CamOutput(v5, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v4, type metadata accessor for Conversation.State);
  if ((_DWORD)v1 == 2
    && (static Task<>.isCancelled.getter() & 1) == 0
    && (*(_BYTE *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 784)) & 1) == 0)
  {
    v6 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v6)
    {
      *(_QWORD *)(v0 + 792) = v6;
      *(_QWORD *)(v0 + 800) = *(_QWORD *)(v6 + 16);
      swift_retain();
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 808) = v7;
      *v7 = v0;
      v7[1] = Conversation.execute(from:);
      return FlowAgent.prepare()(*(_QWORD *)(v0 + 664));
    }
    v9 = *(_QWORD *)(v0 + 680);
    v10 = *(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of Conversation.State(v9, v10);
    swift_endAccess();
  }
  *(_QWORD *)(v0 + 1088) = 0;
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 376);
  v13 = v12 + *(_QWORD *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v13, v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v14 = v12 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  v15 = MEMORY[0x1B5E44848](v14);
  *(_QWORD *)(v0 + 1096) = v15;
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 8);
    ObjectType = swift_getObjectType();
    v46 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v16 + 16) + *(_QWORD *)(v16 + 16));
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1104) = v18;
    *v18 = v0;
    v18[1] = Conversation.execute(from:);
    return v46(ObjectType, v16);
  }
  else
  {
    v19 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v19)
    {
      v20 = v19;
      swift_retain_n();
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc();
        v47 = swift_slowAlloc();
        v48 = v47;
        *(_DWORD *)v23 = 136315394;
        *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v23 + 12) = 2080;
        v24 = type metadata accessor for Siri_Nlu_External_Task();
        v25 = swift_bridgeObjectRetain();
        v26 = MEMORY[0x1B5E434D4](v25, v24);
        v28 = v27;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v21, v22, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v47, -1, -1);
        MEMORY[0x1B5E44758](v23, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v35 = *(_QWORD **)(v0 + 360);
      v36 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      v37 = MEMORY[0x1E0DEE9D8];
      *v35 = v36;
      v35[1] = v37;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v29 = v0 + 344;
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc();
        v33 = swift_slowAlloc();
        v48 = v33;
        *(_DWORD *)v32 = 136315394;
        *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2080;
        swift_beginAccess();
        v45 = v33;
        if (*(_QWORD *)v29)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          v34 = MEMORY[0x1E0DEE9D8];
        }
        v38 = type metadata accessor for Siri_Nlu_External_Task();
        v39 = MEMORY[0x1B5E434D4](v34, v38);
        v41 = v40;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v30, v31, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v45, -1, -1);
        MEMORY[0x1B5E44758](v32, -1, -1);

      }
      else
      {

      }
      swift_beginAccess();
      v42 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)v29)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        v43 = MEMORY[0x1E0DEE9D8];
      }
      v44 = *(_QWORD **)(v0 + 360);
      swift_release();
      *v44 = v42;
      v44[1] = v43;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, _QWORD, uint64_t);
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);

  v1 = *(_DWORD *)(v0 + 1124);
  v2 = *(_QWORD *)(v0 + 552);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 528);
  ExecuteResponse.type.getter();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == v1)
  {
    v6 = (uint64_t *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 728));
    v7 = *v6;
    v8 = v6[1];
    *(_QWORD *)(v0 + 944) = v8;
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = ExecuteResponse.next.getter();
    *(_QWORD *)(v0 + 952) = v9;
    v10 = ExecuteResponse.onChildFlowCompletion.getter();
    *(_QWORD *)(v0 + 960) = v10;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 968) = v11;
    *v11 = v0;
    v11[1] = Conversation.execute(from:);
    return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v7, v8, *(_QWORD *)(v0 + 792), v9, 0, 0, v10);
  }
  if (v5 == *(_DWORD *)(v0 + 1128))
    return swift_task_switch();
  if (v5 == *(_DWORD *)(v0 + 1132))
  {
    v13 = *(_QWORD *)(v0 + 800);
    v14 = (uint64_t *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 728));
    (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 744) + 232))(*(_QWORD *)(v0 + 792));
    swift_release();
    flushProcessWideSiriEnvironmentCache()();
    v15 = *v14;
    v16 = v14[1];
    *(_QWORD *)(v0 + 976) = v16;
    swift_retain();
    swift_bridgeObjectRetain();
    v17 = ExecuteResponse.next.getter();
    *(_QWORD *)(v0 + 984) = v17;
    v18 = *(_QWORD *)(v13 + 152);
    *(_QWORD *)(v0 + 992) = v18;
    swift_bridgeObjectRetain();
    v19 = ExecuteResponse.onChildFlowCompletion.getter();
    *(_QWORD *)(v0 + 1000) = v19;
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1008) = v20;
    *v20 = v0;
    v20[1] = Conversation.execute(from:);
    return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v15, v16, *(_QWORD *)(v0 + 792), v17, v18, 0, v19);
  }
  if (v5 == *MEMORY[0x1E0D9BF50])
  {
    v21 = *(_QWORD *)(v0 + 448);
    v22 = *(_QWORD *)(v0 + 456);
    v23 = *(_QWORD *)(v0 + 432);
    ExecuteResponse.unhandledReason.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 432), &demangling cache variable for type metadata for FlowUnhandledReason?);
      return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000080, 0x80000001B4EF8680, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Runtime/Conversation.swift", 95, 2, 540);
    }
    v29 = *(_QWORD *)(v0 + 704);
    v30 = *(_QWORD *)(v0 + 464);
    v31 = *(_QWORD *)(v0 + 472);
    v32 = *(_QWORD *)(v0 + 448);
    v33 = *(_QWORD *)(v0 + 456);
    v34 = *(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 736);
    v71 = *(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 32);
    v71(v31, *(_QWORD *)(v0 + 432), v32);
    static ConversationSELFHelper.shared.getter();
    outlined init with copy of ReferenceResolutionClientProtocol?(v34, v29, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v29, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v30, v31, v32);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v30, v32);
    v73 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    if (v35 == *MEMORY[0x1E0D9B0B0])
    {
      v69 = *(_QWORD *)(v0 + 640);
      v70 = *(_QWORD *)(v0 + 664);
      v64 = *(_QWORD *)(v0 + 592);
      v65 = *(_QWORD *)(v0 + 584);
      v66 = *(_QWORD *)(v0 + 600);
      v67 = *(_QWORD *)(v0 + 408);
      v68 = *(_QWORD *)(v0 + 400);
      v36 = *(_QWORD *)(v0 + 376);
      v63 = *(_QWORD *)(v0 + 384);
      v37 = (uint64_t *)(v36 + *(_QWORD *)(v0 + 728));
      v60 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8);
      v60(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 448));
      SiriEnvironment.currentRequest.getter();
      v38 = CurrentRequest.executionRequestId.getter();
      v40 = v39;
      swift_release();
      if (v40)
        v41 = v38;
      else
        v41 = 0;
      v62 = v41;
      if (!v40)
        v40 = 0xE000000000000000;
      SiriEnvironment.currentRequest.getter();
      v61 = CurrentRequest.rootRequestId.getter();
      v43 = v42;
      swift_release();
      v45 = *(_QWORD *)(v36 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils + 24);
      v44 = *(_QWORD *)(v36 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v36 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils), v45);
      v46 = *v37;
      v47 = v37[1];
      v48 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 40);
      swift_bridgeObjectRetain();
      v48(v62, v40, v61, v43, v46, v47, v45, v44);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v65);
      v73(v70, v69);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v63, 1, v68) != 1)
      {
        v57 = *(_QWORD *)(v0 + 416);
        v58 = *(_QWORD *)(v0 + 384);
        v59 = *(_QWORD *)(v0 + 360);
        v60(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 448));
        outlined init with take of StringKeyedValue(v58, v57, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
        outlined init with take of StringKeyedValue(v57, v59, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
        goto LABEL_24;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 384), &demangling cache variable for type metadata for ConversationCommitResult?);
    }
    else
    {
      v49 = *(_QWORD *)(v0 + 664);
      v50 = *(_QWORD *)(v0 + 640);
      v51 = *(_QWORD *)(v0 + 600);
      v52 = *(_QWORD *)(v0 + 592);
      v53 = *(_QWORD *)(v0 + 584);
      v54 = *(_QWORD *)(v0 + 456);
      v55 = *(_QWORD *)(v0 + 464);
      v56 = *(_QWORD *)(v0 + 448);
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
      v73(v49, v50);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
    }
    v71(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 448));
    swift_storeEnumTagMultiPayload();
LABEL_24:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v24 = *(_QWORD *)(v0 + 704);
  v25 = *(_QWORD *)(v0 + 544);
  v72 = *(_QWORD *)(v0 + 536);
  v26 = *(_QWORD *)(v0 + 528);
  v27 = *(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v27, v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  _StringGuts.grow(_:)(35);
  *(_QWORD *)(v0 + 296) = 0;
  *(_QWORD *)(v0 + 304) = 0xE000000000000000;
  v28._object = (void *)0x80000001B4EF8650;
  v28._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v28);
  ExecuteResponse.type.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v25, v26);
  return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Runtime/Conversation.swift", 95, 2, 560);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;

  v1 = ExecuteResponse.retriggerNL.getter();
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 600);
  v8 = *(_QWORD *)(v0 + 592);
  v9 = *(_QWORD *)(v0 + 584);
  if (v2)
  {
    v10 = v2;
    v59 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    v60 = v3;
    v11 = *(uint64_t **)(v0 + 360);
    v12 = v1;
    v13 = *(_QWORD *)(v0 + 640);
    v61 = v4;
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v59(v6, v13);
    *v11 = v12;
    v11[1] = v10;
    v11[2] = v60;
    v11[3] = v61;
    goto LABEL_3;
  }
  v15 = *(_QWORD *)(v0 + 640);
  v16 = ExecuteResponse.requireInput.getter();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v5(v6, v15);
  v17 = *(_QWORD *)(v0 + 776);
  if ((v16 & 1) == 0)
  {
    v20 = *(_QWORD *)(v0 + 696);
    v21 = *(_QWORD *)(v0 + 688);
    outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 376) + v17, v20, type metadata accessor for Conversation.State);
    outlined init with copy of ConversationHelperInput(v20, v21, type metadata accessor for Conversation.State);
    v22 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
    outlined destroy of CamOutput(v21, type metadata accessor for Conversation.State);
    outlined destroy of CamOutput(v20, type metadata accessor for Conversation.State);
    if (v22 != 2
      || (static Task<>.isCancelled.getter() & 1) != 0
      || (*(_BYTE *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 784)) & 1) != 0)
    {
      goto LABEL_10;
    }
    v50 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v50)
    {
      *(_QWORD *)(v0 + 792) = v50;
      *(_QWORD *)(v0 + 800) = *(_QWORD *)(v50 + 16);
      swift_retain();
      v51 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 808) = v51;
      *v51 = v0;
      v51[1] = Conversation.execute(from:);
      return FlowAgent.prepare()(*(_QWORD *)(v0 + 664));
    }
    v17 = *(_QWORD *)(v0 + 776);
  }
  v18 = *(_QWORD *)(v0 + 680);
  v19 = *(_QWORD *)(v0 + 376) + v17;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of Conversation.State(v18, v19);
  swift_endAccess();
LABEL_10:
  *(_QWORD *)(v0 + 1088) = 0;
  v23 = *(_QWORD *)(v0 + 704);
  v24 = *(_QWORD *)(v0 + 376);
  v25 = v24 + *(_QWORD *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v25, v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v26 = v24 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  v27 = MEMORY[0x1B5E44848](v26);
  *(_QWORD *)(v0 + 1096) = v27;
  if (!v27)
  {
    v31 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (!v31)
    {
      v41 = v0 + 344;
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc();
        v45 = swift_slowAlloc();
        v65 = v45;
        *(_DWORD *)v44 = 136315394;
        *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v44 + 12) = 2080;
        swift_beginAccess();
        v62 = v45;
        if (*(_QWORD *)v41)
        {
          v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v41 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          v46 = MEMORY[0x1E0DEE9D8];
        }
        v52 = type metadata accessor for Siri_Nlu_External_Task();
        v53 = MEMORY[0x1B5E434D4](v46, v52);
        v55 = v54;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v42, v43, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v62, -1, -1);
        MEMORY[0x1B5E44758](v44, -1, -1);

      }
      else
      {

      }
      swift_beginAccess();
      v56 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)v41)
      {
        v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v41 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        v57 = MEMORY[0x1E0DEE9D8];
      }
      v58 = *(_QWORD **)(v0 + 360);
      swift_release();
      *v58 = v56;
      v58[1] = v57;
      swift_storeEnumTagMultiPayload();
      goto LABEL_4;
    }
    v32 = v31;
    swift_retain_n();
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v64 = swift_slowAlloc();
      v65 = v64;
      *(_DWORD *)v35 = 136315394;
      *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2080;
      v36 = type metadata accessor for Siri_Nlu_External_Task();
      v37 = swift_bridgeObjectRetain();
      v38 = MEMORY[0x1B5E434D4](v37, v36);
      v40 = v39;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v33, v34, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v64, -1, -1);
      MEMORY[0x1B5E44758](v35, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v47 = *(_QWORD **)(v0 + 360);
    v48 = *(_QWORD *)(*(_QWORD *)(v32 + 16) + 152);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    v49 = MEMORY[0x1E0DEE9D8];
    *v47 = v48;
    v47[1] = v49;
LABEL_3:
    swift_storeEnumTagMultiPayload();
LABEL_4:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v28 = *(_QWORD *)(v26 + 8);
  ObjectType = swift_getObjectType();
  v63 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v28 + 16) + *(_QWORD *)(v28 + 16));
  v30 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1104) = v30;
  *v30 = v0;
  v30[1] = Conversation.execute(from:);
  return v63(ObjectType, v28);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = ExecuteResponse.requireInput.getter();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  if ((v7 & 1) != 0)
  {
LABEL_2:
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of Conversation.State(v8, v9);
    swift_endAccess();
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(v0 + 696);
  v11 = *(_QWORD *)(v0 + 688);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776), v10, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v10, v11, type metadata accessor for Conversation.State);
  v12 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of CamOutput(v11, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v10, type metadata accessor for Conversation.State);
  if (v12 == 2
    && (static Task<>.isCancelled.getter() & 1) == 0
    && (*(_BYTE *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 784)) & 1) == 0)
  {
    v41 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v41)
    {
      *(_QWORD *)(v0 + 792) = v41;
      *(_QWORD *)(v0 + 800) = *(_QWORD *)(v41 + 16);
      swift_retain();
      v42 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 808) = v42;
      *v42 = v0;
      v42[1] = Conversation.execute(from:);
      return FlowAgent.prepare()(*(_QWORD *)(v0 + 664));
    }
    goto LABEL_2;
  }
LABEL_6:
  *(_QWORD *)(v0 + 1088) = 0;
  v13 = *(_QWORD *)(v0 + 704);
  v14 = *(_QWORD *)(v0 + 376);
  v15 = v14 + *(_QWORD *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v15, v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v16 = v14 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  v17 = MEMORY[0x1B5E44848](v16);
  *(_QWORD *)(v0 + 1096) = v17;
  if (v17)
  {
    v18 = *(_QWORD *)(v16 + 8);
    ObjectType = swift_getObjectType();
    v51 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v18 + 16) + *(_QWORD *)(v18 + 16));
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1104) = v20;
    *v20 = v0;
    v20[1] = Conversation.execute(from:);
    return v51(ObjectType, v18);
  }
  else
  {
    v22 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v22)
    {
      v23 = v22;
      swift_retain_n();
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v52 = swift_slowAlloc();
        v53 = v52;
        *(_DWORD *)v26 = 136315394;
        *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v26 + 12) = 2080;
        v27 = type metadata accessor for Siri_Nlu_External_Task();
        v28 = swift_bridgeObjectRetain();
        v29 = MEMORY[0x1B5E434D4](v28, v27);
        v31 = v30;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v24, v25, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v52, -1, -1);
        MEMORY[0x1B5E44758](v26, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v38 = *(_QWORD **)(v0 + 360);
      v39 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      v40 = MEMORY[0x1E0DEE9D8];
      *v38 = v39;
      v38[1] = v40;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v32 = v0 + 344;
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc();
        v36 = swift_slowAlloc();
        v53 = v36;
        *(_DWORD *)v35 = 136315394;
        *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v35 + 12) = 2080;
        swift_beginAccess();
        v50 = v36;
        if (*(_QWORD *)v32)
        {
          v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          v37 = MEMORY[0x1E0DEE9D8];
        }
        v43 = type metadata accessor for Siri_Nlu_External_Task();
        v44 = MEMORY[0x1B5E434D4](v37, v43);
        v46 = v45;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v33, v34, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v50, -1, -1);
        MEMORY[0x1B5E44758](v35, -1, -1);

      }
      else
      {

      }
      swift_beginAccess();
      v47 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)v32)
      {
        v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        v48 = MEMORY[0x1E0DEE9D8];
      }
      v49 = *(_QWORD **)(v0 + 360);
      swift_release();
      *v49 = v47;
      v49[1] = v48;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 800);
  FlowAgent.complete()();
  *(_QWORD *)(v0 + 1016) = *(_QWORD *)(v1 + 112);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[99];
  v0[128] = dispatch thunk of AnyFlow.siriEnvironment.getter();
  v2 = (_QWORD *)swift_task_alloc();
  v0[129] = v2;
  *v2 = v0;
  v2[1] = Conversation.execute(from:);
  v3 = v0[47];
  v2[14] = v1;
  v2[15] = v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD, uint64_t);
  int v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD, _QWORD);
  void (*v57)(uint64_t, _QWORD, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_QWORD *)(v0 + 1040);
  v2 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 496);
  swift_release();
  *(_QWORD *)(v0 + 344) = v1;
  ExecuteResponse.nextPluginAction.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 448);
    v6 = *(_QWORD *)(v0 + 456);
    v7 = *(_QWORD *)(v0 + 440);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 496), &demangling cache variable for type metadata for PluginAction?);
    ExecuteResponse.unhandledReason.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
    {
      v8 = *(_QWORD *)(v0 + 1024);
      v9 = *(_QWORD *)(v0 + 800);
      v10 = (uint64_t *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 728));
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 440), &demangling cache variable for type metadata for FlowUnhandledReason?);
      v11 = *v10;
      v12 = v10[1];
      *(_QWORD *)(v0 + 1048) = v12;
      swift_bridgeObjectRetain();
      v13 = ExecuteResponse.next.getter();
      *(_QWORD *)(v0 + 1056) = v13;
      v14 = *(_QWORD *)(v9 + 152);
      *(_QWORD *)(v0 + 1064) = v14;
      swift_bridgeObjectRetain();
      swift_retain();
      v15 = ExecuteResponse.onChildFlowCompletion.getter();
      *(_QWORD *)(v0 + 1072) = v15;
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1080) = v16;
      *v16 = v0;
      v16[1] = Conversation.execute(from:);
      return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v11, v12, 0, v13, v14, v8, v15);
    }
    v26 = *(_QWORD *)(v0 + 480);
    v27 = *(_QWORD *)(v0 + 488);
    v28 = *(_QWORD *)(v0 + 448);
    v29 = *(_QWORD *)(v0 + 456);
    v30 = *(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 32);
    v30(v27, *(_QWORD *)(v0 + 440), v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v26, v27, v28);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 88))(v26, v28);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    if (v31 == *MEMORY[0x1E0D9B0B0])
    {
      v57 = v30;
      v71 = *(_QWORD *)(v0 + 640);
      v73 = *(_QWORD *)(v0 + 664);
      v60 = *(_QWORD *)(v0 + 592);
      v61 = *(_QWORD *)(v0 + 584);
      v62 = *(_QWORD *)(v0 + 600);
      v64 = *(_QWORD *)(v0 + 408);
      v66 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
      v33 = *(_QWORD *)(v0 + 392);
      v68 = *(_QWORD *)(v0 + 400);
      v34 = *(_QWORD *)(v0 + 376);
      v35 = (uint64_t *)(v34 + *(_QWORD *)(v0 + 728));
      v56 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8);
      v56(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 448));
      SiriEnvironment.currentRequest.getter();
      v36 = CurrentRequest.executionRequestId.getter();
      v38 = v37;
      swift_release();
      if (v38)
        v39 = v36;
      else
        v39 = 0;
      v59 = v39;
      if (!v38)
        v38 = 0xE000000000000000;
      SiriEnvironment.currentRequest.getter();
      v58 = CurrentRequest.rootRequestId.getter();
      v41 = v40;
      swift_release();
      v42 = (_QWORD *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
      v44 = *(_QWORD *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils + 24);
      v43 = *(_QWORD *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils + 32);
      __swift_project_boxed_opaque_existential_1(v42, v44);
      v45 = *v35;
      v46 = v35[1];
      v47 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 40);
      swift_bridgeObjectRetain();
      v47(v59, v38, v58, v41, v45, v46, v44, v43);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
      v66(v73, v71);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v33, 1, v68) != 1)
      {
        v53 = *(_QWORD *)(v0 + 424);
        v54 = *(_QWORD *)(v0 + 392);
        v55 = *(_QWORD *)(v0 + 360);
        v56(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));
        outlined init with take of StringKeyedValue(v54, v53, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
        outlined init with take of StringKeyedValue(v53, v55, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
        goto LABEL_16;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 392), &demangling cache variable for type metadata for ConversationCommitResult?);
      v30 = v57;
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 664);
      v69 = *(_QWORD *)(v0 + 640);
      v48 = *(_QWORD *)(v0 + 600);
      v49 = *(_QWORD *)(v0 + 592);
      v50 = *(_QWORD *)(v0 + 584);
      v74 = *(_QWORD *)(v0 + 480);
      v52 = *(_QWORD *)(v0 + 448);
      v51 = *(_QWORD *)(v0 + 456);
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      v32(v72, v69);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v74, v52);
    }
    v30(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));
  }
  else
  {
    v70 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    v65 = *(_QWORD *)(v0 + 640);
    v67 = *(_QWORD *)(v0 + 664);
    v18 = *(_QWORD *)(v0 + 600);
    v19 = *(_QWORD *)(v0 + 592);
    v20 = *(_QWORD *)(v0 + 584);
    v21 = *(_QWORD *)(v0 + 520);
    v22 = *(_QWORD *)(v0 + 504);
    v23 = *(_QWORD *)(v0 + 512);
    v63 = *(_QWORD *)(v0 + 496);
    v24 = *(_QWORD *)(v0 + 360);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    v70(v67, v65);
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
    v25(v21, v63, v22);
    v25(v24, v21, v22);
  }
  swift_storeEnumTagMultiPayload();
LABEL_16:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;

  swift_release();
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = ExecuteResponse.requireInput.getter();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  if ((v7 & 1) != 0)
  {
LABEL_2:
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of Conversation.State(v8, v9);
    swift_endAccess();
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(v0 + 696);
  v11 = *(_QWORD *)(v0 + 688);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 776), v10, type metadata accessor for Conversation.State);
  outlined init with copy of ConversationHelperInput(v10, v11, type metadata accessor for Conversation.State);
  v12 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of CamOutput(v11, type metadata accessor for Conversation.State);
  outlined destroy of CamOutput(v10, type metadata accessor for Conversation.State);
  if (v12 == 2
    && (static Task<>.isCancelled.getter() & 1) == 0
    && (*(_BYTE *)(*(_QWORD *)(v0 + 376) + *(_QWORD *)(v0 + 784)) & 1) == 0)
  {
    v41 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v41)
    {
      *(_QWORD *)(v0 + 792) = v41;
      *(_QWORD *)(v0 + 800) = *(_QWORD *)(v41 + 16);
      swift_retain();
      v42 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 808) = v42;
      *v42 = v0;
      v42[1] = Conversation.execute(from:);
      return FlowAgent.prepare()(*(_QWORD *)(v0 + 664));
    }
    goto LABEL_2;
  }
LABEL_6:
  *(_QWORD *)(v0 + 1088) = 0;
  v13 = *(_QWORD *)(v0 + 704);
  v14 = *(_QWORD *)(v0 + 376);
  v15 = v14 + *(_QWORD *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v15, v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v16 = v14 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  v17 = MEMORY[0x1B5E44848](v16);
  *(_QWORD *)(v0 + 1096) = v17;
  if (v17)
  {
    v18 = *(_QWORD *)(v16 + 8);
    ObjectType = swift_getObjectType();
    v51 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v18 + 16) + *(_QWORD *)(v18 + 16));
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1104) = v20;
    *v20 = v0;
    v20[1] = Conversation.execute(from:);
    return v51(ObjectType, v18);
  }
  else
  {
    v22 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
    if (v22)
    {
      v23 = v22;
      swift_retain_n();
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v52 = swift_slowAlloc();
        v53 = v52;
        *(_DWORD *)v26 = 136315394;
        *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v26 + 12) = 2080;
        v27 = type metadata accessor for Siri_Nlu_External_Task();
        v28 = swift_bridgeObjectRetain();
        v29 = MEMORY[0x1B5E434D4](v28, v27);
        v31 = v30;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v24, v25, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v52, -1, -1);
        MEMORY[0x1B5E44758](v26, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v38 = *(_QWORD **)(v0 + 360);
      v39 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      v40 = MEMORY[0x1E0DEE9D8];
      *v38 = v39;
      v38[1] = v40;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v32 = v0 + 344;
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc();
        v36 = swift_slowAlloc();
        v53 = v36;
        *(_DWORD *)v35 = 136315394;
        *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v35 + 12) = 2080;
        swift_beginAccess();
        v50 = v36;
        if (*(_QWORD *)v32)
        {
          v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          v37 = MEMORY[0x1E0DEE9D8];
        }
        v43 = type metadata accessor for Siri_Nlu_External_Task();
        v44 = MEMORY[0x1B5E434D4](v37, v43);
        v46 = v45;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v33, v34, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v50, -1, -1);
        MEMORY[0x1B5E44758](v35, -1, -1);

      }
      else
      {

      }
      swift_beginAccess();
      v47 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)v32)
      {
        v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        v48 = MEMORY[0x1E0DEE9D8];
      }
      v49 = *(_QWORD **)(v0 + 360);
      swift_release();
      *v49 = v47;
      v49[1] = v48;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 744) + 216))();
  if (v1)
  {
    v2 = v1;
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v29 = v28;
      *(_DWORD *)v5 = 136315394;
      *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      v6 = type metadata accessor for Siri_Nlu_External_Task();
      v7 = swift_bridgeObjectRetain();
      v8 = MEMORY[0x1B5E434D4](v7, v6);
      v10 = v9;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v28, -1, -1);
      MEMORY[0x1B5E44758](v5, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v16 = *(_QWORD **)(v0 + 360);
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 152);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    v18 = MEMORY[0x1E0DEE9D8];
    *v16 = v17;
    v16[1] = v18;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v11 = v0 + 344;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v29 = v27;
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      swift_beginAccess();
      if (*(_QWORD *)v11)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        v15 = MEMORY[0x1E0DEE9D8];
      }
      v19 = type metadata accessor for Siri_Nlu_External_Task();
      v20 = MEMORY[0x1B5E434D4](v15, v19);
      v22 = v21;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v12, v13, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v27, -1, -1);
      MEMORY[0x1B5E44758](v14, -1, -1);

    }
    else
    {

    }
    swift_beginAccess();
    v23 = MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)v11)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 16) + 152);
      swift_bridgeObjectRetain();
    }
    else
    {
      v24 = MEMORY[0x1E0DEE9D8];
    }
    v25 = *(_QWORD **)(v0 + 360);
    swift_release();
    *v25 = v23;
    v25[1] = v24;
    swift_storeEnumTagMultiPayload();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 640);
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Conversation.execute(from:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 896) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1040) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

BOOL Conversation.State.shouldContinueExecuting.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BOOL8 v4;
  uint64_t v6;

  v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  v4 = (swift_getEnumCaseMultiPayload() & 0xFFFFFFFE) == 2;
  outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for Conversation.State);
  return v4;
}

uint64_t Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[11] = a7;
  v8[12] = v7;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  v8[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  _QWORD *v24;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
    goto LABEL_28;
  swift_retain();
  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 80);
    if (v2)
    {
      v3 = *(_QWORD *)(v0 + 88);
      if (!v3)
        goto LABEL_13;
      goto LABEL_8;
    }
    if (*(_QWORD *)(v0 + 56))
    {
      swift_retain();
      v2 = dispatch thunk of AnyFlow.siriEnvironment.getter();
      swift_release();
      v3 = *(_QWORD *)(v0 + 88);
      if (v3)
      {
LABEL_8:
        if (v2)
        {
          v4 = swift_allocObject();
          *(_QWORD *)(v4 + 16) = v2;
          *(_QWORD *)(v4 + 24) = v3;
          type metadata accessor for AnyChildCompletion();
          swift_allocObject();
          swift_retain();
          swift_retain();
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
          v3 = AnyChildCompletion.init<A>(_:)();
          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }
    else
    {
      v3 = *(_QWORD *)(v0 + 88);
      if (v3)
      {
LABEL_11:
        swift_retain();
        swift_retain();
        v2 = 0;
        goto LABEL_14;
      }
      v2 = 0;
    }
LABEL_13:
    swift_retain();
    v3 = 0;
LABEL_14:
    *(_QWORD *)(v0 + 112) = v2;
    *(_QWORD *)(v0 + 120) = v3;
    v6 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    v7 = type metadata accessor for SiriRequest(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
    Conversation.createEnvironment(parentEnvironment:siriRequest:flowTask:)(v2, v5, 0);
    outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for SiriRequest?);
    dispatch thunk of AnyFlow.siriEnvironment.setter();
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper);
    OS_dispatch_semaphore.wait()();
    closure #1 in JetsamHelper.ensureJetsamTransaction()(v8);
    OS_dispatch_semaphore.signal()();
    v9 = (void *)SiriEnvironment.currentProcess.getter();
    v10 = (void *)dispatch thunk of CurrentProcess.idleTracker.getter();

    if (v10)
    {
      v11 = dispatch thunk of IdleTracker.track(name:)();

    }
    else
    {
      v11 = 0;
    }
    v12 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(*(_QWORD *)(v0 + 96) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = v11;
    swift_release();
    v13 = *(_QWORD *)(v0 + 72);
    if (v12)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16) + 152);
      swift_bridgeObjectRetain();
      if (!v13)
      {
        swift_bridgeObjectRetain();
LABEL_22:
        v15 = v14;
LABEL_23:
        *(_QWORD *)(v0 + 128) = v15;
        v16 = *(_QWORD *)(v0 + 96);
        v26 = *(_QWORD *)(v0 + 56);
        v17 = *(_QWORD *)(v16 + 112);
        v18 = *(void **)(v16 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo);
        type metadata accessor for FlowAgent();
        swift_allocObject();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v28 = FlowAgent.init(flow:tasks:pluginInfo:completion:)(v1, v15, (uint64_t)v18, v3);
        (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)v17 + 208))(&v28, v26);
        swift_release();
        swift_release();
        v19 = specialized static Array<A>.== infix(_:_:)(v15, v14);
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {
          v20 = *(_QWORD *)(v0 + 96) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
          swift_beginAccess();
          v21 = MEMORY[0x1B5E44848](v20);
          *(_QWORD *)(v0 + 136) = v21;
          if (v21)
          {
            v22 = *(_QWORD *)(v20 + 8);
            ObjectType = swift_getObjectType();
            v27 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v22 + 24)
                                                                                    + *(_QWORD *)(v22 + 24));
            v24 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 144) = v24;
            *v24 = v0;
            v24[1] = Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:);
            return v27(v15, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), ObjectType, v22);
          }
        }
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
    }
    else
    {
      v14 = MEMORY[0x1E0DEE9D8];
      if (!v13)
        goto LABEL_22;
    }
    v15 = v13;
    goto LABEL_23;
  }
LABEL_27:
  swift_release();
LABEL_28:
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)()
{
  type metadata accessor for SiriEnvironment();
  return static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
}

uint64_t Conversation.removeNode(node:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = v1;
  return swift_task_switch();
}

uint64_t Conversation.removeNode(node:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v33)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL v34;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 112);
  v2 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 216);
  v3 = v2();
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    swift_retain();
    swift_release();
    v5 = *(_QWORD *)(v4 + 152);
    swift_bridgeObjectRetain();
    swift_release();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(v0 + 128) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 240))(*(_QWORD *)(v0 + 112));
  flushProcessWideSiriEnvironmentCache()();
  v6 = v2();
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v0 + 136) = v7;
    swift_retain();
    swift_release();
    v8 = swift_bridgeObjectRetain();
    v9 = specialized static Array<A>.== infix(_:_:)(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      v10 = *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
      swift_beginAccess();
      v11 = MEMORY[0x1B5E44848](v10);
      *(_QWORD *)(v0 + 144) = v11;
      if (v11)
      {
        v12 = *(_QWORD *)(v0 + 120);
        v13 = *(_QWORD *)(v10 + 8);
        ObjectType = swift_getObjectType();
        v15 = *(_QWORD *)(v7 + 152);
        *(_QWORD *)(v0 + 152) = v15;
        v16 = (uint64_t *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
        swift_beginAccess();
        v17 = *v16;
        v18 = v16[1];
        *(_QWORD *)(v0 + 160) = v18;
        v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v13 + 24)
                                                                                  + *(_QWORD *)(v13 + 24));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v19 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 168) = v19;
        *v19 = v0;
        v19[1] = Conversation.removeNode(node:);
        return v32(v15, v17, v18, ObjectType, v13);
      }
    }
    goto LABEL_8;
  }
  v21 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (!v21
    || (v22 = *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver,
        swift_beginAccess(),
        v23 = MEMORY[0x1B5E44848](v22),
        (*(_QWORD *)(v0 + 176) = v23) == 0))
  {
    v31 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper);
    OS_dispatch_semaphore.wait()();
    closure #1 in JetsamHelper.releaseJetsamTransaction()(v31, &v34);
    OS_dispatch_semaphore.signal()();
    *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
LABEL_8:
    swift_release();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
  }
  v24 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v22 + 8);
  v26 = swift_getObjectType();
  v27 = (uint64_t *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  v28 = *v27;
  v29 = v27[1];
  *(_QWORD *)(v0 + 184) = v29;
  v33 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v25 + 24) + *(_QWORD *)(v25 + 24));
  swift_bridgeObjectRetain();
  v30 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v30;
  *v30 = v0;
  v30[1] = Conversation.removeNode(node:);
  return v33(MEMORY[0x1E0DEE9D8], v28, v29, v26, v25);
}

{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  BOOL v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.releaseJetsamTransaction()(v1, &v3);
  OS_dispatch_semaphore.signal()();
  *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t Conversation.createEnvironment(parentEnvironment:siriRequest:flowTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  os_log_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v94 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v88 = (char *)&v80 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  MEMORY[0x1E0C80A78](v11);
  v89 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date();
  v91 = *(_QWORD *)(v13 - 8);
  v92 = v13;
  MEMORY[0x1E0C80A78](v13);
  v93 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  MEMORY[0x1E0C80A78](v15);
  v87 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ResponseMode();
  v86 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for SiriRequest(0);
  v23 = *(_QWORD *)(v95 - 8);
  v24 = MEMORY[0x1E0C80A78](v95);
  v26 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v80 - v28;
  MEMORY[0x1E0C80A78](v27);
  v90 = (uint64_t)&v80 - v30;
  if (a1)
  {
    v31 = a1;
  }
  else
  {
    v31 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rootEnvironment);
    swift_retain();
  }
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v32((char *)a2, 1, v95) != 1 || v94)
  {
    v84 = v9;
    type metadata accessor for SiriEnvironment();
    swift_allocObject();
    swift_retain();
    swift_retain();
    v85 = v31;
    v33 = SiriEnvironment.init(parent:)();
    outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v22, &demangling cache variable for type metadata for SiriRequest?);
    v34 = v95;
    if (v32(v22, 1, v95) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, &demangling cache variable for type metadata for SiriRequest?);
      v35 = v94;
      if (v94)
      {
LABEL_9:
        type metadata accessor for FlowTaskProvider();
        (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v93, v35 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v92);
        swift_retain();
        swift_bridgeObjectRetain();
        dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)();
        v31 = v33;
        SiriEnvironment.flowTask.setter();
        swift_release();
        swift_release();
        return v31;
      }
    }
    else
    {
      v36 = (uint64_t)v22;
      v37 = v90;
      outlined init with take of StringKeyedValue(v36, v90, type metadata accessor for SiriRequest);
      if (one-time initialization token for executor != -1)
        swift_once();
      v38 = type metadata accessor for Logger();
      v39 = __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
      outlined init with copy of ConversationHelperInput(v37, (uint64_t)v29, type metadata accessor for SiriRequest);
      outlined init with copy of ConversationHelperInput(v37, (uint64_t)v26, type metadata accessor for SiriRequest);
      swift_retain_n();
      v40 = Logger.logObject.getter();
      v41 = static os_log_type_t.debug.getter();
      v42 = v41;
      if (os_log_type_enabled(v40, v41))
      {
        v43 = swift_slowAlloc();
        v83 = v39;
        v44 = v43;
        v82 = swift_slowAlloc();
        v97 = v82;
        *(_DWORD *)v44 = 136315650;
        v81 = v42;
        v45 = ObjectIdentifier.debugDescription.getter();
        v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v97);
        v80 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2080;
        v47 = ObjectIdentifier.debugDescription.getter();
        v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of CamOutput((uint64_t)v29, type metadata accessor for SiriRequest);
        *(_WORD *)(v44 + 22) = 2080;
        CurrentRequest.responseMode.getter();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7DE8], MEMORY[0x1E0D9C7A0]);
        v49 = dispatch thunk of CustomStringConvertible.description.getter();
        v51 = v50;
        (*(void (**)(char *, uint64_t))(v86 + 8))(v19, v17);
        v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, &v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v37 = v90;
        swift_bridgeObjectRelease();
        outlined destroy of CamOutput((uint64_t)v26, type metadata accessor for SiriRequest);
        v52 = v80;
        _os_log_impl(&dword_1B4BE6000, v80, (os_log_type_t)v81, "Setting environment %s currentRequest to %s with responseMode %s", (uint8_t *)v44, 0x20u);
        v53 = v82;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v53, -1, -1);
        MEMORY[0x1B5E44758](v44, -1, -1);

      }
      else
      {
        swift_release_n();
        outlined destroy of CamOutput((uint64_t)v29, type metadata accessor for SiriRequest);
        outlined destroy of CamOutput((uint64_t)v26, type metadata accessor for SiriRequest);

      }
      v35 = v94;
      v54 = (uint64_t)v88;
      swift_retain();
      SiriEnvironment.currentRequest.setter();
      v55 = (uint64_t)v89;
      if (v35)
      {
        swift_retain();
        v56 = Logger.logObject.getter();
        v57 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc();
          v59 = v33;
          v60 = swift_slowAlloc();
          v97 = v60;
          *(_DWORD *)v58 = 136315138;
          v61 = *(_QWORD *)(v35 + 16);
          v62 = *(_QWORD *)(v35 + 24);
          swift_bridgeObjectRetain();
          v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v97);
          v37 = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v54 = (uint64_t)v88;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v56, v57, "Setting flowTaskMetadata.id to %s", v58, 0xCu);
          swift_arrayDestroy();
          v63 = v60;
          v33 = v59;
          MEMORY[0x1B5E44758](v63, -1, -1);
          MEMORY[0x1B5E44758](v58, -1, -1);
        }

        SiriEnvironment.currentRequest.getter();
        (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v93, v35 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v92);
        swift_bridgeObjectRetain();
        v64 = v87;
        FlowTaskMetadata.init(id:isClientInitiated:creationTime:)();
        v65 = type metadata accessor for FlowTaskMetadata();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 0, 1, v65);
        CurrentRequest.flowTaskMetadata.setter();
        swift_release();
        swift_release();
        v34 = v95;
        v55 = (uint64_t)v89;
      }
      else
      {
        v66 = Logger.logObject.getter();
        v67 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v68 = 0;
          _os_log_impl(&dword_1B4BE6000, v66, v67, "Not setting flowTaskMetadata.id", v68, 2u);
          MEMORY[0x1B5E44758](v68, -1, -1);
        }

      }
      SiriEnvironment.userIdentity.getter();
      v69 = v37 + *(int *)(v34 + 36);
      outlined init with copy of ReferenceResolutionClientProtocol?(v69, v54, &demangling cache variable for type metadata for SiriRequestIdentities?);
      v70 = type metadata accessor for SiriRequestIdentities(0);
      v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48);
      if (v71(v54, 1, v70) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for SiriRequestIdentities?);
        v72 = type metadata accessor for IdentifiedUser();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v55, 1, 1, v72);
      }
      else
      {
        outlined init with copy of ReferenceResolutionClientProtocol?(v54, v55, &demangling cache variable for type metadata for IdentifiedUser?);
        outlined destroy of CamOutput(v54, type metadata accessor for SiriRequestIdentities);
      }
      dispatch thunk of UserIdentityProvider.identityForCurrentRequest.setter();
      swift_release();
      SiriEnvironment.userIdentity.getter();
      v73 = v69;
      v74 = (uint64_t)v84;
      outlined init with copy of ReferenceResolutionClientProtocol?(v73, (uint64_t)v84, &demangling cache variable for type metadata for SiriRequestIdentities?);
      if (v71(v74, 1, v70) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for SiriRequestIdentities?);
      }
      else
      {
        swift_bridgeObjectRetain();
        outlined destroy of CamOutput(v74, type metadata accessor for SiriRequestIdentities);
      }
      v75 = v95;
      dispatch thunk of UserIdentityProvider.knownHomeMembers.setter();
      swift_release();
      v76 = v37 + *(int *)(v75 + 28);
      v77 = *(_QWORD *)(v76 + 8);
      if (v77 >> 60 != 15)
      {
        v78 = *(_QWORD *)v76;
        outlined copy of Data._Representation(*(_QWORD *)v76, *(_QWORD *)(v76 + 8));
        SiriEnvironment.scopedReferenceResolutionData.getter();
        outlined copy of Data._Representation(v78, v77);
        dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter();
        swift_release();
        outlined consume of Data?(v78, v77);
      }
      if (*(_QWORD *)(v37 + *(int *)(v75 + 32)))
      {
        swift_retain();
        SiriEnvironment.currentTCU.setter();
      }
      outlined destroy of CamOutput(v37, type metadata accessor for SiriRequest);
      if (v35)
        goto LABEL_9;
    }
    swift_release();
    return v33;
  }
  swift_retain();
  return v31;
}

uint64_t Conversation.updateFlowEnvironment(flowAgent:request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  v3[11] = swift_task_alloc();
  v4 = type metadata accessor for Date();
  v3[12] = v4;
  v3[13] = *(_QWORD *)(v4 - 8);
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v3[17] = swift_task_alloc();
  v5 = type metadata accessor for ResponseMode();
  v3[18] = v5;
  v3[19] = *(_QWORD *)(v5 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = type metadata accessor for SiriRequest(0);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Conversation.updateFlowEnvironment(flowAgent:request:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  NSObject *log;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v0[25] = dispatch thunk of AnyFlow.siriEnvironment.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = v0[22];
  v1 = v0[23];
  v3 = v0[9];
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  outlined init with copy of ConversationHelperInput(v3, v1, type metadata accessor for SiriRequest);
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for SiriRequest);
  swift_retain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v9 = v0[22];
  v8 = v0[23];
  if (v7)
  {
    log = v5;
    v10 = v0[20];
    v37 = v0[19];
    v35 = v0[18];
    v11 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    v39 = v38;
    *(_DWORD *)v11 = 136315650;
    v12 = ObjectIdentifier.debugDescription.getter();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v11 + 12) = 2080;
    v14 = ObjectIdentifier.debugDescription.getter();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v8, type metadata accessor for SiriRequest);
    *(_WORD *)(v11 + 22) = 2080;
    v16 = v9;
    CurrentRequest.responseMode.getter();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7DE8], MEMORY[0x1E0D9C7A0]);
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v10, v35);
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v16, type metadata accessor for SiriRequest);
    v5 = log;
    _os_log_impl(&dword_1B4BE6000, log, v6, "Setting environment %s currentRequest to %s with responseMode %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v38, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }
  else
  {
    swift_release_n();
    outlined destroy of CamOutput(v8, type metadata accessor for SiriRequest);
    outlined destroy of CamOutput(v9, type metadata accessor for SiriRequest);
  }

  v20 = v0[21];
  v21 = v0[16];
  v22 = v0[9];
  swift_retain();
  SiriEnvironment.currentRequest.setter();
  SiriEnvironment.userIdentity.getter();
  v23 = v22 + *(int *)(v20 + 36);
  outlined init with copy of ReferenceResolutionClientProtocol?(v23, v21, &demangling cache variable for type metadata for SiriRequestIdentities?);
  v24 = type metadata accessor for SiriRequestIdentities(0);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48);
  v26 = v25(v21, 1, v24);
  v28 = v0[16];
  v27 = v0[17];
  if (v26 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[16], &demangling cache variable for type metadata for SiriRequestIdentities?);
    v29 = type metadata accessor for IdentifiedUser();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 1, 1, v29);
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v0[16], v0[17], &demangling cache variable for type metadata for IdentifiedUser?);
    outlined destroy of CamOutput(v28, type metadata accessor for SiriRequestIdentities);
  }
  v30 = v0[15];
  dispatch thunk of UserIdentityProvider.identityForCurrentRequest.setter();
  swift_release();
  SiriEnvironment.userIdentity.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v23, v30, &demangling cache variable for type metadata for SiriRequestIdentities?);
  v31 = v25(v30, 1, v24);
  v32 = v0[15];
  if (v31 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[15], &demangling cache variable for type metadata for SiriRequestIdentities?);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of CamOutput(v32, type metadata accessor for SiriRequestIdentities);
  }
  v33 = v0[10];
  dispatch thunk of UserIdentityProvider.knownHomeMembers.setter();
  swift_release();
  v0[26] = *(_QWORD *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskService);
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 208);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 32);
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_8;
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x1B5E43B94](0, v2);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = swift_retain();
LABEL_6:
    *(_QWORD *)(v0 + 216) = v5;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 72);
  SiriEnvironment.scopedReferenceResolutionData.getter();
  outlined copy of Data?(*(_QWORD *)(v2 + *(int *)(v1 + 28)), *(_QWORD *)(v2 + *(int *)(v1 + 28) + 8));
  dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 88);
  type metadata accessor for FlowTaskProvider();
  v5 = v1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v3, v1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)();
  SiriEnvironment.flowTask.setter();
  SiriEnvironment.currentRequest.getter();
  v6(v3, v5, v4);
  swift_bridgeObjectRetain();
  FlowTaskMetadata.init(id:isClientInitiated:creationTime:)();
  v7 = type metadata accessor for FlowTaskMetadata();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v11, 0, 1, v7);
  CurrentRequest.flowTaskMetadata.setter();
  swift_release();
  swift_release_n();
  v8 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 72);
  SiriEnvironment.scopedReferenceResolutionData.getter();
  outlined copy of Data?(*(_QWORD *)(v9 + *(int *)(v8 + 28)), *(_QWORD *)(v9 + *(int *)(v8 + 28) + 8));
  dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Conversation.attemptCorrectionsOn(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t Conversation.attemptCorrectionsOn(request:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3) & 1) == 0)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = Conversation.correctionsFlow.getter();
  v6 = *(void **)(v4 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo);
  type metadata accessor for FlowAgent();
  swift_allocObject();
  v7 = v6;
  v8 = FlowAgent.init(flow:tasks:pluginInfo:completion:)(v5, MEMORY[0x1E0DEE9D8], (uint64_t)v7, 0);
  *(_QWORD *)(v0 + 32) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v9;
  *v9 = v0;
  v9[1] = Conversation.attemptCorrectionsOn(request:);
  return Conversation.updateFlowEnvironment(flowAgent:request:)(v8, *(_QWORD *)(v0 + 16));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v6 = *v0;
  swift_task_dealloc();
  v3 = v2 + *(int *)(type metadata accessor for SiriRequest(0) + 20);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v4;
  *v4 = v6;
  v4[1] = Conversation.attemptCorrectionsOn(request:);
  return FlowAgent.on(input:)(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (*(_BYTE *)(v0 + 56) != 1)
  {
    swift_release();
    v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t Conversation.attemptCorrectionsOn(request:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t Conversation.State.assertNotCancelled(function:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int EnumCaseMultiPayload;
  uint64_t result;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for Conversation.State);
  if (EnumCaseMultiPayload == 5)
  {
    v11[0] = 0;
    v11[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    strcpy((char *)v11, "Cannot call ");
    BYTE5(v11[1]) = 0;
    HIWORD(v11[1]) = -5120;
    v6._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x80000001B4EF8330;
    v7._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v7);
    v8 = v11[0];
    v9 = v11[1];
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
    swift_allocError();
    *v10 = v8;
    v10[1] = v9;
    return swift_willThrow();
  }
  return result;
}

uint64_t Conversation.deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of CamOutput(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state, type metadata accessor for Conversation.State);
  swift_bridgeObjectRelease();

  outlined destroy of weak ConversationTaskObservationDelegate?(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t Conversation.__deallocating_deinit()
{
  Conversation.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t Conversation.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance Conversation()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Conversational.cancel() in conformance Conversation()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t protocol witness for Conversational.ensureReady(timeout:) in conformance Conversation(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return Conversation.ensureReady(timeout:)(a1);
}

uint64_t protocol witness for Conversational.accept(request:) in conformance Conversation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return Conversation.accept(request:)(a1, a2);
}

uint64_t protocol witness for Conversational.paraphrase() in conformance Conversation(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return Conversation.paraphrase()(a1);
}

uint64_t protocol witness for Conversational.prepare() in conformance Conversation()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return Conversation.prepare()();
}

uint64_t protocol witness for Conversational.commit() in conformance Conversation(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return Conversation.commit()(a1);
}

uint64_t protocol witness for Conversational.isEmpty() in conformance Conversation()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v0 + 16) + 112) + 184))();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
}

uint64_t protocol witness for Conversational.isCorrectable() in conformance Conversation()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v4 & 1);
}

uint64_t protocol witness for Conversational.flexibleExecutionSupport() in conformance Conversation(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return Conversation.flexibleExecutionSupport()(a1);
}

uint64_t SiriRequest.requestId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriRequest.input.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SiriRequest(0) + 20);
  v4 = type metadata accessor for Input();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SiriRequest.environmentData.getter()
{
  type metadata accessor for SiriRequest(0);
  return swift_retain();
}

uint64_t SiriRequest.scopedRRData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SiriRequest(0) + 28);
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t SiriRequest.currentTCUProvider.getter()
{
  type metadata accessor for SiriRequest(0);
  return swift_retain();
}

uint64_t SiriRequest.identities.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SiriRequest(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 36), a1, &demangling cache variable for type metadata for SiriRequestIdentities?);
}

uint64_t SiriRequest.init(requestId:input:environmentData:scopedRRData:currentTCUProvider:identities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  *a9 = a1;
  a9[1] = a2;
  v16 = (int *)type metadata accessor for SiriRequest(0);
  v17 = (char *)a9 + v16[5];
  v18 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a3, v18);
  *(_QWORD *)((char *)a9 + v16[6]) = a4;
  result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a8, (uint64_t)a9 + v16[9], &demangling cache variable for type metadata for SiriRequestIdentities?);
  v20 = (_QWORD *)((char *)a9 + v16[7]);
  *v20 = a5;
  v20[1] = a6;
  *(_QWORD *)((char *)a9 + v16[8]) = a7;
  return result;
}

uint64_t SiriRequestIdentities.proposedIdentity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1, a1, &demangling cache variable for type metadata for IdentifiedUser?);
}

uint64_t SiriRequestIdentities.otherHomeMembers.getter()
{
  type metadata accessor for SiriRequestIdentities(0);
  return swift_bridgeObjectRetain();
}

uint64_t SiriRequestIdentities.init(proposedIdentity:otherHomeMembers:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a1, a3, &demangling cache variable for type metadata for IdentifiedUser?);
  result = type metadata accessor for SiriRequestIdentities(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Siri_Nlu_External_Task();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v22 = *(_QWORD *)(v8 + 72);
      v23 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F0D0]);
        v17 = dispatch thunk of static Equatable.== infix(_:_:)();
        v18 = *(void (**)(char *, uint64_t))(v23 + 8);
        v18(v7, v4);
        v18(v10, v4);
        v20 = v14-- != 0;
        if ((v17 & 1) == 0)
          break;
        v12 += v22;
        a2 = v16;
        a1 = v15;
      }
      while (v20);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

