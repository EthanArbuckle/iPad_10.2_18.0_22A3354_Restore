uint64_t protocol witness for Bridge.name.getter in conformance ConversationBridgeSPI()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

id protocol witness for QueueIsolatedBridge.queue.getter in conformance ConversationBridgeSPI()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t protocol witness for Bridge.handleMessage(_:) in conformance ConversationBridgeSPI()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t ConversationBridgeSPI.handleMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, unint64_t, void *, uint64_t);
  id v17;
  unint64_t v19;
  unint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 16);
  v19 = 0;
  v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v19 = 0xD000000000000014;
  v20 = 0x80000001B4EF8860;
  swift_getObjectType();
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x80000001B4EF8880;
  v11._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v11);
  MessageBase.messageId.getter();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, v5, MEMORY[0x1E0CB09F0]);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  v13 = v19;
  v14 = v20;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v2;
  *(_QWORD *)(v15 + 24) = a1;
  v16 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(*(_QWORD *)v9 + 208);
  swift_retain();
  v17 = a1;
  v16(v13, v14, &async function pointer to partial apply for closure #1 in ConversationBridgeSPI.handleMessage(_:), v15);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1B5E44650]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in ConversationBridgeSPI.handleMessage(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationBridgeSPI.handleMessage(_:)(v2, v3);
}

uint64_t closure #1 in ConversationBridgeSPI.handleMessage(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationBridgeSPI.handleMessage(_:)()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v0 + 40) + 24) + 256))(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void ConversationRequestAwareBridgeBase.handleMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t ObjectType;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(void);
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;

  v2 = v1;
  v4 = (_QWORD *)type metadata accessor for UUID();
  v5 = *(v4 - 1);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RequestMessageBase();
  v8 = swift_dynamicCastClass();
  v9 = (void *)v8;
  if (!v8)
  {
LABEL_21:
    ConversationMessageDispatchingBridgeBase.handleMessage(_:)(a1);

    return;
  }
  v83 = v4;
  v10 = (void *)v8;
  v11 = *(_QWORD *)((char *)v2
                  + direct field offset for ConversationRequestAwareBridgeBase.requestMessagesHandledByBridgeBase);
  v12 = (os_unfair_lock_s *)(v11 + 24);
  v13 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  v14 = *(_QWORD *)(v11 + 16);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = (_QWORD *)(v14 + 32);
    ObjectType = swift_getObjectType();
    while (*v16 != ObjectType)
    {
      ++v16;
      if (!--v15)
        goto LABEL_6;
    }
    os_unfair_lock_unlock(v12);

    v27 = v13;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v85 = v31;
      *(_DWORD *)v30 = 136315138;
      v83 = v30 + 4;
      v9 = v10;
      swift_getObjectType();
      v32 = _typeName(_:qualified:)();
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v28, v29, "RequestAware bridge handling request-scoped message %s outside of a request", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v31, -1, -1);
      MEMORY[0x1B5E44758](v30, -1, -1);

    }
    else
    {

      v9 = v10;
    }
    goto LABEL_21;
  }
LABEL_6:
  os_unfair_lock_unlock(v12);

  if ((*((_BYTE *)v2 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) & 1) == 0)
  {
    swift_retain_n();
    v83 = v13;
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v85 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = v2[2];
      v26 = v2[3];
      swift_bridgeObjectRetain();
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v21, v22, "Bridge: %s did not register any start request message so not handling any RequestMessageBase messages", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v24, -1, -1);
      MEMORY[0x1B5E44758](v23, -1, -1);

      return;
    }
    swift_release_n();

    goto LABEL_24;
  }
  swift_getObjectType();
  v18 = swift_conformsToProtocol2();
  if (v18)
    v19 = v18;
  else
    v19 = 0;
  if (v18)
    v20 = v13;
  else
    v20 = 0;
  if (v20)
  {
    v83 = v13;
    ConversationRequestAwareBridgeBase.handleStartRequestInternal(_:)(v20, v19);
LABEL_24:

    return;
  }
  type metadata accessor for EndRequestMessageBase();
  v34 = swift_dynamicCastClass();
  if (v34)
  {
    v35 = (void *)v34;
    v83 = v13;
    ConversationRequestAwareBridgeBase.handleEndRequestInternal(_:)(v35);
    goto LABEL_24;
  }
  v36 = specialized static CandidateRequestMessage.from(_:)(v10);
  if ((~v36 & 0xF000000000000007) != 0)
  {
    v44 = v36;
    v45 = v13;
    ConversationRequestAwareBridgeBase.handleCandidateRequestMessageInternal(_:)(v44);

    outlined consume of CandidateRequestMessage?(v44);
    return;
  }
  v37 = *(uint64_t (**)(void))(*v2 + 376);
  v82 = v13;
  v38 = v37();
  if (!v38)
  {
    RequestMessageBase.requestId.getter();
    goto LABEL_33;
  }
  v40 = *(_QWORD *)(v38 + 64);
  v39 = *(_QWORD *)(v38 + 72);
  swift_bridgeObjectRetain();
  swift_release();
  v41 = RequestMessageBase.requestId.getter();
  if (!v39)
  {
LABEL_33:
    v43 = swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  if (v40 == v41 && v39 == v42)
  {
    v43 = swift_bridgeObjectRelease_n();
    goto LABEL_41;
  }
  v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v43 = swift_bridgeObjectRelease();
  if ((v63 & 1) != 0)
  {
LABEL_41:
    v64 = ((uint64_t (*)(uint64_t))v37)(v43);
    if (v64)
    {
      (*(void (**)(void *, uint64_t))(*v2 + 496))(v10, v64);
      swift_release();
    }
    goto LABEL_49;
  }
LABEL_34:
  if ((*((_BYTE *)v2
        + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) & 1) != 0
    || (v46 = ((uint64_t (*)(uint64_t))v37)(v43), swift_release(), v46))
  {
    v47 = v82;
    swift_retain_n();
    v82 = v47;
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      LODWORD(v81) = v49;
      v50 = swift_slowAlloc();
      v80 = swift_slowAlloc();
      v85 = v80;
      *(_DWORD *)v50 = 136315906;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v51 = v83;
      v52 = dispatch thunk of CustomStringConvertible.description.getter();
      v79 = v37;
      v54 = v53;
      (*(void (**)(char *, id))(v5 + 8))(v7, v51);
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2080;
      swift_getObjectType();
      v55 = _typeName(_:qualified:)();
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 22) = 2080;
      v57 = RequestMessageBase.requestId.getter();
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v59 = swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 32) = 2080;
      v60 = ((uint64_t (*)(uint64_t))v79)(v59);
      if (v60)
      {
        v62 = *(_QWORD *)(v60 + 64);
        v61 = *(_QWORD *)(v60 + 72);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        v61 = 0xE700000000000000;
        v62 = 0x74657320746F4ELL;
      }
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v61, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v48, (os_log_type_t)v81, "Receiving message id: %s of type: %s for request Id: %s but current request id: %s", (uint8_t *)v50, 0x2Au);
      v77 = v80;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v77, -1, -1);
      MEMORY[0x1B5E44758](v50, -1, -1);

      goto LABEL_49;
    }
    swift_release_n();

    goto LABEL_48;
  }
  v82 = v82;
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v65, v66))
  {

LABEL_48:
    goto LABEL_49;
  }
  v67 = swift_slowAlloc();
  v81 = swift_slowAlloc();
  v85 = v81;
  *(_DWORD *)v67 = 136315650;
  MessageBase.messageId.getter();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v68 = v83;
  v69 = dispatch thunk of CustomStringConvertible.description.getter();
  v71 = v70;
  (*(void (**)(char *, id))(v5 + 8))(v7, v68);
  v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, &v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v67 + 12) = 2080;
  swift_getObjectType();
  v72 = _typeName(_:qualified:)();
  v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v67 + 22) = 2080;
  v74 = RequestMessageBase.requestId.getter();
  v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B4BE6000, v65, v66, "Receiving message id: %s of type: %s for request Id: %s but current request id not set", (uint8_t *)v67, 0x20u);
  v76 = v81;
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v76, -1, -1);
  MEMORY[0x1B5E44758](v67, -1, -1);

LABEL_49:
}

uint64_t ConversationRequestAwareBridgeBase.currentRequestProcessor.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ConversationRequestAwareBridgeBase.candidateRequestProcessors.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ConversationBridge.rraasClient.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v6, a3, a2);
}

uint64_t ConversationBridge.rraasClient.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.rraasClient, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?, a1);
}

uint64_t outlined init with copy of ReferenceResolutionClientProtocol?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ReferenceResolutionClientProtocol(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t ConversationBridge.correctionsPlatformClient.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.correctionsPlatformClient, (uint64_t *)&demangling cache variable for type metadata for CorrectionsHandling?, a1);
}

uint64_t ConversationBridge.networkAvailabilityProvider.getter()
{
  return ConversationBridge.runSiriKitExecutorProcessor.getter();
}

uint64_t ConversationBridge.currentSessionId.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?, a1);
}

uint64_t outlined destroy of ReferenceResolutionClientProtocol?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ConversationBridge.sessionUserId.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.sessionUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?, a1);
}

uint64_t ConversationBridge.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?, a1);
}

uint64_t ConversationBridge.isMUXEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for ConversationBridge.isMUXEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t outlined init with copy of ReferenceResolutionClientProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ConversationBridge.executionClient.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  v3 = v1 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v3, (uint64_t)&v5, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  if (v6)
    return outlined init with take of ReferenceResolutionClientProtocol(&v5, (uint64_t)a1);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v5, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  closure #1 in ConversationBridge.executionClient.getter(v1, a1);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)&v5);
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)&v5, v3, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  return swift_endAccess();
}

uint64_t ConversationBridge.isFirstRequestInSession.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for ConversationBridge.isFirstRequestInSession);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationBridge.coreTelephonyServiceProvider.getter()
{
  return ConversationBridge.runSiriKitExecutorProcessor.getter();
}

void *ConversationBridge.muxContextMessage.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + direct field offset for ConversationBridge.muxContextMessage);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

uint64_t type metadata accessor for ServerFallbackCapableRequestProcessor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ServerFallbackCapableRequestProcessor;
  if (!type metadata singleton initialization cache for ServerFallbackCapableRequestProcessor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for ConcurrentTaskPool()
{
  return objc_opt_self();
}

uint64_t RecentDialogTracker.setCurrentRequest(withRequestId:sessionId:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t, uint64_t);
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE v49[12];
  int v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  void (*v54)(uint64_t, uint64_t);
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[4];

  v63 = a3;
  v58 = a1;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v59);
  v61 = &v49[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v57 = &v49[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v6);
  v56 = &v49[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = &v49[-v11];
  MEMORY[0x1E0C80A78](v10);
  v14 = &v49[-v13];
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v53 = &v49[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17);
  v20 = &v49[-v19];
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16);
  v22(v20, v63, v15);
  swift_bridgeObjectRetain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  v25 = v24;
  v26 = os_log_type_enabled(v23, v24);
  v55 = v12;
  v60 = v22;
  if (v26)
  {
    v27 = swift_slowAlloc();
    v51 = swift_slowAlloc();
    v65[0] = v51;
    *(_DWORD *)v27 = 136315394;
    swift_bridgeObjectRetain();
    v50 = v25;
    v28 = v58;
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, a2, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2080;
    v52 = v14;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v29 = dispatch thunk of CustomStringConvertible.description.getter();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v65);
    v22 = v60;
    v14 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v54 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v54((uint64_t)v20, v15);
    _os_log_impl(&dword_1B4BE6000, v23, (os_log_type_t)v50, "RecentDialogTracker: new request %s, session %s", (uint8_t *)v27, 0x16u);
    v31 = v51;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v31, -1, -1);
    MEMORY[0x1B5E44758](v27, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();
    v54 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v54((uint64_t)v20, v15);

    v28 = v58;
  }
  v32 = v62;
  v33 = (uint64_t *)(v62 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId);
  *v33 = v28;
  v33[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestHasTrackedDialogs) = 0;
  v34 = v32 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentSessionId;
  swift_beginAccess();
  v22(v14, v63, v15);
  v35 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v35(v14, 0, 1, v15);
  v36 = v61;
  v37 = (uint64_t)&v61[*(int *)(v59 + 48)];
  outlined init with copy of UUID?(v34, (uint64_t)v61);
  outlined init with copy of UUID?((uint64_t)v14, v37);
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v38((uint64_t)v36, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v38(v37, 1, v15) == 1)
      return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    v40 = (uint64_t)v14;
    v41 = (uint64_t)v55;
    outlined init with copy of UUID?((uint64_t)v36, (uint64_t)v55);
    if (v38(v37, 1, v15) != 1)
    {
      v42 = v35;
      v43 = v53;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 32))(v53, v37, v15);
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v44 = dispatch thunk of static Equatable.== infix(_:_:)();
      v45 = v54;
      v54((uint64_t)v43, v15);
      outlined destroy of ReferenceResolutionClientProtocol?(v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v45(v41, v15);
      v35 = v42;
      result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v22 = v60;
      if ((v44 & 1) != 0)
        return result;
      goto LABEL_13;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v54(v41, v15);
    v22 = v60;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_13:
  RecentDialogTracker.clearRecentDialogs()();
  v46 = v56;
  v22(v56, v63, v15);
  v35(v46, 0, 1, v15);
  v47 = (uint64_t)v46;
  v48 = v57;
  outlined init with take of UUID?(v47, (uint64_t)v57);
  swift_beginAccess();
  outlined assign with take of UUID?((uint64_t)v48, v34);
  return swift_endAccess();
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DeviceContextHelper()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ConversationBridgeProcessorDelegate()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MultiUserContextUpdater()
{
  return objc_opt_self();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t (*ConversationRequestAwareBridgeBase.candidateRequestProcessors.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestAwareBridgeBase.currentRequestProcessor.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + direct field offset for ConversationRequestAwareBridgeBase.currentRequestProcessor);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t ConversationRequestAwareBridgeBase.postMessage(_:to:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  uint64_t v44;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (char *)v3 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  swift_retain_n();
  v11 = a1;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  v14 = os_log_type_enabled(v12, v13);
  v41 = v7;
  v42 = v6;
  v40 = v9;
  if (v14)
  {
    v15 = swift_slowAlloc();
    v38 = v10;
    v16 = v15;
    v17 = (_QWORD *)swift_slowAlloc();
    v37 = swift_slowAlloc();
    v44 = v37;
    *(_DWORD *)v16 = 136315394;
    v39 = a2;
    v18 = v3[2];
    v19 = v3[3];
    swift_bridgeObjectRetain();
    ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2112;
    ObjectType = (uint64_t)v11;
    v20 = v11;
    a2 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v11;

    _os_log_impl(&dword_1B4BE6000, v12, v13, "Bridge \"%s\" received message: %@", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    v21 = v37;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v16, -1, -1);
  }
  else
  {

    swift_release_n();
  }

  v22 = (*(uint64_t (**)(id))(*v3 + 264))(v11);
  if (((*(uint64_t (**)(void))(*(_QWORD *)v22 + 104))() & 1) != 0)
  {
    v23 = v11;
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      v27 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v44 = v39;
      *(_DWORD *)v27 = 136315394;
      LODWORD(v38) = v26;
      ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestMessageBase.Type);
      v28 = String.init<A>(describing:)();
      ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      v30 = v40;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v31 = v42;
      v32 = dispatch thunk of CustomStringConvertible.description.getter();
      v34 = v33;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v31);
      ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v24, (os_log_type_t)v38, "handleMessage got message type %s with message id: %s that is not register in the bridge", (uint8_t *)v27, 0x16u);
      v35 = v39;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }
    else
    {

    }
  }
  else
  {
    (*(void (**)(uint64_t, id))(*(_QWORD *)v22 + 88))(a2, v11);
  }
  return swift_release();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t ConversationMessageDispatchingBridgeBase.getHandleMethod(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *);
  void (*v20)(_QWORD *, _QWORD);
  _QWORD v22[3];
  _QWORD v23[4];
  uint64_t v24;

  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageBase.Type);
  v7 = String.init<A>(describing:)();
  v9 = v8;
  v10 = *(uint64_t (**)(uint64_t))(*v1 + 152);
  v11 = swift_bridgeObjectRetain();
  v12 = v10(v11);
  v23[0] = v7;
  v23[1] = v9;
  v15 = type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(0, *(_QWORD *)(v3 + 80), v13, v14);
  MEMORY[0x1B5E4327C](&v24, v23, v12, MEMORY[0x1E0DEA968], v15, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v24;
  if (v24)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v23[3] = type metadata accessor for MessageBase();
    v23[0] = a1;
    v17 = a1;
    Mirror.init(reflecting:)();
    v18 = type metadata accessor for Mirror();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 0, 1, v18);
    v16 = ConversationMessageDispatchingBridgeBase.findRegisterMethod(_:)((uint64_t)v6);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Mirror?);
    swift_release();
    v22[1] = v9;
    v22[2] = v16;
    v22[0] = v7;
    v19 = *(uint64_t (**)(_QWORD *))(*v1 + 168);
    swift_retain();
    v20 = (void (*)(_QWORD *, _QWORD))v19(v23);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v20(v23, 0);
  }
  return v16;
}

uint64_t ConversationMessageDispatchingBridgeBase.methodDispatcher.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1B5E445C0](a1, v6, a5);
}

Swift::Bool __swiftcall ConversationMessageDispatchingBridgeBase.MessageHandler.isBase()()
{
  return 0;
}

void ConversationMessageDispatchingBridgeBase.MessageHandler.handleMethod(_:_:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  id v13;
  void (*v14)(uint64_t);
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  swift_unknownObjectRetain();
  if (swift_dynamicCast())
  {
    v9 = v40;
    v10 = swift_dynamicCastClass();
    if (v10)
    {
      v11 = v10;
      v12 = *(uint64_t (**)(uint64_t))(v2 + 16);
      v13 = a2;
      v14 = (void (*)(uint64_t))v12(v9);
      v14(v11);
      swift_unknownObjectRelease();

      swift_release();
    }
    else
    {
      v23 = a2;
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      v26 = v25;
      if (os_log_type_enabled(v24, v25))
      {
        v27 = swift_slowAlloc();
        v39 = swift_slowAlloc();
        v41 = v39;
        *(_DWORD *)v27 = 136315650;
        v38 = v26;
        v37 = v24;
        MessageBase.messageId.getter();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v28 = dispatch thunk of CustomStringConvertible.description.getter();
        v30 = v29;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2080;
        swift_getObjectType();
        v31 = _typeName(_:qualified:)();
        v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 22) = 2080;
        v33 = _typeName(_:qualified:)();
        v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v24 = v37;
        _os_log_impl(&dword_1B4BE6000, v37, (os_log_type_t)v38, "Input message %s of type %s is not of type %s", (uint8_t *)v27, 0x20u);
        v35 = v39;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v35, -1, -1);
        MEMORY[0x1B5E44758](v27, -1, -1);
      }
      else
      {

      }
      swift_unknownObjectRelease();
    }
  }
  else
  {
    swift_unknownObjectRetain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v41 = v18;
      *(_DWORD *)v17 = 136315394;
      swift_getObjectType();
      v19 = _typeName(_:qualified:)();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      v21 = _typeName(_:qualified:)();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v15, v16, "Handler invoking object is of type %s and not of type %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v18, -1, -1);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

  }
}

uint64_t ConversationRequestProcessor.handleStartTextRequestMessage(_:)(void *a1, unsigned int *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v21;
  int v22;

  v22 = a3;
  v5 = type metadata accessor for InputOrigin();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RequestType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *a2, v9);
  v13 = a1;
  v14 = RequestMessageBase.requestId.getter();
  v16 = v15;
  v17 = v13;
  StartRequestMessageBase.inputOrigin.getter();

  type metadata accessor for ConversationRequestProcessorTurnState();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v12, v9);
  v19 = (uint64_t *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v19 = v14;
  v19[1] = v16;
  *(_BYTE *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v8, v5);
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v17, v18, v22, v21);
  return swift_release();
}

uint64_t ConversationRequestProcessor.handleStartTextRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartTextRequestMessage(_:)(a1, MEMORY[0x1E0D9E888], 0);
}

uint64_t type metadata accessor for ConversationRequestProcessorTurnState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationRequestProcessorTurnState;
  if (!type metadata singleton initialization cache for ConversationRequestProcessorTurnState)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ConversationRequestProcessor.state.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  outlined copy of ConversationRequestProcessor.State(*(_QWORD *)v1, *(void **)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

id outlined copy of ConversationRequestProcessor.State(uint64_t a1, void *a2, char a3)
{
  id result;

  switch(a3)
  {
    case 2:
      swift_retain();
      return a2;
    case 1:
      swift_retain();
      return (id)swift_bridgeObjectRetain();
    case 0:
      return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void outlined consume of ConversationRequestProcessor.State(uint64_t a1, void *a2, char a3)
{
  switch(a3)
  {
    case 2:
      swift_release();

      return;
    case 1:
      swift_release();
      goto LABEL_7;
    case 0:
LABEL_7:
      swift_bridgeObjectRelease();
      break;
  }
}

void ConversationRequestProcessor.state.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;

  v7 = v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  swift_beginAccess();
  v8 = *(_QWORD *)v7;
  v9 = *(void **)(v7 + 8);
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  v10 = *(_BYTE *)(v7 + 16);
  *(_BYTE *)(v7 + 16) = a3;
  outlined consume of ConversationRequestProcessor.State(v8, v9, v10);
}

uint64_t type metadata accessor for StartExecutionTurn()
{
  return objc_opt_self();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendStartExecutionTurn(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t ConversationRuntimeClient.sendStartExecutionTurn(_:withBridgeDelegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, void *, uint64_t);

  v8 = v3[3];
  v7 = v3[4];
  v9 = v3[5];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = a1;
  swift_unknownObjectRetain();
  v12 = StaticString.description.getter();
  v14 = v13;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:);
  *(_QWORD *)(v15 + 24) = v10;
  *(_QWORD *)(v15 + 32) = "bridge(didReceiveStartExecutionTurn:from:)";
  *(_QWORD *)(v15 + 40) = 42;
  *(_BYTE *)(v15 + 48) = 2;
  v16 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 208);
  swift_retain();
  v16(v12, v14, &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:), v15);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t protocol witness for ContextUpdating.updateServerContext() in conformance MultiUserContextUpdater()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

Swift::Void __swiftcall MultiUserContextUpdater.updateServerContext()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1B4BE6000, v4, v5, "Applying server context through shared ContextUpdater", v6, 2u);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }

  v7 = type metadata accessor for UserID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  v8 = MultiUserContextUpdater.contextUpdater(forUserId:)((uint64_t)v2);
  v9 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 472))(v9);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1B4BE6000, v10, v11, "Applied server context", v12, 2u);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }

    swift_release();
  }
  else
  {
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "Could not find shared contextUpdater instance", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

  }
}

uint64_t MultiUserContextUpdater.contextUpdater(forUserId:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint8_t *v45;
  uint8_t *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD, _QWORD);

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v45 - v8;
  v10 = type metadata accessor for UserID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v45 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v45 - v18;
  outlined init with copy of UserID?(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1B4BE6000, v21, v22, "Returning shared ContextUpdater instance since userId passed is nil", v23, 2u);
      MEMORY[0x1B5E44758](v23, -1, -1);
    }

    v24 = (*(uint64_t (**)(void))(*v2 + 208))();
    if (!v24)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v10);
      v24 = MultiUserContextUpdater.addContextUpdater(forUserId:)((uint64_t)v7);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v9, v10);
    if ((specialized Set.contains(_:)((uint64_t)v19, v2[30]) & 1) != 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
      v48 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      v48(v17, v19, v10);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        v47 = swift_slowAlloc();
        v50 = (void (*)(_QWORD, _QWORD, _QWORD))v47;
        v46 = v28;
        *(_DWORD *)v28 = 136315138;
        v45 = v28 + 4;
        lazy protocol witness table accessor for type UserID and conformance UserID();
        v29 = dispatch thunk of CustomStringConvertible.description.getter();
        v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)&v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v31 = *(void (**)(char *, uint64_t))(v11 + 8);
        v31(v17, v10);
        v32 = v46;
        _os_log_impl(&dword_1B4BE6000, v26, v27, "Returning a ContextUpdater instance for userId: %s", v46, 0xCu);
        v33 = v47;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v33, -1, -1);
        MEMORY[0x1B5E44758](v32, -1, -1);
      }
      else
      {
        v31 = *(void (**)(char *, uint64_t))(v11 + 8);
        v31(v17, v10);
      }

      v41 = (*(uint64_t (**)(void))(*v2 + 184))();
      if (*(_QWORD *)(v41 + 16) && (v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19), (v43 & 1) != 0))
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v42);
        swift_retain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v48(v7, v19, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
        v24 = MultiUserContextUpdater.addContextUpdater(forUserId:)((uint64_t)v7);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      }
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationBridge);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v19, v10);
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        v48 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
        v50 = (void (*)(_QWORD, _QWORD, _QWORD))v48;
        *(_DWORD *)v37 = 136315138;
        lazy protocol witness table accessor for type UserID and conformance UserID();
        v38 = dispatch thunk of CustomStringConvertible.description.getter();
        v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v31 = *(void (**)(char *, uint64_t))(v11 + 8);
        v31(v14, v10);
        _os_log_impl(&dword_1B4BE6000, v35, v36, "Current userId: %s does not exist in known userSet", v37, 0xCu);
        v40 = v48;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v40, -1, -1);
        MEMORY[0x1B5E44758](v37, -1, -1);
      }
      else
      {
        v31 = *(void (**)(char *, uint64_t))(v11 + 8);
        v31(v14, v10);
      }

      v24 = 0;
    }
    v31(v19, v10);
  }
  return v24;
}

uint64_t MultiUserContextUpdater.sharedContextUpdater.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t MultiUserContextUpdater.addContextUpdater(forUserId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t *);
  void (*v35)(uint64_t *, _QWORD);
  uint64_t *v36;
  uint64_t *v37;
  char isUniquelyReferenced_nonNull_native;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49[4];

  v2 = v1;
  v4 = type metadata accessor for UserID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v47 = (char *)&v41 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v41 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v41 - v16;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
  outlined init with copy of UserID?(a1, (uint64_t)v17);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v45 = v4;
    v21 = swift_slowAlloc();
    v44 = v5;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc();
    v42 = a1;
    v24 = v23;
    v49[0] = v23;
    v43 = v2;
    *(_DWORD *)v22 = 136315138;
    outlined init with copy of UserID?((uint64_t)v17, (uint64_t)v15);
    v25 = String.init<A>(describing:)();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v49);
    v4 = v45;
    v2 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    _os_log_impl(&dword_1B4BE6000, v19, v20, "Creating ContextUpdater for userId: %s", v22, 0xCu);
    swift_arrayDestroy();
    v27 = v24;
    a1 = v42;
    MEMORY[0x1B5E44758](v27, -1, -1);
    v28 = v22;
    v5 = v44;
    MEMORY[0x1B5E44758](v28, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  }

  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 328))(a1);
  outlined init with copy of UserID?(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    v30 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 216);
    v31 = swift_retain();
    v30(v31);
  }
  else
  {
    v32 = v47;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v47, v12, v4);
    v33 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v46, v32, v4);
    v34 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 200);
    swift_retain();
    v35 = (void (*)(uint64_t *, _QWORD))v34(v49);
    v37 = v36;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v48 = *v37;
    *v37 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v33, isUniquelyReferenced_nonNull_native);
    *v37 = v48;
    swift_bridgeObjectRelease();
    v39 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v39(v33, v4);
    v35(v49, 0);
    v39((uint64_t)v32, v4);
  }
  return v29;
}

_QWORD *MultiUserContextUpdater.makeContextUpdater(userId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[40];
  _BYTE v17[40];
  _BYTE v18[40];
  _BYTE v19[48];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 2), (uint64_t)v19);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 7), (uint64_t)v18);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 12), (uint64_t)v17);
  v7 = v1[17];
  v6 = v1[18];
  v8 = v1[19];
  v9 = v1[20];
  v10 = v1[21];
  v11 = v1[22];
  v12 = v1[23];
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 24), (uint64_t)v16);
  v13 = v1[29];
  outlined init with copy of UserID?(a1, (uint64_t)v5);
  type metadata accessor for ContextUpdater();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return ContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)((uint64_t)v19, (uint64_t)v18, (uint64_t)v17, v7, v6, v8, v9, v10, v11, v12, (uint64_t)v16, v13, (uint64_t)v5);
}

uint64_t type metadata accessor for ContextUpdater()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ContextUpdater;
  if (!type metadata singleton initialization cache for ContextUpdater)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for SessionStateContextKeysManager()
{
  return objc_opt_self();
}

uint64_t outlined assign with copy of UserID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UserID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MultiUserContextUpdater.sharedContextUpdater.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 264) = a1;
  return swift_release();
}

Swift::Void __swiftcall ContextUpdater.updateServerContext()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  void (*v23)(char *, uint64_t);
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 aBlock;
  __int128 v63;
  void (*v64)(uint64_t, void *);
  uint64_t v65;
  id v66;

  v1 = v0;
  v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v59);
  v58 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID();
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  MEMORY[0x1E0C80A78](v3);
  v55 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ConversationSessionKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v61 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v60 = v9;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v54 = v5;
    v14 = v13;
    *(_QWORD *)&aBlock = v13;
    *(_DWORD *)v12 = 136315394;
    v16 = v1[20];
    v15 = v1[21];
    swift_bridgeObjectRetain();
    v66 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v17 = v1[22];
    v18 = v1[23];
    swift_bridgeObjectRetain();
    v66 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "Updating server context for requestID: %s using rootRequestID: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    v19 = v14;
    v5 = v54;
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {

    swift_release();
  }
  __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
  v20 = *MEMORY[0x1E0D9EDE8];
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22 = v61;
  v21(v61, v20, v5);
  dispatch thunk of ConversationSessionState.sharedValue(forKey:)();
  v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23(v22, v5);
  if (!*((_QWORD *)&v63 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_12:
    swift_retain_n();
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v35;
      *(_DWORD *)v34 = 136315394;
      (*(void (**)(void))(*v1 + 360))();
      v36 = String.init<A>(describing:)();
      v66 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      v38 = v1[20];
      v39 = v1[21];
      swift_bridgeObjectRetain();
      v66 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v32, v33, "NativeFlowContextUpdate is empty when userId: %s, requestID: %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      MEMORY[0x1B5E44758](v34, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_12;
  v24 = v66;
  objc_msgSend(v66, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (swift_dynamicCast())
  {
    v25 = v5;
    v26 = v66;
    v27 = objc_msgSend(v26, sel_aceId);
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v31 = v30;

    }
    else
    {
      v43 = v55;
      UUID.init()();
      v29 = UUID.uuidString.getter();
      v31 = v44;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v57);
    }
    v45 = (void *)MEMORY[0x1B5E432E8](v29, v31);
    swift_bridgeObjectRelease();
    objc_msgSend(v26, sel_setAceId_, v45);

    v46 = v1[22];
    v47 = v1[23];
    v48 = v26;
    v49 = (void *)MEMORY[0x1B5E432E8](v46, v47);
    objc_msgSend(v48, sel_setRefId_, v49);

    v50 = (void *)v1[17];
    v64 = closure #1 in ContextUpdater.updateServerContext();
    v65 = 0;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v63 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    *((_QWORD *)&v63 + 1) = &block_descriptor_1;
    v51 = _Block_copy(&aBlock);
    v52 = v48;
    objc_msgSend(v50, sel_handleCommand_completion_, v52, v51);
    _Block_release(v51);

    aBlock = 0u;
    v63 = 0u;
    v53 = v61;
    v21(v61, v20, v25);
    ContextUpdater.updateSessionState(withValue:forKey:)();

    v23(v53, v25);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  else
  {
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v41, "Could not copy NFCU. It is not safe to send it to server", v42, 2u);
      MEMORY[0x1B5E44758](v42, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v2 = *(int **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 48);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)(v2, v3, v4, v5, v6);
}

uint64_t type metadata accessor for OS_dispatch_queue(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  *(_BYTE *)(v5 + 72) = a5;
  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  v8 = (uint64_t (*)(void))((char *)a1 + *a1);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 56) = v6;
  *v6 = v5;
  v6[1] = closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:);
  return v8();
}

uint64_t closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:)(v2, v3, v4, v5);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  char *v8;

  v8 = &async function pointer to specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)[*(int *)async function pointer to specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return ((uint64_t (*)(uint64_t))v8)(a4);
}

uint64_t specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v6 = 134217984;
    swift_beginAccess();
    v7 = *(_QWORD *)(v5 + 104);
    if ((v7 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v8 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 16);
    }
    v0[11] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[ConversationService] Active Conversation Count: %ld", v6, 0xCu);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v9 = v0[13];
  swift_beginAccess();
  v10 = *(unsigned __int8 *)(v9 + 120);
  if (v10 >> 6)
  {
    v11 = v10 & 1;
    if (v10 >> 6 != 1)
      v11 = 0;
  }
  else
  {
    v11 = *(_BYTE *)(v9 + 112) & 1;
  }
  v12 = (void *)v0[12];
  v13 = *(void **)(v9 + 112);
  *(_QWORD *)(v9 + 112) = v12;
  *(_BYTE *)(v9 + 120) = v11 | 0x40;
  v14 = v12;
  outlined consume of ConversationService.State(v13, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
  v0[15] = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v15, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  swift_retain();
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  *v16 = v0;
  v16[1] = specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[12] = a1;
  v2[13] = v1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2[14] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ContextUpdater.updateSessionState(withValue:forKey:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UserID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*v0 + 360))(v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    return dispatch thunk of ConversationSessionState.updateSharedValue(_:forKey:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    dispatch thunk of ConversationSessionState.updateValue(_:forKey:userId:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t ContextUpdater.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

uint64_t outlined init with copy of UserID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void closure #1 in ContextUpdater.updateServerContext()(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  v4 = a2;
  v5 = a2;
  oslog = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    v9 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, oslog, v6, "Sent NativeFlowContextUpdate to server. Error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

  }
}

void Logger.debugF(file:function:)()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *log;
  uint64_t v8;

  v0 = static os_log_type_t.debug.getter();
  log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v0))
  {
    v1 = swift_slowAlloc();
    v2 = swift_slowAlloc();
    v8 = v2;
    *(_DWORD *)v1 = 136315394;
    v3 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 12) = 2080;
    v5 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, log, v0, "%s:%s", (uint8_t *)v1, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v2, -1, -1);
    MEMORY[0x1B5E44758](v1, -1, -1);

  }
  else
  {

  }
}

void outlined consume of ConversationService.State(id a1, unsigned __int8 a2)
{
  int v2;

  v2 = a2 >> 6;
  if (v2 == 2)
  {
    swift_release();
  }
  else if (v2 == 1)
  {

  }
}

uint64_t ConversationService.ActiveTurn.__deallocating_deinit()
{
  ConversationService.ActiveTurn.deinit();
  return swift_deallocClassInstance();
}

uint64_t ConversationService.ActiveTurn.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of CamOutput(v0 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData, type metadata accessor for RemoteConversationTurnData);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker);
  v1 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_conversationLoggingId;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t outlined destroy of CamOutput(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for CombiningAffinityScorer(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for RemoteConversationTurnData(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for RemoteConversationTurnData);
}

void destroy for RemoteConversationTurnData(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = a1 + a2[7];
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release();

  v7 = (uint64_t *)(a1 + a2[11]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    outlined consume of Data._Representation(*v7, v8);
}

uint64_t InvocationScopedSiriKitEventSender.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t SiriKitEventContext.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t AceServiceInvokerImpl.__deallocating_deinit()
{
  AceServiceInvokerImpl.deinit();
  return swift_deallocClassInstance();
}

uint64_t AceServiceInvokerImpl.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ServiceBridgeDelegateXPCWrapper.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t SubmissionTaskRegistry.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t destroy for ConversationService.EagerResult(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      v6 = type metadata accessor for ServerFallbackReason();
      v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v8 = a1;
      return v7(v8, v6);
    case 1:
      return swift_release();
    case 0:
      swift_release();
      swift_release();
      v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      v4 = type metadata accessor for Input();
      v5 = *(_QWORD *)(v4 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
      if (!(_DWORD)result)
      {
        v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
        v8 = v3;
        v6 = v4;
        return v7(v8, v6);
      }
      break;
  }
  return result;
}

uint64_t ConversationUserInput.__deallocating_deinit()
{
  ConversationUserInput.deinit();
  return swift_deallocClassInstance();
}

uint64_t ConversationUserInput.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();

  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);

  swift_release();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation;
  v2 = type metadata accessor for ExecutionLocation();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation, v2);
  return v0;
}

uint64_t NLResponse.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode;
  v2 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  return swift_deallocClassInstance();
}

uint64_t PommesInfo.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  return swift_deallocClassInstance();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v1 = *(_QWORD *)(v0 + 240);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    result = Set.Iterator.init(_cocoa:)();
    v2 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v7 = -1 << *(_BYTE *)(v2 + 32);
    v40 = v2 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(v2 + 56);
    result = swift_bridgeObjectRetain();
    v5 = 0;
  }
  v39 = (unint64_t)(v4 + 64) >> 6;
  v41 = v2;
  while (v2 < 0)
  {
    v14 = __CocoaSet.Iterator.next()();
    if (!v14)
      goto LABEL_37;
    *(_QWORD *)(v0 + 224) = v14;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = *(_QWORD *)(v0 + 216);
    swift_unknownObjectRelease();
    v13 = v5;
    v11 = v6;
    if (!v15)
      goto LABEL_37;
LABEL_30:
    v42 = v11;
    v20 = *(_QWORD *)(v0 + 256);
    v19 = *(_QWORD *)(v0 + 264);
    v21 = type metadata accessor for TaskPriority();
    v22 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v19, 1, 1, v21);
    v23 = (_QWORD *)swift_allocObject();
    v23[2] = 0;
    v24 = v23 + 2;
    v23[3] = 0;
    v23[4] = v15;
    outlined init with copy of ReferenceResolutionClientProtocol?(v19, v20, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
    swift_retain();
    v25 = *(_QWORD *)(v0 + 256);
    if ((_DWORD)v20 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 256), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
      if (*v24)
        goto LABEL_32;
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
      if (*v24)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v26 = dispatch thunk of Actor.unownedExecutor.getter();
        v28 = v27;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    v26 = 0;
    v28 = 0;
LABEL_35:
    v29 = **(_QWORD **)(v0 + 232);
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
    *(_QWORD *)(v30 + 24) = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
    v31 = v28 | v26;
    if (v28 | v26)
    {
      v31 = v0 + 56;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = 0;
      *(_QWORD *)(v0 + 72) = v26;
      *(_QWORD *)(v0 + 80) = v28;
    }
    v10 = *(_QWORD *)(v0 + 264);
    *(_QWORD *)(v0 + 136) = 1;
    *(_QWORD *)(v0 + 144) = v31;
    *(_QWORD *)(v0 + 152) = v29;
    swift_task_create();
    swift_release();
    swift_release();
    result = outlined destroy of ReferenceResolutionClientProtocol?(v10, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v5 = v13;
    v6 = v42;
    v2 = v41;
  }
  if (v6)
  {
    v11 = (v6 - 1) & v6;
    v12 = __clz(__rbit64(v6)) | (v5 << 6);
    v13 = v5;
    goto LABEL_29;
  }
  v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  if (v16 >= v39)
    goto LABEL_37;
  v17 = *(_QWORD *)(v40 + 8 * v16);
  v13 = v5 + 1;
  if (v17)
    goto LABEL_28;
  v13 = v5 + 2;
  if (v5 + 2 >= v39)
    goto LABEL_37;
  v17 = *(_QWORD *)(v40 + 8 * v13);
  if (v17)
    goto LABEL_28;
  v13 = v5 + 3;
  if (v5 + 3 >= v39)
    goto LABEL_37;
  v17 = *(_QWORD *)(v40 + 8 * v13);
  if (v17)
    goto LABEL_28;
  v13 = v5 + 4;
  if (v5 + 4 >= v39)
    goto LABEL_37;
  v17 = *(_QWORD *)(v40 + 8 * v13);
  if (v17)
  {
LABEL_28:
    v11 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12);
    swift_retain();
    if (!v15)
      goto LABEL_37;
    goto LABEL_30;
  }
  v18 = v5 + 5;
  while (v39 != v18)
  {
    v17 = *(_QWORD *)(v40 + 8 * v18++);
    if (v17)
    {
      v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  v32 = *(_QWORD *)(v0 + 240);
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_beginAccess();
  v34 = *(_QWORD *)(v32 + 280);
  if (v34)
  {
    v35 = *(_QWORD *)(v0 + 248);
    v36 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = 0;
    v37[3] = 0;
    v37[4] = v34;
    swift_retain();
    _sScG7addTask8priority9operationyScPSg_xyYaYAcntF14SiriKitRuntime24RemoteConversationClientCSg_Tg5(v35, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), (uint64_t)v37);
    outlined destroy of ReferenceResolutionClientProtocol?(v35, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  }
  *(_QWORD *)(v0 + 280) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v33, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  swift_retain();
  v38 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<RemoteConversationClient?>);
  *v38 = v0;
  v38[1] = closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return TaskGroup.next(isolation:)();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[29] = a2;
  v3[30] = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[34] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v10;

  v3 = *(_QWORD *)(v2 + 208);
  if (v3 == 1)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  if (v3)
  {
    swift_beginAccess();
    v5 = swift_retain();
    v6 = specialized Set._Variant.remove(_:)(v5);
    swift_endAccess();
    swift_release();
    if (v6 || (v8 = *(_QWORD *)(*(_QWORD *)(v2 + 240) + 280)) == 0)
    {
      outlined consume of RemoteConversationClient??(v3);
      outlined consume of RemoteConversationClient??(v3);
    }
    else
    {
      if (*(_QWORD *)(v3 + 112) == *(_QWORD *)(v8 + 112) && *(_QWORD *)(v3 + 120) == *(_QWORD *)(v8 + 120))
      {
        outlined consume of RemoteConversationClient??(v3);
        outlined consume of RemoteConversationClient??(v3);
LABEL_15:
        *(_QWORD *)(*(_QWORD *)(v2 + 240) + 280) = 0;
        swift_release();
        goto LABEL_6;
      }
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined consume of RemoteConversationClient??(v3);
      outlined consume of RemoteConversationClient??(v3);
      if ((v10 & 1) != 0)
        goto LABEL_15;
    }
  }
LABEL_6:
  *(_QWORD *)(v2 + 280) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 288) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<RemoteConversationClient?>);
  *v7 = v2;
  v7[1] = closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return TaskGroup.next(isolation:)();
}

uint64_t SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release();
  InterruptibleTaskResult.getOrNilIfInterrupted()(v1, v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  swift_unknownObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD, _QWORD, uint64_t);

  v1 = v0[9];
  v2 = *(_QWORD *)(v1 + 48);
  v0[14] = v2;
  v3 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    v4 = v0[7];
    v5 = v0[8];
    v6 = v0[6];
    v7 = (_QWORD *)swift_allocObject();
    v0[15] = v7;
    v7[2] = v5;
    v7[3] = v6;
    v7[4] = v4;
    v7[5] = v2;
    v7[6] = v3;
    swift_unknownObjectRetain_n();
    swift_retain();
    v8 = (_QWORD *)swift_task_alloc();
    v0[16] = v8;
    *v8 = v0;
    v8[1] = SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    return InterruptibleTaskManager.perform<A>(_:)(v0[12], (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:), (uint64_t)v7, v0[8]);
  }
  else
  {
    v11 = (uint64_t (*)(_QWORD, _QWORD, uint64_t))(*(int *)v0[6] + v0[6]);
    v10 = (_QWORD *)swift_task_alloc();
    v0[18] = v10;
    *v10 = v0;
    v10[1] = SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    return v11(v0[5], 0, v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v2, 0, 1, v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD, _QWORD, uint64_t);

  v1 = v0[9];
  v2 = *(_QWORD *)(v1 + 88);
  v0[14] = v2;
  v3 = *(_QWORD *)(v1 + 96);
  if (v2)
  {
    v4 = v0[7];
    v5 = v0[8];
    v6 = v0[6];
    v7 = (_QWORD *)swift_allocObject();
    v0[15] = v7;
    v7[2] = v5;
    v7[3] = v6;
    v7[4] = v4;
    v7[5] = v2;
    v7[6] = v3;
    swift_unknownObjectRetain_n();
    swift_retain();
    v8 = (_QWORD *)swift_task_alloc();
    v0[16] = v8;
    *v8 = v0;
    v8[1] = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    return InterruptibleTaskManager.perform<A>(_:)(v0[12], (uint64_t)&async function pointer to partial apply for closure #1 in FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:), (uint64_t)v7, v0[8]);
  }
  else
  {
    v11 = (uint64_t (*)(_QWORD, _QWORD, uint64_t))(*(int *)v0[6] + v0[6]);
    v10 = (_QWORD *)swift_task_alloc();
    v0[18] = v10;
    *v10 = v0;
    v10[1] = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    return v11(v0[5], 0, v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 40);
  swift_release();
  InterruptibleTaskResult.get()(v2, v3);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  swift_unknownObjectRelease();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 64) - 8) + 56))(*(_QWORD *)(v0 + 40), 0, 1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 64) - 8) + 56))(*(_QWORD *)(v0 + 40), 0, 1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = type metadata accessor for InterruptibleTaskResult(0, a4, a3, a4);
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[13] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t type metadata accessor for InterruptibleTaskResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InterruptibleTaskResult);
}

void InterruptibleTaskManager.perform<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  uint64_t v18;

  v1 = v0[15];
  v2 = *(_QWORD *)(v1 + 40);
  v0[18] = v2;
  if (v2 == -1)
  {
    __break(1u);
  }
  else
  {
    v3 = v0[16];
    v5 = v0[13];
    v4 = v0[14];
    v6 = v0[12];
    *(_QWORD *)(v1 + 40) = v2 + 1;
    v7 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
    v8 = static MessageBusActor.shared;
    v9 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v8;
    v10[3] = v9;
    v10[4] = v4;
    v10[5] = v1;
    v10[6] = v2;
    v10[7] = v6;
    v10[8] = v5;
    v13 = type metadata accessor for InterruptibleTaskResult(0, v4, v11, v12);
    swift_retain();
    swift_retain();
    swift_retain();
    v14 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v3, (uint64_t)&async function pointer to partial apply for closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v10, v13);
    v0[19] = v14;
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = v4;
    v15[3] = v1;
    v15[4] = v14;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #2 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v15, v2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v1 + 32) = v18;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v17 = (_QWORD *)swift_task_alloc();
    v0[20] = v17;
    *v17 = v0;
    v17[1] = InterruptibleTaskManager.perform<A>(_:);
    Task<>.value.getter();
  }
}

uint64_t InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_beginAccess();
  v1 = specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  swift_release();
  if (v1)
    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[14] = a4;
  v5[15] = v4;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v5[16] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[17] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v13;

  type metadata accessor for ManagedContinuation(0, a4, a3, a4);
  swift_allocObject();
  v9 = ManagedContinuation.().init()();
  v4[2] = v9;
  v10 = (_QWORD *)swift_task_alloc();
  v4[3] = v10;
  v10[2] = v9;
  v10[3] = a2;
  v10[4] = a3;
  v13 = (char *)&async function pointer to _unsafeInheritExecutor_withTaskCancellationHandler<A>(handler:operation:)
      + async function pointer to _unsafeInheritExecutor_withTaskCancellationHandler<A>(handler:operation:);
  v11 = (_QWORD *)swift_task_alloc();
  v4[4] = v11;
  *v11 = v4;
  v11[1] = withCancellableContinuation<A>(body:);
  return ((uint64_t (*)(uint64_t, uint64_t (*)(), uint64_t, void *, _QWORD *, uint64_t))v13)(a1, partial apply for closure #1 in withCancellableContinuation<A>(body:), v9, &async function pointer to partial apply for closure #2 in withCancellableContinuation<A>(body:), v10, a4);
}

uint64_t withCancellableContinuation<A>(body:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  return MEMORY[0x1E0DA8208]();
}

uint64_t type metadata accessor for ManagedContinuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedContinuation);
}

uint64_t ManagedContinuation.().init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v2 = type metadata accessor for CheckedContinuation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v4 = type metadata accessor for Result();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)) = v5;
  v6 = v5;
  v7 = (void *)MEMORY[0x1B5E432E8](0xD000000000000027, 0x80000001B4EF7540);
  objc_msgSend(v6, sel_setName_, v7);

  return v0;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1B5E4465C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)v6;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for Result();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v12 - v8);
  ManagedContinuation.setContinuation(_:)(a1);
  if ((static Task<>.isCancelled.getter() & 1) == 0)
    return a3(a2);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  v10 = swift_allocError();
  CancellationError.init()();
  *v9 = v10;
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ManagedContinuation.setContinuation(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v1 = type metadata accessor for Result();
  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - v4;
  v6 = type metadata accessor for CheckedContinuation();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v6);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v5, 1, 1, v1);
  ManagedContinuation.updateState(continuation:result:)((uint64_t)v10, (uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t ManagedContinuation.updateState(continuation:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  void (*v53)(_QWORD, _QWORD, _QWORD);
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, _QWORD);
  int v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  uint64_t *v58;
  void (*v59)(char *, char *, _QWORD);
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)();
  char *v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  char *v73;
  void (*v74)(unint64_t, char *, _QWORD);
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  unsigned int (*v91)(char *, uint64_t, uint64_t);
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  char *v103;
  void (*v104)(_QWORD, _QWORD, _QWORD);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v102 = a1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for CheckedContinuation();
  v7 = type metadata accessor for Optional();
  v106 = *(_QWORD *)(v7 - 8);
  v107 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v103 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v99 = (char *)&v81 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v100 = (char *)&v81 - v13;
  v14 = *(_QWORD *)(v6 - 8);
  v104 = (void (*)(_QWORD, _QWORD, _QWORD))v6;
  v105 = v14;
  v15 = MEMORY[0x1E0C80A78](v12);
  v88 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v98 = (char *)&v81 - v18;
  v87 = v19;
  MEMORY[0x1E0C80A78](v17);
  v90 = (char *)&v81 - v20;
  v89 = v5;
  v21 = type metadata accessor for Result();
  v22 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v94 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v83 = (char *)&v81 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v81 - v29;
  v31 = MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v81 - v32;
  v34 = *(_QWORD *)(v21 - 8);
  v35 = MEMORY[0x1E0C80A78](v31);
  v86 = (char *)&v81 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v35);
  v93 = (char *)&v81 - v38;
  v85 = v39;
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v81 - v40;
  objc_msgSend(*(id *)((char *)v2 + *(_QWORD *)(v4 + 104)), sel_lock);
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v42(v33, a2, v22);
  v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v44 = v43(v33, 1, v21);
  v97 = v34;
  v96 = v22;
  v92 = v42;
  v91 = v43;
  v101 = v2;
  if (v44 == 1)
  {
    v84 = *(void (**)(char *, uint64_t))(v23 + 8);
    v84(v33, v22);
  }
  else
  {
    v82 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v82(v41, v33, v21);
    v45 = (uint64_t)v2 + *(_QWORD *)(*v2 + 96);
    swift_beginAccess();
    v42(v30, v45, v22);
    v46 = v21;
    v47 = v43(v30, 1, v21);
    v84 = *(void (**)(char *, uint64_t))(v23 + 8);
    v84(v30, v22);
    if (v47 == 1)
    {
      v48 = v83;
      v82(v83, v41, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v48, 0, 1, v46);
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 40))(v45, v48, v22);
      swift_endAccess();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v46);
    }
    v21 = v46;
  }
  v49 = v100;
  v51 = v106;
  v50 = v107;
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 16);
  v52(v100, v102, v107);
  v53 = v104;
  v54 = v105;
  v55 = *(uint64_t (**)(char *, uint64_t, _QWORD))(v105 + 48);
  v56 = v55(v49, 1, v104);
  v95 = v21;
  if (v56 == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v50);
    v57 = v53;
    v58 = v101;
  }
  else
  {
    v59 = *(void (**)(char *, char *, _QWORD))(v54 + 32);
    v60 = v90;
    v59(v90, v49, v53);
    v61 = v99;
    v59(v99, v60, v53);
    (*(void (**)(char *, _QWORD, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))(v54 + 56))(v61, 0, 1, v53);
    v58 = v101;
    v62 = (uint64_t)v101 + *(_QWORD *)(*v101 + 88);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 40))(v62, v61, v50);
    swift_endAccess();
    v57 = v53;
  }
  v63 = (uint64_t)v58 + *(_QWORD *)(*v58 + 88);
  swift_beginAccess();
  v64 = v103;
  v52(v103, v63, v50);
  if (v55(v64, 1, v57) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v64, v50);
  }
  else
  {
    v65 = v98;
    v104 = *(void (**)(_QWORD, _QWORD, _QWORD))(v54 + 32);
    v104(v98, v64, v57);
    v66 = (uint64_t)v58 + *(_QWORD *)(*v58 + 96);
    swift_beginAccess();
    v67 = v94;
    v68 = v96;
    v92(v94, v66, v96);
    v69 = v95;
    if (v91(v67, 1, v95) != 1)
    {
      v103 = *(char **)(v97 + 32);
      ((void (*)(char *, char *, uint64_t))v103)(v93, v67, v69);
      v71 = v99;
      (*(void (**)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))(v54 + 56))(v99, 1, 1, v57);
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 40))(v63, v71, v50);
      swift_endAccess();
      v72 = v57;
      v73 = v88;
      v74 = (void (*)(unint64_t, char *, _QWORD))v104;
      v104(v88, v65, v72);
      v75 = v86;
      ((void (*)(char *, char *, uint64_t))v103)(v86, v93, v69);
      v76 = (*(unsigned __int8 *)(v54 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      v77 = (v87 + *(unsigned __int8 *)(v97 + 80) + v76) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
      v78 = v69;
      v79 = swift_allocObject();
      *(_QWORD *)(v79 + 16) = v89;
      v74(v79 + v76, v73, v72);
      ((void (*)(unint64_t, char *, uint64_t))v103)(v79 + v77, v75, v78);
      v70 = partial apply for closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_16;
    }
    (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v54 + 8))(v65, v57);
    v84(v67, v68);
  }
  v70 = (uint64_t (*)())destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
LABEL_16:
  ((void (*)(id))v70)(objc_msgSend(*(id *)((char *)v58 + *(_QWORD *)(*v58 + 104)), sel_unlock));
  return swift_release();
}

uint64_t partial apply for closure #1 in SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = (int *)v1[3];
  v6 = v1[5];
  v5 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, v6, v5);
}

uint64_t closure #1 in RemoteConversationClient.ensureReady()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = swift_allocObject();
    *(_QWORD *)(v0 + 48) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    swift_unknownObjectRetain_n();
    v4 = swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v4;
    *(_QWORD *)(v4 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.ensureReady();
    *(_QWORD *)(v4 + 24) = v3;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v5;
    *v5 = v0;
    v5[1] = closure #1 in RemoteConversationClient.ensureReady();
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v12 = v11;
      *(_DWORD *)v10 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6552657275736E65, 0xED00002928796461, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v8, v9, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v11, -1, -1);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_release();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationClient.ensureReady()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.warmup(refId:)()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 56);
    v11 = *(_OWORD *)(v0 + 40);
    v3 = swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_OWORD *)(v3 + 24) = v11;
    *(_QWORD *)(v3 + 40) = v2;
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v4;
    *v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.warmup(refId:);
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v12 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x722870756D726177, 0xEE00293A64496665, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

unint64_t specialized static CandidateRequestMessage.from(_:)(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  type metadata accessor for StartCandidateRequestMessage();
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    type metadata accessor for TRPCandidateRequestMessage();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v3 = v4 | 0x2000000000000000;
    }
    else
    {
      type metadata accessor for MultiUserTRPCandidateRequestMessage();
      v5 = swift_dynamicCastClass();
      if (v5)
      {
        v3 = v5 | 0x4000000000000000;
      }
      else
      {
        type metadata accessor for TTResponseMessage();
        v6 = swift_dynamicCastClass();
        if (v6)
        {
          v3 = v6 | 0x6000000000000000;
        }
        else
        {
          type metadata accessor for SpeechStopDetectedMessage();
          v7 = swift_dynamicCastClass();
          if (v7)
          {
            v3 = v7 | 0x8000000000000000;
          }
          else
          {
            type metadata accessor for StoppedListeningForSpeechContinuationMessage();
            v8 = swift_dynamicCastClass();
            if (v8)
            {
              v3 = v8 | 0xA000000000000000;
            }
            else
            {
              type metadata accessor for ExecuteNLOnServerMessage();
              v9 = swift_dynamicCastClass();
              if (!v9)
                return 0xF000000000000007;
              v3 = v9 | 0xC000000000000000;
            }
          }
        }
      }
    }
  }
  v10 = a1;
  return v3;
}

void ConversationRequestProcessor.handleRequestContextMessage(_:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint8_t *v42;
  _QWORD *v43;
  NSObject *v44;
  char *v45;
  NSObject *v46;
  uint64_t (*v47)(void);
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(os_log_t, _QWORD, uint64_t);
  os_log_t v55;
  os_log_t v56;
  void (*v57)(os_log_t, uint64_t);
  char v58;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  _QWORD *v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  os_log_t v70;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD);
  NSObject *v73;
  os_log_type_t v74;
  _DWORD *v75;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void (*v92)(char *, _QWORD, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, _QWORD, uint64_t, uint64_t);
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char *v128;
  char *v129;
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t (*v138)(_QWORD);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  void (*v164)(char *, uint64_t, uint64_t);
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  os_log_t v169;
  char *v170;
  void (*v171)(_QWORD, _QWORD);
  uint64_t v172;
  uint64_t v173;
  void (*v174)(_QWORD, _QWORD);
  uint64_t v175;
  uint64_t v176;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1E0C80A78](v4);
  v161 = (char *)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v6);
  v160 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v158 = (char *)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v152 = (char *)&v148 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v12);
  v157 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v14);
  v156 = (char *)&v148 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for InputOrigin();
  v154 = *(_QWORD *)(v155 - 8);
  v16 = MEMORY[0x1E0C80A78](v155);
  v151 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v148 - v18;
  v20 = type metadata accessor for RequestType();
  v168 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v148 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v148 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v148 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v165 = (char *)&v148 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v169 = (os_log_t)((char *)&v148 - v33);
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v148 - v34;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
  v38 = a1;
  v171 = (void (*)(_QWORD, _QWORD))v37;
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.debug.getter();
  v41 = os_log_type_enabled(v39, v40);
  v162 = v26;
  v163 = v23;
  v159 = v29;
  v153 = v19;
  if (v41)
  {
    v167 = v20;
    v42 = (uint8_t *)swift_slowAlloc();
    v43 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v42 = 138412290;
    v176 = (uint64_t)v38;
    v44 = v38;
    v170 = v35;
    v45 = v2;
    v46 = v44;
    v20 = v167;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v43 = v38;

    v2 = v45;
    v35 = v170;
    _os_log_impl(&dword_1B4BE6000, v39, v40, "ConversationBridge handling message: %@", v42, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v43, -1, -1);
    MEMORY[0x1B5E44758](v42, -1, -1);

  }
  else
  {

  }
  v47 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 368);
  v48 = v47();
  v51 = (uint64_t)v49;
  if (v50 != 1)
  {
    outlined consume of ConversationRequestProcessor.State(v48, v49, v50);
    swift_retain_n();
    v73 = Logger.logObject.getter();
    v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (_DWORD *)swift_slowAlloc();
      v176 = swift_slowAlloc();
      *v75 = 136315138;
      v47();
      __asm { BR              X10 }
    }

LABEL_15:
    swift_release_n();
    return;
  }
  v170 = v2;
  v166 = v48;
  v52 = v48 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  v53 = v168;
  v164 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 16);
  v164(v35, v52, v20);
  v54 = *(void (**)(os_log_t, _QWORD, uint64_t))(v53 + 104);
  v55 = v169;
  v54(v169, *MEMORY[0x1E0D9E880], v20);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
  v56 = v55;
  LOBYTE(v55) = dispatch thunk of static Equatable.== infix(_:_:)();
  v57 = *(void (**)(os_log_t, uint64_t))(v53 + 8);
  v57(v56, v20);
  v57((os_log_t)v35, v20);
  v150 = v52;
  if ((v55 & 1) != 0
    || (v164(v35, v52, v20),
        v54(v56, *MEMORY[0x1E0D9E8A8], v20),
        v58 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v57(v56, v20),
        v57((os_log_t)v35, v20),
        (v58 & 1) != 0))
  {
    v170 = v35;
    swift_bridgeObjectRelease();
    v59 = v38;
    swift_retain_n();
    v60 = v59;
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc();
      v168 = swift_slowAlloc();
      v169 = v61;
      v64 = (_QWORD *)v168;
      v171 = (void (*)(_QWORD, _QWORD))swift_slowAlloc();
      v172 = (uint64_t)v60;
      v174 = v171;
      *(_DWORD *)v63 = 138412546;
      v65 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v64 = v60;

      *(_WORD *)(v63 + 12) = 2080;
      v66 = v170;
      v164(v170, v150, v20);
      v67 = RequestType.rawValue.getter();
      v69 = v68;
      v57(v66, v20);
      v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, (uint64_t *)&v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v70 = v169;
      _os_log_impl(&dword_1B4BE6000, v169, v62, "%@ is not supported for this requestType: %s", (uint8_t *)v63, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v71 = v168;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v71, -1, -1);
      v72 = v171;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v72, -1, -1);
      MEMORY[0x1B5E44758](v63, -1, -1);
      swift_release();

      return;
    }

    goto LABEL_15;
  }
  v168 = (uint64_t)v54;
  v171 = (void (*)(_QWORD, _QWORD))v57;
  v149 = v51;
  v169 = v38;
  v167 = v20;
  v77 = v170;
  v78 = *MEMORY[0x1E0D9E7D0];
  v79 = v154;
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 104);
  v81 = v153;
  v82 = v155;
  v80(v153, v78, v155);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E7E0], MEMORY[0x1E0D9E7F8]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v174 == (void (*)(_QWORD, _QWORD))v172 && v175 == v173)
  {
    swift_bridgeObjectRelease_n();
    v83 = *(void (**)(char *, uint64_t))(v79 + 8);
    v83(v81, v82);
    v84 = (uint64_t)v152;
  }
  else
  {
    v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v83 = *(void (**)(char *, uint64_t))(v79 + 8);
    v83(v81, v82);
    v84 = (uint64_t)v152;
    if ((v85 & 1) == 0)
    {
      v87 = InputOrigin.aceInputOrigin.getter();
      v89 = v90;
      goto LABEL_22;
    }
  }
  v86 = v151;
  v80(v151, v78, v82);
  v87 = InputOrigin.aceInputOrigin.getter();
  v89 = v88;
  v83(v86, v82);
LABEL_22:
  v91 = v77;
  v92 = (void (*)(char *, _QWORD, uint64_t))v168;
  type metadata accessor for RequestContextData.Builder(0);
  swift_allocObject();
  v93 = RequestContextData.Builder.init()();
  v94 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 1040))(v87, v89);
  swift_release();
  swift_bridgeObjectRelease();
  RequestContextMessage.audioSource.getter();
  v95 = (uint64_t)v156;
  AudioSource.init(aceValue:)();
  v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 1048))(v95);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v95, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  RequestContextMessage.audioDestination.getter();
  v97 = (uint64_t)v157;
  AudioDestination.init(aceValue:)();
  v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 1056))(v97);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v97, &demangling cache variable for type metadata for AudioDestination?);
  RequestContextMessage.responseMode.getter();
  v99 = (uint64_t)v158;
  ResponseMode.init(aceValue:)();
  v100 = type metadata accessor for ResponseMode();
  v101 = *(_QWORD *)(v100 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100) == 1)
  {
    static ResponseMode.displayForward.getter();
    outlined destroy of ReferenceResolutionClientProtocol?(v99, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 32))(v84, v99, v100);
  }
  v102 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56);
  v103 = 1;
  v102(v84, 0, 1, v100);
  v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 1064))(v84);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v84, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  v105 = RequestContextMessage.isEyesFree.getter();
  v106 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v104 + 1072))(v105 & 1);
  swift_release();
  v107 = v167;
  v164(v165, v150, v167);
  v108 = v159;
  v92(v159, *MEMORY[0x1E0D9E860], v107);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v174 != (void (*)(_QWORD, _QWORD))v172 || v175 != v173)
    v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v109 = (void (*)(char *, uint64_t))v171;
  v171(v108, v107);
  v109(v165, v107);
  v110 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v106 + 1080))(v103 & 1);
  swift_release();
  v111 = RequestContextMessage.isVoiceTriggerEnabled.getter();
  v112 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v110 + 1088))(v111 & 1);
  swift_release();
  v113 = RequestContextMessage.isTextToSpeechEnabled.getter();
  v114 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v112 + 1096))(v113 & 1);
  swift_release();
  RequestContextMessage.bargeInModes.getter();
  v115 = (*(uint64_t (**)(void))(*(_QWORD *)v114 + 1128))();
  swift_release();
  swift_bridgeObjectRelease();
  v116 = (uint64_t)v160;
  RequestContextMessage.approximatePreviousTTSInterval.getter();
  v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 1136))(v116);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v116, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  RequestContextMessage.deviceRestrictions.getter();
  v118 = (uint64_t)v161;
  Restrictions.init(aceValue:)();
  v119 = type metadata accessor for Restrictions();
  v120 = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v118, 0, 1, v119);
  v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 1144))(v118);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v118, (uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  v122 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v121 + 1160))(*((_QWORD *)v91 + 12), *((_QWORD *)v91 + 13));
  swift_release();
  v123 = RequestContextMessage.isTriggerlessFollowup.getter();
  v124 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v122 + 1168))(v123 & 1);
  v125 = v167;
  swift_release();
  v126 = ConversationRequestProcessor.didPreviouslyFallbackToServer(forUserId:)();
  v127 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v124 + 1176))(v126 & 1);
  swift_release();
  v128 = v162;
  v164(v162, v150, v125);
  v129 = v163;
  ((void (*)(char *, _QWORD, uint64_t))v168)(v163, *MEMORY[0x1E0D9E8A0], v125);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v174 != (void (*)(_QWORD, _QWORD))v172 || v175 != v173)
    v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v130 = (void (*)(char *, uint64_t))v171;
  v171(v129, v125);
  v130(v128, v125);
  v131 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v127 + 1184))(v120 & 1);
  swift_release();
  RequestContextMessage.voiceTriggerEventInfo.getter();
  v132 = (*(uint64_t (**)(void))(*(_QWORD *)v131 + 1200))();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v91[OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage])
    v133 = MUXContextMessage.isRMVEnabled.getter();
  else
    v133 = 0;
  v134 = v166;
  v135 = v149;
  v136 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v132 + 1208))(v133 & 1);
  swift_release();
  v137 = RequestContextMessage.voiceAudioSessionId.getter();
  v138 = *(uint64_t (**)(_QWORD))(*(_QWORD *)v136 + 1216);
  LOBYTE(v174) = 0;
  v139 = v138(v137);
  swift_release();
  v140 = RequestContextMessage.isSystemApertureEnabled.getter();
  v141 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 1224))(v140);
  swift_release();
  v142 = RequestContextMessage.isLiveActivitiesSupported.getter();
  v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 1232))(v142);
  swift_release();
  v144 = RequestContextMessage.isInAmbient.getter();
  v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 1240))(v144);
  v146 = swift_release();
  v147 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 1280))(v146);
  swift_release();
  ConversationRequestProcessor.sendRequestContextData(_:turn:candidateRequestMessages:)(v147, v134, v135);

  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for RequestContextData.Builder(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RequestContextData.Builder);
}

uint64_t RequestContextData.Builder.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v1 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioSource;
  v2 = type metadata accessor for AudioSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioDestination;
  v4 = type metadata accessor for AudioDestination();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_responseMode;
  v6 = type metadata accessor for ResponseMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isEyesFree) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDirectAction) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isVoiceTriggerEnabled) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTextToSpeechEnabled) = 2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_peerInfo) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_endpointInfo) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_instanceInfo) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_bargeInModes) = 0;
  v7 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_approximatePreviousTTSInterval;
  v8 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_restrictions;
  v10 = type metadata accessor for Restrictions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_originatingHome) = 0;
  v11 = (_QWORD *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_currentDeviceAssistantId);
  *v11 = 0;
  v11[1] = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTriggerlessFollowup) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_didPreviouslyFallbackToServer) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSpeechRequest) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isUserOnActivePhoneCall) = 2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceTriggerEventInfo) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isRecognizeMyVoiceEnabled) = 2;
  v12 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceAudioSessionId;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSystemApertureEnabled) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isLiveActivitiesSupported) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isInAmbient) = 2;
  v13 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_positionInSession;
  v14 = type metadata accessor for RequestPositionInSession();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_conjunctionInfo) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceShowingLockScreen) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceLocked) = 2;
  return v0;
}

uint64_t RequestContextData.Builder.inputOrigin(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 328);
  swift_bridgeObjectRetain();
  v5(a1, a2);
  return swift_retain();
}

uint64_t RequestContextData.Builder.inputOrigin.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestContextData.Builder.audioSource(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  (*(void (**)(char *))(*(_QWORD *)v1 + 352))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.audioSource.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioSource, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t ConversationBridge.rraasClient.setter(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v6, a3);
  return swift_endAccess();
}

uint64_t RequestContextData.Builder.audioDestination(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, &demangling cache variable for type metadata for AudioDestination?);
  (*(void (**)(char *))(*(_QWORD *)v1 + 376))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.audioDestination.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioDestination, &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t RequestContextData.Builder.responseMode(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  (*(void (**)(char *))(*(_QWORD *)v1 + 400))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.responseMode.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_responseMode, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
}

uint64_t RequestContextData.Builder.isEyesFree(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 424))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isEyesFree.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isEyesFree);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.isDirectAction(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 448))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isDirectAction.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDirectAction);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.isVoiceTriggerEnabled(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 472))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isVoiceTriggerEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isVoiceTriggerEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.isTextToSpeechEnabled(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 496))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isTextToSpeechEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTextToSpeechEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.bargeInModes(_:)()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(*(_QWORD *)v0 + 592);
  v2 = swift_bridgeObjectRetain();
  v1(v2);
  return swift_retain();
}

uint64_t RequestContextData.Builder.bargeInModes.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t RequestContextData.Builder.bargeInModes.setter(uint64_t a1)
{
  return RequestContextData.Builder.bargeInModes.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_bargeInModes);
}

uint64_t RequestContextData.Builder.approximatePreviousTTSInterval(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(char *))(*(_QWORD *)v1 + 616))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.approximatePreviousTTSInterval.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_approximatePreviousTTSInterval, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
}

uint64_t RequestContextData.Builder.restrictions(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  (*(void (**)(char *))(*(_QWORD *)v1 + 640))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.restrictions.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_restrictions, (uint64_t *)&demangling cache variable for type metadata for Restrictions?);
}

uint64_t RequestContextData.Builder.currentDeviceAssistantId(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 688);
  swift_bridgeObjectRetain();
  v5(a1, a2);
  return swift_retain();
}

uint64_t RequestContextData.Builder.currentDeviceAssistantId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_currentDeviceAssistantId);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestContextData.Builder.isTriggerlessFollowup(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 712))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isTriggerlessFollowup.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTriggerlessFollowup);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t ConversationRequestProcessor.didPreviouslyFallbackToServer(forUserId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[4];
  _BYTE v17[24];
  uint64_t v18;

  v1 = type metadata accessor for ConversationSessionKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v16[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v0 + 392))(v16, v6);
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0D9EDD0], v1);
  dispatch thunk of ConversationSessionState.value(forKey:userId:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v18)
  {
    v9 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    v10 = swift_dynamicCast();
    v11 = *(_QWORD *)(v9 - 8);
    v12 = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, v10 ^ 1u, 1, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9) != 1)
      goto LABEL_6;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v13 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  }
  v12 = 0;
LABEL_6:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  return v12;
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1)
{
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady()(a1, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(uint64_t, uint64_t))implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady());
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady()(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return a3(a1, v3 + ((v6 + 16) & ~v6));
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady()(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t ManagedContinuation.resume(returning:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v4 = type metadata accessor for Result();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))((char *)&v9 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ManagedContinuation.resume(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v2 = type metadata accessor for Result();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v14 - v5;
  v7 = type metadata accessor for CheckedContinuation();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))((char *)&v14 - v10, 1, 1, v7);
  v12 = *(_QWORD *)(v2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, a1, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v2);
  ManagedContinuation.updateState(continuation:result:)((uint64_t)v11, (uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t partial apply for closure #2 in ManagedContinuation.updateState(continuation:result:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v1 = *(_QWORD *)(type metadata accessor for CheckedContinuation() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Result() - 8) + 80);
  return closure #2 in ManagedContinuation.updateState(continuation:result:)(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t closure #2 in ManagedContinuation.updateState(continuation:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  v3 = type metadata accessor for CheckedContinuation();
  return CheckedContinuation.resume(with:)(a2, v3);
}

uint64_t CheckedContinuation.resume(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v5);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Result();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v15, v3);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t RequestContextData.Builder.didPreviouslyFallbackToServer(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 736))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.didPreviouslyFallbackToServer.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_didPreviouslyFallbackToServer);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.isSpeechRequest(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 760))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isSpeechRequest.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSpeechRequest);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.voiceTriggerEventInfo(_:)()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(*(_QWORD *)v0 + 808);
  v2 = swift_bridgeObjectRetain();
  v1(v2);
  return swift_retain();
}

uint64_t RequestContextData.Builder.voiceTriggerEventInfo.setter(uint64_t a1)
{
  return RequestContextData.Builder.bargeInModes.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceTriggerEventInfo);
}

uint64_t RequestContextData.Builder.isRecognizeMyVoiceEnabled(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 832))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isRecognizeMyVoiceEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isRecognizeMyVoiceEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.voiceAudioSessionId(_:)(unint64_t a1)
{
  uint64_t v1;

  (*(void (**)(unint64_t))(*(_QWORD *)v1 + 856))(a1 | ((HIDWORD(a1) & 1) << 32));
  return swift_retain();
}

uint64_t RequestContextData.Builder.voiceAudioSessionId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceAudioSessionId;
  result = swift_beginAccess();
  *(_DWORD *)v3 = a1;
  *(_BYTE *)(v3 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t RequestContextData.Builder.isSystemApertureEnabled(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 880))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isSystemApertureEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSystemApertureEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

id RequestContextData.Builder.build()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61;
  id v62;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1E0C80A78](v1);
  v74 = (uint64_t)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for RequestPositionInSession();
  v3 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v86 = (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Restrictions();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ResponseMode();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v87 = (uint64_t)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v21);
  v89 = (uint64_t)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v88 = (uint64_t)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 320))(v24);
  if (!v27)
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v81 = v27;
  v82 = v26;
  v28 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 368))(v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 392))(v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    static ResponseMode.displayForward.getter();
    v30 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  }
  else
  {
    v30 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v87, v17, v18);
  }
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 416))(v30);
  v32 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
  v33 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
  LODWORD(v72) = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
  v77 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
  v76 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
  v75 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
  v71 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
  v34 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 632))(v34);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  v85 = v11;
  v79 = v32;
  v80 = v31;
  v78 = v33;
  if (v35 == 1)
  {
    Restrictions.init(restrictedCommands:)();
    v36 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  }
  else
  {
    v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  v37 = v74;
  v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 656))(v36);
  v69 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
  v39 = v38;
  LODWORD(v70) = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
  v68 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
  v67 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
  v66 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
  v73 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
  v65 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
  v40 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
  v41 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
  v42 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 896))();
  v43 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 920))();
  (*(void (**)(void))(*(_QWORD *)v0 + 944))();
  v44 = v83;
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v37, 1, v83);
  v84 = v14;
  if (v45 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v86, *MEMORY[0x1E0D98420], v44);
    v46 = outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for RequestPositionInSession?);
  }
  else
  {
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v86, v37, v44);
  }
  v47 = v72;
  v49 = v67;
  v48 = v68;
  v50 = 0xE000000000000000;
  if (v39)
    v50 = v39;
  v83 = v50;
  if (v39)
    v51 = v69;
  else
    v51 = 0;
  v72 = v51;
  LODWORD(v69) = v43 & 1;
  v68 = v42 & 1;
  v67 = v41 & 1;
  if ((v40 & 0x100000000) != 0)
    v52 = 0;
  else
    v52 = v40;
  v53 = v65 & 1;
  v54 = v66 & 1;
  v55 = v49 & 1;
  v56 = v48 & 1;
  v57 = MEMORY[0x1E0DEE9D8];
  v58 = v70 & 1;
  if (v71)
    v57 = v71;
  v70 = v57;
  LODWORD(v71) = v47 & 1;
  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 968))(v46);
  v60 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 992))() & 1;
  v61 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1016))() & 1;
  v62 = objc_allocWithZone((Class)type metadata accessor for RequestContextData(0));
  return RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(v82, v81, v88, v89, v87, v80 & 1, v79 & 1, v78 & 1, v71, v77, v76, v75, v70, (uint64_t)v84, (uint64_t)v85, v74, v72, v83, v58,
           v56,
           v55,
           v54,
           v73,
           v53,
           v52,
           v67,
           v68,
           v69,
           v86,
           v59,
           v60,
           v61);
}

uint64_t RequestContextData.Builder.inputOrigin.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestContextData.Builder.audioSource.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioSource, (uint64_t *)&demangling cache variable for type metadata for AudioSource?, a1);
}

uint64_t ManagedContinuation.__deallocating_deinit()
{
  ManagedContinuation.deinit();
  return swift_deallocClassInstance();
}

uint64_t RequestContextData.Builder.audioDestination.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioDestination, &demangling cache variable for type metadata for AudioDestination?, a1);
}

uint64_t ManagedContinuation.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  type metadata accessor for Result();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  return v0;
}

uint64_t RequestContextData.Builder.responseMode.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_responseMode, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?, a1);
}

uint64_t RequestContextData.Builder.isEyesFree.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isEyesFree);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isDirectAction.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDirectAction);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isVoiceTriggerEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isTextToSpeechEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTextToSpeechEnabled);
  swift_beginAccess();
  return *v1;
}

void *RequestContextData.Builder.peerInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_peerInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void *RequestContextData.Builder.endpointInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_endpointInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void *RequestContextData.Builder.instanceInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_instanceInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

uint64_t RequestContextData.Builder.bargeInModes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

{
  return RequestContextData.Builder.bargeInModes.getter();
}

uint64_t RequestContextData.Builder.approximatePreviousTTSInterval.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_approximatePreviousTTSInterval, (uint64_t *)&demangling cache variable for type metadata for DateInterval?, a1);
}

uint64_t RequestContextData.Builder.restrictions.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_restrictions, (uint64_t *)&demangling cache variable for type metadata for Restrictions?, a1);
}

void *RequestContextData.Builder.originatingHome.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_originatingHome);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

uint64_t RequestContextData.Builder.currentDeviceAssistantId.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_currentDeviceAssistantId);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t RequestContextData.Builder.isTriggerlessFollowup.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTriggerlessFollowup);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.didPreviouslyFallbackToServer.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_didPreviouslyFallbackToServer);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isSpeechRequest.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSpeechRequest);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isUserOnActivePhoneCall.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isUserOnActivePhoneCall);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.voiceTriggerEventInfo.getter()
{
  return RequestContextData.Builder.bargeInModes.getter();
}

uint64_t RequestContextData.Builder.isRecognizeMyVoiceEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isRecognizeMyVoiceEnabled);
  swift_beginAccess();
  return *v1;
}

unint64_t RequestContextData.Builder.voiceAudioSessionId.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceAudioSessionId);
  swift_beginAccess();
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t RequestContextData.Builder.isSystemApertureEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSystemApertureEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.positionInSession.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_positionInSession, &demangling cache variable for type metadata for RequestPositionInSession?, a1);
}

uint64_t type metadata accessor for RequestContextData(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RequestContextData);
}

uint64_t RequestContextData.Builder.__deallocating_deinit()
{
  RequestContextData.Builder.deinit();
  return swift_deallocClassInstance();
}

uint64_t RequestContextData.Builder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioSource, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioDestination, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_responseMode, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);

  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_approximatePreviousTTSInterval, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_restrictions, (uint64_t *)&demangling cache variable for type metadata for Restrictions?);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_positionInSession, &demangling cache variable for type metadata for RequestPositionInSession?);

  return v0;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendRequestContextData(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t ConversationRuntimeClient.sendRequestContextData(_:withBridgeDelegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, void *, uint64_t);

  v8 = v3[3];
  v7 = v3[4];
  v9 = v3[5];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = a1;
  swift_unknownObjectRetain();
  v12 = StaticString.description.getter();
  v14 = v13;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:);
  *(_QWORD *)(v15 + 24) = v10;
  *(_QWORD *)(v15 + 32) = "bridge(didReceiveRequestContextData:from:)";
  *(_QWORD *)(v15 + 40) = 42;
  *(_BYTE *)(v15 + 48) = 2;
  v16 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 208);
  swift_retain();
  v16(v12, v14, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v15);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for InterruptibleTaskResult(_QWORD *a1, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  id v9;
  char v10;
  id v11;
  id v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    v11 = *a2;
    v12 = *a2;
    *a1 = v11;
    v10 = 2;
  }
  else if (v6 == 1)
  {
    v8 = *a2;
    v9 = *a2;
    *a1 = v8;
    v10 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v5) = v10;
  return a1;
}

void ConversationRequestProcessor.handleTextBasedResultCandidateMessage(_:)(void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t, _QWORD, uint64_t);
  id v14;

  v2 = v1;
  v4 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  v7 = type metadata accessor for RequestType();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B4EE4F40;
  v12 = v11 + v10;
  v13 = *(void (**)(unint64_t, _QWORD, uint64_t))(v8 + 104);
  v13(v12, *MEMORY[0x1E0D9E888], v7);
  v13(v12 + v9, *MEMORY[0x1E0D9E8A8], v7);
  v13(v12 + 2 * v9, *MEMORY[0x1E0D9E890], v7);
  swift_retain();
  v14 = a1;
  specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v14, v4, v6, v11, 0xF000000000000007, 0, v2, (uint64_t)v14, (uint64_t (*)(uint64_t))specialized ConversationRequestProcessor.makeResultCandidateState(from:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t ConversationRequestProcessor.activeTurn.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  char v4;
  char v5;
  uint64_t v6;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
  v3 = v2;
  v5 = v4;
  if ((v4 - 1) > 1u)
  {
    v6 = 0;
  }
  else
  {
    v1 = swift_retain();
    v6 = v1;
  }
  outlined consume of ConversationRequestProcessor.State(v1, v3, v5);
  return v6;
}

uint64_t type metadata accessor for ResultCandidateState.LoggingMetadata(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ResultCandidateState.LoggingMetadata);
}

uint64_t ResultCandidateState.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  unsigned __int8 v17;
  Swift::String v18;
  Swift::String v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  unint64_t v64;

  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v60);
  v59 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1E0C80A78](v5);
  v63 = 0;
  v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(271);
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  v6._object = (void *)0x80000001B4F00540;
  String.append(_:)(v6);
  v8 = v0[2];
  v7 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000016;
  v10._object = (void *)0x80000001B4F00560;
  String.append(_:)(v10);
  type metadata accessor for ResultCandidateType(0);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 0x617265747475202CLL;
  v11._object = (void *)0xEE0022203A65636ELL;
  String.append(_:)(v11);
  v12 = (*(uint64_t (**)(void))(*v0 + 856))();
  if (v13)
  {
    v14 = v13;
  }
  else
  {
    v12 = 0x3E6C696E3CLL;
    v14 = 0xE500000000000000;
  }
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x80000001B4F00580;
  v16._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v16);
  v17 = (*(uint64_t (**)(void))(*v0 + 376))();
  v18._countAndFlagsBits = ResultCandidateProcessingStatus.rawValue.getter(v17);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x7463656C6573202CLL;
  v19._object = (void *)0xEB000000003A6465;
  String.append(_:)(v19);
  v20 = (*(uint64_t (**)(void))(*v0 + 448))();
  v21 = (v20 & 1) == 0;
  if ((v20 & 1) != 0)
    v22 = 1702195828;
  else
    v22 = 0x65736C6166;
  if (v21)
    v23 = 0xE500000000000000;
  else
    v23 = 0xE400000000000000;
  v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._object = (void *)0x80000001B4F005A0;
  v25._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v25);
  (*(void (**)(void))(*v0 + 520))();
  v26._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x644972657375202CLL;
  v27._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v27);
  type metadata accessor for UserID();
  lazy protocol witness table accessor for type UserID and conformance UserID();
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0xD000000000000012;
  v29._object = (void *)0x80000001B4F005C0;
  String.append(_:)(v29);
  v30 = (*(uint64_t (**)(void))(*v0 + 592))();
  v31 = (v30 & 1) == 0;
  if ((v30 & 1) != 0)
    v32 = 1702195828;
  else
    v32 = 0x65736C6166;
  if (v31)
    v33 = 0xE500000000000000;
  else
    v33 = 0xE400000000000000;
  v34 = v33;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 0xD000000000000019;
  v35._object = (void *)0x80000001B4F005E0;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x3E6C696E3CLL;
  v36._object = (void *)0xE500000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD000000000000010;
  v37._object = (void *)0x80000001B4F00600;
  String.append(_:)(v37);
  v38 = (*(uint64_t (**)(void))(*v0 + 712))();
  v61 = v38;
  v62 = BYTE4(v38) & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
  v39._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._object = (void *)0x80000001B4F00620;
  v40._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v40);
  v41 = (*(uint64_t (**)(void))(*v0 + 760))();
  v61 = v41;
  v62 = BYTE4(v41) & 1;
  v42._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0x636F4C727361202CLL;
  v43._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v43);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  v44 = type metadata accessor for ExecutionLocation();
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v4, 1, v44) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
    v46 = (void *)0xE500000000000000;
    v47 = 0x3E6C696E3CLL;
  }
  else
  {
    v47 = ExecutionLocation.description.getter();
    v46 = v48;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v4, v44);
  }
  v49._countAndFlagsBits = v47;
  v49._object = v46;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 0xD000000000000018;
  v50._object = (void *)0x80000001B4F00640;
  String.append(_:)(v50);
  v51 = (uint64_t)v59;
  (*(void (**)(void))(*v0 + 664))();
  v52 = Optional.debugDescription.getter();
  v54 = v53;
  outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for ServerFallbackReason?);
  v55._countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 93;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  return v63;
}

uint64_t ResultCandidateState.processingStatus.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_processingStatus);
  swift_beginAccess();
  return *v1;
}

uint64_t ResultCandidateProcessingStatus.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4BF9060
                                                            + 4 * asc_1B4EEDED0[a1]))(0x696C616974696E69, 0xEB0000000064657ALL);
}

unint64_t sub_1B4BF9060()
{
  return 0xD000000000000011;
}

uint64_t sub_1B4BF9198()
{
  return 0x5364696C61766E69;
}

uint64_t sub_1B4BF91B8()
{
  return 0x64656C65636E6163;
}

uint64_t ResultCandidateState.selected.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selected);
  swift_beginAccess();
  return *v1;
}

uint64_t ResultCandidateState.mitigationDecision.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_mitigationDecision, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?, a1);
}

uint64_t ResultCandidateState.serverFallback.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallback);
  swift_beginAccess();
  return *v1;
}

unint64_t ResultCandidateState.voiceIdScore.getter()
{
  return ResultCandidateState.voiceIdScore.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_voiceIdScore);
}

uint64_t ResultCandidateState.serverFallbackReason.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?, a1);
}

uint64_t ResultCandidateState.processingStatus.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_processingStatus);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

void ConversationRequestProcessorTurnState.addResultCandidateState(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t *);
  void (*v32)(uint64_t *, _QWORD);
  uint64_t *v33;
  uint64_t *v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36[4];
  uint64_t v37;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState;
  swift_beginAccess();
  v7 = *(_QWORD *)v5;
  v6 = *(void **)(v5 + 8);
  v8 = *(_QWORD *)v5 >> 62;
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 == 1)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        v13 = swift_slowAlloc();
        v36[0] = v13;
        *(_DWORD *)v12 = 136315138;
        v14 = *(_QWORD *)v5 >> 62;
        if ((_DWORD)v14)
        {
          if ((_DWORD)v14 == 1)
          {
            v15 = 0xEA00000000006465;
            v16 = 0x7463656C65536372;
          }
          else
          {
            v15 = 0xE400000000000000;
            v16 = 1701602409;
          }
        }
        else
        {
          v15 = 0x80000001B4EFA470;
          v16 = 0xD000000000000019;
        }
        v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v10, v11, "Got an ASRResultCandidateMessge in state %s: Ignoring", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v13, -1, -1);
        MEMORY[0x1B5E44758](v12, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      return;
    }
    type metadata accessor for ConversationRequestProcessorTurnState.ResultCandidateStateHolder();
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)v5 = v25;
    *(_QWORD *)(v5 + 8) = 0;
    swift_bridgeObjectRetain();
    swift_retain();
    goto LABEL_17;
  }
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*(_QWORD *)v5, *(void **)(v5 + 8));
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
  swift_bridgeObjectRetain();
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
  v18 = swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v17(v18) + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v4, v3), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
    v25 = (_QWORD *)v7;
LABEL_17:
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v36[0] = v30;
      *(_DWORD *)v29 = 136315138;
      swift_bridgeObjectRetain();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v27, v28, "Adding ResultCandidateState with rcId %s to rcStateHolder.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v30, -1, -1);
      MEMORY[0x1B5E44758](v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v31 = *(uint64_t (**)(uint64_t *))(*v25 + 104);
    swift_retain();
    v32 = (void (*)(uint64_t *, _QWORD))v31(v36);
    v34 = v33;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v37 = *v34;
    *v34 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v4, v3, isUniquelyReferenced_nonNull_native);
    *v34 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32(v36, 0);
    swift_release();
    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v36[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v21, v22, "Got the same RC ID %s multiple times this turn. Ignoring.", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v24, -1, -1);
    MEMORY[0x1B5E44758](v23, -1, -1);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);

    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
  }
  else
  {
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
    swift_bridgeObjectRelease_n();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);

  }
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
}

uint64_t type metadata accessor for ConversationRequestProcessorTurnState.ResultCandidateStateHolder()
{
  return objc_opt_self();
}

void outlined consume of ConversationRequestProcessorTurnState.SpeechState(unint64_t a1, void *a2)
{
  if (a1 >> 62 == 1)
  {
    swift_release();

  }
  else if (!(a1 >> 62))
  {
    swift_release();
  }
}

unint64_t outlined copy of ConversationRequestProcessorTurnState.SpeechState(unint64_t result, void *a2)
{
  id v2;

  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    v2 = a2;
  }
  return swift_retain();
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t (*ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UserID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80];
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF90]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E0D9EF98]);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for ConversationSessionKey();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08];
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, (unint64_t *)&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E0D9EE20]);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09D0]);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D98828];
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange, (uint64_t (*)(uint64_t))MEMORY[0x1E0D98828], MEMORY[0x1E0D98838]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange, MEMORY[0x1E0D98840]);
}

{
  uint64_t v2;

  type metadata accessor for CodingUserInfoKey();
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for IntentTopic();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B648];
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B648], MEMORY[0x1E0D9B660]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E0D9B668]);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  Swift::Int v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  if ((a1 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 | ((HIDWORD(a1) & 1) << 32), v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    while (1)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v4);
      v7 = 0x4C4E79636167656CLL;
      if (v6 != 1)
        v7 = 0xD00000000000001ALL;
      v8 = 0xEF747865746E6F43;
      if (v6 != 1)
        v8 = 0x80000001B4EF4590;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v9 = v7;
      else
        v9 = 0xD000000000000019;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v10 = v8;
      else
        v10 = 0x80000001B4EF4560;
      if (a1)
      {
        if (a1 == 1)
          v11 = 0x4C4E79636167656CLL;
        else
          v11 = 0xD00000000000001ALL;
        if (a1 == 1)
          v12 = 0xEF747865746E6F43;
        else
          v12 = 0x80000001B4EF4590;
        if (v9 != v11)
          goto LABEL_24;
      }
      else
      {
        v12 = 0x80000001B4EF4560;
        if (v9 != 0xD000000000000019)
          goto LABEL_24;
      }
      if (v10 == v12)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_24:
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = *(_QWORD *)(v2 + 48) + 8 * result;
      if ((*(_BYTE *)(v7 + 4) & 1) != 0)
      {
        if ((a1 & 0x100000000) != 0)
          return result;
      }
      else if ((a1 & 0x100000000) == 0 && *(_DWORD *)v7 == (_DWORD)a1)
      {
        return result;
      }
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for LNSystemProtocol();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1B5E43AF8](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  uint64_t v22;

  v21 = a4;
  v22 = a5;
  v6 = v5;
  v19 = a1;
  v20 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(v21, v20, v22);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void destroy for InterruptibleTaskResult(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 3)
  {
    if (v4 == 2 || v4 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_1B4BFA7EC + 4 * byte_1B4EEB6A5[v5]))();
  }
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t InterruptibleTaskResult.getOrNilIfInterrupted()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      return swift_willThrow();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v6, v9);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
  }
}

void ConversationRequestProcessor.handleResultSelectedMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  id v20;
  _QWORD *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  os_log_t v47;
  uint8_t *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  char *v68;
  void (*v69)(uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  char v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  void *v85;
  _QWORD v86[2];
  uint8_t *v87;
  os_log_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint8_t *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[7];

  v2 = v1;
  v4 = type metadata accessor for RequestType();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v86 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1E0C80A78](v11);
  v92 = (char *)v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  v15 = a1;
  v95 = v14;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v93 = v8;
  v94 = v10;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v90 = (_QWORD *)swift_slowAlloc();
    v91 = v19;
    *(_DWORD *)v19 = 138412290;
    v100[3] = (uint64_t)v15;
    v20 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v21 = v90;
    *v90 = v15;

    v22 = v91;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "ConversationBridge handling message: %@", v91, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v22, -1, -1);

  }
  else
  {

  }
  v23 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 528))();
  if (v23)
  {
    v24 = v23;
    v25 = (_QWORD *)ResultCandidateRequestMessageBase.resultCandidateId.getter();
    v27 = v26;
    v28 = (unint64_t *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v29 = *v28;
    if (!(*v28 >> 62))
    {
      v91 = (uint8_t *)v15;
      v30 = (void *)v28[1];
      v31 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 88);
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v29, v30);
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v29, v30);
      v32 = swift_bridgeObjectRetain();
      v33 = v31(v32);
      if (*(_QWORD *)(v33 + 16))
      {
        v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v25, v27);
        if ((v35 & 1) != 0)
        {
          v90 = v25;
          v36 = *(uint64_t **)(*(_QWORD *)(v33 + 56) + 8 * v34);
          swift_retain();
          swift_bridgeObjectRelease();
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v29, v30);
          swift_bridgeObjectRelease();
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v29, v30);
          swift_retain_n();
          v37 = Logger.logObject.getter();
          v38 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v37, v38))
          {
            v88 = v37;
            v39 = (uint8_t *)swift_slowAlloc();
            v40 = swift_slowAlloc();
            v100[0] = v40;
            v87 = v39;
            *(_DWORD *)v39 = 136315138;
            v86[1] = v39 + 4;
            v41 = *v36;
            v89 = v2;
            v42 = *(uint64_t (**)(uint64_t))(v41 + 800);
            v43 = swift_retain();
            v44 = v42(v43);
            v46 = v45;
            swift_release();
            v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            v2 = v89;
            swift_bridgeObjectRelease();
            v48 = v87;
            v47 = v88;
            _os_log_impl(&dword_1B4BE6000, v88, v38, "ResultSelected received for RC state: %s", v87, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v40, -1, -1);
            MEMORY[0x1B5E44758](v48, -1, -1);

          }
          else
          {

            v49 = swift_release_n();
          }
          v58 = v91;
          v59 = (uint64_t)v36;
          v60 = (*(uint64_t (**)(uint64_t))(*v36 + 376))(v49);
          if (ResultCandidateProcessingStatus.rawValue.getter(v60) == 0x64656C65636E6163
            && v61 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v63 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              v64 = ResultSelectedMessageBase.isMitigated.getter();
              v65 = type metadata accessor for TTResponseMessage.MitigationDecision();
              v66 = *(_QWORD *)(v65 - 8);
              v67 = (unsigned int *)MEMORY[0x1E0D9C970];
              if ((v64 & 1) == 0)
                v67 = (unsigned int *)MEMORY[0x1E0D9C968];
              v68 = v92;
              (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v92, *v67, v65);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v68, 0, 1, v65);
              (*(void (**)(char *))(*(_QWORD *)v59 + 528))(v68);
              v69 = *(void (**)(uint64_t))(*(_QWORD *)v59 + 456);
              v95 = v59;
              v69(1);
              v70 = v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
              swift_beginAccess();
              v71 = v94;
              (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v94, v70, v4);
              v72 = v93;
              (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v93, *MEMORY[0x1E0D9E8A0], v4);
              lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
              dispatch thunk of RawRepresentable.rawValue.getter();
              dispatch thunk of RawRepresentable.rawValue.getter();
              if (v98 == v96 && v99 == v97)
              {
                swift_bridgeObjectRelease_n();
                v73 = *(void (**)(char *, uint64_t))(v5 + 8);
                v73(v72, v4);
                v74 = ((uint64_t (*)(char *, uint64_t))v73)(v71, v4);
                v75 = v95;
              }
              else
              {
                v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v80 = *(void (**)(char *, uint64_t))(v5 + 8);
                v80(v72, v4);
                v74 = ((uint64_t (*)(char *, uint64_t))v80)(v71, v4);
                v75 = v95;
                if ((v79 & 1) == 0)
                {
LABEL_39:
                  v85 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 1256))(v75, v24, 0, 0);
                  (*(void (**)(uint8_t *, uint64_t, uint64_t, void *))(*(_QWORD *)v2 + 872))(v58, v24, v75, v85);
                  swift_release();
                  swift_release();

                  return;
                }
              }
              v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 864))(v74);
              if (v81)
              {
                v82 = v81;
                v83 = ResultSelectedMessageBase.endpointMode.getter();
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 152))(v83, v84 & 1);
                swift_release();
              }
              goto LABEL_39;
            }
          }
          swift_bridgeObjectRetain();
          v54 = Logger.logObject.getter();
          v76 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v54, v76))
          {
            v77 = (uint8_t *)swift_slowAlloc();
            v78 = swift_slowAlloc();
            v100[0] = v78;
            *(_DWORD *)v77 = 136315138;
            swift_bridgeObjectRetain();
            v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v90, v27, v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B4BE6000, v54, v76, "RC ID: %s already canceled. Not sending commit signal.", v77, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v78, -1, -1);
            MEMORY[0x1B5E44758](v77, -1, -1);
            swift_release();
            goto LABEL_18;
          }

          swift_bridgeObjectRelease_n();
          swift_release();
          goto LABEL_20;
        }
      }
      swift_bridgeObjectRelease();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v29, v30);
      swift_bridgeObjectRelease();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v29, v30);
    }
    v53 = (uint64_t)v25;
    swift_bridgeObjectRetain();
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = swift_slowAlloc();
      v100[0] = v57;
      *(_DWORD *)v56 = 136315138;
      swift_bridgeObjectRetain();
      v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v27, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v54, v55, "Received ResultSelectedMessage before RC state was created for RC ID: %s. Dropping it on the floor.", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v57, -1, -1);
      MEMORY[0x1B5E44758](v56, -1, -1);
LABEL_18:
      swift_release();

      return;
    }

    swift_bridgeObjectRelease_n();
LABEL_20:
    swift_release();
    return;
  }
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v52 = 0;
    _os_log_impl(&dword_1B4BE6000, v50, v51, "Request already canceled. Not handling ResultSelectedMessage.", v52, 2u);
    MEMORY[0x1B5E44758](v52, -1, -1);
  }

}

uint64_t ResultCandidateState.mitigationDecision.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_mitigationDecision, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
}

uint64_t ResultCandidateState.selected.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selected);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

id ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  NSObject *v32;
  _QWORD *v33;
  uint8_t *v34;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSObject *v61;
  Class isa;
  Class v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  _QWORD *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8_t *v82;
  _QWORD v84[2];
  _QWORD *v85;
  uint8_t *v86;
  uint64_t v87;
  void (*v88)(_QWORD, _QWORD);
  uint64_t v89;
  NSObject *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t aBlock[6];
  uint64_t v94;

  v91 = a1;
  v92 = a4;
  v6 = type metadata accessor for UUID();
  v89 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RequestType();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0];
  v11 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v84 - v15;
  v17 = a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v17, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x1E0D9E8A0], v9);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, v10, MEMORY[0x1E0D9E8D0]);
  LOBYTE(v10) = dispatch thunk of static Equatable.== infix(_:_:)();
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v14, v9);
  v18(v16, v9);
  if ((v10 & 1) == 0)
  {
    if (a3)
      a3(0, 0);
    return 0;
  }
  v88 = a3;
  v19 = (_QWORD *)(a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  v20 = swift_beginAccess();
  if (*v19 >> 62 == 1 && v19[1] != 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v38))
      goto LABEL_24;
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    v40 = "SpeechRecognized is already sent. Not sending again..";
LABEL_23:
    _os_log_impl(&dword_1B4BE6000, v37, v38, v40, v39, 2u);
    MEMORY[0x1B5E44758](v39, -1, -1);
LABEL_24:

    if (v88)
      v88(0, 0);
    return 0;
  }
  v22 = v91;
  v87 = (*(uint64_t (**)(uint64_t))(*v91 + 864))(v20);
  if (!v87)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.conversationBridge);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v38))
      goto LABEL_24;
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    v40 = "ResultCandidateState is not of the right type. Cannot send SpeechRecognized";
    goto LABEL_23;
  }
  v23 = *(void **)(v87 + 24);
  if (!v23)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      aBlock[0] = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = v22[2];
      v48 = v22[3];
      swift_bridgeObjectRetain();
      v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v43, v44, "RC:%s does not contain an ASR output. Not sending SpeechRecognized.", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v46, -1, -1);
      MEMORY[0x1B5E44758](v45, -1, -1);

    }
    else
    {

      swift_release();
    }
    if (v88)
      v88(0, 0);
    swift_release();
    return 0;
  }
  v24 = one-time initialization token for conversationBridge;
  v25 = v23;
  if (v24 != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
  v27 = v25;
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v85 = (_QWORD *)swift_slowAlloc();
    v31 = v27;
    v86 = v30;
    *(_DWORD *)v30 = 138412290;
    v84[1] = v30 + 4;
    aBlock[0] = (uint64_t)v27;
    v32 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v33 = v85;
    *v85 = v23;

    v34 = v86;
    _os_log_impl(&dword_1B4BE6000, v28, v29, "Rec = %@", v86, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v35 = v33;
    v27 = v31;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v35, -1, -1);
    MEMORY[0x1B5E44758](v34, -1, -1);
  }
  else
  {

    v28 = v27;
  }

  v49 = -[NSObject utterances](v27, sel_utterances);
  if (!v49)
    goto LABEL_40;
  v50 = v49;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SASUtterance);
  v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v51 >> 62)
  {
    swift_bridgeObjectRetain();
    v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_40:
    v74 = v91;
    swift_retain();
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = swift_slowAlloc();
      v90 = v27;
      v78 = (uint8_t *)v77;
      v79 = swift_slowAlloc();
      aBlock[0] = v79;
      *(_DWORD *)v78 = 136315138;
      v80 = v74[2];
      v81 = v74[3];
      swift_bridgeObjectRetain();
      v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v75, v76, "RC:%s consists of empty recognition. Not sending SpeechRecognized.", v78, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v79, -1, -1);
      v82 = v78;
      v27 = v90;
      MEMORY[0x1B5E44758](v82, -1, -1);

    }
    else
    {

      swift_release();
    }
    if (v88)
      v88(0, 0);
    swift_release();

    return 0;
  }
  v53 = Logger.logObject.getter();
  v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v55 = 0;
    _os_log_impl(&dword_1B4BE6000, v53, v54, "Sending SpeechRecognized command", v55, 2u);
    MEMORY[0x1B5E44758](v55, -1, -1);
  }

  v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D883E0]), sel_init);
  UUID.init()();
  v57 = UUID.uuidString.getter();
  v59 = v58;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v8, v6);
  v60 = (void *)MEMORY[0x1B5E432E8](v57, v59);
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAceId_, v60);

  v61 = v90;
  isa = v90[10].isa;
  v63 = v90[11].isa;
  v64 = v56;
  v65 = (void *)MEMORY[0x1B5E432E8](isa, v63);
  objc_msgSend(v64, sel_setRefId_, v65);

  objc_msgSend(v64, sel_setEager_, 0);
  objc_msgSend(v64, sel_setRecognition_, v27);
  v66 = (void *)MEMORY[0x1B5E432E8](isa, v63);
  objc_msgSend(v64, sel_setSessionId_, v66);

  v67 = (void *)MEMORY[0x1B5E432E8](v91[2], v91[3]);
  objc_msgSend(v64, sel_setResultId_, v67);

  v68 = *(Class *)((char *)&v61->isa
                 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
  if ((objc_msgSend(v68, sel_respondsToSelector_, sel_handleSpeechRecognized_completion_) & 1) != 0)
  {
    v69 = swift_allocObject();
    v70 = (uint64_t)v88;
    v71 = v92;
    *(_QWORD *)(v69 + 16) = v88;
    *(_QWORD *)(v69 + 24) = v71;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:);
    aBlock[5] = v69;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_41;
    v72 = _Block_copy(aBlock);
    v73 = v64;
    swift_unknownObjectRetain();
    outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v70);
    swift_retain();
    swift_release();
    objc_msgSend(v68, sel_handleSpeechRecognized_completion_, v73, v72);
    _Block_release(v72);

    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }

  return v64;
}

void ServerFallbackCapableRequestProcessor.handleResultSelectedMessage(_:forTurn:withResultCandidateState:speechRecognizedCommand:)(uint64_t a1, uint64_t a2, NSObject *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v10)(void);
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Class v30;
  Class isa;
  id v32;
  void *v33;
  objc_class *v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  v5 = v4;
  v10 = (uint64_t (*)(void))*((_QWORD *)a3->isa + 47);
  v11 = v10();
  if (ResultCandidateProcessingStatus.rawValue.getter(v11) == 0xD000000000000016 && v12 == 0x80000001B4EF5330)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    (*(void (**))(*(_QWORD *)v4 + 1040))(a3);
LABEL_6:
    ConversationRequestProcessor.handleResultSelectedMessage(_:forTurn:withResultCandidateState:speechRecognizedCommand:)(a1, a2, (unint64_t)a3, a4);
    return;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v14 = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    goto LABEL_5;
  v15 = ((uint64_t (*)(uint64_t))v10)(v14);
  if (ResultCandidateProcessingStatus.rawValue.getter(v15) == 0xD000000000000018 && v16 == 0x80000001B4EF52F0)
  {
    v17 = swift_bridgeObjectRelease();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v17 = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
      goto LABEL_12;
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 440))(v17);
  if ((v17 & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1B4BE6000, v23, v24, "Sending ResultCandidateSelected with ResultSelected", v25, 2u);
      MEMORY[0x1B5E44758](v25, -1, -1);
    }

    (*(void (**)(Class, Class, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 1184))(a3[2].isa, a3[3].isa, 1, 0, 0);
    goto LABEL_6;
  }
LABEL_12:
  v19 = ((uint64_t (*)(uint64_t))v10)(v17);
  if (ResultCandidateProcessingStatus.rawValue.getter(v19) == 0xD000000000000013 && v20 == 0x80000001B4EF5310)
  {
    v21 = swift_bridgeObjectRelease();
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v21 = swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
      goto LABEL_6;
  }
  v38 = a1;
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1432))(v21);
  if (!(v27 >> 62))
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v28)
      goto LABEL_23;
LABEL_37:
    swift_bridgeObjectRelease();
LABEL_38:
    a1 = v38;
    goto LABEL_6;
  }
  v28 = _CocoaArrayWrapper.endIndex.getter();
  if (!v28)
    goto LABEL_37;
LABEL_23:
  v36 = a2;
  v37 = a4;
  if (v28 >= 1)
  {
    v29 = 0;
    isa = a3[2].isa;
    v30 = a3[3].isa;
    while (1)
    {
      if ((v27 & 0xC000000000000001) != 0)
        v32 = (id)MEMORY[0x1B5E43B94](v29, v27);
      else
        v32 = *(id *)(v27 + 8 * v29 + 32);
      v33 = v32;
      if ((Class)ResultCandidateRequestMessageBase.resultCandidateId.getter() == isa && v34 == v30)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0)
          goto LABEL_27;
      }
      ServerFallbackCapableRequestProcessor.attemptServerFallback(executeNLOnServer:rcState:)(v33, a3);
LABEL_27:
      ++v29;

      if (v28 == v29)
      {
        swift_bridgeObjectRelease();
        a2 = v36;
        a4 = v37;
        goto LABEL_38;
      }
    }
  }
  __break(1u);
}

void ConversationRequestProcessor.handleResultSelectedMessage(_:forTurn:withResultCandidateState:speechRecognizedCommand:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  Swift::String_optional v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *buf;
  uint64_t v28;
  uint64_t v29[3];

  v8 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v10 = v9;
  v11 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 376))();
  if (ResultCandidateProcessingStatus.rawValue.getter(v11) == 0xD000000000000013 && v12 == 0x80000001B4EF52A0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 1040))(a3);
    goto LABEL_6;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    goto LABEL_5;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v29[0] = v28;
    *(_DWORD *)v24 = 136315138;
    buf = v24;
    v26 = *(_QWORD *)(a3 + 16);
    v25 = *(_QWORD *)(a3 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v22, v23, "Not sending CommitResultCandidateId for RC ID: %s yet", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v28, -1, -1);
    MEMORY[0x1B5E44758](buf, -1, -1);

  }
  else
  {

    swift_release();
  }
LABEL_6:
  v14 = (unint64_t *)(a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v15 = *v14;
  v16 = (void *)v14[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v14, v16);
  v17.value._countAndFlagsBits = v8;
  v17.value._object = v10;
  ConversationRequestProcessorTurnState.SpeechState.cancelAll(exceptResultCandidateId:)(v17);
  swift_bridgeObjectRelease();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v15, v16);
  v18 = *v14;
  v19 = (void *)v14[1];
  *v14 = a3 | 0x4000000000000000;
  v14[1] = (unint64_t)a4;
  v20 = a4;
  swift_retain();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v18, v19);
}

Swift::Void __swiftcall ConversationRequestProcessorTurnState.SpeechState.cancelAll(exceptResultCandidateId:)(Swift::String_optional exceptResultCandidateId)
{
  unint64_t v1;
  void *v2;
  unint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  int64_t v42;
  uint64_t v43;

  if (v1 >> 62)
    return;
  v3 = v1;
  object = exceptResultCandidateId.value._object;
  countAndFlagsBits = exceptResultCandidateId.value._countAndFlagsBits;
  v38 = v2;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88);
  v7 = swift_retain();
  v37 = v3;
  v8 = v6(v7);
  v9 = v8;
  v10 = 0;
  v11 = v8 + 64;
  v12 = 1 << *(_BYTE *)(v8 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v8 + 64);
  v42 = (unint64_t)(v12 + 63) >> 6;
  v40 = v8;
  v41 = object;
  v39 = countAndFlagsBits;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_23;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v42)
      goto LABEL_35;
    v18 = *(_QWORD *)(v11 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v42)
        goto LABEL_35;
      v18 = *(_QWORD *)(v11 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v42)
          goto LABEL_35;
        v18 = *(_QWORD *)(v11 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_22:
    v14 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_23:
    v20 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v16);
    if (object)
    {
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v16);
      v22 = *v21 == countAndFlagsBits && v21[1] == (_QWORD)object;
      if (v22
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        continue;
      }
    }
    v23 = one-time initialization token for conversationBridge;
    swift_retain();
    if (v23 != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v43 = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = v11;
      v30 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 800);
      v31 = swift_retain();
      v32 = v30(v31);
      v34 = v33;
      swift_release();
      *(_QWORD *)(v27 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v43);
      swift_release_n();
      v11 = v29;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v25, v26, "Cancelling RC: %s", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy();
      v35 = v28;
      countAndFlagsBits = v39;
      object = v41;
      MEMORY[0x1B5E44758](v35, -1, -1);
      v36 = v27;
      v9 = v40;
      MEMORY[0x1B5E44758](v36, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 384))(15);
    swift_release();
  }
  v19 = v17 + 3;
  if (v19 >= v42)
  {
LABEL_35:
    swift_release();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v37, v38);
    return;
  }
  v18 = *(_QWORD *)(v11 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v42)
      goto LABEL_35;
    v18 = *(_QWORD *)(v11 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_37:
  __break(1u);
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:)(v2, v3, v4, v5, v7, v6);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v10;
  *v10 = v6;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ConversationService.bridge(didReceiveRequestContextData:from:)(a4, a5, a6);
}

uint64_t ConversationService.bridge(didReceiveRequestContextData:from:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_BYTE *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 72)) + 0x170))();
  *(_QWORD *)(v0 + 136) = v4;
  v5 = type metadata accessor for RequestPositionInSession();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (unsigned int *)MEMORY[0x1E0D98438];
  if ((v1 & 1) != 0)
    v7 = (unsigned int *)MEMORY[0x1E0D98418];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v3, *v7, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v3, 0, 1, v5);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 952))(v3);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1280))(v8);
  *(_QWORD *)(v0 + 144) = v9;
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId + 8);
  *(_QWORD *)(v0 + 152) = v11;
  v12 = v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId;
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId);
  v14 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v0 + 160) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v15;
  *v15 = v0;
  v15[1] = ConversationService.bridge(didReceiveRequestContextData:from:);
  return ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:)(v10, v11, v13, v14, v9, 0, 0, 0xF000000000000000);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  unsigned __int8 v3;

  v1 = *(void **)(v0 + 144);
  v2 = *(void **)(v0 + 120);
  v3 = *(_BYTE *)(v0 + 192);
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of ConversationService.State(v2, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  TaskService.onNewTurn()();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  id v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 72);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 72);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21 = v20;
    *(_DWORD *)v8 = 136315138;
    v9 = objc_msgSend(v7, sel_debugDescription);
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "[ConversationService] Received context data: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {

  }
  v13 = *(_QWORD *)(v0 + 96);
  swift_beginAccess();
  v14 = *(void **)(v13 + 112);
  *(_QWORD *)(v0 + 120) = v14;
  v15 = *(_BYTE *)(v13 + 120);
  *(_BYTE *)(v0 + 192) = v15;
  if ((v15 & 0xC0) == 0x40)
  {
    *(_QWORD *)(v0 + 128) = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 192);
    v16 = one-time initialization token for shared;
    v17 = v14;
    if (v16 != -1)
      swift_once();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *v19 = 0xD000000000000050;
    v19[1] = 0x80000001B4EFAA00;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(void **)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_BYTE *)(v0 + 192);

  swift_release();
  swift_release();
  outlined consume of ConversationService.State(v2, v4);
  v5 = *(void **)(v3 + 112);
  *(_QWORD *)(v3 + 112) = v1;
  v6 = *(_BYTE *)(v3 + 120);
  *(_BYTE *)(v3 + 120) = 0x80;
  outlined consume of ConversationService.State(v5, v6);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.bridge(didReceiveRequestContextData:from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 176) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 184) = a1;
  }
  return swift_task_switch();
}

uint64_t ConversationService.bridge(didReceiveRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  v4[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[14] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t RequestContextData.debugDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  void *v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  Swift::String v68;
  uint64_t v69;
  void *v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  Swift::String v77;
  uint64_t v78;
  void *v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  Swift::String v86;
  uint64_t v87;
  void *v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  Swift::String v95;
  uint64_t v96;
  void *v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char v103;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  Swift::String v108;
  uint64_t v109;
  void *v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  Swift::String v120;
  uint64_t v121;
  void *v122;
  Swift::String v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  uint64_t v128;
  void *v129;
  Swift::String v130;
  Swift::String v131;
  uint64_t v132;
  void *v133;
  Swift::String v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  uint64_t v139;
  void *v140;
  void *v141;
  Swift::String v142;
  Swift::String v143;
  uint64_t v144;
  void *v145;
  Swift::String v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  id v150;
  uint64_t v151;
  void *v152;
  void *v153;
  Swift::String v154;
  Swift::String v155;
  uint64_t v156;
  void *v157;
  Swift::String v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  Swift::String v162;
  Swift::String v163;
  uint64_t v164;
  void *v165;
  Swift::String v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  void *v174;
  Swift::String v175;
  Swift::String v176;
  uint64_t v177;
  void *v178;
  Swift::String v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  void *v187;
  void *v188;
  Swift::String v189;
  Swift::String v190;
  uint64_t v191;
  void *v192;
  Swift::String v193;
  uint64_t v194;
  uint64_t v195;
  Swift::String v196;
  Swift::String v197;
  uint64_t v198;
  void *v199;
  Swift::String v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  id v204;
  uint64_t v205;
  void *v206;
  void *v207;
  Swift::String v208;
  Swift::String v209;
  uint64_t v210;
  void *v211;
  Swift::String v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  Swift::String v217;
  Swift::String v218;
  uint64_t v219;
  void *v220;
  Swift::String v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  Swift::String v227;
  uint64_t v228;
  void *v229;
  Swift::String v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  Swift::String v236;
  uint64_t v237;
  void *v238;
  Swift::String v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  Swift::String v245;
  uint64_t v246;
  void *v247;
  Swift::String v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  Swift::String v254;
  uint64_t v255;
  void *v256;
  Swift::String v257;
  uint64_t v258;
  uint64_t v259;
  Swift::String v260;
  uint64_t v261;
  void *v262;
  Swift::String v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  void *v270;
  Swift::String v271;
  uint64_t v272;
  uint64_t v273;
  Swift::String v274;
  uint64_t v275;
  void *v276;
  Swift::String v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  void *v284;
  Swift::String v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  void *v292;
  Swift::String v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  void *v300;
  Swift::String v301;
  uint64_t v302;
  uint64_t v303;
  Swift::String v304;
  uint64_t v305;
  void *v306;
  Swift::String v307;
  uint64_t v308;
  uint64_t v309;
  id v310;
  Swift::String v311;
  uint64_t v312;
  void *v313;
  Swift::String v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  void *v321;
  Swift::String v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  void *v329;
  Swift::String v330;
  Swift::String v331;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  unint64_t v340;
  unint64_t v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  id v346;
  objc_super v347;
  _QWORD v348[2];

  v1 = v0;
  v2 = type metadata accessor for RequestPositionInSession();
  v343 = *(_QWORD *)(v2 - 8);
  v344 = v2;
  MEMORY[0x1E0C80A78](v2);
  v342 = (char *)&v333 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v345 = type metadata accessor for Restrictions();
  v340 = *(_QWORD *)(v345 - 8);
  MEMORY[0x1E0C80A78](v345);
  v339 = (char *)&v333 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DeviceRestrictions();
  v337 = *(_QWORD *)(v5 - 8);
  v338 = v5;
  MEMORY[0x1E0C80A78](v5);
  v335 = (char *)&v333 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v7);
  v334 = (uint64_t)&v333 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v333 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v333 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (objc_class *)type metadata accessor for RequestContextData(0);
  v347.receiver = v0;
  v347.super_class = v15;
  v16 = objc_msgSendSuper2(&v347, sel_debugDescription);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  v348[0] = v17;
  v348[1] = v19;
  v20._countAndFlagsBits = 31520;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v22 = v348[0];
  v21 = v348[1];
  strcpy((char *)v348, "inputOrigin: ");
  HIWORD(v348[1]) = -4864;
  v23 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  v24 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin + 8);
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27 = v348[0];
  v28 = (void *)v348[1];
  v348[0] = v22;
  v348[1] = v21;
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v348[0];
  v30 = v348[1];
  strcpy((char *)v348, "audioSource: ");
  HIWORD(v348[1]) = -4864;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  v32 = type metadata accessor for AudioSource();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v14, 1, v32) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    v34 = (void *)0xE500000000000000;
    v35 = 0x3E6C696E3CLL;
  }
  else
  {
    v35 = AudioSource.aceValue.getter();
    v34 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v32);
  }
  v37._countAndFlagsBits = v35;
  v37._object = v34;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 8236;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  v39 = v348[0];
  v40 = (void *)v348[1];
  v348[0] = v31;
  v348[1] = v30;
  swift_bridgeObjectRetain();
  v41._countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v43 = v348[0];
  v42 = v348[1];
  v333 = 0xD000000000000012;
  v348[0] = 0xD000000000000012;
  v348[1] = 0x80000001B4F00100;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination, (uint64_t)v11, &demangling cache variable for type metadata for AudioDestination?);
  v44 = type metadata accessor for AudioDestination();
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v11, 1, v44) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for AudioDestination?);
    v46 = (void *)0xE500000000000000;
    v47 = 0x3E6C696E3CLL;
  }
  else
  {
    v47 = AudioDestination.aceValue.getter();
    v46 = v48;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v44);
  }
  v49._countAndFlagsBits = v47;
  v49._object = v46;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 8236;
  v50._object = (void *)0xE200000000000000;
  String.append(_:)(v50);
  v51 = v348[0];
  v52 = (void *)v348[1];
  v348[0] = v43;
  v348[1] = v42;
  swift_bridgeObjectRetain();
  v53._countAndFlagsBits = v51;
  v53._object = v52;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = v348[0];
  v54 = v348[1];
  strcpy((char *)v348, "responseMode: ");
  HIBYTE(v348[1]) = -18;
  v56._countAndFlagsBits = ResponseMode.aceValue.getter();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = 8236;
  v57._object = (void *)0xE200000000000000;
  String.append(_:)(v57);
  v58 = v348[0];
  v59 = (void *)v348[1];
  v348[0] = v55;
  v348[1] = v54;
  swift_bridgeObjectRetain();
  v60._countAndFlagsBits = v58;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v62 = v348[0];
  v61 = v348[1];
  v63 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree);
  strcpy((char *)v348, "isEyesFree: ");
  BYTE5(v348[1]) = 0;
  HIWORD(v348[1]) = -5120;
  if (v63)
    v64 = 1702195828;
  else
    v64 = 0x65736C6166;
  v65 = (void *)0xE500000000000000;
  if (v63)
    v66 = 0xE400000000000000;
  else
    v66 = 0xE500000000000000;
  v67 = v66;
  String.append(_:)(*(Swift::String *)&v64);
  swift_bridgeObjectRelease();
  v68._countAndFlagsBits = 8236;
  v68._object = (void *)0xE200000000000000;
  String.append(_:)(v68);
  v69 = v348[0];
  v70 = (void *)v348[1];
  v348[0] = v62;
  v348[1] = v61;
  swift_bridgeObjectRetain();
  v71._countAndFlagsBits = v69;
  v71._object = v70;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = v348[0];
  v72 = v348[1];
  v341 = 0xD000000000000010;
  v348[0] = 0xD000000000000010;
  v348[1] = 0x80000001B4F00120;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction))
    v74 = 1702195828;
  else
    v74 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction))
    v75 = 0xE400000000000000;
  else
    v75 = 0xE500000000000000;
  v76 = v75;
  String.append(_:)(*(Swift::String *)&v74);
  swift_bridgeObjectRelease();
  v77._countAndFlagsBits = 8236;
  v77._object = (void *)0xE200000000000000;
  String.append(_:)(v77);
  v78 = v348[0];
  v79 = (void *)v348[1];
  v348[0] = v73;
  v348[1] = v72;
  swift_bridgeObjectRetain();
  v80._countAndFlagsBits = v78;
  v80._object = v79;
  String.append(_:)(v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v82 = v348[0];
  v81 = v348[1];
  v348[0] = 0xD000000000000017;
  v348[1] = 0x80000001B4F00140;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled))
    v83 = 1702195828;
  else
    v83 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled))
    v84 = 0xE400000000000000;
  else
    v84 = 0xE500000000000000;
  v85 = v84;
  String.append(_:)(*(Swift::String *)&v83);
  swift_bridgeObjectRelease();
  v86._countAndFlagsBits = 8236;
  v86._object = (void *)0xE200000000000000;
  String.append(_:)(v86);
  v87 = v348[0];
  v88 = (void *)v348[1];
  v348[0] = v82;
  v348[1] = v81;
  swift_bridgeObjectRetain();
  v89._countAndFlagsBits = v87;
  v89._object = v88;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v91 = v348[0];
  v90 = v348[1];
  v348[0] = 0xD000000000000017;
  v348[1] = 0x80000001B4F00160;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled))
    v92 = 1702195828;
  else
    v92 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled))
    v93 = 0xE400000000000000;
  else
    v93 = 0xE500000000000000;
  v94 = v93;
  String.append(_:)(*(Swift::String *)&v92);
  swift_bridgeObjectRelease();
  v95._countAndFlagsBits = 8236;
  v95._object = (void *)0xE200000000000000;
  String.append(_:)(v95);
  v96 = v348[0];
  v97 = (void *)v348[1];
  v348[0] = v91;
  v348[1] = v90;
  swift_bridgeObjectRetain();
  v98._countAndFlagsBits = v96;
  v98._object = v97;
  String.append(_:)(v98);
  swift_bridgeObjectRelease();
  v99 = swift_bridgeObjectRelease();
  v101 = v348[0];
  v100 = v348[1];
  v336 = 0xD000000000000015;
  v348[0] = 0xD000000000000015;
  v348[1] = 0x80000001B4F00180;
  v102 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v103 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x140))(v99);
  v104 = (v103 & 1) == 0;
  if ((v103 & 1) != 0)
    v105 = 1702195828;
  else
    v105 = 0x65736C6166;
  if (v104)
    v106 = 0xE500000000000000;
  else
    v106 = 0xE400000000000000;
  v107 = v106;
  String.append(_:)(*(Swift::String *)&v105);
  swift_bridgeObjectRelease();
  v108._countAndFlagsBits = 8236;
  v108._object = (void *)0xE200000000000000;
  String.append(_:)(v108);
  v109 = v348[0];
  v110 = (void *)v348[1];
  v348[0] = v101;
  v348[1] = v100;
  swift_bridgeObjectRetain();
  v111._countAndFlagsBits = v109;
  v111._object = v110;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112 = swift_bridgeObjectRelease();
  v114 = v348[0];
  v113 = v348[1];
  v348[0] = v333;
  v348[1] = 0x80000001B4F001A0;
  v115 = (*(uint64_t (**)(uint64_t))((*v102 & *v1) + 0x148))(v112);
  v116 = (v115 & 1) == 0;
  if ((v115 & 1) != 0)
    v117 = 1702195828;
  else
    v117 = 0x65736C6166;
  if (v116)
    v118 = 0xE500000000000000;
  else
    v118 = 0xE400000000000000;
  v119 = v118;
  String.append(_:)(*(Swift::String *)&v117);
  swift_bridgeObjectRelease();
  v120._countAndFlagsBits = 8236;
  v120._object = (void *)0xE200000000000000;
  String.append(_:)(v120);
  v121 = v348[0];
  v122 = (void *)v348[1];
  v348[0] = v114;
  v348[1] = v113;
  swift_bridgeObjectRetain();
  v123._countAndFlagsBits = v121;
  v123._object = v122;
  String.append(_:)(v123);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v125 = v348[0];
  v124 = v348[1];
  strcpy((char *)v348, "peerInfo: ");
  BYTE3(v348[1]) = 0;
  HIDWORD(v348[1]) = -369098752;
  v126 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  if (v126)
  {
    v127 = objc_msgSend(v126, sel_debugDescription);
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v65 = v129;

  }
  else
  {
    v128 = 0x3E6C696E3CLL;
  }
  v130._countAndFlagsBits = v128;
  v130._object = v65;
  String.append(_:)(v130);
  swift_bridgeObjectRelease();
  v131._countAndFlagsBits = 8236;
  v131._object = (void *)0xE200000000000000;
  String.append(_:)(v131);
  v132 = v348[0];
  v133 = (void *)v348[1];
  v348[0] = v125;
  v348[1] = v124;
  swift_bridgeObjectRetain();
  v134._countAndFlagsBits = v132;
  v134._object = v133;
  String.append(_:)(v134);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v136 = v348[0];
  v135 = v348[1];
  strcpy((char *)v348, "endpointInfo: ");
  HIBYTE(v348[1]) = -18;
  v137 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
  if (v137)
  {
    v138 = objc_msgSend(v137, sel_debugDescription);
    v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v141 = v140;

  }
  else
  {
    v141 = (void *)0xE500000000000000;
    v139 = 0x3E6C696E3CLL;
  }
  v142._countAndFlagsBits = v139;
  v142._object = v141;
  String.append(_:)(v142);
  swift_bridgeObjectRelease();
  v143._countAndFlagsBits = 8236;
  v143._object = (void *)0xE200000000000000;
  String.append(_:)(v143);
  v144 = v348[0];
  v145 = (void *)v348[1];
  v348[0] = v136;
  v348[1] = v135;
  swift_bridgeObjectRetain();
  v146._countAndFlagsBits = v144;
  v146._object = v145;
  String.append(_:)(v146);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v148 = v348[0];
  v147 = v348[1];
  strcpy((char *)v348, "instanceInfo: ");
  HIBYTE(v348[1]) = -18;
  v149 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo);
  if (v149)
  {
    v150 = objc_msgSend(v149, sel_debugDescription);
    v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v153 = v152;

  }
  else
  {
    v153 = (void *)0xE500000000000000;
    v151 = 0x3E6C696E3CLL;
  }
  v154._countAndFlagsBits = v151;
  v154._object = v153;
  String.append(_:)(v154);
  swift_bridgeObjectRelease();
  v155._countAndFlagsBits = 8236;
  v155._object = (void *)0xE200000000000000;
  String.append(_:)(v155);
  v156 = v348[0];
  v157 = (void *)v348[1];
  v348[0] = v148;
  v348[1] = v147;
  swift_bridgeObjectRetain();
  v158._countAndFlagsBits = v156;
  v158._object = v157;
  String.append(_:)(v158);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v160 = v348[0];
  v159 = v348[1];
  strcpy((char *)v348, "bargeInModes: ");
  HIBYTE(v348[1]) = -18;
  v161 = swift_bridgeObjectRetain();
  v162._countAndFlagsBits = MEMORY[0x1B5E434D4](v161, MEMORY[0x1E0DEA968]);
  String.append(_:)(v162);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v163._countAndFlagsBits = 8236;
  v163._object = (void *)0xE200000000000000;
  String.append(_:)(v163);
  v164 = v348[0];
  v165 = (void *)v348[1];
  v348[0] = v160;
  v348[1] = v159;
  swift_bridgeObjectRetain();
  v166._countAndFlagsBits = v164;
  v166._object = v165;
  String.append(_:)(v166);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v168 = v348[0];
  v167 = v348[1];
  v348[0] = 0xD000000000000020;
  v348[1] = 0x80000001B4F001C0;
  v169 = v334;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval, v334, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  v170 = type metadata accessor for DateInterval();
  v171 = *(_QWORD *)(v170 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v169, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    v172 = (void *)0xE500000000000000;
    v173 = 0x3E6C696E3CLL;
  }
  else
  {
    v173 = MEMORY[0x1B5E3E350]();
    v172 = v174;
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v169, v170);
  }
  v175._countAndFlagsBits = v173;
  v175._object = v172;
  String.append(_:)(v175);
  swift_bridgeObjectRelease();
  v176._countAndFlagsBits = 8236;
  v176._object = (void *)0xE200000000000000;
  String.append(_:)(v176);
  v177 = v348[0];
  v178 = (void *)v348[1];
  v348[0] = v168;
  v348[1] = v167;
  swift_bridgeObjectRetain();
  v179._countAndFlagsBits = v177;
  v179._object = v178;
  String.append(_:)(v179);
  swift_bridgeObjectRelease();
  v180 = swift_bridgeObjectRelease();
  v182 = v348[0];
  v181 = v348[1];
  v348[0] = 0xD000000000000014;
  v348[1] = 0x80000001B4F001F0;
  v183 = v335;
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x150))(v180);
  DeviceRestrictions.aceSet.getter();
  (*(void (**)(char *, uint64_t))(v337 + 8))(v183, v338);
  v184 = swift_bridgeObjectRetain();
  v185 = specialized _copyCollectionToContiguousArray<A>(_:)(v184);
  swift_bridgeObjectRelease();
  v346 = v185;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v346);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v186 = BidirectionalCollection<>.joined(separator:)();
  v188 = v187;
  swift_release();
  v189._countAndFlagsBits = v186;
  v189._object = v188;
  String.append(_:)(v189);
  swift_bridgeObjectRelease();
  v190._countAndFlagsBits = 8236;
  v190._object = (void *)0xE200000000000000;
  String.append(_:)(v190);
  v191 = v348[0];
  v192 = (void *)v348[1];
  v348[0] = v182;
  v348[1] = v181;
  swift_bridgeObjectRetain();
  v193._countAndFlagsBits = v191;
  v193._object = v192;
  String.append(_:)(v193);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v195 = v348[0];
  v194 = v348[1];
  strcpy((char *)v348, "restrictions: ");
  HIBYTE(v348[1]) = -18;
  (*(void (**)(char *, uint64_t, uint64_t))(v340 + 16))(v339, (uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions, v345);
  v196._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v196);
  swift_bridgeObjectRelease();
  v197._countAndFlagsBits = 32;
  v197._object = (void *)0xE100000000000000;
  String.append(_:)(v197);
  v198 = v348[0];
  v199 = (void *)v348[1];
  v348[0] = v195;
  v348[1] = v194;
  swift_bridgeObjectRetain();
  v200._countAndFlagsBits = v198;
  v200._object = v199;
  String.append(_:)(v200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v202 = v348[0];
  v201 = v348[1];
  v345 = 0xD000000000000011;
  v348[0] = 0xD000000000000011;
  v348[1] = 0x80000001B4F00210;
  v203 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome);
  if (v203)
  {
    v204 = objc_msgSend(v203, sel_debugDescription);
    v205 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v207 = v206;

  }
  else
  {
    v207 = (void *)0xE500000000000000;
    v205 = 0x3E6C696E3CLL;
  }
  v208._countAndFlagsBits = v205;
  v208._object = v207;
  String.append(_:)(v208);
  swift_bridgeObjectRelease();
  v209._countAndFlagsBits = 32;
  v209._object = (void *)0xE100000000000000;
  String.append(_:)(v209);
  v210 = v348[0];
  v211 = (void *)v348[1];
  v348[0] = v202;
  v348[1] = v201;
  swift_bridgeObjectRetain();
  v212._countAndFlagsBits = v210;
  v212._object = v211;
  String.append(_:)(v212);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v214 = v348[0];
  v213 = v348[1];
  v348[0] = 0xD00000000000001ALL;
  v348[1] = 0x80000001B4F00230;
  v215 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId);
  v216 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId + 8);
  swift_bridgeObjectRetain();
  v217._countAndFlagsBits = v215;
  v217._object = v216;
  String.append(_:)(v217);
  swift_bridgeObjectRelease();
  v218._countAndFlagsBits = 32;
  v218._object = (void *)0xE100000000000000;
  String.append(_:)(v218);
  v219 = v348[0];
  v220 = (void *)v348[1];
  v348[0] = v214;
  v348[1] = v213;
  swift_bridgeObjectRetain();
  v221._countAndFlagsBits = v219;
  v221._object = v220;
  String.append(_:)(v221);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v223 = v348[0];
  v222 = v348[1];
  v348[0] = 0xD000000000000017;
  v348[1] = 0x80000001B4F00250;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup))
    v224 = 1702195828;
  else
    v224 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup))
    v225 = 0xE400000000000000;
  else
    v225 = 0xE500000000000000;
  v226 = v225;
  String.append(_:)(*(Swift::String *)&v224);
  swift_bridgeObjectRelease();
  v227._countAndFlagsBits = 32;
  v227._object = (void *)0xE100000000000000;
  String.append(_:)(v227);
  v228 = v348[0];
  v229 = (void *)v348[1];
  v348[0] = v223;
  v348[1] = v222;
  swift_bridgeObjectRetain();
  v230._countAndFlagsBits = v228;
  v230._object = v229;
  String.append(_:)(v230);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v232 = v348[0];
  v231 = v348[1];
  v348[0] = 0xD00000000000001FLL;
  v348[1] = 0x80000001B4F00270;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer))
    v233 = 1702195828;
  else
    v233 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer))
    v234 = 0xE400000000000000;
  else
    v234 = 0xE500000000000000;
  v235 = v234;
  String.append(_:)(*(Swift::String *)&v233);
  swift_bridgeObjectRelease();
  v236._countAndFlagsBits = 32;
  v236._object = (void *)0xE100000000000000;
  String.append(_:)(v236);
  v237 = v348[0];
  v238 = (void *)v348[1];
  v348[0] = v232;
  v348[1] = v231;
  swift_bridgeObjectRetain();
  v239._countAndFlagsBits = v237;
  v239._object = v238;
  String.append(_:)(v239);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v241 = v348[0];
  v240 = v348[1];
  v348[0] = v345;
  v348[1] = 0x80000001B4F00290;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest))
    v242 = 1702195828;
  else
    v242 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest))
    v243 = 0xE400000000000000;
  else
    v243 = 0xE500000000000000;
  v244 = v243;
  String.append(_:)(*(Swift::String *)&v242);
  swift_bridgeObjectRelease();
  v245._countAndFlagsBits = 32;
  v245._object = (void *)0xE100000000000000;
  String.append(_:)(v245);
  v246 = v348[0];
  v247 = (void *)v348[1];
  v348[0] = v241;
  v348[1] = v240;
  swift_bridgeObjectRetain();
  v248._countAndFlagsBits = v246;
  v248._object = v247;
  String.append(_:)(v248);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v250 = v348[0];
  v249 = v348[1];
  v340 = 0xD000000000000019;
  v348[0] = 0xD000000000000019;
  v348[1] = 0x80000001B4F002B0;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall))
    v251 = 1702195828;
  else
    v251 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall))
    v252 = 0xE400000000000000;
  else
    v252 = 0xE500000000000000;
  v253 = v252;
  String.append(_:)(*(Swift::String *)&v251);
  swift_bridgeObjectRelease();
  v254._countAndFlagsBits = 32;
  v254._object = (void *)0xE100000000000000;
  String.append(_:)(v254);
  v255 = v348[0];
  v256 = (void *)v348[1];
  v348[0] = v250;
  v348[1] = v249;
  swift_bridgeObjectRetain();
  v257._countAndFlagsBits = v255;
  v257._object = v256;
  String.append(_:)(v257);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v259 = v348[0];
  v258 = v348[1];
  v348[0] = 0xD000000000000017;
  v348[1] = 0x80000001B4F002D0;
  v346 = *(id *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : String]?);
  v260._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v260);
  swift_bridgeObjectRelease();
  v261 = v348[0];
  v262 = (void *)v348[1];
  v348[0] = v259;
  v348[1] = v258;
  swift_bridgeObjectRetain();
  v263._countAndFlagsBits = v261;
  v263._object = v262;
  String.append(_:)(v263);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v265 = v348[0];
  v264 = v348[1];
  v348[0] = 0xD00000000000001BLL;
  v348[1] = 0x80000001B4F002F0;
  v339 = (char *)0xD00000000000001BLL;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled))
    v266 = 1702195828;
  else
    v266 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled))
    v267 = 0xE400000000000000;
  else
    v267 = 0xE500000000000000;
  v268 = v267;
  String.append(_:)(*(Swift::String *)&v266);
  swift_bridgeObjectRelease();
  v269 = v348[0];
  v270 = (void *)v348[1];
  v348[0] = v265;
  v348[1] = v264;
  swift_bridgeObjectRetain();
  v271._countAndFlagsBits = v269;
  v271._object = v270;
  String.append(_:)(v271);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v273 = v348[0];
  v272 = v348[1];
  v348[0] = v336;
  v348[1] = 0x80000001B4F00310;
  LODWORD(v346) = *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
  v274._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v274);
  swift_bridgeObjectRelease();
  v275 = v348[0];
  v276 = (void *)v348[1];
  v348[0] = v273;
  v348[1] = v272;
  swift_bridgeObjectRetain();
  v277._countAndFlagsBits = v275;
  v277._object = v276;
  String.append(_:)(v277);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v279 = v348[0];
  v278 = v348[1];
  v348[0] = v340;
  v348[1] = 0x80000001B4F00330;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled))
    v280 = 1702195828;
  else
    v280 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled))
    v281 = 0xE400000000000000;
  else
    v281 = 0xE500000000000000;
  v282 = v281;
  String.append(_:)(*(Swift::String *)&v280);
  swift_bridgeObjectRelease();
  v283 = v348[0];
  v284 = (void *)v348[1];
  v348[0] = v279;
  v348[1] = v278;
  swift_bridgeObjectRetain();
  v285._countAndFlagsBits = v283;
  v285._object = v284;
  String.append(_:)(v285);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v287 = v348[0];
  v286 = v348[1];
  v348[0] = 0xD00000000000001BLL;
  v348[1] = 0x80000001B4F00350;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported))
    v288 = 1702195828;
  else
    v288 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported))
    v289 = 0xE400000000000000;
  else
    v289 = 0xE500000000000000;
  v290 = v289;
  String.append(_:)(*(Swift::String *)&v288);
  swift_bridgeObjectRelease();
  v291 = v348[0];
  v292 = (void *)v348[1];
  v348[0] = v287;
  v348[1] = v286;
  swift_bridgeObjectRetain();
  v293._countAndFlagsBits = v291;
  v293._object = v292;
  String.append(_:)(v293);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v295 = v348[0];
  v294 = v348[1];
  strcpy((char *)v348, "isInAmbient: ");
  HIWORD(v348[1]) = -4864;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient))
    v296 = 1702195828;
  else
    v296 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient))
    v297 = 0xE400000000000000;
  else
    v297 = 0xE500000000000000;
  v298 = v297;
  String.append(_:)(*(Swift::String *)&v296);
  swift_bridgeObjectRelease();
  v299 = v348[0];
  v300 = (void *)v348[1];
  v348[0] = v295;
  v348[1] = v294;
  swift_bridgeObjectRetain();
  v301._countAndFlagsBits = v299;
  v301._object = v300;
  String.append(_:)(v301);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v303 = v348[0];
  v302 = v348[1];
  v348[0] = 0xD000000000000013;
  v348[1] = 0x80000001B4F00370;
  (*(void (**)(char *, uint64_t, uint64_t))(v343 + 16))(v342, (uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, v344);
  v304._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v304);
  swift_bridgeObjectRelease();
  v305 = v348[0];
  v306 = (void *)v348[1];
  v348[0] = v303;
  v348[1] = v302;
  swift_bridgeObjectRetain();
  v307._countAndFlagsBits = v305;
  v307._object = v306;
  String.append(_:)(v307);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v309 = v348[0];
  v308 = v348[1];
  v348[0] = v345;
  v348[1] = 0x80000001B4F00390;
  v346 = *(id *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
  v310 = v346;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
  v311._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v311);
  swift_bridgeObjectRelease();
  v312 = v348[0];
  v313 = (void *)v348[1];
  v348[0] = v309;
  v348[1] = v308;
  swift_bridgeObjectRetain();
  v314._countAndFlagsBits = v312;
  v314._object = v313;
  String.append(_:)(v314);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v316 = v348[0];
  v315 = v348[1];
  v348[0] = v339;
  v348[1] = 0x80000001B4F003B0;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen))
    v317 = 1702195828;
  else
    v317 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen))
    v318 = 0xE400000000000000;
  else
    v318 = 0xE500000000000000;
  v319 = v318;
  String.append(_:)(*(Swift::String *)&v317);
  swift_bridgeObjectRelease();
  v320 = v348[0];
  v321 = (void *)v348[1];
  v348[0] = v316;
  v348[1] = v315;
  swift_bridgeObjectRetain();
  v322._countAndFlagsBits = v320;
  v322._object = v321;
  String.append(_:)(v322);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v324 = v348[0];
  v323 = v348[1];
  v348[0] = v341;
  v348[1] = 0x80000001B4F003D0;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked))
    v325 = 1702195828;
  else
    v325 = 0x65736C6166;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked))
    v326 = 0xE400000000000000;
  else
    v326 = 0xE500000000000000;
  v327 = v326;
  String.append(_:)(*(Swift::String *)&v325);
  swift_bridgeObjectRelease();
  v328 = v348[0];
  v329 = (void *)v348[1];
  v348[0] = v324;
  v348[1] = v323;
  swift_bridgeObjectRetain();
  v330._countAndFlagsBits = v328;
  v330._object = v329;
  String.append(_:)(v330);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v331._countAndFlagsBits = 125;
  v331._object = (void *)0xE100000000000000;
  String.append(_:)(v331);
  swift_bridgeObjectRelease();
  return v348[0];
}

uint64_t RequestContextData.isDeviceInStarkMode.getter()
{
  return RequestContextData.isDeviceInStarkMode.getter((void (*)(uint64_t))MEMORY[0x1E0DA8100]);
}

uint64_t RequestContextData.isDeviceInStarkMode.getter(void (*a1)(uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v3 = type metadata accessor for DeviceRestrictions();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DA8108];
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v16 - v10;
  v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x150))(v9);
  a1(v12);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, v4, MEMORY[0x1E0DA8110]);
  v13 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v3);
  v14(v11, v3);
  return v13 & 1;
}

uint64_t RequestContextData.deviceRestrictions.getter()
{
  return Restrictions.deviceRestrictions.getter();
}

{
  return MEMORY[0x1E0D9EC38]();
}

uint64_t RequestContextData.isDeviceInCarDND.getter()
{
  return RequestContextData.isDeviceInStarkMode.getter(MEMORY[0x1E0DA80C0]);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkActionMetadata>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SettingParseOptions>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11)
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 1;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 32 * v11)
      memmove(v13 + 4, a4 + 4, 32 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 32 * v11 || v16 >= v17 + 32 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)>, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AffinityScoring)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8)
      memmove(v10 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AffinityScoring));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(appBundleId: String, userData: [String : Any])>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (appBundleId: String, userData: [String : Any]));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3D70]);
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

id outlined copy of ConversationService.State(id result, unsigned __int8 a2)
{
  int v2;

  v2 = a2 >> 6;
  if (v2 == 2)
    return (id)swift_retain();
  if (v2 == 1)
    return result;
  return result;
}

Swift::Void __swiftcall TaskService.onNewTurn()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _QWORD v33[2];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v6 = *(_QWORD *)(v0 + 32);
  if (!(v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_23:
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.instrumentation);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1B4BE6000, v30, v31, "TaskService - No current task, creating a new one", v32, 2u);
      MEMORY[0x1B5E44758](v32, -1, -1);
    }

    static Date.now.getter();
    TaskService.addNewTask(id:state:isClientInitiated:creationTime:)(0, 0, 0, 1, (uint64_t)v5);
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_23;
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = MEMORY[0x1B5E43B94](0, v6);
LABEL_6:
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation == -1)
      goto LABEL_7;
    goto LABEL_31;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(_QWORD *)(v6 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
LABEL_31:
  swift_once();
LABEL_7:
  v8 = type metadata accessor for Logger();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v33[1] = v9;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v34 = v5;
    v15 = v14;
    v38 = v14;
    v35 = v1;
    *(_DWORD *)v13 = 136315138;
    swift_retain();
    v16 = FlowTask.description.getter();
    v36 = v3;
    v18 = v17;
    swift_release();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v3 = v36;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "TaskService - Existing currentTask: %s", v13, 0xCu);
    swift_arrayDestroy();
    v19 = v15;
    v5 = v34;
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  if (*(_BYTE *)(v7 + 32) == 2)
  {
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1B4BE6000, v20, v21, "TaskService - Current task has ended, creating a new one", v22, 2u);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }

    static Date.now.getter();
    TaskService.addNewTask(id:state:isClientInitiated:creationTime:)(0, 0, 0, 1, (uint64_t)v5);
    swift_release();
LABEL_28:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return;
  }
  swift_retain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v38 = v26;
    *(_DWORD *)v25 = 136315138;
    if (*(_BYTE *)(v7 + 32))
    {
      if (*(_BYTE *)(v7 + 32) == 1)
      {
        v27 = 0xE700000000000000;
        v28 = 0x676E696F676E6FLL;
      }
      else
      {
        v27 = 0xE500000000000000;
        v28 = 0x6465646E65;
      }
    }
    else
    {
      v27 = 0xE700000000000000;
      v28 = 0x64657461657263;
    }
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v23, v24, "TaskService - Current task state is %s, not creating new task", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v26, -1, -1);
    MEMORY[0x1B5E44758](v25, -1, -1);
    swift_release();

  }
  else
  {

    swift_release_n();
  }
}

uint64_t FlowTask.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  _BYTE v14[9];

  v14[8] = 0;
  _StringGuts.grow(_:)(68);
  v1._countAndFlagsBits = 0x6B736154776F6C46;
  v1._object = (void *)0xED0000203A64697BLL;
  String.append(_:)(v1);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3A6574617473202CLL;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  *(_QWORD *)v14 = *(unsigned __int8 *)(v0 + 32);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0xD000000000000015;
  v6._object = (void *)0x80000001B4F050F0;
  String.append(_:)(v6);
  if (*(_BYTE *)(v0 + 33))
    v7 = 1702195828;
  else
    v7 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 33))
    v8 = 0xE400000000000000;
  else
    v8 = 0xE500000000000000;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001B4F05110;
  v10._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v10);
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date();
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 125;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return *(_QWORD *)&v14[1];
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTag for AffinityValueComparison(unsigned __int8 *a1)
{
  return *a1;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0CB08F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t RequestContextData.makeBuilder()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v54[16];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v54[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v54[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for RequestContextData.Builder(0);
  v11 = swift_allocObject();
  RequestContextData.Builder.init()();
  v12 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v11 + 1040))(*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin), *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin + 8));
  swift_release();
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 1048))(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource);
  swift_release();
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1056))(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination);
  swift_release();
  v15 = v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode;
  v16 = type metadata accessor for ResponseMode();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v10, v15, v16);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
  v18 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v14 + 1064))(v10);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v18 + 1072))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree));
  swift_release();
  v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 1080))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction));
  swift_release();
  v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v20 + 1088))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled));
  swift_release();
  v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 1096))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled));
  swift_release();
  v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v22 + 1104))(*(_QWORD *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo));
  swift_release();
  v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v23 + 1112))(*(_QWORD *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo));
  swift_release();
  v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v24 + 1120))(*(_QWORD *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo));
  swift_release();
  v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 1128))(*(_QWORD *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_bargeInModes));
  swift_release();
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 1136))(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval);
  swift_release();
  v28 = v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions;
  v29 = type metadata accessor for Restrictions();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 16))(v7, v28, v29);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v7, 0, 1, v29);
  v31 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v27 + 1144))(v7);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v31 + 1152))(*(_QWORD *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome));
  swift_release();
  v33 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v32 + 1160))(*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId), *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId + 8));
  swift_release();
  v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v33 + 1168))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup));
  swift_release();
  v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34 + 1176))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer));
  swift_release();
  v36 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v35 + 1184))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest));
  swift_release();
  v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v36 + 1192))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall));
  swift_release();
  v38 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v37 + 1200))(*(_QWORD *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo));
  swift_release();
  v39 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 1208))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled));
  swift_release();
  v40 = *(unsigned int *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
  v41 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 1216);
  v54[12] = 0;
  v42 = v41(v40);
  swift_release();
  v43 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v42 + 1224))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled));
  swift_release();
  v44 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v43 + 1232))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported));
  swift_release();
  v45 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v44 + 1240))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient));
  swift_release();
  v46 = v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession;
  v47 = type metadata accessor for RequestPositionInSession();
  v48 = *(_QWORD *)(v47 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v4, v46, v47);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v4, 0, 1, v47);
  v49 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v45 + 1248))(v4);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for RequestPositionInSession?);
  v50 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v49 + 1256))(*(_QWORD *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo));
  swift_release();
  v51 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v50 + 1264))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen));
  swift_release();
  v52 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v51 + 1272))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked));
  swift_release();
  return v52;
}

uint64_t RequestContextData.Builder.peerInfo(_:)(void *a1)
{
  uint64_t v1;
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(*(_QWORD *)v1 + 520);
  v4 = a1;
  v3(a1);
  return swift_retain();
}

void RequestContextData.Builder.peerInfo.setter(void *a1)
{
  RequestContextData.Builder.peerInfo.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_peerInfo);
}

void RequestContextData.Builder.peerInfo.setter(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;

  v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;

}

uint64_t RequestContextData.Builder.endpointInfo(_:)(void *a1)
{
  uint64_t v1;
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(*(_QWORD *)v1 + 544);
  v4 = a1;
  v3(a1);
  return swift_retain();
}

void RequestContextData.Builder.endpointInfo.setter(void *a1)
{
  RequestContextData.Builder.peerInfo.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_endpointInfo);
}

uint64_t RequestContextData.Builder.instanceInfo(_:)(void *a1)
{
  uint64_t v1;
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(*(_QWORD *)v1 + 568);
  v4 = a1;
  v3(a1);
  return swift_retain();
}

void RequestContextData.Builder.instanceInfo.setter(void *a1)
{
  RequestContextData.Builder.peerInfo.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_instanceInfo);
}

uint64_t RequestContextData.Builder.originatingHome(_:)(void *a1)
{
  uint64_t v1;
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(*(_QWORD *)v1 + 664);
  v4 = a1;
  v3(a1);
  return swift_retain();
}

void RequestContextData.Builder.originatingHome.setter(void *a1)
{
  RequestContextData.Builder.peerInfo.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_originatingHome);
}

uint64_t RequestContextData.Builder.isUserOnActivePhoneCall(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 784))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isUserOnActivePhoneCall.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isUserOnActivePhoneCall);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.positionInSession(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, &demangling cache variable for type metadata for RequestPositionInSession?);
  (*(void (**)(char *))(*(_QWORD *)v1 + 952))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.positionInSession.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_positionInSession, &demangling cache variable for type metadata for RequestPositionInSession?);
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t ServiceBridgeDelegate.xpcWrapper.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for ServiceBridgeDelegateXPCWrapper();
  v5 = swift_allocObject();
  v6 = specialized ServiceBridgeDelegateXPCWrapper.init(wrapping:)(v2, v5, a1, a2);
  swift_unknownObjectRetain();
  return v6;
}

uint64_t type metadata accessor for ServiceBridgeDelegateXPCWrapper()
{
  return objc_opt_self();
}

uint64_t specialized ServiceBridgeDelegateXPCWrapper.init(wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a2 + 16) = a1;
  *(_QWORD *)(a2 + 24) = a4;
  return a2;
}

uint64_t type metadata accessor for SharedContextServiceImpl()
{
  return objc_opt_self();
}

uint64_t SharedContextServiceImpl.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for EndpointInfoProviding.getMediaRouteIdentifier() in conformance EndpointInfoProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

void SharedContextServiceImpl.fetchContext(for:includesNearbyDevices:with:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  Class isa;
  void *v10;
  _QWORD v11[6];

  v8 = *(void **)(v4 + 16);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v11[4] = a3;
  v11[5] = a4;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [AFServiceDeviceContext]?) -> ();
  v11[3] = &block_descriptor_24;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_fetchContextsFor_includesNearByDevices_completion_, isa, a2 & 1, v10);
  _Block_release(v10);

}

uint64_t ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v14 != -1)
    swift_once();
  swift_beginAccess();
  v15 = static MessageBusActor.shared;
  v16 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v17 + 32) = v5;
  *(_QWORD *)(v17 + 40) = a1;
  *(_BYTE *)(v17 + 48) = a2 & 1;
  *(_QWORD *)(v17 + 56) = a3;
  *(_QWORD *)(v17 + 64) = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:), v17);
  return swift_release();
}

uint64_t ConversationBridgeProcessorDelegate.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t Strong;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v10 = *(_QWORD *)(Strong + 80);
    v11 = *(void **)(Strong + 88);
    v12 = *(void **)(v4 + 24);
    swift_bridgeObjectRetain();
    static ServiceBridgeDelegate.fetchContextsDefault(for:includesNearByDevices:requestId:serviceHelper:completion:)(a1, a2 & 1, v10, v11, v12, (uint64_t)a3, a4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v22 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain();
      v19 = Set.description.getter();
      v21 = v20;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v15, v16, "ConversationRequestProcessor already released, ignoring fetchContexts of %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v18, -1, -1);
      MEMORY[0x1B5E44758](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return a3(0);
  }
}

void static ServiceBridgeDelegate.fetchContextsDefault(for:includesNearByDevices:requestId:serviceHelper:completion:)(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  NSSet v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  uint64_t aBlock[6];

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v28 = a6;
    v29 = a2;
    v16 = (uint8_t *)swift_slowAlloc();
    v27 = a4;
    v17 = swift_slowAlloc();
    aBlock[0] = v17;
    v26 = a7;
    *(_DWORD *)v16 = 136315138;
    swift_bridgeObjectRetain();
    v18 = Set.description.getter();
    v20 = v19;
    swift_bridgeObjectRelease();
    v21 = v18;
    a6 = v28;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Trying to fetch context for keys: %s", v16, 0xCu);
    swift_arrayDestroy();
    v22 = v17;
    a4 = v27;
    MEMORY[0x1B5E44758](v22, -1, -1);
    v23 = v16;
    a2 = v29;
    MEMORY[0x1B5E44758](v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if ((objc_msgSend(a5, sel_respondsToSelector_, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_, v26) & 1) != 0)
  {
    swift_unknownObjectRetain();
    v24.super.isa = Set._bridgeToObjectiveC()().super.isa;
    if (a4)
      a4 = (void *)MEMORY[0x1B5E432E8](a3, a4);
    aBlock[4] = a6;
    aBlock[5] = a7;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_9_0;
    v25 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a5, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_, v24.super.isa, a4, a2 & 1, v25);
    _Block_release(v25);
    swift_unknownObjectRelease();

  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);

  v2 = a2;
  v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for AFServiceDeviceContext();
    v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for AFServiceDeviceContext()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AFServiceDeviceContext;
  if (!lazy cache variable for type metadata for AFServiceDeviceContext)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
  }
  return result;
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ()(uint64_t a1, uint64_t a2)
{
  NSArray v3;
  Class isa;

  if (a1)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.isa = 0;
  }
  isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [AFServiceDeviceContext]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);

  v2 = a2;
  v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
    v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of ConversationHelperInput(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_QWORD *initializeWithCopy for RemoteConversationTurnData(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  _OWORD *v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = (void *)a2[4];
  a1[4] = v8;
  v9 = a3[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v8;
  if (v13(v10, 1, v11))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v16 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v17 = a3[10];
  v18 = a3[11];
  v19 = *(void **)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v19;
  v20 = (char *)a1 + v18;
  v21 = (_OWORD *)((char *)a2 + v18);
  v22 = *(_QWORD *)((char *)a2 + v18 + 8);
  swift_retain();
  v23 = v19;
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)v20 = *v21;
  }
  else
  {
    v24 = *(_QWORD *)v21;
    outlined copy of Data._Representation(v24, v22);
    *(_QWORD *)v20 = v24;
    *((_QWORD *)v20 + 1) = v22;
  }
  return a1;
}

uint64_t outlined init with take of StringKeyedValue(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[40] = a2;
  v3[41] = v2;
  v3[39] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[42] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = *v4;
  *(_QWORD *)(v6 + 192) = v3;
  *(_BYTE *)(v6 + 184) = a3;
  *(_QWORD *)(v6 + 168) = a1;
  *(_QWORD *)(v6 + 176) = a2;
  *(_QWORD *)(v6 + 160) = v4;
  *(_QWORD *)(v6 + 376) = a1;
  *(_QWORD *)(v6 + 384) = v3;
  swift_task_dealloc();
  if (!v3)
  {
    swift_release();
    *(_BYTE *)(v6 + 440) = a3;
  }
  return swift_task_switch();
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = *v4;
  *(_QWORD *)(v6 + 232) = v3;
  *(_BYTE *)(v6 + 224) = a3;
  *(_QWORD *)(v6 + 208) = a1;
  *(_QWORD *)(v6 + 216) = a2;
  *(_QWORD *)(v6 + 200) = v4;
  *(_QWORD *)(v6 + 424) = a1;
  *(_QWORD *)(v6 + 432) = v3;
  swift_task_dealloc();
  if (!v3)
  {
    swift_release();
    *(_BYTE *)(v6 + 441) = a3;
  }
  return swift_task_switch();
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(v5 + 296) = a1;
  *(_QWORD *)(v5 + 304) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_release();
    *(_BYTE *)(v5 + 360) = a2;
  }
  return swift_task_switch();
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(v5 + 344) = a1;
  *(_QWORD *)(v5 + 352) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_release();
    *(_BYTE *)(v5 + 361) = a2;
  }
  return swift_task_switch();
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[30] = a3;
  v4[31] = v3;
  v4[29] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[32] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  uint64_t v0;
  int v1;
  void *v2;
  void *v3;

  v1 = *(unsigned __int8 *)(v0 + 361);
  swift_release();
  if (v1)
  {
    v2 = *(void **)(v0 + 312);
    swift_willThrow();

    swift_unknownObjectRelease();
  }
  else
  {
    v3 = *(void **)(v0 + 312);
    swift_unknownObjectRelease();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  void *aBlock;
  char *v42;
  uint64_t v43;

  v1 = (_QWORD *)v0[31];
  v2 = (void *)v1[2];
  v0[33] = v2;
  if (v2)
  {
    v4 = v0[29];
    v3 = v0[30];
    v5 = v1[3];
    v0[34] = v5;
    v6 = (_QWORD *)swift_allocObject();
    v0[35] = v6;
    v6[2] = v4;
    v6[3] = v3;
    v6[4] = v2;
    v6[5] = v5;
    outlined copy of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v2);
    v42 = (char *)&async function pointer to specialized InterruptibleTaskManager.perform<A>(_:)
        + async function pointer to specialized InterruptibleTaskManager.perform<A>(_:);
    swift_retain();
    v7 = v2;
    swift_unknownObjectRetain();
    v8 = (_QWORD *)swift_task_alloc();
    v0[36] = v8;
    *v8 = v0;
    v8[1] = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v9 = &async function pointer to partial apply for specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v10 = v6;
    return ((uint64_t (*)(void *, _QWORD *))v42)(v9, v10);
  }
  v12 = v1[10];
  v13 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v0[39] = v14;
  if (v14)
  {
    v15 = (void *)v14;
    if (one-time initialization token for xpcInterface != -1)
      swift_once();
    objc_msgSend(v15, sel_setRemoteObjectInterface_, static SharedFlowPluginXPCServer.xpcInterface, v0 + 14);
    v16 = swift_allocObject();
    swift_weakInit();
    v0[12] = partial apply for closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[13] = v16;
    v17 = MEMORY[0x1E0C809B0];
    v0[8] = MEMORY[0x1E0C809B0];
    v0[9] = 1107296256;
    v0[10] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[11] = &block_descriptor_68;
    v18 = _Block_copy(v0 + 8);
    swift_release();
    objc_msgSend(v15, sel_setInvalidationHandler_, v18);
    _Block_release(v18);
    v19 = swift_allocObject();
    swift_weakInit();
    v0[6] = partial apply for closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[7] = v19;
    v0[2] = v17;
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[5] = &block_descriptor_73;
    v20 = _Block_copy(v0 + 2);
    swift_release();
    objc_msgSend(v15, sel_setInterruptionHandler_, v20);
    _Block_release(v20);
    objc_msgSend(v15, sel_resume);
    v0[18] = closure #4 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[19] = 0;
    v0[14] = v17;
    v0[15] = 1107296256;
    v0[16] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v0[17] = &block_descriptor_76;
    v21 = _Block_copy(aBlock);
    v22 = objc_msgSend(v15, sel_remoteObjectProxyWithErrorHandler_, v21);
    _Block_release(v21);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedFlowPluginServiceXPC);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v23 = v0[28];
      v0[40] = v23;
      if (one-time initialization token for executor != -1)
        swift_once();
      v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_1B4BE6000, v25, v26, "Connection set up completed", v27, 2u);
        MEMORY[0x1B5E44758](v27, -1, -1);
      }
      v28 = v0[30];
      v29 = v0[29];

      v30 = (void *)v1[2];
      v1[2] = v15;
      v1[3] = v23;
      v31 = v15;
      swift_unknownObjectRetain();
      outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v30);
      v32 = (_QWORD *)swift_allocObject();
      v0[41] = v32;
      v32[2] = v29;
      v32[3] = v28;
      v32[4] = v23;
      v42 = (char *)&async function pointer to specialized InterruptibleTaskManager.perform<A>(_:)
          + async function pointer to specialized InterruptibleTaskManager.perform<A>(_:);
      swift_retain();
      swift_unknownObjectRetain();
      v33 = (_QWORD *)swift_task_alloc();
      v0[42] = v33;
      *v33 = v0;
      v33[1] = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
      v9 = &async function pointer to partial apply for specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
      v10 = v32;
      return ((uint64_t (*)(void *, _QWORD *))v42)(v9, v10);
    }
    swift_release();
    lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError();
    swift_allocError();
    *v40 = 1;
    swift_willThrow();

  }
  else
  {
    swift_release();
    if (one-time initialization token for executor != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v43 = v38;
      *(_DWORD *)v37 = 136315138;
      v0[27] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000001B4EF9910, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v35, v36, "%s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v38, -1, -1);
      MEMORY[0x1B5E44758](v37, -1, -1);
    }

    lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError();
    swift_allocError();
    *v39 = 0;
    swift_willThrow();
  }
  return ((uint64_t (*)(void))v0[1])();
}

{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  void *aBlock;
  char *v42;
  uint64_t v43;

  v1 = (_QWORD *)v0[41];
  v2 = (void *)v1[2];
  v0[43] = v2;
  if (v2)
  {
    v4 = v0[39];
    v3 = v0[40];
    v5 = v1[3];
    v0[44] = v5;
    v6 = (_QWORD *)swift_allocObject();
    v0[45] = v6;
    v6[2] = v4;
    v6[3] = v3;
    v6[4] = v2;
    v6[5] = v5;
    outlined copy of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v2);
    v42 = (char *)&async function pointer to specialized InterruptibleTaskManager.perform<A>(_:)
        + async function pointer to specialized InterruptibleTaskManager.perform<A>(_:);
    swift_retain();
    v7 = v2;
    swift_unknownObjectRetain();
    v8 = (_QWORD *)swift_task_alloc();
    v0[46] = v8;
    *v8 = v0;
    v8[1] = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v9 = &async function pointer to partial apply for specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v10 = v6;
    return ((uint64_t (*)(void *, _QWORD *))v42)(v9, v10);
  }
  v12 = v1[10];
  v13 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v0[49] = v14;
  if (v14)
  {
    v15 = (void *)v14;
    if (one-time initialization token for xpcInterface != -1)
      swift_once();
    objc_msgSend(v15, sel_setRemoteObjectInterface_, static SharedFlowPluginXPCServer.xpcInterface, v0 + 14);
    v16 = swift_allocObject();
    swift_weakInit();
    v0[12] = partial apply for closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[13] = v16;
    v17 = MEMORY[0x1E0C809B0];
    v0[8] = MEMORY[0x1E0C809B0];
    v0[9] = 1107296256;
    v0[10] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[11] = &block_descriptor_5;
    v18 = _Block_copy(v0 + 8);
    swift_release();
    objc_msgSend(v15, sel_setInvalidationHandler_, v18);
    _Block_release(v18);
    v19 = swift_allocObject();
    swift_weakInit();
    v0[6] = partial apply for closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[7] = v19;
    v0[2] = v17;
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[5] = &block_descriptor_22;
    v20 = _Block_copy(v0 + 2);
    swift_release();
    objc_msgSend(v15, sel_setInterruptionHandler_, v20);
    _Block_release(v20);
    objc_msgSend(v15, sel_resume);
    v0[18] = closure #4 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[19] = 0;
    v0[14] = v17;
    v0[15] = 1107296256;
    v0[16] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v0[17] = &block_descriptor_25;
    v21 = _Block_copy(aBlock);
    v22 = objc_msgSend(v15, sel_remoteObjectProxyWithErrorHandler_, v21);
    _Block_release(v21);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedFlowPluginServiceXPC);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v23 = v0[38];
      v0[50] = v23;
      if (one-time initialization token for executor != -1)
        swift_once();
      v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_1B4BE6000, v25, v26, "Connection set up completed", v27, 2u);
        MEMORY[0x1B5E44758](v27, -1, -1);
      }
      v28 = v0[40];
      v29 = v0[39];

      v30 = (void *)v1[2];
      v1[2] = v15;
      v1[3] = v23;
      v31 = v15;
      swift_unknownObjectRetain();
      outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v30);
      v32 = (_QWORD *)swift_allocObject();
      v0[51] = v32;
      v32[2] = v29;
      v32[3] = v28;
      v32[4] = v23;
      v42 = (char *)&async function pointer to specialized InterruptibleTaskManager.perform<A>(_:)
          + async function pointer to specialized InterruptibleTaskManager.perform<A>(_:);
      swift_retain();
      swift_unknownObjectRetain();
      v33 = (_QWORD *)swift_task_alloc();
      v0[52] = v33;
      *v33 = v0;
      v33[1] = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
      v9 = &async function pointer to partial apply for specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
      v10 = v32;
      return ((uint64_t (*)(void *, _QWORD *))v42)(v9, v10);
    }
    swift_release();
    lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError();
    swift_allocError();
    *v40 = 1;
    swift_willThrow();

  }
  else
  {
    swift_release();
    if (one-time initialization token for executor != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v43 = v38;
      *(_DWORD *)v37 = 136315138;
      v0[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000001B4EF9910, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v35, v36, "%s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v38, -1, -1);
      MEMORY[0x1B5E44758](v37, -1, -1);
    }

    lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError();
    swift_allocError();
    *v39 = 0;
    swift_willThrow();
  }
  return ((uint64_t (*)(void))v0[1])();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 344);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 264);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  void *v6;

  v1 = *(unsigned __int8 *)(v0 + 441);
  swift_release();
  v2 = *(_QWORD *)(v0 + 424);
  if (v1)
  {
    v3 = *(void **)(v0 + 392);
    swift_willThrow();

    swift_unknownObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 216);
    v6 = *(void **)(v0 + 392);
    swift_unknownObjectRelease();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v5);
  }
}

{
  uint64_t v0;
  int v1;
  void *v2;
  void *v3;

  v1 = *(unsigned __int8 *)(v0 + 360);
  swift_release();
  if (v1)
  {
    v2 = *(void **)(v0 + 264);
    swift_willThrow();

    swift_unknownObjectRelease();
  }
  else
  {
    v3 = *(void **)(v0 + 264);
    swift_unknownObjectRelease();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 312);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  void *v6;

  v1 = *(unsigned __int8 *)(v0 + 440);
  swift_release();
  v2 = *(_QWORD *)(v0 + 376);
  if (v1)
  {
    v3 = *(void **)(v0 + 344);
    swift_willThrow();

    swift_unknownObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 176);
    v6 = *(void **)(v0 + 344);
    swift_unknownObjectRelease();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v5);
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 392);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *outlined copy of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(void *result)
{
  id v1;

  if (result)
  {
    v1 = result;
    return (void *)swift_unknownObjectRetain();
  }
  return result;
}

void specialized InterruptibleTaskManager.perform<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v13;
  uint64_t v14;

  v1 = v0[16];
  v2 = *(_QWORD *)(v1 + 40);
  v0[19] = v2;
  if (v2 == -1)
  {
    __break(1u);
  }
  else
  {
    v3 = v0[17];
    v4 = v0[14];
    v5 = v0[15];
    *(_QWORD *)(v1 + 40) = v2 + 1;
    v6 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    v7 = static MessageBusActor.shared;
    v8 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v7;
    v9[3] = v8;
    v9[4] = v1;
    v9[5] = v2;
    v9[6] = v4;
    v9[7] = v5;
    swift_retain();
    swift_retain();
    swift_retain();
    v10 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime23InterruptibleTaskResultOyAG18RemoteConversation_pSgG_Tgm5(v3, (uint64_t)&async function pointer to partial apply for specialized closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v9);
    v0[20] = v10;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v1;
    *(_QWORD *)(v11 + 24) = v10;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for specialized closure #2 in InterruptibleTaskManager.perform<A>(_:), v11, v2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v1 + 32) = v14;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v13 = (_QWORD *)swift_task_alloc();
    v0[21] = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InterruptibleTaskResult<RemoteConversation?>);
    *v13 = v0;
    v13[1] = specialized InterruptibleTaskManager.perform<A>(_:);
    Task<>.value.getter();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v13;
  uint64_t v14;

  v1 = v0[15];
  v2 = *(_QWORD *)(v1 + 40);
  v0[18] = v2;
  if (v2 == -1)
  {
    __break(1u);
  }
  else
  {
    v3 = v0[16];
    v4 = v0[13];
    v5 = v0[14];
    *(_QWORD *)(v1 + 40) = v2 + 1;
    v6 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    v7 = static MessageBusActor.shared;
    v8 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v7;
    v9[3] = v8;
    v9[4] = v1;
    v9[5] = v2;
    v9[6] = v4;
    v9[7] = v5;
    swift_retain();
    swift_retain();
    swift_retain();
    v10 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime23InterruptibleTaskResultOyytG_Tgm5(v3, (uint64_t)&async function pointer to partial apply for specialized closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v9);
    v0[19] = v10;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v1;
    *(_QWORD *)(v11 + 24) = v10;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for specialized closure #2 in InterruptibleTaskManager.perform<A>(_:), v11, v2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v1 + 32) = v14;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v13 = (_QWORD *)swift_task_alloc();
    v0[20] = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InterruptibleTaskResult<()>);
    *v13 = v0;
    v13[1] = specialized InterruptibleTaskManager.perform<A>(_:);
    Task<>.value.getter();
  }
}

uint64_t specialized InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[16] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[17] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[17] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[18] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t specialized InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  swift_beginAccess();
  v1 = specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  swift_release();
  if (v1)
    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v1);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(unsigned __int8 *)(v0 + 96);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  swift_beginAccess();
  v1 = specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  swift_release();
  if (v1)
    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v1);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(unsigned __int8 *)(v0 + 104);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v3, v2, v4);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

void specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void (*)(unint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t);
  void *v12;
  id v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (void (*)(unint64_t, char *, uint64_t))((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  v11 = *(void (**)(void (*)(unint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v8, 0, 1, v9);
  specialized ManagedContinuation.updateState(continuation:result:)(v8, 0, 0, 0xFFu);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    v12 = (void *)swift_allocError();
    CancellationError.init()();
    v11(v8, 1, 1, v9);
    v13 = v12;
    specialized ManagedContinuation.updateState(continuation:result:)(v8, v12, 0, 1u);

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  }
  else
  {
    a3(a2);
  }
}

void specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t *a5, uint64_t *a6, void (*a7)(char *, void *, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void *v19;
  id v20;
  uint64_t v21;

  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(a6);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a1, v16);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v18(v15, 0, 1, v16);
  a7(v15, 0, 255);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, a5);
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    v19 = (void *)swift_allocError();
    CancellationError.init()();
    v18(v15, 1, 1, v16);
    v20 = v19;
    a7(v15, v19, 1);

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, a5);
  }
  else
  {
    a3(a2);
  }
}

uint64_t partial apply for closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v2 + v7;
  v9 = (uint64_t *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(a1, a2, v8, v10, v11);
}

uint64_t closure #2 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = closure #2 in withCancellableContinuation<A>(body:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = closure #2 in withCancellableContinuation<A>(body:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

id RemoteConversationTurnData.xpcRepresentation.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  id v13;
  Class isa;
  id v15;
  Class v16;
  uint64_t v17;
  char v18;
  void *v19;
  objc_class *v20;
  _BYTE *v21;
  _QWORD *v22;
  _QWORD *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  objc_super v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  v26 = *v1;
  v27 = v6;
  v8 = (void *)v1[4];
  v9 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + v9[7], (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10);
  swift_bridgeObjectRetain();
  v13 = v8;
  swift_bridgeObjectRetain();
  isa = 0;
  if (v12 != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v10);
  }
  v15 = *(id *)((char *)v1 + v9[8]);
  if (v15)
    v15 = FlowTask.xpcRepresentation.getter();
  if (*(_QWORD *)((char *)v1 + v9[11] + 8) >> 60 == 15)
    v16 = 0;
  else
    v16 = Data._bridgeToObjectiveC()().super.isa;
  v17 = v9[10];
  v18 = *((_BYTE *)v1 + v9[9]);
  v19 = *(void **)((char *)v1 + v17);
  v20 = (objc_class *)type metadata accessor for ConversationTurnDataXPC();
  v21 = objc_allocWithZone(v20);
  v22 = &v21[OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId];
  *v22 = v26;
  v22[1] = v5;
  v23 = &v21[OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId];
  *v23 = v27;
  v23[1] = v7;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData] = v13;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId] = isa;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationTurnDataXPC_flowTask] = v15;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData] = v16;
  v21[OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR] = v18;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext] = v19;
  v28.receiver = v21;
  v28.super_class = v20;
  v24 = v19;
  return objc_msgSendSuper2(&v28, sel_init);
}

id FlowTask.xpcRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  void (*v9)(char *, uint64_t, uint64_t);
  objc_class *v10;
  _BYTE *v11;
  _QWORD *v12;
  id v13;
  objc_super v15;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v7 = *(_BYTE *)(v0 + 32);
  v8 = *(_BYTE *)(v0 + 33);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v9(v4, v0 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v1);
  v10 = (objc_class *)type metadata accessor for FlowTaskXPC(0);
  v11 = objc_allocWithZone(v10);
  v12 = &v11[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id];
  *v12 = v6;
  v12[1] = v5;
  v11[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state] = v7;
  v11[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated] = v8;
  v9(&v11[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_creationTime], (uint64_t)v4, v1);
  v15.receiver = v11;
  v15.super_class = v10;
  swift_bridgeObjectRetain();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v13;
}

uint64_t type metadata accessor for FlowTaskXPC(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for FlowTaskXPC);
}

uint64_t type metadata accessor for ConversationTurnDataXPC()
{
  return objc_opt_self();
}

Swift::Void __swiftcall ConversationTurnDataXPC.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;

  v3 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId), *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId + 8));
  v4 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF4CE0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  if (*(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId + 8))
    v5 = MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId));
  else
    v5 = 0;
  v6 = (void *)MEMORY[0x1B5E432E8](0x75716552746F6F72, 0xED00006449747365);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

  v7 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData);
  v8 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF5060);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  v9 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId);
  v10 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5080);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);

  v11 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_flowTask);
  v12 = (void *)MEMORY[0x1B5E432E8](0x6B736154776F6C66, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);

  v13 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData);
  v14 = (void *)MEMORY[0x1B5E432E8](0x52526465706F6373, 0xEC00000061746144);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v13, v14);

  v15 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR);
  v16 = (void *)MEMORY[0x1B5E432E8](0xD000000000000017, 0x80000001B4EF50A0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v15, v16);

  v17 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext);
  v18 = (id)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF50C0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v17, v18);

}

Swift::Void __swiftcall RequestContextData.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  Class isa;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  objc_class *v64;
  char *v65;
  _QWORD *v66;
  Class v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  int v72;
  int v73;
  char v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  char v81;
  Class v82;
  void *v83;
  char *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  id v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  Class v100;
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  Class v120;
  void *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  objc_class *v132;
  uint64_t v133;

  v3 = type metadata accessor for DeviceRestrictions();
  v126 = *(_QWORD *)(v3 - 8);
  v127 = v3;
  MEMORY[0x1E0C80A78](v3);
  v125 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v5);
  v130 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DateInterval();
  v131 = *(_QWORD **)(v7 - 8);
  v132 = (objc_class *)v7;
  MEMORY[0x1E0C80A78](v7);
  v124 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AudioDestination();
  v128 = *(_QWORD *)(v12 - 8);
  v129 = v12;
  MEMORY[0x1E0C80A78](v12);
  v123 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AudioSource();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin), *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin + 8));
  v22 = (void *)MEMORY[0x1B5E432E8](0x69724F7475706E69, 0xEB000000006E6967);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v21, v22);

  v23 = v1;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    v24 = AudioSource.aceValue.getter();
    v25 = (void *)MEMORY[0x1B5E432E8](v24);
    swift_bridgeObjectRelease();
    v26 = (void *)MEMORY[0x1B5E432E8](0x756F536F69647561, 0xEB00000000656372);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v25, v26);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination, (uint64_t)v11, &demangling cache variable for type metadata for AudioDestination?);
  v28 = v128;
  v27 = v129;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v11, 1, v129) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for AudioDestination?);
    v29 = &selRef_reason;
  }
  else
  {
    v30 = v123;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v123, v11, v27);
    v31 = AudioDestination.aceValue.getter();
    v32 = (void *)MEMORY[0x1B5E432E8](v31);
    swift_bridgeObjectRelease();
    v33 = (void *)MEMORY[0x1B5E432E8](0xD000000000000010, 0x80000001B4EFFF20);
    v29 = &selRef_reason;
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v32, v33);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }
  v34 = ResponseMode.aceValue.getter();
  v35 = (void *)MEMORY[0x1B5E432E8](v34);
  swift_bridgeObjectRelease();
  v36 = (void *)MEMORY[0x1B5E432E8](0x65736E6F70736572, 0xEC00000065646F4DLL);
  objc_msgSend(with.super.isa, v29[34], v35, v36);

  v37 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree);
  v38 = (void *)MEMORY[0x1B5E432E8](0x7246736579457369, 0xEA00000000006565);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v37, v38);

  v39 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction);
  v40 = (void *)MEMORY[0x1B5E432E8](0x7463657269447369, 0xEE006E6F69746341);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v39, v40);

  v41 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled);
  v42 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5160);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v41, v42);

  v43 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled);
  v44 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5180);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v43, v44);

  v45 = *(void **)((char *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  if (v45)
  {
    v46 = v45;
    v47 = (void *)MEMORY[0x1B5E432E8](0x6F666E4972656570, 0xE800000000000000);
    objc_msgSend(with.super.isa, v29[34], v46, v47);

  }
  v48 = *(void **)((char *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
  if (v48)
  {
    v49 = v48;
    v50 = (void *)MEMORY[0x1B5E432E8](0x746E696F70646E65, 0xEC0000006F666E49);
    objc_msgSend(with.super.isa, v29[34], v49, v50);

  }
  v51 = *(void **)((char *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo);
  if (v51)
  {
    v52 = v51;
    v53 = (void *)MEMORY[0x1B5E432E8](0x65636E6174736E69, 0xEC0000006F666E49);
    objc_msgSend(with.super.isa, v29[34], v52, v53);

  }
  v54 = *(_QWORD *)((char *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_bargeInModes);
  v55 = *(_QWORD *)(v54 + 16);
  v56 = MEMORY[0x1E0DEE9D8];
  if (v55)
  {
    v133 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    v57 = (uint64_t *)(v54 + 40);
    do
    {
      v58 = *(v57 - 1);
      v59 = *v57;
      swift_bridgeObjectRetain();
      MEMORY[0x1B5E432E8](v58, v59);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v57 += 2;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease();
    v29 = &selRef_reason;
  }
  v129 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v61 = (void *)MEMORY[0x1B5E432E8](0x4D6E496567726162, 0xEC0000007365646FLL);
  objc_msgSend(with.super.isa, v29[34], isa, v61);

  v62 = v130;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval, v130, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  v63 = v131;
  v64 = v132;
  if (((unsigned int (*)(uint64_t, uint64_t, objc_class *))v131[6])(v62, 1, v132) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v62, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  }
  else
  {
    v65 = v124;
    ((void (*)(char *, uint64_t, objc_class *))v63[4])(v124, v62, v64);
    v66 = v63;
    v67 = DateInterval._bridgeToObjectiveC()().super.isa;
    v68 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001ELL, 0x80000001B4EFFF60);
    objc_msgSend(with.super.isa, v29[34], v67, v68);

    ((void (*)(char *, objc_class *))v66[1])(v65, v64);
  }
  v69 = Restrictions.restrictedCommands.getter();
  v70 = *(_QWORD *)(v69 + 16);
  if (v70)
  {
    v131 = v23;
    v132 = with.super.isa;
    v133 = v56;
    specialized ContiguousArray.reserveCapacity(_:)();
    v71 = specialized Set.startIndex.getter(v69);
    v73 = v72;
    v75 = v74 & 1;
    while ((v71 & 0x8000000000000000) == 0 && v71 < 1 << *(_BYTE *)(v69 + 32))
    {
      if (((*(_QWORD *)(v69 + 56 + (((unint64_t)v71 >> 3) & 0xFFFFFFFFFFFFF8)) >> v71) & 1) == 0)
        goto LABEL_35;
      if (*(_DWORD *)(v69 + 36) != v73)
        goto LABEL_36;
      v76 = (uint64_t *)(*(_QWORD *)(v69 + 48) + 16 * v71);
      v77 = *v76;
      v78 = v76[1];
      swift_bridgeObjectRetain();
      MEMORY[0x1B5E432E8](v77, v78);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v79 = specialized _NativeSet.index(after:)(v71, v73, v75 & 1, v69);
      v71 = v79;
      v73 = v80;
      v75 = v81 & 1;
      if (!--v70)
      {
        outlined consume of Set<String>.Index._Variant(v79, v80, v81 & 1);
        swift_bridgeObjectRelease();
        v23 = v131;
        with.super.isa = v132;
        v29 = &selRef_reason;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_29:
    v82 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v83 = (void *)MEMORY[0x1B5E432E8](0x7463697274736572, 0xEC000000736E6F69);
    objc_msgSend(with.super.isa, v29[34], v82, v83);

    v84 = v125;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v23) + 0x150))();
    v85 = DeviceRestrictions.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v126 + 8))(v84, v127);
    v86 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EFFF80);
    -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v85, v86);

    v87 = *(void **)((char *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome);
    if (v87)
    {
      v88 = v87;
      v89 = (void *)MEMORY[0x1B5E432E8](0x74616E696769726FLL, 0xEF656D6F48676E69);
      objc_msgSend(with.super.isa, v29[34], v88, v89);

    }
    v90 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)((char *)v23+ OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId), *(_QWORD *)((char *)v23+ OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId+ 8));
    v91 = (void *)MEMORY[0x1B5E432E8](0xD000000000000018, 0x80000001B4EFFFA0);
    objc_msgSend(with.super.isa, v29[34], v90, v91);

    v92 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup);
    v93 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF7130);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v92, v93);

    v94 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer);
    v95 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001DLL, 0x80000001B4EFBD90);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v94, v95);

    v96 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest);
    v97 = (void *)MEMORY[0x1B5E432E8](0x6863656570537369, 0xEF74736575716552);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v96, v97);

    v98 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall);
    v99 = (void *)MEMORY[0x1B5E432E8](0xD000000000000017, 0x80000001B4EFD8A0);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v98, v99);

    if (*(_QWORD *)((char *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo))
    {
      v100 = Dictionary._bridgeToObjectiveC()().super.isa;
      v101 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EFFFC0);
      objc_msgSend(with.super.isa, v29[34], v100, v101);

    }
    v102 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled);
    v103 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4EFFFE0);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v102, v103);

    v104 = *(unsigned int *)((char *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
    v105 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4F00000);
    -[objc_class encodeInt64:forKey:](with.super.isa, sel_encodeInt64_forKey_, v104, v105);

    v106 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled);
    v107 = (void *)MEMORY[0x1B5E432E8](0xD000000000000017, 0x80000001B4F00020);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v106, v107);

    v108 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported);
    v109 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4F00040);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v108, v109);

    v110 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient);
    v111 = (void *)MEMORY[0x1B5E432E8](0x69626D416E497369, 0xEB00000000746E65);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v110, v111);

    v112 = RequestPositionInSession.rawValue.getter();
    v113 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4F00060);
    -[objc_class encodeInt64:forKey:](with.super.isa, sel_encodeInt64_forKey_, v112, v113);

    v114 = *(_QWORD *)((char *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
    v115 = (void *)MEMORY[0x1B5E432E8](0x74636E756A6E6F63, 0xEF6F666E496E6F69);
    objc_msgSend(with.super.isa, v29[34], v114, v115);

    v116 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen);
    v117 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4EFFF40);
    -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v116, v117);

    v118 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked);
    v119 = MEMORY[0x1B5E432E8](0x6563697665447369, 0xEE0064656B636F4CLL);
    v120 = with.super.isa;
    v121 = (void *)v119;
    -[objc_class encodeBool:forKey:](v120, sel_encodeBool_forKey_, v118, v119);

  }
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

Swift::Void __swiftcall FlowTaskXPC.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Class isa;
  id v12;

  v3 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id), *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id + 8));
  v4 = (void *)MEMORY[0x1B5E432E8](25705, 0xE200000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state) == 1)
    {
      v5 = 0xE700000000000000;
      v6 = 0x676E696F676E6FLL;
    }
    else
    {
      v5 = 0xE500000000000000;
      v6 = 0x6465646E65;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v6 = 0x64657461657263;
  }
  v7 = (void *)MEMORY[0x1B5E432E8](v6, v5);
  swift_bridgeObjectRelease();
  v8 = (void *)MEMORY[0x1B5E432E8](0x6574617473, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated);
  v10 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF56F0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v9, v10);

  isa = Date._bridgeToObjectiveC()().super.isa;
  v12 = (id)MEMORY[0x1B5E432E8](0x6E6F697461657263, 0xEC000000656D6954);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v12);

}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(uint64_t, uint64_t))implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady());
}

id outlined copy of Result<(), Error>(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

void outlined consume of Result<(), Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<(), Error>(a1, a2 & 1);
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v1 = type metadata accessor for ConversationHelperInput(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  v3 = v0 + v2 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v5 = v3 + v4[7];
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_release();

  v8 = (uint64_t *)(v3 + v4[11]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    outlined consume of Data._Representation(*v8, v9);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t protocol witness for RemoteConversationConnectionProviding.withRemoteConversationConnection<A>(execute:) in conformance SharedFlowPluginConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(a1, a2, a3, a4);
}

uint64_t SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release();
  InterruptibleTaskResult.get()(v1, v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release();
  InterruptibleTaskResult.get()(v1, v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104));
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v1 = v0[11];
  v2 = *(_QWORD *)(v1 + 48);
  v0[18] = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 56);
    v4 = one-time initialization token for executor;
    swift_unknownObjectRetain();
    if (v4 != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B4BE6000, v6, v7, "RemoteConversation is active", v8, 2u);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }
    v9 = v0[10];
    v11 = v0[8];
    v10 = v0[9];

    v12 = (_QWORD *)swift_allocObject();
    v0[19] = v12;
    v12[2] = v9;
    v12[3] = v11;
    v12[4] = v10;
    v12[5] = v2;
    v12[6] = v3;
    swift_unknownObjectRetain();
    swift_retain();
    v13 = (_QWORD *)swift_task_alloc();
    v0[20] = v13;
    *v13 = v0;
    v13[1] = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
    return InterruptibleTaskManager.perform<A>(_:)(v0[16], (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v12, v0[10]);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v17, "RemoteConversation is invalid, will reconnect", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }
    v19 = v0[11];

    if (*(_QWORD *)(v19 + 64))
    {
      v20 = *(_QWORD *)(v19 + 64);
    }
    else
    {
      v21 = v0[11];
      v22 = v0[12];
      v23 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
      v24 = static MessageBusActor.shared;
      v25 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v24;
      v26[3] = v25;
      v26[4] = v21;
      swift_retain();
      swift_retain();
      v20 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime18RemoteConversation_p_Tgm5(v22, (uint64_t)&async function pointer to partial apply for closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v26);
      *(_QWORD *)(v19 + 64) = v20;
      swift_retain();
      swift_release();
    }
    v0[22] = v20;
    swift_retain();
    v27 = (_QWORD *)swift_task_alloc();
    v0[23] = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversation);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *v27 = v0;
    v27[1] = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
    return Task.value.getter();
  }
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = v0[10];
  v1 = (_QWORD *)v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[5];
  v6 = v0[6];
  v0[25] = v5;
  v1[8] = 0;
  swift_release();
  v1[6] = v5;
  v1[7] = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v7 = (_QWORD *)swift_allocObject();
  v0[26] = v7;
  v7[2] = v2;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v5;
  v7[6] = v6;
  swift_retain();
  swift_unknownObjectRetain();
  v8 = (_QWORD *)swift_task_alloc();
  v0[27] = v8;
  *v8 = v0;
  v8[1] = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  return InterruptibleTaskManager.perform<A>(_:)(v0[15], (uint64_t)&async function pointer to partial apply for closure #3 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v7, v0[10]);
}

uint64_t SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v5[12] = swift_task_alloc();
  v9 = type metadata accessor for InterruptibleTaskResult(0, a4, v7, v8);
  v5[13] = v9;
  v5[14] = *(_QWORD *)(v9 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[17] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = (int *)v1[3];
  v6 = v1[5];
  v5 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, v6, v5);
}

uint64_t partial apply for closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(a1, v6, v8, v9);
}

uint64_t closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 16);
  v11 = *(_OWORD *)(v0 + 32);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 24), v1, type metadata accessor for RemoteConversationTurnData);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (v2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = swift_allocObject();
  *(_QWORD *)(v0 + 72) = v7;
  *(_QWORD *)(v7 + 16) = v4;
  outlined init with take of RemoteConversationTurnData(v1, v7 + v5);
  *(_OWORD *)(v7 + v6) = v11;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v8 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v8;
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  *(_QWORD *)(v8 + 24) = v7;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v9;
  *v9 = v0;
  v9[1] = closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t RemoteConversationClient.startTurn(turnData:bridge:)()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(void);
  __int128 v16;

  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD **)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = type metadata accessor for Logger();
  v7 = v3 + 16;
  v16 = *(_OWORD *)(v0 + 24);
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v8 = v3[19];
  v9 = v3[20];
  __swift_project_boxed_opaque_existential_1(v7, v8);
  outlined init with copy of ConversationHelperInput(v5, v1, type metadata accessor for RemoteConversationTurnData);
  v10 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v11 = swift_allocObject();
  outlined init with take of RemoteConversationTurnData(v1, v11 + v10);
  *(_OWORD *)(v11 + ((v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = v16;
  v12 = swift_allocObject();
  *(_QWORD *)(v0 + 72) = v12;
  *(_QWORD *)(v12 + 16) = &async function pointer to partial apply for closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  *(_QWORD *)(v12 + 24) = v11;
  v15 = (uint64_t (*)(void))(**(int **)(v9 + 8) + *(_QWORD *)(v9 + 8));
  swift_unknownObjectRetain();
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v13;
  *v13 = v0;
  v13[1] = RemoteConversationClient.startTurn(turnData:bridge:);
  return v15();
}

uint64_t closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = *(_QWORD *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 + 64);
  v4[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t ObjectType;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v28 = a1;
  v29 = a5;
  v32 = a2;
  v8 = type metadata accessor for RemoteConversationTurnData(0);
  v30 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v30 + 64);
  MEMORY[0x1E0C80A78](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1B5E432E8](*a3, a3[1]);
  v27 = a4;
  ObjectType = swift_getObjectType();
  v31 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v28, v10);
  outlined init with copy of ConversationHelperInput((uint64_t)a3, (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RemoteConversationTurnData);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (*(unsigned __int8 *)(v30 + 80) + v16 + 8) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v15, v13, v10);
  v19 = v32;
  *(_QWORD *)(v18 + v16) = v32;
  outlined init with take of RemoteConversationTurnData((uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  v20 = (_QWORD *)(v18 + ((v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  v21 = v29;
  *v20 = v27;
  v20[1] = v21;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_167;
  v22 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_release();
  v23 = v19;
  v24 = (void *)v33;
  objc_msgSend(v23, sel_startTurnFromCacheWithExecutionRequestId_bridge_reply_, v33, v31, v22);
  _Block_release(v22);

  return swift_unknownObjectRelease();
}

uint64_t outlined init with take of RemoteConversationTurnData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteConversationTurnData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ()(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, a1 & 1);

}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(char a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (uint64_t *)(v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(a1, a2, v2 + v6, *(void **)(v2 + v7), v2 + v9, *v10, v10[1]);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(char a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t ObjectType;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v27 = a7;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  if (a2)
  {
    aBlock[0] = a2;
    v14 = a2;
    CheckedContinuation.resume(throwing:)();
  }
  if ((a1 & 1) != 0)
    return CheckedContinuation.resume(returning:)();
  if (one-time initialization token for executor != -1)
    swift_once();
  v26 = a4;
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v17, v18, "Remote Conversation does not have turn data for the current request. Will serialize the TurnData again.", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  v20 = RemoteConversationTurnData.xpcRepresentation.getter();
  ObjectType = swift_getObjectType();
  v22 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v11);
  v23 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v24 + v23, (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_173;
  v25 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v26, sel_startTurnWithTurnData_bridge_reply_, v20, v22, v25);
  _Block_release(v25);

  return swift_unknownObjectRelease();
}

uint64_t outlined destroy of UserInputResult(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UserInputResult();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t InterruptibleTaskResult.get()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (swift_getEnumCaseMultiPayload())
    return swift_willThrow();
  else
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v5);
}

uint64_t protocol witness for DecisionMaking.newTurnStarted(executionUUID:) in conformance DecisionEngine(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = 0;
  swift_bridgeObjectRelease();
  ActionGenerator.newTurnStarted()();
  DecisionEngine.ambiguityService.getter((uint64_t)v6);
  v3 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t DecisionEngine.newTurnStarted(executionUUID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v1 + 176) = 0;
  swift_bridgeObjectRelease();
  ActionGenerator.newTurnStarted()();
  DecisionEngine.ambiguityService.getter((uint64_t)v6);
  v3 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized FeatureToggle<>.isEnabled.getter(unsigned __int8 a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unsigned __int8 v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v2 = static SydneyConversationFeatureFlags.forceEnabled;
  if (*(_QWORD *)(static SydneyConversationFeatureFlags.forceEnabled + 16)
    && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    v5 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v3);
  }
  else
  {
    v8 = &type metadata for SydneyConversationFeatureFlags;
    v9 = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
    v7[0] = a1;
    v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return v5 & 1;
}

{
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unsigned __int8 v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v2 = static AmbiguityFeatureFlags.forceEnabled;
  if (*(_QWORD *)(static AmbiguityFeatureFlags.forceEnabled + 16)
    && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    v5 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v3);
  }
  else
  {
    v8 = &type metadata for AmbiguityFeatureFlags;
    v9 = lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags();
    v7[0] = a1;
    v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return v5 & 1;
}

uint64_t specialized FeatureToggle<>.isEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  _QWORD v5[5];

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v0 = static SiriPlaybackControlFeature.forceEnabled;
  if (*(_QWORD *)(static SiriPlaybackControlFeature.forceEnabled + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    v3 = *(_BYTE *)(*(_QWORD *)(v0 + 56) + v1);
  }
  else
  {
    v5[3] = &type metadata for SiriPlaybackControlFeature;
    v5[4] = lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature();
    v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v3 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  _QWORD v5[5];

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v0 = static SiriKitFlowFeatureFlagDefinitions.forceEnabled;
  if (*(_QWORD *)(static SiriKitFlowFeatureFlagDefinitions.forceEnabled + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    v3 = *(_BYTE *)(*(_QWORD *)(v0 + 56) + v1);
  }
  else
  {
    v5[3] = &type metadata for SiriKitFlowFeatureFlagDefinitions;
    v5[4] = lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions();
    v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v3 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  _QWORD v5[5];

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v0 = static LinkFeature.forceEnabled;
  if (*(_QWORD *)(static LinkFeature.forceEnabled + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    v3 = *(_BYTE *)(*(_QWORD *)(v0 + 56) + v1);
  }
  else
  {
    v5[3] = &type metadata for LinkFeature;
    v5[4] = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v3 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  _QWORD v5[5];

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v0 = static SiriPhoneFeature.forceEnabled;
  if (*(_QWORD *)(static SiriPhoneFeature.forceEnabled + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    v3 = *(_BYTE *)(*(_QWORD *)(v0 + 56) + v1);
  }
  else
  {
    v5[3] = &type metadata for SiriPhoneFeature;
    v5[4] = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
    v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions;
  if (!lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitFlowFeatureFlagDefinitions, &type metadata for SiriKitFlowFeatureFlagDefinitions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions;
  if (!lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitFlowFeatureFlagDefinitions, &type metadata for SiriKitFlowFeatureFlagDefinitions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions;
  if (!lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitFlowFeatureFlagDefinitions, &type metadata for SiriKitFlowFeatureFlagDefinitions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SiriKitFlowFeatureFlagDefinitions(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriKitFlowFeatureFlagDefinitions()
{
  return "SiriKitFlow";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriKitFlowFeatureFlagDefinitions()
{
  return "Link";
}

unint64_t lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature;
  if (!lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for LinkFeature, &type metadata for LinkFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature;
  if (!lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for LinkFeature, &type metadata for LinkFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature;
  if (!lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for LinkFeature, &type metadata for LinkFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance LinkFeature(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance LinkFeature()
{
  return "conditionallyEnabledIntents";
}

uint64_t outlined consume of AppShortcutExpansionContext?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t DecisionEngine.ambiguityService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  _BYTE v10[40];
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;

  v3 = v1 + 200;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 200, (uint64_t)&v11, (uint64_t *)&demangling cache variable for type metadata for AmbiguityServiceProviding?);
  if (!v12)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v11, (uint64_t *)&demangling cache variable for type metadata for AmbiguityServiceProviding?);
    v4 = *(_QWORD *)(v1 + 40);
    outlined init with copy of ReferenceResolutionClientProtocol(v1 + 136, (uint64_t)&v11);
    v5 = type metadata accessor for AmbiguityService();
    v6 = swift_allocObject();
    type metadata accessor for ServerFallbackDisablingUtils();
    v7 = (_QWORD *)swift_allocObject();
    v8 = objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager());
    swift_retain();
    v7[2] = objc_msgSend(v8, sel_init);
    v7[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
    v7[4] = 0;
    *(_QWORD *)(v6 + 64) = v7;
    *(_QWORD *)(v6 + 16) = v4;
    outlined init with take of ReferenceResolutionClientProtocol(&v11, v6 + 24);
    v12 = v5;
    v13 = &protocol witness table for AmbiguityService;
    *(_QWORD *)&v11 = v6;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v11, (uint64_t)v10);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v10, v3, (uint64_t *)&demangling cache variable for type metadata for AmbiguityServiceProviding?);
    swift_endAccess();
  }
  return outlined init with take of ReferenceResolutionClientProtocol(&v11, a1);
}

uint64_t protocol witness for AmbiguityServiceProviding.newTurnStarted(executionUUID:) in conformance AmbiguityService(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *(_QWORD *)(*v1 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*v1 + 24), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 64))(a1, v4, v5);
  v6 = *(_QWORD **)(v3 + 16);
  v7 = v6[5];
  v8 = v6[6];
  __swift_project_boxed_opaque_existential_1(v6 + 2, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, v7, v8);
}

uint64_t protocol witness for CamBridge.setupNewTurn(executionUUID:) in conformance CamBridgeImpl(uint64_t a1)
{
  return CamBridgeImpl.setupNewTurn(executionUUID:)(a1);
}

uint64_t CamBridgeImpl.setupNewTurn(executionUUID:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[3];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v61 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v52 - v6;
  MEMORY[0x1E0C80A78](v5);
  v58 = (char *)&v52 - v8;
  v9 = type metadata accessor for UUID();
  v63 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v52 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v52 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v52 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v52 - v22;
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.makeCamIdAndEmitRequestLink(executionUUID:)();
  swift_release();
  v24 = a1;
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.makeCaarIdAndEmitRequestLink(executionUUID:)();
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v57 = v24;
  v26(v18, v24, v9);
  v59 = v23;
  v26(v15, (uint64_t)v23, v9);
  v60 = v21;
  v26(v12, (uint64_t)v21, v9);
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    v30 = swift_slowAlloc();
    v56 = v7;
    v31 = v30;
    v55 = swift_slowAlloc();
    v65[0] = v55;
    *(_DWORD *)v31 = 136315650;
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v53 = v12;
    v54 = v29;
    v32 = dispatch thunk of CustomStringConvertible.description.getter();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34 = *(void (**)(char *, uint64_t))(v63 + 8);
    v34(v18, v9);
    *(_WORD *)(v31 + 12) = 2080;
    v35 = dispatch thunk of CustomStringConvertible.description.getter();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v15, v9);
    *(_WORD *)(v31 + 22) = 2080;
    v37 = v53;
    v38 = dispatch thunk of CustomStringConvertible.description.getter();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v37, v9);
    _os_log_impl(&dword_1B4BE6000, v27, (os_log_type_t)v54, "CamBridge: Setup new turn with executionUUID: %s, camId:%s, caarId: %s.", (uint8_t *)v31, 0x20u);
    v40 = v55;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v40, -1, -1);
    v41 = v31;
    v7 = v56;
    MEMORY[0x1B5E44758](v41, -1, -1);

    v42 = v63;
  }
  else
  {
    v43 = v63;
    v34 = *(void (**)(char *, uint64_t))(v63 + 8);
    v34(v18, v9);
    v34(v15, v9);
    v34(v12, v9);

    v42 = v43;
  }
  v44 = (uint64_t)v58;
  v26(v58, v57, v9);
  v45 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56);
  v45(v44, 0, 1, v9);
  v46 = v59;
  v26(v7, (uint64_t)v59, v9);
  v45((uint64_t)v7, 0, 1, v9);
  v47 = v60;
  v48 = (uint64_t)v61;
  v26(v61, (uint64_t)v60, v9);
  v45(v48, 0, 1, v9);
  type metadata accessor for CamBridgeState();
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v44, v49 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v49 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v48, v49 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v50 = v62;
  swift_beginAccess();
  *(_QWORD *)(v50 + 240) = v49;
  swift_retain();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  swift_release();
  v34(v47, v9);
  return ((uint64_t (*)(char *, uint64_t))v34)(v46, v9);
}

uint64_t type metadata accessor for CamBridgeState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CamBridgeState;
  if (!type metadata singleton initialization cache for CamBridgeState)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CamBridgeState.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId);
  return swift_deallocClassInstance();
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void CamBridgeImpl.camBridgeState.didset()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_beginAccess();
    type metadata accessor for CamBridgeState();
    swift_retain();
    v5 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v1, v2, "CamBridge: camBridgeState set to %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v4, -1, -1);
    MEMORY[0x1B5E44758](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t protocol witness for CorrectionsHandling.setupNewTurn(executionUUID:) in conformance CorrectionsPlatformClient()
{
  return dispatch thunk of CorrectionsPlatformClient.setupNewTurn(executionUUID:)();
}

uint64_t type metadata accessor for ConversationService.ActiveTurn(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationService.ActiveTurn);
}

uint64_t type metadata accessor for InvocationStateImpl()
{
  uint64_t result;

  result = type metadata singleton initialization cache for InvocationStateImpl;
  if (!type metadata singleton initialization cache for InvocationStateImpl)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for AceServiceInvokerImpl()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SubmissionTaskRegistry()
{
  return objc_opt_self();
}

void InvocationStateImpl.init(executionRequestId:requestContextData:previousInvocationState:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  void (*v99)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD v104[3];
  uint64_t v105;
  uint64_t v106;

  v81 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  MEMORY[0x1E0C80A78](v9);
  v98 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v11);
  v95 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BargeInMode();
  MEMORY[0x1E0C80A78](v13);
  v94 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1E0C80A78](v15);
  v93 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for InteractionTypeHelper();
  v90 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v80 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for InteractionType();
  v86 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89);
  v85 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for InvocationStateImpl();
  v23 = (char *)a5 + v22[8];
  v24 = type metadata accessor for AudioSource();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = (uint64_t)a5 + v22[9];
  v26 = type metadata accessor for AudioDestination();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = (_QWORD *)((char *)a5 + v22[12]);
  *v27 = 0;
  v27[1] = 0;
  v103 = v27;
  v101 = v22[20];
  *(_QWORD *)((char *)a5 + v101) = 0;
  v28 = (_QWORD *)((char *)a5 + v22[23]);
  *v28 = 0;
  v28[1] = 0;
  v96 = v28;
  v29 = (uint64_t)a5 + v22[24];
  v30 = type metadata accessor for PersonalDomainsAuthenticationMode();
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v102 = v29;
  v99 = v31;
  v100 = v30;
  ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v29, 1, 1);
  v32 = (uint64_t)a5 + v22[25];
  v33 = type metadata accessor for BargeInContext();
  v34 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  v84 = v32;
  v83 = v33;
  v82 = v34;
  ((void (*)(uint64_t, uint64_t, uint64_t))v34)(v32, 1, 1);
  v35 = (uint64_t)a5 + v22[27];
  v36 = type metadata accessor for HomeInfo();
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  v91 = v35;
  v88 = v36;
  v87 = v37;
  ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v35, 1, 1);
  v97 = v22[29];
  *(_QWORD *)((char *)a5 + v97) = 0;
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a1;
  a5[3] = a2;
  v38 = (_QWORD *)((char *)a5 + v22[21]);
  *v38 = a1;
  v38[1] = a2;
  v39 = (_QWORD *)((char *)a5 + v22[22]);
  *v39 = a1;
  v39[1] = a2;
  v41 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  v40 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin + 8);
  v42 = (char *)a5 + v22[6];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v43 = (uint64_t)v42;
  v44 = v81;
  static SiriKitExecutorRunUtils.inputOriginFrom(aceValue:)(v41, v40, v43);
  swift_bridgeObjectRelease();
  v45 = (uint64_t)v23;
  v46 = v80;
  outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource, v45, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination, v25, &demangling cache variable for type metadata for AudioDestination?);
  v47 = (char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode;
  v48 = (char *)a5 + v22[10];
  v49 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v48, v47, v49);
  *((_BYTE *)a5 + v22[13]) = *((_BYTE *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree);
  *((_BYTE *)a5 + v22[17]) = *((_BYTE *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction);
  *((_BYTE *)a5 + v22[14]) = *((_BYTE *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled);
  *((_BYTE *)a5 + v22[15]) = *((_BYTE *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled);
  *((_BYTE *)a5 + v22[16]) = *((_BYTE *)a3
                             + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled);
  static InteractionTypeHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v44, (uint64_t)v104, &demangling cache variable for type metadata for InvocationState?);
  v50 = v105;
  if (v105)
  {
    v51 = v106;
    __swift_project_boxed_opaque_existential_1(v104, v105);
    (*(void (**)(uint64_t, uint64_t))(v51 + 32))(v50, v51);
    v52 = v86;
    v53 = v89;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v19, 0, 1, v89);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v104, &demangling cache variable for type metadata for InvocationState?);
    v52 = v86;
    v53 = v89;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v19, 1, 1, v89);
  }
  v54 = v85;
  InteractionTypeHelper.mapInteractionType(requestContextData:previousInteractionType:)(a3);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for InteractionType?);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v46, v92);
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)a5 + v22[7], v54, v53);
  v55 = swift_bridgeObjectRetain();
  static BargeInMode.from(aceModes:)(v55, v94);
  swift_bridgeObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval, v95, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  v56 = (uint64_t)v93;
  BargeInContext.init(mode:approximatePreviousTTSInterval:)();
  v57 = 1;
  v82(v56, 0, 1, v83);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v56, v84, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  v58 = (char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions;
  v59 = (char *)a5 + v22[26];
  v60 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v59, v58, v60);
  v61 = *(void **)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome);
  if (v61)
  {
    v62 = v61;
    v63 = (uint64_t)v98;
    AFHomeInfo.asInternalHomeInfo.getter();

    v57 = 0;
  }
  else
  {
    v63 = (uint64_t)v98;
  }
  v87(v63, v57, 1, v88);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v63, v91, &demangling cache variable for type metadata for HomeInfo?);
  v64 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId + 8);
  v65 = (_QWORD *)((char *)a5 + v22[28]);
  *v65 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId);
  v65[1] = v64;
  type metadata accessor for DeviceEnvironmentHelper();
  v66 = swift_bridgeObjectRetain();
  MEMORY[0x1B5E3F604](v66);
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.siriLocale.getter();
  v67 = swift_release();
  MEMORY[0x1B5E3F604](v67);
  swift_release();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  v68 = swift_release();
  MEMORY[0x1B5E3F604](v68);
  swift_release();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  v69 = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  v71 = v70;
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for InvocationState?);
  v72 = v96;
  swift_bridgeObjectRelease();
  *v72 = v69;
  v72[1] = v71;
  v73 = (char *)a5 + v22[11];
  v74 = type metadata accessor for MultiUserContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v73, 1, 1, v74);
  v75 = v101;

  *(_QWORD *)((char *)a5 + v75) = 0;
  v76 = v102;
  outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  v99(v76, 1, 1, v100);
  v77 = v103;
  swift_bridgeObjectRelease();
  *v77 = 0;
  v77[1] = 0;
  v78 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo);
  v79 = v97;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a5 + v79) = v78;
  *(_DWORD *)((char *)a5 + v22[30]) = *(_DWORD *)((char *)a3
                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
  *((_BYTE *)a5 + v22[31]) = *((_BYTE *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled);
  *((_BYTE *)a5 + v22[32]) = *((_BYTE *)a3
                             + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported);
  LOBYTE(v78) = *((_BYTE *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient);

  *((_BYTE *)a5 + v22[33]) = v78;
}

uint64_t static SiriKitExecutorRunUtils.inputOriginFrom(aceValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  InputOrigin.init(aceValue:)();
  v9 = type metadata accessor for InputOrigin();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for InputOrigin?);
  if (one-time initialization token for executor != -1)
    swift_once();
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(a3, *MEMORY[0x1E0DA7CE0], v9);
}

uint64_t outlined assign with copy of ReferenceResolutionClientProtocol?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t InteractionTypeHelper.mapInteractionType(requestContextData:previousInteractionType:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for InputOrigin();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  InputOrigin.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DA7CE0], v5);
    v9 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for InputOrigin?);
  }
  else
  {
    v9 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x140))(v9);
  (*(void (**)(void))((*v10 & *a1) + 0x148))();
  InteractionTypeHelper.mapInteractionType(inputOrigin:isEyesFree:isDeviceInStarkMode:isDeviceInCarDND:audioSource:audioDestination:previousInteractionType:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t static BargeInMode.from(aceModes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for BargeInMode();
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = static BargeInMode.none.getter();
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v23[3] = *MEMORY[0x1E0D88FE8];
    v23[2] = *MEMORY[0x1E0D88FF8];
    v23[0] = *MEMORY[0x1E0D88FE0];
    swift_bridgeObjectRetain();
    v23[1] = a1;
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v11 = *(i - 1);
      v10 = *i;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v12 == v10;
      if (v13
        || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            swift_bridgeObjectRetain(),
            swift_bridgeObjectRelease(),
            (v14 & 1) != 0))
      {
        swift_bridgeObjectRelease();
        static BargeInMode.overSiri.getter();
      }
      else
      {
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v17 == v10)
        {
          swift_bridgeObjectRelease();
LABEL_16:
          swift_bridgeObjectRelease();
          static BargeInMode.overMedia.getter();
          goto LABEL_9;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_16;
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v19 == v10)
        {
          swift_bridgeObjectRelease();
LABEL_21:
          swift_bridgeObjectRelease();
          static BargeInMode.overTimer.getter();
          goto LABEL_9;
        }
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_21;
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v21 == v10)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
            goto LABEL_10;
        }
        static BargeInMode.overAlarm.getter();
      }
LABEL_9:
      lazy protocol witness table accessor for type BargeInMode and conformance BargeInMode(&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode, MEMORY[0x1E0DA7BD8]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      v15 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v15(a2, v4);
      dispatch thunk of RawRepresentable.rawValue.getter();
      v27 = v25 | v26;
      v16 = lazy protocol witness table accessor for type BargeInMode and conformance BargeInMode(&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode, MEMORY[0x1E0DA7BE0]);
      MEMORY[0x1B5E43F48](&v27, v4, v16);
      v15((uint64_t)v6, v4);
LABEL_10:
      if (!--v8)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t type metadata accessor for InvocationScopedSiriKitEventSender()
{
  return objc_opt_self();
}

_QWORD *initializeWithCopy for InvocationStateImpl(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int (*v99)(char *, uint64_t, uint64_t);
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for InputOrigin();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for AudioSource();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = a3[9];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for AudioDestination();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = a3[10];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  v33 = a3[11];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for MultiUserContext();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = type metadata accessor for MultiUserState();
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v39 = a3[12];
  v40 = a3[13];
  v41 = (_QWORD *)((char *)a1 + v39);
  v42 = (_QWORD *)((char *)a2 + v39);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
  v44 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *((_BYTE *)a1 + v44) = *((_BYTE *)a2 + v44);
  v45 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + v45) = *((_BYTE *)a2 + v45);
  v46 = a3[18];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = type metadata accessor for Locale();
  v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  v50(v47, v48, v49);
  v51 = a3[19];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  v55 = a3[20];
  v56 = a3[21];
  v57 = *(void **)((char *)a2 + v55);
  *(_QWORD *)((char *)a1 + v55) = v57;
  v58 = (_QWORD *)((char *)a1 + v56);
  v59 = (_QWORD *)((char *)a2 + v56);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = a3[22];
  v62 = a3[23];
  v63 = (_QWORD *)((char *)a1 + v61);
  v64 = (_QWORD *)((char *)a2 + v61);
  v65 = v64[1];
  *v63 = *v64;
  v63[1] = v65;
  v66 = (_QWORD *)((char *)a1 + v62);
  v67 = (_QWORD *)((char *)a2 + v62);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = a3[24];
  __dst = (char *)a1 + v69;
  v70 = (char *)a2 + v69;
  v71 = type metadata accessor for PersonalDomainsAuthenticationMode();
  v72 = *(_QWORD *)(v71 - 8);
  v99 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
  v73 = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v99(v70, 1, v71))
  {
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
    memcpy(__dst, v70, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(__dst, v70, v71);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v71);
  }
  v75 = a3[25];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = type metadata accessor for BargeInContext();
  v79 = *(_QWORD *)(v78 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
  {
    v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
  }
  v81 = a3[26];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
  v85 = a3[27];
  v86 = (char *)a1 + v85;
  v87 = (char *)a2 + v85;
  v88 = type metadata accessor for HomeInfo();
  v89 = *(_QWORD *)(v88 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
  {
    v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v86, v87, v88);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
  }
  v91 = a3[28];
  v92 = a3[29];
  v93 = (_QWORD *)((char *)a1 + v91);
  v94 = (_QWORD *)((char *)a2 + v91);
  v95 = v94[1];
  *v93 = *v94;
  v93[1] = v95;
  *(_QWORD *)((char *)a1 + v92) = *(_QWORD *)((char *)a2 + v92);
  v96 = a3[31];
  *(_DWORD *)((char *)a1 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
  *((_BYTE *)a1 + v96) = *((_BYTE *)a2 + v96);
  v97 = a3[33];
  *((_BYTE *)a1 + a3[32]) = *((_BYTE *)a2 + a3[32]);
  *((_BYTE *)a1 + v97) = *((_BYTE *)a2 + v97);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v46 = a4;
  v47 = a8;
  v45 = a7;
  v12 = *(_QWORD *)(a6 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v44 - v17;
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v16);
  v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v44 - v24;
  (*(void (**)(char *))(v20 + 32))((char *)&v44 - v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v18, a3, a6);
  type metadata accessor for SiriKitEventContext();
  v26 = (_QWORD *)swift_allocObject();
  v51 = v20;
  v27 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v49 = v25;
  v28 = v25;
  v29 = a6;
  v27(v23, v28, a5);
  v48 = v12;
  v30 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v50 = v18;
  v30(v15, v18, a6);
  v31 = specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v23, a2, (uint64_t)v15, v26, a5, a6, v45, v47);
  v32 = v46;
  *(_QWORD *)(v46 + 16) = v31;
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc();
    v47 = a5;
    v37 = (uint8_t *)v36;
    v38 = swift_slowAlloc();
    v53 = v38;
    *(_DWORD *)v37 = 136315138;
    v44 = v37 + 4;
    swift_retain();
    v39 = v32;
    v40 = SiriKitEventContext.description.getter();
    v45 = a2;
    v42 = v41;
    swift_release();
    v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32 = v39;
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v34, v35, "InternalSiriKitEventSender ready with: %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v38, -1, -1);
    MEMORY[0x1B5E44758](v37, -1, -1);

    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v29);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v47);
  }
  else
  {
    swift_release_n();

    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v29);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v49, a5);
  }
  return v32;
}

uint64_t specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[5];
  uint64_t v26;

  v8 = type metadata accessor for InvocationStateImpl();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v25 - v12;
  outlined init with take of StringKeyedValue(a3, (uint64_t)v25 - v12, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  type metadata accessor for SiriKitEventContext();
  v14 = (_QWORD *)swift_allocObject();
  outlined init with copy of ConversationHelperInput((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  swift_retain();
  swift_retain();
  *(_QWORD *)(a4 + 16) = specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)(a1, a2, (uint64_t)v11, v14);
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v26 = v19;
    *(_DWORD *)v18 = 136315138;
    v25[1] = v18 + 4;
    swift_retain();
    v20 = SiriKitEventContext.description.getter();
    v25[2] = a2;
    v25[3] = a1;
    v21 = v20;
    v23 = v22;
    swift_release();
    v25[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v16, v17, "InternalSiriKitEventSender ready with: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_release();
  outlined destroy of CamOutput((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  swift_release();
  return a4;
}

uint64_t type metadata accessor for SiriKitEventContext()
{
  return objc_opt_self();
}

_QWORD *specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28[5];

  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = v18;
  v28[4] = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v17, a3, a6);
  a4[2] = 0;
  a4[3] = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v28, (uint64_t)(a4 + 4));
  a4[9] = a2;
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 144);
  swift_retain();
  a4[10] = v21(a6, a8);
  a4[11] = v22;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 152))(a6, a8);
  v25 = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  a4[12] = v23;
  a4[13] = v25;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a6);
  return a4;
}

_QWORD *specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[5];

  v8 = type metadata accessor for InvocationStateImpl();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[3] = type metadata accessor for AceServiceInvokerImpl();
  v18[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, 255, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
  v18[0] = a1;
  outlined init with take of StringKeyedValue(a3, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  a4[2] = 0;
  a4[3] = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v18, (uint64_t)(a4 + 4));
  a4[9] = a2;
  v11 = &v10[*(int *)(v8 + 84)];
  v12 = *((_QWORD *)v11 + 1);
  a4[10] = *(_QWORD *)v11;
  a4[11] = v12;
  v13 = &v10[*(int *)(v8 + 88)];
  v15 = *(_QWORD *)v13;
  v14 = *((_QWORD *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  a4[12] = v15;
  a4[13] = v14;
  outlined destroy of CamOutput((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  return a4;
}

uint64_t destroy for InvocationStateImpl(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for InteractionType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[8];
  v9 = type metadata accessor for AudioSource();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = a1 + a2[9];
  v12 = type metadata accessor for AudioDestination();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v14 = a1 + a2[10];
  v15 = type metadata accessor for ResponseMode();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = a1 + a2[11];
  v17 = type metadata accessor for MultiUserContext();
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_bridgeObjectRelease();
  v19 = a1 + a2[18];
  v20 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = a1 + a2[19];
  v22 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = a1 + a2[24];
  v24 = type metadata accessor for PersonalDomainsAuthenticationMode();
  v25 = *(_QWORD *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  v26 = a1 + a2[25];
  v27 = type metadata accessor for BargeInContext();
  v28 = *(_QWORD *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  v29 = a1 + a2[26];
  v30 = type metadata accessor for Restrictions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  v31 = a1 + a2[27];
  v32 = type metadata accessor for HomeInfo();
  v33 = *(_QWORD *)(v32 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t SiriKitEventContext.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v1 = v0[10];
  v2 = (void *)v0[11];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  if (v0[3])
  {
    v5 = v0[2];
    v6 = (void *)v0[3];
  }
  else
  {
    v6 = (void *)0xE300000000000000;
    v5 = 7104878;
  }
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0xD000000000000010;
  v9._object = (void *)0x80000001B4F026C0;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v11 = v0[12];
  v10 = (void *)v0[13];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 0x7463617265746E69;
  v14._object = (void *)0xEF203A64496E6F69;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000028;
}

void ConversationRequestProcessor.handleNLRepetitionMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  id v17;
  id v18;
  _QWORD *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  NSObject *v51;
  uint64_t v52;
  uint8_t *v53;
  const char *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  const char *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70[7];

  v2 = v1;
  v4 = type metadata accessor for RequestType();
  v5 = *(uint8_t **)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v63 - v9;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v65 = v2;
    v15 = swift_slowAlloc();
    v67 = v8;
    v16 = (uint8_t *)v15;
    v64 = (_QWORD *)swift_slowAlloc();
    v66 = v10;
    *(_DWORD *)v16 = 138412290;
    v70[4] = (uint64_t)v12;
    v17 = v12;
    v68 = v5;
    v18 = v17;
    v2 = v65;
    v10 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v19 = v64;
    *v64 = v12;

    v5 = v68;
    _os_log_impl(&dword_1B4BE6000, v13, v14, "ConversationBridge handling message: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v19, -1, -1);
    v20 = v16;
    v8 = v67;
    MEMORY[0x1B5E44758](v20, -1, -1);

  }
  else
  {

  }
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 528))();
  if (v21)
  {
    v22 = v21;
    v23 = v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    (*((void (**)(char *, uint64_t, uint64_t))v5 + 2))(v10, v23, v4);
    (*((void (**)(char *, _QWORD, uint64_t))v5 + 13))(v8, *MEMORY[0x1E0D9E8A0], v4);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
    LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = (void (*)(char *, uint64_t))*((_QWORD *)v5 + 1);
    v24(v8, v4);
    v24(v10, v4);
    if ((v23 & 1) != 0)
    {
      v25 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
      v27 = v26;
      v28 = (unint64_t *)(v22
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      v29 = *v28;
      if (*v28 >> 62 == 1)
      {
        v30 = *(_QWORD *)(v29 + 16);
        v31 = *(_QWORD *)(v29 + 24);
        swift_retain();
        if ((v30 != v25 || v31 != v27) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v51 = Logger.logObject.getter();
          v60 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v51, v60))
          {

            swift_release();
            goto LABEL_44;
          }
          v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v61 = 0;
          _os_log_impl(&dword_1B4BE6000, v51, v60, "RC already selected. Not handling NLRepetitionMessage.", v61, 2u);
          MEMORY[0x1B5E44758](v61, -1, -1);
          swift_release();
LABEL_31:
          swift_release();

          return;
        }
        swift_release();
      }
      v33 = *v28;
      v32 = (void *)v28[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v33, v32);
      v34 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v25, v27, v33, v32);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v33, v32);
      if (v34)
      {
        v35 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 376))();
        if (ResultCandidateProcessingStatus.rawValue.getter(v35) == 0x64656C65636E6163 && v36 == 0xE800000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v39 = swift_bridgeObjectRelease();
          if ((v38 & 1) == 0)
          {
            v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 864))(v39);
            if (v40)
            {
              v41 = v40;
              v42 = (*(uint64_t (**)(void))(*(_QWORD *)v40 + 120))();
              swift_bridgeObjectRelease();
              if (!v42)
              {
                v62 = NLRepetitionMessage.repetitionResults.getter();
                (*(void (**)(uint64_t))(*(_QWORD *)v41 + 128))(v62);
                swift_bridgeObjectRetain();
                v43 = Logger.logObject.getter();
                v44 = static os_log_type_t.debug.getter();
                if (!os_log_type_enabled(v43, v44))
                {

                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  goto LABEL_44;
                }
                v45 = (uint8_t *)swift_slowAlloc();
                v46 = swift_slowAlloc();
                v70[0] = v46;
                *(_DWORD *)v45 = 136315138;
                v68 = v45 + 4;
                swift_bridgeObjectRetain();
                v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v70);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                v47 = "Cached NL repetition results in ResultCandidateState for RC ID: %s";
                goto LABEL_47;
              }
              swift_bridgeObjectRetain();
              v43 = Logger.logObject.getter();
              v44 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v43, v44))
              {
                v45 = (uint8_t *)swift_slowAlloc();
                v46 = swift_slowAlloc();
                v70[0] = v46;
                *(_DWORD *)v45 = 136315138;
                v68 = v45 + 4;
                swift_bridgeObjectRetain();
                v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v70);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                v47 = "Repetition result is already set for this RC ID: %s. This should not happen as there is only one N"
                      "LRepetition message for one RC.";
LABEL_47:
                _os_log_impl(&dword_1B4BE6000, v43, v44, v47, v45, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1B5E44758](v46, -1, -1);
                MEMORY[0x1B5E44758](v45, -1, -1);
                swift_release();

                swift_release();
                goto LABEL_44;
              }

              swift_bridgeObjectRelease_n();
              swift_release();
              goto LABEL_43;
            }
            swift_bridgeObjectRetain();
            v55 = Logger.logObject.getter();
            v56 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v55, v56))
            {
              v57 = (uint8_t *)swift_slowAlloc();
              v58 = swift_slowAlloc();
              v70[0] = v58;
              *(_DWORD *)v57 = 136315138;
              swift_bridgeObjectRetain();
              v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v70);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              v59 = "RC ID:%s is not a speech-based RC. Not revealing ASR.";
              goto LABEL_36;
            }
            goto LABEL_42;
          }
        }
        swift_bridgeObjectRetain();
        v55 = Logger.logObject.getter();
        v56 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v55, v56))
        {
          v57 = (uint8_t *)swift_slowAlloc();
          v58 = swift_slowAlloc();
          v70[0] = v58;
          *(_DWORD *)v57 = 136315138;
          swift_bridgeObjectRetain();
          v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          v59 = "RC ID:%s has already been canceled. Not handling NLRepetitionMessage.";
LABEL_36:
          _os_log_impl(&dword_1B4BE6000, v55, v56, v59, v57, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v58, -1, -1);
          MEMORY[0x1B5E44758](v57, -1, -1);
          swift_release();

          goto LABEL_44;
        }
LABEL_42:

        swift_bridgeObjectRelease_n();
LABEL_43:
        swift_release();
        goto LABEL_44;
      }
      swift_bridgeObjectRelease();
      v51 = Logger.logObject.getter();
      v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, (os_log_type_t)v52))
      {
        v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v53 = 0;
        v54 = "RC State missing. SpeechBasedRCState should be created before NLRepetitionMessage.";
        goto LABEL_30;
      }
    }
    else
    {
      v51 = Logger.logObject.getter();
      LOBYTE(v52) = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v51, (os_log_type_t)v52))
      {
        v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v53 = 0;
        v54 = "Request is not a speech request. Not handling NLRepetitionMessage";
LABEL_30:
        _os_log_impl(&dword_1B4BE6000, v51, (os_log_type_t)v52, v54, v53, 2u);
        MEMORY[0x1B5E44758](v53, -1, -1);
        goto LABEL_31;
      }
    }

LABEL_44:
    swift_release();
    return;
  }
  v48 = Logger.logObject.getter();
  v49 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    _os_log_impl(&dword_1B4BE6000, v48, v49, "Request not active. Not handling NLRepetitionMessage.", v50, 2u);
    MEMORY[0x1B5E44758](v50, -1, -1);
  }

}

void ConversationRequestProcessor.handleNLResultCandidateMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  _QWORD *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _BYTE *v28;
  void *v29;
  unint64_t v30;
  Swift::String *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  char v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  unint64_t v49;
  unint64_t v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _DWORD *v56;
  id v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  os_log_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Class isa;
  uint64_t v88;
  char v89;
  _BYTE *v90;
  _BYTE *v91;
  NSObject *v92;
  os_log_type_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  os_log_t v103;
  _BYTE *v104;
  _BYTE v105[12];
  int v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  os_log_t v110;
  uint64_t v111;
  os_log_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  os_log_t v117;

  v2 = v1;
  v4 = type metadata accessor for RequestType();
  v114 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v113 = &v105[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for UserID();
  v110 = *(os_log_t *)(v6 - 8);
  v111 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v108 = &v105[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v109 = &v105[-v9];
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v107 = v1;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v112 = v11;
    v18 = (_QWORD *)v17;
    *(_DWORD *)v16 = 138412290;
    v116 = (uint64_t)v12;
    v19 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v18 = v12;

    _os_log_impl(&dword_1B4BE6000, v13, v14, "ConversationBridge handling message: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v20 = v18;
    v11 = v112;
    MEMORY[0x1B5E44758](v20, -1, -1);
    v21 = v16;
    v2 = v107;
    MEMORY[0x1B5E44758](v21, -1, -1);

  }
  else
  {

  }
  v22 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 528))();
  if (!v22)
  {
    swift_retain_n();
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (_DWORD *)swift_slowAlloc();
      v116 = swift_slowAlloc();
      *v56 = 136315138;
      (*(void (**)(void))(*(_QWORD *)v2 + 368))();
      __asm { BR              X10 }
    }

    goto LABEL_22;
  }
  v23 = v22;
  if (!ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()())
  {
    v58 = v12;
    swift_retain_n();
    v59 = v58;
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.error.getter();
    v62 = v61;
    if (os_log_type_enabled(v60, v61))
    {
      v63 = swift_slowAlloc();
      v64 = (_QWORD *)swift_slowAlloc();
      v112 = (os_log_t)swift_slowAlloc();
      v117 = v112;
      *(_DWORD *)v63 = 138412546;
      v116 = (uint64_t)v59;
      LODWORD(v111) = v62;
      v65 = v23;
      v66 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v64 = v59;

      *(_WORD *)(v63 + 12) = 2080;
      v67 = v65 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      v69 = v113;
      v68 = v114;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v114 + 16))(v113, v67, v4);
      v70 = RequestType.rawValue.getter();
      v72 = v71;
      (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v69, v4);
      v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v60, (os_log_type_t)v111, "%@ is not supported for this requestType: %s", (uint8_t *)v63, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v64, -1, -1);
      v73 = v112;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v73, -1, -1);
      MEMORY[0x1B5E44758](v63, -1, -1);
      swift_release();

      return;
    }

    goto LABEL_22;
  }
  v24 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v26 = v25;
  v27 = (unint64_t *)(v23 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v28 = v12;
  v30 = *v27;
  v29 = (void *)v27[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v30, v29);
  v31 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v24, v26, v30, v29);
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v30, v29);
  if (!v31)
  {
    swift_bridgeObjectRetain();
    v74 = Logger.logObject.getter();
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      v77 = swift_slowAlloc();
      v117 = (os_log_t)v77;
      *(_DWORD *)v76 = 136315138;
      swift_bridgeObjectRetain();
      v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v74, v75, "Received NL result before RC state is created for RC ID: %s ..this may happen if no ASR or text input message was received before the NL output message is received from the message bus", v76, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v77, -1, -1);
      MEMORY[0x1B5E44758](v76, -1, -1);
LABEL_29:
      swift_release();

      return;
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  v114 = v24;
  v32 = NLResultCandidateMessage.voiceIdScore.getter();
  (*(void (**)(unint64_t))(v31->_countAndFlagsBits + 720))(v32 | ((HIDWORD(v32) & 1) << 32));
  v33 = NLResultCandidateMessage.voiceIdClassification.getter();
  v35 = (*(uint64_t (**)(uint64_t, _QWORD))(v31->_countAndFlagsBits + 744))(v33, v34 & 1);
  v36 = (*(uint64_t (**)(uint64_t))(v31->_countAndFlagsBits + 376))(v35);
  if (ResultCandidateProcessingStatus.rawValue.getter(v36) == 0x64656C65636E6163 && v37 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_26:
    swift_bridgeObjectRetain();
    v74 = Logger.logObject.getter();
    v78 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v74, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc();
      v80 = swift_slowAlloc();
      v117 = (os_log_t)v80;
      *(_DWORD *)v79 = 136315138;
      swift_bridgeObjectRetain();
      v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v26, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v81 = "RC ID:%s has already been canceled. Not handling NLResultCandidateMessage any further.";
LABEL_28:
      _os_log_impl(&dword_1B4BE6000, v74, v78, v81, v79, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v80, -1, -1);
      MEMORY[0x1B5E44758](v79, -1, -1);
      swift_release();
      goto LABEL_29;
    }
    goto LABEL_35;
  }
  v113 = v28;
  v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v39 & 1) != 0)
    goto LABEL_26;
  swift_retain_n();
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  v42 = v41;
  if (os_log_type_enabled(v40, v41))
  {
    v112 = v40;
    v43 = swift_slowAlloc();
    v106 = v42;
    v44 = (uint8_t *)v43;
    v107 = swift_slowAlloc();
    v117 = (os_log_t)v107;
    *(_DWORD *)v44 = 136315138;
    v45 = *(uint64_t (**)(uint64_t))(v31->_countAndFlagsBits + 800);
    v46 = swift_retain();
    v47 = v45(v46);
    v48 = v11;
    v50 = v49;
    swift_release();
    v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v50, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v11 = v48;
    swift_bridgeObjectRelease();
    v51 = v112;
    _os_log_impl(&dword_1B4BE6000, v112, (os_log_type_t)v106, "Received NL output when RC state: %s", v44, 0xCu);
    v52 = v107;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v52, -1, -1);
    MEMORY[0x1B5E44758](v44, -1, -1);

  }
  else
  {

    v53 = swift_release_n();
  }
  v82 = (*(uint64_t (**)(uint64_t))(v31->_countAndFlagsBits + 280))(v53);
  swift_bridgeObjectRelease();
  if (v82)
  {
    swift_bridgeObjectRetain();
    v74 = Logger.logObject.getter();
    v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc();
      v80 = swift_slowAlloc();
      v117 = (os_log_t)v80;
      *(_DWORD *)v79 = 136315138;
      swift_bridgeObjectRetain();
      v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v26, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v81 = "Already received NL output for this RC ID: %s .. this happened because we received multiple NL outputs for the same RC ID.";
      goto LABEL_28;
    }
LABEL_35:

    swift_bridgeObjectRelease_n();
LABEL_36:
    swift_release();
LABEL_37:
    swift_release();
    return;
  }
  v112 = v11;
  swift_bridgeObjectRelease();
  v83 = v109;
  UserIdAwareResultCandidateMessageBase.userId.getter();
  v84 = UserID.sharedUserId.getter();
  v86 = v85;
  isa = v110[1].isa;
  ((void (*)(_BYTE *, uint64_t))isa)(v83, v111);
  if (v84 == UserID.sharedUserId.getter() && v86 == v88)
  {
    swift_bridgeObjectRelease_n();
LABEL_42:
    ConversationRequestProcessor.handleNLResultCandidateMessage(_:rcState:)((uint64_t)v113, v31);
    goto LABEL_36;
  }
  v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v89 & 1) != 0)
    goto LABEL_42;
  v90 = v113;
  swift_retain_n();
  v91 = v90;
  v92 = Logger.logObject.getter();
  v93 = static os_log_type_t.error.getter();
  v94 = v93;
  if (!os_log_type_enabled(v92, v93))
  {

    swift_release();
LABEL_22:
    swift_release_n();
    return;
  }
  v95 = swift_slowAlloc();
  v114 = v23;
  v96 = v95;
  v113 = (_BYTE *)swift_slowAlloc();
  v117 = (os_log_t)v113;
  *(_DWORD *)v96 = 136315394;
  LODWORD(v112) = v94;
  v97 = v108;
  v110 = v92;
  UserIdAwareResultCandidateMessageBase.userId.getter();
  v98 = UserID.sharedUserId.getter();
  v100 = v99;
  ((void (*)(_BYTE *, uint64_t))isa)(v97, v111);
  v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v100, (uint64_t *)&v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v96 + 12) = 2080;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EFA0]);
  v101 = dispatch thunk of CustomStringConvertible.description.getter();
  v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, (uint64_t *)&v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  v103 = v110;
  _os_log_impl(&dword_1B4BE6000, v110, (os_log_type_t)v112, "Discrepency in userId. UserId received with NL RC: %s, but RCState userId: %s", (uint8_t *)v96, 0x16u);
  v104 = v113;
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v104, -1, -1);
  MEMORY[0x1B5E44758](v96, -1, -1);
  swift_release();
  swift_release();

}

Swift::Bool __swiftcall ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char v31;
  char v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = type metadata accessor for RequestType();
  v2 = *(_QWORD **)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v33 = (char *)&v33 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v36 = (char *)&v33 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v35 = (char *)&v33 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v33 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v33 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v33 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v33 - v21;
  v23 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  v37 = (void (*)(char *, uint64_t, uint64_t))v2[2];
  v38 = v23;
  v37(v22, v23, v1);
  v24 = *MEMORY[0x1E0D9E8A0];
  v39 = (void (*)(char *, uint64_t, uint64_t))v2[13];
  v39(v20, v24, v1);
  lazy protocol witness table accessor for type RequestType and conformance RequestType();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v34 = v5;
  if (v42 == v40 && v43 == v41)
    v25 = 1;
  else
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = (void (*)(char *, uint64_t))v2[1];
  v26(v20, v1);
  v26(v22, v1);
  if ((v25 & 1) != 0)
    goto LABEL_6;
  v29 = v37;
  v28 = v38;
  v37(v17, v38, v1);
  v39(v14, *MEMORY[0x1E0D9E888], v1);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v42 == v40 && v43 == v41)
    goto LABEL_9;
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26(v14, v1);
  v26(v17, v1);
  if ((v31 & 1) == 0)
  {
    v17 = v35;
    v29(v35, v28, v1);
    v14 = v36;
    v39(v36, *MEMORY[0x1E0D9E878], v1);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v42 == v40 && v43 == v41)
    {
LABEL_9:
      swift_bridgeObjectRelease_n();
      v27 = 1;
LABEL_10:
      v26(v14, v1);
      v26(v17, v1);
      return v27 & 1;
    }
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26(v14, v1);
    v26(v17, v1);
    if ((v32 & 1) == 0)
    {
      v17 = v33;
      v29(v33, v28, v1);
      v14 = v34;
      v39(v34, *MEMORY[0x1E0D9E890], v1);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v42 == v40 && v43 == v41)
        v27 = 1;
      else
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
LABEL_6:
  v27 = 1;
  return v27 & 1;
}

uint64_t ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  BOOL v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  if (!(a3 >> 62))
  {
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 88);
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
    v11 = swift_bridgeObjectRetain();
    v12 = v10(v11);
    if (*(_QWORD *)(v12 + 16))
    {
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v14 & 1) != 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
        swift_retain();
        swift_bridgeObjectRelease();
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
        swift_bridgeObjectRelease();
        return v8;
      }
    }
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
    swift_bridgeObjectRelease();
    return 0;
  }
  if (a3 >> 62 != 1)
    return 0;
  v7 = *(_QWORD *)(a3 + 16) == a1 && *(_QWORD *)(a3 + 24) == a2;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
  v8 = a3 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  return v8;
}

uint64_t ResultCandidateState.voiceIdScore.setter(uint64_t a1)
{
  return ResultCandidateState.voiceIdScore.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_voiceIdScore);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TTResponseMessage.MitigationDecision(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  unsigned int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, a1);
  if (v5 == *MEMORY[0x1E0D9C968])
    return 0x64657463656C6573;
  if (v5 == *MEMORY[0x1E0D9C970])
    return 0x657461676974696DLL;
  if (v5 == *MEMORY[0x1E0D9C958])
  {
    v7 = 1652121965;
    return v7 | 0x74694D6500000000;
  }
  if (v5 == *MEMORY[0x1E0D9C950])
  {
    v7 = 1668444006;
    return v7 | 0x74694D6500000000;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return 0;
}

uint64_t ResultCandidateState.nlUserParses.getter()
{
  return RequestContextData.Builder.bargeInModes.getter();
}

void ConversationRequestProcessor.handleNLResultCandidateMessage(_:rcState:)(uint64_t a1, Swift::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  countAndFlagsBits = a2[1]._countAndFlagsBits;
  object = (unint64_t)a2[1]._object;
  swift_bridgeObjectRetain();
  v14 = NLResultCandidateMessageBase.userParses.getter();
  (*(void (**)(uint64_t))(a2->_countAndFlagsBits + 288))(v14);
  NLResultCandidateMessageBase.responseStatusCode.getter();
  (*(void (**)(char *))(a2->_countAndFlagsBits + 552))(v11);
  NLResultCandidateMessageBase.languageVariantResult.getter();
  (*(void (**)(char *))(a2->_countAndFlagsBits + 312))(v8);
  v15 = NLResultCandidateMessageBase.responseVariantResult.getter();
  (*(void (**)(uint64_t))(a2->_countAndFlagsBits + 336))(v15);
  (*(void (**)(uint64_t))(a2->_countAndFlagsBits + 384))(5);
  NLResultCandidateMessageBase.fallbackParse.getter();
  (*(void (**)(char *))(a2->_countAndFlagsBits + 648))(v5);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v22 = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain();
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, object, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v17, v18, "Cached NL output in ResultCandidateState for RC ID: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  ConversationRequestProcessor.maybeRunExecution(rcState:)(a2);
}

uint64_t ResultCandidateState.nlUserParses.setter(uint64_t a1)
{
  return ResultCandidateState.nlUserParses.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlUserParses, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
}

uint64_t ResultCandidateState.nlUserParses.setter(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)(v3 + *a2);
  swift_beginAccess();
  v7 = *v6;
  *v6 = a1;
  return a3(v7);
}

uint64_t ResultCandidateState.nlResponseStatusCode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseStatusCode;
  swift_beginAccess();
  v4 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t ResultCandidateState.nlLanguageVariantResult.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlLanguageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
}

uint64_t ResultCandidateState.fallbackParse.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_fallbackParse, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
}

void ConversationRequestProcessor.maybeRunExecution(rcState:)(Swift::String *a1)
{
  Swift::String *v1;
  Swift::String *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(void);
  int v18;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  Swift::String *v43;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint8_t *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  NSObject *v94;
  unint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v97;
  os_log_t v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  Swift::String *v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  Swift::String *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  Swift::String *v144;
  uint64_t v145;
  _QWORD v146[2];
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  Swift::String *v150;
  uint64_t (*v151)(uint64_t);
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  os_log_t v155;
  char *v156;
  NSObject *v157;
  uint64_t v158;
  uint64_t v159[3];
  uint64_t v160;

  v2 = v1;
  v4 = (_QWORD *)type metadata accessor for RequestType();
  v5 = *(v4 - 1);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v8);
  v157 = ((char *)v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1E0C80A78](v10);
  v156 = (char *)v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v146 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(uint64_t (**)(void))(a1->_countAndFlagsBits + 376);
  v18 = ((unsigned __int8 (*)(uint64_t))v17)(v14);
  if (v18 == 5 || v18 == 13)
  {
    v153 = v7;
    v154 = v5;
    v20 = (*(uint64_t (**)(void))(a1->_countAndFlagsBits + 352))();
    if (!v20)
    {
      if (((*(uint64_t (**)(Swift::String *))(v1->_countAndFlagsBits + 824))(a1) & 1) != 0)
      {
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v21 = type metadata accessor for Logger();
        __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
        v157 = Logger.logObject.getter();
        v22 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v157, v22))
        {
          v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v23 = 0;
          _os_log_impl(&dword_1B4BE6000, v157, v22, "POMMES result is not yet available. Holding off on running execution until NL results are received.", v23, 2u);
          MEMORY[0x1B5E44758](v23, -1, -1);
        }

        return;
      }
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.conversationBridge);
      v40 = Logger.logObject.getter();
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc();
        v152 = v4;
        v43 = v2;
        v44 = v42;
        *(_WORD *)v42 = 0;
        _os_log_impl(&dword_1B4BE6000, v40, v41, "Proceeding without waiting for POMMES result", v42, 2u);
        v45 = v44;
        v2 = v43;
        v4 = v152;
        MEMORY[0x1B5E44758](v45, -1, -1);
      }

    }
    v46 = (*(uint64_t (**)(void))(a1->_countAndFlagsBits + 872))();
    if (!v46)
      goto LABEL_53;
    v47 = v46;
    v152 = v4;
    v48 = v2;
    v155 = v20;
    v151 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 216);
    v49 = v151(v46);
    if (v50)
    {
      v51 = v49;
      v52 = v50;
      v53 = (*(uint64_t (**)(void))(*(_QWORD *)v47 + 240))();
      if (v54)
      {
        if (v51 == v53 && v52 == v54)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_52;
        }
        v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v56 & 1) != 0)
        {
          swift_release();
LABEL_52:
          v20 = v155;
          v2 = v48;
          v4 = v152;
LABEL_53:
          v69 = (*(uint64_t (**)(void))(v2->_countAndFlagsBits + 368))();
          if (v71 != 2)
          {
            outlined consume of ConversationRequestProcessor.State(v69, v70, v71);
            if (one-time initialization token for conversationBridge != -1)
              swift_once();
            v74 = type metadata accessor for Logger();
            __swift_project_value_buffer(v74, (uint64_t)static Logger.conversationBridge);
            v25 = Logger.logObject.getter();
            v75 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v25, v75))
            {
              v76 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v76 = 0;
              _os_log_impl(&dword_1B4BE6000, v25, v75, "Cannot run execution: No active turn?", v76, 2u);
              MEMORY[0x1B5E44758](v76, -1, -1);
            }
LABEL_61:

LABEL_68:
            swift_release();
            return;
          }
          v150 = v2;
          v151 = (uint64_t (*)(uint64_t))v69;
          v152 = v70;
          v72 = v17();
          if (ResultCandidateProcessingStatus.rawValue.getter(v72) == 0x64656C65636E6163
            && v73 == 0xE800000000000000)
          {
            goto LABEL_56;
          }
          v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v78 = swift_bridgeObjectRelease();
          if ((v77 & 1) != 0)
            goto LABEL_63;
          v86 = ((uint64_t (*)(uint64_t))v17)(v78);
          if (ResultCandidateProcessingStatus.rawValue.getter(v86) == 0xD000000000000013
            && v87 == 0x80000001B4EF52A0)
          {
LABEL_56:
            swift_bridgeObjectRelease();
          }
          else
          {
            v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v88 & 1) == 0)
            {
              if (one-time initialization token for conversationBridge != -1)
                swift_once();
              v89 = type metadata accessor for Logger();
              v90 = __swift_project_value_buffer(v89, (uint64_t)static Logger.conversationBridge);
              swift_retain();
              v149 = v90;
              v91 = Logger.logObject.getter();
              v92 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v91, v92))
              {
                v155 = v91;
                v93 = (uint8_t *)swift_slowAlloc();
                v148 = swift_slowAlloc();
                v159[0] = v148;
                v147 = v93;
                *(_DWORD *)v93 = 136315138;
                v146[1] = v93 + 4;
                v94 = v20;
                countAndFlagsBits = a1[1]._countAndFlagsBits;
                object = (unint64_t)a1[1]._object;
                swift_bridgeObjectRetain();
                v97 = countAndFlagsBits;
                v20 = v94;
                v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, object, v159);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_bridgeObjectRelease();
                v98 = v155;
                v99 = v92;
                v100 = v147;
                _os_log_impl(&dword_1B4BE6000, v155, v99, "Attempting execution for RC ID: %s", v147, 0xCu);
                v101 = v148;
                swift_arrayDestroy();
                MEMORY[0x1B5E44758](v101, -1, -1);
                MEMORY[0x1B5E44758](v100, -1, -1);

              }
              else
              {

                v102 = swift_release();
              }
              v103 = (*(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 280))(v102);
              if (!v103)
              {
                v136 = Logger.logObject.getter();
                v137 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v136, v137))
                {
                  v138 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v138 = 0;
                  _os_log_impl(&dword_1B4BE6000, v136, v137, "NL User parses is nil", v138, 2u);
                  MEMORY[0x1B5E44758](v138, -1, -1);
                  swift_release();

                }
                else
                {

                  swift_release();
                }
                goto LABEL_68;
              }
              v104 = v103;
              (*(void (**)(void))(a1->_countAndFlagsBits + 544))();
              v105 = *(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 304);
              v106 = swift_retain();
              v107 = v156;
              v108 = v105(v106);
              v148 = (*(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 328))(v108);
              v155 = v20;
              v110 = v109;
              v111 = v157;
              (*(void (**)(void))(a1->_countAndFlagsBits + 664))();
              type metadata accessor for NLResponse(0);
              v112 = swift_allocObject();
              *(_QWORD *)(v112 + 16) = v104;
              (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v112 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, v16, v12);
              v113 = (uint64_t)v107;
              v114 = v112;
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v113, v112 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
              v115 = (uint64_t *)(v112 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
              *v115 = v148;
              v115[1] = v110;
              *(_QWORD *)(v112 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo) = v155;
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v111, v112 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
              v116 = Logger.logObject.getter();
              v117 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v116, v117))
              {
                v118 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v118 = 0;
                _os_log_impl(&dword_1B4BE6000, v116, v117, "Constructing ConversationUserInput from unranked results", v118, 2u);
                MEMORY[0x1B5E44758](v118, -1, -1);
              }

              v119 = (char *)v151 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
              swift_beginAccess();
              v121 = v153;
              v120 = v154;
              (*(void (**)(char *, char *, _QWORD *))(v154 + 16))(v153, v119, v4);
              v122 = v150;
              v123 = (*(uint64_t (**)(Swift::String *, char *, uint64_t))(v150->_countAndFlagsBits + 1168))(a1, v121, v114);
              (*(void (**)(char *, _QWORD *))(v120 + 8))(v121, v4);
              if (v123)
              {
                (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, void *, uint64_t, void *, uint64_t, void *, _BYTE))(**(_QWORD **)((char *)&v122->_countAndFlagsBits + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) + 136))(0, 3, 8, v122[5]._countAndFlagsBits, v122[5]._object, v122[4]._countAndFlagsBits, v122[4]._object, a1[1]._countAndFlagsBits, a1[1]._object, *((_BYTE *)v152 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup));
                v124 = Logger.logObject.getter();
                v125 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v124, v125))
                {
                  v126 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v126 = 0;
                  _os_log_impl(&dword_1B4BE6000, v124, v125, "Sending conversation user input to execution", v126, 2u);
                  MEMORY[0x1B5E44758](v126, -1, -1);
                }

                v127 = v150;
                v128 = *(uint64_t *)((char *)&v150[1]._object
                                  + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
                v129 = *(uint64_t *)((char *)&v150[2]._countAndFlagsBits
                                  + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
                __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)&v150->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v128);
                (*(void (**)(uint64_t, _QWORD, _UNKNOWN **, uint64_t, uint64_t))(v129 + 24))(v123, *(uint64_t *)((char *)&v127->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v128, v129);
                swift_retain_n();
                v130 = Logger.logObject.getter();
                v131 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v130, v131))
                {
                  v132 = (uint8_t *)swift_slowAlloc();
                  v133 = swift_slowAlloc();
                  v160 = v133;
                  *(_DWORD *)v132 = 136315138;
                  v134 = ConversationUserInput.debugDescription.getter();
                  v158 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, &v160);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_1B4BE6000, v130, v131, "Successfully sent: %s", v132, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x1B5E44758](v133, -1, -1);
                  MEMORY[0x1B5E44758](v132, -1, -1);

                }
                else
                {

                  swift_release_n();
                }
                if (one-time initialization token for insightRequestSummaryLogger != -1)
                  swift_once();
                v142 = type metadata accessor for InsightRequestSummaryLogger();
                v143 = __swift_project_value_buffer(v142, (uint64_t)static Logger.insightRequestSummaryLogger);
                swift_retain();
                v144 = v150;
                swift_retain();
                specialized InsightRequestSummaryLogger.emitDebug(_:)(v143, v144, a1);
                swift_release();
                swift_release();
                v145 = (*(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 384))(6);
                if (((*(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 448))(v145) & 1) != 0)
                  (*(void (**)(Swift::String *))(v144->_countAndFlagsBits + 1040))(a1);
                swift_release();

                swift_release();
              }
              else
              {
                v139 = Logger.logObject.getter();
                v140 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v139, v140))
                {
                  v141 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v141 = 0;
                  _os_log_impl(&dword_1B4BE6000, v139, v140, "Could not build ConversationUserInput", v141, 2u);
                  MEMORY[0x1B5E44758](v141, -1, -1);
                  swift_release();
                  swift_release();

                  goto LABEL_68;
                }

                swift_release();
              }
              swift_release();
              goto LABEL_68;
            }
          }
LABEL_63:
          if (one-time initialization token for conversationBridge != -1)
            swift_once();
          v79 = type metadata accessor for Logger();
          __swift_project_value_buffer(v79, (uint64_t)static Logger.conversationBridge);
          swift_retain_n();
          v80 = Logger.logObject.getter();
          v81 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v80, v81))
          {
            v82 = (uint8_t *)swift_slowAlloc();
            v83 = swift_slowAlloc();
            v159[0] = v83;
            *(_DWORD *)v82 = 136315138;
            v84 = a1[1]._countAndFlagsBits;
            v85 = (unint64_t)a1[1]._object;
            swift_bridgeObjectRetain();
            v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v159);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B4BE6000, v80, v81, "Execution in progress for RC ID: %s. Not sending ConversationUserInput", v82, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v83, -1, -1);
            MEMORY[0x1B5E44758](v82, -1, -1);
            swift_release();

          }
          else
          {

            swift_release_n();
            swift_release();

          }
          goto LABEL_68;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc();
      v61 = swift_slowAlloc();
      v159[0] = v61;
      *(_DWORD *)v60 = 136315394;
      v62 = (*(uint64_t (**)(void))(*(_QWORD *)v47 + 240))();
      if (v63)
      {
        v64 = v63;
      }
      else
      {
        v62 = 7104878;
        v64 = 0xE300000000000000;
      }
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v64, v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v65 = swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 12) = 2080;
      v66 = v151(v65);
      if (v67)
      {
        v68 = v67;
      }
      else
      {
        v66 = 0x3E6C696E3CLL;
        v68 = 0xE500000000000000;
      }
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v58, v59, "Not running execution since TTResponseMessage has not been received yet, or PommesInfo points to a tcuId: %s whereas selectedTCUId is %s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v61, -1, -1);
      MEMORY[0x1B5E44758](v60, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
    goto LABEL_68;
  }
  if (v18 == 6)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v159[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = a1[1]._countAndFlagsBits;
      v30 = (unint64_t)a1[1]._object;
      swift_bridgeObjectRetain();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v25, v26, "Execution already in progress for TRP/RC %s, will not begin execution again", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v28, -1, -1);
      v31 = v27;
LABEL_22:
      MEMORY[0x1B5E44758](v31, -1, -1);

      return;
    }
    goto LABEL_61;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v25 = Logger.logObject.getter();
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v159[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = v17();
    v37 = ResultCandidateProcessingStatus.rawValue.getter(v36);
    v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v25, v33, "Not running execution, unexpected state %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v35, -1, -1);
    v31 = v34;
    goto LABEL_22;
  }

  swift_release_n();
}

void ConversationRequestProcessor.handlePommesResultCandidateMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  id v18;
  id v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  BOOL v30;
  Swift::String *v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint8_t *v51;
  unsigned __int8 v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  const char *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  Swift::String *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  id v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  Swift::String *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  id v107;
  uint64_t v108;
  uint64_t v109[4];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v106 = (char *)&v97 - v11;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  v107 = a1;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v103 = v7;
  v104 = v6;
  v105 = (uint64_t)v10;
  if (v16)
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v102 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v17 = 138412290;
    v18 = v107;
    v109[1] = (uint64_t)v107;
    v19 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v20 = v102;
    *v102 = v18;

    _os_log_impl(&dword_1B4BE6000, v14, v15, "ExecutionBridge received message: %@", v17, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v17, -1, -1);

  }
  else
  {

    v21 = v107;
  }
  v22 = (*(uint64_t (**)(void))(*v2 + 528))();
  if (!v22)
  {
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1B4BE6000, v45, v46, "Request already canceled. Not handling PommesResultCandidateMessage.", v47, 2u);
      MEMORY[0x1B5E44758](v47, -1, -1);
    }
    goto LABEL_39;
  }
  v23 = v22;
  v24 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v26 = v25;
  v27 = (unint64_t *)(v23 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v28 = *v27;
  v29 = (void *)v27[1];
  if (*v27 >> 62 == 1)
  {
    v30 = *(_QWORD *)(v28 + 16) == v24 && *(_QWORD *)(v28 + 24) == v26;
    if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v45 = Logger.logObject.getter();
      v62 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v45, v62))
      {

        goto LABEL_41;
      }
      v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v63 = 0;
      _os_log_impl(&dword_1B4BE6000, v45, v62, "A different RC was already selected. Not handling PommesResultCandidateMessage.", v63, 2u);
      v51 = v63;
      goto LABEL_37;
    }
  }
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v28, v29);
  v31 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v24, v26, v28, v29);
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v28, v29);
  if (!v31)
  {
    swift_bridgeObjectRetain();
    v45 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v45, v48))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_41;
    }
    v49 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    v109[0] = v50;
    *(_DWORD *)v49 = 136315138;
    swift_bridgeObjectRetain();
    v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v45, v48, "Received PommesResultCandidateMessage before RC state was created for RC ID: %s. Dropping it on the floor.", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v50, -1, -1);
    v51 = v49;
LABEL_37:
    MEMORY[0x1B5E44758](v51, -1, -1);
    goto LABEL_38;
  }
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v102 = (_QWORD *)v13;
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  v34 = os_log_type_enabled(v32, v33);
  v100 = v2;
  v101 = v24;
  if (v34)
  {
    v35 = swift_slowAlloc();
    v99 = v23;
    v36 = v35;
    v98 = swift_slowAlloc();
    v109[0] = v98;
    *(_DWORD *)v36 = 136315394;
    swift_bridgeObjectRetain();
    v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 12) = 2080;
    v37 = *(uint64_t (**)(uint64_t))(v31->_countAndFlagsBits + 800);
    v38 = swift_retain();
    v39 = v37(v38);
    v41 = v40;
    swift_release();
    v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v32, v33, "PommesResultCandidateMessage was received for RC ID %s when RC state: %s", (uint8_t *)v36, 0x16u);
    v42 = v98;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v42, -1, -1);
    v43 = v36;
    v23 = v99;
    MEMORY[0x1B5E44758](v43, -1, -1);

  }
  else
  {

    swift_release_n();
    v44 = swift_bridgeObjectRelease_n();
  }
  v52 = (*(uint64_t (**)(uint64_t))(v31->_countAndFlagsBits + 376))(v44);
  if (ResultCandidateProcessingStatus.rawValue.getter(v52) == 0x64656C65636E6163 && v53 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v56 = swift_bridgeObjectRelease();
    if ((v55 & 1) == 0)
    {
      v57 = (*(uint64_t (**)(uint64_t))(v31->_countAndFlagsBits + 352))(v56);
      swift_release();
      if (!v57)
      {
        v64 = PommesResultCandidateMessage.pommesResponse.getter();
        v65 = (uint64_t)v106;
        PommesResultCandidateMessage.error.getter();
        v66 = (uint64_t)v104;
        PommesResultCandidateMessage.searchReason.getter();
        v67 = type metadata accessor for PommesSearchReason();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 0, 1, v67);
        type metadata accessor for PommesInfo(0);
        v68 = swift_allocObject();
        *(_QWORD *)(v68 + 16) = v64;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v65, v68 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v68 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
        (*(void (**)(uint64_t))(v31->_countAndFlagsBits + 360))(v68);
        swift_bridgeObjectRetain_n();
        v69 = Logger.logObject.getter();
        v70 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v69, v70))
        {
          v71 = (uint8_t *)swift_slowAlloc();
          v72 = v31;
          v73 = swift_slowAlloc();
          v109[0] = v73;
          *(_DWORD *)v71 = 136315138;
          swift_bridgeObjectRetain();
          v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v26, v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B4BE6000, v69, v70, "Cached PommesResultCandidateMessage in ResultCandidateState for RC ID: %s", v71, 0xCu);
          swift_arrayDestroy();
          v74 = v73;
          v31 = v72;
          MEMORY[0x1B5E44758](v74, -1, -1);
          MEMORY[0x1B5E44758](v71, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v75 = v100;
        v76 = v105;
        PommesResultCandidateMessage.error.getter();
        v77 = type metadata accessor for PommesError();
        v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(v76, 1, v77);
        outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for PommesError?);
        if (v78 != 1)
        {
          v99 = v23;
          v79 = v107;
          swift_bridgeObjectRetain_n();
          v80 = v79;
          v81 = Logger.logObject.getter();
          v82 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v81, v82))
          {
            v83 = swift_slowAlloc();
            v105 = swift_slowAlloc();
            v109[0] = v105;
            *(_DWORD *)v83 = 136315394;
            PommesResultCandidateMessage.error.getter();
            v84 = String.init<A>(describing:)();
            v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v109);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v83 + 12) = 2080;
            swift_bridgeObjectRetain();
            v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v26, v109);
            v75 = v100;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B4BE6000, v81, v82, "PommesResultCandidateMessage had error: %s for RC ID: %s", (uint8_t *)v83, 0x16u);
            v86 = v105;
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v86, -1, -1);
            MEMORY[0x1B5E44758](v83, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        v87 = (void *)PommesResultCandidateMessage.pommesResponse.getter();

        if (v87)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          v88 = Logger.logObject.getter();
          v89 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v88, v89))
          {
            v90 = (uint8_t *)swift_slowAlloc();
            v91 = v31;
            v92 = swift_slowAlloc();
            v109[0] = v92;
            *(_DWORD *)v90 = 136315138;
            swift_bridgeObjectRetain();
            v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v26, v109);
            v75 = v100;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B4BE6000, v88, v89, "PommesResultCandidateMessage had unexpected nil response for RC ID: %s", v90, 0xCu);
            swift_arrayDestroy();
            v93 = v92;
            v31 = v91;
            MEMORY[0x1B5E44758](v93, -1, -1);
            MEMORY[0x1B5E44758](v90, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        if (one-time initialization token for insightRequestSummaryLogger != -1)
          swift_once();
        v94 = type metadata accessor for InsightRequestSummaryLogger();
        v95 = __swift_project_value_buffer(v94, (uint64_t)static Logger.insightRequestSummaryLogger);
        v96 = v107;
        swift_retain();
        swift_retain();
        specialized InsightRequestSummaryLogger.emitDebug(_:)(v95, (uint64_t)v96, v75, (uint64_t)v31);

        swift_release();
        swift_release();
        ConversationRequestProcessor.maybeRunExecution(rcState:)(v31);
        swift_release();
        goto LABEL_41;
      }
      swift_bridgeObjectRetain();
      v45 = Logger.logObject.getter();
      v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc();
        v60 = swift_slowAlloc();
        v109[0] = v60;
        *(_DWORD *)v59 = 136315138;
        swift_bridgeObjectRetain();
        v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v26, v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v61 = "Already received Pommes output for this RC ID: %s .. this happened because we received multiple Pommes out"
              "puts for the same RC ID.";
LABEL_32:
        _os_log_impl(&dword_1B4BE6000, v45, v58, v61, v59, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v60, -1, -1);
        MEMORY[0x1B5E44758](v59, -1, -1);
        swift_release();
LABEL_38:
        swift_release();
LABEL_39:

        return;
      }
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRetain();
  v45 = Logger.logObject.getter();
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc();
    v60 = swift_slowAlloc();
    v109[0] = v60;
    *(_DWORD *)v59 = 136315138;
    swift_bridgeObjectRetain();
    v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v26, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v61 = "RC ID:%s has already been canceled. Not handling PommesResultCandidateMessage.";
    goto LABEL_32;
  }
LABEL_33:

  swift_bridgeObjectRelease_n();
  swift_release();
LABEL_41:
  swift_release();
}

uint64_t type metadata accessor for InsightRequestSummaryLogger()
{
  uint64_t result;

  result = type metadata singleton initialization cache for InsightRequestSummaryLogger;
  if (!type metadata singleton initialization cache for InsightRequestSummaryLogger)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1B5E44668](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0CB09F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t destroy for AceServiceInvokerImpl.AceSubmitOptions()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PommesInfo(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for PommesInfo);
}

uint64_t ResultCandidateState.nlResponseStatusCode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseStatusCode;
  swift_beginAccess();
  v4 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResultCandidateState.nlLanguageVariantResult.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlLanguageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?, a1);
}

uint64_t type metadata accessor for NLResponse(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for NLResponse);
}

char *ConversationRequestProcessor.buildConversationUserInput(rcState:requestType:nlResponse:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v115 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v109 = (uint64_t)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v106 = (uint64_t)&v106 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v106 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v106 - v13;
  v15 = type metadata accessor for ExecutionLocation();
  v16 = *(_QWORD *)(v15 - 8);
  v116 = v15;
  v117 = v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v108 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v107 = (char *)&v106 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v112 = (char *)&v106 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v114 = (char *)&v106 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v106 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v28 = MEMORY[0x1E0C80A78](v27);
  v111 = (uint64_t)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v110 = (uint64_t)&v106 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v106 - v33;
  MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v106 - v35;
  v37 = type metadata accessor for RequestType();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v40 = (char *)&v106 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v40, a2, v37);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v40, v37);
  if (v41 != *MEMORY[0x1E0D9E8A0])
  {
    v54 = v117;
    if (v41 == *MEMORY[0x1E0D9E888])
    {
LABEL_6:
      v56 = a1[2];
      v55 = a1[3];
      v57 = *(uint64_t (**)(uint64_t))(*a1 + 520);
      v58 = swift_bridgeObjectRetain();
      v59 = v57(v58);
      v113 = (*(uint64_t (**)(uint64_t))(*a1 + 856))(v59);
      v61 = v60;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
      v62 = v116;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v12, 1, v116) == 1)
      {
        v63 = v54;
        v64 = v112;
        static ExecutionLocation.unknown.getter();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
      }
      else
      {
        v75 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
        v63 = v54;
        v64 = v112;
        v75(v112, v12, v62);
      }
      v77 = v114;
      v76 = v115;
      static ExecutionLocation.device.getter();
      type metadata accessor for ConversationUserInput(0);
      v43 = (char *)swift_allocObject();
      *((_QWORD *)v43 + 2) = v56;
      *((_QWORD *)v43 + 3) = v55;
      *((_QWORD *)v43 + 4) = 0;
      *((_QWORD *)v43 + 5) = v76;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v34, (uint64_t)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision], &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      *(_QWORD *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo] = 0;
      *(_QWORD *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_executionOverrideContext] = 0;
      v78 = (uint64_t *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
      *v78 = v113;
      v78[1] = v61;
      v79 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
      v79(&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation], v64, v62);
LABEL_17:
      v79(&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation], v77, v62);
LABEL_18:
      swift_retain();
      return v43;
    }
    if (v41 == *MEMORY[0x1E0D9E868] || v41 == *MEMORY[0x1E0D9E860])
      goto LABEL_27;
    if (v41 == *MEMORY[0x1E0D9E890])
    {
      v65 = a1[3];
      v113 = a1[2];
      v66 = *(uint64_t (**)(uint64_t))(*a1 + 864);
      v67 = swift_bridgeObjectRetain();
      v68 = v66(v67);
      if (v68)
      {
        v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 112))(v68);
        v68 = swift_release();
      }
      else
      {
        v69 = 0;
      }
      v97 = v107;
      v98 = (*(uint64_t (**)(uint64_t))(*a1 + 520))(v68);
      v99 = (*(uint64_t (**)(uint64_t))(*a1 + 856))(v98);
      v101 = v100;
      v102 = (uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation;
      v103 = v106;
      outlined init with copy of ReferenceResolutionClientProtocol?(v102, v106, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
      v62 = v116;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v103, 1, v116) == 1)
      {
        static ExecutionLocation.unknown.getter();
        outlined destroy of ReferenceResolutionClientProtocol?(v103, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v97, v103, v62);
      }
      v77 = v114;
      v104 = v115;
      static ExecutionLocation.device.getter();
      type metadata accessor for ConversationUserInput(0);
      v43 = (char *)swift_allocObject();
      *((_QWORD *)v43 + 2) = v113;
      *((_QWORD *)v43 + 3) = v65;
      *((_QWORD *)v43 + 4) = v69;
      *((_QWORD *)v43 + 5) = v104;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v110, (uint64_t)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision], &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      *(_QWORD *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo] = 0;
      *(_QWORD *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_executionOverrideContext] = 0;
      v105 = (uint64_t *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
      *v105 = v99;
      v105[1] = v101;
      v79 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      v79(&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation], v97, v62);
      goto LABEL_17;
    }
    if (v41 == *MEMORY[0x1E0D9E880]
      || v41 == *MEMORY[0x1E0D9E8A8]
      || v41 == *MEMORY[0x1E0D9E898]
      || v41 == *MEMORY[0x1E0D9E8B8]
      || v41 == *MEMORY[0x1E0D9E870])
    {
LABEL_27:
      v81 = *(_QWORD *)(v113 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID + 8);
      if (v81)
      {
        if ((v82 = a1[2],
              v83 = a1[3],
              v82 == *(_QWORD *)(v113 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID))
          && v81 == v83
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v84 = *(uint64_t (**)(uint64_t))(*a1 + 520);
          v85 = swift_bridgeObjectRetain();
          v86 = v84(v85);
          v87 = (*(uint64_t (**)(uint64_t))(*a1 + 856))(v86);
          v89 = v88;
          v90 = v109;
          outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, v109, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
          v91 = v116;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v90, 1, v116) == 1)
          {
            v92 = v108;
            static ExecutionLocation.unknown.getter();
            outlined destroy of ReferenceResolutionClientProtocol?(v90, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
          }
          else
          {
            v92 = v108;
            (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v108, v90, v91);
          }
          v94 = v114;
          v93 = v115;
          static ExecutionLocation.device.getter();
          type metadata accessor for ConversationUserInput(0);
          v43 = (char *)swift_allocObject();
          *((_QWORD *)v43 + 2) = v82;
          *((_QWORD *)v43 + 3) = v83;
          *((_QWORD *)v43 + 4) = 0;
          *((_QWORD *)v43 + 5) = v93;
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v111, (uint64_t)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision], &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
          *(_QWORD *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo] = 0;
          *(_QWORD *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_executionOverrideContext] = 0;
          v95 = (uint64_t *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
          *v95 = v87;
          v95[1] = v89;
          v96 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
          v96(&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation], v92, v91);
          v96(&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation], v94, v91);
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (v41 == *MEMORY[0x1E0D9E878])
        goto LABEL_6;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
    }
    return 0;
  }
  v42 = (*(uint64_t (**)(void))(*a1 + 864))();
  v43 = (char *)v42;
  if (v42)
  {
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 112))(v42);
    v113 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)v113 + 1176))(a1, v44);
    v45 = a1[2];
    v46 = a1[3];
    v47 = *(uint64_t (**)(uint64_t))(*a1 + 520);
    v48 = swift_bridgeObjectRetain();
    v49 = v47(v48);
    v50 = (*(uint64_t (**)(uint64_t))(*a1 + 856))(v49);
    v111 = v51;
    v112 = (char *)v50;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
    v53 = v116;
    v52 = v117;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v14, 1, v116) == 1)
    {
      static ExecutionLocation.unknown.getter();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v26, v14, v53);
    }
    v71 = v114;
    v70 = v115;
    static ExecutionLocation.device.getter();
    swift_release();
    type metadata accessor for ConversationUserInput(0);
    v43 = (char *)swift_allocObject();
    *((_QWORD *)v43 + 2) = v45;
    *((_QWORD *)v43 + 3) = v46;
    *((_QWORD *)v43 + 4) = v44;
    *((_QWORD *)v43 + 5) = v70;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v36, (uint64_t)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision], &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    *(_QWORD *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo] = v113;
    *(_QWORD *)&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_executionOverrideContext] = 0;
    v72 = &v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
    v73 = v111;
    *(_QWORD *)v72 = v112;
    *((_QWORD *)v72 + 1) = v73;
    v74 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    v74(&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation], v26, v53);
    v74(&v43[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation], v71, v53);
    goto LABEL_18;
  }
  return v43;
}

void ResultCandidateState.utteranceIfAvailable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for GestureInput();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v2);
  outlined init with copy of ResultCandidateType(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_1B4C0EDC0 + 4 * byte_1B4EEDEE0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B4C0EDC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
  swift_release();
  return v1;
}

uint64_t type metadata accessor for ConversationUserInput(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationUserInput);
}

char *ConversationUserInput.init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfo:utterance:asrLocation:nlLocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);

  *((_QWORD *)v10 + 2) = a1;
  *((_QWORD *)v10 + 3) = a2;
  *((_QWORD *)v10 + 4) = a3;
  *((_QWORD *)v10 + 5) = a4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a5, (uint64_t)&v10[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision], &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  *(_QWORD *)&v10[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo] = a6;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_executionOverrideContext] = 0;
  v14 = &v10[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
  *(_QWORD *)v14 = a7;
  *((_QWORD *)v14 + 1) = a8;
  v15 = &v10[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation];
  v16 = type metadata accessor for ExecutionLocation();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v15, a9, v16);
  v17(&v10[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation], a10, v16);
  return v10;
}

uint64_t ConversationBridgeInstrumentationUtil.mapPreExecutionRuleTypeToLogRuleType(_:_:)(unsigned __int8 a1)
{
  if (a1 == 8)
    return 0x100000000;
  else
    return ((uint64_t (*)(void))((char *)&loc_1B4C0EF68 + 4 * byte_1B4EE6D10[a1]))();
}

void sub_1B4C0EFA8()
{
  JUMPOUT(0x1B4C0EF68);
}

void sub_1B4C0EFB0()
{
  JUMPOUT(0x1B4C0EF68);
}

void sub_1B4C0EFB8()
{
  JUMPOUT(0x1B4C0EF68);
}

void sub_1B4C0EFC0()
{
  JUMPOUT(0x1B4C0EF68);
}

void sub_1B4C0EFC8()
{
  JUMPOUT(0x1B4C0EF68);
}

void sub_1B4C0EFD0()
{
  JUMPOUT(0x1B4C0EF68);
}

void sub_1B4C0EFD8()
{
  JUMPOUT(0x1B4C0EF68);
}

id specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  id v20;
  Class isa;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  int v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  id v40;
  id v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t ru_maxrss;
  NSObject *v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  id v53;
  id v54;
  rusage v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v20 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v22 = objc_msgSend(v20, sel_initWithNSUUID_, isa);

    v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F18]), sel_init);
    v24 = v23;
    if (v23)
    {
      objc_msgSend(v23, sel_setRequestId_, v22);
      v25 = v24;
      if (a4)
        v26 = (void *)MEMORY[0x1B5E432E8](a3, a4);
      else
        v26 = 0;
      objc_msgSend(v24, sel_setResultCandidateId_, v26);

    }
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F08]), sel_init);
    objc_msgSend(v19, sel_setEventMetadata_, v24);
    if ((a5 & 1) == 0 || !v19)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);

      return v19;
    }
    v27 = objc_allocWithZone(MEMORY[0x1E0D99FF8]);
    v28 = v19;
    v29 = objc_msgSend(v27, sel_init);
    if (v29)
    {
      v30 = objc_allocWithZone(MEMORY[0x1E0D99F60]);
      v31 = v29;
      v53 = v29;
      v32 = v28;
      v33 = v22;
      v34 = v31;
      v35 = objc_msgSend(v30, sel_init);
      objc_msgSend(v34, sel_setMemoryUsageMetadata_, v35);

      v22 = v33;
      v28 = v32;
      v29 = v53;

    }
    v55.ru_utime.tv_sec = 0;
    v55.ru_utime.tv_usec = 0;
    v55.ru_stime.tv_sec = 0;
    v55.ru_stime.tv_usec = 0;
    memset(&v55.ru_maxrss, 0, 112);
    v36 = getrusage(0, &v55);
    v54 = v22;
    if (v36)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationBridge);
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v38, v39))
        goto LABEL_22;
      v40 = v29;
      v41 = v28;
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1B4BE6000, v38, v39, "Not logging maxRSS since getrusage() did not succeed", v42, 2u);
      v43 = v42;
      v28 = v41;
      v29 = v40;
      goto LABEL_21;
    }
    ru_maxrss = v55.ru_maxrss;
    if (v55.ru_maxrss < 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationBridge);
      v38 = Logger.logObject.getter();
      v51 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v38, v51))
        goto LABEL_22;
      v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_1B4BE6000, v38, v51, "Not logging maxRSS since it is negative", v52, 2u);
      v43 = v52;
LABEL_21:
      MEMORY[0x1B5E44758](v43, -1, -1);
LABEL_22:

LABEL_23:
      objc_msgSend(v28, sel_setResourceUtilizationMetadata_, v29);

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return v19;
    }
    if (!v29)
      goto LABEL_23;
    v46 = objc_msgSend(v29, sel_memoryUsageMetadata);
    if (!v46)
      goto LABEL_23;
    v38 = v46;
    v47 = ceil(log10((double)(unint64_t)ru_maxrss));
    if (v47 <= 2.0)
    {
LABEL_34:
      -[NSObject setMaxRSS:](v38, sel_setMaxRSS_, ru_maxrss);
      goto LABEL_22;
    }
    v48 = __exp10(v47 + -2.0);
    v49 = v48 * rint((double)(unint64_t)ru_maxrss / v48);
    if ((~*(_QWORD *)&v49 & 0x7FF0000000000000) != 0)
    {
      if (v49 > -1.0)
      {
        if (v49 < 1.84467441e19)
        {
          ru_maxrss = (unint64_t)v49;
          goto LABEL_34;
        }
LABEL_41:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_41;
  }
  outlined destroy of UUID?((uint64_t)v10);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "The requestId is not a valid UUID. Will return a nil wrapper", v18, 2u);
    MEMORY[0x1B5E44758](v18, -1, -1);
  }

  return 0;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendConversationUserInput(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t ConversationRuntimeClient.sendConversationUserInput(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, void *, uint64_t);

  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v7;
  v10[3] = v8;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v11 = StaticString.description.getter();
  v13 = v12;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v7;
  *(_QWORD *)(v14 + 24) = v8;
  *(_QWORD *)(v14 + 32) = v9;
  *(_QWORD *)(v14 + 40) = "bridge(didReceiveInput:from:)";
  *(_QWORD *)(v14 + 48) = 29;
  *(_BYTE *)(v14 + 56) = 2;
  *(_QWORD *)(v14 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:);
  *(_QWORD *)(v14 + 72) = v10;
  v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v8 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v15(v11, v13, &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), v14);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationUserInput.debugDescription.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  void *v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70[0] = _typeName(_:qualified:)();
  v70[1] = v4;
  v5._countAndFlagsBits = 31520;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v70[0];
  v7 = (void *)v70[1];
  v70[0] = 123;
  v70[1] = 0xE100000000000000;
  v6._object = v7;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v9 = v70[0];
  v8 = v70[1];
  v70[0] = 0xD000000000000013;
  v70[1] = 0x80000001B4EFB180;
  v10 = v0[2];
  v11 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14 = v70[0];
  v15 = (void *)v70[1];
  v70[0] = v9;
  v70[1] = v8;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v70[0];
  v17 = v70[1];
  v70[0] = 0x6150686365657073;
  v70[1] = 0xEF203A6567616B63;
  v68 = v0[4];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  v19._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21 = v70[0];
  v22 = (void *)v70[1];
  v70[0] = v18;
  v70[1] = v17;
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v70[0];
  v24 = v70[1];
  strcpy((char *)v70, "nlResponse: ");
  BYTE5(v70[1]) = 0;
  HIWORD(v70[1]) = -5120;
  if (v0[5])
  {
    v26 = NLResponse.debugDescription.getter();
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  v68 = v26;
  v69 = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v28._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30 = v70[0];
  v31 = (void *)v70[1];
  v70[0] = v25;
  v70[1] = v24;
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = v30;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = v70[0];
  v33 = v70[1];
  v70[0] = 0xD000000000000014;
  v70[1] = 0x80000001B4EFB1A0;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision, (uint64_t)v3, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v35._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 8236;
  v36._object = (void *)0xE200000000000000;
  String.append(_:)(v36);
  v37 = v70[0];
  v38 = (void *)v70[1];
  v70[0] = v34;
  v70[1] = v33;
  swift_bridgeObjectRetain();
  v39._countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = v70[0];
  v40 = v70[1];
  v70[0] = 0xD000000000000012;
  v70[1] = 0x80000001B4EFB1C0;
  v42 = *(void **)((char *)v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo);
  if (v42)
  {
    v43 = objc_msgSend(v42, sel_debugDescription);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v45;

  }
  else
  {
    v44 = 0;
    v46 = 0;
  }
  v68 = v44;
  v69 = v46;
  v47._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 8236;
  v48._object = (void *)0xE200000000000000;
  String.append(_:)(v48);
  v49 = v70[0];
  v50 = (void *)v70[1];
  v70[0] = v41;
  v70[1] = v40;
  swift_bridgeObjectRetain();
  v51._countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v53 = v70[0];
  v52 = v70[1];
  strcpy((char *)v70, "asrLocation: ");
  HIWORD(v70[1]) = -4864;
  v54._countAndFlagsBits = ExecutionLocation.description.getter();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 8236;
  v55._object = (void *)0xE200000000000000;
  String.append(_:)(v55);
  v56 = v70[0];
  v57 = (void *)v70[1];
  v70[0] = v53;
  v70[1] = v52;
  swift_bridgeObjectRetain();
  v58._countAndFlagsBits = v56;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = v70[0];
  v59 = v70[1];
  strcpy((char *)v70, "nlLocation: ");
  BYTE5(v70[1]) = 0;
  HIWORD(v70[1]) = -5120;
  v61._countAndFlagsBits = ExecutionLocation.description.getter();
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62._countAndFlagsBits = 32;
  v62._object = (void *)0xE100000000000000;
  String.append(_:)(v62);
  v63 = v70[0];
  v64 = (void *)v70[1];
  v70[0] = v60;
  v70[1] = v59;
  swift_bridgeObjectRetain();
  v65._countAndFlagsBits = v63;
  v65._object = v64;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v66._countAndFlagsBits = 125;
  v66._object = (void *)0xE100000000000000;
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  return v70[0];
}

uint64_t NLResponse.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  unint64_t v11;
  Swift::String v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v1 = v0;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v36);
  v35 = (uint64_t)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B4EE4F30;
  v39 = 0;
  v40 = 0xE000000000000000;
  LOBYTE(v37) = 0;
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v0 + 16);
  v9 = type metadata accessor for Siri_Nlu_External_UserParse();
  v10._countAndFlagsBits = MEMORY[0x1B5E43504](v8, v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11 = v40;
  *(_QWORD *)(v6 + 32) = v39;
  *(_QWORD *)(v6 + 40) = v11;
  v39 = 0;
  v40 = 0xE000000000000000;
  LOBYTE(v37) = 1;
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  _print_unlocked<A, B>(_:_:)();
  v13 = v40;
  *(_QWORD *)(v6 + 48) = v39;
  *(_QWORD *)(v6 + 56) = v13;
  v39 = 0;
  v40 = 0xE000000000000000;
  LOBYTE(v37) = 2;
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 8250;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesInfo?);
  v15._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16 = v40;
  *(_QWORD *)(v6 + 64) = v39;
  *(_QWORD *)(v6 + 72) = v16;
  v39 = 0;
  v40 = 0xE000000000000000;
  LOBYTE(v37) = 3;
  _print_unlocked<A, B>(_:_:)();
  v17._countAndFlagsBits = 8250;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19 = v40;
  *(_QWORD *)(v6 + 80) = v39;
  *(_QWORD *)(v6 + 88) = v19;
  v39 = 0;
  v40 = 0xE000000000000000;
  LOBYTE(v37) = 4;
  _print_unlocked<A, B>(_:_:)();
  v20._countAndFlagsBits = 8250;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult + 8);
  v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
  v38 = v21;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v22._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23 = v40;
  *(_QWORD *)(v6 + 96) = v39;
  *(_QWORD *)(v6 + 104) = v23;
  v39 = 0;
  v40 = 0xE000000000000000;
  LOBYTE(v37) = 5;
  _print_unlocked<A, B>(_:_:)();
  v24._countAndFlagsBits = 8250;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, v35, &demangling cache variable for type metadata for ServerFallbackReason?);
  v25._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26 = v40;
  *(_QWORD *)(v6 + 112) = v39;
  *(_QWORD *)(v6 + 120) = v26;
  v39 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v27 = BidirectionalCollection<>.joined(separator:)();
  v29 = v28;
  swift_bridgeObjectRelease();
  v39 = _typeName(_:qualified:)();
  v40 = v30;
  v31._countAndFlagsBits = 31520;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = v27;
  v32._object = v29;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 125;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  return v39;
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_BYTE *)(v0 + 56);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)(v2, v3, v4, v5, v6, v9, v7, v8);
}

uint64_t closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, void *, uint64_t);

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_BYTE *)(v0 + 56);
  v7 = StaticString.description.getter();
  v9 = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v2;
  *(_QWORD *)(v10 + 24) = v1;
  *(_QWORD *)(v10 + 32) = v4;
  *(_QWORD *)(v10 + 40) = v3;
  *(_BYTE *)(v10 + 48) = v6;
  v11 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v5 + 208);
  swift_retain();
  v11(v7, v9, &async function pointer to partial apply for closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), v10);
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_BYTE *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = a5;
  *(_QWORD *)(v8 + 16) = a3;
  return swift_task_switch();
}

uint64_t objectdestroy_20Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v2 = *(int **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 48);
  v6 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_BYTE *)(v6 + 72) = v5;
  *(_QWORD *)(v6 + 40) = v3;
  *(_QWORD *)(v6 + 48) = v4;
  v9 = (uint64_t (*)(void))((char *)v2 + *v2);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 56) = v7;
  *v7 = v6;
  v7[1] = closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:);
  return v9();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:)(v2, v3, v4, v5, v7, v6);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v10;
  *v10 = v6;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ConversationService.bridge(didReceiveInput:from:)(a4, a5, a6);
}

uint64_t ConversationService.bridge(didReceiveInput:from:)()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of CamOutput(*(_QWORD *)(v2 + 152), type metadata accessor for ConversationService.EagerResult);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  void (*v72)(_QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81[3];

  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = (_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  v69 = *(_QWORD *)(v1 + 24);
  v70 = *(_QWORD *)(v1 + 16);
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeBegin(rcId:)();
  swift_release();
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v81[0] = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = ConversationUserInput.debugDescription.getter();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v2 = (_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "Received ConversationUserInput: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_retain();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v76 = v2;
    v13 = swift_slowAlloc();
    v81[0] = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v69, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "[ConversationService] received ConversationUserInput for rcId: %s", v12, 0xCu);
    swift_arrayDestroy();
    v14 = v13;
    v2 = v76;
    MEMORY[0x1B5E44758](v14, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }
  else
  {
    swift_release();
  }

  v15 = *(_QWORD *)(v0 + 136);
  swift_beginAccess();
  v16 = *(void **)(v15 + 112);
  LOBYTE(v15) = *(_BYTE *)(v15 + 120);
  outlined copy of ConversationService.State(v16, v15);
  v17 = specialized ConversationService.State.assertTurnStarted(function:)((uint64_t)"bridge(didReceiveInput:from:)", 29, 2, (uint64_t)v16, v15);
  *(_QWORD *)(v0 + 296) = v17;
  v18 = *v2;
  v68 = v17;
  swift_retain();
  outlined consume of ConversationService.State(v16, v15);
  v19 = *(_QWORD *)(v18 + 40);
  if (!v19)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    v21 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v21)
      goto LABEL_11;
LABEL_21:
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_22;
    goto LABEL_25;
  }
  v20 = swift_bridgeObjectRetain();
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
    goto LABEL_21;
LABEL_11:
  v64 = v20;
  v65 = v19;
  v22 = *(_QWORD *)(v0 + 272);
  v74 = *(_QWORD *)(v0 + 208);
  v67 = *(_QWORD *)(v0 + 112);
  v23 = v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  v75 = v22;
  v72 = *(void (**)(_QWORD))(v22 + 16);
  v73 = *(_QWORD *)(v22 + 72);
  v71 = *MEMORY[0x1E0D9F6C8];
  v66 = *MEMORY[0x1E0D9F6C0];
  v24 = *(_QWORD *)(v0 + 232);
  do
  {
    v78 = v23;
    v79 = v21;
    v29 = *(_QWORD *)(v0 + 256);
    v30 = *(_QWORD *)(v0 + 248);
    v77 = *(_QWORD *)(v0 + 240);
    v31 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 224);
    v33 = *(_QWORD *)(v0 + 200);
    v72(*(_QWORD *)(v0 + 280));
    Siri_Nlu_External_UserParse.repetitionResult.getter();
    Siri_Nlu_External_RepetitionResult.repetitionType.getter();
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v31, v33);
    v34 = *(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104);
    v34(v30, v71, v32);
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type Siri_Nlu_External_RepetitionResult.RepetitionType and conformance Siri_Nlu_External_RepetitionResult.RepetitionType, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F6D0], MEMORY[0x1E0D9F6D8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v35 = *(_QWORD *)(v0 + 64);
    v36 = *(_QWORD *)(v0 + 72);
    v37 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v37(v30, v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v77, v29, v32);
    if (v35 == v36)
    {
      v37(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
LABEL_13:
      v25 = objc_msgSend(*(id *)(v67 + 32), sel_recognition, v64);
      v26 = objc_msgSend(v25, sel_aceRecognition);

      (*(void (**)(uint64_t, unint64_t, id))(*(_QWORD *)v68 + 336))(v70, v69, v26);
      goto LABEL_14;
    }
    v39 = *(_QWORD *)(v0 + 240);
    v38 = *(_QWORD *)(v0 + 248);
    v40 = *(_QWORD *)(v0 + 224);
    v34(v38, v66, v40);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v41 = *(_QWORD *)(v0 + 80);
    v42 = *(_QWORD *)(v0 + 88);
    v37(v38, v40);
    v37(v39, v40);
    if (v41 == v42)
      goto LABEL_13;
LABEL_14:
    v27 = *(_QWORD *)(v0 + 280);
    v28 = *(_QWORD *)(v0 + 264);
    v37(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 224));
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v27, v28);
    v23 = v78 + v73;
    v21 = v79 - 1;
  }
  while (v79 != 1);
  swift_bridgeObjectRelease();
  v19 = v65;
  if (!v65)
    goto LABEL_25;
LABEL_22:
  v43 = *(_QWORD *)(v0 + 184);
  v44 = *(_QWORD *)(v0 + 192);
  v45 = *(_QWORD *)(v0 + 168);
  v46 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v43, v19 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, v45);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v44, v43, v45);
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v49 = 0;
    _os_log_impl(&dword_1B4BE6000, v47, v48, "[ConversationService] Storing NL Response code ConversationUserInput for execution overrides check", v49, 2u);
    MEMORY[0x1B5E44758](v49, -1, -1);
  }
  v50 = *(_QWORD *)(v0 + 192);
  v51 = *(_QWORD *)(v0 + 168);
  v52 = *(_QWORD *)(v0 + 176);

  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v68 + 368))(v70, v69, v50);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
LABEL_25:
  v53 = *(_QWORD *)(v0 + 160);
  v54 = *(_QWORD *)(v0 + 136);
  v55 = *(_QWORD *)(v0 + 112);
  v56 = type metadata accessor for TaskPriority();
  v80 = *(_OWORD *)(v0 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v53, 1, 1, v56);
  v57 = static MessageBusActor.shared;
  v59 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v58, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = v57;
  *(_QWORD *)(v60 + 24) = v59;
  *(_QWORD *)(v60 + 32) = v55;
  *(_QWORD *)(v60 + 40) = v54;
  *(_QWORD *)(v60 + 48) = v68;
  *(_OWORD *)(v60 + 56) = v80;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  v61 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime19ConversationServiceC11EagerResultO_Tgm5(v53, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.bridge(didReceiveInput:from:), v60);
  *(_QWORD *)(v0 + 304) = v61;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 320))(v55, v61);
  v62 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 312) = v62;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v62 = v0;
  v62[1] = ConversationService.bridge(didReceiveInput:from:);
  return Task.value.getter();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v4[18] = type metadata accessor for ConversationService.EagerResult(0);
  v4[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v4[20] = swift_task_alloc();
  v5 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v4[21] = v5;
  v4[22] = *(_QWORD *)(v5 - 8);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v6 = type metadata accessor for Siri_Nlu_External_RepetitionResult();
  v4[25] = v6;
  v4[26] = *(_QWORD *)(v6 - 8);
  v4[27] = swift_task_alloc();
  v7 = type metadata accessor for Siri_Nlu_External_RepetitionResult.RepetitionType();
  v4[28] = v7;
  v4[29] = *(_QWORD *)(v7 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v8 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[33] = v8;
  v4[34] = *(_QWORD *)(v8 - 8);
  v4[35] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[36] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t type metadata accessor for ConversationService.EagerResult(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ConversationService.EagerResult);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesInfo()
{
  return PommesInfo.debugDescription.getter();
}

uint64_t PommesInfo.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;
  unint64_t v25;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v0 + 16);
  v8 = (id)v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesResponse?);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  v24 = 123;
  v25 = 0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10 = v24;
  v11 = v25;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, (uint64_t)v7, &demangling cache variable for type metadata for PommesError?);
  v12 = String.init<A>(describing:)();
  v14 = v13;
  v24 = v10;
  v25 = v11;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v24;
  v17 = v25;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, (uint64_t)v4, &demangling cache variable for type metadata for PommesSearchReason?);
  v18 = String.init<A>(describing:)();
  v20 = v19;
  v24 = v16;
  v25 = v17;
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 125;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  return v24;
}

void ServerFallbackCapableRequestProcessor.commit(rcState:)(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, unint64_t, char *);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  void **v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(void *, uint64_t, uint64_t, uint64_t);
  id v73;
  void *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  NSObject *v99;
  uint64_t v100[3];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v2 = v1;
  v4 = type metadata accessor for UserID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RequestType();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v98 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v99 = ((char *)&v88 - v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(v14);
  if (ResultCandidateProcessingStatus.rawValue.getter(v17) == 0xD000000000000016 && v18 == 0x80000001B4EF5330)
  {
    v19 = swift_bridgeObjectRelease();
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v19 = swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.conversationBridge);
      swift_retain();
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        v44 = swift_slowAlloc();
        v100[0] = v44;
        *(_DWORD *)v43 = 136315138;
        v45 = *((_QWORD *)a1 + 2);
        v46 = *((_QWORD *)a1 + 3);
        swift_bridgeObjectRetain();
        v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v41, v42, "Chosen RC ID: %s is not handled by server", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v44, -1, -1);
        MEMORY[0x1B5E44758](v43, -1, -1);

      }
      else
      {

        swift_release();
      }
      ConversationRequestProcessor.commit(rcState:)(a1);
      return;
    }
  }
  v97 = v9;
  v21 = (*(uint64_t (**)(uint64_t))(*v1 + 528))(v19);
  if (v21)
  {
    v22 = v21;
    v95 = v8;
    v92 = v7;
    v93 = v5;
    v94 = v4;
    v23 = ServerFallbackCapableRequestProcessor.makePreExecutionRules(_:)(a1);
    v24 = *(uint64_t (**)(void))(**(_QWORD **)((char *)v1
                                            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker)
                              + 88);
    v96 = v23;
    v25 = v24();
    (*(void (**)(_QWORD))(*(_QWORD *)a1 + 480))(BYTE1(v25));
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 504))(v25);
    v26 = *(_QWORD *)((char *)v1
                    + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler);
    v27 = v2[8];
    v28 = v2[9];
    v29 = v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
    v30 = type metadata accessor for InputOrigin();
    v31 = *(_QWORD *)(v30 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v16, v29, v30);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v16, 0, 1, v30);
    v32 = *(uint64_t (**)(char *, uint64_t, unint64_t, char *))(*(_QWORD *)v26 + 144);
    v90 = v27;
    v91 = v28;
    LOBYTE(v26) = v32(a1, v27, v28, v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for InputOrigin?);
    if ((v26 & 1) != 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_1B4BE6000, v34, v35, "Acted upon pre-execution decision. Not committing..", v36, 2u);
        MEMORY[0x1B5E44758](v36, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(*v2 + 1208))(a1, v22);
    v47 = AFIsInternalInstall();
    v48 = v22;
    v49 = v95;
    v50 = v97;
    if ((_DWORD)v47)
    {
      v51 = v48 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      v52 = v99;
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v50 + 16))(v99, v51, v49);
      v53 = v98;
      (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v98, *MEMORY[0x1E0D9E8A8], v49);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
      LOBYTE(v51) = dispatch thunk of static Equatable.== infix(_:_:)();
      v54 = *(void (**)(char *, uint64_t))(v50 + 8);
      v54(v53, v49);
      v47 = ((uint64_t (*)(NSObject *, uint64_t))v54)(v52, v49);
      if ((v51 & 1) == 0)
      {
        type metadata accessor for ConversationBridge(0);
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v57 = v56;
        v58 = *(void **)((char *)v2
                       + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
        swift_getObjectType();
        specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(v55, v57, v58, 0, 0, 0, 0);
        v47 = swift_bridgeObjectRelease();
      }
    }
    if (((*(uint64_t (**)(uint64_t))(*v2 + 440))(v47) & 1) == 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*v2 + 1184))(*((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), 1, 0, 0);
    v59 = ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(a1, v48);
    v60 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 424))(v59);
    if (v60)
    {
      v89 = (void *)v60;
      v61 = v48 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      v62 = v99;
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v50 + 16))(v99, v61, v49);
      v63 = (void **)(v48 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
      swift_beginAccess();
      v64 = *v63;
      v98 = (char *)v48;
      v65 = v50;
      v66 = v93;
      v67 = v92;
      v68 = v94;
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v92, &a1[OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId], v94);
      type metadata accessor for ConversationContextUpdateMetadata();
      v69 = swift_allocObject();
      *(_BYTE *)(v69 + 16) = 1;
      (*(void (**)(uint64_t, NSObject *, uint64_t))(v65 + 32))(v69 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v62, v49);
      *(_QWORD *)(v69 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v64;
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v69 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v67, v68);
      *(_BYTE *)(v69 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)v100, &demangling cache variable for type metadata for ContextUpdating?);
      v70 = v101;
      if (v101)
      {
        v71 = v102;
        __swift_project_boxed_opaque_existential_1(v100, v101);
        v72 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v71 + 16);
        v73 = v64;
        v74 = v89;
        v72(v89, v69, v70, v71);
        v75 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
      }
      else
      {
        v76 = v64;
        v75 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v100, &demangling cache variable for type metadata for ContextUpdating?);
        v74 = v89;
      }
      (*(void (**)(uint64_t))(*v2 + 1096))(v75);

      swift_release();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 384))(8);
    (*(void (**)(uint64_t))(*v2 + 1344))(1);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    swift_retain_n();
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = swift_slowAlloc();
      v81 = swift_slowAlloc();
      v100[0] = v81;
      *(_DWORD *)v80 = 136315394;
      v82 = v91;
      swift_bridgeObjectRetain();
      v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v82, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 12) = 2080;
      v83 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 800);
      v84 = swift_retain();
      v85 = v83(v84);
      v87 = v86;
      swift_release();
      v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v87, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v78, v79, "Done handling server-fallback request for requestId: %s for: %s", (uint8_t *)v80, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v81, -1, -1);
      MEMORY[0x1B5E44758](v80, -1, -1);
      swift_release();

LABEL_37:
      swift_release();
      return;
    }

    swift_release();
    swift_release();
    swift_release_n();
    swift_release_n();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationBridge);
    v99 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v99, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_1B4BE6000, v99, v38, "ConversationBridge: commit received while we're not in a turn. Ignoring.", v39, 2u);
      MEMORY[0x1B5E44758](v39, -1, -1);
    }

  }
}

void ConversationRequestProcessor.commit(rcState:)(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t (*v45)(char *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int (*v55)(uint64_t, uint64_t, _QWORD *);
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  void (*v62)(_BYTE *, _QWORD *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _BYTE v73[12];
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  _QWORD *v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v85 = &v73[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v84 = (_QWORD *)type metadata accessor for TTResponseMessage.MitigationDecision();
  v87 = *(v84 - 1);
  MEMORY[0x1E0C80A78](v84);
  v80 = &v73[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1E0C80A78](v5);
  v7 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = &v73[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = &v73[-v13];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v73[-v15];
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  v20 = os_log_type_enabled(v18, v19);
  v88 = v7;
  v81 = v11;
  v82 = v5;
  v86 = v16;
  v83 = v14;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v91[0] = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = *((_QWORD *)a1 + 2);
    v24 = *((_QWORD *)a1 + 3);
    swift_bridgeObjectRetain();
    v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v18, v19, "Attempting commit logic for RC ID: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    MEMORY[0x1B5E44758](v21, -1, -1);
  }
  else
  {
    swift_release();
  }

  v25 = (*(uint64_t (**)(void))(*(_QWORD *)v89 + 368))();
  v28 = v26;
  if (v27 == 2)
  {
    v79 = v25;
    v30 = *((_QWORD *)a1 + 2);
    v29 = *((_QWORD *)a1 + 3);
    swift_bridgeObjectRetain_n();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    v33 = os_log_type_enabled(v31, v32);
    v77 = v30;
    v78 = v29;
    if (v33)
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v91[0] = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain();
      v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v31, v32, "Calling CheckExecutionOverride for RC ID: %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      MEMORY[0x1B5E44758](v34, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v39 = v84;
    v40 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 864))();
    if (v40)
    {
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 144))(v40);
      if ((v42 & 1) != 0)
        v43 = 0;
      else
        v43 = v41;
      v76 = v43;
    }
    else
    {
      v76 = 0;
    }
    v44 = &a1[OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId];
    v45 = *(uint64_t (**)(char *))(*(_QWORD *)v89 + 1200);
    v46 = v45(&a1[OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId]);
    if (v46)
    {
      v75 = *(_QWORD *)(v46 + 16);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      v75 = MEMORY[0x1E0DEE9D8];
    }
    v47 = v45(v44);
    if (v47)
    {
      v48 = *(_QWORD *)(v47 + 24);
      swift_bridgeObjectRetain();
      v47 = swift_release();
    }
    else
    {
      v48 = MEMORY[0x1E0DEE9D8];
    }
    v49 = (uint64_t)v86;
    v84 = v28;
    v74 = *((unsigned __int8 *)v28 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 520))(v47);
    v50 = v87;
    v51 = (uint64_t)v83;
    (*(void (**)(_BYTE *, _QWORD, _QWORD *))(v87 + 104))(v83, *MEMORY[0x1E0D9C970], v39);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v50 + 56))(v51, 0, 1, v39);
    v52 = (uint64_t)v88;
    v53 = (uint64_t)&v88[*(int *)(v82 + 48)];
    v54 = &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?;
    outlined init with copy of ReferenceResolutionClientProtocol?(v49, (uint64_t)v88, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v51, v53, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    v55 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v50 + 48);
    if (v55(v52, 1, v39) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      if (v55(v53, 1, v39) == 1)
      {
        v56 = -1;
      }
      else
      {
        v54 = &demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?);
        v56 = 0;
      }
    }
    else
    {
      v57 = (uint64_t)v81;
      outlined init with copy of ReferenceResolutionClientProtocol?(v52, (uint64_t)v81, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      v58 = v39;
      if (v55(v53, 1, v39) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        (*(void (**)(uint64_t, _QWORD *))(v87 + 8))(v57, v39);
        v56 = 0;
        v54 = &demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?);
      }
      else
      {
        v59 = v57;
        v60 = v87;
        v61 = v80;
        (*(void (**)(_BYTE *, uint64_t, _QWORD *))(v87 + 32))(v80, v53, v58);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C978], MEMORY[0x1E0D9C988]);
        v56 = dispatch thunk of static Equatable.== infix(_:_:)();
        v62 = *(void (**)(_BYTE *, _QWORD *))(v60 + 8);
        v62(v61, v58);
        v54 = &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?;
        outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v86, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        v62((_BYTE *)v59, v58);
      }
    }
    v63 = (uint64_t)v85;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v88, v54);
    type metadata accessor for ExecutionOverrideContext();
    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = v75;
    *(_QWORD *)(v64 + 24) = v48;
    *(_BYTE *)(v64 + 32) = v74;
    *(_BYTE *)(v64 + 33) = v56 & 1;
    *(_QWORD *)(v64 + 40) = v76;
    *(_BYTE *)(v64 + 48) = 1;
    v65 = *(_QWORD *)(v89 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
    v66 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v63, 1, 1, v66);
    v67 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    swift_retain();
    v68 = v79;
    swift_retain();
    if (v67 != -1)
      swift_once();
    swift_beginAccess();
    v69 = static MessageBusActor.shared;
    v70 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v71 = (_QWORD *)swift_allocObject();
    v71[2] = v69;
    v71[3] = v70;
    v72 = v77;
    v71[4] = v89;
    v71[5] = v72;
    v71[6] = v78;
    v71[7] = v64;
    v71[8] = a1;
    v71[9] = v68;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v63, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.commit(rcState:), (uint64_t)v71);
    (*(void (**)(void))(*(_QWORD *)v65 + 120))();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    outlined consume of ConversationRequestProcessor.State(v25, v26, v27);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1B4BE6000, v36, v37, "Ignoring commit() call as we are not in a turn", v38, 2u);
      MEMORY[0x1B5E44758](v38, -1, -1);
    }

  }
}

uint64_t ConversationRequestProcessor.fetchCachedAnnounceContext(forUserId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28[4];
  _QWORD v29[4];

  v3 = type metadata accessor for UserID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v28[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ConversationSessionKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v28[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 392))(v28, v9);
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0D9EDC8], v7);
  dispatch thunk of ConversationSessionState.value(forKey:userId:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if (v29[3])
  {
    type metadata accessor for AnnounceContext();
    if (swift_dynamicCast())
      v12 = v27;
    else
      v12 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v12 = 0;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_retain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v28[0] = v17;
    *(_DWORD *)v16 = 136315650;
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EFA0]);
    v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    *(_WORD *)(v16 + 12) = 2080;
    if (v12)
      v20 = swift_bridgeObjectRetain();
    else
      v20 = 0;
    v29[0] = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]?);
    v21 = String.init<A>(describing:)();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2080;
    if (v12)
      v23 = swift_bridgeObjectRetain();
    else
      v23 = 0;
    v29[0] = v23;
    v24 = String.init<A>(describing:)();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Fetched the following for userId: %s from cachedSessionContext: activeTasks: %s, executedTasks: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    MEMORY[0x1B5E44758](v16, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    swift_release_n();
  }
  return v12;
}

uint64_t type metadata accessor for AnnounceContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ExecutionOverrideContext()
{
  return objc_opt_self();
}

void ConcurrentTaskPool.add(task:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 24) + 16);
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in ConcurrentTaskPool.add(task:));
  os_unfair_lock_unlock(v1);
}

_QWORD *specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t partial apply for closure #1 in ConcurrentTaskPool.add(task:)()
{
  uint64_t v0;

  return closure #1 in ConcurrentTaskPool.add(task:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t closure #1 in ConcurrentTaskPool.add(task:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;

  v4 = (_QWORD *)(a1 + 16);
  swift_beginAccess();
  v5 = *(_QWORD **)(a1 + 16);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *v4 = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    *v4 = v5;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = a2;
  return swift_endAccess();
}

uint64_t specialized ConversationService.State.assertTurnStarted(function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v10[2];

  if ((a5 & 0xC0) != 0x80)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    strcpy((char *)v10, "Cannot call ");
    BYTE5(v10[1]) = 0;
    HIWORD(v10[1]) = -5120;
    v5._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._object = (void *)0x80000001B4EFAA60;
    v6._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v6);
    v7 = v10[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *v8 = v10[0];
    v8[1] = v7;
    swift_willThrow();
  }
  return a4;
}

uint64_t ConversationService.ActiveTurn.registerNlResponseCode(rcId:responseCode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v10 = MEMORY[0x1E0D9F520];
  v11 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a3, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v9);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v8, a1, a2, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?, (uint64_t (*)(_QWORD))v10, (void (*)(char *, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t, uint64_t))specialized Dictionary._Variant.removeValue(forKey:));
  return swift_endAccess();
}

uint64_t ConversationService.ActiveTurn.registerEagerTask(forInput:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eagerTasks);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v6;
  *v6 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v4, v5, isUniquelyReferenced_nonNull_native);
  *v6 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:) in conformance ConversationRuntimeClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(**(_QWORD **)v5 + 184)
                                                                            + *(_QWORD *)(**(_QWORD **)v5 + 184));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[10] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[9];
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v0[11] = v1[3];
  v0[12] = v1[4];
  v0[13] = v1[5];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 88);
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 56) = v3;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionOverrideResult?);
  *v6 = v0;
  v6[1] = ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v0 + 40);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionOverrideResult?);
  *v6 = v0;
  v6[1] = ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  return swift_task_switch();
}

uint64_t type metadata accessor for DecisionEngineResponse()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DecisionEngineResponse;
  if (!type metadata singleton initialization cache for DecisionEngineResponse)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RemoteConversationClient.flexibleExecutionSupportOptions()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v9)(_QWORD, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[4];
  v2 = type metadata accessor for Logger();
  v0[7] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v9 = (uint64_t (*)(_QWORD, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                 + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  v0[8] = v6;
  v7 = type metadata accessor for FlexibleExecutionSupportOptions();
  v0[9] = v7;
  *v6 = v0;
  v6[1] = RemoteConversationClient.flexibleExecutionSupportOptions();
  return v9(v0[6], &async function pointer to closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions(), 0, v7, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  outlined init with copy of FlexibleExecutionSupportOptions?(*(_QWORD *)(v0 + 48), v2);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v1);
  v5 = *(_QWORD *)(v0 + 40);
  if (v4 == 1)
  {
    outlined destroy of FlexibleExecutionSupportOptions?(*(_QWORD *)(v0 + 40));
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v17 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001B4EFEF60, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v6, v7, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return false.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }

    if (one-time initialization token for none != -1)
      swift_once();
    v10 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 24);
    v13 = __swift_project_value_buffer(v10, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v12, v13, v10);
    outlined destroy of FlexibleExecutionSupportOptions?(v11);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 24);
    outlined destroy of FlexibleExecutionSupportOptions?(*(_QWORD *)(v0 + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v15, v5, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 72) - 8) + 56))(*(_QWORD *)(v0 + 48), 1, 1);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  outlined init with copy of FlexibleExecutionSupportOptions?(*(_QWORD *)(v0 + 48), v2);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v1);
  v5 = *(_QWORD *)(v0 + 40);
  if (v4 == 1)
  {
    outlined destroy of FlexibleExecutionSupportOptions?(*(_QWORD *)(v0 + 40));
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v17 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001B4EFEF60, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v6, v7, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return false.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }

    if (one-time initialization token for none != -1)
      swift_once();
    v10 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 24);
    v13 = __swift_project_value_buffer(v10, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v12, v13, v10);
    outlined destroy of FlexibleExecutionSupportOptions?(v11);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 24);
    outlined destroy of FlexibleExecutionSupportOptions?(*(_QWORD *)(v0 + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v15, v5, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = swift_allocObject();
    *(_QWORD *)(v0 + 48) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    swift_unknownObjectRetain_n();
    v4 = swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v4;
    *(_QWORD *)(v4 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions();
    *(_QWORD *)(v4 + 24) = v3;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v5;
    type metadata accessor for FlexibleExecutionSupportOptions();
    *v5 = v0;
    v5[1] = closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions();
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v15 = v11;
      *(_DWORD *)v10 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001B4EFEF60, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v8, v9, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v11, -1, -1);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    if (one-time initialization token for none != -1)
      swift_once();
    v12 = *(_QWORD *)(v0 + 24);
    v13 = type metadata accessor for FlexibleExecutionSupportOptions();
    v14 = __swift_project_value_buffer(v13, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v14, v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t type metadata accessor for ConversationFlexibleExecutionSupportXPC()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<FlexibleExecutionSupportOptions, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions());
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for FlexibleExecutionSupportOptions();
  v3 = MEMORY[0x1E0C80A78](v2);
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x60))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<FlexibleExecutionSupportOptions, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationFlexibleExecutionSupportXPC.swiftRepresentation()()
{
  return FlexibleExecutionSupportOptions.init(rawValue:)();
}

uint64_t outlined init with copy of FlexibleExecutionSupportOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FlexibleExecutionSupportOptions?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConversationUserInput()
{
  return ConversationUserInput.debugDescription.getter();
}

uint64_t ConversationService.ActiveTurn.registerInput(rcId:input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Input();
  v10 = MEMORY[0x1E0D9C588];
  v11 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a3, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v9);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v8, a1, a2, &demangling cache variable for type metadata for Input?, (uint64_t (*)(_QWORD))v10, (void (*)(char *, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t, uint64_t))specialized Dictionary._Variant.removeValue(forKey:));
  return swift_endAccess();
}

_QWORD *initializeWithCopy for ConversationService.EagerResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v14 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      *a1 = *a2;
      swift_retain();
      goto LABEL_10;
    case 0:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_retain();
      swift_retain();
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Input();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      goto LABEL_10;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t objectdestroy_16Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ExecutionOverrideResult?, Never>)
                 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + v4);
  v6 = v0 + v3;
  v7 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v10[3] = v6;
  v11 = (_QWORD *)swift_task_alloc();
  v10[4] = v11;
  *v11 = v10;
  v11[1] = closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:);
  return ConversationService.checkExecutionOverrides(context:resultCandidateId:)(v5, v8, v9);
}

void ConversationService.checkExecutionOverrides(context:resultCandidateId:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;

  v1 = v0[17];
  swift_beginAccess();
  if ((*(_QWORD *)(v1 + 104) & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  v2 = v0[28];
  swift_beginAccess();
  v4 = (char *)&async function pointer to specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)
     + async function pointer to specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:);
  v0[33] = *(_QWORD *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_bridge);
  swift_unknownObjectRetain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[34] = v3;
  *v3 = v0;
  v3[1] = ConversationService.checkExecutionOverrides(context:resultCandidateId:);
  __asm { BR              X8 }
}

uint64_t ConversationService.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v5 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v4[18] = v5;
  v4[19] = *(_QWORD *)(v5 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_ResponseStatus.StatusCode?, Siri_Nlu_External_ResponseStatus.StatusCode?));
  v4[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v4[26] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[27] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationService.checkExecutionOverrides(context:resultCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unsigned int v9;
  char v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t (*v42)(char *);

  v1 = *(_QWORD *)(v0 + 136);
  swift_beginAccess();
  v2 = *(char **)(v1 + 112);
  *(_QWORD *)(v0 + 224) = v2;
  v3 = *(_BYTE *)(v1 + 120);
  *(_BYTE *)(v0 + 288) = v3;
  if ((v3 & 0xC0) != 0x80)
  {
    outlined copy of ConversationService.State(v2, v3);
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x80000001B4EFAA60;
    v12._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    outlined consume of ConversationService.State(v2, v3);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v4 = one-time initialization token for executor;
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1B4BE6000, v6, v7, "[ConversationService] didReceiveCheckExecutionOverrides", v8, 2u);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }

  v9 = *(unsigned __int8 *)(v1 + 120);
  if (v9 >> 6)
  {
    if (v9 >> 6 != 1)
    {
      v10 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    LOBYTE(v9) = *(_BYTE *)(v1 + 112);
  }
  v10 = v9 & 1;
LABEL_12:
  *(_BYTE *)(v0 + 289) = v10;
  v14 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 176);
  v41 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 360))(v20, v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 376))(v20, v19);
  v21 = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
  *(_QWORD *)(v0 + 232) = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
  v22 = (_QWORD *)(*(_QWORD *)&v2[v21 + 32] + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  *(_QWORD *)(v0 + 240) = *v22;
  *(_QWORD *)(v0 + 248) = v22[1];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v15, *MEMORY[0x1E0D9F510], v17);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  v23 = v16 + *(int *)(v41 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v14, v16, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v15, v23, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v24(v16, 1, v17) != 1)
  {
    v28 = *(_QWORD *)(v0 + 144);
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
    v29 = v24(v23, 1, v28);
    v30 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 192);
    if (v29 != 1)
    {
      v34 = *(_QWORD *)(v0 + 176);
      v36 = *(_QWORD *)(v0 + 152);
      v35 = *(_QWORD *)(v0 + 160);
      v37 = *(_QWORD *)(v0 + 144);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v35, v23, v37);
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F520], MEMORY[0x1E0D9F530]);
      swift_bridgeObjectRetain();
      v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v38(v35, v37);
      outlined destroy of ReferenceResolutionClientProtocol?(v31, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
      v38(v30, v37);
      outlined destroy of ReferenceResolutionClientProtocol?(v34, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
      goto LABEL_19;
    }
    v32 = *(_QWORD *)(v0 + 144);
    v33 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRetain();
    outlined destroy of ReferenceResolutionClientProtocol?(v31, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_17;
  }
  v25 = *(_QWORD *)(v0 + 192);
  v26 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  outlined destroy of ReferenceResolutionClientProtocol?(v25, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  if (v24(v23, 1, v26) != 1)
  {
LABEL_17:
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 176), &demangling cache variable for type metadata for (Siri_Nlu_External_ResponseStatus.StatusCode?, Siri_Nlu_External_ResponseStatus.StatusCode?));
    v27 = 0;
    goto LABEL_19;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 176), (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v27 = 1;
LABEL_19:
  *(_BYTE *)(v0 + 290) = v27 & 1;
  v39 = &v2[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker];
  v42 = (uint64_t (*)(char *))((char *)&async function pointer to specialized static ConversationService.skipEmptyAsr(_:)
                                       + async function pointer to specialized static ConversationService.skipEmptyAsr(_:));
  v40 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 256) = v40;
  *v40 = v0;
  v40[1] = ConversationService.checkExecutionOverrides(context:resultCandidateId:);
  return v42(v39);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(void **)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_BYTE *)(v0 + 288);
  swift_release();
  outlined consume of ConversationService.State(v2, v5);
  outlined destroy of ReferenceResolutionClientProtocol?(v4, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for Input?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t ConversationService.checkExecutionOverrides(context:resultCandidateId:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 291) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConversationService.ActiveTurn.getInput(rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ConversationService.ActiveTurn.getInput(rcId:)(a1, a2, &OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnInput, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588], a3);
}

uint64_t ConversationService.ActiveTurn.getInput(rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v10 = (uint64_t *)(v5 + *a3);
  swift_beginAccess();
  v11 = *v10;
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v13 & 1) != 0)
    {
      v14 = v12;
      v15 = *(_QWORD *)(v11 + 56);
      v16 = a4(0);
      v17 = *(_QWORD *)(v16 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16))(a5, v15 + *(_QWORD *)(v17 + 72) * v14, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a5, 0, 1, v16);
    }
    else
    {
      v20 = a4(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a5, 1, 1, v20);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v18 = a4(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a5, 1, 1, v18);
  }
}

uint64_t ConversationService.ActiveTurn.getNlResponseCode(rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ConversationService.ActiveTurn.getInput(rcId:)(a1, a2, &OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_nlResponseCode, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F520], a3);
}

uint64_t type metadata accessor for CompositeExecutionOverrides.Builder()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HangUpOverride()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HangUpOverride;
  if (!type metadata singleton initialization cache for HangUpOverride)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature;
  if (!lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriPlaybackControlFeature, &type metadata for SiriPlaybackControlFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature;
  if (!lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriPlaybackControlFeature, &type metadata for SiriPlaybackControlFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature;
  if (!lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriPlaybackControlFeature, &type metadata for SiriPlaybackControlFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SiriPlaybackControlFeature(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriPlaybackControlFeature()
{
  return "SiriPlaybackControls";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriPlaybackControlFeature()
{
  return "quick_stop_call_bell";
}

unint64_t lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature;
  if (!lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriPhoneFeature, &type metadata for SiriPhoneFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature;
  if (!lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriPhoneFeature, &type metadata for SiriPhoneFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature;
  if (!lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriPhoneFeature, &type metadata for SiriPhoneFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SiriPhoneFeature(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance PhoneFeatureFlags()
{
  return "SiriPhone";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance PhoneFeatureFlags()
{
  return "CancelCallBell";
}

uint64_t type metadata accessor for WaitUniversalActionOverride()
{
  uint64_t result;

  result = type metadata singleton initialization cache for WaitUniversalActionOverride;
  if (!type metadata singleton initialization cache for WaitUniversalActionOverride)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for EmptyAsrOverride()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for EmergencyCallMitigatorOverride()
{
  uint64_t result;

  result = type metadata singleton initialization cache for EmergencyCallMitigatorOverride;
  if (!type metadata singleton initialization cache for EmergencyCallMitigatorOverride)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for AnnounceExecutionOverride()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AnnounceExecutionOverride;
  if (!type metadata singleton initialization cache for AnnounceExecutionOverride)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for CompositeExecutionOverrides()
{
  return objc_opt_self();
}

void ExecutionOverrideDecisionMaker.evaluate(rules:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(v0 + 233);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 56, v0 + 16);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    *(_QWORD *)(v0 + 168) = swift_slowAlloc();
    *(_DWORD *)v4 = 136315394;
    v5 = ExecutionOverrideDecision.rawValue.getter();
    *(_QWORD *)(v4 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, (uint64_t *)(v0 + 168));
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v8 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v7);
    __asm { BR              X10 }
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  __asm { BR              X9 }
}

uint64_t sub_1B4C15404()
{
  char v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  char v22;
  objc_class *v23;
  _BYTE *v24;
  id v25;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;

  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(v1 + 208);
    v7 = *(_QWORD *)(v1 + 216) + 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
    if (v7 != v6)
    {
      v17 = *(_QWORD *)(v1 + 216) + 1;
      *(_QWORD *)(v1 + 216) = v17;
      outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v1 + 200) + 40 * v17 + 32, (uint64_t)v2);
      v18 = *(_QWORD *)(v1 + 80);
      v19 = *(_QWORD *)(v1 + 88);
      __swift_project_boxed_opaque_existential_1(v2, v18);
      v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v19 + 16) + *(_QWORD *)(v19 + 16));
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v1 + 224) = v20;
      *v20 = v1;
      v20[1] = ExecutionOverrideDecisionMaker.evaluate(rules:);
      return v27(v3, v18, v19);
    }
    swift_bridgeObjectRelease();
    v8 = *(_BYTE *)(v1 + 232);
    v9 = *(unsigned __int8 *)(v1 + 234);
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = v0;
    *(_BYTE *)(v1 + 232) = v0;
    v10 = *(_QWORD *)(v1 + 80);
    v11 = *(_QWORD *)(v1 + 88);
    __swift_project_boxed_opaque_existential_1(v2, v10);
    (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(v11 + 8))(&v28, v10, v11);
    v9 = v28;
    *(_BYTE *)(v1 + 234) = v28;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    *(_DWORD *)v14 = 136315394;
    *(_BYTE *)(v4 - 74) = v8;
    v15 = ExecutionOverrideDecision.rawValue.getter();
    *(_QWORD *)(v1 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    __asm { BR              X10 }
  }

  swift_beginAccess();
  v21 = *(_BYTE *)(v1 + 234);
  swift_beginAccess();
  v22 = *(_BYTE *)(v1 + 232);
  v23 = (objc_class *)type metadata accessor for ExecutionOverrideResult();
  v24 = objc_allocWithZone(v23);
  v24[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type] = v21;
  v24[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision] = v22;
  *(_QWORD *)(v1 + 144) = v24;
  *(_QWORD *)(v1 + 152) = v23;
  v25 = objc_msgSendSuper2((objc_super *)(v1 + 144), sel_init);
  return (*(uint64_t (**)(id))(v1 + 8))(v25);
}

void sub_1B4C158B8()
{
  JUMPOUT(0x1B4C1577CLL);
}

uint64_t ExecutionOverrideDecisionMaker.evaluate(rules:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  objc_class *v21;
  _BYTE *v22;
  id v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 192) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Evaluating Pre-Execution Decision..", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 184);

  *(_BYTE *)(v0 + 232) = 11;
  *(_BYTE *)(v0 + 234) = 8;
  v6 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v0 + 200) = v6;
  v7 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v0 + 208) = v7;
  if (v7)
  {
    *(_QWORD *)(v0 + 216) = 0;
    v8 = v6 + 32;
    swift_bridgeObjectRetain();
    outlined init with copy of ReferenceResolutionClientProtocol(v8, v0 + 56);
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v9);
    v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v10 + 16) + *(_QWORD *)(v10 + 16));
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v11;
    *v11 = v0;
    v11[1] = ExecutionOverrideDecisionMaker.evaluate(rules:);
    return v24(v0 + 233, v9, v10);
  }
  else
  {
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      v16 = swift_slowAlloc();
      v25 = v16;
      *(_DWORD *)v15 = 136315394;
      v26 = 11;
      v17 = ExecutionOverrideDecision.rawValue.getter();
      *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1701736302, 0xE400000000000000, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v13, v14, "[ExecutionOverride] Final ExecutionOverride Decision was evaluated as: %s from %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v16, -1, -1);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    swift_beginAccess();
    v19 = *(_BYTE *)(v0 + 234);
    swift_beginAccess();
    v20 = *(_BYTE *)(v0 + 232);
    v21 = (objc_class *)type metadata accessor for ExecutionOverrideResult();
    v22 = objc_allocWithZone(v21);
    v22[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type] = v19;
    v22[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision] = v20;
    *(_QWORD *)(v0 + 144) = v22;
    *(_QWORD *)(v0 + 152) = v21;
    v23 = objc_msgSendSuper2((objc_super *)(v0 + 144), sel_init);
    return (*(uint64_t (**)(id))(v0 + 8))(v23);
  }
}

uint64_t ExecutionOverrideDecisionMaker.evaluate(rules:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance HangUpOverride(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v1 + 280) + *(_QWORD *)(**(_QWORD **)v1 + 280));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t HangUpOverride.evaluate()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t HangUpOverride.evaluate()(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t HangUpOverride.evaluate()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v6;

  if (((*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 176))() & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, v2, v3, "[ExecutionOverride] [HangUpOverride]: ff enabled. Return .accept", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }

    **(_BYTE **)(v0 + 16) = 11;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v6;
    *v6 = v0;
    v6[1] = HangUpOverride.evaluate();
    return HangUpOverride.isUserOnPhoneCall()();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 24);
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isSpeechRequest) == 1
      && *(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isNlEmpty) == 1)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
      v3 = Logger.logObject.getter();
      v4 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v3, v4))
      {
        v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v5 = 0;
        _os_log_impl(&dword_1B4BE6000, v3, v4, "[ExecutionOverride] [HangUpOverride]: User on phone call and NL is empty. Return .mitigateEmptyASR", v5, 2u);
        MEMORY[0x1B5E44758](v5, -1, -1);
      }

      v6 = 7;
    }
    else
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_1B4BE6000, v12, v13, "[ExecutionOverride] [HangUpOverride]: User on phone call. Checking if valid active phone call request...", v14, 2u);
        MEMORY[0x1B5E44758](v14, -1, -1);
      }

      if ((HangUpOverride.isValidActivePhoneCallRequest()() & 1) != 0)
        v6 = 11;
      else
        v6 = 0;
    }
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, v8, v9, "[ExecutionOverride] [HangUpOverride]: User not on phone call. Return .accept", v10, 2u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    v6 = 11;
  }
  **(_BYTE **)(v0 + 16) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HangUpOverride.isBlushingPhantomEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isBlushingPhantomEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t ExecutionOverrideDecision.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4C161E4 + 4 * byte_1B4EEA3A0[*v0]))(0xD000000000000017, 0x80000001B4EF4D50);
}

uint64_t sub_1B4C161E4@<X0>(uint64_t a1@<X8>)
{
  return a1 - 3;
}

uint64_t sub_1B4C16298()
{
  return 0x747065636361;
}

uint64_t protocol witness for ExecutionOverride.overrideType.getter in conformance EmptyAsrOverride()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t HangUpOverride.overrideType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance WaitUniversalActionOverride()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(**(_QWORD **)v0 + 144))();
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(*(uint64_t (**)(void))(v1 + 8));
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall WaitUniversalActionOverride.evaluate()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned __int8 *v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  SiriKitRuntime::ExecutionOverrideDecision result;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  char *v47;
  id *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint8_t *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  id *v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[3];

  v2 = v1;
  v74 = v0;
  v3 = type metadata accessor for Parse();
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  MEMORY[0x1E0C80A78](v3);
  v64 = (id *)((char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Input();
  v6 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  v73 = v6;
  MEMORY[0x1E0C80A78](v5);
  v66 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8 = MEMORY[0x1E0C80A78](v69);
  v71 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v62 - v10;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v12 = MEMORY[0x1E0C80A78](v67);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v62 - v15;
  v17 = type metadata accessor for InputOrigin();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v62 - v22;
  v24 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_aceInputOrigin);
  swift_bridgeObjectRetain();
  v68 = v24;
  InputOrigin.init(aceValue:)();
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  v70 = v14;
  if (v25 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for InputOrigin?);
    v65 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, *MEMORY[0x1E0DA7D18], v17);
    lazy protocol witness table accessor for type InputOrigin and conformance InputOrigin();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v77[0] == v75 && v77[1] == v76)
      v65 = 1;
    else
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = *(void (**)(char *, uint64_t))(v18 + 8);
    v26(v21, v17);
    v26(v23, v17);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
  swift_retain_n();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v77[0] = v31;
    *(_DWORD *)v30 = 136315650;
    outlined init with copy of Input?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, (uint64_t)v11);
    v32 = String.init<A>(describing:)();
    v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    swift_bridgeObjectRetain();
    InputOrigin.init(aceValue:)();
    v34 = String.init<A>(describing:)();
    v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 1024;
    v36 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession);
    swift_release();
    LODWORD(v75) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v28, v29, "input: %s,\ninputOrigin: %s,\nisFirstRequestInSession:%{BOOL}d", (uint8_t *)v30, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v31, -1, -1);
    MEMORY[0x1B5E44758](v30, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v37 = (unsigned __int8 *)(static StopRepromptFeatureFlag.forceEnabled + 16);
  v38 = (os_unfair_lock_s *)(static StopRepromptFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static StopRepromptFeatureFlag.forceEnabled + 20));
  closure #1 in StopRepromptFeatureFlag.isEnabled.getter(v37, v77);
  os_unfair_lock_unlock(v38);
  if (LOBYTE(v77[0]) != 1)
  {
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1B4BE6000, v43, v44, "User may want to Pause but StopRepromptFeatureFlag is disabled.", v45, 2u);
      MEMORY[0x1B5E44758](v45, -1, -1);
    }

    goto LABEL_27;
  }
  v39 = v71;
  outlined init with copy of Input?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, v71);
  v41 = v72;
  v40 = v73;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v39, 1, v72) == 1)
  {
    result = outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for Input?);
LABEL_27:
    v52 = 11;
    goto LABEL_28;
  }
  v46 = v39;
  v47 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v66, v46, v41);
  if ((Input.inputOrAlternativesHasWantedToPause.getter() & 1) == 0
    || (*(_BYTE *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession) & 1) != 0
    || (v65 & 1) == 0)
  {
    result = (*(unsigned __int8 (**)(char *, uint64_t))(v40 + 8))(v47, v41);
    goto LABEL_27;
  }
  v48 = v64;
  Input.parse.getter();
  v50 = v62;
  v49 = v63;
  v51 = (*(uint64_t (**)(id *, uint64_t))(v62 + 88))(v48, v63);
  if (v51 != *MEMORY[0x1E0D9C5E0])
  {
    if (v51 == *MEMORY[0x1E0D9C668])
    {
      (*(void (**)(id *, uint64_t))(v50 + 96))(v48, v49);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
      swift_release();
      v53 = type metadata accessor for NLIntent();
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v48, v53);
      goto LABEL_31;
    }
    if (v51 == *MEMORY[0x1E0D9C5E8])
    {
      (*(void (**)(id *, uint64_t))(v50 + 96))(v48, v49);
      swift_unknownObjectRelease();
      goto LABEL_31;
    }
    if (v51 != *MEMORY[0x1E0D9C5F0])
    {
      if (v51 == *MEMORY[0x1E0D9C5F8])
      {
        (*(void (**)(id *, uint64_t))(v50 + 96))(v48, v49);

        goto LABEL_31;
      }
      if (v51 != *MEMORY[0x1E0D9C678])
      {
        v58 = Logger.logObject.getter();
        v59 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v58, v59))
        {
          v60 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v60 = 0;
          _os_log_impl(&dword_1B4BE6000, v58, v59, "User may want to Pause but doing nothing for this type of input.", v60, 2u);
          v61 = v60;
          v41 = v72;
          MEMORY[0x1B5E44758](v61, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v73 + 8))(v66, v41);
        result = (*(unsigned __int8 (**)(id *, uint64_t))(v50 + 8))(v48, v49);
        goto LABEL_27;
      }
    }
  }
  (*(void (**)(id *, uint64_t))(v50 + 8))(v48, v49);
LABEL_31:
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v56 = 0;
    _os_log_impl(&dword_1B4BE6000, v54, v55, "User may want to Pause. Siri will wait for next input.", v56, 2u);
    v57 = v56;
    v41 = v72;
    MEMORY[0x1B5E44758](v57, -1, -1);
  }

  result = (*(unsigned __int8 (**)(char *, uint64_t))(v73 + 8))(v66, v41);
  v52 = 8;
LABEL_28:
  *v74 = v52;
  return result;
}

unint64_t lazy protocol witness table accessor for type InputOrigin and conformance InputOrigin()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin;
  if (!lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin)
  {
    v1 = type metadata accessor for InputOrigin();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA7D68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag;
  if (!lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for StopRepromptFeatureFlag, &type metadata for StopRepromptFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag;
  if (!lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for StopRepromptFeatureFlag, &type metadata for StopRepromptFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance CamFeatureFlag()
{
  return "Siri";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance StopRepromptFeatureFlag()
{
  return "stop_reprompt";
}

uint64_t protocol witness for ExecutionOverride.overrideType.getter in conformance WaitUniversalActionOverride()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t WaitUniversalActionOverride.overrideType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance EmptyAsrOverride()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(**(_QWORD **)v0 + 184))();
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(*(uint64_t (**)(void))(v1 + 8));
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall EmptyAsrOverride.evaluate()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  SiriKitRuntime::ExecutionOverrideDecision result;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  _QWORD v42[2];
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[2];

  v2 = v1;
  v3 = v0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for InputOrigin();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v42 - v12;
  v14 = *(_QWORD *)(v2 + 48);
  v15 = *(_QWORD *)(v2 + 56);
  swift_bridgeObjectRetain();
  InputOrigin.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of InputOrigin?((uint64_t)v6);
    v44 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0DA7D18], v7);
    lazy protocol witness table accessor for type InputOrigin and conformance InputOrigin();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v47[0] == v45 && v47[1] == v46)
      v44 = 1;
    else
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(char *, uint64_t))(v8 + 8);
    v16(v11, v7);
    v16(v13, v7);
  }
  v17 = *(_QWORD *)(v2 + 24);
  if (one-time initialization token for executor != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  swift_retain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v42[1] = v19;
    v23 = v22;
    v24 = swift_slowAlloc();
    v43 = v3;
    v42[0] = v24;
    v47[0] = v24;
    *(_DWORD *)v23 = 136316930;
    swift_bridgeObjectRetain();
    v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    if (*(_BYTE *)(v2 + 44))
      v25 = 1702195828;
    else
      v25 = 0x65736C6166;
    if (*(_BYTE *)(v2 + 44))
      v26 = 0xE400000000000000;
    else
      v26 = 0xE500000000000000;
    v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2080;
    v45 = v17;
    v27 = v17;
    v28 = dispatch thunk of CustomStringConvertible.description.getter();
    v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 32) = 1024;
    v30 = *(unsigned __int8 *)(v2 + 40);
    swift_release();
    LODWORD(v45) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v23 + 38) = 1024;
    v31 = *(unsigned __int8 *)(v2 + 41);
    swift_release();
    LODWORD(v45) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v23 + 44) = 2048;
    v32 = *(_QWORD *)(v2 + 32);
    swift_release();
    v45 = v32;
    v17 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v23 + 54) = 1024;
    v33 = *(unsigned __int8 *)(v2 + 43);
    swift_release();
    LODWORD(v45) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v23 + 60) = 1024;
    v34 = *(unsigned __int8 *)(v2 + 42);
    swift_release();
    LODWORD(v45) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v20, v21, "[EmptyAsrOverride]\ninputOrigin: %s,\nisNlEmpty: %s,\nendpointMode:%s,\nisFirstRequestInSession:%{BOOL}d,\nisFlowAwaitingInput:%{BOOL}d,\nconsecutiveEmptyInputs:%ld,\nisSpeechRequest:%{BOOL}d,\ndidPreviouslyFallbackToServer:%{BOOL}d", (uint8_t *)v23, 0x42u);
    v35 = v42[0];
    swift_arrayDestroy();
    v3 = v43;
    MEMORY[0x1B5E44758](v35, -1, -1);
    MEMORY[0x1B5E44758](v23, -1, -1);

  }
  else
  {

    result = swift_release_n();
  }
  if (*(_BYTE *)(v2 + 43) == 1 && *(_BYTE *)(v2 + 44) == 1)
  {
    if ((*(_BYTE *)(v2 + 40) & 1) != 0)
    {
      v37 = 7;
    }
    else if ((v44 & (v17 != 2)) == 1 && (*(_BYTE *)(v2 + 42) & 1) == 0)
    {
      v38 = *(_QWORD *)(v2 + 32);
      if (v38 < 1)
      {
        if (*(_BYTE *)(v2 + 41))
          v37 = 11;
        else
          v37 = 8;
      }
      else
      {
        swift_retain();
        v39 = Logger.logObject.getter();
        v40 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v41 = 134217984;
          v47[0] = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_1B4BE6000, v39, v40, "[EmptyAsrOverride] Ignore repetitive empty parse. repetition: %ld", v41, 0xCu);
          MEMORY[0x1B5E44758](v41, -1, -1);

        }
        else
        {

          result = swift_release();
        }
        v37 = 8;
      }
    }
    else
    {
      v37 = 8;
    }
  }
  else
  {
    v37 = 11;
  }
  *v3 = v37;
  return result;
}

uint64_t EmptyAsrOverride.overrideType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance EmergencyCallMitigatorOverride()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(**(_QWORD **)v0 + 128))();
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(*(uint64_t (**)(void))(v1 + 8));
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall EmergencyCallMitigatorOverride.evaluate()()
{
  char *v0;
  char *v1;
  SiriKitRuntime::ExecutionOverrideDecision result;
  char v3;

  v1 = v0;
  EmergencyCallMitigatorOverride.isEmergencyRequest()();
  if ((result & 1) != 0)
    v3 = 3;
  else
    v3 = 11;
  *v1 = v3;
  return result;
}

void EmergencyCallMitigatorOverride.isEmergencyRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Siri_Nlu_External_UserParse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Siri_Nlu_External_UserParse?(v0 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserParse?((uint64_t)v3);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v8 = (void *)static ConversionUtils.toLegacyUserParse(from:)();
  if (!v8)
    goto LABEL_62;
  v9 = v8;
  v10 = objc_msgSend(v8, sel_userDialogActs);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v60 = v7;
  v61 = v5;
  v59 = v9;
  if (v11 >> 62)
    goto LABEL_60;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
LABEL_61:
    swift_bridgeObjectRelease();

    v7 = v60;
    v5 = v61;
LABEL_62:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return;
  }
LABEL_6:
  v13 = 0;
  v14 = v11 & 0xC000000000000001;
  v56 = v11 + 32;
  v57 = v11 & 0xFFFFFFFFFFFFFF8;
  v64 = (unint64_t)"d";
  v65 = "Name";
  v63 = 0x80000001B4EF4A50;
  v58 = v11;
  v54 = v11 & 0xC000000000000001;
  v55 = v12;
  while (1)
  {
    while (1)
    {
      if (v14)
      {
        v15 = MEMORY[0x1B5E43B94](v13, v11);
        v16 = __OFADD__(v13++, 1);
        if (v16)
        {
LABEL_59:
          __break(1u);
LABEL_60:
          swift_bridgeObjectRetain();
          v12 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v12)
            goto LABEL_61;
          goto LABEL_6;
        }
      }
      else
      {
        if (v13 >= *(_QWORD *)(v57 + 16))
        {
          __break(1u);
          return;
        }
        v15 = *(_QWORD *)(v56 + 8 * v13);
        swift_unknownObjectRetain();
        v16 = __OFADD__(v13++, 1);
        if (v16)
          goto LABEL_59;
      }
      objc_opt_self();
      v17 = swift_dynamicCastObjCClass();
      if (v17)
        break;
      swift_unknownObjectRelease();
      if (v13 == v12)
        goto LABEL_61;
    }
    v18 = (void *)v17;
    v62 = v15;
    swift_unknownObjectRetain();
    v19 = objc_msgSend(v18, sel_task);
    v20 = objc_msgSend(v19, sel_identifiers);

    type metadata accessor for USOSerializedIdentifier();
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v21 >> 62))
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v22)
        break;
      goto LABEL_48;
    }
    swift_bridgeObjectRetain_n();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v22)
      break;
LABEL_48:
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v11 = v58;
    v14 = v54;
    v12 = v55;
    if (v13 == v55)
      goto LABEL_61;
  }
  v11 = v21 & 0xC000000000000001;
  if ((v21 & 0xC000000000000001) != 0)
    v23 = (id)MEMORY[0x1B5E43B94](0, v21);
  else
    v23 = *(id *)(v21 + 32);
  v24 = v23;
  if ((USOSerializedIdentifier.isEmergencyNumber.getter() & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_56;
  }
  v25 = 0;
  v26 = v22 - 1;
  while (2)
  {
    v28 = objc_msgSend(v24, sel_namespaceString, v54, v55);
    if (!v28)
    {

      if (v26 == v25)
        goto LABEL_48;
LABEL_30:
      if (v11)
        v34 = (id)MEMORY[0x1B5E43B94](v25 + 1, v21);
      else
        v34 = *(id *)(v21 + 8 * v25 + 40);
      v24 = v34;
      if (__OFADD__(v25 + 1, 1))
      {
        __break(1u);
        goto LABEL_59;
      }
      v35 = objc_msgSend(v34, sel_namespaceString);
      if (v35)
      {
        v36 = v35;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v39 = v38;

        if (v37 == 0xD000000000000014 && v39 == (v64 | 0x8000000000000000))
        {
LABEL_41:
          swift_bridgeObjectRelease();
LABEL_42:
          v46 = objc_msgSend(v24, sel_value);
          v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v49 = v48;

          if (v47 == 0x636E656772656D65 && v49 == 0xEF7265626D754E79)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
LABEL_52:
            swift_unknownObjectRelease();
            goto LABEL_56;
          }
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
          {
            swift_bridgeObjectRelease();

            goto LABEL_52;
          }
LABEL_22:
          ++v25;
          continue;
        }
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v40 & 1) != 0)
          goto LABEL_42;
      }
      v41 = objc_msgSend(v24, sel_namespaceString);
      if (!v41)
        goto LABEL_22;
      v42 = v41;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v45 = v44;

      if (v43 != 0x6D754E656E6F6870 || v45 != 0xEB00000000726562)
      {
        v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v50 & 1) == 0)
          goto LABEL_22;
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    break;
  }
  v29 = v28;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v32 = v31;

  if (v30 == 0xD000000000000015 && v32 == v63)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_55;
  }
  v33 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    if (v26 == v25)
      goto LABEL_48;
    goto LABEL_30;
  }
  swift_unknownObjectRelease();
LABEL_55:
  swift_bridgeObjectRelease();
LABEL_56:
  v52 = v60;
  v51 = v61;
  v53 = v59;
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v4);
}

unint64_t type metadata accessor for USOSerializedIdentifier()
{
  unint64_t result;

  result = lazy cache variable for type metadata for USOSerializedIdentifier;
  if (!lazy cache variable for type metadata for USOSerializedIdentifier)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for USOSerializedIdentifier);
  }
  return result;
}

uint64_t protocol witness for ExecutionOverride.overrideType.getter in conformance EmergencyCallMitigatorOverride()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t EmergencyCallMitigatorOverride.overrideType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(**(_QWORD **)v0 + 152))();
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(*(uint64_t (**)(void))(v1 + 8));
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall AnnounceExecutionOverride.evaluate()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  SiriKitRuntime::ExecutionOverrideDecision result;
  char v12;
  int v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  unsigned __int8 *v18;
  os_unfair_lock_s *v19;
  os_log_type_t v20;
  uint8_t *v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  char v28;

  v2 = v1;
  v3 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Evaluating Announce Override rule...", v7, 2u);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  if (((*(uint64_t (**)(void))(*(_QWORD *)v2 + 168))() & 1) != 0)
  {
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, v8, v9, "AnnounceExecutionOverride overriding mitigator decision.", v10, 2u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    v12 = 3;
    goto LABEL_22;
  }
  v13 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  if (v13 != 1)
  {
    if (v16)
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      v24 = v15;
      v22 = "Evaluation result from Announce rule is accept when request is not trigger less follow up nor the request sh"
            "ould be mitigated for an Intercom task";
      v23 = v14;
      goto LABEL_20;
    }
LABEL_21:

    v12 = 11;
LABEL_22:
    *v3 = v12;
    return result;
  }
  if (v16)
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Request is a triggerless followup aka siri announcement.,.", v17, 2u);
    MEMORY[0x1B5E44758](v17, -1, -1);
  }

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported) == 1)
  {
    if (one-time initialization token for forceEnabled != -1)
      swift_once();
    v18 = (unsigned __int8 *)(static FlexibleAnnounceFeatureFlag.forceEnabled + 16);
    v19 = (os_unfair_lock_s *)(static FlexibleAnnounceFeatureFlag.forceEnabled + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(static FlexibleAnnounceFeatureFlag.forceEnabled + 20));
    closure #1 in FlexibleAnnounceFeatureFlag.isEnabled.getter(v18, &v28);
    os_unfair_lock_unlock(v19);
    if (v28 == 1)
    {
      v14 = Logger.logObject.getter();
      v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        v23 = v14;
        v24 = v20;
LABEL_20:
        _os_log_impl(&dword_1B4BE6000, v23, v24, v22, v21, 2u);
        MEMORY[0x1B5E44758](v21, -1, -1);
        goto LABEL_21;
      }
      goto LABEL_21;
    }
  }
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1B4BE6000, v25, v26, "Announce rule feature flag is disabled or we are on a non-medoc-enabled device; running rule..",
      v27,
      2u);
    MEMORY[0x1B5E44758](v27, -1, -1);
  }

  AnnounceExecutionOverride.triggerlessFollowupRulesWithoutFlexibleAnnounce()(v3);
  return result;
}

Swift::Bool __swiftcall AnnounceExecutionOverride.shouldOverrideMitigatorAndIsIntercomTask()()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated) == 1)
    AnnounceExecutionOverride.parseContainsAnnounceIntercomTask()();
  return 0;
}

void protocol witness for ExecutionOverride.overrideType.getter in conformance AnnounceExecutionOverride(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)v1 + 16);
}

uint64_t type metadata accessor for ExecutionOverrideResult()
{
  return objc_opt_self();
}

uint64_t HangUpOverride.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t WaitUniversalActionOverride.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, &demangling cache variable for type metadata for Input?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t EmptyAsrOverride.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t EmergencyCallMitigatorOverride.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Siri_Nlu_External_UserParse?(v0 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse);
  return swift_deallocClassInstance();
}

uint64_t outlined destroy of Siri_Nlu_External_UserParse?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AnnounceExecutionOverride.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  return swift_deallocClassInstance();
}

SiriKitRuntime::PreExecutionRuleType __swiftcall ExecutionOverrideType.asPreExecutionType()()
{
  SiriKitRuntime::PreExecutionRuleType *v0;
  SiriKitRuntime::PreExecutionRuleType v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *v0;
  v2 = 1 << *v0;
  if ((v2 & 0x53) == 0)
  {
    if ((v2 & 0xAC) != 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
      v4 = Logger.logObject.getter();
      v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = swift_slowAlloc();
        v7 = swift_slowAlloc();
        v11 = v7;
        *(_DWORD *)v6 = 136315650;
        v8 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v6 + 12) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x80000001B4EFECA0, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v6 + 22) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000001B4EFECD0, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v4, v5, "ExecutionOverrideType value of %s not expected; mapping to .none for PreExecutionRuleType. If you added a rule"
          " recently; make sure to explicitly update it's mapping value in %s.%s",
          (uint8_t *)v6,
          0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v7, -1, -1);
        MEMORY[0x1B5E44758](v6, -1, -1);
      }

    }
    return 7;
  }
  return v1;
}

SiriKitRuntime::PreExecutionDecision __swiftcall ExecutionOverrideDecision.asPreExecutionDecision()()
{
  SiriKitRuntime::PreExecutionDecision *v0;

  return *v0;
}

uint64_t ConversationRequestProcessor.handledMitigation(rcState:turn:ruleType:ruleDecision:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t);
  void (*v26)(_BYTE *, _QWORD, uint64_t, uint64_t);
  void (*v27)(uint64_t, _BYTE *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(_BYTE *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BOOL8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  _BYTE v58[4];
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_BYTE *, uint64_t, uint64_t);
  void (*v64)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v58[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v69 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v13 = *(_QWORD *)(v69 - 8);
  v14 = MEMORY[0x1E0C80A78](v69);
  v67 = &v58[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = &v58[-v17];
  MEMORY[0x1E0C80A78](v16);
  v20 = &v58[-v19];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 480))(a4);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 504))(a3);
  v21 = *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler);
  v22 = a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  v23 = type metadata accessor for InputOrigin();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16);
  v65 = v22;
  v63 = v25;
  v25(v12, v22, v23);
  v26 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56);
  v66 = v23;
  v64 = v26;
  v26(v12, 0, 1, v23);
  v27 = *(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 136);
  v70 = v20;
  v68 = v21;
  v27(a1, v12);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for InputOrigin?);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
  v30 = v69;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v18, v70, v69);
  swift_retain_n();
  v62 = v29;
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.info.getter();
  v33 = v32;
  v34 = v13;
  if (os_log_type_enabled(v31, v32))
  {
    v35 = swift_slowAlloc();
    v61 = v13;
    v59 = v33;
    v36 = v30;
    v37 = v35;
    v60 = swift_slowAlloc();
    v72 = v60;
    *(_DWORD *)v37 = 134218242;
    v38 = TTResponseMessage.MitigationDecision.rawValue.getter();
    v39 = *(void (**)(_BYTE *, uint64_t))(v61 + 8);
    v39(v18, v36);
    v71 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2080;
    v40 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 800);
    v41 = swift_retain();
    v42 = v40(v41);
    v44 = v43;
    swift_release();
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v45 = v39;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v31, (os_log_type_t)v59, "[ConversationRequestProcessor] PreExecution Migitation Decision %ld State %s", (uint8_t *)v37, 0x16u);
    v46 = v60;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v46, -1, -1);
    v34 = v61;
    MEMORY[0x1B5E44758](v37, -1, -1);

    v47 = v69;
  }
  else
  {
    v45 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
    v45(v18, v30);

    swift_release_n();
    v47 = v30;
  }
  v48 = v67;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v34 + 104))(v67, *MEMORY[0x1E0D9C970], v47);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C978], MEMORY[0x1E0D9C990]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v49 = v72 == v71;
  v45(v48, v47);
  specialized static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(v49, v5[12], v5[13], (uint64_t)v5 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v5[8], v5[9], v5 + 3);
  v51 = v5[10];
  v50 = v5[11];
  v52 = v66;
  v63(v12, v65, v66);
  v64(v12, 0, 1, v52);
  v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v68 + 144))(a1, v51, v50, v12);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for InputOrigin?);
  if ((v53 & 1) != 0)
  {
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_1B4BE6000, v54, v55, "Acted upon pre-execution decision. Not committing..", v56, 2u);
      MEMORY[0x1B5E44758](v56, -1, -1);
    }

  }
  v45(v70, v47);
  return v53 & 1;
}

uint64_t ResultCandidateState.preExecutionDecision.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExecutionDecision);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t ResultCandidateState.preExcutionRuleType.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExcutionRuleType);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t ResultCandidateState.preExecutionDecision.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExecutionDecision);
  swift_beginAccess();
  return *v1;
}

void specialized static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;

  v8 = objc_allocWithZone((Class)type metadata accessor for ConversationMitigationMessage());
  v9 = ConversationMitigationMessage.init(build:)();
  if (v9)
  {
    v10 = v9;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v14 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v12, v13, "[ConversationRequestProcessor] post MitigationMessage %{BOOL}d", v14, 8u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1(a7, a7[3]);
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    v10 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v10, v16, "[ConversationRequestProcessor] Error building ConversationMitigationMessage. Missing fields?", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
  }

}

uint64_t partial apply for closure #1 in static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t closure #1 in static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;

  v21 = a7;
  v20 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *MEMORY[0x1E0D9E668];
  v15 = type metadata accessor for MessageSource();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  ConversationMitigationMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  ConversationMitigationMessage.Builder.assistantId.setter();
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v10, a4, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v10, 0, 1, v17);
  ConversationMitigationMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ConversationMitigationMessage.Builder.requestId.setter();
  return ConversationMitigationMessage.Builder.isMitigated.setter();
}

uint64_t PreExecutionActionHandler.actOnPreExecutionDecision(rcState:requestId:inputOrigin:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned __int8 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  char v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105[2];

  v100 = a3;
  v94 = a4;
  v97 = a2;
  v89 = type metadata accessor for InputOrigin();
  v5 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89);
  v85 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InputOrigin?, InputOrigin?));
  MEMORY[0x1E0C80A78](v86);
  v88 = (uint64_t)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v96 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v95 = (char *)&v83 - v11;
  v12 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v101 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v92 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1E0C80A78](v98);
  v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v16 = MEMORY[0x1E0C80A78](v91);
  v90 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v83 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v83 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v83 - v25;
  v102 = (*(uint64_t (**)(uint64_t))(*a1 + 472))(v24);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v93 = v28;
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  v31 = os_log_type_enabled(v29, v30);
  v103 = a1;
  v87 = v5;
  if (v31)
  {
    v32 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v105[0] = v33;
    *(_DWORD *)v32 = 136315394;
    v83 = v26;
    v34 = *v103;
    v84 = v20;
    v35 = *(uint64_t (**)(uint64_t))(v34 + 800);
    v36 = swift_retain();
    v37 = v35(v36);
    v39 = v38;
    swift_release();
    v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    v40 = PreExecutionDecision.rawValue.getter(v102);
    v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v105);
    v20 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v26 = v83;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v29, v30, "Taking action on preExecution decision for RC: %s, preExecutionDecision: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v33, -1, -1);
    a1 = v103;
    MEMORY[0x1B5E44758](v32, -1, -1);

  }
  else
  {

    v42 = swift_release_n();
  }
  v43 = *(void (**)(uint64_t))(*a1 + 520);
  v43(v42);
  v44 = v101;
  (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v23, *MEMORY[0x1E0D9C970], v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v23, 0, 1, v12);
  v45 = (uint64_t)&v15[*(int *)(v98 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v26, (uint64_t)v15, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v23, v45, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v47 = v46(v15, 1, v12);
  v48 = v99;
  if (v47 != 1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t)v20, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    if (v46((char *)v45, 1, v12) != 1)
    {
      v53 = v101;
      v54 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 32);
      v98 = (uint64_t)v43;
      v55 = v48;
      v56 = v26;
      v57 = v20;
      v58 = v92;
      v54(v92, v45, v12);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C978], MEMORY[0x1E0D9C988]);
      v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      v60 = *(void (**)(char *, uint64_t))(v53 + 8);
      v60(v58, v12);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      v61 = (uint64_t)v56;
      v48 = v55;
      outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      v60(v57, v12);
      v52 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      v49 = (uint64_t)v95;
      v50 = (uint64_t)v96;
      v51 = v94;
      if ((v59 & 1) == 0)
        goto LABEL_23;
      goto LABEL_13;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v20, v12);
LABEL_11:
    v52 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
    goto LABEL_23;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  if (v46((char *)v45, 1, v12) != 1)
    goto LABEL_11;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v49 = (uint64_t)v95;
  v50 = (uint64_t)v96;
  v51 = v94;
LABEL_13:
  if (PreExecutionDecision.rawValue.getter(v102) == 0xD000000000000019 && v62 == 0x80000001B4EF4DD0)
    goto LABEL_15;
  v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v52 = swift_bridgeObjectRelease();
  if ((v63 & 1) != 0)
    goto LABEL_23;
  if (PreExecutionDecision.rawValue.getter(v102) == 0xD000000000000010 && v64 == 0x80000001B4EF4E80)
    goto LABEL_15;
  v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v52 = swift_bridgeObjectRelease();
  if ((v65 & 1) != 0)
    goto LABEL_23;
  if (PreExecutionDecision.rawValue.getter(v102) == 0xD000000000000017 && v66 == 0x80000001B4EF4EA0)
  {
LABEL_15:
    v52 = swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v52 = swift_bridgeObjectRelease();
  if ((v67 & 1) != 0)
  {
LABEL_23:
    (*(void (**)(uint64_t))(**(_QWORD **)(v48 + 56) + 184))(v52);
    __asm { BR              X10 }
  }
  v69 = v102;
  v70 = (*(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)(v48 + 56) + 176))(v102, v51);
  PreExecutionActionHandler.mitigateRequest(requestId:dismissUI:logToStream:mitigatedByURS:)(v97, v100, v70 & 1, 1, 1);
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v71 = type metadata accessor for InsightRequestSummaryLogger();
  v72 = __swift_project_value_buffer(v71, (uint64_t)static Logger.insightRequestSummaryLogger);
  v73 = v100;
  swift_bridgeObjectRetain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v72, v69, v97, v73);
  swift_bridgeObjectRelease();
  v74 = v87;
  v75 = v89;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v87 + 104))(v49, *MEMORY[0x1E0D9E7D0], v89);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v49, 0, 1, v75);
  v76 = v88;
  v77 = v88 + *(int *)(v86 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v51, v88, &demangling cache variable for type metadata for InputOrigin?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v49, v77, &demangling cache variable for type metadata for InputOrigin?);
  v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (v78(v76, 1, v75) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for InputOrigin?);
    if (v78(v77, 1, v75) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for InputOrigin?);
LABEL_34:
      (*(void (**)(uint64_t, uint64_t, unint64_t))(**(_QWORD **)(v48 + 24) + 232))(5, v97, v100);
      return 1;
    }
    goto LABEL_32;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v76, v50, &demangling cache variable for type metadata for InputOrigin?);
  if (v78(v77, 1, v75) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for InputOrigin?);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v50, v75);
LABEL_32:
    outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for (InputOrigin?, InputOrigin?));
    return 1;
  }
  v79 = v49;
  v80 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v85, v77, v75);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E7E0], MEMORY[0x1E0D9E7F0]);
  v81 = dispatch thunk of static Equatable.== infix(_:_:)();
  v82 = *(void (**)(char *, uint64_t))(v74 + 8);
  v82(v80, v75);
  outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for InputOrigin?);
  v82((char *)v50, v75);
  outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for InputOrigin?);
  if ((v81 & 1) != 0)
    goto LABEL_34;
  return 1;
}

uint64_t PreExecutionDecision.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4C19E30 + 4 * byte_1B4EECD40[a1]))(0xD000000000000017, 0x80000001B4EF4D50);
}

uint64_t sub_1B4C19E30()
{
  uint64_t v0;

  return v0 - 3;
}

uint64_t sub_1B4C19EE4()
{
  return 0x747065636361;
}

uint64_t ConversationRequestProcessor.revealAsrTranscription(for:turn:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint8_t *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  _QWORD *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint8_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t aBlock[6];
  uint64_t v76;

  v3 = v2;
  v74 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_RepetitionResult?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_RepetitionResult.RepetitionType();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v72 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v72 - v17;
  v19 = (*(uint64_t (**)(uint64_t))(*a1 + 864))(v16);
  if (!v19)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      aBlock[0] = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = a1[2];
      v33 = a1[3];
      swift_bridgeObjectRetain();
      v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v28, v29, "Only speech-based RC can reveal ASR transcription. Not revealing ASR for RCID %s.", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v31, -1, -1);
      MEMORY[0x1B5E44758](v30, -1, -1);

      return 0;
    }

LABEL_31:
    swift_release();
    return 0;
  }
  v20 = v19;
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v19 + 120))();
  if (!v21)
  {
LABEL_26:
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.conversationBridge);
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v66 = 0;
      _os_log_impl(&dword_1B4BE6000, v64, v65, "ASR is not to be revealed.", v66, 2u);
      MEMORY[0x1B5E44758](v66, -1, -1);
    }

    goto LABEL_31;
  }
  v22 = v21;
  v72 = v3;
  v73 = v18;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = type metadata accessor for Siri_Nlu_External_RepetitionResult();
  v25 = *(_QWORD *)(v24 - 8);
  if (v23)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v7, v22 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), v24);
    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v7, v26, 1, v24);
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_RepetitionResult();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1, v24) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_RepetitionResult?);
    goto LABEL_26;
  }
  Siri_Nlu_External_RepetitionResult.repetitionType.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v24);
  v34 = v73;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v73, v15, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D9F6C0], v8);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Siri_Nlu_External_RepetitionResult.RepetitionType and conformance Siri_Nlu_External_RepetitionResult.RepetitionType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F6D0], MEMORY[0x1E0D9F6D8]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v35 = aBlock[0];
  v36 = v76;
  v37 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v38 = v37(v12, v8);
  if (v35 != v36)
  {
    v37(v34, v8);
    goto LABEL_26;
  }
  v39 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 112))(v38);
  v40 = objc_msgSend(v39, sel_recognition);

  if (!v40
    || (v41 = objc_msgSend(v40, sel_aceRecognition), v40, !v41))
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.conversationBridge);
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      _os_log_impl(&dword_1B4BE6000, v68, v69, "Failed to get ASR Recognition object for ASR reveal. ASR is NOT to be revealed.", v70, 2u);
      v71 = v70;
      v34 = v73;
      MEMORY[0x1B5E44758](v71, -1, -1);
    }

    swift_release();
    v37(v34, v8);
    return 0;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.conversationBridge);
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.debug.getter();
  v45 = os_log_type_enabled(v43, v44);
  v46 = v72;
  if (v45)
  {
    v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_1B4BE6000, v43, v44, "Preparing ACE command for ASR reveal.", v47, 2u);
    MEMORY[0x1B5E44758](v47, -1, -1);
  }

  v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88590]), sel_init);
  v49 = *(_QWORD *)(v46 + 80);
  v50 = *(_QWORD *)(v46 + 88);
  v51 = v48;
  v52 = (void *)MEMORY[0x1B5E432E8](v49, v50);
  objc_msgSend(v51, sel_setRefId_, v52);

  objc_msgSend(v51, sel_setRecognition_, v41);
  v53 = (_QWORD *)(v74 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v54 = 0;
  if (*v53 >> 62 == 1)
  {
    v55 = (void *)v53[1];
    if (v55)
    {
      v54 = objc_msgSend(v55, sel_aceId);
      if (v54)
      {
        v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v58 = v57;

        v54 = (id)MEMORY[0x1B5E432E8](v56, v58);
        swift_bridgeObjectRelease();
      }
    }
  }
  objc_msgSend(v51, sel_setSpeechRecognizedAceId_, v54);

  v59 = *(void **)(v72 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
  aBlock[4] = (uint64_t)closure #1 in ConversationRequestProcessor.revealAsrTranscription(for:turn:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_35;
  v60 = _Block_copy(aBlock);
  v61 = v51;
  objc_msgSend(v59, sel_handleCommand_completion_, v61, v60);
  swift_release();
  _Block_release(v60);

  v37(v73, v8);
  return 1;
}

void ConversationRequestProcessor.sendCommitToExecution(_:_:)(uint64_t a1, unint64_t a2, Swift::String *a3)
{
  Swift::String *v3;
  Swift::String *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  char *v26;
  Swift::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[4];
  uint64_t v79;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v75);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (AFIsInternalInstall())
  {
    type metadata accessor for ConversationBridge(0);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;
    v16 = *(void **)((char *)&v4->_countAndFlagsBits
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
    swift_getObjectType();
    specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(v13, v15, v16, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CommitResultCandidateId();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  v76 = v17;
  v18 = one-time initialization token for conversationBridge;
  swift_bridgeObjectRetain();
  if (v18 != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v77 = v20;
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v74 = v12;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc();
    v73 = v4;
    v26 = v10;
    v27 = a3;
    v28 = v25;
    v78[0] = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain();
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v21, v22, "Sending CommitResultCandidateId for RC ID: %s", v24, 0xCu);
    swift_arrayDestroy();
    v29 = v28;
    a3 = v27;
    v10 = v26;
    v4 = v73;
    MEMORY[0x1B5E44758](v29, -1, -1);
    v30 = v24;
    v12 = v74;
    MEMORY[0x1B5E44758](v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v31 = (*(uint64_t (**)(void))(v4->_countAndFlagsBits + 528))();
  if (v31)
  {
    v32 = v31;
    v33 = (uint64_t *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v34 = *v33;
    if ((unint64_t)*v33 >> 62 != 1)
    {
      swift_release();
      goto LABEL_26;
    }
    v35 = v34 & 0x3FFFFFFFFFFFFFFFLL;
    v36 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v34 & 0x3FFFFFFFFFFFFFFFLL) + 872);
    v37 = swift_retain();
    v38 = v36(v37);
    if (v38)
    {
      v75 = (uint64_t)a3;
      v39 = (*(uint64_t (**)(void))(*(_QWORD *)v38 + 216))();
      if (v40)
      {
        v41 = v40;
        v42 = *(_QWORD *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
        v43 = *(_QWORD *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
        v44 = *(_QWORD *)(v35 + 16);
        v45 = *(void **)(v35 + 24);
        v74 = v10;
        v46 = v39;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:)(v42, v43, v44, v45, v46, v41);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v10 = v74;
        swift_bridgeObjectRelease();
      }
      else
      {
        v56 = Logger.logObject.getter();
        v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v58 = 0;
          _os_log_impl(&dword_1B4BE6000, v56, v57, "Sending commit to conversation bridge, but selected TCU ID is unknown. This can happen if we didn't get a well-formed TTResponseMessage. ExecutionFinalizedMessage will fail to send.", v58, 2u);
          MEMORY[0x1B5E44758](v58, -1, -1);
          swift_release();
          swift_release();

LABEL_25:
          swift_release();
          a3 = (Swift::String *)v75;
          goto LABEL_26;
        }

        swift_release();
      }
      swift_release();
      goto LABEL_25;
    }
    outlined init with copy of ResultCandidateType(v35 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v75 = v35;
      v47 = (void *)*((_QWORD *)v12 + 3);
      v48 = (void *)*((_QWORD *)v12 + 5);
      if (v47)
      {
        if (v48)
        {
          v74 = v10;
          v49 = a3;
          v50 = *((_QWORD *)v12 + 2);
          v72 = *((_QWORD *)v12 + 4);
          v73 = (Swift::String *)v50;
          swift_bridgeObjectRelease();
          v51 = Logger.logObject.getter();
          v52 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v51, v52))
          {
            v53 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v53 = 0;
            _os_log_impl(&dword_1B4BE6000, v51, v52, "Posting ExecutionFinalizedMessage for text request", v53, 2u);
            MEMORY[0x1B5E44758](v53, -1, -1);
          }

          v54 = *(_QWORD *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
          v55 = *(_QWORD *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
          swift_bridgeObjectRetain();
          ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:)(v54, v55, (uint64_t)v73, v47, v72, v48);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          a3 = v49;
          v10 = v74;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
      swift_release();
      outlined destroy of ResultCandidateType((uint64_t)v12);
    }
  }
LABEL_26:
  (*(void (**)(Swift::String *))(**(_QWORD **)((char *)&v4->_countAndFlagsBits
                                                        + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                                          + 392))(a3);
  v59 = *(uint64_t *)((char *)&v4[1]._object
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  v60 = *(uint64_t *)((char *)&v4[2]._countAndFlagsBits
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)&v4->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v59);
  (*(void (**)(uint64_t, _QWORD, _UNKNOWN **, uint64_t, uint64_t))(v60 + 48))(v76, *(uint64_t *)((char *)&v4->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v59, v60);
  if (one-time initialization token for executor != -1)
    swift_once();
  v61 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  v62 = type metadata accessor for OSSignpostID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v10, 0, 1, v62);
  (*(void (**)(char *))(a3->_countAndFlagsBits + 840))(v10);
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v63 = type metadata accessor for InsightRequestSummaryLogger();
  v64 = __swift_project_value_buffer(v63, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_retain();
  swift_retain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v64, v4, a3);
  swift_release();
  swift_release();
  swift_retain_n();
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = (uint8_t *)swift_slowAlloc();
    v68 = swift_slowAlloc();
    v79 = v68;
    *(_DWORD *)v67 = 136315138;
    v69 = CommitResultCandidateId.debugDescription.getter();
    v78[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v65, v66, "Successfully sent: %s", v67, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v68, -1, -1);
    MEMORY[0x1B5E44758](v67, -1, -1);
    swift_release();

  }
  else
  {

    swift_release_n();
  }
}

uint64_t type metadata accessor for ConversationBridge(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ConversationBridge);
}

void specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t aBlock[6];

  v33 = a6;
  v34 = a7;
  v35 = a3;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D885A8]), sel_init);
  UUID.init()();
  v16 = UUID.uuidString.getter();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v19 = (void *)MEMORY[0x1B5E432E8](v16, v18);
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setAceId_, v19);

  v20 = v15;
  if (a5)
    v21 = (void *)MEMORY[0x1B5E432E8](a4, a5);
  else
    v21 = 0;
  objc_msgSend(v15, sel_setRefId_, v21, v33, v34);

  v22 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  objc_msgSend(v15, sel_setRequestHandlingStatus_, v22);

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v24, v25, "Sending ShowRequestHandlingStatus with status: %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v27, -1, -1);
    MEMORY[0x1B5E44758](v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v28 = (_QWORD *)swift_allocObject();
  v30 = v33;
  v29 = v34;
  v28[2] = v15;
  v28[3] = v30;
  v28[4] = v29;
  aBlock[4] = (uint64_t)partial apply for closure #1 in static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:);
  aBlock[5] = (uint64_t)v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_2;
  v31 = _Block_copy(aBlock);
  v32 = v15;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v30);
  swift_release();
  objc_msgSend(v35, sel_handleCommand_completion_, v32, v31);
  _Block_release(v31);

}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for CommitResultCandidateId()
{
  return objc_opt_self();
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendCommitResultCandidateId(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t ConversationRuntimeClient.sendCommitResultCandidateId(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, void *, uint64_t);

  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v7;
  v10[3] = v8;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v11 = StaticString.description.getter();
  v13 = v12;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v7;
  *(_QWORD *)(v14 + 24) = v8;
  *(_QWORD *)(v14 + 32) = v9;
  *(_QWORD *)(v14 + 40) = "bridge(didReceiveCommitResultCandidateId:from:)";
  *(_QWORD *)(v14 + 48) = 47;
  *(_BYTE *)(v14 + 56) = 2;
  *(_QWORD *)(v14 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:);
  *(_QWORD *)(v14 + 72) = v10;
  v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v8 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v15(v11, v13, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v14);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ResultCandidateState.commitSignpostID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  swift_beginAccess();
  v4 = type metadata accessor for ResultCandidateState.LoggingMetadata(0);
  outlined assign with copy of ReferenceResolutionClientProtocol?(a1, v3 + *(int *)(v4 + 20), &demangling cache variable for type metadata for OSSignpostID?);
  swift_endAccess();
  return outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for OSSignpostID?);
}

uint64_t CommitResultCandidateId.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  _StringGuts.grow(_:)(26);
  v1 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v8 = v1;
  v2._object = (void *)0x80000001B4EF7E10;
  v2._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v2);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

uint64_t ExecutionOverrideContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:)(v2, v3, v4, v5, v7, v6);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v10;
  *v10 = v6;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(a4, a5, a6);
}

uint64_t ConversationService.bridge(didReceiveCommitResultCandidateId:from:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = v0[60];
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
    return swift_task_switch();
  (*(void (**)(_QWORD, _QWORD))(v0[53] + 8))(v0[57], v0[52]);
  outlined destroy of CamOutput(v1, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  v2 = (_QWORD *)v0[30];
  v3 = v2[11];
  v4 = v2[12];
  __swift_project_boxed_opaque_existential_1(v2 + 8, v3);
  v7 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v4 + 40) + *(_QWORD *)(v4 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  v0[101] = v5;
  *v5 = v0;
  v5[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return v7(v0[81], v0[82], v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 720) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release();
  swift_release();
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v1, (uint64_t)&unk_1E68478E8, (uint64_t)&unk_1E6847910, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = v0[60];
  (*(void (**)(_QWORD, _QWORD))(v0[53] + 8))(v0[57], v0[52]);
  outlined destroy of CamOutput(v1, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  v2 = (_QWORD *)v0[30];
  v3 = v2[11];
  v4 = v2[12];
  __swift_project_boxed_opaque_existential_1(v2 + 8, v3);
  v7 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v4 + 40) + *(_QWORD *)(v4 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  v0[101] = v5;
  *v5 = v0;
  v5[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return v7(v0[81], v0[82], v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 592);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for Input?);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(*(_QWORD *)(v0 + 240), (uint64_t)&unk_1E68478E8, (uint64_t)&unk_1E6847910, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 368);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t *, _QWORD, uint64_t);
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (void (*)(uint64_t *, _QWORD, uint64_t))v0[85];
  v2 = (uint64_t *)v0[77];
  v3 = v0[75];
  v4 = (_QWORD *)(v0[80] + v0[83]);
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  *v2 = specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)();
  v2[1] = v5;
  v1(v2, *MEMORY[0x1E0D9B1B0], v3);
  v0[99] = SiriKitEvent.__allocating_init(_:builder:)();
  v6 = (_QWORD *)swift_task_alloc();
  v0[100] = v6;
  *v6 = v0;
  v6[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return dispatch thunk of SiriKitEventSending.sendAsync(_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 768) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = v0[64];
  v2 = v0[58];
  v3 = v0[59];
  outlined init with copy of ReferenceResolutionClientProtocol?(v0[65], v1, &demangling cache variable for type metadata for DecisionEngineResponse?);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[97] = v4;
  if (v4(v1, 1, v2) == 1)
  {
    v5 = v0[64];
    v6 = &demangling cache variable for type metadata for DecisionEngineResponse?;
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?(v5, v6);
    v13 = (_QWORD *)v0[30];
    v14 = v13[11];
    v15 = v13[12];
    __swift_project_boxed_opaque_existential_1(v13 + 8, v14);
    v22 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v15 + 40) + *(_QWORD *)(v15 + 40));
    v16 = (_QWORD *)swift_task_alloc();
    v0[101] = v16;
    *v16 = v0;
    v16[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
    return v22(v0[81], v0[82], v14, v15);
  }
  v7 = v0[72];
  v8 = v0[60];
  v9 = v0[58];
  v10 = v0[52];
  v11 = v0[53];
  outlined init with take of StringKeyedValue(v0[64], v8, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  outlined init with copy of ReferenceResolutionClientProtocol?(v8 + *(int *)(v9 + 24), v7, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    v12 = v0[72];
    outlined destroy of CamOutput(v0[60], (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    v6 = &demangling cache variable for type metadata for Input?;
    v5 = v12;
    goto LABEL_5;
  }
  v18 = v0[91];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[53] + 32))(v0[57], v0[72], v0[52]);
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  Input.parse.getter();
  v21 = (_QWORD *)swift_task_alloc();
  v0[98] = v21;
  *v21 = v0;
  v21[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)(v0[80], v19, v20, v0[51]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v9;

  v1 = v0[82];
  v2 = v0[81];
  v3 = (_QWORD *)v0[77];
  v4 = v0[76];
  v5 = v0[75];
  v6 = (_QWORD *)(v0[80] + v0[83]);
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  v0[84] = type metadata accessor for SiriKitEvent();
  *v3 = v2;
  v3[1] = v1;
  v7 = *MEMORY[0x1E0D9B228];
  v8 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v0[85] = v8;
  v8(v3, v7, v5);
  swift_bridgeObjectRetain();
  v0[86] = SiriKitEvent.__allocating_init(_:builder:)();
  v9 = (_QWORD *)swift_task_alloc();
  v0[87] = v9;
  *v9 = v0;
  v9[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return dispatch thunk of SiriKitEventSending.sendAsync(_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v1, (uint64_t)&unk_1E68478E8, (uint64_t)&unk_1E6847910, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[30];
  v2 = type metadata accessor for Logger();
  v0[79] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  swift_beginAccess();
  v3 = *(void **)(v1 + 112);
  v4 = *(_BYTE *)(v1 + 120);
  outlined copy of ConversationService.State(v3, v4);
  v5 = specialized ConversationService.State.assertTurnStarted(function:)((uint64_t)"bridge(didReceiveCommitResultCandidateId:from:)", 47, 2, (uint64_t)v3, v4);
  v0[80] = v5;
  v6 = v5;
  v7 = v0[27];
  swift_retain();
  outlined consume of ConversationService.State(v3, v4);
  v8 = *(_QWORD *)(v7 + 16);
  v0[81] = v8;
  v9 = *(_QWORD *)(v7 + 24);
  v0[82] = v9;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 344))(v8, v9);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "Sending ACE command to reveal ASR", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }
    v15 = v0[29];

    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88590]), sel_init);
    objc_msgSend(v16, sel_setRecognition_, v11);
    v17 = (void *)MEMORY[0x1B5E432E8](v8, v9);
    objc_msgSend(v16, sel_setSpeechRecognizedAceId_, v17);

    ObjectType = swift_getObjectType();
    v20 = *(_QWORD *)(v6 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData);
    v19 = *(_QWORD *)(v6 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8);
    objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    v21 = v16;
    swift_bridgeObjectRetain();
    v22 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(v16, 0, 0, 0, 0, 0, 0, 0, 0, 0, v20, v19);

    (*(void (**)(id, void (*)(int, id), _QWORD, uint64_t, uint64_t))(v15 + 8))(v22, closure #1 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:), 0, ObjectType, v15);
  }
  v0[83] = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 240);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for Input?);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v2, (uint64_t)&unk_1E68478E8, (uint64_t)&unk_1E6847910, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  v1 = *(_QWORD *)(v0 + 656);
  v2 = *(_QWORD *)(v0 + 648);
  v3 = *(_QWORD *)(v0 + 640);
  ConversationService.markBusy(doing:)();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 328))(v2, v1);
  *(_QWORD *)(v0 + 704) = v4;
  if (v4)
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 712) = v5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *v5 = v0;
    v5[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
    return Task.value.getter();
  }
  else
  {
    v7 = *(void **)(v0 + 656);
    v8 = *(_QWORD *)(v0 + 648);
    v9 = *(_QWORD *)(v0 + 640);
    v10 = *(_QWORD *)(v0 + 232);
    swift_release();
    ObjectType = swift_getObjectType();
    v13 = *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData);
    v12 = *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8);
    v14 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    swift_bridgeObjectRetain();
    v15 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v13, v12);
    _StringGuts.grow(_:)(76);
    v16._object = (void *)0x80000001B4EFAA80;
    v16._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v16);
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v8;
    v17._object = v7;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0xD000000000000027;
    v18._object = (void *)0x80000001B4EFAAB0;
    String.append(_:)(v18);
    (*(void (**)(id, _QWORD, unint64_t, uint64_t, uint64_t))(v10 + 32))(v15, 0, 0xE000000000000000, ObjectType, v10);
    swift_bridgeObjectRelease();

    $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(*(_QWORD *)(v0 + 240), (uint64_t)&unk_1E68478E8, (uint64_t)&unk_1E6847910, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 656);
  v2 = *(_QWORD *)(v0 + 648);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 424);
  swift_release();
  v40 = *(_QWORD *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8);
  v41 = *(_QWORD *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData);
  v38 = *(_QWORD *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 24);
  v39 = *(_QWORD *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 360))(v2, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v6) == 1)
  {
    v7 = *(_QWORD *)(v0 + 352);
    v8 = *(_QWORD *)(v0 + 264);
    v9 = *(_QWORD *)(v0 + 272);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 560), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 400);
    v12 = *(_QWORD *)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 376);
    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v11 + 88))(v10, v12) == *MEMORY[0x1E0D9C678])
    {
      v13 = *(_QWORD *)(v0 + 400);
      v14 = (uint64_t *)(v0 + 336);
      v15 = *(_QWORD *)(v0 + 336);
      v16 = (uint64_t *)(v0 + 320);
      v17 = (_QWORD *)(v0 + 312);
      v19 = *(_QWORD *)(v0 + 312);
      v18 = *(_QWORD *)(v0 + 320);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 376) + 96))(v13, *(_QWORD *)(v0 + 368));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v15, v13, v19);
      USOParse.userParse.getter();
      v20 = 0;
    }
    else
    {
      v14 = (uint64_t *)(v0 + 400);
      v16 = (uint64_t *)(v0 + 376);
      v17 = (_QWORD *)(v0 + 368);
      v20 = 1;
    }
    v21 = *v14;
    v22 = *v16;
    v23 = *(_QWORD *)(v0 + 560);
    v25 = *(_QWORD *)(v0 + 416);
    v24 = *(_QWORD *)(v0 + 424);
    v26 = *(_QWORD *)(v0 + 352);
    v28 = *(_QWORD *)(v0 + 264);
    v27 = *(_QWORD *)(v0 + 272);
    (*(void (**)(uint64_t, _QWORD))(v22 + 8))(v21, *v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, v20, 1, v28);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  v29 = *(_QWORD *)(v0 + 656);
  v30 = *(_QWORD *)(v0 + 648);
  v32 = *(_QWORD *)(v0 + 344);
  v31 = *(_QWORD *)(v0 + 352);
  v33 = *(_QWORD *)(v0 + 288);
  v34 = *(_QWORD *)(v0 + 296);
  v35 = *(_QWORD *)(v0 + 232);
  v36 = *(_QWORD *)(v0 + 224);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v32, *MEMORY[0x1E0D9ED48], v33);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v32, 0, 1, v33);
  ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v36, v35, v30, v29, v41, v40, v39, v38, 0, v31, v32);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(*(_QWORD *)(v0 + 240), (uint64_t)&unk_1E68478E8, (uint64_t)&unk_1E6847910, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  id *v71;
  uint64_t v72;
  uint64_t ObjectType;
  uint64_t v74;
  objc_class *v75;
  _BYTE *v76;
  _QWORD *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(void);
  uint64_t v121;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 776);
  v2 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 464);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 520), v2, &demangling cache variable for type metadata for DecisionEngineResponse?);
  if (v1(v2, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 504);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for DecisionEngineResponse?);
LABEL_7:
    swift_retain();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = *(_QWORD *)(v0 + 656);
      v18 = *(_QWORD *)(v0 + 648);
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v121 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B4BE6000, v15, v16, "[ConversationService] No conversation found for followup input %s during commit. Will redirect to server.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v20, -1, -1);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }
    else
    {
      swift_release();
    }

    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 776);
    v22 = *(_QWORD *)(v0 + 488);
    v23 = *(_QWORD *)(v0 + 464);
    v24 = (uint64_t *)(*(_QWORD *)(v0 + 640) + *(_QWORD *)(v0 + 752));
    v117 = *v24;
    v112 = v24[2];
    v114 = v24[1];
    v110 = v24[3];
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 520), v22, &demangling cache variable for type metadata for DecisionEngineResponse?);
    v25 = v21(v22, 1, v23);
    v26 = *(_QWORD *)(v0 + 488);
    v27 = *(_QWORD *)(v0 + 360);
    if (v25 == 1)
    {
      v28 = *(_QWORD *)(v0 + 264);
      v29 = *(_QWORD *)(v0 + 272);
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for DecisionEngineResponse?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
    }
    else
    {
      DecisionEngineResponse.topNlParse.getter(*(_QWORD *)(v0 + 360));
      outlined destroy of CamOutput(v26, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    }
    v30 = *(_QWORD *)(v0 + 656);
    v31 = *(_QWORD *)(v0 + 648);
    v109 = *(_QWORD *)(v0 + 520);
    v32 = *(_QWORD *)(v0 + 360);
    v33 = *(_QWORD *)(v0 + 344);
    v34 = *(_QWORD *)(v0 + 288);
    v35 = *(_QWORD *)(v0 + 296);
    v36 = *(_QWORD *)(v0 + 232);
    v37 = *(_QWORD *)(v0 + 224);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 104))(v33, *MEMORY[0x1E0D9ED48], v34);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v33, 0, 1, v34);
    ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v37, v36, v31, v30, v117, v114, v112, v110, 0, v32, v33);
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    outlined destroy of ReferenceResolutionClientProtocol?(v109, &demangling cache variable for type metadata for DecisionEngineResponse?);
    $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(*(_QWORD *)(v0 + 240), (uint64_t)&unk_1E68478E8, (uint64_t)&unk_1E6847910, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(uint64_t **)(v0 + 504);
  v6 = *v5;
  swift_retain();
  outlined destroy of CamOutput((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 776);
  v8 = *(_QWORD *)(v0 + 496);
  v9 = *(_QWORD *)(v0 + 464);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(_QWORD *)(v0 + 520), v8, &demangling cache variable for type metadata for DecisionEngineResponse?);
  v10 = v7(v8, 1, v9);
  v11 = *(_QWORD *)(v0 + 568);
  v12 = *(_QWORD *)(v0 + 496);
  if (v10 == 1)
  {
    v13 = *(_QWORD *)(v0 + 416);
    v14 = *(_QWORD *)(v0 + 424);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 496), &demangling cache variable for type metadata for DecisionEngineResponse?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v11, 1, 1, v13);
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12 + *(int *)(*(_QWORD *)(v0 + 464) + 24), *(_QWORD *)(v0 + 568), &demangling cache variable for type metadata for Input?);
    outlined destroy of CamOutput(v12, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  }
  v39 = *(_QWORD *)(v0 + 728);
  v40 = *(_QWORD *)(v0 + 568);
  *(_QWORD *)(v0 + 832) = v39;
  *(_QWORD *)(v0 + 824) = v6;
  v41 = *(_QWORD *)(v0 + 592);
  v42 = *(_QWORD *)(v0 + 552);
  v44 = *(_QWORD *)(v0 + 416);
  v43 = *(_QWORD *)(v0 + 424);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v40, v41, &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, v42, &demangling cache variable for type metadata for Input?);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  if (v45(v42, 1, v44) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 552), &demangling cache variable for type metadata for Input?);
  }
  else
  {
    v46 = *(_QWORD *)(v0 + 392);
    v47 = *(_QWORD *)(v0 + 368);
    v48 = *(_QWORD *)(v0 + 376);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 32))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 416));
    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v48 + 88))(v46, v47) == *MEMORY[0x1E0D9C688])
    {
      v49 = *(_QWORD *)(v0 + 240);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 8))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 368));
      v50 = (_QWORD *)(v49 + 272);
      result = swift_beginAccess();
      v51 = *(_QWORD *)(v49 + 272);
      v52 = __OFADD__(v51, 1);
      v53 = v51 + 1;
      if (v52)
      {
        __break(1u);
        return result;
      }
      *v50 = v53;
      swift_retain();
      v54 = Logger.logObject.getter();
      v55 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v56 = 134217984;
        *(_QWORD *)(v0 + 200) = *v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1B4BE6000, v54, v55, "Input given to flow was empty: Incrementing consecutiveEmptyInputs to %ld", v56, 0xCu);
        MEMORY[0x1B5E44758](v56, -1, -1);
      }
      else
      {
        swift_release();
      }
      v61 = *(_QWORD *)(v0 + 448);
      v62 = *(_QWORD *)(v0 + 416);
      v63 = *(_QWORD *)(v0 + 424);

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
      goto LABEL_25;
    }
    v57 = *(_QWORD *)(v0 + 392);
    v58 = *(_QWORD *)(v0 + 368);
    v59 = *(_QWORD *)(v0 + 376);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 416));
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
  }
  v60 = *(_QWORD *)(v0 + 240);
  swift_beginAccess();
  *(_QWORD *)(v60 + 272) = 0;
LABEL_25:
  v64 = *(_QWORD *)(v0 + 544);
  v65 = *(_QWORD *)(v0 + 416);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 592), v64, &demangling cache variable for type metadata for Input?);
  if (v45(v64, 1, v65) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 544), &demangling cache variable for type metadata for Input?);
  }
  else
  {
    v67 = *(_QWORD *)(v0 + 376);
    v66 = *(_QWORD *)(v0 + 384);
    v68 = *(_QWORD *)(v0 + 368);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 32))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 416));
    Input.parse.getter();
    v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 88))(v66, v68);
    if (v69 == *MEMORY[0x1E0D9C5F8])
    {
      v118 = *(_QWORD *)(v0 + 440);
      v70 = *(_QWORD *)(v0 + 424);
      v115 = *(_QWORD *)(v0 + 416);
      v71 = *(id **)(v0 + 384);
      v72 = *(_QWORD *)(v0 + 232);
      (*(void (**)(id *, _QWORD))(*(_QWORD *)(v0 + 376) + 96))(v71, *(_QWORD *)(v0 + 368));

      ObjectType = swift_getObjectType();
      v74 = v39;
      v75 = (objc_class *)type metadata accessor for ExecutionInputInfo();
      v76 = objc_allocWithZone(v75);
      v77 = &v76[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
      *v77 = 0;
      v77[1] = 0;
      v76[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = 1;
      *(_QWORD *)(v0 + 160) = v76;
      *(_QWORD *)(v0 + 168) = v75;
      v78 = objc_msgSendSuper2((objc_super *)(v0 + 160), sel_init);
      (*(void (**)(id, uint64_t, uint64_t))(v72 + 144))(v78, ObjectType, v72);

      v39 = v74;
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v118, v115);
    }
    else
    {
      v80 = *(_QWORD *)(v0 + 376);
      v79 = *(_QWORD *)(v0 + 384);
      v81 = *(_QWORD *)(v0 + 368);
      if (v69 == *MEMORY[0x1E0D9C678])
      {
        v83 = *(_QWORD *)(v0 + 320);
        v82 = *(_QWORD *)(v0 + 328);
        v84 = *(_QWORD *)(v0 + 312);
        v119 = v39;
        v85 = *(_QWORD *)(v0 + 280);
        v106 = *(_QWORD *)(v0 + 272);
        v107 = *(_QWORD *)(v0 + 264);
        v105 = *(_QWORD *)(v0 + 256);
        v108 = *(_QWORD *)(v0 + 232);
        v113 = *(_QWORD *)(v0 + 440);
        v116 = *(_QWORD *)(v0 + 416);
        v111 = *(_QWORD *)(v0 + 424);
        (*(void (**)(uint64_t, uint64_t))(v80 + 96))(v79, v81);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v82, v79, v84);
        v86 = swift_getObjectType();
        USOParse.userParse.getter();
        Siri_Nlu_External_UserParse.id.getter();
        v87 = v85;
        v39 = v119;
        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v87, v107);
        v88 = objc_allocWithZone((Class)type metadata accessor for ExecutionInputInfo());
        v89 = ExecutionInputInfo.init(parseId:)(v105);
        (*(void (**)(id, uint64_t))(v108 + 144))(v89, v86);

        (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
        (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v113, v116);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 416));
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
      }
    }
  }
  v90 = *(_QWORD *)(v0 + 592);
  v91 = *(_QWORD *)(v0 + 416);
  type metadata accessor for ConversationSELFHelper();
  *(_QWORD *)(v0 + 840) = static ConversationSELFHelper.shared.getter();
  if (v45(v90, 1, v91))
  {
    v92 = *(_QWORD *)(v0 + 248);
    v93 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v92, 1, 1, v93);
  }
  else
  {
    v95 = *(_QWORD *)(v0 + 424);
    v94 = *(_QWORD *)(v0 + 432);
    v96 = *(_QWORD *)(v0 + 416);
    v97 = *(_QWORD *)(v0 + 248);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v95 + 16))(v94, *(_QWORD *)(v0 + 592), v96);
    Input.identifier.getter();
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
    v98 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v97, 0, 1, v98);
  }
  v99 = *(_QWORD *)(v0 + 640);
  v100 = *(_QWORD *)(v0 + 240);
  v101 = *(_QWORD *)(v0 + 216);
  v102 = swift_allocObject();
  v103 = (int *)MEMORY[0x1E0D9C178];
  *(_BYTE *)(v102 + 64) = 1;
  v120 = (uint64_t (*)(void))((char *)v103 + *v103);
  *(_QWORD *)(v0 + 848) = v102;
  *(_QWORD *)(v102 + 16) = v100;
  *(_QWORD *)(v102 + 24) = v101;
  *(_QWORD *)(v102 + 32) = v99;
  *(_OWORD *)(v102 + 40) = *(_OWORD *)(v0 + 224);
  *(_QWORD *)(v102 + 56) = v6;
  *(_QWORD *)(v102 + 72) = v39;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  v104 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 856) = v104;
  *v104 = v0;
  v104[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return v120();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 864) = v0;
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v2 + 248), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_release();
  return swift_task_switch();
}

void ConversationService.bridge(didReceiveCommitResultCandidateId:from:)()
{
  char *v0;

  v0 = (char *)&loc_1B4C1B90C + dword_1B4D83F7C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B4C1B91C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id *v47;
  uint64_t v48;
  uint64_t ObjectType;
  objc_class *v50;
  _BYTE *v51;
  _QWORD *v52;
  objc_super *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;

  *(_QWORD *)(v4 - 104) = v0;
  v5 = *(_QWORD *)(v1 + 584);
  v6 = *v3;
  v7 = v3[1];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?));
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v3 + *(int *)(v8 + 64), v5, &demangling cache variable for type metadata for Input?);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Now running commit for conversation which was eagerly prepared", v11, 2u);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }

  v12 = *(_QWORD *)(v1 + 584);
  *(_QWORD *)(v4 - 96) = v7;
  *(_QWORD *)(v4 - 88) = v6;
  *(_QWORD *)(v1 + 832) = v6;
  *(_QWORD *)(v1 + 824) = v7;
  v13 = *(_QWORD *)(v1 + 592);
  v14 = *(_QWORD *)(v1 + 552);
  v16 = *(_QWORD *)(v1 + 416);
  v15 = *(_QWORD *)(v1 + 424);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v12, v13, &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v13, v14, &demangling cache variable for type metadata for Input?);
  v17 = v16;
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v18(v14, 1, v17) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v1 + 552), &demangling cache variable for type metadata for Input?);
LABEL_10:
    v34 = *(_QWORD *)(v1 + 240);
    swift_beginAccess();
    *(_QWORD *)(v34 + 272) = 0;
    goto LABEL_13;
  }
  v19 = *(_QWORD *)(v1 + 392);
  v20 = *(_QWORD *)(v1 + 368);
  v21 = *(_QWORD *)(v1 + 376);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 424) + 32))(*(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 552), *(_QWORD *)(v1 + 416));
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v21 + 88))(v19, v20) != *MEMORY[0x1E0D9C688])
  {
    v31 = *(_QWORD *)(v1 + 392);
    v32 = *(_QWORD *)(v1 + 368);
    v33 = *(_QWORD *)(v1 + 376);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 424) + 8))(*(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 416));
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    goto LABEL_10;
  }
  *(_QWORD *)(v4 - 128) = v18;
  v22 = *(_QWORD *)(v1 + 240);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 376) + 8))(*(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 368));
  v23 = (_QWORD *)(v22 + 272);
  result = swift_beginAccess();
  v25 = *(_QWORD *)(v22 + 272);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *v23 = v27;
    swift_retain();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v30 = 134217984;
      *v2 = *v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1B4BE6000, v28, v29, "Input given to flow was empty: Incrementing consecutiveEmptyInputs to %ld", v30, 0xCu);
      MEMORY[0x1B5E44758](v30, -1, -1);
    }
    else
    {
      swift_release();
    }
    v35 = *(_QWORD *)(v1 + 448);
    v36 = *(_QWORD *)(v1 + 416);
    v37 = *(_QWORD *)(v1 + 424);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
    v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 - 128);
LABEL_13:
    v38 = *(_QWORD *)(v1 + 544);
    v39 = *(_QWORD *)(v1 + 416);
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v1 + 592), v38, &demangling cache variable for type metadata for Input?);
    if (v18(v38, 1, v39) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v1 + 544), &demangling cache variable for type metadata for Input?);
    }
    else
    {
      v41 = *(_QWORD *)(v1 + 376);
      v40 = *(_QWORD *)(v1 + 384);
      v42 = *(_QWORD *)(v1 + 368);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 424) + 32))(*(_QWORD *)(v1 + 440), *(_QWORD *)(v1 + 544), *(_QWORD *)(v1 + 416));
      Input.parse.getter();
      v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 88))(v40, v42);
      if (v43 == *MEMORY[0x1E0D9C5F8])
      {
        v44 = *(_QWORD *)(v1 + 440);
        v45 = *(_QWORD *)(v1 + 416);
        v46 = *(_QWORD *)(v1 + 424);
        v47 = *(id **)(v1 + 384);
        v48 = *(_QWORD *)(v1 + 232);
        (*(void (**)(id *, _QWORD))(*(_QWORD *)(v1 + 376) + 96))(v47, *(_QWORD *)(v1 + 368));

        ObjectType = swift_getObjectType();
        v50 = (objc_class *)type metadata accessor for ExecutionInputInfo();
        v51 = objc_allocWithZone(v50);
        v52 = &v51[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
        *v52 = 0;
        v52[1] = 0;
        v51[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = 1;
        *(_QWORD *)(v1 + 160) = v51;
        *(_QWORD *)(v1 + 168) = v50;
        v53 = -[objc_super init](*(objc_super **)(v4 - 104), sel_init);
        (*(void (**)(objc_super *, uint64_t, uint64_t))(v48 + 144))(v53, ObjectType, v48);

        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
      }
      else
      {
        v54 = *(_QWORD *)(v1 + 416);
        v55 = *(_QWORD *)(v1 + 424);
        v57 = *(_QWORD *)(v1 + 376);
        v56 = *(_QWORD *)(v1 + 384);
        v58 = *(_QWORD *)(v1 + 368);
        if (v43 == *MEMORY[0x1E0D9C678])
        {
          v60 = *(_QWORD *)(v1 + 320);
          v59 = *(_QWORD *)(v1 + 328);
          v61 = *(_QWORD *)(v1 + 312);
          v62 = *(_QWORD *)(v1 + 280);
          v86 = *(_QWORD *)(v1 + 272);
          v87 = *(_QWORD *)(v1 + 264);
          *(_QWORD *)(v4 - 136) = *(_QWORD *)(v1 + 440);
          *(_QWORD *)(v4 - 128) = v18;
          v63 = *(_QWORD *)(v1 + 256);
          *(_QWORD *)(v4 - 144) = *(_QWORD *)(v1 + 232);
          v64 = *(void (**)(uint64_t, uint64_t))(v57 + 96);
          *(_QWORD *)(v4 - 104) = v54;
          v65 = v55;
          v64(v56, v58);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v59, v56, v61);
          v66 = swift_getObjectType();
          USOParse.userParse.getter();
          Siri_Nlu_External_UserParse.id.getter();
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v62, v87);
          v67 = objc_allocWithZone((Class)type metadata accessor for ExecutionInputInfo());
          v68 = v63;
          v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 - 128);
          v69 = ExecutionInputInfo.init(parseId:)(v68);
          (*(void (**)(id, uint64_t))(*(_QWORD *)(v4 - 144) + 144))(v69, v66);

          (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
          (*(void (**)(_QWORD, _QWORD))(v65 + 8))(*(_QWORD *)(v4 - 136), *(_QWORD *)(v4 - 104));
        }
        else
        {
          (*(void (**)(_QWORD, uint64_t))(v55 + 8))(*(_QWORD *)(v1 + 440), v54);
          (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
        }
      }
    }
    v70 = *(_QWORD *)(v1 + 592);
    v71 = *(_QWORD *)(v1 + 416);
    type metadata accessor for ConversationSELFHelper();
    *(_QWORD *)(v1 + 840) = static ConversationSELFHelper.shared.getter();
    if (v18(v70, 1, v71))
    {
      v72 = *(_QWORD *)(v1 + 248);
      v73 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 1, 1, v73);
    }
    else
    {
      v75 = *(_QWORD *)(v1 + 424);
      v74 = *(_QWORD *)(v1 + 432);
      v76 = *(_QWORD *)(v1 + 416);
      v77 = *(_QWORD *)(v1 + 248);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v75 + 16))(v74, *(_QWORD *)(v1 + 592), v76);
      Input.identifier.getter();
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
      v78 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 0, 1, v78);
    }
    v79 = *(_QWORD *)(v1 + 640);
    v80 = *(_QWORD *)(v1 + 240);
    v81 = *(_QWORD *)(v1 + 216);
    v82 = swift_allocObject();
    *(_QWORD *)(v1 + 848) = v82;
    *(_QWORD *)(v82 + 16) = v80;
    *(_QWORD *)(v82 + 24) = v81;
    *(_QWORD *)(v82 + 32) = v79;
    v83 = *(_OWORD *)(v1 + 224);
    *(_OWORD *)(v4 - 128) = v83;
    *(_OWORD *)(v82 + 40) = v83;
    v84 = *(_QWORD *)(v4 - 88);
    *(_QWORD *)(v82 + 56) = *(_QWORD *)(v4 - 96);
    *(_BYTE *)(v82 + 64) = 0;
    *(_QWORD *)(v82 + 72) = v84;
    *(_QWORD *)(v4 - 104) = (int)*MEMORY[0x1E0D9C178] + MEMORY[0x1E0D9C178];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v85 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 856) = v85;
    *v85 = v1;
    v85[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
    __asm { BR              X0 }
  }
  __break(1u);
  return result;
}

uint64_t ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[29] = a3;
  v4[30] = v3;
  v4[27] = a1;
  v4[28] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4[31] = swift_task_alloc();
  type metadata accessor for Siri_Nlu_External_UUID();
  v4[32] = swift_task_alloc();
  v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[33] = v5;
  v4[34] = *(_QWORD *)(v5 - 8);
  v4[35] = swift_task_alloc();
  v6 = type metadata accessor for ServerFallbackReason();
  v4[36] = v6;
  v4[37] = *(_QWORD *)(v6 - 8);
  v4[38] = swift_task_alloc();
  v7 = type metadata accessor for USOParse();
  v4[39] = v7;
  v4[40] = *(_QWORD *)(v7 - 8);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v4[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v8 = type metadata accessor for Parse();
  v4[46] = v8;
  v4[47] = *(_QWORD *)(v8 - 8);
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  v4[51] = swift_task_alloc();
  v9 = type metadata accessor for Input();
  v4[52] = v9;
  v4[53] = *(_QWORD *)(v9 - 8);
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  v4[57] = swift_task_alloc();
  v10 = type metadata accessor for DecisionEngineResponse();
  v4[58] = v10;
  v4[59] = *(_QWORD *)(v10 - 8);
  v4[60] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecisionEngineResponse?);
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = type metadata accessor for ConversationService.EagerResult(0);
  v4[67] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v4[68] = swift_task_alloc();
  v4[69] = swift_task_alloc();
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  v4[72] = swift_task_alloc();
  v4[73] = swift_task_alloc();
  v4[74] = swift_task_alloc();
  v11 = type metadata accessor for SiriKitEventPayload();
  v4[75] = v11;
  v4[76] = *(_QWORD *)(v11 - 8);
  v4[77] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[78] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

void *ConversationService.ActiveTurn.getNeedsASRReveal(rcId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  void *v9;
  id v10;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_needsASRReveal);
  swift_beginAccess();
  v6 = *v5;
  if (!*(_QWORD *)(v6 + 16))
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) != 0)
  {
    v9 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v7);
    v10 = v9;
  }
  else
  {
    v9 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t protocol witness for SiriKitEventSending.sendAsync(_:) in conformance InvocationScopedSiriKitEventSender(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return InvocationScopedSiriKitEventSender.sendAsync(_:)(a1);
}

uint64_t InvocationScopedSiriKitEventSender.sendAsync(_:)()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v1(v2, v4);
  swift_release();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v1(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  _QWORD *v28;
  uint64_t v30;
  os_log_type_t type;
  uint64_t v32;

  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[6];
  v4 = v0[7];
  v5 = v0[5];
  v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  SiriKitEvent.overrides.getter();
  v7 = *(_QWORD *)(v5 + 16);
  outlined init with copy of SiriKitEventOverrides?(v1, v2);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  v9 = v0[10];
  if (v8 == 1)
  {
    outlined destroy of SiriKitEventOverrides?(v0[10]);
    swift_retain();
  }
  else
  {
    v10 = v0[8];
    v11 = v0[6];
    v12 = v0[7];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 32))(v10, v0[9], v11);
    swift_retain();
    v13 = SiriKitEventContext.withOverrides(_:)(v10);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    outlined destroy of SiriKitEventOverrides?(v9);
    swift_release();
    v7 = (uint64_t)v13;
  }
  v0[15] = v7;
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  swift_retain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    type = v16;
    v17 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    v32 = v30;
    *(_DWORD *)v17 = 136315394;
    v18 = SiriKitEvent.debugDescription.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v17 + 12) = 2080;
    swift_retain();
    v20 = SiriKitEventContext.description.getter();
    v22 = v21;
    swift_release();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v15, type, "Dispatching async event to sinks: %s with context: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v30, -1, -1);
    MEMORY[0x1B5E44758](v17, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
  }

  v24 = v0[12];
  v23 = v0[13];
  v25 = v0[11];
  v26 = v0[4];
  type metadata accessor for IntentLoggingEventSink();
  swift_initStaticObject();
  specialized IntentLoggingEventSink.receive(_:_:)(v26);
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v0[16] = v27;
  v27(v23, v25);
  if (one-time initialization token for instance != -1)
    swift_once();
  v28 = (_QWORD *)swift_task_alloc();
  v0[17] = v28;
  *v28 = v0;
  v28[1] = InvocationScopedSiriKitEventSender.sendAsync(_:);
  return TaskLoggingEventSink.receiveAsync(_:_:)(v0[4], v7);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t InvocationScopedSiriKitEventSender.sendAsync(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for SiriKitEventOverrides();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v4 = type metadata accessor for OSSignpostID();
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t outlined init with copy of SiriKitEventOverrides?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *SiriKitEventContext.withOverrides(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;

  v2 = v1;
  v4 = type metadata accessor for SiriKitEventOverrides();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v27 - v9;
  v11 = SiriKitEventOverrides.resultCandidateId.getter();
  if (v12)
  {
    v13 = v11;
    v14 = v12;
    if ((v11 != 12589 || v12 != 0xE200000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v21(v10, a1, v4);
      v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v10, v4);
      v21(v8, a1, v4);
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v10, a1, v4);
  SiriKitEventOverrides.taskId.getter();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v10, v4);
  swift_bridgeObjectRelease();
  v15(v8, a1, v4);
  if (v17)
  {
    v14 = 0;
    v13 = 0;
LABEL_11:
    v18(v8, v4);
    goto LABEL_12;
  }
  SiriKitEventOverrides.interactionId.getter();
  v20 = v19;
  v18(v8, v4);
  swift_bridgeObjectRelease();
  if (!v20)
  {
    swift_bridgeObjectRelease();
    swift_retain();
    return v2;
  }
  v14 = 0;
  v13 = 0;
LABEL_12:
  swift_retain();
  v22 = SiriKitEventOverrides.interactionId.getter();
  v24 = v23;
  swift_allocObject();
  v25 = specialized SiriKitEventContext.init(context:interactionId:resultCandidateId:)(v2, v22, v24, v13, v14);
  swift_release();
  return v25;
}

_QWORD *specialized SiriKitEventContext.init(context:interactionId:resultCandidateId:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;

  v5[2] = a4;
  v5[3] = a5;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a1 + 4), (uint64_t)(v5 + 4));
  v5[9] = a1[9];
  v9 = a1[11];
  v5[10] = a1[10];
  v5[11] = v9;
  if (!a3)
  {
    a2 = a1[12];
    a3 = a1[13];
    swift_bridgeObjectRetain();
  }
  v5[12] = a2;
  v5[13] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t outlined destroy of SiriKitEventOverrides?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized IntentLoggingEventSink.receive(_:_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int *v64;
  void *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  char v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  BOOL v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  void *v93;
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  id v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint8_t *v115;
  int *v116;
  void *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  id v130;
  int *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  void (*v136)(char *, uint64_t);
  char v137;
  char *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  Swift::String v142;
  Swift::String v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void *v147;
  Swift::String v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  void *v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  uint64_t v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(char *, _QWORD, uint64_t);
  char v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, uint64_t);
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  Swift::String v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  _OWORD v214[2];
  __int128 v215;

  v2 = v1;
  v209 = *v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  MEMORY[0x1E0C80A78](v4);
  v201 = (char *)&v187 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SiriKitConfirmationState();
  v211 = *(_QWORD *)(v6 - 8);
  v212 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v202 = (char *)&v187 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v210 = (uint64_t)&v187 - v9;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v208 = (uint64_t)&v187 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v213 = (char *)&v187 - v15;
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v187 - v16;
  v18 = type metadata accessor for SiriKitEventPayload();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v199 = (char *)&v187 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v187 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v195 = (uint64_t)&v187 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v194 = (char *)&v187 - v28;
  MEMORY[0x1E0C80A78](v27);
  v207 = (uint64_t)&v187 - v29;
  v30 = type metadata accessor for ActivityType();
  v203 = *(_QWORD *)(v30 - 8);
  v204 = v30;
  v31 = MEMORY[0x1E0C80A78](v30);
  v205 = (char *)&v187 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v192 = (char *)&v187 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v193 = (char *)&v187 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v196 = (char *)&v187 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v197 = (char *)&v187 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v43 = (char *)&v187 - v42;
  v44 = MEMORY[0x1E0C80A78](v41);
  v198 = (char *)&v187 - v45;
  MEMORY[0x1E0C80A78](v44);
  v206 = (uint64_t)&v187 - v46;
  SiriKitEvent.payload.getter();
  v47 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v23, v18);
  if (v47 == *MEMORY[0x1E0D9B1B8])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v18);
    v48 = *(void **)v23;
    swift_bridgeObjectRelease();
    SiriKitEvent.timestamp.getter();
    IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(v48, (uint64_t)v17, 0x53746E65746E692ELL, 0xEE00646574726174);

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
  v200 = v18;
  v191 = a1;
  v187 = v2;
  v188 = v17;
  v189 = v11;
  v190 = v10;
  if (v47 == *MEMORY[0x1E0D9B230])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v200);
    v50 = *(void **)v23;
    v51 = (void *)*((_QWORD *)v23 + 1);
    v52 = *((_QWORD *)v23 + 4);
    v53 = *((_QWORD *)v23 + 5);
    v54 = *((_QWORD *)v23 + 6);
    v55 = v23[56];
    swift_bridgeObjectRelease();
    v56 = v213;
    SiriKitEvent.timestamp.getter();
    if (v51)
    {
      LODWORD(v211) = v55;
      v212 = v54;
      v57 = v51;
      v58 = objc_msgSend(v57, sel_intentId);
      if (v58)
      {
        v59 = v58;
        v60 = v52;
        v61 = v53;
        v62 = v50;
        v208 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v210 = v63;

      }
      else
      {
        v60 = v52;
        v61 = v53;
        v62 = v50;
        v208 = 0;
        v210 = 0;
      }
      v88 = v189;
      v102 = v188;
      v90 = v190;
      (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v188, v56, v190);
      v103 = (*(unsigned __int8 *)(v88 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
      v104 = (v12 + v103 + 7) & 0xFFFFFFFFFFFFFFF8;
      v105 = swift_allocObject();
      *(_QWORD *)(v105 + 16) = v60;
      *(_QWORD *)(v105 + 24) = v61;
      v106 = v212;
      *(_QWORD *)(v105 + 32) = v57;
      *(_QWORD *)(v105 + 40) = v106;
      *(_BYTE *)(v105 + 48) = v211;
      *(_QWORD *)(v105 + 56) = v62;
      v107 = v105 + v103;
      v56 = v213;
      (*(void (**)(unint64_t, char *, uint64_t))(v88 + 32))(v107, v102, v90);
      *(_QWORD *)(v105 + v104) = v209;
      v108 = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v208, v210, 0xD000000000000016, 0x80000001B4EFDD40, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleDisambiguationOffered(intent:parameterName:multicardinalValueIndex:disambiguationItems:now:context:));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.instrumentation);
      v85 = Logger.logObject.getter();
      v86 = static os_log_type_t.error.getter();
      v87 = os_log_type_enabled(v85, v86);
      v88 = v189;
      if (v87)
      {
        v89 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v89 = 0;
        _os_log_impl(&dword_1B4BE6000, v85, v86, "Intent is nil, not sending handleDisambiguationOffered event.", v89, 2u);
        MEMORY[0x1B5E44758](v89, -1, -1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v90 = v190;
    }
    return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v56, v90);
  }
  if (v47 != *MEMORY[0x1E0D9B210])
  {
    if (v47 == *MEMORY[0x1E0D9B200])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v200);
      v78 = (void *)*((_QWORD *)v23 + 4);
      swift_bridgeObjectRelease();
      v79 = *((_QWORD *)v23 + 7);
      v80 = *((_QWORD *)v23 + 8);
      v81 = *((_QWORD *)v23 + 9);
      v82 = v23[80];
      outlined init with take of Any(v23, v214);
      v83 = (uint64_t)v188;
      SiriKitEvent.timestamp.getter();
      IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(v78, v79, v80, v81, v82, (uint64_t)v214, v83, 0xD000000000000014, 0x80000001B4EFDD00);
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v83, v190);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v214);
    }
    v91 = (uint64_t)v188;
    if (v47 == *MEMORY[0x1E0D9B1E8])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v200);
      v92 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (confirmationState: SiriKitConfirmationState, intent: INIntent?, taskName: String?, parameterName: String, confirmedItem: Any?, multicardinalIndex: Int?));
      v93 = *(void **)&v23[v92[12]];
      swift_bridgeObjectRelease();
      v94 = (uint64_t *)&v23[v92[20]];
      v95 = v94[1];
      v210 = *v94;
      v213 = &v23[v92[24]];
      v96 = &v23[v92[28]];
      v97 = *(_QWORD *)v96;
      v98 = v96[8];
      v100 = v211;
      v99 = v212;
      v101 = (uint64_t)v202;
      (*(void (**)(char *, char *, uint64_t))(v211 + 32))(v202, v23, v212);
      SiriKitEvent.timestamp.getter();
      IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(v93, v210, v95, v97, v98, v101, v91, 0xD000000000000013, 0x80000001B4EFDCE0);
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v91, v190);
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v101, v99);
      return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v213, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    if (v47 == *MEMORY[0x1E0D9B1D0])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v200);
      v116 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intent: INIntent, app: App?, launchAppBehavior: LaunchAppBehavior?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
      v117 = *(void **)&v23[v116[12]];
      swift_release();
      v118 = (uint64_t)&v23[v116[20]];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v119 = &v23[v116[36]];
      v120 = v203;
      v121 = v23;
      v122 = v204;
      (*(void (**)(uint64_t, char *, uint64_t))(v203 + 32))(v206, v121, v204);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v118, v207, &demangling cache variable for type metadata for LaunchAppBehavior?);
      v123 = &demangling cache variable for type metadata for SiriKitReliabilityCodes?;
      v124 = (uint64_t)v119;
      goto LABEL_35;
    }
    v120 = v203;
    if (v47 == *MEMORY[0x1E0D9B1F8])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v200);
      v131 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, parameterName: String, descriptionCode: Int?, flowActivity: FlowActivity?, launchAppBehavior: LaunchAppBehavior?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
      swift_release();
      v117 = *(void **)&v23[v131[16]];
      swift_bridgeObjectRelease();
      v132 = &v23[v131[28]];
      v133 = (uint64_t)&v23[v131[32]];
      swift_bridgeObjectRelease();
      v134 = (uint64_t)&v23[v131[40]];
      v135 = v23;
      v122 = v204;
      (*(void (**)(uint64_t, char *, uint64_t))(v120 + 32))(v206, v135, v204);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v133, v207, &demangling cache variable for type metadata for LaunchAppBehavior?);
      outlined destroy of ReferenceResolutionClientProtocol?(v134, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v123 = &demangling cache variable for type metadata for FlowActivity?;
      v124 = (uint64_t)v132;
LABEL_35:
      outlined destroy of ReferenceResolutionClientProtocol?(v124, v123);
      (*(void (**)(char *, _QWORD, uint64_t))(v120 + 104))(v205, *MEMORY[0x1E0D9B6D0], v122);
      lazy protocol witness table accessor for type ActivityType and conformance ActivityType();
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v214[0] == v215)
      {
        swift_bridgeObjectRelease_n();
        v136 = *(void (**)(char *, uint64_t))(v120 + 8);
        v136(v205, v122);
      }
      else
      {
        v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v136 = *(void (**)(char *, uint64_t))(v120 + 8);
        v136(v205, v122);
        if ((v137 & 1) == 0)
        {

          outlined destroy of ReferenceResolutionClientProtocol?(v207, &demangling cache variable for type metadata for LaunchAppBehavior?);
          return ((uint64_t (*)(uint64_t, uint64_t))v136)(v206, v122);
        }
      }
      SiriKitEvent.timestamp.getter();
      *(_QWORD *)&v214[0] = 46;
      *((_QWORD *)&v214[0] + 1) = 0xE100000000000000;
      v138 = v199;
      SiriKitEvent.payload.getter();
      v139 = SiriKitEventPayload.description.getter();
      v141 = v140;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v138, v200);
      v142._countAndFlagsBits = v139;
      v142._object = v141;
      String.append(_:)(v142);
      swift_bridgeObjectRelease();
      v143._countAndFlagsBits = 11816;
      v143._object = (void *)0xE200000000000000;
      String.append(_:)(v143);
      v144 = v206;
      v145 = ActivityType.rawValue.getter();
      v147 = v146;
      v136((char *)v144, v122);
      v148._countAndFlagsBits = v145;
      v148._object = v147;
      String.append(_:)(v148);
      swift_bridgeObjectRelease();
      v149 = v214[0];
      v150 = type metadata accessor for SiriKitReliabilityCodes();
      v151 = (uint64_t)v201;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v201, 1, 1, v150);
      v152 = v207;
      IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(v117, v207, v91, v149, *((unint64_t *)&v149 + 1), v151);

      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v151, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v91, v190);
      return outlined destroy of ReferenceResolutionClientProtocol?(v152, &demangling cache variable for type metadata for LaunchAppBehavior?);
    }
    if (v47 == *MEMORY[0x1E0D9B208])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v200);
      v153 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, descriptionCode: Int?, flowActivity: FlowActivity?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
      swift_release();
      v154 = *(void **)&v23[v153[16]];
      swift_bridgeObjectRelease();
      v155 = v204;
      (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v198, v23, v204);
      (*(void (**)(char *, _QWORD, uint64_t))(v120 + 104))(v43, *MEMORY[0x1E0D9B6D8], v155);
      lazy protocol witness table accessor for type ActivityType and conformance ActivityType();
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v214[0] == v215)
      {
        swift_bridgeObjectRelease_n();
        v156 = *(void (**)(char *, uint64_t))(v120 + 8);
        v157 = v204;
        v156(v43, v204);
      }
      else
      {
        v163 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v156 = *(void (**)(char *, uint64_t))(v120 + 8);
        v157 = v204;
        v156(v43, v204);
        if ((v163 & 1) == 0)
        {
          v156(v198, v157);

          goto LABEL_57;
        }
      }
      v164 = type metadata accessor for LaunchAppBehavior();
      v165 = (uint64_t)v194;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(v194, 1, 1, v164);
      v166 = v154;
      SiriKitEvent.timestamp.getter();
      v167 = type metadata accessor for SiriKitReliabilityCodes();
      v168 = (uint64_t)v201;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 56))(v201, 1, 1, v167);
      IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(v154, v165, v91, 0xD000000000000020, 0x80000001B4EFDCB0, v168);

      outlined destroy of ReferenceResolutionClientProtocol?(v168, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v91, v190);
      outlined destroy of ReferenceResolutionClientProtocol?(v165, &demangling cache variable for type metadata for LaunchAppBehavior?);
      v156(v198, v157);
LABEL_57:
      v183 = (uint64_t)&v23[v153[24]];
      v184 = v153[32];
      goto LABEL_58;
    }
    if (v47 != *MEMORY[0x1E0D9B1C8])
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v23, v200);
    (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v200);
    v158 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, descriptionCode: Int?, flowActivity: FlowActivity?, launchAppBehavior: LaunchAppBehavior?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
    swift_release();
    v213 = *(char **)&v23[v158[16]];
    v159 = (uint64_t)&v23[v158[28]];
    swift_bridgeObjectRelease();
    v160 = v204;
    (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v197, v23, v204);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v159, v195, &demangling cache variable for type metadata for LaunchAppBehavior?);
    v161 = *(void (**)(char *, _QWORD, uint64_t))(v120 + 104);
    v161(v196, *MEMORY[0x1E0D9B6E8], v160);
    lazy protocol witness table accessor for type ActivityType and conformance ActivityType();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v214[0] == v215)
      v162 = 1;
    else
      v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v169 = v193;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v171 = v203;
    v170 = v204;
    v172 = *(void (**)(char *, uint64_t))(v203 + 8);
    v172(v196, v204);
    (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v169, v197, v170);
    if ((v162 & 1) == 0)
    {
      v173 = v192;
      v161(v192, *MEMORY[0x1E0D9B6D0], v170);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v214[0] != v215)
      {
        v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v186 = v204;
        v172(v173, v204);
        v172(v193, v186);
        if ((v185 & 1) == 0)
        {

          v182 = v195;
          v176 = v197;
          goto LABEL_55;
        }
LABEL_54:
        v174 = v213;
        v175 = v213;
        SiriKitEvent.timestamp.getter();
        *(_QWORD *)&v214[0] = 0;
        *((_QWORD *)&v214[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v214[0] = 0xD000000000000011;
        *((_QWORD *)&v214[0] + 1) = 0x80000001B4EFDC90;
        v176 = v197;
        v177._countAndFlagsBits = ActivityType.rawValue.getter();
        String.append(_:)(v177);
        swift_bridgeObjectRelease();
        v178 = v214[0];
        v179 = type metadata accessor for SiriKitReliabilityCodes();
        v180 = (uint64_t)v201;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 56))(v201, 1, 1, v179);
        v181 = v174;
        v182 = v195;
        IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(v181, v195, v91, v178, *((unint64_t *)&v178 + 1), v180);

        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v180, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v91, v190);
LABEL_55:
        outlined destroy of ReferenceResolutionClientProtocol?(v182, &demangling cache variable for type metadata for LaunchAppBehavior?);
        v172(v176, v204);
        v183 = (uint64_t)&v23[v158[24]];
        v184 = v158[36];
LABEL_58:
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v23[v184], &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        return outlined destroy of ReferenceResolutionClientProtocol?(v183, &demangling cache variable for type metadata for FlowActivity?);
      }
      swift_bridgeObjectRelease_n();
      v170 = v204;
      v172(v173, v204);
      v169 = v193;
    }
    v172(v169, v170);
    goto LABEL_54;
  }
  (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v200);
  v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (confirmationState: SiriKitConfirmationState, intent: INIntent?, taskName: String?, parameterName: String, multicardinalIndex: Int?));
  v65 = *(void **)&v23[v64[12]];
  swift_bridgeObjectRelease();
  v66 = &v23[v64[20]];
  v68 = *(_QWORD *)v66;
  v67 = (char *)*((_QWORD *)v66 + 1);
  v69 = &v23[v64[24]];
  v70 = *(_QWORD *)v69;
  v71 = v69[8];
  (*(void (**)(uint64_t, char *, uint64_t))(v211 + 32))(v210, v23, v212);
  v72 = v208;
  SiriKitEvent.timestamp.getter();
  if (v65)
  {
    v213 = v67;
    v73 = v65;
    v74 = objc_msgSend(v73, sel_intentId);
    if (v74)
    {
      v75 = v74;
      v76 = v71;
      v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v207 = v77;

    }
    else
    {
      v76 = v71;
      v206 = 0;
      v207 = 0;
    }
    v114 = v189;
    v125 = v188;
    v113 = v190;
    (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v188, v72, v190);
    v126 = (*(unsigned __int8 *)(v114 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
    v127 = (v12 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
    v128 = swift_allocObject();
    *(_QWORD *)(v128 + 16) = v73;
    *(_QWORD *)(v128 + 24) = v68;
    *(_QWORD *)(v128 + 32) = v213;
    *(_QWORD *)(v128 + 40) = v70;
    *(_BYTE *)(v128 + 48) = v76;
    v129 = v128 + v126;
    v72 = v208;
    (*(void (**)(unint64_t, char *, uint64_t))(v114 + 32))(v129, v125, v113);
    *(_QWORD *)(v128 + v127) = v209;
    v130 = v73;
    swift_bridgeObjectRetain();
    specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v206, v207, 0xD000000000000015, 0x80000001B4EFDD20, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleDisambiguationResult(intent:parameterName:multicardinalIndexValue:sirikitConfirmationState:now:context:));
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v109 = type metadata accessor for Logger();
    __swift_project_value_buffer(v109, (uint64_t)static Logger.instrumentation);
    v110 = Logger.logObject.getter();
    v111 = static os_log_type_t.error.getter();
    v112 = os_log_type_enabled(v110, v111);
    v113 = v190;
    v114 = v189;
    if (v112)
    {
      v115 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v115 = 0;
      _os_log_impl(&dword_1B4BE6000, v110, v111, "Intent is nil, not sending handleDisambiguationResult event.", v115, 2u);
      MEMORY[0x1B5E44758](v115, -1, -1);
    }
    swift_bridgeObjectRelease();

  }
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v72, v113);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v211 + 8))(v210, v212);
}

uint64_t TaskLoggingEventSink.receiveAsync(_:_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 72);
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_log_type_t type;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 88);
  SiriKitEvent.overrides.getter();
  v2 = type metadata accessor for SiriKitEventOverrides();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 88);
  if (v4 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for SiriKitEventOverrides?);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = SiriKitEventOverrides.taskId.getter();
    v7 = v8;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  }
  v9 = specialized static TaskLoggingEventSink.computeEffectiveTask(_:_:)(*(_QWORD *)(v0 + 104), v6, v7);
  *(_QWORD *)(v0 + 112) = v9;
  swift_bridgeObjectRelease();
  swift_release();
  if (v9)
  {
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v10;
    *v10 = v0;
    v10[1] = TaskLoggingEventSink.receiveAsync(_:_:);
    return TaskLoggingEventSink.receiveAsync(_:_:_:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), v9);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 64);
    if (v15)
    {
      type = v14;
      v17 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v25 = v23;
      *(_DWORD *)v17 = 136315394;
      *(_QWORD *)(v0 + 40) = v16;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B438], MEMORY[0x1E0D9B450]);
      v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v17 + 12) = 2080;
      swift_retain();
      v20 = SiriKitEventContext.description.getter();
      v22 = v21;
      swift_release();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v13, type, "TaskLoggingEventSink - No active task, dropping event: %s context: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v23, -1, -1);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }

    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 96);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 32);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v3 = result;
    if (!result)
      goto LABEL_6;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v3)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 104) = v3;
      return swift_task_switch();
    }
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    v3 = MEMORY[0x1B5E43B94](0, v2);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(v2 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t TaskLoggingEventSink.receiveAsync(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized static TaskLoggingEventSink.computeEffectiveTask(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v12;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3
    || a1
    && (*(_QWORD *)(a1 + 16) == a2 ? (v10 = *(_QWORD *)(a1 + 24) == a3) : (v10 = 0),
        v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    static Date.now.getter();
    type metadata accessor for FlowTask(0);
    a1 = swift_allocObject();
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = a3;
    *(_WORD *)(a1 + 32) = 256;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v9, v6);
  }
  return a1;
}

uint64_t TaskLoggingEventSink.receiveAsync(_:_:_:)()
{
  uint64_t v0;

  TaskService.update(task:state:)(*(_QWORD *)(v0 + 544), 2);
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  __CFString *v33;
  __CFString *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __CFString *v49;
  uint64_t v50;
  __CFString *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint64_t v77;

  v1 = *(_QWORD *)(v0 + 528);
  swift_release();
  *(_QWORD *)(v0 + 336) = v1;
  v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 496);
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 424);
  SiriKitEvent.payload.getter();
  v5 = v2(v3, v4);
  v6 = *(_QWORD *)(v0 + 424);
  v7 = &unk_1ED510000;
  if (v5 == *MEMORY[0x1E0D9B1D8])
  {
    v8 = *(_DWORD *)(v0 + 556);
    v9 = *(_DWORD *)(v0 + 552);
    v10 = *(_QWORD *)(v0 + 488);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 432) + 96))(*(_QWORD *)(v0 + 440), v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v0 + 336);
    if (v9 != v8 && (v10 & 0x1FFFFFFFFLL) != 1 && *(_BYTE *)(v11 + 33))
      goto LABEL_14;
  }
  else
  {
    v12 = *(_DWORD *)(v0 + 556);
    v13 = *(_DWORD *)(v0 + 552);
    v14 = *(_QWORD *)(v0 + 488);
    (*(void (**)(_QWORD, uint64_t))(v0 + 504))(*(_QWORD *)(v0 + 440), v6);
    if (v13 != v12 && (v14 & 0x1FFFFFFFFLL) != 1)
      goto LABEL_14;
    v11 = *(_QWORD *)(v0 + 336);
  }
  v15 = *(_QWORD *)(v0 + 400);
  v16 = type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v17 + 24) = v11;
  *(_QWORD *)(v0 + 40) = v16;
  *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TaskLoggingEventSink.SiriKitEventMetricsState and conformance TaskLoggingEventSink.SiriKitEventMetricsState, (uint64_t (*)(uint64_t))type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState, (uint64_t)&protocol conformance descriptor for TaskLoggingEventSink.SiriKitEventMetricsState);
  *(_QWORD *)(v0 + 16) = v17;
  swift_retain();
  swift_retain();
  static Metrics.setMetricsState(_:)();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.instrumentation);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v77 = v22;
    *(_DWORD *)v21 = 136315138;
    swift_beginAccess();
    v23 = *(_QWORD *)(v0 + 336);
    v24 = *(_QWORD *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v7 = &unk_1ED510000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v19, v20, "TaskLoggingEventSink - Metrics.current has been updated for taskId: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    MEMORY[0x1B5E44758](v21, -1, -1);
  }

LABEL_14:
  v26 = SiriKitEvent.flowStateType.getter();
  if ((v26 & 0x100000000) != 0)
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.debug.getter();
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD *)(v0 + 480);
    if (v38)
    {
      v40 = swift_slowAlloc();
      v75 = swift_slowAlloc();
      v77 = v75;
      *(_DWORD *)v40 = 136315650;
      *(_QWORD *)(v0 + 296) = v39;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B438], MEMORY[0x1E0D9B450]);
      v41 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v40 + 12) = 2080;
      swift_retain();
      v43 = SiriKitEventContext.description.getter();
      v45 = v44;
      swift_release();
      *(_QWORD *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v40 + 22) = 2080;
      v7 = (_QWORD *)&unk_1ED510000;
      swift_beginAccess();
      swift_retain();
      v46 = FlowTask.description.getter();
      v48 = v47;
      swift_release();
      *(_QWORD *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v36, v37, "TaskLoggingEventSink - Routing event: %s context: %s task: %s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v75, -1, -1);
      MEMORY[0x1B5E44758](v40, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }

  }
  else
  {
    v27 = v26;
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v76 = v30;
      v31 = swift_slowAlloc();
      v74 = swift_slowAlloc();
      v77 = v74;
      *(_DWORD *)v31 = 136315906;
      if (v27 > 0xCF)
      {
        v33 = CFSTR("FLOWSTATETYPE_UNKNOWN");
        v34 = CFSTR("FLOWSTATETYPE_UNKNOWN");
      }
      else
      {
        v32 = (int)v27;
        v33 = off_1E6856AF8[v32];
        v34 = off_1E6857178[v32];
      }
      v49 = v33;
      v50 = *(_QWORD *)(v0 + 480);
      v51 = v34;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v54 = v53;

      *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      *(_QWORD *)(v0 + 208) = v50;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B438], MEMORY[0x1E0D9B450]);
      v55 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 22) = 2080;
      swift_retain();
      v57 = SiriKitEventContext.description.getter();
      v59 = v58;
      swift_release();
      *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 32) = 2080;
      swift_beginAccess();
      swift_retain();
      v60 = FlowTask.description.getter();
      v62 = v61;
      swift_release();
      *(_QWORD *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v29, v76, "TaskLoggingEventSink - Routing task step: %s for event: %s context: %s task: %s", (uint8_t *)v31, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v74, -1, -1);
      MEMORY[0x1B5E44758](v31, -1, -1);

      v7 = &unk_1ED510000;
    }
    else
    {
      swift_release_n();
      swift_release_n();

    }
  }
  v63 = *(unsigned __int8 *)(v0 + 560);
  v64 = *(_QWORD *)(v0 + 480);
  v65 = *(_QWORD **)(v0 + 400);
  swift_beginAccess();
  v66 = *(_QWORD *)(v0 + 336);
  swift_retain();
  TaskLoggingEventSink.route(_:_:_:)(v64, v65, v66);
  swift_release();
  if (v63 == 1)
  {
    if (v7[303] != -1)
      swift_once();
    v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.instrumentation);
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      _os_log_impl(&dword_1B4BE6000, v68, v69, "TaskLoggingEventSink - updating task state to .ended because isLastTaskStep!", v70, 2u);
      MEMORY[0x1B5E44758](v70, -1, -1);
    }
    v71 = *(_QWORD *)(v0 + 400);

    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v71 + 72);
    *(_QWORD *)(v0 + 544) = *(_QWORD *)(v0 + 336);
    v72 = one-time initialization token for shared;
    swift_retain();
    if (v72 != -1)
      swift_once();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 528) = TaskService.update(task:state:)(*(_QWORD *)(v0 + 520), 1);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  uint64_t v11;
  __CFString *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  int v83;
  uint64_t v84;
  Class isa;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  __CFString *v107;
  __CFString *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  _BOOL4 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  __CFString *v124;
  uint64_t v125;
  __CFString *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v149;
  os_log_type_t v150;
  uint64_t v151;
  os_log_type_t type;
  uint64_t v153;
  os_log_type_t v154;
  os_log_type_t v155;
  uint64_t v156;
  uint64_t v157;
  os_log_t log;
  uint64_t v159;

  v1 = SiriKitEvent.flowStateType.getter();
  if ((v1 & 0x100000000) == 0)
  {
    v2 = v1;
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v153 = swift_slowAlloc();
      v159 = v153;
      *(_DWORD *)v6 = 136315906;
      v155 = v5;
      if (v2 > 0xCF)
      {
        v8 = CFSTR("FLOWSTATETYPE_UNKNOWN");
        v9 = CFSTR("FLOWSTATETYPE_UNKNOWN");
      }
      else
      {
        v7 = (int)v2;
        v8 = off_1E68550F8[v7];
        v9 = off_1E6855778[v7];
      }
      v10 = v8;
      v11 = *(_QWORD *)(v0 + 392);
      v12 = v9;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;

      *(_QWORD *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      *(_QWORD *)(v0 + 360) = v11;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B438], MEMORY[0x1E0D9B450]);
      v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v6 + 22) = 2080;
      swift_retain();
      v18 = SiriKitEventContext.description.getter();
      v20 = v19;
      swift_release();
      *(_QWORD *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v6 + 32) = 2080;
      swift_retain();
      v21 = FlowTask.description.getter();
      v23 = v22;
      swift_release();
      *(_QWORD *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v4, v155, "TaskLoggingEventSink - receiveAsync source event with task step: %s for event: %s context: %s task: %s", (uint8_t *)v6, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v153, -1, -1);
      MEMORY[0x1B5E44758](v6, -1, -1);

    }
    else
    {
      swift_release_n();
      swift_release_n();
      swift_release_n();

    }
  }
  v24 = *(_QWORD *)(v0 + 408);
  v25 = *(_QWORD *)(v0 + 392);
  *(_QWORD *)(v0 + 336) = v24;
  swift_retain();
  v26 = specialized static TaskLoggingEventSink.translateStartEvent(_:_:)(v25, v24);
  *(_QWORD *)(v0 + 480) = v26;
  v27 = SiriKitEvent.flowStateType.getter();
  *(_QWORD *)(v0 + 488) = v27;
  v28 = v27 & 0x1FFFFFFFFLL;
  if ((v27 & 0x1FFFFFFFFLL) == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(v0 + 408) + 32) && *(_BYTE *)(*(_QWORD *)(v0 + 408) + 32) == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
    {
LABEL_15:
      v31 = *(_QWORD *)(v0 + 464);
      v30 = *(uint64_t **)(v0 + 472);
      v32 = *(_QWORD *)(v0 + 456);
      type metadata accessor for CoreAnalyticsService();
      static CoreAnalyticsService.instance.getter();
      *v30 = v26;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v31 + 104))(v30, *MEMORY[0x1E0D9B348], v32);
      swift_retain();
      CoreAnalyticsService.sendReliabilityEvent(event:file:line:function:)();
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v30, v32);
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.instrumentation);
      swift_retain_n();
      swift_retain_n();
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc();
        v156 = swift_slowAlloc();
        v159 = v156;
        *(_DWORD *)v36 = 136315650;
        type = v35;
        *(_QWORD *)(v0 + 312) = v26;
        type metadata accessor for SiriKitEvent();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B438], MEMORY[0x1E0D9B450]);
        v37 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v36 + 12) = 2080;
        swift_retain();
        v39 = SiriKitEventContext.description.getter();
        v41 = v40;
        swift_release();
        *(_QWORD *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v36 + 22) = 2080;
        swift_beginAccess();
        swift_retain();
        v42 = FlowTask.description.getter();
        v44 = v43;
        swift_release();
        *(_QWORD *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v34, type, "TaskLoggingEventSink - Task already started, ignoring first step event: %s context: %s task: %s", (uint8_t *)v36, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v156, -1, -1);
        v45 = v36;
LABEL_35:
        MEMORY[0x1B5E44758](v45, -1, -1);

        swift_release();
        goto LABEL_81;
      }
      goto LABEL_28;
    }
  }
  v46 = SiriKitEvent.flowStateType.getter();
  log = (os_log_t)(v0 + 336);
  if ((v46 & 0x100000000) != 0
    || ((v47 = 1, v46 > 5) || ((1 << v46) & 0x34) == 0) && (_DWORD)v46 != 128)
  {
    v47 = 0;
  }
  *(_BYTE *)(v0 + 560) = v47;
  v48 = *(_QWORD *)(v0 + 448);
  v49 = *(_QWORD *)(v0 + 424);
  v50 = *(_QWORD *)(v0 + 432);
  v51 = SiriKitEvent.flowStateType.getter();
  SiriKitEvent.payload.getter();
  v52 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 88);
  *(_QWORD *)(v0 + 496) = v52;
  *(_DWORD *)(v0 + 552) = v52(v48, v49);
  *(_DWORD *)(v0 + 556) = *MEMORY[0x1E0D9B240];
  v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  *(_QWORD *)(v0 + 504) = v53;
  v53(v48, v49);
  if ((v47 & 1) == 0)
    goto LABEL_37;
  v54 = v51 & 0x1FFFFFFFFLL;
  if (*((_BYTE *)log->isa + 32) && *((_BYTE *)log->isa + 32) != 1)
  {
    swift_bridgeObjectRelease();
    if (v54 != 4)
      goto LABEL_31;
LABEL_37:
    if (v28 == 1)
    {
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.instrumentation);
      v71 = Logger.logObject.getter();
      v72 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v73 = 0;
        _os_log_impl(&dword_1B4BE6000, v71, v72, "TaskLoggingEventSink - updating task state to .ongoing because isFirstTaskStep!", v73, 2u);
        MEMORY[0x1B5E44758](v73, -1, -1);
      }
      v74 = *(_QWORD *)(v0 + 400);

      *(_QWORD *)(v0 + 512) = *(_QWORD *)(v74 + 72);
      *(_QWORD *)(v0 + 520) = *(_QWORD *)(v0 + 336);
      v75 = one-time initialization token for shared;
      swift_retain();
      if (v75 == -1)
        return swift_task_switch();
      goto LABEL_82;
    }
    v76 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 496);
    v77 = *(_QWORD *)(v0 + 440);
    v78 = *(_QWORD *)(v0 + 424);
    SiriKitEvent.payload.getter();
    v79 = v76(v77, v78);
    v80 = *(_QWORD *)(v0 + 424);
    v81 = &unk_1ED510000;
    if (v79 == *MEMORY[0x1E0D9B1D8])
    {
      v82 = *(_DWORD *)(v0 + 556);
      v83 = *(_DWORD *)(v0 + 552);
      v84 = *(_QWORD *)(v0 + 488);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 432) + 96))(*(_QWORD *)(v0 + 440), v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isa = *(Class *)(v0 + 336);
      if (v83 != v82 && (v84 & 0x1FFFFFFFFLL) != 1 && *((_BYTE *)isa + 33))
        goto LABEL_57;
    }
    else
    {
      v86 = *(_DWORD *)(v0 + 556);
      v87 = *(_DWORD *)(v0 + 552);
      v88 = *(_QWORD *)(v0 + 488);
      (*(void (**)(_QWORD, uint64_t))(v0 + 504))(*(_QWORD *)(v0 + 440), v80);
      if (v87 != v86 && (v88 & 0x1FFFFFFFFLL) != 1)
        goto LABEL_57;
      isa = log->isa;
    }
    v89 = *(_QWORD *)(v0 + 400);
    v90 = type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState();
    v91 = swift_allocObject();
    *(_QWORD *)(v91 + 16) = v89;
    *(_QWORD *)(v91 + 24) = isa;
    *(_QWORD *)(v0 + 40) = v90;
    *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TaskLoggingEventSink.SiriKitEventMetricsState and conformance TaskLoggingEventSink.SiriKitEventMetricsState, (uint64_t (*)(uint64_t))type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState, (uint64_t)&protocol conformance descriptor for TaskLoggingEventSink.SiriKitEventMetricsState);
    *(_QWORD *)(v0 + 16) = v91;
    swift_retain();
    swift_retain();
    static Metrics.setMetricsState(_:)();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v92 = type metadata accessor for Logger();
    __swift_project_value_buffer(v92, (uint64_t)static Logger.instrumentation);
    v93 = Logger.logObject.getter();
    v94 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = (uint8_t *)swift_slowAlloc();
      v96 = swift_slowAlloc();
      v159 = v96;
      *(_DWORD *)v95 = 136315138;
      swift_beginAccess();
      v97 = *((_QWORD *)log->isa + 2);
      v98 = *((_QWORD *)log->isa + 3);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, &v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v81 = &unk_1ED510000;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v93, v94, "TaskLoggingEventSink - Metrics.current has been updated for taskId: %s", v95, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v96, -1, -1);
      MEMORY[0x1B5E44758](v95, -1, -1);
    }

LABEL_57:
    v99 = (unsigned __int8 *)(v0 + 560);
    v100 = SiriKitEvent.flowStateType.getter();
    if ((v100 & 0x100000000) != 0)
    {
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v109 = type metadata accessor for Logger();
      __swift_project_value_buffer(v109, (uint64_t)static Logger.instrumentation);
      swift_retain_n();
      swift_retain_n();
      v110 = Logger.logObject.getter();
      v111 = static os_log_type_t.debug.getter();
      v112 = os_log_type_enabled(v110, v111);
      v113 = *(_QWORD *)(v0 + 480);
      if (v112)
      {
        v114 = swift_slowAlloc();
        v149 = swift_slowAlloc();
        v159 = v149;
        *(_DWORD *)v114 = 136315650;
        *(_QWORD *)(v0 + 296) = v113;
        type metadata accessor for SiriKitEvent();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B438], MEMORY[0x1E0D9B450]);
        v115 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v114 + 12) = 2080;
        swift_retain();
        v117 = SiriKitEventContext.description.getter();
        v119 = v118;
        swift_release();
        *(_QWORD *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v119, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v114 + 22) = 2080;
        swift_beginAccess();
        swift_retain();
        v120 = FlowTask.description.getter();
        v122 = v121;
        swift_release();
        *(_QWORD *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v122, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v110, v111, "TaskLoggingEventSink - Routing event: %s context: %s task: %s", (uint8_t *)v114, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v149, -1, -1);
        v123 = v114;
        v99 = (unsigned __int8 *)(v0 + 560);
        MEMORY[0x1B5E44758](v123, -1, -1);
      }
      else
      {
        swift_release_n();
        swift_release_n();
      }

      v81 = (_QWORD *)&unk_1ED510000;
    }
    else
    {
      v101 = v100;
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v102 = type metadata accessor for Logger();
      __swift_project_value_buffer(v102, (uint64_t)static Logger.instrumentation);
      swift_retain_n();
      swift_retain_n();
      v103 = Logger.logObject.getter();
      v104 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v103, v104))
      {
        v154 = v104;
        v105 = swift_slowAlloc();
        v151 = swift_slowAlloc();
        v159 = v151;
        *(_DWORD *)v105 = 136315906;
        if (v101 > 0xCF)
        {
          v107 = CFSTR("FLOWSTATETYPE_UNKNOWN");
          v108 = CFSTR("FLOWSTATETYPE_UNKNOWN");
        }
        else
        {
          v106 = (int)v101;
          v107 = off_1E6855DF8[v106];
          v108 = off_1E6856478[v106];
        }
        v124 = v107;
        v125 = *(_QWORD *)(v0 + 480);
        v126 = v108;
        v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v129 = v128;

        *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v127, v129, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 12) = 2080;
        *(_QWORD *)(v0 + 208) = v125;
        type metadata accessor for SiriKitEvent();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B438], MEMORY[0x1E0D9B450]);
        v130 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v105 + 22) = 2080;
        swift_retain();
        v132 = SiriKitEventContext.description.getter();
        v134 = v133;
        swift_release();
        *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v134, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v105 + 32) = 2080;
        swift_beginAccess();
        swift_retain();
        v135 = FlowTask.description.getter();
        v137 = v136;
        swift_release();
        *(_QWORD *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v137, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v103, v154, "TaskLoggingEventSink - Routing task step: %s for event: %s context: %s task: %s", (uint8_t *)v105, 0x2Au);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v151, -1, -1);
        MEMORY[0x1B5E44758](v105, -1, -1);

        v81 = &unk_1ED510000;
        v99 = (unsigned __int8 *)(v0 + 560);
      }
      else
      {
        swift_release_n();
        swift_release_n();

      }
    }
    v138 = *v99;
    v139 = *(_QWORD *)(v0 + 480);
    v140 = *(_QWORD **)(v0 + 400);
    swift_beginAccess();
    v141 = *(_QWORD *)(v0 + 336);
    swift_retain();
    TaskLoggingEventSink.route(_:_:_:)(v139, v140, v141);
    swift_release();
    if (v138 != 1)
    {
      swift_release();
      goto LABEL_81;
    }
    if (v81[303] != -1)
      swift_once();
    v142 = type metadata accessor for Logger();
    __swift_project_value_buffer(v142, (uint64_t)static Logger.instrumentation);
    v143 = Logger.logObject.getter();
    v144 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v143, v144))
    {
      v145 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v145 = 0;
      _os_log_impl(&dword_1B4BE6000, v143, v144, "TaskLoggingEventSink - updating task state to .ended because isLastTaskStep!", v145, 2u);
      MEMORY[0x1B5E44758](v145, -1, -1);
    }
    v146 = *(_QWORD *)(v0 + 400);

    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v146 + 72);
    *(_QWORD *)(v0 + 544) = *(_QWORD *)(v0 + 336);
    v147 = one-time initialization token for shared;
    swift_retain();
    if (v147 == -1)
      return swift_task_switch();
LABEL_82:
    swift_once();
    return swift_task_switch();
  }
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0 || v54 == 4)
    goto LABEL_37;
LABEL_31:
  v57 = *(_QWORD *)(v0 + 464);
  v56 = *(uint64_t **)(v0 + 472);
  v58 = *(_QWORD *)(v0 + 456);
  type metadata accessor for CoreAnalyticsService();
  static CoreAnalyticsService.instance.getter();
  *v56 = v26;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v57 + 104))(v56, *MEMORY[0x1E0D9B348], v58);
  swift_retain();
  CoreAnalyticsService.sendReliabilityEvent(event:file:line:function:)();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v57 + 8))(v56, v58);
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  swift_retain_n();
  v34 = Logger.logObject.getter();
  v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v60))
  {
    v61 = swift_slowAlloc();
    v157 = swift_slowAlloc();
    v159 = v157;
    *(_DWORD *)v61 = 136315650;
    v150 = v60;
    *(_QWORD *)(v0 + 272) = v26;
    type metadata accessor for SiriKitEvent();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B438], MEMORY[0x1E0D9B450]);
    v62 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v61 + 12) = 2080;
    swift_retain();
    v64 = SiriKitEventContext.description.getter();
    v66 = v65;
    swift_release();
    *(_QWORD *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v61 + 22) = 2080;
    swift_beginAccess();
    swift_retain();
    v67 = FlowTask.description.getter();
    v69 = v68;
    swift_release();
    *(_QWORD *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v34, v150, "TaskLoggingEventSink - Task already ended, ignoring last step event: %s context: %s task: %s", (uint8_t *)v61, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v157, -1, -1);
    v45 = v61;
    goto LABEL_35;
  }
LABEL_28:
  swift_release_n();
  swift_release_n();

LABEL_81:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TaskLoggingEventSink.receiveAsync(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[51] = a3;
  v4[52] = v3;
  v4[49] = a1;
  v4[50] = a2;
  v5 = type metadata accessor for SiriKitEventPayload();
  v4[53] = v5;
  v4[54] = *(_QWORD *)(v5 - 8);
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  v6 = type metadata accessor for SiriKitReliabilityEvent();
  v4[57] = v6;
  v4[58] = *(_QWORD *)(v6 - 8);
  v4[59] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized static TaskLoggingEventSink.translateStartEvent(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(uint64_t *, uint64_t);
  int *v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v4 = type metadata accessor for SiriKitEventPayload();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v56 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v56 - v12);
  SiriKitEvent.payload.getter();
  v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v13, v4);
  if (v14 == *MEMORY[0x1E0D9B1D8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v13, v4);
    v16 = *v13;
    v15 = v13[1];
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(a2 + 33) == 1)
    {
      v17 = *MEMORY[0x1E0D9B6C8];
      v18 = type metadata accessor for ActivityType();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v11, v17, v18);
      v64 = v16;
      v65 = v15;
      v62 = 0x203A746365726944;
      v63 = 0xE800000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      {
        v19 = 0x6465737261706E55;
        v20 = 0xEE00746E65746E49;
      }
      else
      {
        swift_bridgeObjectRetain();
        v19 = v16;
        v20 = v15;
      }
      v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, chosenItem: Any?, disambiguationItems: [Any]?, domainContext: FLOWSchemaFLOWDomainContext?, flowActivity: FlowActivity?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
      v40 = (uint64_t *)&v11[v39[12]];
      v41 = v39[16];
      v42 = &v11[v39[20]];
      v43 = &v11[v39[24]];
      v44 = v39[28];
      v45 = v39[32];
      v46 = &v11[v39[36]];
      v47 = &v11[v39[40]];
      v48 = &v11[v39[44]];
      v49 = v39[48];
      v50 = v39[52];
      *v40 = v19;
      v40[1] = v20;
      *(_QWORD *)&v11[v41] = 0;
      v51 = &v11[v50];
      *(_QWORD *)v42 = v16;
      *((_QWORD *)v42 + 1) = v15;
      *(_OWORD *)v43 = 0u;
      *((_OWORD *)v43 + 1) = 0u;
      *(_QWORD *)&v11[v44] = 0;
      *(_QWORD *)&v11[v45] = 0;
      *((_QWORD *)v46 + 4) = 0;
      *(_OWORD *)v46 = 0u;
      *((_OWORD *)v46 + 1) = 0u;
      *(_QWORD *)v47 = 0;
      *((_QWORD *)v47 + 1) = 0;
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 1) = 0;
      *(_OWORD *)&v11[v49] = xmmword_1B4EF2010;
      v52 = *MEMORY[0x1E0D9B308];
      v53 = type metadata accessor for SiriKitReliabilityCodes();
      v54 = *(_QWORD *)(v53 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 104))(v51, v52, v53);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v11, *MEMORY[0x1E0D9B198], v4);
      a1 = SiriKitEvent.withPayload(_:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRelease();
    }
  }
  else if (v14 == *MEMORY[0x1E0D9B228])
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v13, v4);
    swift_bridgeObjectRelease();
    v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, chosenItem: Any?, disambiguationItems: [Any]?, domainContext: FLOWSchemaFLOWDomainContext?, flowActivity: FlowActivity?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
    v22 = &v8[v21[12]];
    v23 = v21[16];
    v24 = &v8[v21[20]];
    v25 = &v8[v21[24]];
    v26 = v21[28];
    v59 = v21[32];
    v60 = v26;
    v27 = &v8[v21[36]];
    v28 = &v8[v21[40]];
    v58 = &v8[v21[44]];
    v29 = &v8[v21[48]];
    v56 = v23;
    v57 = v29;
    v61 = &v8[v21[52]];
    v30 = *MEMORY[0x1E0D9B6C8];
    v31 = type metadata accessor for ActivityType();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v8, v30, v31);
    strcpy(v22, "UnparsedIntent");
    v22[15] = -18;
    *(_QWORD *)&v8[v56] = 0;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *(_OWORD *)v25 = 0u;
    *((_OWORD *)v25 + 1) = 0u;
    *(_QWORD *)&v8[v60] = 0;
    *(_QWORD *)&v8[v59] = 0;
    *((_QWORD *)v27 + 4) = 0;
    *(_OWORD *)v27 = 0u;
    *((_OWORD *)v27 + 1) = 0u;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    v32 = v58;
    *(_QWORD *)v58 = 0;
    *((_QWORD *)v32 + 1) = 0;
    v33 = v57;
    *(_QWORD *)v57 = 0;
    *((_QWORD *)v33 + 1) = 0;
    v34 = *MEMORY[0x1E0D9B2F0];
    v35 = type metadata accessor for SiriKitReliabilityCodes();
    v36 = *(_QWORD *)(v35 - 8);
    v37 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 104))(v61, v34, v35);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v35);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0D9B198], v4);
    a1 = SiriKitEvent.withPayload(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    v38 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
    swift_retain();
    v38(v13, v4);
  }
  return a1;
}

uint64_t lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1B5E44668](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ConversationService.markBusy(doing:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 128);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.ensureJetsamTransaction()(v2);
  OS_dispatch_semaphore.signal()();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  v3 = (void *)SiriEnvironment.currentProcess.getter();
  swift_release();
  v4 = (void *)dispatch thunk of CurrentProcess.idleTracker.getter();

  if (v4)
  {
    v5 = dispatch thunk of IdleTracker.track(name:)();

  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(v1 + 136) = v5;
  return swift_release();
}

uint64_t closure #1 in JetsamHelper.ensureJetsamTransaction()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t aBlock[7];
  uint64_t v71;

  v2 = type metadata accessor for DispatchTimeInterval();
  v68 = *(_QWORD *)(v2 - 8);
  v69 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v67 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v66 = (char *)&v52 - v5;
  v6 = type metadata accessor for DispatchTime();
  v64 = *(_QWORD *)(v6 - 8);
  v65 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v55 = (char *)&v52 - v10;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v61 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  MEMORY[0x1E0C80A78](v11);
  v60 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v58 = *(_QWORD *)(v13 - 8);
  v59 = v13;
  MEMORY[0x1E0C80A78](v13);
  v57 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v56 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v54 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = (uint64_t *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction + 8))
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
    swift_retain();
    v18 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      aBlock[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v53 = (uint64_t)(v27 + 4);
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain();
      v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v18, v26, "os_transaction(%s) begin", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v28, -1, -1);
      v24 = v27;
      goto LABEL_10;
    }
LABEL_11:

    swift_release();
    goto LABEL_12;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  swift_retain();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v18, v19))
    goto LABEL_11;
  v52 = v15;
  v20 = (uint8_t *)swift_slowAlloc();
  v21 = swift_slowAlloc();
  aBlock[0] = v21;
  *(_DWORD *)v20 = 136315138;
  v53 = (uint64_t)v9;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, aBlock);
  v9 = (char *)v53;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  v15 = v52;
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B4BE6000, v18, v19, "os_transaction(%s) bump", v20, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v21, -1, -1);
  v24 = v20;
LABEL_10:
  MEMORY[0x1B5E44758](v24, -1, -1);

LABEL_12:
  String.utf8CString.getter();
  v53 = os_transaction_create();
  swift_release();
  type metadata accessor for OS_dispatch_source();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF938], MEMORY[0x1E0DEF948]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_source.TimerFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  v31 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v32 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v15);
  v52 = v32;
  ObjectType = swift_getObjectType();
  v34 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in JetsamHelper.ensureJetsamTransaction();
  aBlock[5] = v34;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_14;
  v35 = _Block_copy(aBlock);
  swift_retain();
  v36 = v57;
  static DispatchQoS.unspecified.getter();
  v37 = v60;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v35);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v37, v62);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v59);
  swift_release();
  swift_release();
  static DispatchTime.now()();
  v38 = v55;
  DispatchTime.advanced(by:)();
  v64 = *(_QWORD *)(v64 + 8);
  v39 = v9;
  v40 = v65;
  ((void (*)(char *, uint64_t))v64)(v39, v65);
  v41 = v68;
  v42 = v69;
  v43 = *(void (**)(char *, _QWORD, uint64_t))(v68 + 104);
  v44 = v66;
  v43(v66, *MEMORY[0x1E0DEF498], v69);
  v45 = v67;
  *(_QWORD *)v67 = 0;
  v43(v45, *MEMORY[0x1E0DEF480], v42);
  v46 = v52;
  MEMORY[0x1B5E438D0](v38, v44, v45, ObjectType);
  v47 = *(void (**)(char *, uint64_t))(v41 + 8);
  v47(v45, v42);
  v47(v44, v42);
  ((void (*)(char *, uint64_t))v64)(v38, v40);
  OS_dispatch_source.resume()();
  v48 = v63;
  v49 = *v63;
  v50 = v63[1];
  *v63 = v53;
  v48[1] = v46;
  return outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(v49, v50);
}

unint64_t type metadata accessor for OS_dispatch_source()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_source;
  if (!lazy cache variable for type metadata for OS_dispatch_source)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_source);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_source.TimerFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  type metadata accessor for DispatchWorkItemFlags();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_source.TimerFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ConversationService.ActiveTurn.getEagerTask(rcId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eagerTasks);
  swift_beginAccess();
  v6 = *v5;
  if (!*(_QWORD *)(v6 + 16))
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    swift_retain();
  }
  else
  {
    v9 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t protocol witness for DecisionMaking.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:) in conformance DecisionEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;

  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8[13] = a7;
  v8[14] = v7;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a3;
  v8[10] = a4;
  v8[7] = a1;
  v8[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  v8[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecisionEngineResponse?);
  v8[18] = swift_task_alloc();
  v9 = type metadata accessor for DecisionEngineResponse();
  v8[19] = v9;
  v8[20] = *(_QWORD *)(v9 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = type metadata accessor for ConversationHelperInput(0);
  v8[23] = swift_task_alloc();
  type metadata accessor for RemoteConversationTurnData(0);
  v8[24] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v8[25] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release();
  outlined destroy of CamOutput(v1, type metadata accessor for ConversationHelperInput);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol?(v4, v3, &demangling cache variable for type metadata for DecisionEngineResponse?);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v6 = *(_QWORD *)(v0 + 144);
  if (v5 == 1)
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 184), type metadata accessor for ConversationHelperInput);
    outlined destroy of ReferenceResolutionClientProtocol?(v6, &demangling cache variable for type metadata for DecisionEngineResponse?);
  }
  else
  {
    v7 = *(uint64_t **)(v0 + 168);
    v8 = *(uint64_t **)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 64);
    outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 144), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(v7, *v8, v8[1], *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24));
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    if (*v7)
      swift_bridgeObjectRetain();
    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 152) + 24);
    outlined init with copy of ReferenceResolutionClientProtocol?(v11, v10, &demangling cache variable for type metadata for Input?);
    v12 = type metadata accessor for Input();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    v15 = v14(v10, 1, v12);
    v17 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 136);
    if (v15 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 128), &demangling cache variable for type metadata for Input?);
      v18 = type metadata accessor for Siri_Nlu_External_UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
    }
    else
    {
      Input.parseHypothesisId.getter(*(_QWORD *)(v0 + 136));
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v12);
    }
    v19 = *(_QWORD *)(v0 + 120);
    outlined init with copy of ReferenceResolutionClientProtocol?(v11, v19, &demangling cache variable for type metadata for Input?);
    v20 = v14(v19, 1, v12);
    v21 = *(_QWORD *)(v0 + 120);
    if (v20 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for Input?);
    }
    else
    {
      Input.inputOrAlternativesInterpretableAsUniversalAction.getter();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v21, v12);
    }
    v22 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 168);
    v24 = *(_QWORD *)(v0 + 136);
    dispatch thunk of ConversationSELFHelper.emitDecisionEngineDecision(flowHandlerId:parseHypothesisId:isInterpretableAsUniversalAction:isExistingFlowSelected:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
    outlined destroy of CamOutput(v23, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    outlined destroy of CamOutput(v22, type metadata accessor for ConversationHelperInput);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v23;
  uint64_t v24;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[24];
  v2 = v0[11];
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationTurnData);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[24];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v24 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = *(void **)(*(_QWORD *)(v7 + 32) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
    v0[5] = v10;
    v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
    v12 = String.init<A>(describing:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v7, type metadata accessor for RemoteConversationTurnData);
    _os_log_impl(&dword_1B4BE6000, v4, v5, "ConjunctionInfo: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(v0[24], type metadata accessor for RemoteConversationTurnData);
  }

  v15 = v0[22];
  v14 = (_QWORD *)v0[23];
  v16 = v0[11];
  v23 = *((_OWORD *)v0 + 6);
  v17 = ConversationUserInput.asSpeechData.getter();
  outlined init with copy of ConversationHelperInput(v16, (uint64_t)v14 + *(int *)(v15 + 20), type metadata accessor for RemoteConversationTurnData);
  *v14 = v17;
  *(_OWORD *)((char *)v14 + *(int *)(v15 + 24)) = v23;
  v18 = (uint64_t *)(*(_QWORD *)(v16 + 32) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  v20 = *v18;
  v19 = v18[1];
  v0[26] = v19;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v21 = (_QWORD *)swift_task_alloc();
  v0[27] = v21;
  *v21 = v0;
  v21[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:);
  return DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)(v0[7], v0[8], v0[9], v0[10], v0[23], v20, v19, v0[12]);
}

uint64_t type metadata accessor for ConversationHelperInput(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ConversationHelperInput);
}

id ConversationUserInput.asSpeechData.getter()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for ExecutionLocation();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v25 - v7;
  v9 = *((_QWORD *)v0 + 2);
  v29 = *((_QWORD *)v0 + 3);
  v30 = v9;
  v10 = swift_bridgeObjectRetain();
  v28 = MEMORY[0x1B5E43FCC](v10);
  v11 = *(void **)&v0[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo];
  v12 = *(_QWORD *)&v0[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance + 8];
  v26 = *(_QWORD *)&v0[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
  v27 = (uint64_t)v11;
  v14 = (void *)*((_QWORD *)v0 + 4);
  v13 = *((_QWORD *)v0 + 5);
  if (v13)
  {
    v15 = *(_QWORD *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult + 8);
    v25 = *(_QWORD *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v11;
    v17 = v14;
    v13 = NLResponse.requestLanguageVariant.getter();
    v19 = v18;
  }
  else
  {
    swift_bridgeObjectRetain();
    v20 = v11;
    v21 = v14;
    v19 = 0;
    v25 = 0;
    v15 = 0;
  }
  v22 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v22(v8, &v1[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation], v2);
  v22(v6, &v1[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation], v2);
  v23 = objc_allocWithZone((Class)type metadata accessor for RemoteConversationSpeechData());
  return RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)(v30, v29, v28, v27, (uint64_t)v14, v26, v12, v25, v15, v13, v19, (uint64_t)v8, (uint64_t)v6);
}

uint64_t type metadata accessor for RemoteConversationSpeechData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RemoteConversationSpeechData;
  if (!type metadata singleton initialization cache for RemoteConversationSpeechData)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for AmbiguityServiceResponse(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for AmbiguityServiceResponse);
}

uint64_t type metadata accessor for UserInputResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UserInputResult;
  if (!type metadata singleton initialization cache for UserInputResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t protocol witness for AmbiguityServiceProviding.createRankedInput(from:) in conformance AmbiguityService@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AmbiguityService.createRankedInput(from:)(a1, a2);
}

uint64_t AmbiguityService.createRankedInput(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  char v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  id v90;
  double v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, unint64_t, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  uint64_t v110;
  uint8_t *v111;
  uint8_t *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  _QWORD v124[2];
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unsigned int v140;
  unint64_t v141;
  char *v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  void (*v159)(char *, unint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;

  v136 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v3);
  v127 = (char *)v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v5);
  v126 = (char *)v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130);
  v128 = (char *)v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v8);
  v132 = (char *)v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v150 = *(_QWORD *)(v13 - 8);
  v151 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v146 = (char *)v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v145 = (char *)v124 - v16;
  v17 = type metadata accessor for Siri_Nlu_External_Parser();
  v148 = *(_QWORD *)(v17 - 8);
  v149 = v17;
  MEMORY[0x1E0C80A78](v17);
  v147 = (char *)v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  v155 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v131 = (char *)v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v124 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v157 = (char *)v124 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v158 = (char *)v124 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)v124 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v144 = (char *)v124 - v33;
  MEMORY[0x1E0C80A78](v32);
  v152 = (char *)v124 - v34;
  v35 = type metadata accessor for Parse();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = MEMORY[0x1E0C80A78](v35);
  v133 = (char *)v124 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v134 = (char *)v124 - v39;
  if (one-time initialization token for executor != -1)
    swift_once();
  v40 = type metadata accessor for Logger();
  v41 = __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.debug.getter();
  v44 = os_log_type_enabled(v42, v43);
  v138 = v35;
  if (v44)
  {
    v45 = v41;
    v46 = v36;
    v47 = a1;
    v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v48 = 0;
    _os_log_impl(&dword_1B4BE6000, v42, v43, "[AmbiguityService] Creating ranked input by ranking between NL and Pommes", v48, 2u);
    v49 = v48;
    a1 = v47;
    v36 = v46;
    v41 = v45;
    v35 = v138;
    MEMORY[0x1B5E44758](v49, -1, -1);
  }

  v50 = *(_QWORD *)(a1 + 40);
  if (!v50)
  {
    v73 = type metadata accessor for Input();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v136, 1, 1, v73);
  }
  v51 = *(_QWORD *)(v50 + 16);
  v52 = *(_QWORD *)(v51 + 16);
  v53 = (*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
  v137 = v50;
  v135 = v51;
  v143 = v52;
  v154 = v24;
  if (!v52)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v75 = MEMORY[0x1E0DEE9D8];
LABEL_36:
    swift_bridgeObjectRelease();
    v88 = *(_QWORD *)(v50 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
    if (v88)
    {
      v89 = *(void **)(v88 + 16);
      if (v89)
      {
        v90 = v89;
        dispatch thunk of PommesResponse.primaryQueryConfidence()();
        if (v91 >= 0.7)
        {
          v107 = Logger.logObject.getter();
          v108 = static os_log_type_t.debug.getter();
          v109 = os_log_type_enabled(v107, v108);
          v100 = v134;
          if (v109)
          {
            v110 = v36;
            v111 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v111 = 0;
            _os_log_impl(&dword_1B4BE6000, v107, v108, "[AmbiguityService] Choosing pommes as top as it has higher confidence", v111, 2u);
            v112 = v111;
            v36 = v110;
            v100 = v134;
            MEMORY[0x1B5E44758](v112, -1, -1);
          }

          *(_QWORD *)v100 = v90;
          (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v100, *MEMORY[0x1E0D9C5F8], v35);
          v113 = v90;
          specialized AmbiguityService.getAlternatives<A>(nlParses:)(v75);
          swift_release();

          goto LABEL_48;
        }

        v50 = v137;
      }
    }
    v92 = *(_QWORD *)(v75 + 16);
    if (v92)
    {
      v93 = v75 + v53;
      v94 = v155;
      v95 = *(void (**)(char *, unint64_t, uint64_t))(v155 + 16);
      v95(v24, v75 + v53, v19);
      v95(v131, (unint64_t)v24, v19);
      v96 = v147;
      Siri_Nlu_External_UserParse.parser.getter();
      v97 = v132;
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(char *, uint64_t))(v148 + 8))(v96, v149);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v97, 0, 1, v151);
      v98 = v133;
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      v99 = v138;
      (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v98, *MEMORY[0x1E0D9C678], v138);
      v100 = v134;
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v134, v98, v99);
      if (*(_QWORD *)(v75 + 16) < v92)
        goto LABEL_56;
      specialized AmbiguityService.getAlternatives<A>(nlParses:)(v93, 1, (2 * v92) | 1);
      swift_release();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v154, v19);
      v35 = v138;
LABEL_49:
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v98, v100, v35);
      v114 = v136;
      Input.init(parse:alternatives:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v100, v35);
      v115 = type metadata accessor for Input();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 56))(v114, 0, 1, v115);
    }
    swift_release();
    v101 = v129;
    v102 = v128;
    v103 = v130;
    (*(void (**)(char *, _QWORD, uint64_t))(v129 + 104))(v128, *MEMORY[0x1E0D9F510], v130);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F520], MEMORY[0x1E0D9F538]);
    v104 = v50;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v106 = v160;
    v105 = v161;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v103);
    if (v105 == v106)
    {
      v100 = v134;
      v35 = v138;
      (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v134, *MEMORY[0x1E0D9C688], v138);
    }
    else
    {
      v35 = v138;
      if (*(_QWORD *)(*(_QWORD *)(v104 + 16) + 16))
        goto LABEL_55;
      v116 = (uint64_t)v126;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v155 + 56))(v126, 1, 1, v19);
      v117 = type metadata accessor for ServerFallbackReason();
      v118 = (uint64_t)v127;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v127, 1, 1, v117);
      v119 = specialized ServerFallbackDisablingUtils.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)(1, v116, v118);
      outlined destroy of ReferenceResolutionClientProtocol?(v118, &demangling cache variable for type metadata for ServerFallbackReason?);
      outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
      if ((v119 & 1) == 0)
      {
LABEL_55:
        swift_release();
        v123 = type metadata accessor for Input();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 56))(v136, 1, 1, v123);
      }
      v120 = Logger.logObject.getter();
      v121 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v120, v121))
      {
        v122 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v122 = 0;
        _os_log_impl(&dword_1B4BE6000, v120, v121, "[AmbiguityService] Empty nlParses and isServerFallbackDisabled = true", v122, 2u);
        MEMORY[0x1B5E44758](v122, -1, -1);
      }

      v100 = v134;
      (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v134, *MEMORY[0x1E0D9C688], v35);
    }
LABEL_48:
    v98 = v133;
    goto LABEL_49;
  }
  v124[1] = v41;
  v125 = v36;
  v153 = v53;
  v156 = *(_QWORD *)(v155 + 72);
  v159 = *(void (**)(char *, unint64_t, uint64_t))(v155 + 16);
  v140 = *MEMORY[0x1E0D9F120];
  swift_retain();
  swift_bridgeObjectRetain();
  v54 = 0;
  v55 = v51 + v53;
  v56 = v152;
  v141 = v51 + v53;
  v142 = v12;
  v139 = v31;
  while (1)
  {
    v159(v56, v55, v19);
    v57 = v147;
    Siri_Nlu_External_UserParse.parser.getter();
    v58 = v145;
    Siri_Nlu_External_Parser.parserID.getter();
    (*(void (**)(char *, uint64_t))(v148 + 8))(v57, v149);
    v59 = v150;
    v60 = v151;
    v61 = v146;
    (*(void (**)(char *, _QWORD, uint64_t))(v150 + 104))(v146, v140, v151);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F178]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v63 = v160;
    v62 = v161;
    v64 = *(void (**)(char *, uint64_t))(v59 + 8);
    v64(v61, v60);
    v65 = v60;
    v56 = v152;
    v64(v58, v65);
    v66 = v144;
    v159(v144, (unint64_t)v56, v19);
    v67 = v62 == v63 ? 1 : Siri_Nlu_External_UserParse.isOverriddenSNLC.getter();
    v68 = v139;
    v69 = *(void (**)(char *, uint64_t))(v155 + 8);
    v69(v66, v19);
    v159(v68, (unint64_t)v56, v19);
    v24 = v154;
    v71 = v141;
    v70 = (uint64_t)v142;
    if ((v67 & 1) != 0)
      break;
    v72 = Siri_Nlu_External_UserParse.isNlv3FallbackException.getter();
    v69(v68, v19);
    v69(v56, v19);
    if ((v72 & 1) != 0)
      goto LABEL_18;
    ++v54;
    v55 += v156;
    if (v143 == v54)
    {
      v54 = v143;
      goto LABEL_18;
    }
  }
  v69(v68, v19);
  v69(v56, v19);
LABEL_18:
  result = v135;
  v50 = v137;
  if (*(_QWORD *)(v135 + 16) >= v54)
  {
    v75 = MEMORY[0x1E0DEE9D8];
    v161 = MEMORY[0x1E0DEE9D8];
    if (!v54)
    {
      v35 = v138;
      v36 = v125;
      v53 = v153;
      goto LABEL_36;
    }
    while (1)
    {
      v77 = ((uint64_t (*)(char *, unint64_t, uint64_t))v159)(v158, v71, v19);
      v78 = MEMORY[0x1B5E3FA6C](v77);
      v79 = *(_QWORD *)(v78 + 16);
      v80 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      v81 = *(_QWORD *)(v80 - 8);
      if (v79)
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v81 + 16))(v70, v78 + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80)), v80);
        v82 = 0;
      }
      else
      {
        v82 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v70, v82, 1, v80);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v70, 1, v80) == 1)
        break;
      v83 = Siri_Nlu_External_UserDialogAct.hasDelegated.getter();
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v70, v80);
      if ((v83 & 1) == 0)
        goto LABEL_30;
      v69(v158, v19);
      v76 = v156;
LABEL_23:
      v71 += v76;
      if (!--v54)
      {
        v75 = v161;
        v35 = v138;
        v36 = v125;
        v50 = v137;
        v53 = v153;
        goto LABEL_36;
      }
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v70, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_30:
    v84 = *(void (**)(char *, char *, uint64_t))(v155 + 32);
    v84(v157, v158, v19);
    v85 = v161;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v85 + 16) + 1, 1);
      v85 = v161;
    }
    v87 = *(_QWORD *)(v85 + 16);
    v86 = *(_QWORD *)(v85 + 24);
    v76 = v156;
    if (v87 >= v86 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1);
      v76 = v156;
      v85 = v161;
    }
    *(_QWORD *)(v85 + 16) = v87 + 1;
    v84((char *)(v85 + v153 + v87 * v76), v157, v19);
    v161 = v85;
    v24 = v154;
    goto LABEL_23;
  }
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t Siri_Nlu_External_UserParse.isOverriddenSNLC.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  MEMORY[0x1E0C80A78](v2);
  v35 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v4);
  v38 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Siri_Nlu_External_UserParse();
  v6 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v40 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v35 - v13;
  v15 = type metadata accessor for Siri_Nlu_External_Parser();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  v19 = v18;
  v20 = v39;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D9F138], v8);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v22 = v41;
  v21 = v42;
  v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v12, v8);
  v24 = v8;
  v25 = v40;
  v23(v14, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v25, v1, v20);
  if (v21 != v22)
    goto LABEL_4;
  v26 = v38;
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v38);
  v27 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v26);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v20);
    v29 = 0;
    return v29 & 1;
  }
  v30 = v35;
  Siri_Nlu_External_UserDialogAct.delegated.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
  v31 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v37);
  if (v31 == 0xD000000000000013 && v33 == 0x80000001B4EFE6C0)
    v29 = 1;
  else
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v20);
  swift_bridgeObjectRelease();
  return v29 & 1;
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier)
  {
    v1 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9F170], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier)
  {
    v1 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9F178], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier);
  }
  return result;
}

uint64_t Siri_Nlu_External_UserParse.isNlv3FallbackException.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  MEMORY[0x1E0C80A78](v2);
  v35 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v4);
  v38 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Siri_Nlu_External_UserParse();
  v6 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v40 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v35 - v13;
  v15 = type metadata accessor for Siri_Nlu_External_Parser();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  v19 = v18;
  v20 = v39;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D9F138], v8);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v22 = v41;
  v21 = v42;
  v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v12, v8);
  v24 = v8;
  v25 = v40;
  v23(v14, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v25, v1, v20);
  if (v21 != v22)
    goto LABEL_4;
  v26 = v38;
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v38);
  v27 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v26);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v20);
    v29 = 0;
    return v29 & 1;
  }
  v30 = v35;
  Siri_Nlu_External_UserDialogAct.delegated.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
  v31 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v37);
  if (v31 == 0xD000000000000026 && v33 == 0x80000001B4EFB8C0)
    v29 = 1;
  else
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v20);
  swift_bridgeObjectRelease();
  return v29 & 1;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityValueFetcher>, &demangling cache variable for type metadata for AffinityValueFetcher);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationHandler>, &demangling cache variable for type metadata for ConversationHandler);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA0688]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ActionCandidate>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D97BC0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_DelegatedUserDialogAct>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F8F8]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String?)>, &demangling cache variable for type metadata for (String, String?));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Input>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3D70]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D97B60]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Google_Protobuf_StringValue>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D3E740]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NSExtensionProtocol>, &demangling cache variable for type metadata for NSExtensionProtocol);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)>, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityScorer>, &demangling cache variable for type metadata for AffinityScorer);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SiriKitConfirmationState>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9B380]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CorrectionsActionOutcome>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C288]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F340]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(namespace: String, value: String?)>, &demangling cache variable for type metadata for (namespace: String, value: String?));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Parse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C698]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParseUserDataAttachment>, (uint64_t (*)(_QWORD))type metadata accessor for ParseUserDataAttachment);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9BD50]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C708]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoEntitySpan>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA05B0]);
  *v3 = result;
  return result;
}

Swift::Void __swiftcall Input.stripSetIdentity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void (*v45)(_QWORD, _QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  void (*v110)(uint64_t, uint64_t);
  void (*v111)(char *, uint64_t);
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  char *v129;
  void (*v130)(_QWORD, _QWORD, _QWORD);
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v1);
  v113 = (char *)&v96 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for Input();
  v115 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116);
  v114 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v123 = *(_QWORD *)(v133 - 8);
  v4 = MEMORY[0x1E0C80A78](v133);
  v121 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v126 = (char *)&v96 - v6;
  v134 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v125 = *(_QWORD *)(v134 - 8);
  v7 = MEMORY[0x1E0C80A78](v134);
  v119 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v124 = (char *)&v96 - v9;
  v120 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v122 = *(_QWORD **)(v120 - 8);
  v10 = MEMORY[0x1E0C80A78](v120);
  v128 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v129 = (char *)&v96 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v132 = (char *)&v96 - v15;
  MEMORY[0x1E0C80A78](v14);
  v131 = (char *)&v96 - v16;
  v17 = type metadata accessor for Siri_Nlu_External_UserParse();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v118 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v96 - v21;
  v23 = type metadata accessor for USOParse();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (uint64_t)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Parse();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v112 = (char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v96 - v31;
  v117 = v0;
  Input.parse.getter();
  v33 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v32, v27);
  if (v33 != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);
    return;
  }
  v106 = v33;
  v34 = *(void (**)(char *, uint64_t))(v28 + 96);
  v107 = v27;
  v34(v32, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v26, v32, v23);
  v35 = USOParse.userParse.getter();
  v36 = MEMORY[0x1B5E3FA6C](v35);
  v37 = *(void (**)(char *, uint64_t))(v18 + 8);
  v108 = v22;
  v109 = v37;
  v37(v22, v17);
  v38 = *(_QWORD *)(v36 + 16);
  swift_bridgeObjectRelease();
  if (v38 < 2)
  {
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v23);
    return;
  }
  v104 = v23;
  v102 = v28;
  v103 = v24;
  v105 = v17;
  v39 = v118;
  USOParse.userParse.getter();
  v40 = Siri_Nlu_External_UserParse.userDialogActs.modify();
  v137 = v41;
  v42 = *v41;
  v43 = *(_QWORD *)(*v41 + 16);
  v101 = v18;
  if (!v43)
  {
    v56 = 0;
    goto LABEL_32;
  }
  v98 = v26;
  v97 = v40;
  v44 = v122;
  v135 = (*((unsigned __int8 *)v44 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v44 + 80);
  v127 = (void (*)(char *, uint64_t))(v42 + v135);
  v138 = v122[9];
  v45 = (void (*)(_QWORD, _QWORD, _QWORD))v122[2];
  v99 = v42;
  swift_bridgeObjectRetain();
  v46 = 0;
  v47 = 0;
  v136 = MEMORY[0x1E0DEE9B8] + 8;
  v48 = v120;
  v49 = v131;
  v130 = v45;
  while (1)
  {
    v45(v49, (char *)v127 + v138 * v46, v48);
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
      break;
LABEL_5:
    ((void (*)(char *, uint64_t))v44[1])(v49, v48);
    if (++v46 == v43)
    {
      swift_bridgeObjectRelease();
      v56 = *(_QWORD *)(*v137 + 16);
      goto LABEL_31;
    }
  }
  v50 = v124;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  v24 = (uint64_t)v126;
  Siri_Nlu_External_UserStatedTask.task.getter();
  v51 = *(void (**)(char *, uint64_t))(v125 + 8);
  v51(v50, v134);
  v52 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
  v111 = v51;
  v110 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
  v110(v24, v133);
  v40 = MEMORY[0x1B5E400FC](v52);
  if (v40 >> 62)
    v53 = _CocoaArrayWrapper.endIndex.getter();
  else
    v53 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
  v49 = v131;
  if (!v53)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v48 = v120;
    v45 = v130;
    goto LABEL_5;
  }
  v100 = v52;
  v26 = 4;
  while (1)
  {
    v54 = v26 - 4;
    if ((v40 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1B5E43B94](v26 - 4, v40);
      v24 = v26 - 3;
      if (__OFADD__(v54, 1))
        goto LABEL_74;
    }
    else
    {
      swift_retain();
      v24 = v26 - 3;
      if (__OFADD__(v54, 1))
      {
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
    }
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    if (v140)
      break;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v139, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_12:
    ++v26;
    if (v24 == v53)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v48 = v120;
      v44 = v122;
      v45 = v130;
      v49 = v131;
      goto LABEL_5;
    }
  }
  outlined init with take of Any(&v139, &v141);
  outlined init with take of Any(&v141, &v139);
  v55 = type metadata accessor for UsoTask_setIdentity_common_Person();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_12;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v24 = v120;
  v127 = (void (*)(char *, uint64_t))v122[1];
  v127(v131, v120);
  swift_bridgeObjectRelease();
  v56 = v46 + 1;
  if (__OFADD__(v46, 1))
  {
    __break(1u);
    return;
  }
  v57 = *v137;
  v58 = *(_QWORD *)(*v137 + 16);
  v40 = (unint64_t)v132;
  if (v56 == v58)
  {
    v43 = v46;
    goto LABEL_31;
  }
  v131 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
  v43 = v46;
  v79 = v121;
  while (2)
  {
    if (v56 >= v58)
      goto LABEL_76;
    v136 = v56 * v138;
    v130(v40, v57 + v135 + v56 * v138, v24);
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) == 0)
      goto LABEL_43;
    v80 = v119;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    Siri_Nlu_External_UserStatedTask.task.getter();
    v111(v80, v134);
    v90 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    v110((uint64_t)v79, v133);
    v126 = (char *)v90;
    v91 = MEMORY[0x1B5E400FC](v90);
    v92 = v91;
    if (v91 >> 62)
    {
      v26 = _CocoaArrayWrapper.endIndex.getter();
      v40 = (unint64_t)v132;
      if (v26)
        goto LABEL_58;
LABEL_73:
      swift_release();
      swift_bridgeObjectRelease();
LABEL_43:
      v127((char *)v40, v24);
      if (v43 != v56)
      {
        if (v43 < 0)
        {
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
        v40 = *v137;
        v81 = *(_QWORD *)(*v137 + 16);
        if (v43 >= v81)
        {
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        v26 = v55;
        v82 = v40 + v135;
        v83 = v43;
        v84 = v43 * v138;
        v85 = v40 + v135 + v43 * v138;
        v43 = (uint64_t)v130;
        v130(v129, v85, v24);
        if (v56 >= v81)
        {
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        ((void (*)(char *, unint64_t, uint64_t))v43)(v128, v82 + v136, v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v137 = v40;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v40);
          *v137 = v40;
        }
        v79 = v121;
        v43 = v83;
        if (v83 >= *(_QWORD *)(v40 + 16))
          goto LABEL_82;
        v55 = v26;
        v87 = v40 + v135 + v84;
        v40 = v122[5];
        v88 = v135;
        ((void (*)(unint64_t, char *, uint64_t))v40)(v87, v128, v24);
        if (v56 >= *(_QWORD *)(*v137 + 16))
        {
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        ((void (*)(unint64_t, char *, uint64_t))v40)(*v137 + v88 + v136, v129, v24);
        v40 = (unint64_t)v132;
      }
      v89 = __OFADD__(v43++, 1);
      if (v89)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      v89 = __OFADD__(v56++, 1);
      if (!v89)
        goto LABEL_54;
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    v26 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10);
    v40 = (unint64_t)v132;
    if (!v26)
      goto LABEL_73;
LABEL_58:
    v40 = v92 & 0xC000000000000001;
    v93 = 4;
    while (2)
    {
      v94 = v93 - 4;
      if (v40)
      {
        v24 = MEMORY[0x1B5E43B94](v93 - 4, v92);
        v89 = __OFADD__(v94, 1);
        v95 = v93 - 3;
        if (v89)
          goto LABEL_75;
      }
      else
      {
        v24 = *(_QWORD *)(v92 + 8 * v93);
        swift_retain();
        v89 = __OFADD__(v94, 1);
        v95 = v93 - 3;
        if (v89)
          goto LABEL_75;
      }
      static UsoTask_CodegenConverter.convert(task:)();
      swift_release();
      if (!v140)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v139, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_60;
      }
      outlined init with take of Any(&v139, &v141);
      outlined init with take of Any(&v141, &v139);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_60:
        ++v93;
        if (v95 == v26)
        {
          swift_release();
          swift_bridgeObjectRelease();
          v79 = v121;
          v24 = v120;
          v40 = (unint64_t)v132;
          goto LABEL_43;
        }
        continue;
      }
      break;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v40 = (unint64_t)v132;
    v24 = v120;
    v127(v132, v120);
    v79 = v121;
    v89 = __OFADD__(v56++, 1);
    if (v89)
      goto LABEL_77;
LABEL_54:
    v57 = *v137;
    v58 = *(_QWORD *)(*v137 + 16);
    if (v56 != v58)
      continue;
    break;
  }
LABEL_31:
  v39 = v118;
  v40 = v97;
  v26 = v98;
  if ((uint64_t)v56 >= v43)
  {
LABEL_32:
    specialized Array.replaceSubrange<A>(_:with:)(v43, v56);
    ((void (*)(uint64_t *, _QWORD))v40)(&v142, 0);
    v59 = v108;
    v24 = v26;
    v60 = USOParse.userParse.getter();
    v61 = MEMORY[0x1B5E3FA6C](v60);
    v109(v59, v105);
    v62 = *(_QWORD *)(v61 + 16);
    v63 = swift_bridgeObjectRelease();
    v26 = (uint64_t)v39;
    v64 = *(_QWORD *)(MEMORY[0x1B5E3FA6C](v63) + 16);
    swift_bridgeObjectRelease();
    v43 = v117;
    if (v62 != v64)
    {
      v47 = Input.description.getter();
      v40 = v65;
      if (one-time initialization token for executor == -1)
        goto LABEL_34;
      goto LABEL_85;
    }
    goto LABEL_38;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  swift_once();
LABEL_34:
  v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  v67 = Logger.logObject.getter();
  v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = (uint8_t *)swift_slowAlloc();
    v70 = swift_slowAlloc();
    v142 = v70;
    *(_DWORD *)v69 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v141 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v40, &v142);
    v43 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v67, v68, "[DecisionEngine] setIdentity stripped %s", v69, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v70, -1, -1);
    MEMORY[0x1B5E44758](v69, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v59 = v108;
LABEL_38:
  v71 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v59, v26, v105);
  v72 = v24;
  USOParse.parserIdentifier.getter();
  USOParse.appBundleId.getter();
  v73 = v112;
  USOParse.init(userParse:parserIdentifier:appBundleId:)();
  v74 = v102;
  v75 = v107;
  (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v73, v106, v107);
  v76 = v114;
  Input.withReformedParse(_:)();
  v77 = v115;
  v78 = v116;
  (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v43, v116);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
  v109((char *)v26, v71);
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v72, v104);
  (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v43, v76, v78);
}

uint64_t ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v4[18] = type metadata accessor for UserInputResult();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[22] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

void ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 264);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 264);
  if (v7)
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v29 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 80) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(describing:)();
    *(_QWORD *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v29);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v5, v6, "[ConversationHelper] Error checking if active conversation could handle input: %s. Will try the next conversation", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();

  }
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 216) = v14;
  *(_QWORD *)(v0 + 224) = v15;
  v16 = *(_QWORD *)(v0 + 192);
  if (v16 < 0)
  {
    v21 = __CocoaSet.Iterator.next()();
    if (v21)
    {
      *(_QWORD *)(v0 + 104) = v21;
      type metadata accessor for RemoteConversationClient();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v20 = *(_QWORD *)(v0 + 96);
      swift_unknownObjectRelease();
      v19 = v14;
      v17 = v15;
LABEL_12:
      *(_QWORD *)(v0 + 240) = v19;
      *(_QWORD *)(v0 + 248) = v17;
      *(_QWORD *)(v0 + 232) = v20;
      if (v20)
      {
        v22 = **(_QWORD **)(v0 + 128);
        v23 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v23;
        *v23 = v0;
        v23[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
        RemoteConversationClient.accept(input:speechData:)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 112), v22);
        return;
      }
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  if (v15)
  {
    v17 = (v15 - 1) & v15;
    v18 = __clz(__rbit64(v15)) | (v14 << 6);
    v19 = v14;
LABEL_9:
    v20 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v18);
    swift_retain();
    goto LABEL_12;
  }
  v24 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    v25 = (unint64_t)(*(_QWORD *)(v0 + 208) + 64) >> 6;
    if (v24 < v25)
    {
      v26 = *(_QWORD *)(v0 + 200);
      v27 = *(_QWORD *)(v26 + 8 * v24);
      v19 = v14 + 1;
      if (v27)
      {
LABEL_17:
        v17 = (v27 - 1) & v27;
        v18 = __clz(__rbit64(v27)) + (v19 << 6);
        goto LABEL_9;
      }
      v19 = v14 + 2;
      if (v14 + 2 < v25)
      {
        v27 = *(_QWORD *)(v26 + 8 * v19);
        if (v27)
          goto LABEL_17;
        v19 = v14 + 3;
        if (v14 + 3 < v25)
        {
          v27 = *(_QWORD *)(v26 + 8 * v19);
          if (v27)
            goto LABEL_17;
          v19 = v14 + 4;
          if (v14 + 4 < v25)
          {
            v27 = *(_QWORD *)(v26 + 8 * v19);
            if (v27)
              goto LABEL_17;
            v28 = v14 + 5;
            while (v25 != v28)
            {
              v27 = *(_QWORD *)(v26 + 8 * v28++);
              if (v27)
              {
                v19 = v28 - 1;
                goto LABEL_17;
              }
            }
          }
        }
      }
    }
LABEL_28:
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(_QWORD))(v0 + 8))(0);
    return;
  }
  __break(1u);
}

uint64_t ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 152);
  outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 160), v1, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  outlined init with copy of ConversationHelperInput(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000005CLL, 0x80000001B4EF9A50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/DecisionEngine/ConversationHelper.swift", 108, 2, 88);
    v13 = *(_QWORD *)(v0 + 232);
    swift_release();
    if (one-time initialization token for executor != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    swift_retain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(_QWORD *)(v0 + 232);
    v34 = *(_QWORD *)(v0 + 168);
    if (v17)
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      *(_DWORD *)v19 = 136315138;
      v35 = v33;
      swift_retain();
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v36, "FlowExtension(");
      HIBYTE(v36[1]) = -18;
      v20 = v13;
      v21 = *(_QWORD *)(v18 + 112);
      v22 = *(void **)(v18 + 120);
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = v21;
      v23._object = v22;
      String.append(_:)(v23);
      v13 = v20;
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 41;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      swift_release();
      *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36[0], v36[1], &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v15, v16, "[ConversationHelper] Selecting existing conversation to handle input: %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v33, -1, -1);
      MEMORY[0x1B5E44758](v19, -1, -1);

      outlined destroy of CamOutput(v34, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
    }
    else
    {

      swift_release_n();
      outlined destroy of CamOutput(v34, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
    }
    goto LABEL_32;
  }
  v5 = *(_QWORD *)(v0 + 152);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 168), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  swift_release();
  result = outlined destroy of CamOutput(v5, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 216) = v6;
  *(_QWORD *)(v0 + 224) = v7;
  v8 = *(_QWORD *)(v0 + 192);
  if (v8 < 0)
  {
    v25 = __CocoaSet.Iterator.next()();
    if (v25)
    {
      *(_QWORD *)(v0 + 104) = v25;
      type metadata accessor for RemoteConversationClient();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v12 = *(_QWORD *)(v0 + 96);
      swift_unknownObjectRelease();
      v11 = v6;
      v9 = v7;
LABEL_15:
      *(_QWORD *)(v0 + 240) = v11;
      *(_QWORD *)(v0 + 248) = v9;
      *(_QWORD *)(v0 + 232) = v12;
      if (v12)
      {
        v26 = **(_QWORD **)(v0 + 128);
        v27 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v27;
        *v27 = v0;
        v27[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
        return RemoteConversationClient.accept(input:speechData:)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 112), v26);
      }
      goto LABEL_31;
    }
    goto LABEL_31;
  }
  if (v7)
  {
    v9 = (v7 - 1) & v7;
    v10 = __clz(__rbit64(v7)) | (v6 << 6);
    v11 = v6;
LABEL_7:
    v12 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v10);
    swift_retain();
    goto LABEL_15;
  }
  v28 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    v29 = (unint64_t)(*(_QWORD *)(v0 + 208) + 64) >> 6;
    if (v28 < v29)
    {
      v30 = *(_QWORD *)(v0 + 200);
      v31 = *(_QWORD *)(v30 + 8 * v28);
      v11 = v6 + 1;
      if (v31)
      {
LABEL_20:
        v9 = (v31 - 1) & v31;
        v10 = __clz(__rbit64(v31)) + (v11 << 6);
        goto LABEL_7;
      }
      v11 = v6 + 2;
      if (v6 + 2 < v29)
      {
        v31 = *(_QWORD *)(v30 + 8 * v11);
        if (v31)
          goto LABEL_20;
        v11 = v6 + 3;
        if (v6 + 3 < v29)
        {
          v31 = *(_QWORD *)(v30 + 8 * v11);
          if (v31)
            goto LABEL_20;
          v11 = v6 + 4;
          if (v6 + 4 < v29)
          {
            v31 = *(_QWORD *)(v30 + 8 * v11);
            if (v31)
              goto LABEL_20;
            v32 = v6 + 5;
            while (v29 != v32)
            {
              v31 = *(_QWORD *)(v30 + 8 * v32++);
              if (v31)
              {
                v11 = v32 - 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }
LABEL_31:
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    swift_release();
    v13 = 0;
LABEL_32:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 120);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    result = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v7 = -1 << *(_BYTE *)(v1 + 32);
    v3 = v1 + 56;
    v5 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(v1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  *(_QWORD *)(v0 + 192) = result;
  *(_QWORD *)(v0 + 200) = v3;
  *(_QWORD *)(v0 + 216) = v4;
  *(_QWORD *)(v0 + 224) = v6;
  *(_QWORD *)(v0 + 208) = v5;
  if (result < 0)
  {
    v14 = __CocoaSet.Iterator.next()();
    if (v14)
    {
      *(_QWORD *)(v0 + 104) = v14;
      type metadata accessor for RemoteConversationClient();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v13 = *(_QWORD *)(v0 + 96);
      swift_unknownObjectRelease();
      v12 = v4;
      v10 = v6;
LABEL_13:
      *(_QWORD *)(v0 + 240) = v12;
      *(_QWORD *)(v0 + 248) = v10;
      *(_QWORD *)(v0 + 232) = v13;
      if (v13)
      {
        v15 = **(_QWORD **)(v0 + 128);
        v16 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v16;
        *v16 = v0;
        v16[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
        return RemoteConversationClient.accept(input:speechData:)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 112), v15);
      }
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (v6)
  {
    v10 = (v6 - 1) & v6;
    v11 = __clz(__rbit64(v6)) | (v4 << 6);
    v12 = v4;
LABEL_10:
    v13 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v11);
    swift_retain();
    goto LABEL_13;
  }
  v17 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    v18 = (unint64_t)(v5 + 64) >> 6;
    if (v17 < v18)
    {
      v19 = *(_QWORD *)(v3 + 8 * v17);
      v12 = v4 + 1;
      if (v19)
      {
LABEL_18:
        v10 = (v19 - 1) & v19;
        v11 = __clz(__rbit64(v19)) + (v12 << 6);
        goto LABEL_10;
      }
      v12 = v4 + 2;
      if (v4 + 2 < v18)
      {
        v19 = *(_QWORD *)(v3 + 8 * v12);
        if (v19)
          goto LABEL_18;
        v12 = v4 + 3;
        if (v4 + 3 < v18)
        {
          v19 = *(_QWORD *)(v3 + 8 * v12);
          if (v19)
            goto LABEL_18;
          v12 = v4 + 4;
          if (v4 + 4 < v18)
          {
            v19 = *(_QWORD *)(v3 + 8 * v12);
            if (v19)
              goto LABEL_18;
            v20 = v4 + 5;
            while (v18 != v20)
            {
              v19 = *(_QWORD *)(v3 + 8 * v20++);
              if (v19)
              {
                v12 = v20 - 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
LABEL_29:
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 120);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
    {
LABEL_3:
      v2 = *(_QWORD **)(v0 + 136);
      v3 = v2[6];
      v4 = v2[7];
      __swift_project_boxed_opaque_existential_1(v2 + 3, v3);
      v26 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v4 + 8) + *(_QWORD *)(v4 + 8));
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 184) = v5;
      *v5 = v0;
      v5[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
      return v26(v3, v4);
    }
  }
  else if (*(_QWORD *)(v1 + 16))
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v0 + 120);
  if ((v7 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    result = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v10 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v12 = -1 << *(_BYTE *)(v7 + 32);
    v8 = v7 + 56;
    v10 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(v7 + 56);
    result = swift_bridgeObjectRetain();
    v9 = 0;
  }
  *(_QWORD *)(v0 + 192) = result;
  *(_QWORD *)(v0 + 200) = v8;
  *(_QWORD *)(v0 + 216) = v9;
  *(_QWORD *)(v0 + 224) = v11;
  *(_QWORD *)(v0 + 208) = v10;
  if (result < 0)
  {
    v19 = __CocoaSet.Iterator.next()();
    if (v19)
    {
      *(_QWORD *)(v0 + 104) = v19;
      type metadata accessor for RemoteConversationClient();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v18 = *(_QWORD *)(v0 + 96);
      swift_unknownObjectRelease();
      v17 = v9;
      v15 = v11;
LABEL_17:
      *(_QWORD *)(v0 + 240) = v17;
      *(_QWORD *)(v0 + 248) = v15;
      *(_QWORD *)(v0 + 232) = v18;
      if (v18)
      {
        v20 = **(_QWORD **)(v0 + 128);
        v21 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v21;
        *v21 = v0;
        v21[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
        return RemoteConversationClient.accept(input:speechData:)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 112), v20);
      }
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  if (v11)
  {
    v15 = (v11 - 1) & v11;
    v16 = __clz(__rbit64(v11)) | (v9 << 6);
    v17 = v9;
LABEL_14:
    v18 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v16);
    swift_retain();
    goto LABEL_17;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    v23 = (unint64_t)(v10 + 64) >> 6;
    if (v22 < v23)
    {
      v24 = *(_QWORD *)(v8 + 8 * v22);
      v17 = v9 + 1;
      if (v24)
      {
LABEL_22:
        v15 = (v24 - 1) & v24;
        v16 = __clz(__rbit64(v24)) + (v17 << 6);
        goto LABEL_14;
      }
      v17 = v9 + 2;
      if (v9 + 2 < v23)
      {
        v24 = *(_QWORD *)(v8 + 8 * v17);
        if (v24)
          goto LABEL_22;
        v17 = v9 + 3;
        if (v9 + 3 < v23)
        {
          v24 = *(_QWORD *)(v8 + 8 * v17);
          if (v24)
            goto LABEL_22;
          v17 = v9 + 4;
          if (v9 + 4 < v23)
          {
            v24 = *(_QWORD *)(v8 + 8 * v17);
            if (v24)
              goto LABEL_22;
            v25 = v9 + 5;
            while (v23 != v25)
            {
              v24 = *(_QWORD *)(v8 + 8 * v25++);
              if (v24)
              {
                v17 = v25 - 1;
                goto LABEL_22;
              }
            }
          }
        }
      }
    }
LABEL_33:
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Waitable.wait() in conformance ConcurrentTaskPool()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)v0 + 136) + *(_QWORD *)(**(_QWORD **)v0 + 136));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t ConcurrentTaskPool.wait()()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  swift_release_n();
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 32) + 16);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in ConcurrentTaskPool.wait();
  *(_QWORD *)(v4 + 24) = v2;
  os_unfair_lock_lock(v3);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(*(_QWORD *(**)(uint64_t *__return_ptr))(v4 + 16), (_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 40) = v1;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v0 + 32) + 16));
  if (v1)
    return swift_task_dealloc();
  v6 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 48) = v6;
  swift_task_dealloc();
  if (!v6)
    return (*(uint64_t (**)(void))(v0 + 8))();
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  *v7 = v0;
  v7[1] = ConcurrentTaskPool.wait();
  return Task<>.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(os_unfair_lock_s **)(v1 + 24);
  *(_QWORD *)(v0 + 32) = v2;
  v3 = v2 + 4;
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in ConcurrentTaskPool.wait();
  *(_QWORD *)(v4 + 24) = v1;
  os_unfair_lock_lock(v3);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(*(_QWORD *(**)(uint64_t *__return_ptr))(v4 + 16), (_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 40) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v0 + 32) + 16));
  v5 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 48) = v5;
  swift_task_dealloc();
  if (!v5)
    return (*(uint64_t (**)(void))(v0 + 8))();
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = ConcurrentTaskPool.wait();
  return Task<>.value.getter();
}

uint64_t partial apply for closure #1 in ConcurrentTaskPool.wait()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ConcurrentTaskPool.wait()(v1, a1);
}

uint64_t closure #1 in ConcurrentTaskPool.wait()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 16;
  result = swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v6 + 16))
  {
    v7 = 0;
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(v6 + 32);
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v4 + 16))
  {
    swift_retain();
    swift_retain();
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    swift_endAccess();
    result = swift_release();
LABEL_5:
    *a2 = v7;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = type metadata accessor for UserInputResult();
  v4[11] = swift_task_alloc();
  v5 = type metadata accessor for Input();
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 + 64);
  v4[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RemoteConversationClient.accept(input:speechData:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, void *, uint64_t, _QWORD, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[15];
  v18 = v0[14];
  v2 = v0[12];
  v3 = v0[13];
  v5 = (char *)v0[8];
  v4 = (_QWORD *)v0[9];
  v6 = v0[7];
  v7 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v9 = *(_QWORD *)&v5[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  v8 = *(_QWORD *)&v5[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId + 8];
  swift_beginAccess();
  v4[21] = v9;
  v4[22] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = v4 + 16;
  v11 = v4[19];
  v12 = v4[20];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v2);
  v13 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v14 = swift_allocObject();
  v0[17] = v14;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v14 + v13, v1, v2);
  *(_QWORD *)(v14 + ((v18 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v5;
  v19 = (uint64_t (*)(_QWORD, void *, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v12 + 8)
                                                                                  + *(_QWORD *)(v12 + 8));
  v15 = v5;
  v16 = (_QWORD *)swift_task_alloc();
  v0[18] = v16;
  *v16 = v0;
  v16[1] = RemoteConversationClient.accept(input:speechData:);
  return v19(v0[6], &async function pointer to partial apply for closure #1 in RemoteConversationClient.accept(input:speechData:), v14, v0[10], v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = *(_QWORD *)(type metadata accessor for Input() - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v3 + v9;
  v11 = *(_QWORD *)(v3 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v12;
  *v12 = v4;
  v12[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationClient.accept(input:speechData:)(a1, a2, a3, v10, v11);
}

uint64_t closure #1 in RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for Input();
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = *(_QWORD *)(v7 + 64);
  v5[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.accept(input:speechData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(void **)(v0 + 48);
  v13 = *(_OWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, *(_QWORD *)(v0 + 40), v3);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = (v2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = swift_allocObject();
  *(_QWORD *)(v0 + 88) = v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v6, v1, v3);
  *(_OWORD *)(v8 + v7) = v13;
  *(_QWORD *)(v8 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)) = v5;
  swift_unknownObjectRetain();
  v9 = v5;
  v10 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v10;
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:);
  *(_QWORD *)(v10 + 24) = v8;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v11;
  type metadata accessor for UserInputResult();
  *v11 = v0;
  v11[1] = closure #1 in RemoteConversationClient.accept(input:speechData:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  Class v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  id v20;
  _QWORD aBlock[6];
  uint64_t v22;

  v22 = a5;
  v19 = a1;
  v20 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for Input();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C598]);
  v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v11 = v10;
  result = swift_release();
  if (!v5)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v6);
    v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14 + v13, (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
    aBlock[3] = &block_descriptor_153;
    v15 = _Block_copy(aBlock);
    swift_release();
    v16 = isa;
    objc_msgSend(v20, sel_acceptWithInputData_speechData_reply_, isa, v22, v15);
    _Block_release(v15);

    return outlined consume of Data._Representation(v9, v11);
  }
  return result;
}

Swift::Void __swiftcall RemoteConversationSpeechData.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Class isa;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Class v26;
  id v27;

  v2 = v1;
  v4 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId), *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId + 8));
  v5 = (void *)MEMORY[0x1B5E432E8](1682531186, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  v6 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrOnDevice);
  v7 = (void *)MEMORY[0x1B5E432E8](0x7665446E4F727361, 0xEB00000000656369);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v6, v7);

  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfo);
  v9 = (void *)MEMORY[0x1B5E432E8](0xD000000000000010, 0x80000001B4EFB280);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);

  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_speechPackage);
  v11 = (void *)MEMORY[0x1B5E432E8](0x6150686365657073, 0xED00006567616B63);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v10, v11);

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance + 8))
    v12 = MEMORY[0x1B5E432E8](*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance));
  else
    v12 = 0;
  v13 = (void *)MEMORY[0x1B5E432E8](0x636E617265747475, 0xE900000000000065);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v12, v13);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant + 8))
    v14 = MEMORY[0x1B5E432E8](*(_QWORD *)(v2
                                        + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant));
  else
    v14 = 0;
  v15 = (void *)MEMORY[0x1B5E432E8](0xD000000000000017, 0x80000001B4EFF7C0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v14, v15);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant + 8))
    v16 = MEMORY[0x1B5E432E8](*(_QWORD *)(v2
                                        + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant));
  else
    v16 = 0;
  v17 = (void *)MEMORY[0x1B5E432E8](0xD000000000000016, 0x80000001B4EFF7E0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v16, v17);
  swift_unknownObjectRelease();

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for ExecutionLocation();
  lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation((unint64_t *)&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation, MEMORY[0x1E0DA80B0]);
  v18 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v20 = v19;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v18, v20);
  v22 = (void *)MEMORY[0x1B5E432E8](0x7461636F4C727361, 0xEB000000006E6F69);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v22);

  v23 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v25 = v24;
  v26 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v23, v25);
  v27 = (id)MEMORY[0x1B5E432E8](0x697461636F4C6C6ELL, 0xEA00000000006E6FLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v26, v27);
  swift_release();

}

uint64_t lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ExecutionLocation();
    result = MEMORY[0x1B5E44668](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void partial apply for closure #1 in static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(a1, a2, *(void **)(v2 + 16), *(void (**)(_QWORD, _QWORD))(v2 + 24));
}

void closure #1 in static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(uint64_t a1, void *a2, void *a3, void (*a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD);
  uint64_t v24;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v9 = a3;
  v10 = a2;
  v11 = v9;
  v12 = a2;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v13, v14))
  {

    if (!a4)
      return;
    goto LABEL_7;
  }
  v15 = swift_slowAlloc();
  v22 = swift_slowAlloc();
  v24 = v22;
  *(_DWORD *)v15 = 136315394;
  v16 = objc_msgSend(v11, sel_debugDescription);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = a4;
  v19 = v18;

  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v15 + 12) = 2080;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
  v20 = Optional.debugDescription.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
  a4 = v23;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1B4BE6000, v13, v14, "Sent %s with error: %s", (uint8_t *)v15, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v22, -1, -1);
  MEMORY[0x1B5E44758](v15, -1, -1);

  if (v23)
LABEL_7:
    a4(a1, a2);
}

id FlowExtensionUserInputResultXPC.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t *v16;
  void *v17;
  unsigned __int8 v18;
  objc_super v20;

  v3 = v1;
  v4 = (void *)MEMORY[0x1B5E432E8](1701869940, 0xE400000000000000);
  v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  if ((unint64_t)v5 >= 4)
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "Could not decode FlowExtensionUserInputResultXPC: unknown .type", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }

    type metadata accessor for FlowExtensionUserInputResultXPC();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    *(_QWORD *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = v5;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSError);
    *(_QWORD *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = NSCoder.decodeObject<A>(of:forKey:)();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
    v6 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v6)
    {
      v7 = (void *)v6;
      v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = v9;

    }
    else
    {
      v8 = 0;
      v10 = 0xF000000000000000;
    }
    v16 = (uint64_t *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData];
    *v16 = v8;
    v16[1] = v10;
    v17 = (void *)MEMORY[0x1B5E432E8](0x6564756C637865, 0xE700000000000000);
    v18 = objc_msgSend(a1, sel_decodeBoolForKey_, v17);

    v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = v18;
    v20.receiver = v3;
    v20.super_class = (Class)type metadata accessor for FlowExtensionUserInputResultXPC();
    v15 = objc_msgSendSuper2(&v20, sel_init);

  }
  return v15;
}

uint64_t type metadata accessor for FlowExtensionUserInputResultXPC()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1)
{
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady()(a1, &demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:));
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UserInputResult();
  v3 = MEMORY[0x1E0C80A78](v2);
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x78))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t FlowExtensionUserInputResultXPC.swiftRepresentation()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  _QWORD v12[2];

  v4 = type metadata accessor for Input();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*(_QWORD *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type))
  {
    case 0:
      type metadata accessor for UserInputResult();
      goto LABEL_9;
    case 1:
      *a1 = *(_BYTE *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude);
      type metadata accessor for UserInputResult();
      goto LABEL_9;
    case 2:
      v8 = *(_QWORD *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData + 8);
      if (v8 >> 60 == 15)
        goto LABEL_12;
      v9 = *(_QWORD *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData);
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      outlined copy of Data._Representation(v9, v8);
      PropertyListDecoder.init()();
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E0D9C5A0]);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      outlined consume of Data?(v9, v8);
      result = swift_release();
      if (!v2)
      {
        (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(a1, v7, v4);
        type metadata accessor for UserInputResult();
LABEL_9:
        result = swift_storeEnumTagMultiPayload();
      }
      break;
    case 3:
      v11 = *(void **)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error);
      if (!v11)
        goto LABEL_13;
      v11;
      result = swift_willThrow();
      break;
    default:
      v12[1] = *(_QWORD *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
LABEL_12:
      specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000046, 0x80000001B4F05430, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/UserInputResult.swift", 118, 2, 112);
      __break(1u);
LABEL_13:
      result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000035, 0x80000001B4F05370, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/UserInputResult.swift", 118, 2, 119);
      __break(1u);
      break;
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

void *initializeWithCopy for UserInputResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t destroy for UserInputResult(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for Input();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t objectdestroy_28Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

unint64_t UserInputResult.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int EnumCaseMultiPayload;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v22;
  unint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for Input();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UserInputResult();
  MEMORY[0x1E0C80A78](v6);
  v8 = (unsigned __int8 *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UserInputResult(v1, (uint64_t)v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v3 + 32))(v5, v8, v2);
      v22 = 0;
      v23 = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v22 = 0x656D726F6665722ELL;
      v23 = 0xEF287475706E4964;
      v10._countAndFlagsBits = Input.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 41;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      v13 = v22;
      v12 = (void *)v23;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      v12 = (void *)0xEF7475706E496465;
      v13 = 0x74726F707075732ELL;
    }
  }
  else
  {
    v14 = *v8;
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v22 = 0xD00000000000001BLL;
    v23 = 0x80000001B4F05350;
    if (v14)
      v15 = 1702195828;
    else
      v15 = 0x65736C6166;
    if (v14)
      v16 = 0xE400000000000000;
    else
      v16 = 0xE500000000000000;
    v17 = v16;
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v13 = v22;
    v12 = (void *)v23;
  }
  v22 = 0;
  v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v22 = 0xD000000000000010;
  v23 = 0x80000001B4F05330;
  v19._countAndFlagsBits = v13;
  v19._object = v12;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 41;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return v22;
}

uint64_t outlined init with copy of UserInputResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserInputResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *DecisionEngine.getRREntities()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  void *v11;
  void *v12;
  char v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1B4BE6000, v7, v8, "[DecisionEngine] Beginning collecting the RRCandidates", v9, 2u);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }

  if (one-time initialization token for executor != -1)
    swift_once();
  v10 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 72));
  v11 = (void *)dispatch thunk of ReferenceResolutionClientProtocol.retrieveSalientEntities()();
  v12 = v11;
  if ((v13 & 1) != 0)
  {
    outlined copy of Result<[RRCandidate], Error>(v11, 1);
    v23 = v12;
    v24 = v12;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v34 = v3;
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v35 = (uint64_t)v12;
      v36 = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = v12;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v30 = String.init<A>(describing:)();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v36);
      v3 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<[RRCandidate], Error>(v12, 1);
      outlined consume of Result<[RRCandidate], Error>(v12, 1);
      _os_log_impl(&dword_1B4BE6000, v25, v26, "[DecisionEngine] Error when retrieving RRCandidates : %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v28, -1, -1);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }
    else
    {
      outlined consume of Result<[RRCandidate], Error>(v12, 1);
      outlined consume of Result<[RRCandidate], Error>(v12, 1);
    }

    outlined consume of Result<[RRCandidate], Error>(v12, 1);
    outlined consume of Result<[RRCandidate], Error>(v12, 1);
    v12 = (void *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    outlined copy of Result<[RRCandidate], Error>(v11, 0);
    outlined copy of Result<[RRCandidate], Error>(v12, 0);
    swift_bridgeObjectRetain();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v33 = v2;
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v36 = v17;
      v34 = v3;
      *(_DWORD *)v16 = 136315138;
      v18 = type metadata accessor for RRCandidate();
      v19 = swift_bridgeObjectRetain();
      v20 = MEMORY[0x1B5E434D4](v19, v18);
      v22 = v21;
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v36);
      v3 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v2 = v33;
      swift_bridgeObjectRelease();
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
      _os_log_impl(&dword_1B4BE6000, v14, v15, "[DecisionEngine] RRCandidates: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v17, -1, -1);
      MEMORY[0x1B5E44758](v16, -1, -1);
    }
    else
    {
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
    }

    outlined consume of Result<[RRCandidate], Error>(v12, 0);
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v12;
}

id outlined copy of Result<[RRCandidate], Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

void outlined consume of Result<[RRCandidate], Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[44] = a3;
  v4[45] = v3;
  v4[42] = a1;
  v4[43] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  v4[46] = v5;
  v4[47] = *(_QWORD *)(v5 - 8);
  v4[48] = swift_task_alloc();
  type metadata accessor for CamParse();
  v4[49] = swift_task_alloc();
  v6 = type metadata accessor for ActionCandidate();
  v4[50] = v6;
  v4[51] = *(_QWORD *)(v6 - 8);
  v4[52] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  v4[53] = swift_task_alloc();
  v7 = type metadata accessor for Parse();
  v4[54] = v7;
  v4[55] = *(_QWORD *)(v7 - 8);
  v4[56] = swift_task_alloc();
  v8 = type metadata accessor for UUID();
  v4[57] = v8;
  v4[58] = *(_QWORD *)(v8 - 8);
  v4[59] = swift_task_alloc();
  v4[60] = swift_task_alloc();
  v4[61] = swift_task_alloc();
  v9 = type metadata accessor for USOParse();
  v4[62] = v9;
  v4[63] = *(_QWORD *)(v9 - 8);
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v4[66] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v4[67] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse));
  v4[68] = v10;
  v4[69] = *(_QWORD *)(v10 - 8);
  v4[70] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse)?);
  v4[71] = swift_task_alloc();
  v4[72] = swift_task_alloc();
  v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v4[73] = v11;
  v4[74] = *(_QWORD *)(v11 - 8);
  v4[75] = swift_task_alloc();
  v4[76] = swift_task_alloc();
  v12 = type metadata accessor for Siri_Nlu_External_Parser();
  v4[77] = v12;
  v4[78] = *(_QWORD *)(v12 - 8);
  v4[79] = swift_task_alloc();
  v13 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[80] = v13;
  v4[81] = *(_QWORD *)(v13 - 8);
  v4[82] = swift_task_alloc();
  v4[83] = swift_task_alloc();
  v4[84] = swift_task_alloc();
  v4[85] = swift_task_alloc();
  v4[86] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[91] = a1;
  v4[92] = a2;
  v4[93] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  void (*v12)(uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __objc2_meth_list *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, unint64_t, uint64_t);
  uint64_t v82;
  int v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  id v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  id v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  void (*v98)(uint64_t, uint64_t);
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint64_t v117;
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  char v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t inited;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v1 = *(_BYTE *)(v0 + 936);
  v2 = *(_QWORD *)(v0 + 872);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
  v4 = *(_QWORD *)(v0 + 656);
  v5 = *(_QWORD *)(v0 + 648);
  v6 = *(_QWORD *)(v0 + 640);
  v7 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v2 + 72) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v2 + 48) = v1;
  v9 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v10 = *(_QWORD *)(v0 + 288);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v159 = v10;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v7, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v0 + 288) = v10;
  swift_bridgeObjectRelease();
  v3(v7, v8);
  USOParse.userParse.getter();
  LOBYTE(v10) = Siri_Nlu_External_UserParse.isSNLC.getter();
  v12 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v12(v4, v6);
  if ((v10 & 1) != 0)
  {
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "[ActionGenerator] Found SNLC parse. Generating dummy action candidate", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 856);
    v18 = *(_QWORD *)(v0 + 480);
    v17 = *(_QWORD *)(v0 + 488);
    v19 = *(_QWORD *)(v0 + 456);
    v20 = *(_QWORD *)(v0 + 416);
    v155 = *(_QWORD *)(v0 + 408);
    v21 = *(_QWORD **)(v0 + 392);
    v157 = *(_QWORD *)(v0 + 400);
    v22 = *(_QWORD *)(v0 + 384);
    v150 = *(_QWORD *)(v0 + 368);

    Parse.asCamParse()(v21);
    v16(v18, v17, v19);
    ActionCandidate.init(flowHandlerId:parse:affinityScore:loggingId:userData:)();
    v23 = v22 + *(int *)(v150 + 48);
    v16(v22, v17, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 32))(v23, v20, v157);
    v24 = *(__objc2_meth_list **)(v0 + 280);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_49:
      v24 = (__objc2_meth_list *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)&v24[2] + 1, 1, (unint64_t)v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v26 = (unint64_t)v24[2];
    v25 = (unint64_t)v24[3];
    if (v26 >= v25 >> 1)
      v24 = (__objc2_meth_list *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, (unint64_t)v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v28 = *(_QWORD *)(v0 + 376);
    v27 = *(_QWORD *)(v0 + 384);
    v24[2] = (__objc2_meth_list)(v26 + 1);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v27, (uint64_t)v24+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v26, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    *(_QWORD *)(v0 + 280) = v24;
  }
  v29 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
  v30 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  v31 = *(_QWORD *)(v0 + 816);
  v32 = *(_QWORD *)(v0 + 520);
  v34 = *(_QWORD *)(v0 + 488);
  v33 = *(_QWORD *)(v0 + 496);
  v35 = *(_QWORD *)(v0 + 456);
  v36 = *(_QWORD *)(v0 + 840) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 432));
  v29(v34, v35);
  v30(v32, v33);
  v24 = &OBJC_INSTANCE_METHODS__TtC14SiriKitRuntime25RemoteConversationService;
  if (v36 == v31)
  {
    swift_bridgeObjectRelease();
    v12(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 640));
    while (1)
    {
      v37 = *(_QWORD *)(v0 + 800);
      v38 = *(_QWORD *)(v0 + 784);
      v39 = *(_QWORD *)(v0 + 712);
      v40 = *(_QWORD *)(v39 + 16);
      if (v38 == v40)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 552) + 56))(*(_QWORD *)(v0 + 568), 1, 1, *(_QWORD *)(v0 + 544));
      }
      else
      {
        if (v38 >= v40)
        {
          __break(1u);
          goto LABEL_49;
        }
        v41 = *(_QWORD *)(v0 + 648);
        v42 = *(_QWORD *)(v0 + 640);
        v43 = *(unint64_t **)(v0 + 568);
        v44 = *(_QWORD *)(v0 + 552);
        v45 = *(_QWORD *)(v0 + 544);
        v46 = *(_QWORD *)(v0 + 560) + *(int *)(v45 + 48);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16))(v46, v39+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(_QWORD *)(v41 + 72) * v38, v42);
        v47 = (char *)v43 + *(int *)(v45 + 48);
        *v43 = v38;
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v47, v46, v42);
        (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v43, 0, 1, v45);
        ++v38;
      }
      *(_QWORD *)(v0 + 784) = v38;
      v48 = *(_QWORD *)(v0 + 576);
      v49 = *(_QWORD *)(v0 + 552);
      v50 = *(_QWORD *)(v0 + 544);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(_QWORD *)(v0 + 568), v48, &demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse)?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v48, 1, v50) == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v84 = *(_QWORD *)(*(_QWORD *)(v0 + 704) + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
        if (v84)
        {
          v85 = *(void **)(v84 + 16);
          if (v85)
          {
            v87 = *(_QWORD *)(v0 + 472);
            v86 = *(_QWORD *)(v0 + 480);
            v88 = *(_QWORD *)(v0 + 464);
            v153 = *(_QWORD *)(v0 + 456);
            v89 = *(_QWORD *)(v0 + 432);
            v90 = *(_QWORD *)(v0 + 440);
            v91 = *(_QWORD **)(v0 + 424);
            v92 = v85;
            UUID.init()();
            v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16);
            v93(v86, v87, v153);
            *v91 = v92;
            (*(void (**)(_QWORD *, _QWORD, uint64_t))(v90 + 104))(v91, *MEMORY[0x1E0D9C5F8], v89);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v91, 0, 1, v89);
            v94 = v92;
            specialized SimpleOrderedDictionary.subscript.setter((uint64_t)v91, v86);
            v93(v86, v87, v153);
            v95 = *(_QWORD *)(v0 + 312);
            v96 = *(_QWORD *)(v95 + 16);
            v97 = swift_isUniquelyReferenced_nonNull_native();
            v159 = v95;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v96, v86, v97);
            *(_QWORD *)(v0 + 312) = v95;
            swift_bridgeObjectRelease();
            v98 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
            v98(v86, v153);
            v99 = Logger.logObject.getter();
            v100 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v99, v100))
            {
              v101 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v101 = 0;
              _os_log_impl(&dword_1B4BE6000, v99, v100, "[ActionGenerator] Found PommesResponse. Generating parse for it", v101, 2u);
              MEMORY[0x1B5E44758](v101, -1, -1);
            }
            v102 = *(_QWORD *)(v0 + 472);
            v103 = *(_QWORD *)(v0 + 456);

            v98(v102, v103);
          }
        }
        *(_QWORD *)(v0 + 888) = v37;
        v104 = Logger.logObject.getter();
        v105 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v104, v105))
        {
          v106 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v106 = 0;
          _os_log_impl(&dword_1B4BE6000, v104, v105, "[ActionGenerator] Finding plugins/extensions", v106, 2u);
          MEMORY[0x1B5E44758](v106, -1, -1);
        }

        v107 = *(_QWORD *)(v0 + 232);
        v108 = *(_QWORD *)(v0 + 240);
        *(_QWORD *)(v0 + 896) = v107;
        *(_QWORD *)(v0 + 904) = v108;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v109 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 912) = v109;
        *v109 = v0;
        v109[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
        return ConversationHandlerLocator.allHandlers(for:)(v107, v108);
      }
      v51 = *(_QWORD *)(v0 + 664);
      v52 = *(_QWORD *)(v0 + 648);
      v53 = *(_QWORD *)(v0 + 640);
      v54 = *(char **)(v0 + 576);
      v55 = *(_QWORD *)(v0 + 544);
      *(_QWORD *)(v0 + 792) = *(_QWORD *)v54;
      v56 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v51, &v54[*(int *)(v55 + 48)], v53);
      v57 = MEMORY[0x1B5E3FA6C](v56);
      v58 = *(_QWORD *)(v57 + 16);
      v59 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      v60 = *(_QWORD *)(v59 - 8);
      if (v58)
      {
        (*(void (**)(_QWORD, unint64_t, uint64_t))(v60 + 16))(*(_QWORD *)(v0 + 536), v57 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80)), v59);
        v61 = 0;
      }
      else
      {
        v61 = 1;
      }
      v62 = *(_QWORD *)(v0 + 536);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v62, v61, 1, v59);
      swift_bridgeObjectRelease();
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v62, 1, v59);
      v64 = *(_QWORD *)(v0 + 536);
      if (v63 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      }
      else
      {
        v65 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v64, v59);
        if (v65)
        {
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          swift_release();
          if (*(_QWORD *)(v0 + 200))
          {
            type metadata accessor for UsoTask_run_common_VoiceCommand();
            if ((swift_dynamicCast() & 1) != 0)
            {
              v66 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
              swift_release();
              swift_release();
              if (*(_QWORD *)(v66 + 16))
                goto LABEL_30;
              goto LABEL_24;
            }
            swift_release();
          }
          else
          {
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v0 + 176, (uint64_t *)&demangling cache variable for type metadata for Any?);
          }
        }
      }
      v66 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      {
LABEL_30:
        v76 = *(_QWORD *)(v0 + 776);
        v77 = *(_QWORD *)(v0 + 664);
        v78 = swift_task_alloc();
        *(_QWORD *)(v78 + 16) = v76;
        *(_QWORD *)(v78 + 24) = v77;
        v70 = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:), v78, v66);
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
LABEL_24:
      swift_bridgeObjectRelease();
      v67 = Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter();
      v68 = *(_QWORD *)(v0 + 664);
      if (!v67[2])
      {
        v71 = *(_QWORD *)(v0 + 656);
        v72 = *(_QWORD *)(v0 + 648);
        v73 = *(_QWORD *)(v0 + 640);
        v74 = *(_QWORD *)(v0 + 632);
        v141 = *(_QWORD *)(v0 + 624);
        v143 = *(_QWORD *)(v0 + 616);
        v145 = *(_QWORD *)(v0 + 592);
        v148 = *(_QWORD *)(v0 + 584);
        v75 = *(_QWORD *)(v0 + 528);
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>);
        v70 = swift_allocObject();
        *(_OWORD *)(v70 + 16) = xmmword_1B4EE3F50;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v71, v68, v73);
        Siri_Nlu_External_UserParse.parser.getter();
        Siri_Nlu_External_Parser.parserID.getter();
        (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v74, v143);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v75, 0, 1, v148);
        USOParse.init(userParse:parserIdentifier:appBundleId:)();
        goto LABEL_32;
      }
      v69 = swift_task_alloc();
      *(_QWORD *)(v69 + 16) = v68;
      v70 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5((void (*)(_QWORD *))partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:), v69, (uint64_t)v67);
      swift_bridgeObjectRelease();
LABEL_31:
      swift_task_dealloc();
LABEL_32:
      *(_QWORD *)(v0 + 808) = v70;
      *(_QWORD *)(v0 + 800) = v37;
      v79 = *(_QWORD *)(v70 + 16);
      *(_QWORD *)(v0 + 816) = v79;
      if (v79)
      {
        v80 = 0;
        v111 = *(_QWORD *)(v0 + 504);
        v83 = *(_DWORD *)(v111 + 80);
        *(_DWORD *)(v0 + 932) = v83;
        v82 = *(_QWORD *)(v111 + 72);
        *(_QWORD *)(v0 + 824) = v82;
        v81 = *(void (**)(uint64_t, unint64_t, uint64_t))(v111 + 16);
        *(_QWORD *)(v0 + 832) = v81;
        goto LABEL_44;
      }
      v24 = *(__objc2_meth_list **)(v0 + 648);
      swift_bridgeObjectRelease();
      v12 = (void (*)(uint64_t, uint64_t))v24[1];
      v12(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 640));
    }
  }
  v80 = *(_QWORD *)(v0 + 840) + 1;
  v81 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 832);
  v82 = *(_QWORD *)(v0 + 824);
  LOBYTE(v83) = *(_BYTE *)(v0 + 932);
  v70 = *(_QWORD *)(v0 + 808);
LABEL_44:
  *(_QWORD *)(v0 + 840) = v80;
  v112 = *(_QWORD *)(v0 + 520);
  v113 = *(_QWORD *)(v0 + 512);
  v114 = *(_QWORD *)(v0 + 496);
  v81(v112, v70 + ((v83 + 32) & ~(unint64_t)v83) + v82 * v80, v114);
  v81(v113, v112, v114);
  v115 = Logger.logObject.getter();
  v116 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v115, v116))
  {
    v117 = *(_QWORD *)(v0 + 656);
    v139 = *(_QWORD *)(v0 + 648);
    v140 = *(_QWORD *)(v0 + 640);
    v118 = *(_QWORD *)(v0 + 632);
    v142 = *(_QWORD *)(v0 + 624);
    v144 = *(_QWORD *)(v0 + 616);
    v146 = *(_QWORD *)(v0 + 512);
    v151 = *(_QWORD *)(v0 + 504);
    v158 = *(_QWORD *)(v0 + 496);
    v119 = (uint8_t *)swift_slowAlloc();
    v120 = swift_slowAlloc();
    v159 = v120;
    *(_DWORD *)v119 = 136315138;
    USOParse.userParse.getter();
    Siri_Nlu_External_UserParse.parser.getter();
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v117, v140);
    Siri_Nlu_External_Parser.parserID.getter();
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v118, v144);
    v121 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v122, &v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v123 = *(void (**)(uint64_t, uint64_t))(v151 + 8);
    v123(v146, v158);
    _os_log_impl(&dword_1B4BE6000, v115, v116, "[ActionGenerator] Generating UUID for parse of type: %s", v119, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v120, -1, -1);
    MEMORY[0x1B5E44758](v119, -1, -1);
  }
  else
  {
    v123 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 504) + 8);
    v123(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 496));
  }

  *(_QWORD *)(v0 + 848) = v123;
  v147 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  v149 = *(_DWORD *)(v0 + 928);
  v124 = *(_QWORD *)(v0 + 520);
  v125 = *(_QWORD *)(v0 + 488);
  v126 = *(_QWORD *)(v0 + 496);
  v127 = *(_QWORD *)(v0 + 480);
  v128 = *(_QWORD *)(v0 + 464);
  v154 = v128;
  v156 = *(_QWORD *)(v0 + 792);
  v129 = *(_QWORD *)(v0 + 448);
  v152 = *(_QWORD *)(v0 + 456);
  v130 = *(_QWORD *)(v0 + 432);
  v131 = *(_QWORD *)(v0 + 440);
  v132 = *(_QWORD *)(v0 + 424);
  UUID.init()();
  v147(v129, v124, v126);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v131 + 104))(v129, v149, v130);
  v133 = *(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16);
  *(_QWORD *)(v0 + 856) = v133;
  v133(v127, v125, v152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 16))(v132, v129, v130);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v131 + 56))(v132, 0, 1, v130);
  specialized SimpleOrderedDictionary.subscript.setter(v132, v127);
  v133(v127, v125, v152);
  v134 = *(_QWORD *)(v0 + 312);
  v135 = swift_isUniquelyReferenced_nonNull_native();
  v159 = v134;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v156, v127, v135);
  *(_QWORD *)(v0 + 312) = v159;
  swift_bridgeObjectRelease();
  v136 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
  *(_QWORD *)(v0 + 864) = v136;
  v136(v127, v152);
  v133(v127, v125, v152);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 872) = inited;
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x80000001B4EF6420;
  v138 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 880) = v138;
  *v138 = v0;
  v138[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
  return USOParse.isEnabledAppShortcutInvocation(provider:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *inited;
  uint64_t result;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  id v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void (*v67)(uint64_t, uint64_t);
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  void (*v82)(uint64_t, unint64_t, uint64_t);
  unint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  char isUniquelyReferenced_nonNull_native;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v1 = v0 + 176;
  v2 = *(_QWORD *)(v0 + 744);
  v3 = *(_QWORD *)(v0 + 736);
  v4 = *(_QWORD *)(v0 + 728);
  *(_QWORD *)(v0 + 768) = v2;
  *(_QWORD *)(v0 + 760) = v3;
  *(_QWORD *)(v0 + 752) = v4;
  type metadata accessor for AppShortcutParseExpansion();
  inited = (_QWORD *)swift_initStackObject();
  *(_QWORD *)(v0 + 776) = inited;
  inited[2] = v4;
  inited[3] = v3;
  inited[4] = v2;
  *(_DWORD *)(v0 + 928) = *MEMORY[0x1E0D9C678];
  swift_bridgeObjectRetain();
  swift_retain();
  result = swift_retain();
  v7 = 0;
  for (i = 0; ; i = *(_QWORD *)(v0 + 784))
  {
    v9 = *(_QWORD *)(v0 + 712);
    v10 = *(_QWORD *)(v9 + 16);
    if (i == v10)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 552) + 56))(*(_QWORD *)(v0 + 568), 1, 1, *(_QWORD *)(v0 + 544));
    }
    else
    {
      if (i >= v10)
      {
        __break(1u);
        return result;
      }
      v11 = *(_QWORD *)(v0 + 648);
      v12 = *(_QWORD *)(v0 + 640);
      v13 = *(unint64_t **)(v0 + 568);
      v14 = *(_QWORD *)(v0 + 552);
      v15 = *(_QWORD *)(v0 + 544);
      v16 = *(_QWORD *)(v0 + 560) + *(int *)(v15 + 48);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v16, v9+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * i, v12);
      v17 = (char *)v13 + *(int *)(v15 + 48);
      *v13 = i;
      v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
      v1 = v0 + 176;
      v18(v17, v16, v12);
      (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, v15);
      ++i;
    }
    *(_QWORD *)(v0 + 784) = i;
    v19 = *(_QWORD *)(v0 + 576);
    v20 = *(_QWORD *)(v0 + 552);
    v21 = *(_QWORD *)(v0 + 544);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(_QWORD *)(v0 + 568), v19, &demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v19, 1, v21) == 1)
      break;
    v22 = *(_QWORD *)(v0 + 664);
    v23 = *(_QWORD *)(v0 + 648);
    v24 = *(_QWORD *)(v0 + 640);
    v25 = *(char **)(v0 + 576);
    v26 = *(_QWORD *)(v0 + 544);
    *(_QWORD *)(v0 + 792) = *(_QWORD *)v25;
    v27 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v22, &v25[*(int *)(v26 + 48)], v24);
    v28 = MEMORY[0x1B5E3FA6C](v27);
    v29 = *(_QWORD *)(v28 + 16);
    v30 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    v31 = *(_QWORD *)(v30 - 8);
    if (v29)
    {
      (*(void (**)(_QWORD, unint64_t, uint64_t))(v31 + 16))(*(_QWORD *)(v0 + 536), v28 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)), v30);
      v32 = 0;
    }
    else
    {
      v32 = 1;
    }
    v33 = *(_QWORD *)(v0 + 536);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v33, v32, 1, v30);
    swift_bridgeObjectRelease();
    v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v33, 1, v30);
    v35 = *(_QWORD *)(v0 + 536);
    if (v34 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      v36 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v30);
      if (v36)
      {
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        swift_release();
        if (*(_QWORD *)(v0 + 200))
        {
          type metadata accessor for UsoTask_run_common_VoiceCommand();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v37 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
            swift_release();
            swift_release();
            if (*(_QWORD *)(v37 + 16))
              goto LABEL_22;
            goto LABEL_16;
          }
          swift_release();
        }
        else
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v1, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
      }
    }
    v37 = MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
LABEL_22:
      v48 = *(_QWORD *)(v0 + 776);
      v49 = *(_QWORD *)(v0 + 664);
      v50 = swift_task_alloc();
      *(_QWORD *)(v50 + 16) = v48;
      *(_QWORD *)(v50 + 24) = v49;
      v41 = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:), v50, v37);
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    v38 = Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter();
    v39 = *(_QWORD *)(v0 + 664);
    if (!v38[2])
    {
      v42 = *(_QWORD *)(v0 + 656);
      v43 = *(_QWORD *)(v0 + 648);
      v44 = *(_QWORD *)(v0 + 640);
      v45 = *(_QWORD *)(v0 + 632);
      v111 = *(_QWORD *)(v0 + 624);
      v112 = *(_QWORD *)(v0 + 616);
      v114 = *(_QWORD *)(v0 + 592);
      v117 = *(_QWORD *)(v0 + 584);
      v46 = *(_QWORD *)(v0 + 528);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>);
      v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_1B4EE3F50;
      v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
      v1 = v0 + 176;
      v47(v42, v39, v44);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v45, v112);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v114 + 56))(v46, 0, 1, v117);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      goto LABEL_24;
    }
    v40 = swift_task_alloc();
    *(_QWORD *)(v40 + 16) = v39;
    v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5((void (*)(_QWORD *))partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:), v40, (uint64_t)v38);
    swift_bridgeObjectRelease();
LABEL_23:
    swift_task_dealloc();
LABEL_24:
    *(_QWORD *)(v0 + 808) = v41;
    *(_QWORD *)(v0 + 800) = v7;
    v51 = *(_QWORD *)(v41 + 16);
    *(_QWORD *)(v0 + 816) = v51;
    if (v51)
    {
      v80 = *(_QWORD *)(v0 + 496);
      v79 = *(_QWORD *)(v0 + 504);
      v81 = *(_DWORD *)(v79 + 80);
      *(_DWORD *)(v0 + 932) = v81;
      *(_QWORD *)(v0 + 824) = *(_QWORD *)(v79 + 72);
      v82 = *(void (**)(uint64_t, unint64_t, uint64_t))(v79 + 16);
      *(_QWORD *)(v0 + 832) = v82;
      *(_QWORD *)(v0 + 840) = 0;
      v83 = *(_QWORD *)(v0 + 520);
      v84 = *(_QWORD *)(v0 + 512);
      v82(v83, v41 + ((v81 + 32) & ~(unint64_t)v81), v80);
      v82(v84, v83, v80);
      v85 = Logger.logObject.getter();
      v86 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = *(_QWORD *)(v0 + 656);
        v109 = *(_QWORD *)(v0 + 648);
        v110 = *(_QWORD *)(v0 + 640);
        v88 = *(_QWORD *)(v0 + 632);
        v113 = *(_QWORD *)(v0 + 624);
        v115 = *(_QWORD *)(v0 + 616);
        v118 = *(_QWORD *)(v0 + 512);
        v123 = *(_QWORD *)(v0 + 504);
        v125 = *(_QWORD *)(v0 + 496);
        v89 = (uint8_t *)swift_slowAlloc();
        v90 = swift_slowAlloc();
        v126 = v90;
        *(_DWORD *)v89 = 136315138;
        USOParse.userParse.getter();
        Siri_Nlu_External_UserParse.parser.getter();
        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v87, v110);
        Siri_Nlu_External_Parser.parserID.getter();
        (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v88, v115);
        v91 = String.init<A>(describing:)();
        *(_QWORD *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v93 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
        v93(v118, v125);
        _os_log_impl(&dword_1B4BE6000, v85, v86, "[ActionGenerator] Generating UUID for parse of type: %s", v89, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v90, -1, -1);
        MEMORY[0x1B5E44758](v89, -1, -1);
      }
      else
      {
        v93 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 504) + 8);
        v93(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 496));
      }

      *(_QWORD *)(v0 + 848) = v93;
      v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
      v119 = *(_DWORD *)(v0 + 928);
      v94 = *(_QWORD *)(v0 + 520);
      v95 = *(_QWORD *)(v0 + 488);
      v96 = *(_QWORD *)(v0 + 496);
      v97 = *(_QWORD *)(v0 + 480);
      v98 = *(_QWORD *)(v0 + 464);
      v122 = v98;
      v124 = *(_QWORD *)(v0 + 792);
      v99 = *(_QWORD *)(v0 + 448);
      v120 = *(_QWORD *)(v0 + 456);
      v100 = *(_QWORD *)(v0 + 432);
      v101 = *(_QWORD *)(v0 + 440);
      v102 = *(_QWORD *)(v0 + 424);
      UUID.init()();
      v116(v99, v94, v96);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v101 + 104))(v99, v119, v100);
      v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16);
      *(_QWORD *)(v0 + 856) = v103;
      v103(v97, v95, v120);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 16))(v102, v99, v100);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v101 + 56))(v102, 0, 1, v100);
      specialized SimpleOrderedDictionary.subscript.setter(v102, v97);
      v103(v97, v95, v120);
      v104 = *(_QWORD *)(v0 + 312);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v126 = v104;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v124, v97, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v0 + 312) = v126;
      swift_bridgeObjectRelease();
      v106 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
      *(_QWORD *)(v0 + 864) = v106;
      v106(v97, v120);
      v103(v97, v95, v120);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v107 = swift_initStackObject();
      *(_QWORD *)(v0 + 872) = v107;
      *(_OWORD *)(v107 + 16) = xmmword_1B4EE3F50;
      *(_QWORD *)(v107 + 32) = 0xD000000000000014;
      *(_QWORD *)(v107 + 40) = 0x80000001B4EF6420;
      v108 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 880) = v108;
      *v108 = v0;
      v108[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
      return USOParse.isEnabledAppShortcutInvocation(provider:)();
    }
    v52 = *(_QWORD *)(v0 + 648);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(_QWORD, _QWORD))(v52 + 8))(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 640));
    v7 = *(_QWORD *)(v0 + 800);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v53 = *(_QWORD *)(*(_QWORD *)(v0 + 704) + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
  if (v53)
  {
    v54 = *(void **)(v53 + 16);
    if (v54)
    {
      v56 = *(_QWORD *)(v0 + 472);
      v55 = *(_QWORD *)(v0 + 480);
      v57 = *(_QWORD *)(v0 + 464);
      v121 = *(_QWORD *)(v0 + 456);
      v58 = *(_QWORD *)(v0 + 432);
      v59 = *(_QWORD *)(v0 + 440);
      v60 = *(_QWORD **)(v0 + 424);
      v61 = v54;
      UUID.init()();
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16);
      v62(v55, v56, v121);
      *v60 = v61;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v59 + 104))(v60, *MEMORY[0x1E0D9C5F8], v58);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v58);
      v63 = v61;
      specialized SimpleOrderedDictionary.subscript.setter((uint64_t)v60, v55);
      v62(v55, v56, v121);
      v64 = *(_QWORD *)(v0 + 312);
      v65 = *(_QWORD *)(v64 + 16);
      v66 = swift_isUniquelyReferenced_nonNull_native();
      v126 = v64;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65, v55, v66);
      *(_QWORD *)(v0 + 312) = v64;
      swift_bridgeObjectRelease();
      v67 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v67(v55, v121);
      v68 = Logger.logObject.getter();
      v69 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v70 = 0;
        _os_log_impl(&dword_1B4BE6000, v68, v69, "[ActionGenerator] Found PommesResponse. Generating parse for it", v70, 2u);
        MEMORY[0x1B5E44758](v70, -1, -1);
      }
      v71 = *(_QWORD *)(v0 + 472);
      v72 = *(_QWORD *)(v0 + 456);

      v67(v71, v72);
    }
  }
  *(_QWORD *)(v0 + 888) = v7;
  v73 = Logger.logObject.getter();
  v74 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v75 = 0;
    _os_log_impl(&dword_1B4BE6000, v73, v74, "[ActionGenerator] Finding plugins/extensions", v75, 2u);
    MEMORY[0x1B5E44758](v75, -1, -1);
  }

  v76 = *(_QWORD *)(v0 + 232);
  v77 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 896) = v76;
  *(_QWORD *)(v0 + 904) = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 912) = v78;
  *v78 = v0;
  v78[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
  return ConversationHandlerLocator.allHandlers(for:)(v76, v77);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 920);
  v2 = *(_QWORD *)(v0 + 888);
  *(_QWORD *)(swift_task_alloc() + 16) = v0 + 288;
  v3 = specialized Sequence.compactMap<A>(_:)(v1, (void (*)(char *, char *, uint64_t, uint64_t))partial apply for closure #2 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  specialized Array.append<A>(contentsOf:)(v3);
  v4 = *(_QWORD **)(v0 + 280);
  v11 = v4;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(&v11, (uint64_t *)(v0 + 312));
  if (v2)
    return swift_release();
  swift_bridgeObjectRelease();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDV4uuid_7SiriCam15ActionCandidateV06actionJ0tG_ALs5NeverOTg504_s14g12KitRuntime15i77GeneratorC08generateD10Candidates4from02rrG019appShortcutProviderSay0A3Cam0D9j29VGAA21ConversationUserInputC_W177A28ReferenceResolutionDataModel11RRCandidateVG0aB4Flow03AppK9Providing_ptYaFAJ10Foundation4UUIDV4uuid_AJ06actionN0t_tcfu1_33_40673c41111a6ef0d8501a99c5a3b4d4AvW_AjXtAJTf3nnnpk_nTf1cn_n((uint64_t)v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v8 = 134217984;
    v9 = v4[2];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 264) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "[ActionGenerator] Sorting and returning %ld ActionCandidates", v8, 0xCu);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(unint64_t, uint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *inited;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  id v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  void (*v111)(uint64_t, uint64_t);
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  void (*v126)(uint64_t, unint64_t, uint64_t);
  unint64_t v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint8_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  char isUniquelyReferenced_nonNull_native;
  void (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t, uint64_t);
  void (*v171)(uint64_t, unint64_t);
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    goto LABEL_74;
  while (1)
  {
    v2 = type metadata accessor for Logger();
    v1[87] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[ActionGenerator] Generating actions", v5, 2u);
      MEMORY[0x1B5E44758](v5, -1, -1);
    }
    v6 = v1[42];

    v7 = MEMORY[0x1E0DEE9D8];
    v1[29] = MEMORY[0x1E0DEE9E0];
    v1[30] = v7;
    v1[39] = specialized Dictionary.init(dictionaryLiteral:)(v7, &demangling cache variable for type metadata for (UUID, Int), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
    v8 = specialized Dictionary.init(dictionaryLiteral:)(v7, &demangling cache variable for type metadata for (UUID, [String : Any]), &demangling cache variable for type metadata for _DictionaryStorage<UUID, [String : Any]>);
    v1[35] = v7;
    v1[36] = v8;
    v155 = v7;
    v9 = *(_QWORD *)(v6 + 40);
    v1[88] = v9;
    if (!v9)
    {
      v40 = 0;
      goto LABEL_65;
    }
    v10 = *(_QWORD *)(v9 + 16);
    v180 = v1;
    if (!*(_QWORD *)(v10 + 16))
      break;
    swift_bridgeObjectRetain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v13 = 134217984;
      v1[41] = *(_QWORD *)(v10 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v11, v12, "[ActionGenerator] Found %ld unranked parses.", v13, 0xCu);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

    v14 = specialized ActionGenerator.dedupeAppShortcuts(parses:)(v10);
    swift_bridgeObjectRelease();
    v15 = v14;
    v181 = MEMORY[0x1E0DEE9D8];
    v161 = *(_QWORD *)(v14 + 16);
    if (!v161)
    {
LABEL_21:
      v1[89] = v155;
      swift_bridgeObjectRelease();
      if (one-time initialization token for forceEnabled != -1)
        swift_once();
      swift_beginAccess();
      v37 = static LinkFeature.forceEnabled;
      if (*(_QWORD *)(static LinkFeature.forceEnabled + 16)
        && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(), (v39 & 1) != 0))
      {
        if (*(_BYTE *)(*(_QWORD *)(v37 + 56) + v38) != 1)
          goto LABEL_31;
      }
      else
      {
        v1[20] = &type metadata for LinkFeature;
        v1[21] = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
        v41 = isFeatureEnabled(_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 17));
        if ((v41 & 1) == 0)
          goto LABEL_31;
      }
      v42 = swift_retain();
      v43 = specialized Sequence<>.isContainsAppShortcutParse.getter(v42);
      swift_release();
      if ((v43 & 1) != 0)
      {
        v44 = (_QWORD *)swift_task_alloc();
        v1[90] = v44;
        *v44 = v1;
        v44[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
        return ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:)(v1[43], v155);
      }
LABEL_31:
      v172 = (uint64_t)(v1 + 22);
      if (one-time initialization token for emptyContext != -1)
        swift_once();
      v46 = static AppShortcutExpansionContext.emptyContext;
      v47 = *(_QWORD *)algn_1ED515578;
      v48 = qword_1ED515580;
      v1[96] = qword_1ED515580;
      v1[95] = v47;
      v1[94] = v46;
      type metadata accessor for AppShortcutParseExpansion();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      inited = (_QWORD *)swift_initStackObject();
      v1[97] = inited;
      inited[2] = v46;
      inited[3] = v47;
      inited[4] = v48;
      *((_DWORD *)v1 + 232) = *MEMORY[0x1E0D9C678];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v40 = 0;
      v50 = 0;
      while (2)
      {
        v51 = v1[89];
        v52 = *(_QWORD *)(v51 + 16);
        if (v50 == v52)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[69] + 56))(v1[71], 1, 1, v1[68]);
        }
        else
        {
          if (v50 >= v52)
            goto LABEL_73;
          v53 = v1[81];
          v54 = v1[80];
          v55 = (unint64_t *)v1[71];
          v56 = v1[69];
          v57 = v1[68];
          v58 = v1[70] + *(int *)(v57 + 48);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v53 + 16))(v58, v51+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v50, v54);
          v59 = (char *)v55 + *(int *)(v57 + 48);
          *v55 = v50;
          (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v59, v58, v54);
          (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v55, 0, 1, v57);
          ++v50;
          v1 = v180;
        }
        v1[98] = v50;
        v60 = v1[72];
        v61 = v1[69];
        v62 = v1[68];
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1[71], v60, &demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse)?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v60, 1, v62) == 1)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_setDeallocating();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v9 = v1[88];
          goto LABEL_60;
        }
        v63 = v1[83];
        v64 = v1[81];
        v65 = v1[80];
        v66 = (char *)v1[72];
        v67 = v1[68];
        v1[99] = *(_QWORD *)v66;
        v68 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v64 + 32))(v63, &v66[*(int *)(v67 + 48)], v65);
        v69 = MEMORY[0x1B5E3FA6C](v68);
        v70 = *(_QWORD *)(v69 + 16);
        v71 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
        v72 = *(_QWORD *)(v71 - 8);
        if (v70)
        {
          (*(void (**)(_QWORD, unint64_t, uint64_t))(v72 + 16))(v1[67], v69 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80)), v71);
          v73 = 0;
        }
        else
        {
          v73 = 1;
        }
        v74 = v1[67];
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, v73, 1, v71);
        swift_bridgeObjectRelease();
        v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v74, 1, v71);
        v76 = v1[67];
        if (v75 == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v1[67], &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
          goto LABEL_53;
        }
        v77 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v76, v71);
        if (v77)
        {
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          swift_release();
          if (v1[25])
          {
            type metadata accessor for UsoTask_run_common_VoiceCommand();
            if ((swift_dynamicCast() & 1) != 0)
            {
              v78 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
              swift_release();
              swift_release();
              if (!*(_QWORD *)(v78 + 16))
                goto LABEL_48;
LABEL_54:
              v90 = v1[97];
              v91 = v1[83];
              v92 = swift_task_alloc();
              *(_QWORD *)(v92 + 16) = v90;
              *(_QWORD *)(v92 + 24) = v91;
              v82 = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:), v92, v78);
              swift_bridgeObjectRelease();
LABEL_55:
              swift_task_dealloc();
              goto LABEL_56;
            }
            swift_release();
          }
          else
          {
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v172, (uint64_t *)&demangling cache variable for type metadata for Any?);
          }
        }
LABEL_53:
        v78 = MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
          goto LABEL_54;
LABEL_48:
        swift_bridgeObjectRelease();
        v79 = Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter();
        v80 = v1[83];
        if (v79[2])
        {
          v81 = swift_task_alloc();
          *(_QWORD *)(v81 + 16) = v80;
          v82 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5((void (*)(_QWORD *))partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:), v81, (uint64_t)v79);
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        v83 = v1[82];
        v84 = v1[81];
        v85 = v1[80];
        v86 = v180[79];
        v87 = v180[78];
        v162 = v180[77];
        v165 = v180[74];
        v168 = v180[73];
        v88 = v180[66];
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>);
        v82 = swift_allocObject();
        *(_OWORD *)(v82 + 16) = xmmword_1B4EE3F50;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v83, v80, v85);
        Siri_Nlu_External_UserParse.parser.getter();
        Siri_Nlu_External_Parser.parserID.getter();
        v89 = v86;
        v1 = v180;
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v89, v162);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v165 + 56))(v88, 0, 1, v168);
        USOParse.init(userParse:parserIdentifier:appBundleId:)();
LABEL_56:
        v1[101] = v82;
        v1[100] = v40;
        v93 = *(_QWORD *)(v82 + 16);
        v1[102] = v93;
        if (v93)
        {
          v124 = v1[62];
          v123 = v1[63];
          v125 = *(_DWORD *)(v123 + 80);
          *((_DWORD *)v1 + 233) = v125;
          v1[103] = *(_QWORD *)(v123 + 72);
          v126 = *(void (**)(uint64_t, unint64_t, uint64_t))(v123 + 16);
          v1[104] = v126;
          v1[105] = 0;
          v127 = v1[65];
          v128 = v1[64];
          v126(v127, v82 + ((v125 + 32) & ~(unint64_t)v125), v124);
          v126(v128, v127, v124);
          v129 = Logger.logObject.getter();
          v130 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v129, v130))
          {
            v131 = v180[82];
            v132 = v180[81];
            v158 = v180[80];
            v133 = v180[79];
            v163 = v180[78];
            v166 = v180[77];
            v169 = v180[64];
            v175 = v180[63];
            v178 = v180[62];
            v134 = (uint8_t *)swift_slowAlloc();
            v135 = swift_slowAlloc();
            v181 = v135;
            *(_DWORD *)v134 = 136315138;
            USOParse.userParse.getter();
            Siri_Nlu_External_UserParse.parser.getter();
            v136 = v131;
            v1 = v180;
            (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v136, v158);
            Siri_Nlu_External_Parser.parserID.getter();
            (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v133, v166);
            v137 = String.init<A>(describing:)();
            v180[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v138, &v181);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v139 = *(void (**)(uint64_t, uint64_t))(v175 + 8);
            v139(v169, v178);
            _os_log_impl(&dword_1B4BE6000, v129, v130, "[ActionGenerator] Generating UUID for parse of type: %s", v134, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v135, -1, -1);
            MEMORY[0x1B5E44758](v134, -1, -1);
          }
          else
          {
            v139 = *(void (**)(uint64_t, uint64_t))(v1[63] + 8);
            v139(v1[64], v1[62]);
          }

          v1[106] = v139;
          v170 = (void (*)(uint64_t, uint64_t, uint64_t))v1[104];
          v179 = v1[99];
          v173 = *((_DWORD *)v1 + 232);
          v140 = v1[65];
          v142 = v1[61];
          v141 = v1[62];
          v143 = v1[60];
          v144 = v1[58];
          v176 = v1[57];
          v145 = v1[55];
          v146 = v1[56];
          v148 = v1[53];
          v147 = v1[54];
          UUID.init()();
          v170(v146, v140, v141);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v145 + 104))(v146, v173, v147);
          v149 = *(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 16);
          v1[107] = v149;
          v149(v143, v142, v176);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v145 + 16))(v148, v146, v147);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v148, 0, 1, v147);
          specialized SimpleOrderedDictionary.subscript.setter(v148, v143);
          v149(v143, v142, v176);
          v150 = v1[39];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v181 = v150;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v179, v143, isUniquelyReferenced_nonNull_native);
          v1[39] = v181;
          swift_bridgeObjectRelease();
          v152 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
          v1[108] = v152;
          v152(v143, v176);
          v149(v143, v142, v176);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          v153 = swift_initStackObject();
          v1[109] = v153;
          *(_OWORD *)(v153 + 16) = xmmword_1B4EE3F50;
          *(_QWORD *)(v153 + 32) = 0xD000000000000014;
          *(_QWORD *)(v153 + 40) = 0x80000001B4EF6420;
          v154 = (_QWORD *)swift_task_alloc();
          v1[110] = v154;
          *v154 = v1;
          v154[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
          return USOParse.isEnabledAppShortcutInvocation(provider:)();
        }
        v94 = v1[81];
        swift_bridgeObjectRelease();
        (*(void (**)(_QWORD, _QWORD))(v94 + 8))(v1[83], v1[80]);
        v40 = v1[100];
        v50 = v1[98];
        continue;
      }
    }
    v16 = 0;
    v17 = v1[81];
    v157 = v1[74];
    v159 = v1[78];
    v156 = *MEMORY[0x1E0D9F100];
    v155 = MEMORY[0x1E0DEE9D8];
    v160 = v14;
    while (v16 < *(_QWORD *)(v15 + 16))
    {
      v19 = v1[86];
      v177 = v1[85];
      v20 = v1[79];
      v21 = v1[77];
      v22 = v1[76];
      v23 = v1[75];
      v24 = v1[73];
      v164 = *(_QWORD *)(v17 + 72);
      v167 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      v171 = *(void (**)(uint64_t, unint64_t))(v17 + 16);
      v174 = v1[80];
      v171(v19, v15 + v167 + v164 * v16);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v20, v21);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v157 + 104))(v23, v156, v24);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F178]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v25 = v180[31];
      v26 = v180[32];
      v27 = *(void (**)(uint64_t, uint64_t))(v157 + 8);
      v27(v23, v24);
      v27(v22, v24);
      ((void (*)(uint64_t, uint64_t, uint64_t))v171)(v177, v19, v174);
      v1 = v180;
      v28 = v180[85];
      v29 = v180[80];
      if (v25 == v26)
      {
        v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
        v18(v180[85], v180[80]);
      }
      else
      {
        v30 = Siri_Nlu_External_UserParse.isOverriddenPSC.getter();
        v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
        v18(v28, v29);
        if ((v30 & 1) == 0)
        {
          v31 = *(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32);
          v31(v180[84], v180[86], v180[80]);
          v32 = v155;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v155 + 16) + 1, 1);
            v32 = v181;
          }
          v34 = *(_QWORD *)(v32 + 16);
          v33 = *(_QWORD *)(v32 + 24);
          if (v34 >= v33 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
            v32 = v181;
          }
          v35 = v180[84];
          v36 = v180[80];
          *(_QWORD *)(v32 + 16) = v34 + 1;
          v31(v32 + v167 + v34 * v164, v35, v36);
          v155 = v32;
          v181 = v32;
          goto LABEL_12;
        }
      }
      v18(v180[86], v180[80]);
LABEL_12:
      ++v16;
      v15 = v160;
      if (v161 == v16)
        goto LABEL_21;
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    swift_once();
  }
  v40 = 0;
LABEL_60:
  v95 = *(_QWORD *)(v9 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
  if (v95)
  {
    v96 = *(void **)(v95 + 16);
    if (v96)
    {
      v98 = v1[59];
      v97 = v1[60];
      v99 = v1[57];
      v100 = v1[58];
      v101 = v1[54];
      v102 = v1[55];
      v103 = (_QWORD *)v180[53];
      v104 = v96;
      UUID.init()();
      v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16);
      v105(v97, v98, v99);
      *v103 = v104;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v102 + 104))(v103, *MEMORY[0x1E0D9C5F8], v101);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v103, 0, 1, v101);
      v106 = v104;
      v107 = (uint64_t)v103;
      v1 = v180;
      specialized SimpleOrderedDictionary.subscript.setter(v107, v97);
      v105(v97, v98, v99);
      v108 = v180[39];
      v109 = *(_QWORD *)(v108 + 16);
      v110 = swift_isUniquelyReferenced_nonNull_native();
      v181 = v108;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v109, v97, v110);
      v180[39] = v108;
      swift_bridgeObjectRelease();
      v111 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
      v111(v97, v99);
      v112 = Logger.logObject.getter();
      v113 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v114 = 0;
        _os_log_impl(&dword_1B4BE6000, v112, v113, "[ActionGenerator] Found PommesResponse. Generating parse for it", v114, 2u);
        MEMORY[0x1B5E44758](v114, -1, -1);
      }
      v115 = v180[59];
      v116 = v180[57];

      v111(v115, v116);
    }
  }
LABEL_65:
  v1[111] = v40;
  v117 = Logger.logObject.getter();
  v118 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v117, v118))
  {
    v119 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v119 = 0;
    _os_log_impl(&dword_1B4BE6000, v117, v118, "[ActionGenerator] Finding plugins/extensions", v119, 2u);
    MEMORY[0x1B5E44758](v119, -1, -1);
  }

  v120 = v1[29];
  v121 = v1[30];
  v1[112] = v120;
  v1[113] = v121;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v122 = (_QWORD *)swift_task_alloc();
  v1[114] = v122;
  *v122 = v1;
  v122[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
  return ConversationHandlerLocator.allHandlers(for:)(v120, v121);
}

uint64_t ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 920) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 936) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized ActionGenerator.dedupeAppShortcuts(parses:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unsigned int v74;
  void (*v75)(char *, unint64_t, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v2);
  v77 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppShortcutGeneralizedInvocation?);
  MEMORY[0x1E0C80A78](v4);
  v88 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AppShortcutGeneralizedInvocation();
  v87 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v86 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v73 = (char *)&v71 - v9;
  v78 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v85 = *(_QWORD *)(v78 - 8);
  v10 = MEMORY[0x1E0C80A78](v78);
  v84 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v83 = (char *)&v71 - v12;
  v13 = type metadata accessor for Siri_Nlu_External_Parser();
  v81 = *(_QWORD *)(v13 - 8);
  v82 = v13;
  MEMORY[0x1E0C80A78](v13);
  v80 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v91 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v79 = (char *)&v71 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v71 - v21;
  v23 = MEMORY[0x1E0DEE9D8];
  v96 = MEMORY[0x1E0DEE9D8];
  v24 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v89 = v6;
  v92 = v15;
  v93 = v16;
  v71 = a1;
  if (v24)
  {
    v25 = *(_QWORD *)(v16 + 72);
    v72 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v26 = a1 + v72;
    v75 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v74 = *MEMORY[0x1E0D9F108];
    v76 = v25;
    v27 = v84;
    do
    {
      v90 = v24;
      v75(v22, v26, v15);
      v30 = v80;
      Siri_Nlu_External_UserParse.parser.getter();
      v31 = v22;
      v32 = v83;
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v30, v82);
      v33 = v85;
      v34 = v78;
      (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v27, v74, v78);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F178]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v35 = v15;
      v37 = v94;
      v36 = v95;
      v38 = *(void (**)(char *, uint64_t))(v33 + 8);
      v38(v27, v34);
      v38(v32, v34);
      if (v36 == v37)
      {
        v39 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
        v39(v79, v31, v35);
        v40 = v96;
        v22 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v40 + 16) + 1, 1);
          v40 = v96;
        }
        v28 = v90;
        v29 = v76;
        v42 = *(_QWORD *)(v40 + 16);
        v41 = *(_QWORD *)(v40 + 24);
        if (v42 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
          v40 = v96;
        }
        *(_QWORD *)(v40 + 16) = v42 + 1;
        v43 = v92;
        v39((char *)(v40 + v72 + v42 * v29), v79, v92);
        v15 = v43;
        v96 = v40;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v31, v35);
        v15 = v35;
        v22 = v31;
        v28 = v90;
        v29 = v76;
      }
      v26 += v29;
      v24 = v28 - 1;
    }
    while (v24);
    v23 = v96;
    a1 = v71;
    v16 = v93;
  }
  swift_bridgeObjectRelease();
  v44 = *(_QWORD *)(v23 + 16);
  if (v44)
  {
    v45 = v23 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v46 = *(_QWORD *)(v16 + 72);
    v47 = v23;
    v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v90 = v47;
    swift_retain();
    v49 = MEMORY[0x1E0DEE9D8];
    do
    {
      v50 = v48(v91, v45, v15);
      v51 = MEMORY[0x1B5E3FA6C](v50);
      v52 = *(_QWORD *)(v51 + 16);
      v53 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      v54 = *(_QWORD *)(v53 - 8);
      if (v52)
      {
        v55 = (uint64_t)v77;
        (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v77, v51 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80)), v53);
        v56 = 0;
      }
      else
      {
        v56 = 1;
        v55 = (uint64_t)v77;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v55, v56, 1, v53);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v55, 1, v53) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v55, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        v58 = v87;
        v57 = (uint64_t)v88;
        v59 = v89;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v88, 1, 1, v89);
      }
      else
      {
        LOBYTE(v96) = 1;
        v60 = v88;
        Siri_Nlu_External_UserDialogAct.extractGeneralizedAppShortcutInvocation(groupIndex:)();
        v57 = (uint64_t)v60;
        v16 = v93;
        v61 = v53;
        v59 = v89;
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v61);
        v58 = v87;
      }
      v15 = v92;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v91, v92);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v57, 1, v59) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for AppShortcutGeneralizedInvocation?);
      }
      else
      {
        v62 = v48;
        v63 = v46;
        v64 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 32);
        v65 = v73;
        v64(v73, v57, v59);
        v64(v86, (uint64_t)v65, v59);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v49 + 16) + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppShortcutGeneralizedInvocation>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C488]);
        v67 = *(_QWORD *)(v49 + 16);
        v66 = *(_QWORD *)(v49 + 24);
        if (v67 >= v66 >> 1)
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppShortcutGeneralizedInvocation>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C488]);
        *(_QWORD *)(v49 + 16) = v67 + 1;
        v64((char *)(v49+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72) * v67), (uint64_t)v86, v89);
        v46 = v63;
        v48 = v62;
        v15 = v92;
        v16 = v93;
      }
      v45 += v46;
      --v44;
    }
    while (v44);
    swift_release_n();
    a1 = v71;
  }
  else
  {
    swift_release();
    v49 = MEMORY[0x1E0DEE9D8];
  }
  v68 = specialized Set.init<A>(_:)(v49);
  swift_bridgeObjectRelease();
  v69 = *(_QWORD *)(v68 + 16);
  swift_bridgeObjectRetain();
  if (v69)
    a1 = specialized _ArrayProtocol.filter(_:)(a1, v68);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t Siri_Nlu_External_UserParse.isOverriddenPSC.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v1);
  v39 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v4 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  v38 = v4;
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v37 - v8;
  v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v37 - v15;
  v17 = type metadata accessor for Siri_Nlu_External_Parser();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = v0;
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x1E0D9F138], v10);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v22 = v41;
  v21 = v42;
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v14, v10);
  v24 = ((uint64_t (*)(char *, uint64_t))v23)(v16, v10);
  if (v21 == v22)
  {
    v25 = v7;
    v26 = v38;
    v27 = (uint64_t)v39;
    v28 = v37;
    v29 = MEMORY[0x1B5E3FA6C](v24);
    v30 = *(_QWORD *)(v29 + 16);
    v31 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    v32 = *(_QWORD *)(v31 - 8);
    if (v30)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16))(v27, v29 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80)), v31);
      v33 = 0;
    }
    else
    {
      v33 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v27, v33, 1, v31);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v27);
    }
    else
    {
      Siri_Nlu_External_UserDialogAct.delegated.getter();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v27, v31);
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v9, v25, v28);
      if (Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter() == 0xD000000000000010
        && v34 == 0x80000001B4EFE6A0)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v28);
        return 1;
      }
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v28);
      if ((v36 & 1) != 0)
        return 1;
    }
  }
  return 0;
}

uint64_t specialized Sequence<>.isContainsAppShortcutParse.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  _BYTE v27[24];
  uint64_t v28;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v25 = *(_QWORD *)(v6 + 72);
    v26 = v11;
    v24[1] = a1;
    swift_bridgeObjectRetain();
    v12 = v9 - 1;
    v24[2] = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v13 = v12;
      v14 = v26(v8, v10, v5);
      v15 = MEMORY[0x1B5E3FA6C](v14);
      v16 = *(_QWORD *)(v15 + 16);
      v17 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      v18 = *(_QWORD *)(v17 - 8);
      if (v16)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v4, v15 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)), v17);
        v19 = 0;
      }
      else
      {
        v19 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v4, v19, 1, v17);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v4, 1, v17) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      }
      else
      {
        v20 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v17);
        if (v20)
        {
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          swift_release();
          if (v28)
          {
            type metadata accessor for UsoTask_run_common_VoiceCommand();
            if ((swift_dynamicCast() & 1) != 0)
            {
              v21 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
              swift_release();
              swift_release();
              goto LABEL_15;
            }
            swift_release();
          }
          else
          {
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
          }
        }
      }
      v21 = MEMORY[0x1E0DEE9D8];
LABEL_15:
      v22 = *(_QWORD *)(v21 + 16);
      swift_bridgeObjectRelease();
      v9 = v22 != 0;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (!v22)
      {
        v12 = v13 - 1;
        v10 += v25;
        if (v13)
          continue;
      }
      swift_bridgeObjectRelease();
      return v9;
    }
  }
  return v9;
}

unint64_t Siri_Nlu_External_UserDialogAct.toUsoTask()()
{
  unint64_t result;
  unint64_t v1;
  uint64_t v2;

  result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v1 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = MEMORY[0x1B5E43B94](0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AppShortcutParseExpansion()
{
  return objc_opt_self();
}

uint64_t AppShortcutParseExpansion.expand(nlParse:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _BYTE v23[16];

  v2 = v1;
  v4 = type metadata accessor for Siri_Nlu_External_Parser();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = Siri_Nlu_External_UserParse.appShortcuts.getter();
  v16 = v15;
  if (*(_QWORD *)(v15 + 16))
  {
    MEMORY[0x1E0C80A78](v15);
    *(_QWORD *)&v23[-16] = v2;
    *(_QWORD *)&v23[-8] = a1;
    v17 = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:), (uint64_t)&v23[-32], v16);
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter();
    v19 = (uint64_t)v18;
    if (!v18[2])
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>);
      type metadata accessor for USOParse();
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_1B4EE3F50;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
      v22 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v10, 0, 1, v22);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      return v20;
    }
    MEMORY[0x1E0C80A78](v18);
    *(_QWORD *)&v23[-16] = a1;
    v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5((void (*)(_QWORD *))partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:), (uint64_t)&v23[-32], v19);
  }
  v20 = v17;
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t Siri_Nlu_External_UserParse.appShortcuts.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1B5E3FA6C](v1);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v7 = *(_QWORD *)(v6 - 8);
  if (v5)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v3, v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3, v8, 1, v6);
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
    v9 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    v10 = v3;
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, v9);
    return MEMORY[0x1E0DEE9D8];
  }
  v11 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
  if (!v11)
    return MEMORY[0x1E0DEE9D8];
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!v16)
  {
    swift_release();
    v9 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v10 = &v15;
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_run_common_VoiceCommand();
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v12 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
  swift_release();
  swift_release();
  return v12;
}

uint64_t specialized SimpleOrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  v33 = a1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v32 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v32 - v15;
  v32 = v2;
  v17 = *v2;
  if (*(_QWORD *)(v17 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v19 & 1) != 0))
  {
    v20 = v18;
    v21 = *(_QWORD *)(v17 + 56);
    v22 = type metadata accessor for Parse();
    v23 = *(_QWORD *)(v22 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v16, v21 + *(_QWORD *)(v23 + 72) * v20, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v16, 0, 1, v22);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for Parse?);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a2, v4);
    v24 = v33;
    outlined init with copy of ReferenceResolutionClientProtocol?(v33, (uint64_t)v14, &demangling cache variable for type metadata for Parse?);
    specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)v10);
  }
  else
  {
    v25 = type metadata accessor for Parse();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v16, 1, 1, v25);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for Parse?);
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v26(v10, a2, v4);
    v24 = v33;
    outlined init with copy of ReferenceResolutionClientProtocol?(v33, (uint64_t)v14, &demangling cache variable for type metadata for Parse?);
    v27 = v32;
    specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)v10);
    v26(v8, a2, v4);
    v28 = v27[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
    v30 = *(_QWORD *)(v28 + 16);
    v29 = *(_QWORD *)(v28 + 24);
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(v28 + 16) = v30 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v28+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v30, v8, v4);
    v27[1] = v28;
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  return outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for Parse?);
}

uint64_t specialized SimpleOrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v27;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v27 - v12;
  v14 = *v3;
  if (*(_QWORD *)(v14 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v16 & 1) != 0))
  {
    v17 = v15;
    v18 = *(_QWORD *)(v14 + 56);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    v20 = *(_QWORD *)(v19 - 8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v18 + *(_QWORD *)(v20 + 72) * v17, (uint64_t)v13, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v19);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v11, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    specialized Dictionary.subscript.setter((uint64_t)v11, a2, a3);
  }
  else
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 1, 1, v21);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v11, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v11, a2, a3);
    v22 = (_QWORD *)v4[1];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    v24 = v22[2];
    v23 = v22[3];
    if (v24 >= v23 >> 1)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
    v22[2] = v24 + 1;
    v25 = &v22[2 * v24];
    v25[4] = a2;
    v25[5] = a3;
    swift_bridgeObjectRelease();
    v4[1] = v22;
  }
  return outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  return specialized Dictionary.subscript.setter(a1, a2, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), (void (*)(char *, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t))specialized Dictionary._Variant.removeValue(forKey:));
}

{
  return specialized Dictionary.subscript.setter(a1, a2, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), (void (*)(char *, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t))specialized Dictionary._Variant.removeValue(forKey:));
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Parse();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for Parse?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for Parse?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v9);
    v7 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for ConversationSessionKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for Sendable?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v9);
    v7 = type metadata accessor for ConversationSessionKey();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for Sendable?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  __int128 v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for NSExtensionProtocol?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for NSExtensionProtocol?);
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  }
  else
  {
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a1, (uint64_t)v13, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v3;
  __int128 v6;
  __int128 v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _OWORD v11[5];

  if (*(_QWORD *)(a1 + 24))
  {
    v6 = *(_OWORD *)(a1 + 48);
    v11[2] = *(_OWORD *)(a1 + 32);
    v11[3] = v6;
    v11[4] = *(_OWORD *)(a1 + 64);
    v7 = *(_OWORD *)(a1 + 16);
    v11[0] = *(_OWORD *)a1;
    v11[1] = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v10;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for FlowPluginAndBundle?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v11);
    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for FlowPluginAndBundle?);
  }
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t Siri_Nlu_External_UserParse.isSNLC.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  char v27;
  _QWORD v29[2];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v0 = type metadata accessor for Siri_Nlu_External_UserParse();
  v30 = *(_QWORD *)(v0 - 8);
  v1 = MEMORY[0x1E0C80A78](v0);
  v31 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v29 - v3;
  v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v29 - v10;
  v12 = type metadata accessor for Siri_Nlu_External_Parser();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0D9F120], v5);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v17 = v32;
  v16 = v33;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v9;
  v20 = v29[1];
  v18(v19, v5);
  v21 = v5;
  v22 = v30;
  v18(v11, v21);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v23(v4, v20, v0);
  if (v16 == v17)
    v24 = 1;
  else
    v24 = Siri_Nlu_External_UserParse.isOverriddenSNLC.getter();
  v25 = *(void (**)(char *, uint64_t))(v22 + 8);
  v25(v4, v0);
  v26 = v31;
  v23(v31, v20, v0);
  if ((v24 & 1) != 0)
    v27 = 1;
  else
    v27 = Siri_Nlu_External_UserParse.isNlv3FallbackException.getter();
  v25(v26, v0);
  return v27 & 1;
}

uint64_t AppShortcutParseExpansion.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6, MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RemoteFlowPluginPackage()
{
  return objc_opt_self();
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[48] = a4;
  v5[49] = v4;
  v5[46] = a2;
  v5[47] = a3;
  v5[45] = a1;
  v6 = type metadata accessor for Logger();
  v5[50] = v6;
  v5[51] = *(_QWORD *)(v6 - 8);
  v5[52] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  v1 = (_QWORD *)IntentTopic.makeCacheKeyAndWildcardFallbacks()();
  *(_QWORD *)(v0 + 424) = v1;
  v2 = v1[2];
  *(_QWORD *)(v0 + 432) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 440) = *(_QWORD *)(*(_QWORD *)(v0 + 392) + 16);
    *(_QWORD *)(v0 + 448) = 0;
    *(_QWORD *)(v0 + 456) = v1[4];
    *(_QWORD *)(v0 + 464) = v1[5];
    v3 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    if (v3 != -1)
      swift_once();
    *(_QWORD *)(v0 + 472) = static ConversationActor.shared;
    return swift_task_switch();
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
    if (*(_QWORD *)(v0 + 240))
    {
      v27 = (_QWORD *)(v0 + 296);
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 216), v0 + 176);
      if (one-time initialization token for executor != -1)
        swift_once();
      v6 = *(_QWORD *)(v0 + 408);
      v5 = *(_QWORD *)(v0 + 416);
      v7 = *(_QWORD *)(v0 + 400);
      v8 = *(_QWORD *)(v0 + 384);
      v26 = *(_QWORD *)(v0 + 376);
      v9 = *(_QWORD **)(v0 + 360);
      v10 = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v10, v7);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 256);
      v11 = swift_allocObject();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 256), v11 + 16);
      specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #1 in FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:));
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, (uint64_t)v27);
      v12 = type metadata accessor for FlowExtensionConnection();
      swift_allocObject();
      swift_retain();
      v13 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)(v27, v26, v8);
      v14 = *(_QWORD *)(v0 + 200);
      v15 = *(_QWORD *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v14);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
      v18 = v17;
      *(_QWORD *)(v0 + 160) = v12;
      *(_QWORD *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
      *(_QWORD *)(v0 + 136) = v13;
      type metadata accessor for RemoteConversationClient();
      v19 = (_QWORD *)swift_allocObject();
      swift_retain();
      swift_defaultActor_initialize();
      v19[21] = 0;
      v19[22] = 0;
      v19[14] = v16;
      v19[15] = v18;
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), (uint64_t)(v19 + 16));
      v21 = v19[14];
      v20 = v19[15];
      v9[3] = &type metadata for FlowExtensionConversationHandler;
      v9[4] = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
      swift_bridgeObjectRetain();
      swift_release();
      *v9 = v19;
      v9[1] = v21;
      v9[2] = v20;
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      __swift_destroy_boxed_opaque_existential_1(v0 + 176);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
      if (one-time initialization token for executor != -1)
        swift_once();
      __swift_project_value_buffer(*(_QWORD *)(v0 + 400), (uint64_t)static Logger.executor);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_1B4BE6000, v22, v23, "No extensions support input", v24, 2u);
        MEMORY[0x1B5E44758](v24, -1, -1);
      }
      v25 = *(_QWORD *)(v0 + 360);

      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_QWORD *)(v25 + 32) = 0;
    }
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 480) = v2;
  if (v2)
  {
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 488) = v3;
    *v3 = v0;
    v3[1] = FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:);
    return Task<>.value.getter();
  }
  else
  {
    v5 = (_OWORD *)(v0 + 96);
    swift_beginAccess();
    v6 = *(_QWORD *)(v1 + 64);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 16))
      {
        v8 = *(_QWORD *)(v0 + 456);
        v7 = *(_QWORD *)(v0 + 464);
        swift_bridgeObjectRetain();
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
        if ((v10 & 1) != 0)
        {
          outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v6 + 56) + 40 * v9, v0 + 96);
        }
        else
        {
          *(_QWORD *)(v0 + 128) = 0;
          *v5 = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        *(_QWORD *)(v0 + 128) = 0;
        *v5 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      *(_QWORD *)(v0 + 128) = 0;
      *v5 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v1 = (_OWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 440);
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 64);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 16))
    {
      v5 = *(_QWORD *)(v0 + 456);
      v4 = *(_QWORD *)(v0 + 464);
      swift_bridgeObjectRetain();
      v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
      if ((v7 & 1) != 0)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v3 + 56) + 40 * v6, v0 + 96);
      }
      else
      {
        *(_QWORD *)(v0 + 128) = 0;
        *v1 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)(v0 + 128) = 0;
      *v1 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    *(_QWORD *)(v0 + 128) = 0;
    *v1 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(_QWORD *)(v0 + 120))
  {
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 96), v0 + 56);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
LABEL_5:
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
    if (*(_QWORD *)(v0 + 240))
    {
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 216), v0 + 176);
      if (one-time initialization token for executor != -1)
        swift_once();
      v4 = *(_QWORD *)(v0 + 408);
      v3 = *(_QWORD *)(v0 + 416);
      v5 = *(_QWORD *)(v0 + 400);
      v6 = *(_QWORD *)(v0 + 384);
      v28 = *(_QWORD *)(v0 + 376);
      v7 = *(_QWORD **)(v0 + 360);
      v8 = __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v8, v5);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 256);
      v9 = swift_allocObject();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 256), v9 + 16);
      specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #1 in FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:));
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 296);
      v10 = type metadata accessor for FlowExtensionConnection();
      swift_allocObject();
      swift_retain();
      v11 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)((_QWORD *)(v0 + 296), v28, v6);
      v12 = *(_QWORD *)(v0 + 200);
      v13 = *(_QWORD *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v12);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      v16 = v15;
      *(_QWORD *)(v0 + 160) = v10;
      *(_QWORD *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
      *(_QWORD *)(v0 + 136) = v11;
      type metadata accessor for RemoteConversationClient();
      v17 = (_QWORD *)swift_allocObject();
      swift_retain();
      swift_defaultActor_initialize();
      v17[21] = 0;
      v17[22] = 0;
      v17[14] = v14;
      v17[15] = v16;
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), (uint64_t)(v17 + 16));
      v19 = v17[14];
      v18 = v17[15];
      v7[3] = &type metadata for FlowExtensionConversationHandler;
      v7[4] = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
      swift_bridgeObjectRetain();
      swift_release();
      *v7 = v17;
      v7[1] = v19;
      v7[2] = v18;
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      __swift_destroy_boxed_opaque_existential_1(v0 + 176);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
      if (one-time initialization token for executor != -1)
        swift_once();
      __swift_project_value_buffer(*(_QWORD *)(v0 + 400), (uint64_t)static Logger.executor);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1B4BE6000, v20, v21, "No extensions support input", v22, 2u);
        MEMORY[0x1B5E44758](v22, -1, -1);
      }
      v23 = *(_QWORD *)(v0 + 360);

      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_QWORD *)(v23 + 32) = 0;
    }
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 448) + 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for NSExtensionProtocol?);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v25 = *(_QWORD *)(v0 + 448) + 1;
  *(_QWORD *)(v0 + 448) = v25;
  v26 = *(_QWORD *)(v0 + 424) + 16 * v25;
  *(_QWORD *)(v0 + 456) = *(_QWORD *)(v26 + 32);
  *(_QWORD *)(v0 + 464) = *(_QWORD *)(v26 + 40);
  v27 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v27 != -1)
    swift_once();
  *(_QWORD *)(v0 + 472) = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t RemoteFlowPluginPackage.affinityScorer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 64, a1);
}

uint64_t outlined init with copy of AffinityScorer?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AffinityScorer?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RemoteFlowPluginBundleConversationHandler()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for AffinityScoringAdapter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of ReferenceResolutionClientProtocol(&v12, v10 + 40 * a1 + 32);
}

uint64_t type metadata accessor for ConversationHandlerLocator.ScoredHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationHandlerLocator.ScoredHandler;
  if (!type metadata singleton initialization cache for ConversationHandlerLocator.ScoredHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ConversationHandlerLocator.ScoredHandler.init(handler:input:)@<X0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;

  v46 = a3;
  v5 = type metadata accessor for Input();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ConversationHandlerLocator.ScoredHandler();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(a2, v12, v13);
  if ((v15 & 1) != 0)
  {
    v43 = v9;
    v44 = v8;
    if (one-time initialization token for executor != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v49);
    v19 = v6;
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v21 = v45;
    v22 = a2;
    v23 = a2;
    v24 = v5;
    v20(v45, (uint64_t)v23, v5);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v48 = v29;
      *(_DWORD *)v28 = 136315394;
      v40 = v28 + 4;
      v41 = v19;
      v31 = v50;
      v30 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 16);
      v42 = v27;
      v33 = v32(v31, v30);
      v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      *(_WORD *)(v28 + 12) = 2080;
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
      v35 = dispatch thunk of CustomStringConvertible.description.getter();
      v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v37 = *(void (**)(char *, uint64_t))(v41 + 8);
      v37(v21, v24);
      _os_log_impl(&dword_1B4BE6000, v25, (os_log_type_t)v42, "Dropping handler %s as it does not support %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v29, -1, -1);
      MEMORY[0x1B5E44758](v28, -1, -1);

    }
    else
    {

      v37 = *(void (**)(char *, uint64_t))(v19 + 8);
      v37(v21, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    }
    v37(v22, v24);
    v39 = v43;
    v38 = v44;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v46, 1, 1, v38);
  }
  else
  {
    *v11 = v14;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)(v11 + 1));
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))((char *)v11 + *(int *)(v8 + 24), a2, v5);
    v16 = v46;
    outlined init with take of StringKeyedValue((uint64_t)v11, v46, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
}

unint64_t protocol witness for ConversationHandler.affinityScore(for:) in conformance RemoteFlowPluginBundleConversationHandler(uint64_t a1)
{
  return RemoteFlowPluginBundleConversationHandler.affinityScore(for:)(a1);
}

unint64_t RemoteFlowPluginBundleConversationHandler.affinityScore(for:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  os_signpost_id_t v24;
  char v25;
  os_signpost_type_t v26;
  os_signpost_id_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  os_log_type_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v2 = v1;
  v64 = a1;
  v3 = type metadata accessor for Input();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v57 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v54 - v7;
  v9 = type metadata accessor for OSSignpostID();
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignposter();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v56 = v8;
  v61 = v4;
  v62 = v3;
  v16 = __swift_project_value_buffer(v12, (uint64_t)static Signposter.executor);
  v58 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  if (one-time initialization token for executor != -1)
    swift_once();
  v17 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  swift_retain();
  v18 = (uint8_t *)swift_slowAlloc();
  v19 = swift_slowAlloc();
  v66 = v19;
  *(_DWORD *)v18 = 136315138;
  v21 = v2[2];
  v20 = v2[3];
  swift_bridgeObjectRetain();
  v54 = v21;
  v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v66);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  v55 = v20;
  swift_bridgeObjectRelease();
  v22 = OSSignposter.logHandle.getter();
  v23 = static os_signpost_type_t.begin.getter();
  v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v22, v23, v24, "RunAffinityScorer", "AffinityScorer=%s", v18, 0xCu);
  __swift_project_boxed_opaque_existential_1(v2 + 7, v2[10]);
  v63 = AffinityScorer.score(for:)();
  LODWORD(v21) = v25 & 1;
  v26 = static os_signpost_type_t.end.getter();
  v27 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v22, v26, v27, "RunAffinityScorer", "AffinityScorer=%s", v18, 0xCu);

  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v19, -1, -1);
  MEMORY[0x1B5E44758](v18, -1, -1);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v11, v60);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v12);
  v28 = v21;
  if ((v21 & 1) != 0)
  {
    v30 = v61;
    v29 = v62;
    if (one-time initialization token for executor != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
    v32 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v57, v64, v29);
    swift_retain();
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v33, v34))
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      goto LABEL_17;
    }
    v35 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v66 = v36;
    *(_DWORD *)v35 = 136315394;
    v37 = v55;
    swift_bridgeObjectRetain();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v37, &v66);
    LODWORD(v64) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
    v38 = v57;
    v39 = dispatch thunk of CustomStringConvertible.description.getter();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v38, v29);
    _os_log_impl(&dword_1B4BE6000, v33, v34, "[%s] Missing affinity for input %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    v41 = v36;
  }
  else
  {
    v43 = v61;
    v42 = v62;
    if (one-time initialization token for executor != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    v45 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v56, v64, v42);
    swift_retain();
    v33 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v33, v46))
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
      goto LABEL_17;
    }
    v35 = swift_slowAlloc();
    v64 = swift_slowAlloc();
    v66 = v64;
    *(_DWORD *)v35 = 136315650;
    v47 = v55;
    swift_bridgeObjectRetain();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v47, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    LOBYTE(v65) = specialized Affinity.init(rawValue:)(v63);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Affinity?);
    v48 = String.init<A>(describing:)();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 22) = 2080;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
    v50 = dispatch thunk of CustomStringConvertible.description.getter();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    _os_log_impl(&dword_1B4BE6000, v33, v46, "[%s] Affinity: %s for input %s", (uint8_t *)v35, 0x20u);
    v52 = v64;
    swift_arrayDestroy();
    v41 = v52;
  }
  MEMORY[0x1B5E44758](v41, -1, -1);
  MEMORY[0x1B5E44758](v35, -1, -1);
LABEL_17:

  return v63;
}

uint64_t AffinityScorer.score(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = specialized logAction<A>(label:_:)(v2, v3, (void (*)(_QWORD *__return_ptr, _QWORD))partial apply for closure #1 in AffinityScorer.score(for:));
  if (!v1)
    v0 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t specialized logAction<A>(label:_:)(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = v4;
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v33 = a4;
    v13 = swift_slowAlloc();
    v35 = v13;
    *(_DWORD *)v12 = 136315138;
    v5 = (uint64_t)(v12 + 4);
    swift_bridgeObjectRetain();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "==>> %s", v12, 0xCu);
    swift_arrayDestroy();
    v14 = v13;
    a4 = v33;
    MEMORY[0x1B5E44758](v14, -1, -1);
    v15 = v12;
    v6 = v4;
    MEMORY[0x1B5E44758](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  closure #1 in EnvironmentValueFetcher.fetchValue(input:)(a4, &v35);
  if (v6)
  {
    v16 = v6;
    swift_bridgeObjectRetain();
    v17 = v6;
    swift_bridgeObjectRetain();
    v18 = v6;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v5 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v35 = v21;
      *(_DWORD *)v5 = 136315394;
      swift_bridgeObjectRetain();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v5 + 12) = 2080;
      v37 = (uint64_t)v6;
      v22 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v23 = String.init<A>(describing:)();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v19, v20, "<<== %s threw %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v21, -1, -1);
      MEMORY[0x1B5E44758](v5, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v35 = (uint64_t)v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    v5 = v35;
    v25 = v36;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v37 = v29;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      v35 = v5;
      v36 = v25;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      v30 = String.init<A>(describing:)();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v26, v27, "<<== %s -> %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v29, -1, -1);
      MEMORY[0x1B5E44758](v28, -1, -1);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

  }
  return v5;
}

uint64_t specialized logAction<A>(label:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, _QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v33)(_QWORD *__return_ptr, _QWORD);
  uint64_t v36[5];
  _QWORD v37[5];
  uint64_t v38[5];
  char v39;
  __int128 v40[2];
  char v41;
  uint64_t v42[7];
  uint64_t v43;

  v5 = v4;
  if (one-time initialization token for executor != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v33 = a3;
    v12 = swift_slowAlloc();
    v42[0] = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v40[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "==>> %s", v11, 0xCu);
    swift_arrayDestroy();
    v13 = v12;
    a3 = v33;
    MEMORY[0x1B5E44758](v13, -1, -1);
    v14 = v11;
    v5 = v4;
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

    v15 = swift_bridgeObjectRelease_n();
  }
  a3(v38, v15);
  if (v5)
  {
    *(_QWORD *)&v40[0] = v5;
    v41 = 1;
  }
  else
  {
    v39 = 0;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v38, (uint64_t)v40, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v40, (uint64_t)v42, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v42, (uint64_t)v40, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
  if ((v41 & 1) != 0)
  {
    v16 = *(void **)&v40[0];
    swift_bridgeObjectRetain();
    v17 = v16;
    swift_bridgeObjectRetain();
    v18 = v16;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v38[0] = v22;
      *(_DWORD *)v21 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      v23 = v16;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v24 = String.init<A>(describing:)();
      v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v19, v20, "<<== %s threw %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v22, -1, -1);
      MEMORY[0x1B5E44758](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    outlined init with take of ReferenceResolutionClientProtocol(v40, (uint64_t)v38);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v38, (uint64_t)v37);
    swift_bridgeObjectRetain_n();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v43 = v29;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain();
      v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v37, (uint64_t)v36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScorer);
      v30 = String.init<A>(describing:)();
      v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      _os_log_impl(&dword_1B4BE6000, v26, v27, "<<== %s -> %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v29, -1, -1);
      MEMORY[0x1B5E44758](v28, -1, -1);

    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      swift_bridgeObjectRelease_n();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v42, (uint64_t)v40, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
  if ((v41 & 1) != 0)
  {
    v38[0] = *(_QWORD *)&v40[0];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    outlined init with take of ReferenceResolutionClientProtocol(v40, a4);
  }
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v42, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
}

uint64_t specialized logAction<A>(label:_:)(uint64_t a1, unint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD))
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v33)(_QWORD *__return_ptr, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = v3;
  if (one-time initialization token for executor != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v33 = a3;
    v12 = swift_slowAlloc();
    v35 = v12;
    *(_DWORD *)v11 = 136315138;
    v4 = (uint64_t)(v11 + 4);
    swift_bridgeObjectRetain();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "==>> %s", v11, 0xCu);
    swift_arrayDestroy();
    v13 = v12;
    a3 = v33;
    MEMORY[0x1B5E44758](v13, -1, -1);
    v14 = v11;
    v5 = v3;
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

    v15 = swift_bridgeObjectRelease_n();
  }
  a3(&v35, v15);
  if (v5)
  {
    v16 = v5;
    swift_bridgeObjectRetain();
    v17 = v5;
    swift_bridgeObjectRetain();
    v18 = v5;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v4 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v35 = v21;
      *(_DWORD *)v4 = 136315394;
      swift_bridgeObjectRetain();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v4 + 12) = 2080;
      v37 = (uint64_t)v5;
      v22 = v5;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v23 = String.init<A>(describing:)();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v19, v20, "<<== %s threw %s", (uint8_t *)v4, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v21, -1, -1);
      MEMORY[0x1B5E44758](v4, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v35 = (uint64_t)v5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    v4 = v35;
    v25 = v36;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v37 = v29;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      v35 = v4;
      v36 = v25;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      v30 = String.init<A>(describing:)();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v26, v27, "<<== %s -> %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v29, -1, -1);
      MEMORY[0x1B5E44758](v28, -1, -1);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

  }
  return v4;
}

{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v33)(_QWORD *__return_ptr, _QWORD);
  uint64_t v35;
  char v36;
  uint64_t v37;

  v5 = v3;
  if (one-time initialization token for executor != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v33 = a3;
    v12 = swift_slowAlloc();
    v35 = v12;
    *(_DWORD *)v11 = 136315138;
    v4 = (uint64_t)(v11 + 4);
    swift_bridgeObjectRetain();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "==>> %s", v11, 0xCu);
    swift_arrayDestroy();
    v13 = v12;
    a3 = v33;
    MEMORY[0x1B5E44758](v13, -1, -1);
    v14 = v11;
    v5 = v3;
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

    v15 = swift_bridgeObjectRelease_n();
  }
  a3(&v35, v15);
  if (v5)
  {
    v16 = v5;
    swift_bridgeObjectRetain();
    v17 = v5;
    swift_bridgeObjectRetain();
    v18 = v5;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v4 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v35 = v21;
      *(_DWORD *)v4 = 136315394;
      swift_bridgeObjectRetain();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v4 + 12) = 2080;
      v37 = (uint64_t)v5;
      v22 = v5;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v23 = String.init<A>(describing:)();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v19, v20, "<<== %s threw %s", (uint8_t *)v4, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v21, -1, -1);
      MEMORY[0x1B5E44758](v4, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v35 = (uint64_t)v5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    v4 = v35;
    v25 = v36;
    swift_bridgeObjectRetain_n();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v37 = v29;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      v35 = v4;
      v36 = v25;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
      v30 = String.init<A>(describing:)();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v26, v27, "<<== %s -> %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v29, -1, -1);
      MEMORY[0x1B5E44758](v28, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
  return v4;
}

uint64_t partial apply for closure #1 in AffinityScorer.score(for:)@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  char v5;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1[3] + 32))(v1[5], v1[6], v1[2]);
  if (!v2)
  {
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 8) = v5 & 1;
  }
  return result;
}

uint64_t protocol witness for AffinityScorer.score(for:loopCheck:) in conformance AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = (_QWORD *)(v3 + *(int *)(a3 + 20));
  v6 = v5[3];
  v7 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  type metadata accessor for SiriEnvironment();
  v8 = static SiriEnvironment.default.getter();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, v8, v6, v7);
  swift_release();
  return v9;
}

unint64_t specialized static AffinityScorerUtils.getTask(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[16];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v0);
  v2 = &v18[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  USOParse.userParse.getter();
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v2);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "Could not obtain uso tasks", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    return 0;
  }
  (*(void (**)(_BYTE *, char *, uint64_t))(v8 + 32))(v10, v2, v7);
  result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v17 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    v16 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v16)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      return v16;
    }
  }
  if ((v17 & 0xC000000000000001) != 0)
  {
    v16 = MEMORY[0x1B5E43B94](0, v17);
    goto LABEL_15;
  }
  if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v16 = *(_QWORD *)(v17 + 32);
    swift_retain();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEFF48], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Affinity(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Affinity()
{
  unsigned __int8 *v0;

  return Affinity.debugDescription.getter(*v0);
}

uint64_t Affinity.debugDescription.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4C343E8 + 4 * byte_1B4EE4510[a1]))(0xD000000000000014, 0x80000001B4EF68D0);
}

uint64_t sub_1B4C343E8()
{
  return 0x7974696E69666641;
}

uint64_t sub_1B4C34438()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t storeEnumTagSinglePayload for ConversationHandlerLocator.ScoredHandler()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for ConversationHandlerLocator.ScoredHandler()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t outlined init with copy of RemoteConversationTurnData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteConversationTurnData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t destroy for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Input();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UserID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v29 = (char *)&v26 - v11;
  v32 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(a1 + 56);
  v27 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v28 = (unint64_t)(v13 + 63) >> 6;
  v31 = a1;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  while (v15)
  {
    v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v19 = v18 | (v17 << 6);
LABEL_22:
    v23 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    v24 = v29;
    v23(v29, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v7 + 72) * v19, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v24, v6);
    v23(v5, (unint64_t)v10, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    v25 = MultiUserContextUpdater.contextUpdater(forUserId:)((uint64_t)v5);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v25)
    {
      MEMORY[0x1B5E43498](result);
      if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
    }
  }
  v20 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v20 >= v28)
    goto LABEL_26;
  v21 = *(_QWORD *)(v27 + 8 * v20);
  ++v17;
  if (v21)
    goto LABEL_21;
  v17 = v20 + 1;
  if (v20 + 1 >= v28)
    goto LABEL_26;
  v21 = *(_QWORD *)(v27 + 8 * v17);
  if (v21)
    goto LABEL_21;
  v17 = v20 + 2;
  if (v20 + 2 >= v28)
    goto LABEL_26;
  v21 = *(_QWORD *)(v27 + 8 * v17);
  if (v21)
    goto LABEL_21;
  v17 = v20 + 3;
  if (v20 + 3 >= v28)
    goto LABEL_26;
  v21 = *(_QWORD *)(v27 + 8 * v17);
  if (v21)
  {
LABEL_21:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_22;
  }
  v22 = v20 + 4;
  if (v22 >= v28)
  {
LABEL_26:
    swift_release();
    return v32;
  }
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
  {
    v17 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v28)
      goto LABEL_26;
    v21 = *(_QWORD *)(v27 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  result = MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = a3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v8 = a1(&v9, v7);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v9)
      {
        MEMORY[0x1B5E43498](v8);
        if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += 40;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v26[3];
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void *v34;

  v34 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v4);
  v31 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PluginAction();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v33 = (uint64_t)v26 - v12;
  MEMORY[0x1E0C80A78](v11);
  v32 = (char *)v26 - v13;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return MEMORY[0x1E0DEE9D8];
  v26[2] = v2;
  v15 = *(_QWORD *)(type metadata accessor for RankedAction() - 8);
  v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v29 = *(_QWORD *)(v15 + 72);
  v17 = type metadata accessor for ActionParaphrase();
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v28 = v17;
  v26[1] = a1;
  swift_bridgeObjectRetain();
  v18 = MEMORY[0x1E0DEE9D8];
  v30 = v10;
  do
  {
    v19 = (uint64_t)v31;
    v27(v31, 1, 1, v28);
    v20 = v33;
    RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(v34, v19, v33);
    outlined destroy of ReferenceResolutionClientProtocol?(v19, &demangling cache variable for type metadata for ActionParaphrase?);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    v22 = v32;
    v21(v32, v20, v6);
    v21(v10, (uint64_t)v22, v6);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
    v24 = *(_QWORD *)(v18 + 16);
    v23 = *(_QWORD *)(v18 + 24);
    if (v24 >= v23 >> 1)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, v18);
    *(_QWORD *)(v18 + 16) = v24 + 1;
    v10 = v30;
    v21((char *)(v18+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v24), (uint64_t)v30, v6);
    v16 += v29;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v18;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v39[3];
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  char *v51;

  v47 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Parse();
  v43 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v48 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v42 = (char *)v39 - v10;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v15);
  v49 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v51 = v14;
    v18 = a1;
    v19 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v45 = *(_QWORD *)(v12 + 72);
    v46 = v20;
    v39[1] = v18;
    v39[2] = v2;
    swift_bridgeObjectRetain();
    v50 = MEMORY[0x1E0DEE9D8];
    v40 = v7;
    v41 = v6;
    v21 = v43;
    while (1)
    {
      v22 = v49;
      v46(v49, v19, v11);
      v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
      v44(v22, 0, 1, v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v22, 1, v11) == 1)
        break;
      v23 = v6;
      v24 = (uint64_t)v51;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v51, v22, v11);
      v25 = v47;
      if (*(_QWORD *)(v47 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24), (v27 & 1) != 0))
      {
        v6 = v23;
        (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v23, *(_QWORD *)(v25 + 56) + *(_QWORD *)(v21 + 72) * v26, v7);
        v28 = 0;
      }
      else
      {
        v28 = 1;
        v6 = v23;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v6, v28, 1, v7);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v51, v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v6, 1, v7) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Parse?);
      }
      else
      {
        v29 = v12;
        v30 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
        v31 = v42;
        v30(v42, v6, v7);
        v30(v48, v31, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v50 + 16) + 1, 1, v50);
        v33 = *(_QWORD *)(v50 + 16);
        v32 = *(_QWORD *)(v50 + 24);
        v12 = v29;
        if (v33 >= v32 >> 1)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v50);
        v34 = v50;
        *(_QWORD *)(v50 + 16) = v33 + 1;
        v35 = v43;
        v36 = v34
            + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
            + *(_QWORD *)(v43 + 72) * v33;
        v7 = v40;
        v30((char *)v36, v48, v40);
        v21 = v35;
        v6 = v41;
      }
      v19 += v45;
      if (!--v17)
      {
        v44(v49, 1, 1, v11);
        break;
      }
    }
  }
  else
  {
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    swift_bridgeObjectRetain();
    v50 = MEMORY[0x1E0DEE9D8];
    v37(v49, 1, 1, v11);
  }
  swift_bridgeObjectRelease();
  return v50;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  char *v29;
  uint64_t v30;
  unint64_t v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v30 = (uint64_t)v28 - v13;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v28[1] = v2;
    swift_bridgeObjectRetain();
    v28[0] = a1;
    v15 = (uint64_t *)(a1 + 40);
    v31 = MEMORY[0x1E0DEE9D8];
    v29 = v12;
    while (1)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v16 = *(v15 - 1);
        v17 = *v15;
        swift_bridgeObjectRetain();
        v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
        if ((v19 & 1) != 0)
        {
          outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v9 + 72) * v18, (uint64_t)v7, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
          v20 = 0;
        }
        else
        {
          v20 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v20, 1, v8);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
        {
          v21 = v30;
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v30, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v21, (uint64_t)v12, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v22 = v31;
          else
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
          v24 = *(_QWORD *)(v22 + 16);
          v23 = *(_QWORD *)(v22 + 24);
          if (v24 >= v23 >> 1)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, v22);
          *(_QWORD *)(v22 + 16) = v24 + 1;
          v25 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
          v31 = v22;
          v26 = v22 + v25 + *(_QWORD *)(v9 + 72) * v24;
          v12 = v29;
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v29, v26, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
          goto LABEL_5;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
LABEL_5:
      v15 += 2;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        return v31;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29[2];
  uint64_t v30;
  id v31;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3 = a1 + 32;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v3, (uint64_t)v29);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
    v5 = type metadata accessor for RemoteFlowPluginPackage();
    if (swift_dynamicCast())
    {
      v7 = (uint64_t)v31;
      *((_QWORD *)&v27 + 1) = v5;
      v28 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage, v6, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginPackage, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginPackage);
    }
    else
    {
      outlined init with copy of ReferenceResolutionClientProtocol(v3, (uint64_t)v29);
      type metadata accessor for NSBundle();
      if (!swift_dynamicCast())
      {
        v26 = 0u;
        v27 = 0u;
        v28 = 0;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v26, &demangling cache variable for type metadata for PluginPackage?);
        goto LABEL_4;
      }
      v8 = *(_QWORD *)(a2 + 56);
      v9 = v31;
      v25 = v8;
      swift_retain();
      v10 = objc_msgSend(v9, sel_infoDictionary);
      if (v10)
      {
        v11 = v10;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      }
      else
      {
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      }
      v24 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
      swift_bridgeObjectRelease();
      v23 = NSBundle.packageId.getter();
      v13 = v12;
      v14 = objc_msgSend(v9, sel_bundlePath);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;

      v30 = 0;
      memset(v29, 0, sizeof(v29));
      v7 = swift_allocObject();
      RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v23, v13, v15, v17, v24, v25, (uint64_t)v29);

      *((_QWORD *)&v27 + 1) = v5;
      v28 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage, v18, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginPackage, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginPackage);

    }
    *(_QWORD *)&v26 = v7;
    outlined init with take of ReferenceResolutionClientProtocol(&v26, (uint64_t)v29);
    outlined init with take of ReferenceResolutionClientProtocol(v29, (uint64_t)&v26);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v20 = v4[2];
    v19 = v4[3];
    if (v20 >= v19 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v4);
    v4[2] = v20 + 1;
    outlined init with take of ReferenceResolutionClientProtocol(&v26, (uint64_t)&v4[5 * v20 + 4]);
LABEL_4:
    v3 += 40;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[2];
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v38 = a2;
  v40 = type metadata accessor for Google_Protobuf_StringValue();
  v37 = *(_QWORD *)(v40 - 8);
  v4 = MEMORY[0x1E0C80A78](v40);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v36 = (char *)v33 - v6;
  v7 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v33[0] = a1;
    v33[1] = v2;
    v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v13 = *(_QWORD *)(v8 + 72);
    swift_bridgeObjectRetain();
    v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v35 = v13;
    while (1)
    {
      v14 = Siri_Nlu_External_UsoEntityIdentifier.hasNamespace.getter();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
      if ((v14 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_4:
      v12 += v13;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        return v39;
      }
    }
    v15 = v8;
    v16 = v7;
    v17 = v36;
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v18 = Google_Protobuf_StringValue.value.getter();
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v37 + 8);
    v21(v17, v40);
    v22 = *(_QWORD *)(v38 + 32);
    if (v22)
    {
      v7 = v16;
      if (v18 == *(_QWORD *)(v38 + 24) && v22 == v20)
      {
        v8 = v15;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v7);
        swift_bridgeObjectRelease();
LABEL_12:
        v24 = v34;
        Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
        v25 = Google_Protobuf_StringValue.value.getter();
        v27 = v26;
        v21(v24, v40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v28 = v39;
        else
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
        v30 = v28[2];
        v29 = v28[3];
        if (v30 >= v29 >> 1)
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
        v28[2] = v30 + 1;
        v39 = v28;
        v31 = &v28[2 * v30];
        v31[4] = v25;
        v31[5] = v27;
        goto LABEL_17;
      }
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v8 = v15;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      v7 = v16;
      v8 = v15;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v7);
      swift_bridgeObjectRelease();
    }
LABEL_17:
    v13 = v35;
    goto LABEL_4;
  }
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v23[0] = a1;
  v23[1] = v2;
  v10 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v26 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v24 = a2;
  do
  {
    v12 = Siri_Nlu_External_UsoEntityIdentifier.hasBackingAppBundleID.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
    if ((v12 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      goto LABEL_4;
    }
    v13 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
    v15 = *(_QWORD *)(a2 + 32);
    if (!v15)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if (v13 == *(_QWORD *)(a2 + 24) && v15 == v14)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
        goto LABEL_4;
    }
    v25 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
    v18 = v17;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v20 = v11[2];
    v19 = v11[3];
    if (v20 >= v19 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v11);
    v11[2] = v20 + 1;
    v21 = &v11[2 * v20];
    v21[4] = v25;
    v21[5] = v18;
    a2 = v24;
LABEL_4:
    v10 += v26;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  v5 = type metadata accessor for Google_Protobuf_StringValue();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = a1;
    v14 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v15 = *(_QWORD *)(v9 + 72);
    v29[1] = v13;
    v29[2] = v2;
    swift_bridgeObjectRetain();
    v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v30 = a2;
    v32 = v15;
    while (1)
    {
      v16 = Siri_Nlu_External_UsoEntityIdentifier.hasNamespace.getter();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v8);
      if ((v16 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_4:
      v14 += v15;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        return v35;
      }
    }
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v17 = Google_Protobuf_StringValue.value.getter();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v34);
    v20 = *(_QWORD *)(a2 + 32);
    if (v20)
    {
      if (v17 == *(_QWORD *)(a2 + 24) && v20 == v19)
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        swift_bridgeObjectRelease();
LABEL_12:
        v31 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
        v23 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v24 = v35;
        else
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        v26 = v24[2];
        v25 = v24[3];
        if (v26 >= v25 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
        v24[2] = v26 + 1;
        v35 = v24;
        v27 = &v24[2 * v26];
        a2 = v30;
        v27[4] = v31;
        v27[5] = v23;
        goto LABEL_17;
      }
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_bridgeObjectRelease();
    }
LABEL_17:
    v15 = v32;
    goto LABEL_4;
  }
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  void (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationHandlerLocator.ScoredHandler?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ConversationHandlerLocator.ScoredHandler();
  v9 = *(_QWORD *)(v24 - 8);
  v10 = MEMORY[0x1E0C80A78](v24);
  v23 = (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v22 = (uint64_t)&v20 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return MEMORY[0x1E0DEE9D8];
  v14 = a3 + 32;
  v20 = a3;
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x1E0DEE9D8];
  v21 = a1;
  do
  {
    a1(v14);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v15;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v24) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for ConversationHandlerLocator.ScoredHandler?);
    }
    else
    {
      v16 = v22;
      outlined init with take of StringKeyedValue((uint64_t)v8, v22, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with take of StringKeyedValue(v16, v23, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, v15, &demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationHandlerLocator.ScoredHandler>, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v18 = *(_QWORD *)(v15 + 16);
      v17 = *(_QWORD *)(v15 + 24);
      if (v18 >= v17 >> 1)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v15, &demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationHandlerLocator.ScoredHandler>, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      *(_QWORD *)(v15 + 16) = v18 + 1;
      outlined init with take of StringKeyedValue(v23, v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v18, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      a1 = v21;
    }
    v14 += 40;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v15;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  void (*v30)(_QWORD);
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[4];
  int v35;
  char v36;
  char v37;
  unint64_t v38;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USOParse?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for USOParse();
  v9 = *(_QWORD *)(v33 - 8);
  v10 = MEMORY[0x1E0C80A78](v33);
  v32 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v31 = (char *)&v29 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v29 = a3;
  v14 = (char *)(a3 + 69);
  v38 = MEMORY[0x1E0DEE9D8];
  v30 = a1;
  do
  {
    v15 = v9;
    v16 = *(_QWORD *)(v14 - 29);
    v17 = *(_QWORD *)(v14 - 13);
    v18 = *v14;
    v19 = *(v14 - 1);
    v20 = *(_DWORD *)(v14 - 5);
    v21 = *(_QWORD *)(v14 - 21);
    v34[0] = *(_QWORD *)(v14 - 37);
    v34[1] = v16;
    v34[2] = v21;
    v34[3] = v17;
    v35 = v20;
    v36 = v19;
    v37 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(v34);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v38;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v15;
    v22 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v33) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for USOParse?);
    }
    else
    {
      v23 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v24 = v31;
      v23(v31, v8, v22);
      v23(v32, v24, v22);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v38 + 16) + 1, 1, v38, &demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C708]);
      v26 = *(_QWORD *)(v38 + 16);
      v25 = *(_QWORD *)(v38 + 24);
      if (v26 >= v25 >> 1)
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v38, &demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C708]);
      v27 = v38;
      *(_QWORD *)(v38 + 16) = v26 + 1;
      v23((char *)(v27+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v26), v32, v33);
      v9 = v15;
      a1 = v30;
    }
    v14 += 40;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t partial apply for closure #2 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  return closure #2 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t closure #2 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD v21[2];

  v21[0] = a5;
  v21[1] = a2;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = type metadata accessor for Parse();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CamParse();
  MEMORY[0x1E0C80A78](v14);
  v16 = (_QWORD *)((char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a3, v8);
  v17 = a4[4];
  v18 = a4[5];
  __swift_project_boxed_opaque_existential_1(a4 + 1, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
  type metadata accessor for ConversationHandlerLocator.ScoredHandler();
  Input.parse.getter();
  Parse.asCamParse()(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  UUID.init()();
  if (*(_QWORD *)(*(_QWORD *)v21[0] + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v19 & 1) != 0)
      swift_bridgeObjectRetain();
  }
  return ActionCandidate.init(flowHandlerId:parse:affinityScore:loggingId:userData:)();
}

uint64_t protocol witness for ConversationHandler.id.getter in conformance RemoteFlowPluginBundleConversationHandler()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parse.asCamParse()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for USOParse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Parse();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 16))(v13, v2, v10);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x1E0D9C5F8])
  {
    (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v13, v10);
    *a1 = *v13;
    v15 = (unsigned int *)MEMORY[0x1E0D97A38];
LABEL_5:
    v16 = *v15;
    v17 = type metadata accessor for CamParse();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(a1, v16, v17);
  }
  if (v14 == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v7 + 32))(v9, v13, v6);
    USOParse.userParse.getter();
    USOParse.parserIdentifier.getter();
    USOParse.appBundleId.getter();
    USOParse.groupIndex.getter();
    CamUSOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    v15 = (unsigned int *)MEMORY[0x1E0D97A40];
    goto LABEL_5;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1B4BE6000, v20, v21, "CamBridge: Received unexpected Parse type in asCamParse", v22, 2u);
    MEMORY[0x1B5E44758](v22, -1, -1);
  }

  v23 = *MEMORY[0x1E0D97A48];
  v24 = type metadata accessor for CamParse();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a1, v23, v24);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized Array._endMutation()();
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  Swift::Int result;
  uint64_t v8[2];

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate))
                 - 8);
  v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  v8[0] = (uint64_t)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  *a1 = v5;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  char *v46;
  Swift::Int v47;
  Swift::Int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(void);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  _BOOL4 v84;
  uint64_t v85;
  char *v86;
  void (*v87)(void);
  void (*v88)(char *, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  Swift::Int v100;
  Swift::Int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  Swift::Int v106;
  Swift::Int v107;
  uint64_t v108;
  uint64_t v109;
  Swift::Int v110;
  uint64_t v111;
  void (*v112)(void);
  char *v113;
  void (*v114)(void);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  BOOL v137;
  void (*v138)(char *, uint64_t, uint64_t);
  uint64_t v139;
  char *v140;
  char *v141;
  void (*v142)(char *, uint64_t, uint64_t);
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(char *, uint64_t);
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  void (*v159)(void);
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  char v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  Swift::Int v216;
  char *v217;
  uint64_t v218;
  char *v219;
  Swift::Int v220;
  char *v221;
  uint64_t v222;
  char *v223;
  void (*v224)(void);
  unint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  void (*v236)(void);
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(uint64_t, char *, uint64_t);
  Swift::Int v241;
  uint64_t v242;
  void (*v243)(void);
  char *v244;
  char *v245;
  char *v246;
  uint64_t *v247;
  char *v248;
  void (*v249)(uint64_t, char *, uint64_t);
  uint64_t v250;
  void (*v251)(uint64_t, uint64_t);

  v3 = v2;
  v237 = a2;
  v250 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  v227 = *(_QWORD *)(v250 - 8);
  v5 = MEMORY[0x1E0C80A78](v250);
  v222 = (uint64_t)&v212 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v238 = (uint64_t)&v212 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v212 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v230 = (char *)&v212 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v212 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v212 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v212 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v231 = (char *)&v212 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v235 = (char *)&v212 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v212 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v223 = (char *)&v212 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v226 = (char *)&v212 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v212 - v35;
  MEMORY[0x1E0C80A78](v34);
  v218 = (uint64_t)&v212 - v37;
  v247 = a1;
  v38 = a1[1];
  result = _minimumMergeRunLength(_:)(v38);
  if (result >= v38)
  {
    if (v38 < 0)
      goto LABEL_167;
    if (v38)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v38, 1, v247, v237);
    return result;
  }
  v216 = result;
  if (v38 >= 0)
    v40 = v38;
  else
    v40 = v38 + 1;
  if (v38 < -1)
    goto LABEL_175;
  v228 = v11;
  v219 = v22;
  v221 = v29;
  v245 = v16;
  if (v38 < 2)
  {
    v44 = MEMORY[0x1E0DEE9D8];
    v225 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v227 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v227 + 80));
    if (v38 != 1)
    {
      v156 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v46 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_131;
    }
    v214 = v36;
    v215 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v214 = v36;
    v41 = v40 >> 1;
    v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v42 + 16) = v41;
    v43 = *(unsigned __int8 *)(v227 + 80);
    v215 = v42;
    v225 = v42 + ((v43 + 32) & ~v43);
  }
  v45 = 0;
  v46 = (char *)MEMORY[0x1E0DEE9D8];
  v246 = v19;
  while (1)
  {
    v47 = v45 + 1;
    v224 = (void (*)(void))v45;
    if (v45 + 1 >= v38)
    {
      v55 = v45 + 1;
      goto LABEL_51;
    }
    v241 = v38;
    v48 = v45;
    v49 = *v247;
    v50 = *(char **)(v227 + 72);
    v51 = v218;
    outlined init with copy of ReferenceResolutionClientProtocol?(*v247 + (_QWORD)v50 * v47, v218, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v233 = v49;
    v248 = v50;
    v52 = v49 + (_QWORD)v50 * v48;
    v53 = (uint64_t)v214;
    outlined init with copy of ReferenceResolutionClientProtocol?(v52, (uint64_t)v214, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    LODWORD(v240) = closure #3 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(v51, v53, v237);
    v54 = (uint64_t)v226;
    if (v3)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v53, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      outlined destroy of ReferenceResolutionClientProtocol?(v51, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      goto LABEL_144;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v53, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    outlined destroy of ReferenceResolutionClientProtocol?(v51, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v55 = v48 + 2;
    if (v48 + 2 < v241)
      break;
    v45 = v48;
    v38 = v241;
    if ((v240 & 1) != 0)
      goto LABEL_38;
LABEL_51:
    v106 = v38;
    if (v55 < v38)
    {
      v171 = __OFSUB__(v55, v45);
      v107 = v55 - v45;
      if (v171)
        goto LABEL_166;
      if (v107 >= v216)
      {
LABEL_78:
        v45 = (Swift::Int)v224;
        goto LABEL_79;
      }
      if (__OFADD__(v224, v216))
        goto LABEL_168;
      if ((uint64_t)v224 + v216 < v38)
        v106 = (Swift::Int)v224 + v216;
      if (v106 < (uint64_t)v224)
      {
LABEL_169:
        __break(1u);
        goto LABEL_170;
      }
      if (v55 == v106)
      {
        v45 = (Swift::Int)v224;
        goto LABEL_79;
      }
      v217 = v46;
      v213 = v3;
      v108 = *(_QWORD *)(v227 + 72);
      v109 = v108 * (v55 - 1);
      v232 = v108;
      v110 = v55 * v108;
      v111 = (uint64_t)v230;
      v220 = v106;
LABEL_63:
      v113 = 0;
      v114 = v224;
      v236 = (void (*)(void))v55;
      v233 = v110;
      v234 = v109;
      while (1)
      {
        v243 = v114;
        v115 = *v247;
        v242 = (uint64_t)&v113[v110];
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v113[v110 + v115], (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        v244 = v113;
        v241 = (Swift::Int)&v113[v109];
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v113[v109 + v115], (uint64_t)v245, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        v116 = *(int *)(v250 + 48);
        v117 = v111 + v116;
        v118 = &v19[v116];
        v119 = type metadata accessor for UUID();
        v120 = *(_QWORD *)(v119 - 8);
        v249 = *(void (**)(uint64_t, char *, uint64_t))(v120 + 16);
        v249(v111, v19, v119);
        v121 = type metadata accessor for ActionCandidate();
        v122 = *(_QWORD *)(v121 - 8);
        v123 = *(void (**)(uint64_t, char *, uint64_t))(v122 + 16);
        v239 = (uint64_t)v118;
        v123(v117, v118, v121);
        v124 = *v237;
        v125 = *(_QWORD *)(*v237 + 16);
        v240 = v123;
        if (v125 && (v126 = specialized __RawDictionaryStorage.find<A>(_:)(v111), (v127 & 1) != 0))
        {
          v229 = *(_QWORD *)(*(_QWORD *)(v124 + 56) + 8 * v126);
          v251 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
          v251(v117, v121);
          v248 = *(char **)(v120 + 8);
          ((void (*)(uint64_t, uint64_t))v248)(v111, v119);
          v128 = *(int *)(v250 + 48);
          v129 = (uint64_t)v228;
          v130 = &v228[v128];
          v131 = &v245[v128];
          v132 = (uint64_t)v245;
          ((void (*)(char *))v249)(v228);
          v123((uint64_t)v130, v131, v121);
          v133 = *v237;
          if (*(_QWORD *)(*v237 + 16) && (v134 = specialized __RawDictionaryStorage.find<A>(_:)(v129), (v135 & 1) != 0))
          {
            v136 = *(_QWORD *)(*(_QWORD *)(v133 + 56) + 8 * v134);
            v251((uint64_t)v130, v121);
            ((void (*)(uint64_t, uint64_t))v248)(v129, v119);
            if (v229 != v136)
            {
              v137 = v229 < v136;
              v19 = v246;
              goto LABEL_74;
            }
          }
          else
          {
            v251((uint64_t)v130, v121);
            ((void (*)(uint64_t, uint64_t))v248)(v129, v119);
          }
        }
        else
        {
          v251 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
          v251(v117, v121);
          v248 = *(char **)(v120 + 8);
          ((void (*)(uint64_t, uint64_t))v248)(v111, v119);
          v132 = (uint64_t)v245;
        }
        v138 = (void (*)(char *, uint64_t, uint64_t))v249;
        v139 = v250;
        v140 = v235;
        v141 = &v235[*(int *)(v250 + 48)];
        v249((uint64_t)v235, v246, v119);
        v142 = (void (*)(char *, uint64_t, uint64_t))v240;
        v240((uint64_t)v141, (char *)v239, v121);
        v239 = ActionCandidate.affinityScore.getter();
        v251((uint64_t)v141, v121);
        v143 = *(int *)(v139 + 48);
        v144 = v231;
        v145 = &v231[v143];
        v146 = v132 + v143;
        v138(v231, v132, v119);
        v142(v145, v146, v121);
        v147 = ActionCandidate.affinityScore.getter();
        v148 = v121;
        v19 = v246;
        v251((uint64_t)v145, v148);
        v137 = v147 < v239;
        v149 = (void (*)(char *, uint64_t))v248;
        ((void (*)(char *, uint64_t))v248)(v144, v119);
        v149(v140, v119);
LABEL_74:
        outlined destroy of ReferenceResolutionClientProtocol?(v132, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        v111 = (uint64_t)v230;
        if (!v137)
        {
          v112 = v236;
          v110 = v233;
          v109 = v234;
LABEL_62:
          v55 = (Swift::Int)v112 + 1;
          v109 += v232;
          v110 += v232;
          if (v55 == v220)
          {
            v55 = v220;
            v3 = v213;
            v46 = v217;
            goto LABEL_78;
          }
          goto LABEL_63;
        }
        v150 = *v247;
        v110 = v233;
        v109 = v234;
        if (!*v247)
          goto LABEL_171;
        v151 = v244;
        v152 = (uint64_t)&v244[v150 + v234];
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v244[v150 + v233], v238, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        swift_arrayInitWithTakeFrontToBack();
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v238, v152, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        v113 = &v151[-v232];
        v114 = (void (*)(void))((char *)v243 + 1);
        v112 = v236;
        if (v236 == (void (*)(void))((char *)v243 + 1))
          goto LABEL_62;
      }
    }
LABEL_79:
    if (v55 < v45)
      goto LABEL_162;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v236 = (void (*)(void))v55;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
    v155 = *((_QWORD *)v46 + 2);
    v154 = *((_QWORD *)v46 + 3);
    v156 = v155 + 1;
    if (v155 >= v154 >> 1)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v154 > 1), v155 + 1, 1, v46);
    *((_QWORD *)v46 + 2) = v156;
    v157 = v46 + 32;
    v158 = &v46[16 * v155 + 32];
    v159 = v236;
    *(_QWORD *)v158 = v224;
    *((_QWORD *)v158 + 1) = v159;
    if (v155)
    {
      while (1)
      {
        v160 = v156 - 1;
        if (v156 >= 4)
        {
          v165 = &v157[16 * v156];
          v166 = *((_QWORD *)v165 - 8);
          v167 = *((_QWORD *)v165 - 7);
          v171 = __OFSUB__(v167, v166);
          v168 = v167 - v166;
          if (v171)
            goto LABEL_150;
          v170 = *((_QWORD *)v165 - 6);
          v169 = *((_QWORD *)v165 - 5);
          v171 = __OFSUB__(v169, v170);
          v163 = v169 - v170;
          v164 = v171;
          if (v171)
            goto LABEL_151;
          v172 = v156 - 2;
          v173 = &v157[16 * v156 - 32];
          v175 = *(_QWORD *)v173;
          v174 = *((_QWORD *)v173 + 1);
          v171 = __OFSUB__(v174, v175);
          v176 = v174 - v175;
          if (v171)
            goto LABEL_153;
          v171 = __OFADD__(v163, v176);
          v177 = v163 + v176;
          if (v171)
            goto LABEL_156;
          if (v177 >= v168)
          {
            v195 = &v157[16 * v160];
            v197 = *(_QWORD *)v195;
            v196 = *((_QWORD *)v195 + 1);
            v171 = __OFSUB__(v196, v197);
            v198 = v196 - v197;
            if (v171)
              goto LABEL_160;
            v188 = v163 < v198;
            goto LABEL_116;
          }
        }
        else
        {
          if (v156 != 3)
          {
            v189 = *((_QWORD *)v46 + 4);
            v190 = *((_QWORD *)v46 + 5);
            v171 = __OFSUB__(v190, v189);
            v182 = v190 - v189;
            v183 = v171;
            goto LABEL_110;
          }
          v162 = *((_QWORD *)v46 + 4);
          v161 = *((_QWORD *)v46 + 5);
          v171 = __OFSUB__(v161, v162);
          v163 = v161 - v162;
          v164 = v171;
        }
        if ((v164 & 1) != 0)
          goto LABEL_152;
        v172 = v156 - 2;
        v178 = &v157[16 * v156 - 32];
        v180 = *(_QWORD *)v178;
        v179 = *((_QWORD *)v178 + 1);
        v181 = __OFSUB__(v179, v180);
        v182 = v179 - v180;
        v183 = v181;
        if (v181)
          goto LABEL_155;
        v184 = &v157[16 * v160];
        v186 = *(_QWORD *)v184;
        v185 = *((_QWORD *)v184 + 1);
        v171 = __OFSUB__(v185, v186);
        v187 = v185 - v186;
        if (v171)
          goto LABEL_158;
        if (__OFADD__(v182, v187))
          goto LABEL_159;
        if (v182 + v187 >= v163)
        {
          v188 = v163 < v187;
LABEL_116:
          if (v188)
            v160 = v172;
          goto LABEL_118;
        }
LABEL_110:
        if ((v183 & 1) != 0)
          goto LABEL_154;
        v191 = &v157[16 * v160];
        v193 = *(_QWORD *)v191;
        v192 = *((_QWORD *)v191 + 1);
        v171 = __OFSUB__(v192, v193);
        v194 = v192 - v193;
        if (v171)
          goto LABEL_157;
        if (v194 < v182)
          goto LABEL_127;
LABEL_118:
        v199 = v160 - 1;
        if (v160 - 1 >= v156)
        {
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
          goto LABEL_169;
        }
        if (!*v247)
          goto LABEL_172;
        v200 = v46;
        v201 = &v157[16 * v199];
        v202 = *(_QWORD *)v201;
        v203 = &v157[16 * v160];
        v204 = *((_QWORD *)v203 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(*v247 + *(_QWORD *)(v227 + 72) * *(_QWORD *)v201, *v247 + *(_QWORD *)(v227 + 72) * *(_QWORD *)v203, *v247 + *(_QWORD *)(v227 + 72) * v204, v225, v237);
        if (v3)
          goto LABEL_144;
        if (v204 < v202)
          goto LABEL_147;
        if (v160 > *((_QWORD *)v200 + 2))
          goto LABEL_148;
        *(_QWORD *)v201 = v202;
        *(_QWORD *)&v157[16 * v199 + 8] = v204;
        v205 = *((_QWORD *)v200 + 2);
        if (v160 >= v205)
          goto LABEL_149;
        v46 = v200;
        v156 = v205 - 1;
        memmove(&v157[16 * v160], v203 + 16, 16 * (v205 - 1 - v160));
        *((_QWORD *)v200 + 2) = v205 - 1;
        if (v205 <= 2)
          goto LABEL_127;
      }
    }
    v156 = 1;
LABEL_127:
    v19 = v246;
    v38 = v247[1];
    v45 = (Swift::Int)v236;
    if ((uint64_t)v236 >= v38)
    {
      v44 = v215;
LABEL_131:
      v215 = v44;
      if (v156 >= 2)
      {
        v206 = *v247;
        do
        {
          v207 = v156 - 2;
          if (v156 < 2)
            goto LABEL_161;
          if (!v206)
            goto LABEL_174;
          v208 = *(_QWORD *)&v46[16 * v207 + 32];
          v209 = *(_QWORD *)&v46[16 * v156 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v206 + *(_QWORD *)(v227 + 72) * v208, v206 + *(_QWORD *)(v227 + 72) * *(_QWORD *)&v46[16 * v156 + 16], v206 + *(_QWORD *)(v227 + 72) * v209, v225, v237);
          if (v3)
            break;
          if (v209 < v208)
            goto LABEL_163;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v46 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v46);
          if (v207 >= *((_QWORD *)v46 + 2))
            goto LABEL_164;
          v210 = &v46[16 * v207 + 32];
          *(_QWORD *)v210 = v208;
          *((_QWORD *)v210 + 1) = v209;
          v211 = *((_QWORD *)v46 + 2);
          if (v156 > v211)
            goto LABEL_165;
          memmove(&v46[16 * v156 + 16], &v46[16 * v156 + 32], 16 * (v211 - v156));
          *((_QWORD *)v46 + 2) = v211 - 1;
          v156 = v211 - 1;
        }
        while (v211 > 2);
      }
LABEL_144:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v215 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  v217 = v46;
  v213 = 0;
  v239 = (_QWORD)v248 * v47;
  v56 = (char *)v233;
  v234 = (_QWORD)v248 * v55;
  v57 = (uint64_t)v221;
  v58 = (uint64_t)v223;
  while (1)
  {
    v236 = (void (*)(void))v55;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v56[v234], v54, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v244 = v56;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v56[v239], v58, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    v59 = *(int *)(v250 + 48);
    v60 = v57 + v59;
    v61 = v54 + v59;
    v62 = type metadata accessor for UUID();
    v63 = *(_QWORD *)(v62 - 8);
    v64 = *(void (**)(void))(v63 + 16);
    v65 = v54;
    v66 = v62;
    ((void (*)(uint64_t, uint64_t, uint64_t))v64)(v57, v65, v62);
    v67 = type metadata accessor for ActionCandidate();
    v68 = *(_QWORD *)(v67 - 8);
    v69 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 16);
    v242 = v61;
    v249 = v69;
    v69(v60, (char *)v61, v67);
    v70 = *v237;
    v71 = *(_QWORD *)(*v237 + 16);
    v243 = v64;
    if (!v71)
      goto LABEL_24;
    v72 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
    if ((v73 & 1) != 0)
    {
      v232 = *(_QWORD *)(*(_QWORD *)(v70 + 56) + 8 * v72);
      v251 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v251(v60, v67);
      v74 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v74(v57, v66);
      v75 = *(int *)(v250 + 48);
      v76 = (uint64_t)v219;
      v77 = &v219[v75];
      v78 = &v223[v75];
      ((void (*)(char *))v64)(v219);
      v249((uint64_t)v77, v78, v67);
      v79 = *v237;
      if (!*(_QWORD *)(*v237 + 16))
        goto LABEL_25;
      v80 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
      if ((v81 & 1) != 0)
      {
        v82 = *(_QWORD *)(*(_QWORD *)(v79 + 56) + 8 * v80);
        v83 = v251;
        v251((uint64_t)v77, v67);
        v74(v76, v66);
        if (v232 != v82)
        {
          v84 = v232 < v82;
          v58 = (uint64_t)v223;
          v54 = (uint64_t)v226;
          goto LABEL_30;
        }
      }
      else
      {
LABEL_25:
        v83 = v251;
        v251((uint64_t)v77, v67);
        v74(v76, v66);
      }
    }
    else
    {
LABEL_24:
      v83 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v83(v60, v67);
      v74 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v74(v57, v66);
    }
    v85 = v250;
    v86 = &v235[*(int *)(v250 + 48)];
    v87 = v243;
    v243();
    v88 = (void (*)(char *, uint64_t))v83;
    v251 = v83;
    v89 = (void (*)(char *, char *, uint64_t))v249;
    v249((uint64_t)v86, (char *)v242, v67);
    v242 = ActionCandidate.affinityScore.getter();
    v88(v86, v67);
    v90 = *(int *)(v85 + 48);
    v91 = v231;
    v92 = &v231[v90];
    v93 = (void (*)(char *, uint64_t))v74;
    v58 = (uint64_t)v223;
    v94 = &v223[v90];
    ((void (*)(char *, char *, uint64_t))v87)(v231, v223, v66);
    v89(v92, v94, v67);
    v95 = ActionCandidate.affinityScore.getter();
    v251((uint64_t)v92, v67);
    v188 = v95 < v242;
    v19 = v246;
    v84 = v188;
    v93(v91, v66);
    v57 = (uint64_t)v221;
    v96 = v66;
    v54 = (uint64_t)v226;
    v93(v235, v96);
LABEL_30:
    v38 = v241;
    v97 = v244;
    outlined destroy of ReferenceResolutionClientProtocol?(v58, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    outlined destroy of ReferenceResolutionClientProtocol?(v54, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    if (((v240 ^ v84) & 1) != 0)
      break;
    v55 = (Swift::Int)v236 + 1;
    v56 = &v248[(_QWORD)v97];
    if ((void (*)(void))v38 == (void (*)(void))((char *)v236 + 1))
    {
      v55 = v38;
      v3 = v213;
      v46 = v217;
      goto LABEL_37;
    }
  }
  v3 = v213;
  v46 = v217;
  v55 = (Swift::Int)v236;
LABEL_37:
  v45 = (Swift::Int)v224;
  if ((v240 & 1) == 0)
    goto LABEL_51;
LABEL_38:
  if (v55 >= v45)
  {
    if (v45 < v55)
    {
      v217 = v46;
      v98 = 0;
      v99 = (_QWORD)v248 * (v55 - 1);
      v100 = v55 * (_QWORD)v248;
      v101 = v45;
      v102 = v45 * (_QWORD)v248;
      do
      {
        if (v101 != v55 + v98 - 1)
        {
          v104 = v233;
          if (!v233)
            goto LABEL_173;
          v105 = v233 + v102;
          v251 = (void (*)(uint64_t, uint64_t))(v233 + v99);
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v233 + v102, v222, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
          if (v102 < v99 || v105 >= v104 + v100)
          {
            v103 = (uint64_t)v251;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            v103 = (uint64_t)v251;
            if (v102 != v99)
              swift_arrayInitWithTakeBackToFront();
          }
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v222, v103, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        }
        ++v101;
        --v98;
        v99 -= (uint64_t)v248;
        v100 -= (uint64_t)v248;
        v102 += (uint64_t)v248;
      }
      while (v101 < v55 + v98);
      v46 = v217;
      v19 = v246;
      v45 = (Swift::Int)v224;
      v38 = v241;
    }
    goto LABEL_51;
  }
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t *v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t *v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  void *v30;
  Swift::Int v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  Swift::Int v104;
  id v105;
  Swift::Int v106;
  Swift::Int v107;
  Swift::Int v108;
  Swift::Int v109;
  void **v110;
  uint64_t v111;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_132;
    if (v3)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_140;
  v104 = v4;
  v99 = a1;
  if (v3 < 2)
  {
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    v111 = MEMORY[0x1E0DEE9D8];
    v110 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_98:
      if (v11 >= 2)
      {
        v93 = *v99;
        do
        {
          v94 = v11 - 2;
          if (v11 < 2)
            goto LABEL_127;
          if (!v93)
            goto LABEL_139;
          v95 = *(_QWORD *)&v8[16 * v94 + 32];
          v96 = *(_QWORD *)&v8[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v93 + 8 * v95), (id *)(v93 + 8 * *(_QWORD *)&v8[16 * v11 + 16]), v93 + 8 * v96, v110);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_128;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
          if (v94 >= *((_QWORD *)v8 + 2))
            goto LABEL_129;
          v97 = &v8[16 * v94 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v8 + 2);
          if (v11 > v98)
            goto LABEL_130;
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v98 - v11));
          *((_QWORD *)v8 + 2) = v98 - 1;
          v11 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_109:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v6 = v5 >> 1;
    type metadata accessor for AFServiceDeviceContext();
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v110 = (void **)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    v111 = v7;
  }
  v9 = 0;
  v10 = *a1;
  v100 = *a1 - 8;
  v101 = *a1 + 16;
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  v107 = v3;
  while (1)
  {
    v12 = v9++;
    v108 = v12;
    if (v9 < v3)
    {
      v13 = *(void **)(v10 + 8 * v12);
      v14 = *(id *)(v10 + 8 * v9);
      v15 = v13;
      v105 = objc_msgSend(v14, sel_proximity);
      v16 = objc_msgSend(v15, sel_proximity);

      v3 = v107;
      v9 = v12 + 2;
      if (v12 + 2 < v107)
      {
        v102 = v8;
        v17 = (id *)(v101 + 8 * v12);
        while (1)
        {
          v18 = *(v17 - 1);
          v19 = *v17;
          v20 = v18;
          v21 = objc_msgSend(v19, sel_proximity);
          v22 = objc_msgSend(v20, sel_proximity);

          if ((uint64_t)v16 < (uint64_t)v105 == (uint64_t)v22 >= (uint64_t)v21)
            break;
          ++v9;
          ++v17;
          v3 = v107;
          if (v107 == v9)
          {
            v9 = v107;
            v8 = v102;
            goto LABEL_22;
          }
        }
        v8 = v102;
        v3 = v107;
LABEL_22:
        v12 = v108;
      }
      if ((uint64_t)v16 < (uint64_t)v105)
      {
        if (v9 < v12)
          goto LABEL_133;
        if (v12 < v9)
        {
          v23 = (uint64_t *)(v100 + 8 * v9);
          v24 = v9;
          v25 = v12;
          v26 = (uint64_t *)(v10 + 8 * v12);
          do
          {
            if (v25 != --v24)
            {
              if (!v10)
                goto LABEL_138;
              v27 = *v26;
              *v26 = *v23;
              *v23 = v27;
            }
            ++v25;
            --v23;
            ++v26;
          }
          while (v25 < v24);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v12))
        goto LABEL_131;
      if (v9 - v12 < v104)
        break;
    }
LABEL_48:
    if (v9 < v12)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    v40 = *((_QWORD *)v8 + 2);
    v39 = *((_QWORD *)v8 + 3);
    v11 = v40 + 1;
    if (v40 >= v39 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v11;
    v41 = v8 + 32;
    v42 = &v8[16 * v40 + 32];
    *(_QWORD *)v42 = v12;
    *((_QWORD *)v42 + 1) = v9;
    if (v40)
    {
      v109 = v9;
      while (1)
      {
        v43 = v11 - 1;
        if (v11 >= 4)
        {
          v48 = &v41[16 * v11];
          v49 = *((_QWORD *)v48 - 8);
          v50 = *((_QWORD *)v48 - 7);
          v54 = __OFSUB__(v50, v49);
          v51 = v50 - v49;
          if (v54)
            goto LABEL_115;
          v53 = *((_QWORD *)v48 - 6);
          v52 = *((_QWORD *)v48 - 5);
          v54 = __OFSUB__(v52, v53);
          v46 = v52 - v53;
          v47 = v54;
          if (v54)
            goto LABEL_116;
          v55 = v11 - 2;
          v56 = &v41[16 * v11 - 32];
          v58 = *(_QWORD *)v56;
          v57 = *((_QWORD *)v56 + 1);
          v54 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          if (v54)
            goto LABEL_118;
          v54 = __OFADD__(v46, v59);
          v60 = v46 + v59;
          if (v54)
            goto LABEL_121;
          if (v60 >= v51)
          {
            v78 = &v41[16 * v43];
            v80 = *(_QWORD *)v78;
            v79 = *((_QWORD *)v78 + 1);
            v54 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            if (v54)
              goto LABEL_125;
            v71 = v46 < v81;
            goto LABEL_86;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v72 = *((_QWORD *)v8 + 4);
            v73 = *((_QWORD *)v8 + 5);
            v54 = __OFSUB__(v73, v72);
            v65 = v73 - v72;
            v66 = v54;
            goto LABEL_80;
          }
          v45 = *((_QWORD *)v8 + 4);
          v44 = *((_QWORD *)v8 + 5);
          v54 = __OFSUB__(v44, v45);
          v46 = v44 - v45;
          v47 = v54;
        }
        if ((v47 & 1) != 0)
          goto LABEL_117;
        v55 = v11 - 2;
        v61 = &v41[16 * v11 - 32];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v64 = __OFSUB__(v62, v63);
        v65 = v62 - v63;
        v66 = v64;
        if (v64)
          goto LABEL_120;
        v67 = &v41[16 * v43];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v54 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v54)
          goto LABEL_123;
        if (__OFADD__(v65, v70))
          goto LABEL_124;
        if (v65 + v70 >= v46)
        {
          v71 = v46 < v70;
LABEL_86:
          if (v71)
            v43 = v55;
          goto LABEL_88;
        }
LABEL_80:
        if ((v66 & 1) != 0)
          goto LABEL_119;
        v74 = &v41[16 * v43];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v54 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v54)
          goto LABEL_122;
        if (v77 < v65)
          goto LABEL_14;
LABEL_88:
        v82 = v43 - 1;
        if (v43 - 1 >= v11)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v83 = v10;
        if (!v10)
          goto LABEL_137;
        v84 = v8;
        v85 = &v41[16 * v82];
        v86 = *(_QWORD *)v85;
        v87 = v41;
        v88 = v43;
        v89 = &v41[16 * v43];
        v90 = *((_QWORD *)v89 + 1);
        v91 = v83;
        specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v83 + 8 * *(_QWORD *)v85), (id *)(v83 + 8 * *(_QWORD *)v89), v83 + 8 * v90, v110);
        if (v1)
          goto LABEL_109;
        if (v90 < v86)
          goto LABEL_112;
        if (v88 > *((_QWORD *)v84 + 2))
          goto LABEL_113;
        *(_QWORD *)v85 = v86;
        *(_QWORD *)&v87[16 * v82 + 8] = v90;
        v92 = *((_QWORD *)v84 + 2);
        if (v88 >= v92)
          goto LABEL_114;
        v8 = v84;
        v11 = v92 - 1;
        memmove(v89, v89 + 16, 16 * (v92 - 1 - v88));
        v41 = v87;
        *((_QWORD *)v84 + 2) = v92 - 1;
        v10 = v91;
        v9 = v109;
        if (v92 <= 2)
          goto LABEL_14;
      }
    }
    v11 = 1;
LABEL_14:
    v3 = v107;
    if (v9 >= v107)
      goto LABEL_98;
  }
  if (__OFADD__(v12, v104))
    goto LABEL_134;
  if (v12 + v104 >= v3)
    v28 = v3;
  else
    v28 = v12 + v104;
  if (v28 >= v12)
  {
    if (v9 != v28)
    {
      v103 = v8;
      v29 = v100 + 8 * v9;
      v106 = v28;
      do
      {
        v30 = *(void **)(v10 + 8 * v9);
        v31 = v12;
        v32 = v29;
        do
        {
          v33 = *(void **)v32;
          v34 = v30;
          v35 = v33;
          v36 = objc_msgSend(v34, sel_proximity);
          v37 = objc_msgSend(v35, sel_proximity);

          if ((uint64_t)v37 >= (uint64_t)v36)
            break;
          if (!v10)
            goto LABEL_136;
          v38 = *(void **)v32;
          v30 = *(void **)(v32 + 8);
          *(_QWORD *)v32 = v30;
          *(_QWORD *)(v32 + 8) = v38;
          v32 -= 8;
          ++v31;
        }
        while (v9 != v31);
        ++v9;
        v29 += 8;
        v12 = v108;
      }
      while (v9 != v106);
      v9 = v106;
      v8 = v103;
    }
    goto LABEL_48;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  BOOL v52;
  void (*v53)(void);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  void (*v83)(char *, uint64_t);
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  void (*v91)(uint64_t, char *, uint64_t);
  void (*v92)(void);
  uint64_t v93;
  uint64_t v94;

  v82 = a5;
  v89 = a4;
  v71 = a1;
  v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  v7 = MEMORY[0x1E0C80A78](v93);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v72 = (char *)&v69 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v76 = (char *)&v69 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v75 = (char *)&v69 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v69 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v69 - v20;
  result = MEMORY[0x1E0C80A78](v19);
  v25 = (char *)&v69 - v24;
  v81 = a3;
  v70 = a2;
  if (a3 != a2)
  {
    v26 = *(_QWORD *)(v23 + 72);
    v27 = v26 * (v81 - 1);
    v77 = v21;
    v78 = v26;
    v28 = v26 * v81;
    v73 = v18;
    v74 = v9;
    v86 = (char *)&v69 - v24;
LABEL_5:
    v94 = 0;
    v90 = v71;
    v79 = v28;
    v80 = v27;
    while (1)
    {
      v29 = *v89;
      v30 = v94;
      v88 = v28 + v94;
      outlined init with copy of ReferenceResolutionClientProtocol?(v28 + v94 + v29, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      v87 = v27 + v30;
      outlined init with copy of ReferenceResolutionClientProtocol?(v27 + v30 + v29, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      v31 = *(int *)(v93 + 48);
      v32 = &v18[v31];
      v33 = &v25[v31];
      v34 = type metadata accessor for UUID();
      v35 = *(_QWORD *)(v34 - 8);
      v92 = *(void (**)(void))(v35 + 16);
      ((void (*)(char *, char *, uint64_t))v92)(v18, v25, v34);
      v36 = type metadata accessor for ActionCandidate();
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 16);
      v85 = (uint64_t)v33;
      v91 = v38;
      v38((uint64_t)v32, v33, v36);
      v39 = *v82;
      if (*(_QWORD *)(*v82 + 16)
        && (v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18), (v41 & 1) != 0))
      {
        v84 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v39 + 56) + 8 * v40);
        v42 = *(void (**)(char *, uint64_t))(v37 + 8);
        v42(v32, v36);
        v43 = *(void (**)(char *, uint64_t))(v35 + 8);
        v43(v18, v34);
        v44 = *(int *)(v93 + 48);
        v45 = &v72[v44];
        v46 = &v21[v44];
        v92();
        v91((uint64_t)v45, v46, v36);
        v47 = *v82;
        if (*(_QWORD *)(*v82 + 16)
          && (v48 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v72), (v49 & 1) != 0))
        {
          v50 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v47 + 56) + 8 * v48);
          v51 = v42;
          v42(v45, v36);
          v43(v72, v34);
          if (v84 != v50)
          {
            v52 = (uint64_t)v84 < (uint64_t)v50;
            v21 = v77;
            v25 = v86;
            goto LABEL_16;
          }
        }
        else
        {
          v51 = v42;
          v42(v45, v36);
          v43(v72, v34);
        }
      }
      else
      {
        v51 = *(void (**)(char *, uint64_t))(v37 + 8);
        v51(v32, v36);
        v43 = *(void (**)(char *, uint64_t))(v35 + 8);
        v43(v18, v34);
      }
      v83 = v51;
      v84 = v43;
      v53 = v92;
      v54 = v93;
      v55 = v75;
      v56 = &v75[*(int *)(v93 + 48)];
      ((void (*)(char *, char *, uint64_t))v92)(v75, v86, v34);
      v57 = v34;
      v58 = (void (*)(char *, char *, uint64_t))v91;
      v91((uint64_t)v56, (char *)v85, v36);
      v85 = ActionCandidate.affinityScore.getter();
      v51(v56, v36);
      v59 = *(int *)(v54 + 48);
      v60 = v76;
      v21 = v77;
      v61 = &v76[v59];
      v62 = &v77[v59];
      ((void (*)(char *, char *, uint64_t))v53)(v76, v77, v57);
      v58(v61, v62, v36);
      v63 = ActionCandidate.affinityScore.getter();
      v64 = v36;
      v25 = v86;
      v83(v61, v64);
      v65 = v84;
      v52 = v63 < v85;
      v66 = v60;
      v18 = v73;
      v9 = v74;
      v84(v66, v57);
      v65(v55, v57);
LABEL_16:
      v28 = v79;
      v27 = v80;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      if (!v52)
        goto LABEL_4;
      v67 = *v89;
      if (!*v89)
      {
        __break(1u);
        return result;
      }
      v68 = v67 + v27 + v94;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v67 + v28 + v94, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      swift_arrayInitWithTakeFrontToBack();
      result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v68, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      v94 -= v78;
      if (v81 == ++v90)
      {
LABEL_4:
        v27 += v78;
        v28 += v78;
        if (++v81 == v70)
          return result;
        goto LABEL_5;
      }
    }
  }
  return result;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v17;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    v7 = *(void **)(v5 + 8 * v4);
    v8 = a1;
    v17 = v6;
    while (1)
    {
      v9 = *(void **)v6;
      v10 = v7;
      v11 = v9;
      v12 = objc_msgSend(v10, sel_proximity);
      v13 = objc_msgSend(v11, sel_proximity);

      if ((uint64_t)v13 >= (uint64_t)v12)
      {
LABEL_4:
        ++v4;
        v6 = v17 + 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v14 = *(void **)v6;
      v7 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v7;
      *(_QWORD *)(v6 + 8) = v14;
      v6 -= 8;
      if (v4 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t RemoteFlowPluginBundleConversationHandler.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t CorrectionsService.getCorrectionsAction(input:conversationUserInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD v30[2];
  uint64_t v31;

  v31 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UndoAction?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UndoAction();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v30[1] = __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v30[0] = v14;
    v19 = a3;
    v20 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "[CorrectionsService] Checking for corrections without a possible followup", v18, 2u);
    v21 = v20;
    a3 = v19;
    v14 = (char *)v30[0];
    MEMORY[0x1B5E44758](v21, -1, -1);
  }

  CorrectionsService.getUndoAction(_:conversationUserInput:)(v31, (uint64_t)v10);
  v31 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UndoAction?);
    v22 = type metadata accessor for Input();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 1, 1, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1B4BE6000, v24, v25, "[CorrectionsService] Detected user requested undo", v26, 2u);
      MEMORY[0x1B5E44758](v26, -1, -1);
    }

    v27 = type metadata accessor for Input();
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v7, v31, v27);
    v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56);
    v29(v7, 0, 1, v27);
    CorrectionsService.generateNewInput(from:originalInput:)((uint64_t)v14, (uint64_t)v7, a3);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v29)(a3, 0, 1, v27);
  }
}

uint64_t CorrectionsService.getUndoAction(_:conversationUserInput:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  ValueMetadata *v35;
  _QWORD v36[3];
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;

  v39 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectionsContext?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Parse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CorrectionsParse();
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (_QWORD *)((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UndoAction?);
  MEMORY[0x1E0C80A78](v13);
  v34 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((Input.inputOrAlternativesDirectDismissal.getter() & 1) != 0)
  {
    v15 = type metadata accessor for UndoAction();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
  v31 = a2;
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v17 = static SydneyConversationFeatureFlags.forceEnabled;
  if (*(_QWORD *)(static SydneyConversationFeatureFlags.forceEnabled + 16)
    && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(1), (v19 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v17 + 56) + v18) != 1)
      goto LABEL_14;
  }
  else
  {
    v37 = &type metadata for SydneyConversationFeatureFlags;
    v38 = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
    LOBYTE(v36[0]) = 1;
    v20 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    if ((v20 & 1) == 0)
    {
LABEL_14:
      v28 = type metadata accessor for UndoAction();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v31, 1, 1, v28);
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v35[1], (uint64_t)v36);
  v21 = v38;
  v35 = v37;
  v30[1] = __swift_project_boxed_opaque_existential_1(v36, (uint64_t)v37);
  Input.parse.getter();
  Parse.asCorrectionsParse()(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (*(_QWORD *)(v39 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo))
    swift_bridgeObjectRetain();
  v22 = v33;
  v23 = (uint64_t)v34;
  v24 = v32;
  CorrectionsContext.init(userId:assistantId:)();
  v25 = type metadata accessor for CorrectionsContext();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v5, 0, 1, v25);
  (*(void (**)(_QWORD *, char *, ValueMetadata *, unint64_t))(v21 + 24))(v12, v5, v35, v21);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for CorrectionsContext?);
  (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v12, v22);
  v26 = type metadata accessor for UndoAction();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v23, 1, v26) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for UndoAction?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    goto LABEL_14;
  }
  v29 = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v31, v23, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
}

unint64_t lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags;
  if (!lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SydneyConversationFeatureFlags, &type metadata for SydneyConversationFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags;
  if (!lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SydneyConversationFeatureFlags, &type metadata for SydneyConversationFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags;
  if (!lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SydneyConversationFeatureFlags, &type metadata for SydneyConversationFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*a3 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SydneyConversationFeatureFlags()
{
  _BYTE *v0;
  const char *v1;

  v1 = "SKESiriCorrectionsCheckUndo";
  if (*v0 != 1)
    v1 = "SKESiriCorrectionsUndoFollowup";
  if (*v0)
    return v1;
  else
    return "fall2022_conversation_runtime";
}

uint64_t Parse.asCorrectionsParse()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for USOParse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Parse();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 16))(v13, v2, v10);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x1E0D9C5E8])
  {
    (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v13, v10);
    *a1 = *v13;
    v15 = (unsigned int *)MEMORY[0x1E0D97C40];
LABEL_5:
    v16 = *v15;
    v17 = type metadata accessor for CorrectionsParse();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(a1, v16, v17);
  }
  if (v14 == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 32))(v9, v13, v6);
    USOParse.userParse.getter();
    USOParse.parserIdentifier.getter();
    USOParse.appBundleId.getter();
    CorrectionsUSOParse.init(userParse:parserIdentifier:appBundleId:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v15 = (unsigned int *)MEMORY[0x1E0D97C48];
    goto LABEL_5;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1B4BE6000, v20, v21, "Received unexpected Parse type in asCorrectionsParse", v22, 2u);
    MEMORY[0x1B5E44758](v22, -1, -1);
  }

  v23 = *MEMORY[0x1E0D97C50];
  v24 = type metadata accessor for CorrectionsParse();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a1, v23, v24);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t protocol witness for CorrectionsHandling.checkUndo(input:context:) in conformance CorrectionsPlatformClient()
{
  return dispatch thunk of CorrectionsPlatformClient.checkUndo(input:context:)();
}

uint64_t protocol witness for AmbiguityServiceProviding.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:) in conformance AmbiguityService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;

  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v15;
  *v15 = v8;
  v15[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 224);
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for Input?);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void (*v8)(unint64_t, unint64_t, uint64_t);
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 648);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v0 + 656) = v2;
    if (v2)
    {
      v4 = *(_QWORD *)(v0 + 464);
      v3 = *(_QWORD *)(v0 + 472);
      v6 = *(_QWORD *)(v0 + 440);
      v5 = *(_QWORD *)(v0 + 448);
      v7 = *(_DWORD *)(v5 + 80);
      *(_DWORD *)(v0 + 52) = v7;
      v8 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
      *(_QWORD *)(v0 + 664) = v8;
      v8(v3, v1 + ((v7 + 32) & ~(unint64_t)v7), v6);
      v8(v4, v3, v6);
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.debug.getter();
      v11 = os_log_type_enabled(v9, v10);
      v12 = *(_QWORD *)(v0 + 464);
      v13 = *(_QWORD *)(v0 + 440);
      v14 = *(_QWORD *)(v0 + 448);
      if (v11)
      {
        v15 = (uint8_t *)swift_slowAlloc();
        v43 = swift_slowAlloc();
        v45 = v43;
        *(_DWORD *)v15 = 136315138;
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type RankedAction and conformance RankedAction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D97B60], MEMORY[0x1E0D97B70]);
        v16 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
        v18(v12, v13);
        _os_log_impl(&dword_1B4BE6000, v9, v10, "[AmbiguityService] Top action after CAAR ranking: %s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v43, -1, -1);
        MEMORY[0x1B5E44758](v15, -1, -1);
      }
      else
      {
        v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
        v18(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 440));
      }

      *(_QWORD *)(v0 + 672) = v18;
      v29 = *(_QWORD *)(v0 + 432);
      v30 = *(_QWORD **)(v0 + 376);
      v31 = *(_QWORD *)(v0 + 384);
      v32 = *(_QWORD *)(v0 + 368);
      v41 = *(_QWORD *)(v0 + 360);
      v33 = *(_QWORD *)(v0 + 344);
      v42 = *(_QWORD *)(v0 + 352);
      v34 = *(_QWORD *)(v0 + 336);
      v40 = *(_QWORD *)(v0 + 328);
      v35 = *(_QWORD **)(v0 + 208);
      v36 = type metadata accessor for ActionParaphrase();
      *(_QWORD *)(v0 + 680) = v36;
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
      *(_QWORD *)(v0 + 688) = v37;
      v37(v31, 1, 1, v36);
      RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v31, v29);
      outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for ActionParaphrase?);
      RankedAction.parse.getter();
      CamParse.asSKEParse()(v30);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v40);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v41 + 16))(v32, v30, v42);
      Input.init(parse:)();
      v38 = v35[7];
      __swift_project_boxed_opaque_existential_1(v35 + 3, v35[6]);
      v44 = **(int **)(v38 + 32) + *(_QWORD *)(v38 + 32);
      v39 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 696) = v39;
      *v39 = v0;
      v39[1] = AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:);
      __asm { BR              X8 }
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1B4BE6000, v19, v20, "[AmbiguityService] Despite a non-empty list of action candidates, CAAR didn't return a list of ranked actions or returned an empty one. This might be a bug in CAAR. Returning a default response.", v21, 2u);
    MEMORY[0x1B5E44758](v21, -1, -1);
  }
  v23 = *(_QWORD *)(v0 + 496);
  v22 = *(_QWORD *)(v0 + 504);
  v24 = *(_QWORD *)(v0 + 488);
  v25 = *(_QWORD *)(v0 + 176);
  v27 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 136);

  AmbiguityService.getDefaultResponse(input:conversationUserInput:)(v25, v26, v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(unint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  double *v44;
  double v45;
  double v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(uint64_t, unint64_t);
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t (*v72)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v73;

  if (one-time initialization token for executor != -1)
LABEL_37:
    swift_once();
  v1 = *(_QWORD *)(v0 + 160);
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 616) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(_QWORD **)(v0 + 136);
    v4 = v3[2];
    *(_QWORD *)(v0 + 624) = v4;
    v5 = v3[3];
    *(_QWORD *)(v0 + 632) = v5;
    v6 = v3[5];
    v58 = v5;
    v59 = v4;
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 16);
      v8 = MEMORY[0x1E0DEE9D8];
      v73 = MEMORY[0x1E0DEE9D8];
      v9 = *(_QWORD *)(v7 + 16);
      v10 = swift_bridgeObjectRetain();
      v65 = v9;
      if (v9)
      {
        v11 = 0;
        v12 = *(_QWORD *)(v0 + 576);
        v63 = *(_QWORD *)(v0 + 552);
        v62 = *(_QWORD *)(v0 + 520);
        v61 = *MEMORY[0x1E0D9F100];
        v60 = MEMORY[0x1E0DEE9D8];
        v64 = v10;
        while (1)
        {
          if (v11 >= *(_QWORD *)(v10 + 16))
          {
            __break(1u);
            goto LABEL_37;
          }
          v14 = *(_QWORD *)(v0 + 600);
          v69 = *(_QWORD *)(v0 + 568);
          v70 = *(_QWORD *)(v0 + 592);
          v15 = *(_QWORD *)(v0 + 560);
          v16 = *(_QWORD *)(v0 + 544);
          v17 = *(_QWORD *)(v0 + 536);
          v18 = *(_QWORD *)(v0 + 528);
          v19 = *(_QWORD *)(v0 + 512);
          v67 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
          v66 = *(_QWORD *)(v12 + 72);
          v68 = *(void (**)(uint64_t, unint64_t))(v12 + 16);
          v68(v14, v10 + v67 + v66 * v11);
          Siri_Nlu_External_UserParse.parser.getter();
          Siri_Nlu_External_Parser.parserID.getter();
          (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v15, v16);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v62 + 104))(v18, v61, v19);
          lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F178]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          v20 = *(_QWORD *)(v0 + 104);
          v21 = *(_QWORD *)(v0 + 112);
          v22 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
          v22(v18, v19);
          v22(v17, v19);
          ((void (*)(uint64_t, uint64_t, uint64_t))v68)(v70, v14, v69);
          v23 = *(_QWORD *)(v0 + 592);
          v24 = *(_QWORD *)(v0 + 568);
          if (v20 == v21)
          {
            v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
            v13(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 568));
          }
          else
          {
            v25 = Siri_Nlu_External_UserParse.isOverriddenPSC.getter();
            v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
            v13(v23, v24);
            if ((v25 & 1) == 0)
            {
              v26 = *(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 32);
              v26(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 568));
              v27 = v60;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v60 + 16) + 1, 1);
                v27 = v73;
              }
              v29 = *(_QWORD *)(v27 + 16);
              v28 = *(_QWORD *)(v27 + 24);
              if (v29 >= v28 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
                v27 = v73;
              }
              v30 = *(_QWORD *)(v0 + 584);
              v31 = *(_QWORD *)(v0 + 568);
              *(_QWORD *)(v27 + 16) = v29 + 1;
              v26(v27 + v67 + v29 * v66, v30, v31);
              v60 = v27;
              v73 = v27;
              goto LABEL_8;
            }
          }
          v13(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 568));
LABEL_8:
          ++v11;
          v10 = v64;
          if (v65 == v11)
            goto LABEL_22;
        }
      }
      v60 = v8;
LABEL_22:
      swift_bridgeObjectRelease();
      v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_Sds5NeverOTg504_s14d62KitRuntime16AmbiguityServiceC17findBestActionFor21conversationh260Input0j6HelperL00jM016actionCandidates02rrO08fallback20previousConversation11inputOriginAA0dE8ResponseVSgAA0skL0C_AA0smL0VAA0sM0CSay0A3Cam0H9CandidateVGSay0A28ReferenceResolutionDataModel11RRCandidateVG0aB4Flow0L0VAA06RemoteS6ClientCSgSStYaKFSd0A8NLUTypes0a14_f1_g3_K5I56Vcfu_33_8b0e7d0ff9134e4aee37f7deef662011A10_SdTf3nnnpk_nTf1cn_n(v60);
      swift_release();
      v41 = *(_QWORD *)(v40 + 16);
      v71 = v41 == 0;
      if (v41)
      {
        v42 = *(double *)(v40 + 32);
        v43 = v41 - 1;
        if (v43)
        {
          v44 = (double *)(v40 + 40);
          do
          {
            v45 = *v44++;
            v46 = v45;
            if (v42 < v45)
              v42 = v46;
            --v43;
          }
          while (v43);
        }
        v39 = v42;
      }
      else
      {
        v39 = 0.0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = 0.0;
      v71 = 1;
    }
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      v50 = swift_slowAlloc();
      v73 = v50;
      *(_DWORD *)v49 = 136315138;
      *(double *)(v0 + 40) = v39;
      *(_BYTE *)(v0 + 48) = v71;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
      v51 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v47, v48, "Extracted maxNLProba %s", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v50, -1, -1);
      MEMORY[0x1B5E44758](v49, -1, -1);
    }

    v53 = *(_QWORD *)(v0 + 184);
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentRequest.getter();
    swift_release();
    CurrentRequest.responseMode.getter();
    swift_release();
    if (v53)
      swift_bridgeObjectRetain();
    v54 = *(_QWORD **)(v0 + 208);
    swift_bridgeObjectRetain();
    RankerContext.init(rrCandidates:responseMode:previousConversationHandlerId:maxNLProba:)();
    v55 = v54[6];
    v56 = v54[7];
    __swift_project_boxed_opaque_existential_1(v54 + 3, v55);
    v72 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v56 + 56)
                                                                                     + *(_QWORD *)(v56 + 56));
    v57 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 640) = v57;
    *v57 = v0;
    v57[1] = AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:);
    return v72(v59, v58, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 504), v55, v56);
  }
  else
  {
    swift_release();
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1B4BE6000, v32, v33, "[AmbiguityService] findBestActionFor was not given a list of action candidates, returning a default response.", v34, 2u);
      MEMORY[0x1B5E44758](v34, -1, -1);
    }
    v35 = *(_QWORD *)(v0 + 176);
    v37 = *(_QWORD *)(v0 + 128);
    v36 = *(_QWORD *)(v0 + 136);

    AmbiguityService.getDefaultResponse(input:conversationUserInput:)(v35, v36, v37);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 248);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 264) + 48))(v1, 1, *(_QWORD *)(v0 + 256)) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for CamOutput?);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, v2, v3, "[AmbiguityService] CAM ambiguity handling failed. Fall back to returning pluginActions", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }

    swift_bridgeObjectRetain();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 648);
    if (v7)
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v9 = 134217984;
      *(_QWORD *)(v0 + 64) = *(_QWORD *)(v8 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v5, v6, "[AmbiguityService] Converting %ld rankedActions to PluginActions", v9, 0xCu);
      MEMORY[0x1B5E44758](v9, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v68 = *(_QWORD *)(*(_QWORD *)(v0 + 448) + 72);
    v70 = *(_QWORD *)(v0 + 400);
    swift_bridgeObjectRetain();
    v21 = 0;
    v22 = 0;
    v23 = MEMORY[0x1E0DEE9D8];
    do
    {
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 688);
      v25 = *(_QWORD *)(v0 + 680);
      v72 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
      v74 = v23;
      v26 = *(_QWORD *)(v0 + 456);
      v27 = *(_QWORD *)(v0 + 440);
      v29 = *(_QWORD *)(v0 + 384);
      v28 = *(_QWORD *)(v0 + 392);
      v30 = *(_QWORD *)(v0 + 240);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 664))(v26, *(_QWORD *)(v0 + 648)+ v21+ ((*(unsigned __int8 *)(v0 + 52) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 52)), v27);
      v24(v29, 1, 1, v25);
      RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v29, v30);
      outlined destroy of ReferenceResolutionClientProtocol?(v29, &demangling cache variable for type metadata for ActionParaphrase?);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v30, 0, 1, v28);
      v72(v26, v27);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v30, 1, v28) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 240), &demangling cache variable for type metadata for PluginAction?);
        v23 = v74;
      }
      else
      {
        v31 = *(_QWORD *)(v0 + 416);
        v32 = *(_QWORD *)(v0 + 424);
        v33 = *(_QWORD *)(v0 + 392);
        v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32);
        v34(v32, *(_QWORD *)(v0 + 240), v33);
        v34(v31, v32, v33);
        v23 = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v74 + 16) + 1, 1, v74);
        v36 = *(_QWORD *)(v23 + 16);
        v35 = *(_QWORD *)(v23 + 24);
        if (v36 >= v35 >> 1)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v23);
        v37 = *(_QWORD *)(v0 + 416);
        v38 = *(_QWORD *)(v0 + 392);
        *(_QWORD *)(v23 + 16) = v36 + 1;
        v34(v23+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v36, v37, v38);
      }
      *(_QWORD *)(v0 + 712) = v23;
      ++v22;
      v21 += v68;
    }
    while (v22 != *(_QWORD *)(v0 + 656));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    v41 = os_log_type_enabled(v39, v40);
    v42 = *(_QWORD *)(v0 + 648);
    if (v41)
    {
      v43 = swift_slowAlloc();
      *(_DWORD *)v43 = 134218240;
      v44 = *(_QWORD *)(v42 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 88) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2048;
      v45 = *(_QWORD *)(v23 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 56) = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v39, v40, "[AmbiguityService] Converted %ld rankedActions to %ld pluginActions", (uint8_t *)v43, 0x16u);
      MEMORY[0x1B5E44758](v43, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
    }
    if (*(_QWORD *)(v23 + 16))
    {
      v48 = *(_QWORD *)(v0 + 296);
      v49 = *(_QWORD *)(v0 + 304);
      v50 = *(_QWORD *)(v0 + 224);
      (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 16))(*(_QWORD *)(v0 + 408), v23 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80)), *(_QWORD *)(v0 + 392));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, 1, 1, v48);
      v51 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 720) = v51;
      *v51 = v0;
      v51[1] = AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:);
      return CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:)(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 224));
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      v52 = Logger.logObject.getter();
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v54 = 0;
        _os_log_impl(&dword_1B4BE6000, v52, v53, "[AmbiguityService] Could not convert ranked actions to plugin actions", v54, 2u);
        MEMORY[0x1B5E44758](v54, -1, -1);
      }
      v69 = *(_QWORD *)(v0 + 496);
      v71 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
      v73 = *(_QWORD *)(v0 + 488);
      v75 = *(_QWORD *)(v0 + 504);
      v66 = *(_QWORD *)(v0 + 440);
      v67 = *(_QWORD *)(v0 + 472);
      v64 = *(_QWORD *)(v0 + 392);
      v65 = *(_QWORD *)(v0 + 432);
      v62 = *(_QWORD *)(v0 + 376);
      v63 = *(_QWORD *)(v0 + 400);
      v56 = *(_QWORD *)(v0 + 352);
      v55 = *(_QWORD *)(v0 + 360);
      v57 = *(_QWORD *)(v0 + 320);
      v58 = *(_QWORD *)(v0 + 296);
      v59 = *(_QWORD *)(v0 + 304);
      v61 = *(_QWORD *)(v0 + 128);
      v60 = *(_QWORD *)(v0 + 136);

      AmbiguityService.getDefaultResponse(input:conversationUserInput:)(v57, v60, v61);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v62, v56);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v64);
      v71(v67, v66);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v75, v73);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease();
    outlined init with take of CamOutput(v1, v10);
    outlined init with copy of CamOutput(v10, v11);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 280);
    if (v14)
    {
      v16 = *(_QWORD *)(v0 + 272);
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v76 = v18;
      *(_DWORD *)v17 = 136315138;
      outlined init with copy of CamOutput(v15, v16);
      v19 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of CamOutput(v15, (uint64_t (*)(_QWORD))type metadata accessor for CamOutput);
      _os_log_impl(&dword_1B4BE6000, v12, v13, "[AmbiguityService] CAM output: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v18, -1, -1);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
    else
    {
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 280), (uint64_t (*)(_QWORD))type metadata accessor for CamOutput);
    }

    v46 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 704) = v46;
    *v46 = v0;
    v46[1] = AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:);
    return AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 136));
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 712);
  v25 = *(_QWORD *)(v0 + 496);
  v26 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
  v27 = *(_QWORD *)(v0 + 488);
  v28 = *(_QWORD *)(v0 + 504);
  v23 = *(_QWORD *)(v0 + 440);
  v24 = *(_QWORD *)(v0 + 472);
  v22 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 360);
  v20 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD **)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 128);
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol?(v5, v6, &demangling cache variable for type metadata for Input?);
  *v7 = v1;
  v9 = type metadata accessor for AmbiguityOutput(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  PluginAction.input.getter();
  Input.parse.getter();
  v10 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v10(v3, v4);
  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for Input?);
  v11 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v11(v2, v17);
  v10(v16, v4);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  v11(v22, v17);
  v26(v24, v23);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v27);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v6, v8, &demangling cache variable for type metadata for Input?);
  v12 = type metadata accessor for AmbiguityServiceResponse(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v8 + *(int *)(v12 + 20), &demangling cache variable for type metadata for AmbiguityOutput?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v8 + *(int *)(v12 + 24), v18, v20);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
  v19 = *(_QWORD *)(v0 + 504);
  v15 = *(_QWORD *)(v0 + 496);
  v17 = *(_QWORD *)(v0 + 488);
  v13 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 128);
  swift_release();
  outlined destroy of CamOutput(v9, (uint64_t (*)(_QWORD))type metadata accessor for CamOutput);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v2);
  v16(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v19, v17);
  v10 = type metadata accessor for AmbiguityServiceResponse(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v18, 0, 1, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 648) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v9[25] = v22;
  v9[26] = v8;
  v9[23] = a8;
  v9[24] = v21;
  v9[21] = a6;
  v9[22] = a7;
  v9[19] = a4;
  v9[20] = a5;
  v9[17] = a2;
  v9[18] = a3;
  v9[16] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
  v9[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v9[28] = swift_task_alloc();
  v9[29] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v9[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamOutput?);
  v9[31] = swift_task_alloc();
  v10 = type metadata accessor for CamOutput();
  v9[32] = v10;
  v9[33] = *(_QWORD *)(v10 - 8);
  v9[34] = swift_task_alloc();
  v9[35] = swift_task_alloc();
  v9[36] = swift_task_alloc();
  v11 = type metadata accessor for Input();
  v9[37] = v11;
  v9[38] = *(_QWORD *)(v11 - 8);
  v9[39] = swift_task_alloc();
  v9[40] = swift_task_alloc();
  v12 = type metadata accessor for CamParse();
  v9[41] = v12;
  v9[42] = *(_QWORD *)(v12 - 8);
  v9[43] = swift_task_alloc();
  v13 = type metadata accessor for Parse();
  v9[44] = v13;
  v9[45] = *(_QWORD *)(v13 - 8);
  v9[46] = swift_task_alloc();
  v9[47] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v9[48] = swift_task_alloc();
  v14 = type metadata accessor for PluginAction();
  v9[49] = v14;
  v9[50] = *(_QWORD *)(v14 - 8);
  v9[51] = swift_task_alloc();
  v9[52] = swift_task_alloc();
  v9[53] = swift_task_alloc();
  v9[54] = swift_task_alloc();
  v15 = type metadata accessor for RankedAction();
  v9[55] = v15;
  v9[56] = *(_QWORD *)(v15 - 8);
  v9[57] = swift_task_alloc();
  v9[58] = swift_task_alloc();
  v9[59] = swift_task_alloc();
  type metadata accessor for ResponseMode();
  v9[60] = swift_task_alloc();
  v16 = type metadata accessor for RankerContext();
  v9[61] = v16;
  v9[62] = *(_QWORD *)(v16 - 8);
  v9[63] = swift_task_alloc();
  v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v9[64] = v17;
  v9[65] = *(_QWORD *)(v17 - 8);
  v9[66] = swift_task_alloc();
  v9[67] = swift_task_alloc();
  v18 = type metadata accessor for Siri_Nlu_External_Parser();
  v9[68] = v18;
  v9[69] = *(_QWORD *)(v18 - 8);
  v9[70] = swift_task_alloc();
  v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  v9[71] = v19;
  v9[72] = *(_QWORD *)(v19 - 8);
  v9[73] = swift_task_alloc();
  v9[74] = swift_task_alloc();
  v9[75] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v9[76] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t type metadata accessor for CamOutput()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CamOutput;
  if (!type metadata singleton initialization cache for CamOutput)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t protocol witness for CamBridge.rank(rcId:actions:rankerContext:) in conformance CamBridgeImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return CamBridgeImpl.rank(rcId:actions:rankerContext:)(a1, a2, a3, a4);
}

uint64_t CamBridgeImpl.rank(rcId:actions:rankerContext:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)

  else
    *(_QWORD *)(v4 + 360) = a1;
  return swift_task_switch();
}

uint64_t CamBridgeImpl.rank(rcId:actions:rankerContext:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "CamBridge: Ranking threw error", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 288);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5, v7);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **p_cache;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  void (*v12)(unint64_t, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  void **v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  swift_release();
  v4 = specialized static CamBridgeImpl.collateParses(rcId:rankedActions:)(v3, v2, v1);
  swift_bridgeObjectRelease();
  v5 = MEMORY[0x1E0DEE9D8];
  v39 = MEMORY[0x1E0DEE9D8];
  v6 = *(void ***)(v4 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    p_cache = 0;
    v8 = *(_QWORD *)(v0 + 240);
    v38 = v6;
    while ((unint64_t)p_cache < *(_QWORD *)(v4 + 16))
    {
      v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v10 = *(_QWORD *)(v8 + 72);
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v8 + 16))(*(_QWORD *)(v0 + 256), v4 + v9 + v10 * (_QWORD)p_cache, *(_QWORD *)(v0 + 232));
      RankedAction.score.getter();
      if (v11 < 0.1)
      {
        (*(void (**)(_QWORD, _QWORD))(v8 + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232));
      }
      else
      {
        v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32);
        v12(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
          v5 = v39;
        }
        v14 = *(_QWORD *)(v5 + 16);
        v13 = *(_QWORD *)(v5 + 24);
        v15 = v5;
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          v15 = v39;
        }
        v16 = *(_QWORD *)(v0 + 248);
        v17 = *(_QWORD *)(v0 + 232);
        *(_QWORD *)(v15 + 16) = v14 + 1;
        v12(v15 + v9 + v14 * v10, v16, v17);
        v39 = v15;
        v5 = v15;
        v6 = v38;
      }
      p_cache = (void **)((char *)p_cache + 1);
      if (v6 == p_cache)
        goto LABEL_12;
    }
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_14;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v5 + 16);
  p_cache = &OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper.cache;
  v8 = v18 - v19;
  if (v18 <= v19)
    goto LABEL_17;
  if (one-time initialization token for executor != -1)
    goto LABEL_26;
LABEL_14:
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v23 = 134217984;
    *(_QWORD *)(v0 + 176) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v21, v22, "After collating %ld actions were dropped due to low ranker score", v23, 0xCu);
    MEMORY[0x1B5E44758](v23, -1, -1);
  }

  v19 = *(_QWORD *)(v5 + 16);
LABEL_17:
  if (v19)
  {
    v24 = *(_QWORD *)(v0 + 328);
    v25 = *(_QWORD *)(v0 + 280);
    v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 8);
    v26(*(_QWORD *)(v0 + 320), v25);
    v26(v24, v25);
    v27 = v5;
  }
  else
  {
    swift_release();
    if (p_cache[49] != (void *)-1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1B4BE6000, v29, v30, "CamBridge: Collated & filtered actions are empty!", v31, 2u);
      MEMORY[0x1B5E44758](v31, -1, -1);
    }
    v33 = *(_QWORD *)(v0 + 320);
    v32 = *(_QWORD *)(v0 + 328);
    v34 = *(_QWORD *)(v0 + 280);
    v35 = *(_QWORD *)(v0 + 288);

    v36 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v36(v33, v34);
    v36(v32, v34);
    v27 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
}

void CamBridgeImpl.rank(rcId:actions:rankerContext:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = (uint64_t)(v0 + 2);
  v3 = v0[35];
  v2 = v0[36];
  v4 = v0[34];
  v5 = v0[28];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 240);
  outlined init with copy of ReferenceResolutionClientProtocol?(v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v7(v4, 1, v3) == 1)
  {
    v8 = v0 + 34;
  }
  else
  {
    v9 = v0[35];
    v10 = v0[33];
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0[36] + 32);
    v11(v0[39], v0[34], v9);
    outlined init with copy of ReferenceResolutionClientProtocol?(v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v7(v10, 1, v9) != 1)
    {
      v17 = v0[40];
      v16 = v0[41];
      v19 = v0[38];
      v18 = v0[39];
      v21 = v0[35];
      v20 = v0[36];
      v11(v19, v0[33], v21);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
      v22(v16, v18, v21);
      v22(v17, v19, v21);
      if (one-time initialization token for executor != -1)
        swift_once();
      v23 = v0[40];
      v24 = v0[37];
      v25 = v0[35];
      v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
      v22(v24, v23, v25);
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.debug.getter();
      v29 = os_log_type_enabled(v27, v28);
      v31 = v0[38];
      v30 = v0[39];
      v32 = v0[36];
      v33 = v0[37];
      v34 = v0[35];
      if (v29)
      {
        v35 = (uint8_t *)swift_slowAlloc();
        v41 = v31;
        v36 = swift_slowAlloc();
        v42 = v36;
        *(_DWORD *)v35 = 136315138;
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v37 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v42);
        v1 = (uint64_t)(v0 + 2);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v39 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v39(v33, v34);
        _os_log_impl(&dword_1B4BE6000, v27, v28, "CamBridge: Retrieved CAAR logging ID from CAM state: %s", v35, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v36, -1, -1);
        MEMORY[0x1B5E44758](v35, -1, -1);

        v39(v41, v34);
      }
      else
      {

        v39 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v39(v33, v34);
        v39(v31, v34);
      }
      v39(v30, v34);
LABEL_16:
      v40 = (uint64_t *)(v0[28] + 192);
      swift_beginAccess();
      outlined init with copy of CamBridgeImpl.CaarState(v40, v1);
      __asm { BR              X10 }
    }
    v8 = v0 + 33;
    (*(void (**)(_QWORD, _QWORD))(v0[36] + 8))(v0[39], v0[35]);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(*v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for executor != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1B4BE6000, v13, v14, "CamBridge: No Execution / CAAR logging ID found in camBridgeState, falling back on new UUID", v15, 2u);
    MEMORY[0x1B5E44758](v15, -1, -1);
  }

  UUID.init()();
  UUID.init()();
  goto LABEL_16;
}

uint64_t CamBridgeImpl.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  v6 = type metadata accessor for RankedAction();
  v5[29] = v6;
  v5[30] = *(_QWORD *)(v6 - 8);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  v7 = type metadata accessor for UUID();
  v5[35] = v7;
  v5[36] = *(_QWORD *)(v7 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[42] = static MessageBusActor.shared;
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc();
  v5[43] = v8;
  *v8 = v5;
  v8[1] = CamBridgeImpl.rank(rcId:actions:rankerContext:);
  return CamBridgeImpl.waitForCaarWarmup()();
}

uint64_t CamBridgeImpl.waitForCaarWarmup()()
{
  uint64_t v0;
  uint64_t *v1;
  int8x16_t v2;
  _QWORD *v4;
  uint64_t (*v5)();

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 112) + 192);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CaarState(v1, v0 + 16);
  if (*(_BYTE *)(v0 + 56))
  {
    if (*(_BYTE *)(v0 + 56) != 3
      || (v2 = vorrq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 40)),
          *(_QWORD *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | *(_QWORD *)(v0 + 16)))
    {
      swift_release();
      outlined destroy of CamBridgeImpl.CaarState(v0 + 16);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    *(_QWORD *)(v0 + 128) = CamBridgeImpl.asyncWarmUpIfSupported()();
    v4 = (_QWORD *)swift_task_alloc();
    v5 = CamBridgeImpl.waitForCamWarmup();
    *(_QWORD *)(v0 + 136) = v4;
  }
  else
  {
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 16);
    v4 = (_QWORD *)swift_task_alloc();
    v5 = CamBridgeImpl.waitForCamWarmup();
    *(_QWORD *)(v0 + 152) = v4;
  }
  *v4 = v0;
  v4[1] = v5;
  return Task<>.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t CamBridgeImpl.waitForCamWarmup()()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  int8x16_t v2;
  _QWORD *v3;
  uint64_t (*v4)();

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 112) + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v1, v0 + 16);
  if (*(_BYTE *)(v0 + 57))
  {
    if (*(_BYTE *)(v0 + 57) != 3
      || *(_BYTE *)(v0 + 56)
      || (v2 = vorrq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 40)),
          *(_QWORD *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | *(_QWORD *)(v0 + 16)))
    {
      swift_release();
      outlined destroy of CamBridgeImpl.CamState(v0 + 16);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    *(_QWORD *)(v0 + 128) = CamBridgeImpl.asyncWarmUpIfSupported()();
    v3 = (_QWORD *)swift_task_alloc();
    v4 = CamBridgeImpl.waitForCamWarmup();
    *(_QWORD *)(v0 + 136) = v3;
  }
  else
  {
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 16);
    v3 = (_QWORD *)swift_task_alloc();
    v4 = CamBridgeImpl.waitForCamWarmup();
    *(_QWORD *)(v0 + 152) = v3;
  }
  *v3 = v0;
  v3[1] = v4;
  return Task<>.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t outlined init with copy of CamBridgeImpl.CaarState(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for CamBridgeImpl.CaarState(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for CamBridgeImpl.CaarState(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  id v5;
  __int128 v6;
  __int128 v7;

  v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    v4 = *a2;
    v5 = (id)*a2;
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    v6 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t))(v6 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain();
  }
  return a1;
}

uint64_t outlined destroy of CamBridgeImpl.CaarState(uint64_t a1)
{
  destroy for CamBridgeImpl.CaarState(a1);
  return a1;
}

void destroy for CamBridgeImpl.CaarState(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  switch(v1)
  {
    case 2u:

      break;
    case 1u:
      __swift_destroy_boxed_opaque_existential_1(a1);
      break;
    case 0u:
      swift_release();
      break;
  }
}

uint64_t RealCaarWrapper.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:)()
{
  uint64_t v0;
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 64) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 64) + 40));
  v1 = dispatch thunk of Caar.rank(requestId:caarId:rcId:actions:rankerContext:)();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t protocol witness for CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:) in conformance RealCaarWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v7[6] = a5;
  v7[7] = a6;
  v7[4] = a3;
  v7[5] = a4;
  v7[2] = a1;
  v7[3] = a2;
  v7[8] = *v6;
  return swift_task_switch();
}

uint64_t specialized static CamBridgeImpl.collateParses(rcId:rankedActions:)(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  _QWORD *v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t *v97;
  void (*v98)(_QWORD *);
  unint64_t *v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t result;
  _QWORD v140[4];
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  unint64_t v154;
  int v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  const char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void (*v173)(uint64_t, unint64_t, char *);
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;

  v170 = type metadata accessor for UUID();
  v168 = *(_QWORD *)(v170 - 8);
  v6 = MEMORY[0x1E0C80A78](v170);
  v174 = (uint64_t)v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v149 = (char *)v140 - v9;
  MEMORY[0x1E0C80A78](v8);
  v151 = (char *)v140 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v163 = (char *)v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v143 = (char *)v140 - v14;
  v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  v142 = *(_QWORD *)(v167 - 8);
  MEMORY[0x1E0C80A78](v167);
  v16 = (unint64_t)v140 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for Siri_Nlu_External_UserParse();
  v147 = *(_QWORD *)(v148 - 8);
  MEMORY[0x1E0C80A78](v148);
  v146 = (char *)v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v18);
  v164 = (char *)v140 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AppShortcutInvocation?);
  MEMORY[0x1E0C80A78](v20);
  v145 = (char *)v140 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for AppShortcutInvocation();
  v22 = *(_QWORD *)(v144 - 8);
  MEMORY[0x1E0C80A78](v144);
  v24 = (char *)v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for CamParse();
  v165 = *(_QWORD *)(v166 - 8);
  v25 = MEMORY[0x1E0C80A78](v166);
  v152 = (char *)v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v159 = (char *)v140 - v27;
  v158 = type metadata accessor for CamUSOParse();
  v157 = *(_QWORD *)(v158 - 8);
  MEMORY[0x1E0C80A78](v158);
  v156 = (char *)v140 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for RankedAction();
  v169 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  isUniquelyReferenced_nonNull_native = (uint64_t)v140 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
LABEL_64:
    swift_once();
  v32 = type metadata accessor for Logger();
  v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v140[3] = v33;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  v36 = os_log_type_enabled(v34, v35);
  v160 = v16;
  v150 = v22;
  v141 = v24;
  v175 = isUniquelyReferenced_nonNull_native;
  v140[2] = a2;
  v140[1] = a1;
  if (v36)
  {
    v37 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    v176 = (_QWORD *)v38;
    *(_DWORD *)v37 = 134218242;
    v178 = *(_QWORD *)(a3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2080;
    v173 = (void (*)(uint64_t, unint64_t, char *))(v37 + 14);
    v39 = swift_bridgeObjectRetain();
    v24 = (char *)v29;
    v40 = v35;
    v41 = MEMORY[0x1B5E434D4](v39, v29);
    v43 = v42;
    swift_bridgeObjectRelease();
    v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, (uint64_t *)&v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    isUniquelyReferenced_nonNull_native = v175;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v34, v40, "CamBridge: Collating %ld actions %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v38, -1, -1);
    MEMORY[0x1B5E44758](v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    v24 = (char *)v29;
  }
  v182 = MEMORY[0x1E0DEE9E0];
  v183 = MEMORY[0x1E0DEE9D8];
  v181 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v44 = *(_QWORD *)(a3 + 16);
  v153 = v24;
  v29 = (uint64_t)v143;
  if (v44)
  {
    v45 = a3 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
    v161 = *(_QWORD *)(v169 + 72);
    v173 = *(void (**)(uint64_t, unint64_t, char *))(v169 + 16);
    v155 = *MEMORY[0x1E0D97A40];
    v140[0] = a3;
    swift_bridgeObjectRetain();
    v162 = "com.apple.siri.ClockFlowPlugin";
    v154 = 0x80000001B4EF6BD0;
    a3 = v142;
    v46 = (uint64_t)v164;
    while (1)
    {
      v172 = v45;
      v173(isUniquelyReferenced_nonNull_native, v45, v24);
      if (RankedAction.flowHandlerId.getter() == 0xD000000000000021 && v49 == v154)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v50 & 1) == 0)
          goto LABEL_24;
      }
      v51 = v159;
      RankedAction.parse.getter();
      v52 = v165;
      v53 = v166;
      v54 = (*(uint64_t (**)(char *, uint64_t))(v165 + 88))(v51, v166);
      if (v54 != v155)
        break;
      (*(void (**)(char *, uint64_t))(v52 + 96))(v51, v53);
      (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v156, v51, v158);
      v55 = v146;
      v56 = CamUSOParse.userParse.getter();
      v57 = MEMORY[0x1B5E3FA6C](v56);
      (*(void (**)(char *, uint64_t))(v147 + 8))(v55, v148);
      v58 = *(_QWORD *)(v57 + 16);
      v59 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      v60 = *(_QWORD *)(v59 - 8);
      if (v58)
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v60 + 16))(v46, v57 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80)), v59);
        v61 = 0;
      }
      else
      {
        v61 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v46, v61, 1, v59);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v46, 1, v59) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        v62 = (uint64_t)v145;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v150 + 56))(v145, 1, 1, v144);
LABEL_23:
        (*(void (**)(char *, uint64_t))(v157 + 8))(v156, v158);
        outlined destroy of ReferenceResolutionClientProtocol?(v62, (uint64_t *)&demangling cache variable for type metadata for AppShortcutInvocation?);
LABEL_24:
        v64 = RankedAction.flowHandlerId.getter();
        v22 = v65;
        goto LABEL_25;
      }
      LOBYTE(v176) = 1;
      v62 = (uint64_t)v145;
      Siri_Nlu_External_UserDialogAct.extractAppShortcutInvocation(groupIndex:)();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v46, v59);
      v63 = v144;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v62, 1, v144) == 1)
        goto LABEL_23;
      v171 = v44;
      v107 = v29;
      v108 = v24;
      v109 = v150;
      v110 = v141;
      (*(void (**)(char *, uint64_t, uint64_t))(v150 + 32))(v141, v62, v63);
      v111 = AppShortcutInvocation.actionIdentifier.getter();
      if (!v112)
      {
        (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v63);
        (*(void (**)(char *, uint64_t))(v157 + 8))(v156, v158);
        v24 = v108;
        v29 = v107;
        v44 = v171;
        goto LABEL_24;
      }
      v113 = v111;
      v114 = v112;
      v176 = (_QWORD *)RankedAction.flowHandlerId.getter();
      v177 = v115;
      v116._countAndFlagsBits = 46;
      v116._object = (void *)0xE100000000000000;
      String.append(_:)(v116);
      v117._countAndFlagsBits = AppShortcutInvocation.bundleId.getter();
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
      v118._countAndFlagsBits = 46;
      v118._object = (void *)0xE100000000000000;
      String.append(_:)(v118);
      v119._countAndFlagsBits = v113;
      v119._object = v114;
      String.append(_:)(v119);
      swift_bridgeObjectRelease();
      v64 = (uint64_t)v176;
      v22 = v177;
      (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v63);
      (*(void (**)(char *, uint64_t))(v157 + 8))(v156, v158);
      v24 = v108;
      v29 = v107;
      v44 = v171;
LABEL_25:
      v66 = v182;
      if (!*(_QWORD *)(v182 + 16))
      {
        v171 = v44;
        v71 = v29;
        v72 = a3;
        a1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
        v73 = v167;
        a1(v29, 1, 1, v167);
LABEL_32:
        v29 = v71;
        outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
        v74 = *(int *)(v73 + 48);
        v75 = (uint64_t)v163;
        a3 = v175;
        v173((uint64_t)v163, v175, v24);
        *(_QWORD *)(v75 + v74) = MEMORY[0x1E0DEE9D8];
        a1(v75, 0, 1, v73);
        specialized SimpleOrderedDictionary.subscript.setter(v75, v64, v22);
        a2 = v174;
        RankedAction.loggingId.getter();
        v76 = v181;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v176 = (_QWORD *)v76;
        v181 = 0x8000000000000000;
        v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
        v78 = *(_QWORD *)(v76 + 16);
        v79 = (v77 & 1) == 0;
        v80 = v78 + v79;
        if (__OFADD__(v78, v79))
        {
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v22 = v77;
        if (*(_QWORD *)(v76 + 24) >= v80)
        {
          a3 = v72;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v80, isUniquelyReferenced_nonNull_native);
          v81 = specialized __RawDictionaryStorage.find<A>(_:)(v174);
          if ((v22 & 1) != (v82 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v16 = v81;
          a3 = v72;
        }
        isUniquelyReferenced_nonNull_native = v175;
        v83 = v176;
        v44 = v171;
        if ((v22 & 1) != 0)
        {
          v47 = v176[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v47 + 8 * v16) = MEMORY[0x1E0DEE9D8];
        }
        else
        {
          v176[(v16 >> 6) + 8] |= 1 << v16;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v168 + 16))(v83[6] + *(_QWORD *)(v168 + 72) * v16, v174, v170);
          *(_QWORD *)(v83[7] + 8 * v16) = MEMORY[0x1E0DEE9D8];
          v84 = v83[2];
          v85 = __OFADD__(v84, 1);
          v86 = v84 + 1;
          if (v85)
            goto LABEL_63;
          v83[2] = v86;
        }
        v181 = (unint64_t)v83;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v174, v170);
        v48 = v172;
        goto LABEL_9;
      }
      swift_bridgeObjectRetain();
      v67 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v22);
      if ((v68 & 1) != 0)
      {
        outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v66 + 56) + *(_QWORD *)(a3 + 72) * v67, v29, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
        a1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
        v69 = v29;
        v70 = 0;
      }
      else
      {
        a1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
        v69 = v29;
        v70 = 1;
      }
      v73 = v167;
      a1(v69, v70, 1, v167);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a3 + 48))(v29, 1, v73) == 1)
      {
        v171 = v44;
        v71 = v29;
        v72 = a3;
        goto LABEL_32;
      }
      v87 = *(int *)(v73 + 48);
      (*(void (**)(unint64_t, uint64_t, char *))(v169 + 32))(v160, v29, v24);
      v88 = *(_QWORD *)(v29 + v87);
      RankedAction.parse.getter();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v88 + 16) + 1, 1, v88);
      v90 = *(_QWORD *)(v88 + 16);
      v89 = *(_QWORD *)(v88 + 24);
      if (v90 >= v89 >> 1)
        v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1, v88);
      v91 = v167;
      v92 = *(int *)(v167 + 48);
      *(_QWORD *)(v88 + 16) = v90 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v165 + 32))(v88+ ((*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80))+ *(_QWORD *)(v165 + 72) * v90, v152, v166);
      v93 = v160;
      *(_QWORD *)(v160 + v92) = v88;
      v94 = *(int *)(v91 + 48);
      v95 = (uint64_t)v163;
      v173((uint64_t)v163, v93, v153);
      *(_QWORD *)(v95 + v94) = v88;
      a1(v95, 0, 1, v91);
      swift_bridgeObjectRetain();
      specialized SimpleOrderedDictionary.subscript.setter(v95, v64, v22);
      v96 = v151;
      RankedAction.loggingId.getter();
      v98 = specialized Dictionary.subscript.modify(&v176);
      if (!*v97)
      {
        ((void (*)(_QWORD **, _QWORD))v98)(&v176, 0);
        (*(void (**)(char *, uint64_t))(v168 + 8))(v96, v170);
        outlined destroy of ReferenceResolutionClientProtocol?(v93, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
        v29 = (uint64_t)v143;
        a3 = v142;
        v46 = (uint64_t)v164;
        isUniquelyReferenced_nonNull_native = v175;
        v24 = v153;
        v48 = v172;
        goto LABEL_10;
      }
      v99 = v97;
      RankedAction.loggingId.getter();
      v100 = *v99;
      v101 = swift_isUniquelyReferenced_nonNull_native();
      *v99 = v100;
      if ((v101 & 1) == 0)
      {
        v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v100 + 16) + 1, 1, v100);
        *v99 = v100;
      }
      v29 = (uint64_t)v143;
      a3 = v142;
      v24 = v153;
      v103 = *(_QWORD *)(v100 + 16);
      v102 = *(_QWORD *)(v100 + 24);
      if (v103 >= v102 >> 1)
      {
        v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1, v100);
        *v99 = v100;
      }
      v48 = v172;
      *(_QWORD *)(v100 + 16) = v103 + 1;
      v104 = v168;
      v105 = v100
           + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80))
           + *(_QWORD *)(v104 + 72) * v103;
      v106 = v170;
      (*(void (**)(unint64_t, char *, uint64_t))(v168 + 32))(v105, v149, v170);
      ((void (*)(_QWORD **, _QWORD))v98)(&v176, 0);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v151, v106);
      outlined destroy of ReferenceResolutionClientProtocol?(v160, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
      isUniquelyReferenced_nonNull_native = v175;
LABEL_9:
      v46 = (uint64_t)v164;
LABEL_10:
      (*(void (**)(uint64_t, char *))(v169 + 8))(isUniquelyReferenced_nonNull_native, v24);
      v45 = v48 + v161;
      if (!--v44)
      {
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
    goto LABEL_24;
  }
LABEL_56:
  v120 = Logger.logObject.getter();
  v121 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v120, v121))
  {
    v122 = (uint8_t *)swift_slowAlloc();
    v123 = swift_slowAlloc();
    v176 = (_QWORD *)v123;
    *(_DWORD *)v122 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v124 = Dictionary.description.getter();
    v126 = v125;
    swift_bridgeObjectRelease();
    v180 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v126, (uint64_t *)&v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v120, v121, "CamBridge: Collated action candidates for logging: %s", v122, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v123, -1, -1);
    MEMORY[0x1B5E44758](v122, -1, -1);
  }

  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitActionCandidatesCollated(rcId:collatedActions:)();
  swift_release();
  swift_bridgeObjectRelease();
  v127 = v182;
  swift_bridgeObjectRetain();
  v128 = swift_bridgeObjectRetain();
  v129 = specialized Sequence.compactMap<A>(_:)(v128, v127);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v130 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12RankedActionV03topG0_SayAF0E5ParseOG17alternativeParsestG_AHs5NeverOTg503_s7d5Cam12fg9VSayAA0B5i46OGACIgngr_AC03topD0_AF17alternativeParsestACs5L136OIegnrzr_TR04_s14a12KitRuntime13b55BridgeImplC13collateParses4rcId13rankedActionsSay0aD012cd22VGSS_AJtFZA2I_SayAG0D5E8OGtXEfU_Tf3nnnpf_nTf1cn_n(v129);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  v131 = Logger.logObject.getter();
  v132 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v131, v132))
  {
    v133 = swift_slowAlloc();
    v134 = swift_slowAlloc();
    *(_DWORD *)v133 = 134218242;
    v179 = *(_QWORD *)(v130 + 16);
    v180 = v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v133 + 12) = 2080;
    v135 = swift_bridgeObjectRetain();
    v136 = MEMORY[0x1B5E434D4](v135, v153);
    v138 = v137;
    swift_bridgeObjectRelease();
    v179 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v138, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v131, v132, "CamBridge: Collated down to %ld actions %s", (uint8_t *)v133, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v134, -1, -1);
    MEMORY[0x1B5E44758](v133, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v130;
}

uint64_t RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  void (*v47)(_QWORD *, char *, uint64_t);
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint8_t *v62;
  char *v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  id v72;
  char *v73;
  uint64_t v74;
  _QWORD v75[2];
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  id v82;
  char *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  void (*v99)(_QWORD *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;

  v79 = a2;
  v82 = a1;
  v81 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v4);
  v95 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1E0C80A78](v6);
  v94 = (char *)v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CamUSOParse();
  v92 = *(_QWORD *)(v8 - 8);
  v93 = v8;
  MEMORY[0x1E0C80A78](v8);
  v91 = (char *)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v80 = (char *)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v12);
  v78 = (uint64_t)v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Input();
  MEMORY[0x1E0C80A78](v14);
  v77 = (char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CamParse();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v96 = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v104 = (char *)v75 - v21;
  MEMORY[0x1E0C80A78](v20);
  v83 = (char *)v75 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Parse();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v103 = (_QWORD *)((char *)v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = MEMORY[0x1E0C80A78](v28);
  v76 = (_QWORD *)((char *)v75 - v31);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)v75 - v32;
  v84 = v3;
  if (RankedAction.flowHandlerId.getter() == 0xD000000000000021 && v34 == 0x80000001B4EF6BD0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
LABEL_8:
      v39 = RankedAction.alternatives.getter();
      v40 = *(_QWORD *)(v39 + 16);
      v97 = v17;
      if (v40)
      {
        v105 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
        v41 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
        v75[1] = v39;
        v42 = v39 + v41;
        v43 = *(_QWORD *)(v17 + 72);
        v99 = *(void (**)(_QWORD *, char *, uint64_t))(v17 + 16);
        v100 = v43;
        v98 = *MEMORY[0x1E0D97A40];
        v89 = *MEMORY[0x1E0D97A38];
        v87 = *MEMORY[0x1E0D97A48];
        v86 = *MEMORY[0x1E0D9C688];
        v85 = *MEMORY[0x1E0D9C5F8];
        v88 = *MEMORY[0x1E0D9C678];
        v101 = v26;
        v44 = v96;
        v90 = v16;
        v45 = v103;
        do
        {
          v46 = v104;
          v47 = v99;
          v99(v104, (char *)v42, v16);
          v47(v44, v46, v16);
          v48 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 88))(v44, v16);
          v102 = v40;
          if (v48 == v98)
          {
            (*(void (**)(_QWORD *, uint64_t))(v17 + 96))(v44, v16);
            v49 = v91;
            v50 = v92;
            v51 = v93;
            (*(void (**)(char *, _QWORD *, uint64_t))(v92 + 32))(v91, v44, v93);
            CamUSOParse.userParse.getter();
            CamUSOParse.parserIdentifier.getter();
            CamUSOParse.appBundleId.getter();
            CamUSOParse.groupIndex.getter();
            v44 = v96;
            v17 = v97;
            USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
            v52 = v51;
            v16 = v90;
            (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v52);
            (*(void (**)(_QWORD *, _QWORD, uint64_t))(v27 + 104))(v45, v88, v101);
          }
          else if (v48 == v89)
          {
            (*(void (**)(_QWORD *, uint64_t))(v17 + 96))(v44, v16);
            v53 = v103;
            *v103 = *v44;
            (*(void (**)(_QWORD *, _QWORD, uint64_t))(v27 + 104))(v53, v85, v26);
          }
          else if (v48 == v87)
          {
            (*(void (**)(_QWORD *, _QWORD, uint64_t))(v27 + 104))(v103, v86, v26);
          }
          else
          {
            if (one-time initialization token for executor != -1)
              swift_once();
            v57 = type metadata accessor for Logger();
            __swift_project_value_buffer(v57, (uint64_t)static Logger.executor);
            v58 = Logger.logObject.getter();
            v59 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v58, v59))
            {
              v60 = v26;
              v61 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v61 = 0;
              _os_log_impl(&dword_1B4BE6000, v58, v59, "Unknown CamParse type, defaulting to Parse.empty!", v61, 2u);
              v62 = v61;
              v26 = v60;
              MEMORY[0x1B5E44758](v62, -1, -1);
            }

            (*(void (**)(_QWORD *, _QWORD, uint64_t))(v27 + 104))(v103, v86, v26);
            (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v44, v16);
          }
          (*(void (**)(char *, uint64_t))(v17 + 8))(v104, v16);
          v54 = v105;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v54 + 16) + 1, 1);
            v54 = v105;
          }
          v56 = *(_QWORD *)(v54 + 16);
          v55 = *(_QWORD *)(v54 + 24);
          if (v56 >= v55 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
            v54 = v105;
          }
          *(_QWORD *)(v54 + 16) = v56 + 1;
          v26 = v101;
          (*(void (**)(unint64_t, _QWORD *, uint64_t))(v27 + 32))(v54+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v56, v103, v101);
          v105 = v54;
          v42 += v100;
          v40 = v102 - 1;
        }
        while (v102 != 1);
      }
      swift_bridgeObjectRelease();
      RankedAction.flowHandlerId.getter();
      v63 = v83;
      RankedAction.parse.getter();
      CamParse.asSKEParse()(v76);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v63, v16);
      Input.init(parse:alternatives:)();
      outlined init with copy of ActionParaphrase?(v79, v78);
      v64 = v82;
      v65 = v80;
      RankedAction.loggingId.getter();
      v66 = type metadata accessor for UUID();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
      return PluginAction.init(flowHandlerId:input:speechPackage:actionParaphrase:loggingId:)();
    }
  }
  v36 = RankedAction.userData.getter();
  if (!v36)
    goto LABEL_8;
  v37 = v36;
  v38 = v83;
  RankedAction.parse.getter();
  CamParse.asLinkParse(userData:)(v37, (uint64_t)v25);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v38, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    outlined destroy of Parse?((uint64_t)v25);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v33, v25, v26);
  if (one-time initialization token for executor != -1)
    swift_once();
  v68 = type metadata accessor for Logger();
  __swift_project_value_buffer(v68, (uint64_t)static Logger.executor);
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v71 = 0;
    _os_log_impl(&dword_1B4BE6000, v69, v70, "Converting RankedAction to PluginAction with LinkParse", v71, 2u);
    MEMORY[0x1B5E44758](v71, -1, -1);
  }

  RankedAction.flowHandlerId.getter();
  (*(void (**)(_QWORD *, char *, uint64_t))(v27 + 16))(v76, v33, v26);
  Input.init(parse:)();
  outlined init with copy of ActionParaphrase?(v79, v78);
  v72 = v82;
  v73 = v80;
  RankedAction.loggingId.getter();
  v74 = type metadata accessor for UUID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v73, 0, 1, v74);
  PluginAction.init(flowHandlerId:input:speechPackage:actionParaphrase:loggingId:)();
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v33, v26);
}

uint64_t CamParse.asSKEParse()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for CamUSOParse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for CamParse();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 16))(v13, v2, v10);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x1E0D97A40])
  {
    (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v7 + 32))(v9, v13, v6);
    CamUSOParse.userParse.getter();
    CamUSOParse.parserIdentifier.getter();
    CamUSOParse.appBundleId.getter();
    CamUSOParse.groupIndex.getter();
    USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    v15 = (unsigned int *)MEMORY[0x1E0D9C678];
LABEL_7:
    v16 = *v15;
    v17 = type metadata accessor for Parse();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(a1, v16, v17);
  }
  if (v14 == *MEMORY[0x1E0D97A38])
  {
    (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v13, v10);
    *a1 = *v13;
    v15 = (unsigned int *)MEMORY[0x1E0D9C5F8];
    goto LABEL_7;
  }
  if (v14 == *MEMORY[0x1E0D97A48])
  {
    v15 = (unsigned int *)MEMORY[0x1E0D9C688];
    goto LABEL_7;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1B4BE6000, v20, v21, "Unknown CamParse type, defaulting to Parse.empty!", v22, 2u);
    MEMORY[0x1B5E44758](v22, -1, -1);
  }

  v23 = *MEMORY[0x1E0D9C688];
  v24 = type metadata accessor for Parse();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a1, v23, v24);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t outlined init with copy of ActionParaphrase?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for CamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:) in conformance StubCamBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v8;
  *v8 = v5;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return StubCamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(a1, v9, v10, v11, a5);
}

uint64_t protocol witness for CamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:) in conformance CamBridgeImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v16;

  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v16;
  *v16 = v8;
  v16[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  uint64_t v0;

  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 2088), *(_QWORD *)(v0 + 2072), (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  return swift_asyncLet_get();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  unint64_t *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];

  v1 = *(_QWORD *)(v0 + 2120);
  v2 = *(_QWORD *)(v0 + 2112);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for ActionParaphrase?);
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for ActionParaphrase?);
  swift_release();
  v3 = *(_QWORD *)(v0 + 2176);
  v4 = *(_QWORD *)(v0 + 1928);
  v5 = *(_QWORD *)(v0 + 1920);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 2192), v3, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) == 1)
  {
    v6 = *(_QWORD *)(v0 + 1872);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 2176), &demangling cache variable for type metadata for Input?);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(v0 + 1872);
      v9 = *(void **)(v0 + 1864);
      v10 = v9;
      v11 = specialized Sequence.compactMap<A>(_:)(v8, v9);

      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = *(_QWORD *)(v0 + 1944);
        v15 = swift_slowAlloc();
        v16 = swift_slowAlloc();
        v52[0] = v16;
        *(_DWORD *)v15 = 134218242;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 1736) = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        v17 = swift_bridgeObjectRetain();
        v18 = MEMORY[0x1B5E434D4](v17, v14);
        v20 = v19;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v12, v13, "CamBridge: Converted %ld rankedActions to %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v16, -1, -1);
        MEMORY[0x1B5E44758](v15, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

      }
      swift_release();
      v41 = *(_QWORD *)(v0 + 2248);
      v42 = *(_QWORD *)(v0 + 2240);
      v43 = *(_QWORD *)(v0 + 2224);
      v44 = *(_QWORD *)(v0 + 2216);
      v45 = *(_QWORD *)(v11 + 16);
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 2192), &demangling cache variable for type metadata for Input?);
      v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v46(v42, v44);
      v46(v41, v44);
      v47 = *(unint64_t **)(v0 + 1840);
      if (v45)
      {
        *v47 = v11;
        v48 = type metadata accessor for CamOutput();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 0, 1, v48);
      }
      else
      {
        v50 = type metadata accessor for CamOutput();
        (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v47, 1, 1, v50);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 2248);
      v34 = *(_QWORD *)(v0 + 2240);
      v35 = *(_QWORD *)(v0 + 2224);
      v36 = *(_QWORD *)(v0 + 2216);
      v37 = *(_QWORD *)(v0 + 2192);
      v38 = *(_QWORD *)(v0 + 1840);
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for Input?);
      v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v39(v34, v36);
      v39(v33, v36);
      v40 = type metadata accessor for CamOutput();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v38, 1, 1, v40);
    }
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 2248);
    v22 = *(_QWORD *)(v0 + 2240);
    v23 = *(_QWORD *)(v0 + 2224);
    v24 = *(_QWORD *)(v0 + 2216);
    v25 = *(_QWORD *)(v0 + 2192);
    v51 = *(_QWORD *)(v0 + 2176);
    v26 = *(_QWORD *)(v0 + 1936);
    v27 = *(_QWORD *)(v0 + 1928);
    v28 = *(_QWORD *)(v0 + 1920);
    v29 = *(_QWORD *)(v0 + 1840);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v25, &demangling cache variable for type metadata for Input?);
    v30 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v30(v22, v24);
    v30(v21, v24);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
    v31(v26, v51, v28);
    v31(v29, v26, v28);
    v32 = type metadata accessor for CamOutput();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v29, 0, 1, v32);
  }
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult));
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)&thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)partial apply);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  swift_release();
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  swift_release();
  return swift_asyncLet_finish();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (*v9)(_QWORD, _QWORD);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v75;
  uint64_t v76;
  uint64_t v77[3];

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 2120);
  v2 = *(_QWORD *)(v0 + 1968);
  v3 = *(void **)(v0 + 1864);
  type metadata accessor for RankedAction();
  RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(v3, v1, v2);
  v4 = PluginAction.serialize()();
  v75 = v5;
  v6 = *(_QWORD *)(v0 + 2112);
  v7 = *(_QWORD *)(v0 + 1960);
  v8 = *(void **)(v0 + 1864);
  v9 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1952) + 8);
  v9(*(_QWORD *)(v0 + 1968), *(_QWORD *)(v0 + 1944));
  RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(v8, v6, v7);
  v11 = PluginAction.serialize()();
  v13 = v12;
  v74 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 2288);
  v14 = *(_QWORD *)(v0 + 2168);
  v65 = *(_QWORD *)(v0 + 2160);
  v66 = *(_QWORD *)(v0 + 2152);
  v15 = *(_QWORD *)(v0 + 2144);
  v67 = *(_QWORD *)(v0 + 2136);
  v68 = *(_QWORD *)(v0 + 2128);
  v69 = *(_QWORD *)(v0 + 2184);
  v70 = *(_QWORD *)(v0 + 2112);
  v71 = *(_QWORD *)(v0 + 2120);
  v72 = *(_QWORD *)(v0 + 1920);
  v73 = *(_QWORD *)(v0 + 2192);
  v9(*(_QWORD *)(v0 + 1960), *(_QWORD *)(v0 + 1944));
  static CamDirectInvocationIdentifiers.disambiguateTopTwo.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = 1936750952;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B4EE3BA0;
  *(_QWORD *)(v17 + 32) = v4;
  *(_QWORD *)(v17 + 40) = v75;
  *(_QWORD *)(v17 + 48) = v11;
  *(_QWORD *)(v17 + 56) = v13;
  *(_QWORD *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  *(_QWORD *)(inited + 48) = v17;
  outlined copy of Data._Representation(v4, v75);
  outlined copy of Data._Representation(v11, v13);
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Parse.DirectInvocation.init(identifier:userData:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v15, v14, v66);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v67 + 104))(v15, *MEMORY[0x1E0D9C658], v68);
  Input.init(parse:)();
  outlined consume of Data._Representation(v11, v13);
  outlined consume of Data._Representation(v4, v75);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v14, v66);
  outlined destroy of ReferenceResolutionClientProtocol?(v70, &demangling cache variable for type metadata for ActionParaphrase?);
  outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for ActionParaphrase?);
  outlined destroy of ReferenceResolutionClientProtocol?(v73, &demangling cache variable for type metadata for Input?);
  v74(v69, 0, 1, v72);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v69, v73, &demangling cache variable for type metadata for Input?);
  v18 = *(_QWORD *)(v0 + 2176);
  v19 = *(_QWORD *)(v0 + 1928);
  v20 = *(_QWORD *)(v0 + 1920);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 2192), v18, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v18, 1, v20) == 1)
  {
    v21 = *(_QWORD *)(v0 + 1872);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 2176), &demangling cache variable for type metadata for Input?);
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v23 = *(_QWORD *)(v0 + 1872);
      v24 = *(void **)(v0 + 1864);
      v25 = v24;
      v26 = specialized Sequence.compactMap<A>(_:)(v23, v24);

      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = *(_QWORD *)(v0 + 1944);
        v30 = swift_slowAlloc();
        v31 = swift_slowAlloc();
        v77[0] = v31;
        *(_DWORD *)v30 = 134218242;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 1736) = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2080;
        v32 = swift_bridgeObjectRetain();
        v33 = MEMORY[0x1B5E434D4](v32, v29);
        v35 = v34;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v27, v28, "CamBridge: Converted %ld rankedActions to %s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v31, -1, -1);
        MEMORY[0x1B5E44758](v30, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

      }
      swift_release();
      v56 = *(_QWORD *)(v0 + 2248);
      v57 = *(_QWORD *)(v0 + 2240);
      v58 = *(_QWORD *)(v0 + 2224);
      v59 = *(_QWORD *)(v0 + 2216);
      v60 = *(_QWORD *)(v26 + 16);
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 2192), &demangling cache variable for type metadata for Input?);
      v61 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v61(v57, v59);
      v61(v56, v59);
      v62 = *(unint64_t **)(v0 + 1840);
      if (v60)
      {
        *v62 = v26;
        v63 = type metadata accessor for CamOutput();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
      }
      else
      {
        v64 = type metadata accessor for CamOutput();
        (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v62, 1, 1, v64);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v48 = *(_QWORD *)(v0 + 2248);
      v49 = *(_QWORD *)(v0 + 2240);
      v50 = *(_QWORD *)(v0 + 2224);
      v51 = *(_QWORD *)(v0 + 2216);
      v52 = *(_QWORD *)(v0 + 2192);
      v53 = *(_QWORD *)(v0 + 1840);
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for Input?);
      v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v54(v49, v51);
      v54(v48, v51);
      v55 = type metadata accessor for CamOutput();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v53, 1, 1, v55);
    }
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 2248);
    v37 = *(_QWORD *)(v0 + 2240);
    v38 = *(_QWORD *)(v0 + 2224);
    v39 = *(_QWORD *)(v0 + 2216);
    v40 = *(_QWORD *)(v0 + 2192);
    v76 = *(_QWORD *)(v0 + 2176);
    v41 = *(_QWORD *)(v0 + 1936);
    v42 = *(_QWORD *)(v0 + 1928);
    v43 = *(_QWORD *)(v0 + 1920);
    v44 = *(_QWORD *)(v0 + 1840);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for Input?);
    v45 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v45(v37, v39);
    v45(v36, v39);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
    v46(v41, v76, v43);
    v46(v44, v41, v43);
    v47 = type metadata accessor for CamOutput();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v44, 0, 1, v47);
  }
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult));
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)&thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)partial apply);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_release();
  return swift_asyncLet_finish();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = v0[278];
  v2 = v0[277];
  v3 = v0[276];
  v4 = v0[239];
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 240);
  v0[283] = v5;
  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v6(v3, 1, v2) == 1)
  {
    v7 = v0 + 276;
    swift_retain();
  }
  else
  {
    v8 = v0[277];
    v9 = v0[275];
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[278] + 32);
    v10(v0[279], v0[276], v8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v5 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v6(v9, 1, v8) != 1)
    {
      v18 = v0[281];
      v19 = v0[279];
      v20 = v0[277];
      v10(v0[280], v0[275], v20);
      v10(v18, v19, v20);
      swift_retain();
      goto LABEL_11;
    }
    v7 = v0 + 275;
    v11 = v0[279];
    v12 = v0[277];
    v13 = *(void (**)(uint64_t, uint64_t))(v0[278] + 8);
    swift_retain();
    v13(v11, v12);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(*v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for executor != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1B4BE6000, v15, v16, "No Execution/CAM logging ID found in camBridgeState, falling back on new UUID", v17, 2u);
    MEMORY[0x1B5E44758](v17, -1, -1);
  }

  UUID.init()();
  UUID.init()();
LABEL_11:
  v21 = (_QWORD *)swift_task_alloc();
  v0[284] = (uint64_t)v21;
  *v21 = v0;
  v21[1] = CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
  return CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(v0[281], v0[280], v0[231], v0[232], v0[233], v0[234], v0[237], v0[238]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  v1 = v0[259];
  v2 = v0[257];
  outlined init with copy of ConversationHelperInput(v0[260], v0[258], (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  outlined init with copy of ConversationHelperInput(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[257];
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v53 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = ParaphraseProbeResult.description.getter();
    v0[229] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v5, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
    _os_log_impl(&dword_1B4BE6000, v3, v4, "CamBridge: ActionParaphrase by action 1 %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(v0[257], (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  }

  outlined init with copy of ConversationHelperInput(v0[258], v0[256], (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = v0[256];
  if (v12)
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v53 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = ParaphraseProbeResult.description.getter();
    v0[223] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v13, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
    _os_log_impl(&dword_1B4BE6000, v10, v11, "CamBridge: ActionParaphrase by action 2 %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v15, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(v0[256], (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  }

  v18 = v0[255];
  outlined init with copy of ConversationHelperInput(v0[259], v18, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
  v21 = v20(v18, 2, v19);
  outlined destroy of CamOutput(v18, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  if (v21 == 2)
  {
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "CamBridge: action 1 is a dead end, avoiding to disambiguate", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }
    v25 = v0[259];
    v26 = v0[258];

    outlined destroy of CamOutput(v26, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
    outlined destroy of CamOutput(v25, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
  }
  else
  {
    v27 = v0[254];
    outlined init with copy of ConversationHelperInput(v0[258], v27, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
    v28 = v20(v27, 2, v19);
    outlined destroy of CamOutput(v27, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
    if (v28 == 2)
    {
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1B4BE6000, v29, v30, "CamBridge: action 2 is a dead end, avoiding to disambiguate", v31, 2u);
        MEMORY[0x1B5E44758](v31, -1, -1);
      }
      v32 = v0[259];
      v33 = v0[258];

      outlined destroy of CamOutput(v33, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
      outlined destroy of CamOutput(v32, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
    }
    else
    {
      v34 = v0[253];
      outlined init with copy of ConversationHelperInput(v0[259], v34, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
      v35 = v20(v34, 2, v19);
      v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[289];
      if (v35)
      {
        v37 = v0[253];
        v36(v0[263], 1, 1, v0[287]);
        outlined destroy of CamOutput(v37, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
      }
      else
      {
        v38 = v0[287];
        v39 = v0[263];
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[288] + 32))(v39, v0[253], v38);
        v36(v39, 0, 1, v38);
      }
      v40 = v0[265];
      v41 = v0[263];
      v42 = v0[258];
      v43 = v0[252];
      outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for ActionParaphrase?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v41, v40, &demangling cache variable for type metadata for ActionParaphrase?);
      outlined init with copy of ConversationHelperInput(v42, v43, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
      v44 = v20(v43, 2, v19);
      v45 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[289];
      if (v44)
      {
        v46 = v0[252];
        v45(v0[262], 1, 1, v0[287]);
        outlined destroy of CamOutput(v46, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
      }
      else
      {
        v47 = v0[287];
        v48 = v0[262];
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[288] + 32))(v48, v0[252], v47);
        v45(v48, 0, 1, v47);
      }
      v49 = v0[264];
      v50 = v0[262];
      v51 = v0[259];
      outlined destroy of CamOutput(v0[258], (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
      outlined destroy of CamOutput(v51, (uint64_t (*)(_QWORD))type metadata accessor for ParaphraseProbeResult);
      outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for ActionParaphrase?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v50, v49, &demangling cache variable for type metadata for ActionParaphrase?);
    }
  }
  return swift_asyncLet_finish();
}

uint64_t CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 2336) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(unsigned __int8 *)(v0 + 2336);
  v2 = *(_QWORD *)(v0 + 2192);
  v3 = *(_QWORD *)(v0 + 1928);
  v4 = *(_QWORD *)(v0 + 1920);
  v5 = *(void **)(v0 + 1856);
  v6 = *(_QWORD *)(v0 + 1848);
  v7 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 2280) = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  specialized Logger.debugF(_:_:_:_:)();
  v8._countAndFlagsBits = v6;
  v8._object = v5;
  CamBridgeState.registerCamAction(rcId:camAction:)(v8, (SiriKitRuntime::ConversationAction)v1);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  *(_QWORD *)(v0 + 2288) = v9;
  v9(v2, 1, 1, v4);
  __asm { BR              X9 }
}

uint64_t CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9[239] = v8;
  v9[238] = v17;
  v9[237] = a8;
  v9[236] = a7;
  v9[235] = a6;
  v9[234] = a5;
  v9[233] = a4;
  v9[232] = a3;
  v9[231] = a2;
  v9[230] = a1;
  v10 = type metadata accessor for Input();
  v9[240] = v10;
  v9[241] = *(_QWORD *)(v10 - 8);
  v9[242] = swift_task_alloc();
  v11 = type metadata accessor for PluginAction();
  v9[243] = v11;
  v9[244] = *(_QWORD *)(v11 - 8);
  v9[245] = swift_task_alloc();
  v9[246] = swift_task_alloc();
  v12 = *(_QWORD *)(type metadata accessor for ConversationHelperInput(0) - 8);
  v9[247] = v12;
  v9[248] = *(_QWORD *)(v12 + 64);
  v9[249] = swift_task_alloc();
  v9[250] = swift_task_alloc();
  v9[251] = type metadata accessor for ParaphraseProbeResult();
  v9[252] = swift_task_alloc();
  v9[253] = swift_task_alloc();
  v9[254] = swift_task_alloc();
  v9[255] = swift_task_alloc();
  v9[256] = swift_task_alloc();
  v9[257] = swift_task_alloc();
  v9[258] = swift_task_alloc();
  v9[259] = swift_task_alloc();
  v9[260] = swift_task_alloc();
  v9[261] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v9[262] = swift_task_alloc();
  v9[263] = swift_task_alloc();
  v9[264] = swift_task_alloc();
  v9[265] = swift_task_alloc();
  v13 = type metadata accessor for Parse();
  v9[266] = v13;
  v9[267] = *(_QWORD *)(v13 - 8);
  v9[268] = swift_task_alloc();
  v14 = type metadata accessor for Parse.DirectInvocation();
  v9[269] = v14;
  v9[270] = *(_QWORD *)(v14 - 8);
  v9[271] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v9[272] = swift_task_alloc();
  v9[273] = swift_task_alloc();
  v9[274] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9[275] = swift_task_alloc();
  v9[276] = swift_task_alloc();
  v15 = type metadata accessor for UUID();
  v9[277] = v15;
  v9[278] = *(_QWORD *)(v15 - 8);
  v9[279] = swift_task_alloc();
  v9[280] = swift_task_alloc();
  v9[281] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v9[282] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t type metadata accessor for ParaphraseProbeResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ParaphraseProbeResult;
  if (!type metadata singleton initialization cache for ParaphraseProbeResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  Swift::String_optional v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v33;

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 344);
  swift_release();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == *MEMORY[0x1E0D97A68])
  {
    v5 = *(_QWORD **)(v0 + 336);
    __swift_project_boxed_opaque_existential_1(v5 + 13, v5[16]);
    v6.value._countAndFlagsBits = UUID.uuidString.getter();
    v8 = v7;
    v9._object = (void *)0x80000001B4EF7990;
    v9._countAndFlagsBits = 0xD000000000000024;
    v6.value._object = v8;
    TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:)(v9, v6);
    swift_bridgeObjectRelease();
    v10 = v5[16];
    v11 = v5[17];
    __swift_project_boxed_opaque_existential_1(v5 + 13, v10);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    v15 = os_log_type_enabled(v13, v14);
    if ((v12 & 1) == 0)
    {
      if (v15)
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1B4BE6000, v13, v14, "CamBridge: Deprecating CAM AskRepeat based on factor level from Trial.", v16, 2u);
        MEMORY[0x1B5E44758](v16, -1, -1);
      }
      v17 = *(_QWORD *)(v0 + 496);
      v19 = *(_QWORD *)(v0 + 408);
      v18 = *(_QWORD *)(v0 + 416);
      v20 = *(_QWORD *)(v0 + 400);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      outlined destroy of ReferenceResolutionClientProtocol?(v17, &demangling cache variable for type metadata for CamAction?);
      goto LABEL_14;
    }
    if (v15)
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "CamBridge: Keeping CAM AskRepeat based on factor level from Trial.", v26, 2u);
      MEMORY[0x1B5E44758](v26, -1, -1);
    }
    v27 = *(_QWORD *)(v0 + 496);
    v29 = *(_QWORD *)(v0 + 408);
    v28 = *(_QWORD *)(v0 + 416);
    v30 = *(_QWORD *)(v0 + 400);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for CamAction?);
    v33 = 1;
  }
  else
  {
    v21 = v4;
    v22 = *(_QWORD *)(v0 + 496);
    v24 = *(_QWORD *)(v0 + 408);
    v23 = *(_QWORD *)(v0 + 416);
    v25 = *(_QWORD *)(v0 + 400);
    if (v21 == *MEMORY[0x1E0D97A70])
    {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      outlined destroy of ReferenceResolutionClientProtocol?(v22, &demangling cache variable for type metadata for CamAction?);
      v33 = 2;
    }
    else
    {
      v31 = *MEMORY[0x1E0D97A78];
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      outlined destroy of ReferenceResolutionClientProtocol?(v22, &demangling cache variable for type metadata for CamAction?);
      if (v21 != v31)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
LABEL_14:
        v33 = 0;
        goto LABEL_15;
      }
      v33 = 3;
    }
  }
LABEL_15:
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v33);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v9[41] = a8;
  v9[42] = v8;
  v9[39] = a6;
  v9[40] = a7;
  v9[37] = a4;
  v9[38] = a5;
  v9[35] = a2;
  v9[36] = a3;
  v9[34] = a1;
  v10 = type metadata accessor for CamAction();
  v9[43] = v10;
  v9[44] = *(_QWORD *)(v10 - 8);
  v9[45] = swift_task_alloc();
  v11 = type metadata accessor for UUID();
  v9[46] = v11;
  v9[47] = *(_QWORD *)(v11 - 8);
  v9[48] = swift_task_alloc();
  v9[49] = swift_task_alloc();
  v12 = type metadata accessor for CamRequest();
  v9[50] = v12;
  v9[51] = *(_QWORD *)(v12 - 8);
  v9[52] = swift_task_alloc();
  v13 = type metadata accessor for InputOrigin();
  v9[53] = v13;
  v9[54] = *(_QWORD *)(v13 - 8);
  v9[55] = swift_task_alloc();
  v14 = type metadata accessor for CamFeature();
  v9[56] = v14;
  v9[57] = *(_QWORD *)(v14 - 8);
  v9[58] = swift_task_alloc();
  v9[59] = swift_task_alloc();
  v9[60] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamAction?);
  v9[61] = swift_task_alloc();
  v9[62] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v9[63] = static MessageBusActor.shared;
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc();
  v9[64] = v15;
  *v15 = v9;
  v15[1] = CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:);
  return CamBridgeImpl.waitForCamWarmup()();
}

void CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)()
{
  uint64_t v0;
  uint64_t *v1;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 336) + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v1, v0 + 16);
  __asm { BR              X10 }
}

uint64_t sub_1B4C420D0()
{
  swift_release();
  return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000003CLL, 0x80000001B4EF78C0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/DecisionEngine/AmbiguityHandling/CamBridge/CamBridgeImpl.swift", 131, 2, 275);
}

uint64_t sub_1B4C422D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  char v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[44] + 104))(v1[62], *MEMORY[0x1E0D97A70], v1[43]);
  v4 = v1[42];
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(v1[44] + 56))(v1[62], 0, 1, v1[43]);
  v1[32] = MEMORY[0x1E0DEE9D8];
  ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD))swift_beginAccess)(v4 + 96, v0, 0, 0);
  v5 = *(_QWORD *)(v4 + 96);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v75 = v2;
    v7 = v1[57];
    v81 = v1[54];
    v82 = v1[38];
    v79 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v8 = v5 + v79;
    v9 = *(_QWORD *)(v7 + 72);
    *(_QWORD *)(v3 - 96) = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v3 - 88) = v7;
    v86 = *MEMORY[0x1E0D97A98];
    v80 = *MEMORY[0x1E0DA7D00];
    v74 = v5;
    ((void (*)(void))swift_bridgeObjectRetain)();
    v84 = v9;
    while (1)
    {
      v11 = v1[59];
      v12 = v1[56];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 - 96))(v1[60], v8, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 88) + 104))(v11, v86, v12);
      v13 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CamFeature and conformance CamFeature, MEMORY[0x1E0D97AA8], MEMORY[0x1E0D97AB8]);
      ((void (*)(uint64_t, uint64_t))dispatch thunk of RawRepresentable.rawValue.getter)(v12, v13);
      ((void (*)(uint64_t, uint64_t))dispatch thunk of RawRepresentable.rawValue.getter)(v12, v13);
      v14 = v1[31];
      v15 = v1[29];
      v16 = v1[59];
      v17 = v1[56];
      if (v1[30] != v1[28])
        goto LABEL_9;
      if (v14 == v15)
      {
        ((void (*)(_QWORD, uint64_t))swift_bridgeObjectRelease_n)(v1[31], 2);
        v18 = v17;
        v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 88) + 8);
        v19(v16, v18);
      }
      else
      {
LABEL_9:
        v20 = ((uint64_t (*)(void))_stringCompareWithSmolCheck(_:_:expecting:))();
        ((void (*)(uint64_t))swift_bridgeObjectRelease)(v15);
        ((void (*)(uint64_t))swift_bridgeObjectRelease)(v14);
        v21 = v17;
        v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 88) + 8);
        v19(v16, v21);
        if ((v20 & 1) == 0)
          goto LABEL_23;
      }
      if (!v82)
        break;
      v83 = v19;
      v22 = v1[55];
      v23 = v1[53];
      v24 = v1[40];
      v25 = v1[41];
      v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v81 + 104))(v22, v80, v23);
      v27 = ((uint64_t (*)(uint64_t))InputOrigin.rawValue.getter)(v26);
      v29 = v28;
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v22, v23);
      if (v27 == v24 && v29 == v25)
      {
        ((void (*)(_QWORD))swift_bridgeObjectRelease)(v1[41]);
        v19 = v83;
      }
      else
      {
        v37 = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))_stringCompareWithSmolCheck(_:_:expecting:))(v1[40], v1[41], v27, v29, 0);
        ((void (*)(uint64_t))swift_bridgeObjectRelease)(v29);
        v19 = v83;
        if ((v37 & 1) == 0)
        {
LABEL_23:
          (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 - 96))(v1[58], v1[60], v1[56]);
          v40 = v1[32];
          if ((((uint64_t (*)(uint64_t))swift_isUniquelyReferenced_nonNull_native)(v40) & 1) == 0)
            v40 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:))(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
          v42 = *(_QWORD *)(v40 + 16);
          v41 = *(_QWORD *)(v40 + 24);
          if (v42 >= v41 >> 1)
            v40 = ((uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:))(v41 > 1, v42 + 1, 1, v40);
          v43 = v1[58];
          v44 = v1[56];
          *(_QWORD *)(v40 + 16) = v42 + 1;
          v10 = v84;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 88) + 32))(v40 + v79 + v42 * v84, v43, v44);
          v1[32] = v40;
          goto LABEL_5;
        }
      }
      if (one-time initialization token for executor != -1)
        ((void (*)(uint64_t *, uint64_t (*)()))swift_once)(&one-time initialization token for executor, one-time initialization function for executor);
      v38 = ((uint64_t (*)(_QWORD))type metadata accessor for Logger)(0);
      __swift_project_value_buffer(v38, (uint64_t)&static Logger.executor);
      v31 = ((uint64_t (*)(void))Logger.logObject.getter)();
      v39 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
      if (os_log_type_enabled(v31, v39))
      {
        v33 = (uint8_t *)((uint64_t (*)(uint64_t, uint64_t))swift_slowAlloc)(2, -1);
        *(_WORD *)v33 = 0;
        v34 = v31;
        v35 = v39;
        v36 = "CamBridge: Not enabling ASK_REPEAT for flexible follow-up request";
LABEL_3:
        _os_log_impl(&dword_1B4BE6000, v34, v35, v36, v33, 2u);
        MEMORY[0x1B5E44758](v33, -1, -1);
      }
LABEL_4:

      v10 = v84;
LABEL_5:
      v19(v1[60], v1[56]);
      v8 += v10;
      if (!--v6)
      {
        ((void (*)(uint64_t))swift_bridgeObjectRelease)(v74);
        v2 = v75;
        goto LABEL_29;
      }
    }
    if (one-time initialization token for executor != -1)
      ((void (*)(uint64_t *, uint64_t (*)()))swift_once)(&one-time initialization token for executor, one-time initialization function for executor);
    v30 = ((uint64_t (*)(_QWORD))type metadata accessor for Logger)(0);
    __swift_project_value_buffer(v30, (uint64_t)&static Logger.executor);
    v31 = ((uint64_t (*)(void))Logger.logObject.getter)();
    v32 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
    if (!os_log_type_enabled(v31, v32))
      goto LABEL_4;
    v33 = (uint8_t *)((uint64_t (*)(uint64_t, uint64_t))swift_slowAlloc)(2, -1);
    *(_WORD *)v33 = 0;
    v34 = v31;
    v35 = v32;
    v36 = "CamBridge: Not enabling ASK_REPEAT for this request as speechPackage isn't present";
    goto LABEL_3;
  }
LABEL_29:
  if (one-time initialization token for executor != -1)
    ((void (*)(uint64_t *, uint64_t (*)()))swift_once)(&one-time initialization token for executor, one-time initialization function for executor);
  v45 = ((uint64_t (*)(_QWORD))type metadata accessor for Logger)(0);
  v1[65] = __swift_project_value_buffer(v45, (uint64_t)&static Logger.executor);
  v46 = ((uint64_t (*)(void))Logger.logObject.getter)();
  v47 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = v1[56];
    v49 = (uint8_t *)((uint64_t (*)(uint64_t, uint64_t))swift_slowAlloc)(12, -1);
    v50 = ((uint64_t (*)(uint64_t, uint64_t))swift_slowAlloc)(32, -1);
    *(_QWORD *)(v3 - 80) = v50;
    *(_DWORD *)v49 = 136315138;
    ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD))swift_beginAccess)(v78, v2, 0, 0);
    v51 = v1[32];
    v52 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRetain)(v51);
    v53 = MEMORY[0x1B5E434D4](v52, v48);
    v55 = v54;
    ((void (*)(uint64_t))swift_bridgeObjectRelease)(v51);
    v1[33] = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:))(v53, v55, v3 - 80);
    ((void (*)(uint64_t, _QWORD *, uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v76, v1 + 34, v49 + 4, v49 + 12);
    ((void (*)(uint64_t))swift_bridgeObjectRelease)(v55);
    _os_log_impl(&dword_1B4BE6000, v46, v47, "CamBridge: Enabled features for this request: %s", v49, 0xCu);
    ((void (*)(uint64_t, uint64_t, uint64_t))swift_arrayDestroy)(v50, 1, MEMORY[0x1E0DEE9B8] + 8);
    MEMORY[0x1B5E44758](v50, -1, -1);
    MEMORY[0x1B5E44758](v49, -1, -1);
  }

  v85 = v1[61];
  v87 = v1[62];
  v56 = v1[52];
  v58 = v1[48];
  v57 = v1[49];
  v60 = v1[46];
  v59 = v1[47];
  v61 = (void *)v1[38];
  v62 = v1[39];
  v63 = v1[37];
  *(_QWORD *)(v3 - 96) = v1[36];
  *(_QWORD *)(v3 - 88) = v56;
  v64 = v1[35];
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v65(v57, v1[34], v60);
  v65(v58, v64, v60);
  ((void (*)(uint64_t, _QWORD *, _QWORD, _QWORD))swift_beginAccess)(v78, v1 + 25, 0, 0);
  v66 = v1[32];
  ((void (*)(uint64_t, uint64_t, void *))outlined init with copy of ReferenceResolutionClientProtocol?)(v87, v85, &demangling cache variable for type metadata for CamAction?);
  v67 = v61;
  ((void (*)(uint64_t))swift_bridgeObjectRetain)(v62);
  ((void (*)(uint64_t))swift_bridgeObjectRetain)(v66);
  ((void (*)(uint64_t))swift_bridgeObjectRetain)(v63);
  ((void (*)(uint64_t, uint64_t, _QWORD, uint64_t, void *, uint64_t, uint64_t, uint64_t))CamRequest.init(requestId:camId:rcId:maybeSpeechPackage:rankedActions:camEnabledFeatures:previousCamAction:))(v57, v58, *(_QWORD *)(v3 - 96), v63, v61, v62, v66, v85);
  v68 = v1[11];
  v69 = v1[12];
  __swift_project_boxed_opaque_existential_1(v77, v68);
  v70 = *(int **)(v69 + 8);
  v71 = v70[1];
  *(_QWORD *)(v3 - 88) = (char *)v70 + *v70;
  v72 = (_QWORD *)((uint64_t (*)(uint64_t))swift_task_alloc)(v71);
  v1[66] = v72;
  *v72 = v1;
  v72[1] = CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v3 - 88))(v1[45], v1[52], v68, v69);
}

void sub_1B4C422DC()
{
  JUMPOUT(0x1B4C422E4);
}

uint64_t outlined init with copy of CamBridgeImpl.CamState(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for CamBridgeImpl.CamState(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for CamBridgeImpl.CamState(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  id v6;
  __int128 v7;
  __int128 v8;

  v4 = *((unsigned __int8 *)a2 + 41);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    v5 = *a2;
    v6 = (id)*a2;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 41) = 2;
  }
  else if (v4 == 1)
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_BYTE *)(a1 + 41) = 1;
  }
  else if (v4)
  {
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 26) = *(_OWORD *)((char *)a2 + 26);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 41) = 0;
    swift_retain();
  }
  return a1;
}

uint64_t outlined destroy of CamBridgeImpl.CamState(uint64_t a1)
{
  destroy for CamBridgeImpl.CamState(a1);
  return a1;
}

void destroy for CamBridgeImpl.CamState(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 41);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  switch(v1)
  {
    case 2u:

      break;
    case 1u:
      __swift_destroy_boxed_opaque_existential_1(a1);
      break;
    case 0u:
      swift_release();
      break;
  }
}

uint64_t protocol witness for CamActionProviding.getCamAction(request:) in conformance RealCamWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[2] = a1;
  v3[3] = a2;
  v4 = type metadata accessor for CamResponse();
  v3[4] = v4;
  v3[5] = *(_QWORD *)(v4 - 8);
  v5 = swift_task_alloc();
  v6 = *v2;
  v3[6] = v5;
  v3[7] = v6;
  return swift_task_switch();
}

uint64_t protocol witness for CamActionProviding.getCamAction(request:) in conformance RealCamWrapper()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 56) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 56) + 40));
  dispatch thunk of Cam.action(request:)();
  CamResponse.camAction.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall CamBridgeState.registerCamAction(rcId:camAction:)(Swift::String rcId, SiriKitRuntime::ConversationAction camAction)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16[3];

  v3 = v2;
  object = rcId._object;
  countAndFlagsBits = rcId._countAndFlagsBits;
  if (one-time initialization token for executor != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v16[0] = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v8, v9, "CamBridge: Registering CAM action %s for rcId: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(camAction, countAndFlagsBits, (uint64_t)object, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 16) = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
}

uint64_t outlined init with take of CamOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamOutput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CamOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamOutput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeWithCopy for AmbiguityOutput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Input();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t destroy for AmbiguityOutput(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_bridgeObjectRelease();
  v2 = type metadata accessor for Input();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t *initializeBufferWithCopyOfBuffer for AmbiguityOutput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of CamOutput(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CamOutput();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for Input?);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for Input?);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)();
  void (*v43)(uint64_t, uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;

  v1 = v0[20];
  v3 = v0[16];
  v2 = v0[17];
  v4 = v0[15];
  v5 = v0[8];
  PluginAction.input.getter();
  Input.parse.getter();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v1, v3);
  outlined init with copy of CamOutput(v5, v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v44 = v6;
    v7 = v0[19];
    v8 = v0[16];
    v9 = v0[15];
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[17] + 32);
    v0[27] = v10;
    v10(v7, v9, v8);
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = v0[18];
    v12 = v0[19];
    v13 = v0[16];
    v14 = v0[17];
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    v16(v11, v12, v13);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    v19 = os_log_type_enabled(v17, v18);
    v20 = v0[18];
    v21 = v0[16];
    if (v19)
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v43 = v16;
      v23 = swift_slowAlloc();
      v45 = v23;
      *(_DWORD *)v22 = 136315138;
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
      v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v44(v20, v21);
      _os_log_impl(&dword_1B4BE6000, v17, v18, "[AmbiguityService] Returning a Direct Invocation for CAM flow: %s", v22, 0xCu);
      swift_arrayDestroy();
      v26 = v23;
      v16 = v43;
      MEMORY[0x1B5E44758](v26, -1, -1);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }
    else
    {
      v44(v0[18], v0[16]);
    }

    v37 = v0[16];
    v38 = v0[17];
    v39 = v0[12];
    v16(v39, v0[19], v37);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
    v40 = (_QWORD *)swift_task_alloc();
    v0[28] = v40;
    v41 = AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:);
  }
  else
  {
    v0[25] = *(_QWORD *)v0[15];
    if (one-time initialization token for executor != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      *(_DWORD *)v30 = 136315138;
      v45 = v31;
      v32 = type metadata accessor for PluginAction();
      v33 = swift_bridgeObjectRetain();
      v34 = MEMORY[0x1B5E434D4](v33, v32);
      v36 = v35;
      swift_bridgeObjectRelease();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v28, v29, "[AmbiguityService] Returning set of actions to execute: %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v31, -1, -1);
      MEMORY[0x1B5E44758](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[17] + 56))(v0[12], 1, 1, v0[16]);
    v40 = (_QWORD *)swift_task_alloc();
    v0[26] = v40;
    v41 = AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:);
  }
  *v40 = v0;
  v40[1] = v41;
  return CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:)(v0[13], v0[9], v0[10], v0[12]);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release();
  v5 = type metadata accessor for AmbiguityServiceResponse(0);
  v6 = v4 + *(int *)(v5 + 20);
  v1(v6, v2, v3);
  v7 = type metadata accessor for AmbiguityOutput(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  v8 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 32))(v9 + *(int *)(v5 + 24), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v8, v9, &demangling cache variable for type metadata for Input?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release();
  v3 = type metadata accessor for AmbiguityServiceResponse(0);
  v4 = (_QWORD *)(v2 + *(int *)(v3 + 20));
  *v4 = v1;
  v5 = type metadata accessor for AmbiguityOutput(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 32))(v7 + *(int *)(v3 + 24), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v6, v7, &demangling cache variable for type metadata for Input?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  v5[14] = type metadata accessor for CamOutput();
  v5[15] = swift_task_alloc();
  v6 = type metadata accessor for Input();
  v5[16] = v6;
  v5[17] = *(_QWORD *)(v6 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v7 = type metadata accessor for Parse();
  v5[21] = v7;
  v5[22] = *(_QWORD *)(v7 - 8);
  v5[23] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[24] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD *v54;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 272) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[CorrectionsService] Checking for corrections with a possible followup", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 120);

  PluginAction.input.getter();
  CorrectionsService.getUndoAction(_:conversationUserInput:)(v6, v5);
  *(_QWORD *)(v0 + 280) = 0;
  v7 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 208) + 8);
  *(_QWORD *)(v0 + 288) = v12;
  v12(v10, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    v13 = *(_QWORD *)(v0 + 232);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v13, &demangling cache variable for type metadata for UndoAction?);
LABEL_7:
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 208) + 56);
    goto LABEL_8;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 32))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v17, v18, "[CorrectionsService] Detected user requested undo", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  if ((UndoAction.isExclusive.getter() & 1) != 0)
  {
    swift_release();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1B4BE6000, v20, v21, "[CorrectionsService] Undo is exclusive", v22, 2u);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }
    v24 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 240);
    v26 = *(_QWORD *)(v0 + 200);
    v27 = *(_QWORD *)(v0 + 208);
    v28 = *(_QWORD *)(v0 + 192);
    v29 = *(_QWORD *)(v0 + 104);

    v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v30(v28, 1, 1, v26);
    CorrectionsService.generateNewInput(from:originalInput:)(v23, v28, v29);
    outlined destroy of ReferenceResolutionClientProtocol?(v28, &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    v14 = v30;
    v15 = 0;
    goto LABEL_9;
  }
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v31 = static SydneyConversationFeatureFlags.forceEnabled;
  if (*(_QWORD *)(static SydneyConversationFeatureFlags.forceEnabled + 16)
    && (v32 = specialized __RawDictionaryStorage.find<A>(_:)(2), (v33 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v31 + 56) + v32) != 1)
    {
LABEL_21:
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
      swift_release();
      goto LABEL_7;
    }
  }
  else
  {
    *(_QWORD *)(v0 + 40) = &type metadata for SydneyConversationFeatureFlags;
    *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
    *(_BYTE *)(v0 + 16) = 2;
    v34 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    if ((v34 & 1) == 0)
      goto LABEL_21;
  }
  v35 = *(_QWORD *)(v0 + 200);
  v36 = *(_QWORD *)(v0 + 208);
  v37 = *(_QWORD *)(v0 + 184);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 128), v37, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v37, 1, v35) == 1)
  {
    v38 = *(_QWORD *)(v0 + 176);
    v39 = *(_QWORD *)(v0 + 184);
    v40 = *(_QWORD *)(v0 + 152);
    v41 = *(_QWORD *)(v0 + 160);
    v42 = *(_QWORD *)(v0 + 112);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v38, v42, v40);
    v43 = *(void **)(v0 + 280);
    CorrectionsService.generateNewInputWithFollowupFrom(undoAction:pluginAction:)(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 104));
    v45 = *(_QWORD *)(v0 + 248);
    v44 = *(_QWORD *)(v0 + 256);
    v46 = *(_QWORD *)(v0 + 240);
    v47 = *(_QWORD *)(v0 + 208);
    v48 = *(_QWORD *)(v0 + 176);
    v49 = *(_QWORD *)(v0 + 152);
    v50 = *(_QWORD *)(v0 + 160);
    if (!v43)
    {
      (*(void (**)(_QWORD, _QWORD))(v50 + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      v15 = 0;
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
      goto LABEL_9;
    }

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
LABEL_8:
    v15 = 1;
LABEL_9:
    v14(*(_QWORD *)(v0 + 104), v15, 1, *(_QWORD *)(v0 + 200));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 32))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 200));
  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v53 = 0;
    _os_log_impl(&dword_1B4BE6000, v51, v52, "[CorrectionsService] Undo is not exclusive", v53, 2u);
    MEMORY[0x1B5E44758](v53, -1, -1);
  }

  v54 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v54;
  *v54 = v0;
  v54[1] = CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:);
  return CorrectionsService.findFollowUpPluginAction(for:)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 216));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 144), &demangling cache variable for type metadata for PluginAction?);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "[CorrectionsService] No followup plugin action found, returning nil", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v9 = *(_QWORD *)(v0 + 248);
    v8 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 200);

    v7(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
    v19(v14, v18, v16);
    v19(v15, v14, v16);
    v20 = *(void **)(v0 + 280);
    CorrectionsService.generateNewInputWithFollowupFrom(undoAction:pluginAction:)(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 104));
    v22 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 176);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 160);
    if (!v20)
    {
      (*(void (**)(_QWORD, _QWORD))(v26 + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
      v27 = 0;
      goto LABEL_9;
    }

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v27 = 1;
LABEL_9:
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v12 + 56))(*(_QWORD *)(v0 + 104), v27, 1, *(_QWORD *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[16] = a4;
  v5[17] = v4;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v5[18] = swift_task_alloc();
  v6 = type metadata accessor for PluginAction();
  v5[19] = v6;
  v5[20] = *(_QWORD *)(v6 - 8);
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v7 = type metadata accessor for Input();
  v5[25] = v7;
  v5[26] = *(_QWORD *)(v7 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UndoAction?);
  v5[29] = swift_task_alloc();
  v8 = type metadata accessor for UndoAction();
  v5[30] = v8;
  v5[31] = *(_QWORD *)(v8 - 8);
  v5[32] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[33] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t type metadata accessor for AmbiguityOutput(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for AmbiguityOutput);
}

uint64_t outlined init with take of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for AmbiguityServiceResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for AmbiguityServiceResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 232), v1, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 224);
    v4 = *(_QWORD *)(v0 + 232);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
    v6 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 184);
    outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 224), v7, type metadata accessor for RemoteConversationOrReformedInput);
    outlined init with copy of ConversationHelperInput(v7, v8, type metadata accessor for RemoteConversationOrReformedInput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 32))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 192));
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 344) = v9;
      *v9 = v0;
      v9[1] = ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:);
      return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 144), 1, 0);
    }
    v11 = *(_QWORD *)(v0 + 232);
    v13 = *(uint64_t **)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 184);
    swift_release();
    outlined destroy of CamOutput(v12, type metadata accessor for RemoteConversationOrReformedInput);
    outlined destroy of ReferenceResolutionClientProtocol?(v11, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    v6 = *v13;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  if (*(_QWORD *)(v0 + 80))
  {
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
    PluginAction.input.getter();
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 320) = v1;
    *v1 = v0;
    v1[1] = ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:);
    return ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(*(_QWORD *)(v0 + 232), v0 + 16, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 144));
  }
  else
  {
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
    v4 = *(_QWORD *)(v0 + 256);
    v5 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 136);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationHandler?);
    v3(v4, v6, v5);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 240);
    if (v9)
    {
      v16 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v17 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = PluginAction.flowHandlerId.getter();
      *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v16(v10, v11);
      _os_log_impl(&dword_1B4BE6000, v7, v8, "[AmbiguityService] Cannot load a RemoteConversationClient for %s: handler not found", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v13, -1, -1);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 296))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  swift_release();
  v1(v3, v4);
  outlined destroy of CamOutput(v5, type metadata accessor for RemoteConversationOrReformedInput);
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v6 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[17];
  v2 = v0[33];
  v3 = v0[30];
  v4 = v0[31];
  v5 = type metadata accessor for Logger();
  v0[35] = __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[36] = v6;
  v6(v2, v1, v3);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[33];
  v11 = v0[30];
  v12 = v0[31];
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v23 = v22;
    *(_DWORD *)v13 = 136315138;
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B770], MEMORY[0x1E0D9B788]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl(&dword_1B4BE6000, v7, v8, "[DecisionEngine] Finding conversation for plugin action: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
  }

  v0[37] = v16;
  v17 = PluginAction.flowHandlerId.getter();
  v19 = v18;
  v0[38] = v18;
  v20 = (_QWORD *)swift_task_alloc();
  v0[39] = v20;
  *v20 = v0;
  v20[1] = ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:);
  return ConversationHandlerLocator.handler(id:)((uint64_t)(v0 + 7), v17, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  v4 = *(_QWORD *)(*v1 + 192);
  v5 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc();
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v2 + 336) = v6;
  v6(v3, v4);
  return swift_task_switch();
}

uint64_t ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v4 = type metadata accessor for RemoteConversationOrReformedInput(0);
  v3[20] = v4;
  v3[21] = *(_QWORD *)(v4 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v5 = type metadata accessor for Input();
  v3[24] = v5;
  v3[25] = *(_QWORD *)(v5 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v6 = type metadata accessor for PluginAction();
  v3[30] = v6;
  v3[31] = *(_QWORD *)(v6 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[34] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t type metadata accessor for RemoteConversationOrReformedInput(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteConversationOrReformedInput);
}

uint64_t ConversationHandlerLocator.handler(id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3, v4);
  if (v5)
  {
    v6 = v5;
    v7 = *(uint64_t **)(v0 + 160);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    v7[3] = type metadata accessor for RemoteFlowPluginBundleConversationHandler();
    v7[4] = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginBundleConversationHandler);
    *v7 = v6;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 184);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    v10 = *(_QWORD *)(v9 + 40);
    v11 = *(_QWORD *)(v9 + 48);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 208) = v12;
    *v12 = v0;
    v12[1] = ConversationHandlerLocator.handler(id:);
    return FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:)(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), v10, v11);
  }
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PluginLookupByIntentTopic);
  *v1 = v0;
  v1[1] = ConversationHandlerLocator.handler(id:);
  return Task<>.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = *(_QWORD *)(v0 + 160);
  if (*(_QWORD *)(v0 + 120))
  {
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 96), v0 + 56);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for ConversationHandler?);
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_QWORD *)(v1 + 32) = 0;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[27];
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 112);
    v2 = *(_QWORD *)(v1 + 120);
    v0[15] = &type metadata for FlowExtensionConversationHandler;
    v0[16] = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
    v0[12] = v1;
    v0[13] = v3;
    v0[14] = v2;
    swift_bridgeObjectRetain();
  }
  else
  {
    v0[16] = 0;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
  }
  return swift_task_switch();
}

uint64_t ConversationHandlerLocator.handler(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[24] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

_QWORD *protocol witness for PluginPackage.loadPlugin() in conformance RemoteFlowPluginPackage()
{
  _QWORD *v0;

  v0 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginBundleConversationHandler);
  return v0;
}

_QWORD *RemoteFlowPluginPackage.loadRemoteConversationHandler()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10[2];

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteFlowPluginPackage.swift", 44, 2, (uint64_t)"loadRemoteConversationHandler()", 31, 2, v2);
  v4 = v0[2];
  v3 = v0[3];
  v6 = v0[6];
  v5 = v0[7];
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 8), (uint64_t)v10);
  v7 = v0[4];
  type metadata accessor for RemoteFlowPluginBundleConversationHandler();
  v8 = (_QWORD *)swift_allocObject();
  v8[12] = 0;
  v8[13] = 0;
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v6;
  v8[5] = v5;
  outlined init with take of ReferenceResolutionClientProtocol(v10, (uint64_t)(v8 + 7));
  v8[6] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return v8;
}

uint64_t ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(uint64_t **)(v0 + 240);
  v2 = *v1;
  *(_QWORD *)(v0 + 360) = *v1;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 248);
    v4 = *(_QWORD *)(v0 + 256);
    v5 = *(_QWORD *)(v0 + 136);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + *(int *)(*(_QWORD *)(v0 + 232) + 28), v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
    {
      v6 = *(_QWORD *)(v0 + 136);
      swift_retain_n();
      outlined destroy of ReferenceResolutionClientProtocol?(v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1B4BE6000, v7, v8, "Warning: Call to canHandle() did not return an input identifier, sending the input again. This will involve loading the flow twice.", v9, 2u);
        MEMORY[0x1B5E44758](v9, -1, -1);
      }
      v10 = *(uint64_t **)(v0 + 120);

      v11 = *v10;
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 384) = v12;
      *v12 = v0;
      v12[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
      return RemoteConversationClient.accept(input:speechData:)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 112), v11);
    }
    else
    {
      v38 = *(uint64_t **)(v0 + 120);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 32))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 248));
      v39 = *v38;
      swift_retain_n();
      v40 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 368) = v40;
      *v40 = v0;
      v40[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
      return RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 264), v39);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 232);
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 184);
    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + *(int *)(v14 + 24), v17, &demangling cache variable for type metadata for Input?);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15);
    v19 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 200);
    if (v18 == 1)
    {
      v21 = *(_QWORD *)(v0 + 216);
      v23 = *(_QWORD *)(v0 + 104);
      v22 = *(_QWORD *)(v0 + 112);
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 184), &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol(v23, v0 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v22, v19);
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      v26 = os_log_type_enabled(v24, v25);
      v27 = *(_QWORD *)(v0 + 240);
      v28 = *(_QWORD *)(v0 + 216);
      v30 = *(_QWORD *)(v0 + 192);
      v29 = *(_QWORD *)(v0 + 200);
      if (v26)
      {
        v31 = swift_slowAlloc();
        v53 = swift_slowAlloc();
        v54 = v53;
        *(_DWORD *)v31 = 136315394;
        v52 = v29;
        v33 = *(_QWORD *)(v0 + 40);
        v32 = *(_QWORD *)(v0 + 48);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v33);
        v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v33, v32);
        *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v0 + 16);
        *(_WORD *)(v31 + 12) = 2080;
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
        v36 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v28, v30);
        _os_log_impl(&dword_1B4BE6000, v24, v25, "[ConversationHelper] Conversation handler %s did not find a flow for input %s, returning nil", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v53, -1, -1);
        MEMORY[0x1B5E44758](v31, -1, -1);

      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
        __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      }
      outlined destroy of CamOutput(v27, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
      v50 = *(_QWORD *)(v0 + 96);
      v51 = type metadata accessor for RemoteConversationOrReformedInput(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 1, 1, v51);
    }
    else
    {
      v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
      v41(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v44 = 0;
        _os_log_impl(&dword_1B4BE6000, v42, v43, "[ConversationHelper] Conversation wants to reform input, will consider intent reformation in hypothesis list", v44, 2u);
        MEMORY[0x1B5E44758](v44, -1, -1);
      }
      v45 = *(_QWORD *)(v0 + 240);
      v46 = *(_QWORD *)(v0 + 224);
      v47 = *(_QWORD *)(v0 + 192);
      v48 = *(_QWORD *)(v0 + 96);

      outlined destroy of CamOutput(v45, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
      v41(v48, v46, v47);
      v49 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  swift_release();
  swift_release();
  v1(v2, v3);
  outlined destroy of CamOutput(v4, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release();
  swift_release();
  outlined destroy of CamOutput(v1, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(char *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[15];
  v2 = (_QWORD *)v0[13];
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v5 = type metadata accessor for ConversationHelperInput(0);
  v6 = (char *)v1 + *(int *)(v5 + 20);
  v7 = (uint64_t *)(*v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  v8 = *v7;
  v9 = v7[1];
  v0[38] = v9;
  swift_bridgeObjectRetain();
  Input.identifier.getter();
  v10 = (_QWORD *)((char *)v1 + *(int *)(v5 + 24));
  v11 = *v10;
  v12 = v10[1];
  v15 = (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v4 + 32) + *(_QWORD *)(v4 + 32));
  v13 = (_QWORD *)swift_task_alloc();
  v0[39] = v13;
  *v13 = v0;
  v13[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  return v15(v6, v8, v9, v0[34], v11, v12, v3, v4);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD, uint64_t, uint64_t);
  _QWORD *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  swift_release();
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 168), v4, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  outlined init with copy of ConversationHelperInput(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 200) + 32);
      v7(*(_QWORD **)(v0 + 208), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 192));
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1B4BE6000, v8, v9, "[ConversationHelper] Conversation wants to reform input after it had just accepted it?", v10, 2u);
        MEMORY[0x1B5E44758](v10, -1, -1);
      }
      v11 = *(_QWORD *)(v0 + 240);
      v12 = *(_QWORD *)(v0 + 208);
      v13 = *(_QWORD *)(v0 + 192);
      v14 = *(_QWORD *)(v0 + 176);
      v15 = *(_QWORD **)(v0 + 96);

      swift_release();
      outlined destroy of CamOutput(v14, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
      outlined destroy of CamOutput(v11, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
      v7(v15, v12, v13);
      v16 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      v17 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
      v18 = v15;
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 360);
      v27 = *(_QWORD *)(v0 + 240);
      v28 = *(_QWORD **)(v0 + 96);
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 176), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
      outlined destroy of CamOutput(v27, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
      *v28 = v26;
      v16 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      v17 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
      v18 = v28;
    }
    v17(v18, 0, 1, v16);
  }
  else
  {
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v20, "[ConversationHelper] Conversation did not accept input, returning nil", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 176);
    v24 = *(_QWORD *)(v0 + 96);

    swift_release();
    outlined destroy of CamOutput(v23, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    outlined destroy of CamOutput(v22, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
    v25 = type metadata accessor for RemoteConversationOrReformedInput(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[15];
  v2 = (_QWORD *)v0[13];
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v5 = (uint64_t *)(*v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  v6 = *v5;
  v7 = v5[1];
  v0[42] = v7;
  v10 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v4 + 40)
                                                                                   + *(_QWORD *)(v4 + 40));
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)swift_task_alloc();
  v0[43] = v8;
  *v8 = v0;
  v8[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  return v10(v0[30], v0[14], v6, v7, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  void (*v4)(_QWORD *, uint64_t, uint64_t);
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD, uint64_t, uint64_t);
  _QWORD *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  swift_release();
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 176);
  outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 160), v2, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  outlined init with copy of ConversationHelperInput(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 200) + 32);
      v4(*(_QWORD **)(v0 + 208), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 192));
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1B4BE6000, v5, v6, "[ConversationHelper] Conversation wants to reform input after it had just accepted it?", v7, 2u);
        MEMORY[0x1B5E44758](v7, -1, -1);
      }
      v8 = *(_QWORD *)(v0 + 240);
      v9 = *(_QWORD *)(v0 + 208);
      v10 = *(_QWORD *)(v0 + 192);
      v11 = *(_QWORD *)(v0 + 176);
      v12 = *(_QWORD **)(v0 + 96);

      swift_release();
      outlined destroy of CamOutput(v11, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
      outlined destroy of CamOutput(v8, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
      v4(v12, v9, v10);
      v13 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      v14 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
      v15 = v12;
    }
    else
    {
      v23 = *(_QWORD *)(v0 + 360);
      v24 = *(_QWORD *)(v0 + 240);
      v25 = *(_QWORD **)(v0 + 96);
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 176), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
      outlined destroy of CamOutput(v24, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
      *v25 = v23;
      v13 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      v14 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
      v15 = v25;
    }
    v14(v15, 0, 1, v13);
  }
  else
  {
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v17, "[ConversationHelper] Conversation did not accept input, returning nil", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }
    v19 = *(_QWORD *)(v0 + 240);
    v20 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 96);

    swift_release();
    outlined destroy of CamOutput(v20, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    outlined destroy of CamOutput(v19, (uint64_t (*)(_QWORD))type metadata accessor for ConversationSearchResult);
    v22 = type metadata accessor for RemoteConversationOrReformedInput(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 376) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  v4 = *(_QWORD *)(*v1 + 248);
  v5 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v2 + 328) = v6;
  v6(v3, v4);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[16];
  v2 = type metadata accessor for Logger();
  v0[36] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 3;
  v4 = v1[6];
  v5 = v1[7];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v5 + 8) + *(_QWORD *)(v5 + 8));
  v6 = (_QWORD *)swift_task_alloc();
  v0[37] = v6;
  *v6 = v0;
  v6[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  return v8(v4, v5);
}

uint64_t ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[17] = swift_task_alloc();
  v5[18] = type metadata accessor for UserInputResult();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v5[23] = swift_task_alloc();
  v6 = type metadata accessor for Input();
  v5[24] = v6;
  v5[25] = *(_QWORD *)(v6 - 8);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = type metadata accessor for ConversationSearchResult();
  v5[30] = swift_task_alloc();
  v7 = type metadata accessor for UUID();
  v5[31] = v7;
  v5[32] = *(_QWORD *)(v7 - 8);
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[35] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t type metadata accessor for ConversationSearchResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationSearchResult;
  if (!type metadata singleton initialization cache for ConversationSearchResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t protocol witness for ConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:) in conformance RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(a1, a2, a3, a4, a5, a6);
}

uint64_t RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v1;
    *v1 = v0;
    v1[1] = RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:);
    return RemoteConversationClient.startTurn(turnData:bridge:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[12];
  v3 = v0[7];
  v2 = v0[8];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v2, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  v6 = (_QWORD *)swift_task_alloc();
  v0[14] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:);
  return RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(v0[6], v3, v0[12]);
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v7[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7[13] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = v1;
  swift_task_dealloc();
  outlined destroy of UUID?(v4);
  return swift_task_switch();
}

uint64_t RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 128);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 96);
  if (v2)
  {
    swift_retain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  else
  {
    v4 = (uint64_t *)(*(_QWORD *)(v0 + 128) + 104);
    swift_beginAccess();
    v5 = *v4;
    *(_QWORD *)(v0 + 176) = *v4;
    if (v5)
    {
      swift_retain();
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 184) = v6;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *v6 = v0;
      v6[1] = RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
    }
    else
    {
      v8 = *(_QWORD *)(v0 + 152);
      v7 = *(_QWORD *)(v0 + 160);
      v9 = *(_QWORD *)(v0 + 136);
      v11 = *(_QWORD *)(v0 + 120);
      v10 = *(_QWORD *)(v0 + 128);
      v12 = *(_QWORD *)(v0 + 112);
      v20 = *(_QWORD *)(v0 + 104);
      v13 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
      outlined init with copy of UUID?(v11, v8);
      v14 = static MessageBusActor.shared;
      v15 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
      v16 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v17 = (_QWORD *)swift_allocObject();
      v17[2] = v14;
      v17[3] = v15;
      v17[4] = v10;
      v17[5] = v20;
      v17[6] = v12;
      outlined init with take of UUID?(v8, (uint64_t)v17 + v16);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v18 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24RemoteConversationClientCSg_Tgm5(v7, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:), (uint64_t)v17);
      *(_QWORD *)(v0 + 200) = v18;
      *v4 = v18;
      swift_retain();
      swift_release();
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *v19 = v0;
      v19[1] = RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
    }
    return Task.value.getter();
  }
}

uint64_t RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v4[17] = v5;
  v4[18] = *(_QWORD *)(v5 + 64);
  v4[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v4[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[21] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release();
  if (!v1)
  {
    swift_release();
    if (one-time initialization token for executor == -1)
    {
LABEL_6:
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_1B4BE6000, v15, v16, "Error loading remote flow plugin: No result from loadFlowPlugin(bundleId:)", v17, 2u);
        MEMORY[0x1B5E44758](v17, -1, -1);
      }

      v11 = 0;
      goto LABEL_9;
    }
LABEL_16:
    swift_once();
    goto LABEL_6;
  }
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v2 + 40);
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(void **)(v0 + 128);
  *(_QWORD *)(v2 + 40) = v3 + 1;
  v8 = type metadata accessor for SharedFlowPluginConnection();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = swift_unknownObjectRetain();
  v10 = specialized SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(v9, v4, v6, v7, v23, v5, v2, v3);
  *(_QWORD *)(v0 + 256) = v10;
  swift_release();
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 40) = v8;
  *(_QWORD *)(v0 + 48) = &protocol witness table for SharedFlowPluginConnection;
  *(_QWORD *)(v0 + 16) = v10;
  type metadata accessor for RemoteConversationClient();
  v11 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 264) = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_defaultActor_initialize();
  v11[21] = 0;
  v11[22] = 0;
  v11[14] = v6;
  v11[15] = v7;
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 16), (uint64_t)(v11 + 16));
  v12 = *(void (**)(uint64_t, uint64_t))(**(_QWORD **)(v2 + 32) + 112);
  v13 = swift_retain();
  v12(v13, v3);
  if (*(_QWORD *)(v2 + 16))
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_release();
LABEL_9:
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v11);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1B4BE6000, v20, v21, "Connection invalidated while loading flow plugin, invalidating plugin connection", v22, 2u);
    MEMORY[0x1B5E44758](v22, -1, -1);
  }

  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 296))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  v1 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = v0[25];
  v2 = v0[23];
  v3 = v0[20];
  v4 = v0[18];
  v5 = v0[19];
  v6 = v0[16];
  v7 = v0[17];
  v8 = v0[15];
  outlined init with copy of UUID?(v0[21], v1);
  v9 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v10 = (_QWORD *)swift_allocObject();
  v0[27] = v10;
  v10[2] = v8;
  v10[3] = v6;
  v10[4] = v7;
  v10[5] = v4;
  v10[6] = v5;
  v10[7] = v3;
  outlined init with take of UUID?(v1, (uint64_t)v10 + v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)swift_task_alloc();
  v0[28] = v11;
  *v11 = v0;
  v11[1] = SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), (uint64_t)v10);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[33] + 128, (uint64_t)(v0 + 7));
  v1 = v0[10];
  v2 = v0[11];
  v0[34] = v1;
  v0[35] = v2;
  v0[36] = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v0[37] = *(_QWORD *)(v2 + 24);
  return swift_task_switch();
}

uint64_t SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8[21] = a7;
  v8[22] = v7;
  v8[19] = a5;
  v8[20] = a6;
  v8[17] = a3;
  v8[18] = a4;
  v8[15] = a1;
  v8[16] = a2;
  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v8[23] = v9;
  v8[24] = *(_QWORD *)(v9 + 64);
  v8[25] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v8[26] = static MessageBusActor.shared;
  swift_retain_n();
  return swift_task_switch();
}

uint64_t SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[29] = a1;
  v4[30] = a2;
  v4[31] = v2;
  swift_task_dealloc();
  if (!v2)
    swift_release();
  return swift_task_switch();
}

uint64_t partial apply for specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (int *)v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)
                                                                            + async function pointer to specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)))(a1, v4, v5, v7, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v4 = *(int **)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v7 = (_QWORD *)swift_task_alloc();
  v6[2] = v7;
  *v7 = v6;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, v5);
}

uint64_t partial apply for closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v7 = *(_OWORD *)(v0 + 40);
  v8 = *(_OWORD *)(v0 + 56);
  v6 = *(_OWORD *)(v0 + 24);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v3;
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 32) = v7;
  *(_OWORD *)(v3 + 48) = v8;
  *(_QWORD *)(v3 + 64) = v2;
  *(_QWORD *)(v3 + 72) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversation?);
  *v4 = v0;
  v4[1] = closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[9] = a8;
  v8[10] = v10;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  return swift_task_switch();
}

void closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD aBlock[6];

  v28 = a7;
  v29 = a1;
  v31 = a2;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Never>);
  v14 = *(_QWORD *)(v30 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v30);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)MEMORY[0x1B5E432E8](a3, a4);
  v20 = (void *)MEMORY[0x1B5E432E8](a5, a6);
  if (a8)
    a8 = (void *)MEMORY[0x1B5E432E8](v28, a8);
  outlined init with copy of UUID?(a9, (uint64_t)v18);
  v21 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v21 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v18, 1, v21) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v21);
  }
  v24 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v30);
  v25 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v26 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v26 + v25, (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed RemoteConversationXPC?) -> ();
  aBlock[3] = &block_descriptor_25;
  v27 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v31, sel_loadFlowPluginWithBundleId_bundlePath_rcId_hypothesisId_reply_, v19, v20, a8, isa, v27);
  _Block_release(v27);

}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed RemoteConversationXPC?) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Never>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:));
}

uint64_t closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1)
{
  if (a1)
  {
    swift_getObjectType();
    RemoteConversationXPC.sendableWrapper.getter();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t RemoteConversationXPC.sendableWrapper.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for SendableRemoteConversationXPCWrapper();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  swift_unknownObjectRetain();
  return v1;
}

uint64_t type metadata accessor for SendableRemoteConversationXPCWrapper()
{
  return objc_opt_self();
}

id outlined copy of Result<RemoteConversation?, Error>(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_unknownObjectRetain();
}

void outlined consume of Result<RemoteConversation?, Error>?(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    outlined consume of Result<RemoteConversation?, Error>(a1, a2, a3 & 1);
}

void outlined consume of Result<RemoteConversation?, Error>(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_unknownObjectRelease();
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                                      - 8)
                          + 80);
  v2 = (v1 + 64) & ~v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  return swift_deallocObject();
}

uint64_t type metadata accessor for SharedFlowPluginConnection()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for InterruptibleTaskManager()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for RemoteConversationClient()
{
  return objc_opt_self();
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.registerLoadedConversation(_:serial:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;

  v4 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in SharedFlowPluginServiceClient.LoadedConversationTracker.registerLoadedConversation(_:serial:), v4, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 16) = v7;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = *(_QWORD *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 + 64);
  v4[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t protocol witness for ConversationHandler.findConversation(for:rcId:) in conformance RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:)(a1, a2, a3, a4);
}

uint64_t RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[11] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 152) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = v1;
  swift_task_dealloc();
  outlined destroy of UUID?(v4);
  return swift_task_switch();
}

uint64_t RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v1;
    *v1 = v0;
    v1[1] = RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:);
    return RemoteConversationClient.canHandle(input:rcId:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 104);
    v5 = *(_QWORD *)(v0 + 40);
    swift_release();
    v6 = type metadata accessor for ConversationSearchResult();
    v7 = v5 + *(int *)(v6 + 24);
    v8 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
    v4(v5 + *(int *)(v6 + 28), 1, 1, v3);
    *(_QWORD *)v5 = 0;
    *(_BYTE *)(v5 + 8) = 1;
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  Input.identifier.getter();
  v3 = type metadata accessor for UUID();
  v0[12] = v3;
  v4 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v0[13] = (uint64_t)v4;
  v4(v1, 0, 1, v3);
  v5 = (_QWORD *)swift_task_alloc();
  v0[14] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:);
  return RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(v0[7], v2, v0[10]);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release();
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78))(v2);

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteConversationClient.canHandle(input:rcId:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t CanHandleResult;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = v0[9];
  v1 = v0[10];
  v4 = v0[7];
  v3 = v0[8];
  v5 = v0[5];
  v6 = (_QWORD *)v0[6];
  v7 = v0[3];
  v18 = v0[4];
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v9 = v6 + 16;
  v10 = v6[19];
  v11 = v6[20];
  __swift_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v4);
  v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v13 = swift_allocObject();
  v0[11] = v13;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v12, v1, v4);
  v14 = (_QWORD *)(v13 + ((v2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v14 = v18;
  v14[1] = v5;
  v19 = (uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v11 + 8)
                                                                                     + *(_QWORD *)(v11 + 8));
  swift_bridgeObjectRetain();
  v15 = (_QWORD *)swift_task_alloc();
  v0[12] = v15;
  CanHandleResult = type metadata accessor for ConversationCanHandleResult();
  *v15 = v0;
  v15[1] = RemoteConversationClient.canHandle(input:rcId:);
  return v19(v0 + 2, &async function pointer to partial apply for closure #1 in RemoteConversationClient.canHandle(input:rcId:), v13, CanHandleResult, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for Input();
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = *(_QWORD *)(v6 + 64);
  v4[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t type metadata accessor for ConversationCanHandleResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationCanHandleResult;
  if (!type metadata singleton initialization cache for ConversationCanHandleResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v8 = *(_QWORD *)(type metadata accessor for Input() - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v3 + v9;
  v11 = (uint64_t *)(v3 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v14;
  *v14 = v4;
  v14[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationClient.canHandle(input:rcId:)(a1, a2, a3, v10, v12, v13);
}

uint64_t closure #1 in RemoteConversationClient.canHandle(input:rcId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v14;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v14 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, *(_QWORD *)(v0 + 48), v3);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject();
  *(_QWORD *)(v0 + 104) = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(_OWORD *)(v9 + v8) = v14;
  v10 = (_QWORD *)(v9 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8));
  *v10 = v6;
  v10[1] = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v11 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v11;
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:);
  *(_QWORD *)(v11 + 24) = v9;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v12;
  type metadata accessor for ConversationCanHandleResult();
  *v12 = v0;
  v12[1] = closure #1 in RemoteConversationClient.canHandle(input:rcId:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = *(_QWORD **)(v2 + 24);
  swift_release();
  swift_task_dealloc();
  *v4 = *(_QWORD *)(v2 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v7 = type metadata accessor for Input();
  v6[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[10] = v8;
  v6[11] = *(_QWORD *)(v8 + 64);
  v6[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  Class v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];
  id v26;

  v23 = a6;
  v24 = a1;
  v26 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCanHandleResult, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for Input();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C598]);
  v12 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v14 = v13;
  result = swift_release();
  if (!v6)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    v16 = (void *)MEMORY[0x1B5E432E8](a5, v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v8);
    v17 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v18 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v18 + v17, v11, v8);
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
    aBlock[3] = &block_descriptor_217;
    v19 = _Block_copy(aBlock);
    swift_release();
    v20 = isa;
    objc_msgSend(v26, sel_canHandleWithInputData_rcId_reply_, isa, v16, v19);
    _Block_release(v19);

    return outlined consume of Data._Representation(v12, v14);
  }
  return result;
}

id ConversationCanHandleResult.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  const char *v37;
  uint64_t v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  objc_class *CanHandleResult;
  _BYTE *v51;
  char *v52;
  char *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  objc_super v58;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v52 - v8;
  MEMORY[0x1E0C80A78](v7);
  v57 = (uint64_t)&v52 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v52 - v16;
  MEMORY[0x1E0C80A78](v15);
  v56 = (uint64_t)&v52 - v18;
  v19 = v1;
  v20 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF47E0);
  v21 = objc_msgSend(a1, sel_containsValueForKey_, v20);

  if (!v21)
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35))
      goto LABEL_14;
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    v37 = "Could not decode ConversationCanHandleResultXPC: No value for key directlySupported";
    goto LABEL_13;
  }
  v22 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF47E0);
  v55 = objc_msgSend(a1, sel_decodeBoolForKey_, v22);

  v23 = (void *)MEMORY[0x1B5E432E8](0x6564756C637865, 0xE700000000000000);
  v24 = objc_msgSend(a1, sel_containsValueForKey_, v23);

  if ((v24 & 1) == 0)
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35))
      goto LABEL_14;
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    v37 = "Could not decode ConversationCanHandleResultXPC: No value for key exclude";
LABEL_13:
    _os_log_impl(&dword_1B4BE6000, v34, v35, v37, v36, 2u);
    MEMORY[0x1B5E44758](v36, -1, -1);
LABEL_14:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v25 = (void *)MEMORY[0x1B5E432E8](0x6564756C637865, 0xE700000000000000);
  v54 = objc_msgSend(a1, sel_decodeBoolForKey_, v25);

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  v26 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v26)
  {
    v27 = (void *)v26;
    v52 = v14;
    v53 = v6;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    v28 = type metadata accessor for Input();
    v29 = v27;
    v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E0D9C5A0]);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

    outlined consume of Data._Representation(v30, v32);
    swift_release();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v17, 0, 1, v28);
    v42 = (uint64_t)v17;
    v43 = v56;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v42, v56, &demangling cache variable for type metadata for Input?);
    v14 = v52;
    v6 = v53;
  }
  else
  {
    v41 = type metadata accessor for Input();
    v43 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v56, 1, 1, v41);
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSUUID);
  v44 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v44)
  {
    v45 = (void *)v44;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v46 = type metadata accessor for UUID();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v9, 0, 1, v46);
  }
  else
  {
    v47 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v9, 1, 1, v47);
  }
  v48 = (uint64_t)v9;
  v49 = v57;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v48, v57, (uint64_t *)&demangling cache variable for type metadata for UUID?);

  outlined init with copy of ReferenceResolutionClientProtocol?(v43, (uint64_t)v14, &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v49, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
  v51 = objc_allocWithZone(CanHandleResult);
  v51[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = v55;
  v51[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = v54;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t)&v51[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t)&v51[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v58.receiver = v51;
  v58.super_class = CanHandleResult;
  v39 = objc_msgSendSuper2(&v58, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for Input?);

  outlined destroy of ReferenceResolutionClientProtocol?(v49, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for Input?);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v39;
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<ConversationCanHandleResult, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:));
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCanHandleResult, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationCanHandleResult.toConversationSearchResult(remoteConversationClient:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Input();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported) == 1)
  {
    v12 = v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier;
    v13 = type metadata accessor for ConversationSearchResult();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2 + *(int *)(v13 + 24), 1, 1, v8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, a2 + *(int *)(v13 + 28), (uint64_t *)&demangling cache variable for type metadata for UUID?);
    *(_QWORD *)a2 = a1;
    *(_BYTE *)(a2 + 8) = 1;
    return swift_retain();
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput, (uint64_t)v7, &demangling cache variable for type metadata for Input?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
      v15 = *(_BYTE *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude);
      v16 = type metadata accessor for ConversationSearchResult();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2 + *(int *)(v16 + 24), 1, 1, v8);
      v17 = a2 + *(int *)(v16 + 28);
      v18 = type metadata accessor for UUID();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = v15;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      v19 = type metadata accessor for ConversationSearchResult();
      v20 = a2 + *(int *)(v19 + 24);
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v20, v11, v8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v8);
      v21 = a2 + *(int *)(v19 + 28);
      v22 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  return result;
}

uint64_t RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, void *, uint64_t, _QWORD, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[15];
  v18 = v0[14];
  v2 = v0[12];
  v3 = v0[13];
  v5 = (char *)v0[8];
  v4 = (_QWORD *)v0[9];
  v6 = v0[7];
  v7 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v9 = *(_QWORD *)&v5[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  v8 = *(_QWORD *)&v5[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId + 8];
  swift_beginAccess();
  v4[21] = v9;
  v4[22] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = v4 + 16;
  v11 = v4[19];
  v12 = v4[20];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v2);
  v13 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v14 = swift_allocObject();
  v0[17] = v14;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v14 + v13, v1, v2);
  *(_QWORD *)(v14 + ((v18 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v5;
  v19 = (uint64_t (*)(_QWORD, void *, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v12 + 8)
                                                                                  + *(_QWORD *)(v12 + 8));
  v15 = v5;
  v16 = (_QWORD *)swift_task_alloc();
  v0[18] = v16;
  *v16 = v0;
  v16[1] = RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  return v19(v0[6], &async function pointer to partial apply for closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:), v14, v0[10], v11, v12);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 88), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 88);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = UserInputResult.description.getter();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UserInputResult(v3);
    _os_log_impl(&dword_1B4BE6000, v1, v2, "Extension returned from accept(): %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v5, -1, -1);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  else
  {
    outlined destroy of UserInputResult(*(_QWORD *)(v0 + 88));
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = type metadata accessor for UserInputResult();
  v4[11] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 + 64);
  v4[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v3 + v9;
  v11 = *(_QWORD *)(v3 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v12;
  *v12 = v4;
  v12[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(a1, a2, a3, v10, v11);
}

uint64_t closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(void **)(v0 + 48);
  v13 = *(_OWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, *(_QWORD *)(v0 + 40), v3);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = (v2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = swift_allocObject();
  *(_QWORD *)(v0 + 88) = v8;
  *(_OWORD *)(v8 + 16) = v13;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v6, v1, v3);
  *(_QWORD *)(v8 + v7) = v5;
  swift_unknownObjectRetain();
  v9 = v5;
  v10 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v10;
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  *(_QWORD *)(v10 + 24) = v8;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v11;
  type metadata accessor for UserInputResult();
  *v11 = v0;
  v11[1] = closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for UUID();
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = *(_QWORD *)(v7 + 64);
  v5[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t destroy for ConversationSearchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Input();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

_QWORD *initializeWithCopy for RemoteConversationOrReformedInput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Input();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t destroy for RemoteConversationOrReformedInput(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v2 = type metadata accessor for Input();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t storeEnumTagSinglePayload for DecisionEngineResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t destroy for AmbiguityServiceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for Input();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for AmbiguityOutput(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
    else
      swift_bridgeObjectRelease();
  }
  v8 = a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for Parse();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t getEnumTagSinglePayload for DecisionEngineResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t initializeWithCopy for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for Input();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  if (v9(v6, 1, v7))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[40];

  v43 = a2;
  v44 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v39 - v20;
  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + 16, (uint64_t)&v45, &demangling cache variable for type metadata for DecisionEngineStream?);
  if (v46)
  {
    v41 = a3;
    outlined init with take of ReferenceResolutionClientProtocol(&v45, (uint64_t)v47);
    v22 = *a1;
    v42 = a5;
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 120);
      v40 = *(_QWORD *)(v22 + 112);
      swift_bridgeObjectRetain();
    }
    else
    {
      v40 = 0;
      v23 = 0;
    }
    v28 = type metadata accessor for DecisionEngineResponse();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + *(int *)(v28 + 24), (uint64_t)v14, &demangling cache variable for type metadata for Input?);
    v29 = type metadata accessor for Input();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v14, 1, v29) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for Input?);
      v31 = type metadata accessor for Parse();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v21, 1, 1, v31);
    }
    else
    {
      Input.parse.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
      v32 = type metadata accessor for Parse();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v21, 0, 1, v32);
    }
    static TaskPriority.background.getter();
    v33 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v11, 0, 1, v33);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t)v19, &demangling cache variable for type metadata for Parse?);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v47, (uint64_t)&v45);
    v34 = (*(unsigned __int8 *)(v16 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v35 = (v17 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = (_QWORD *)swift_allocObject();
    v36[2] = 0;
    v36[3] = 0;
    v37 = v42;
    v38 = v41;
    v36[4] = v43;
    v36[5] = v38;
    v36[6] = v44;
    v36[7] = v37;
    v36[8] = v40;
    v36[9] = v23;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v19, (uint64_t)v36 + v34, &demangling cache variable for type metadata for Parse?);
    outlined init with take of ReferenceResolutionClientProtocol(&v45, (uint64_t)v36 + v35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:), (uint64_t)v36);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for Parse?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v45, &demangling cache variable for type metadata for DecisionEngineStream?);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v25, v26, "Failed to find DecisionEngineStream for DecisionEngine.", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }

  }
}

uint64_t destroy for DecisionEngineResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Input();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t destroy for ConversationHelperInput(id *a1, uint64_t a2)
{
  id *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;

  v4 = (id *)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v6 = (char *)v4 + v5[7];
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  swift_release();

  v9 = (uint64_t *)((char *)v4 + v5[11]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    outlined consume of Data._Representation(*v9, v10);
  return swift_unknownObjectRelease();
}

uint64_t specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 64), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == *MEMORY[0x1E0D9C5E0])
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }
  else
  {
    if (v4 != *MEMORY[0x1E0D9C668])
    {
      if (v4 == *MEMORY[0x1E0D9C5F0])
      {
        v11 = *(_QWORD *)(v0 + 80);
        v12 = *(_QWORD *)(v0 + 88);
        v13 = *(_QWORD *)(v0 + 72);
      }
      else
      {
        if (v4 == *MEMORY[0x1E0D9C5F8])
        {
          v14 = *(id **)(v0 + 88);
          (*(void (**)(id *, _QWORD))(*(_QWORD *)(v0 + 80) + 96))(v14, *(_QWORD *)(v0 + 72));

          goto LABEL_5;
        }
        v11 = *(_QWORD *)(v0 + 80);
        v12 = *(_QWORD *)(v0 + 88);
        v13 = *(_QWORD *)(v0 + 72);
        if (v4 == *MEMORY[0x1E0D9C678] || v4 == *MEMORY[0x1E0D9C680])
        {
          (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
          goto LABEL_5;
        }
      }
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v15;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
      goto LABEL_6;
    }
    v5 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 96))(v5, *(_QWORD *)(v0 + 72));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    v6 = type metadata accessor for NLIntent();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
LABEL_5:
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;
LABEL_6:
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v0 + 40) + 384))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v7, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for Parse();
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

Swift::Void __swiftcall ConversationService.ActiveTurn.registerExecutionInputSystem(rcId:system:)(Swift::String rcId, Swift::String system)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  object = system._object;
  countAndFlagsBits = system._countAndFlagsBits;
  v5 = rcId._object;
  v6 = rcId._countAndFlagsBits;
  v7 = (uint64_t *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_executionInputSystem);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v7;
  *v7 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(countAndFlagsBits, (uint64_t)object, v6, (uint64_t)v5, isUniquelyReferenced_nonNull_native);
  *v7 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
}

uint64_t destroy for AnyEncodable()
{
  return swift_release();
}

uint64_t specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t v16;
  unint64_t v17;

  v0 = type metadata accessor for Parse.DirectInvocation();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Parse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x1E0D9C5E0])
  {
    v9 = 0x6573726170204C4ELL;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else if (v8 == *MEMORY[0x1E0D9C668])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    v10 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    v11 = objc_msgSend(v10, sel_typeName);

    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release();

    v12 = type metadata accessor for NLIntent();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v7, v12);
  }
  else if (v8 == *MEMORY[0x1E0D9C658])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
    v16 = Parse.DirectInvocation.identifier.getter();
    v17 = v13;
    v14._countAndFlagsBits = String.init<A>(_:)();
    v16 = 0x203A746365726944;
    v17 = 0xE800000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v9 = v16;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else if (v8 == *MEMORY[0x1E0D9C5E8])
  {
    v9 = 0x6573726170204C4ELL;
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0x206E776F6E6B6E55;
  }
  return v9;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyEncodable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void TaskLoggingEventSink.route(_:_:_:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  int v60;
  int *v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  NSObject *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  char *v84;
  int *v85;
  void *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  void *v91;
  uint64_t v92;
  void (**v93)(_QWORD, _QWORD, _QWORD);
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  NSObject *v110;
  char *v111;
  char *v112;
  void (**v113)(_QWORD, _QWORD, _QWORD);
  char *v114;
  char *v115;
  char *v116;
  NSObject *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  void *v125;
  char *v126;
  NSObject *v127;
  char *v128;
  char *v129;
  NSObject *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  void *v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  char *v152;
  NSObject *v153;
  char *v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, char *);
  char *v160;
  int *v161;
  uint64_t v162;
  void *v163;
  char *v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  char **v168;
  NSObject *v169;
  char *v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  void (*isa)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v180;
  char *v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  uint64_t v188;
  void *v189;
  char *v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  char *v194;
  NSObject *v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  int *v206;
  char *v207;
  char *v208;
  NSObject *v209;
  char *v210;
  char *v211;
  NSObject *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  NSObject *v220;
  uint64_t *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  void (*v225)(char *, char *, uint64_t);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  void *v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int8 v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  NSObject *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  NSObject *v288;
  char *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  char *v293;
  void (**v294)(_QWORD, _QWORD, _QWORD);
  char *v295;
  uint64_t v296;
  NSObject *v297;
  char *v298;
  uint64_t v299;
  NSObject *v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD v309[6];
  __int128 v310;
  __int128 v311;
  uint64_t v312;

  v301 = a2;
  v302 = a3;
  v295 = (char *)type metadata accessor for SiriKitConfirmationState();
  v294 = (void (**)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v295 - 1);
  v3 = MEMORY[0x1E0C80A78](v295);
  v291 = (char *)&v275 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v293 = (char *)&v275 - v5;
  v280 = type metadata accessor for TaskFlowConfiguration();
  v279 = *(_QWORD *)(v280 - 8);
  MEMORY[0x1E0C80A78](v280);
  v278 = (char *)&v275 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult?);
  MEMORY[0x1E0C80A78](v7);
  v298 = (char *)&v275 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v306 = (char *)type metadata accessor for SiriKitReliabilityCodes();
  v300 = *((_QWORD *)v306 - 1);
  MEMORY[0x1E0C80A78](v306);
  v297 = ((char *)&v275 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Date();
  v303 = *(_QWORD *)(v10 - 8);
  v304 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v277 = (uint64_t)&v275 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v289 = (char *)&v275 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v292 = (uint64_t)&v275 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v283 = (uint64_t)&v275 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v286 = (uint64_t)&v275 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v288 = ((char *)&v275 - v22);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v275 - v24;
  MEMORY[0x1E0C80A78](v23);
  v299 = (uint64_t)&v275 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v28 = MEMORY[0x1E0C80A78](v27);
  v282 = (uint64_t)&v275 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v285 = (uint64_t)&v275 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v287 = (uint64_t)&v275 - v33;
  MEMORY[0x1E0C80A78](v32);
  v296 = (uint64_t)&v275 - v34;
  v308 = type metadata accessor for ActivityType();
  v35 = *(_QWORD *)(v308 - 8);
  v36 = MEMORY[0x1E0C80A78](v308);
  v276 = (char *)&v275 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v36);
  v290 = (char *)&v275 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v275 - v41;
  v43 = MEMORY[0x1E0C80A78](v40);
  v281 = (char *)&v275 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v284 = (char *)&v275 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v49 = (char *)&v275 - v48;
  v50 = MEMORY[0x1E0C80A78](v47);
  v52 = (char *)&v275 - v51;
  MEMORY[0x1E0C80A78](v50);
  v54 = (char *)&v275 - v53;
  v55 = type metadata accessor for SiriKitEventPayload();
  v56 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v58 = (char *)&v275 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  SiriKitEvent.payload.getter();
  v59 = (*(uint64_t (**)(char *, uint64_t))(v56 + 88))(v58, v55);
  v60 = *MEMORY[0x1E0D9B220];
  v307 = v35;
  if (v59 == v60)
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, statusReason: SiriKitReliabilityCodes, flowActivity: FlowActivity?, flowMetadata: [String : Any]?, resolutionResult: AppResolutionResult?));
    v62 = (uint64_t *)&v58[v61[12]];
    v63 = v62[1];
    v296 = *v62;
    v64 = &v58[v61[16]];
    v65 = (uint64_t)&v58[v61[20]];
    v66 = *(_QWORD *)&v58[v61[24]];
    v67 = &v58[v61[28]];
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v54, v58, v308);
    v68 = v300;
    v69 = v297;
    v70 = v306;
    ((void (*)(NSObject *, char *, char *))v300[4].isa)(v297, v64, v306);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v65, (uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    v71 = (uint64_t)v67;
    v72 = v298;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v71, (uint64_t)v298, &demangling cache variable for type metadata for AppResolutionResult?);
    v73 = v299;
    SiriKitEvent.timestamp.getter();
    TaskLoggingService.logAppResolutionResult(activityType:eventContext:eventTime:intentTypeName:statusReason:task:domainFlowActivity:flowMetadata:resolutionResult:)(v54, v301, v73, v296, v63, (uint64_t)v69, v302, (uint64_t)&v310, v66, (uint64_t)v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v73, v304);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for AppResolutionResult?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    ((void (*)(NSObject *, char *))v68[1].isa)(v69, v70);
LABEL_3:
    (*(void (**)(char *, uint64_t))(v307 + 8))(v54, v308);
    return;
  }
  if (v59 == *MEMORY[0x1E0D9B1B8])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v74 = *(void **)v58;
    v75 = *((_QWORD *)v58 + 1);
    v76 = *((_QWORD *)v58 + 2);
    v305 = *(_QWORD *)(v305 + 16);
    v77 = v308;
    (*(void (**)(char *, _QWORD, uint64_t))(v307 + 104))(v52, *MEMORY[0x1E0D9B6A8], v308);
    SiriKitEvent.timestamp.getter();
    v312 = 0;
    v310 = 0u;
    v311 = 0u;
    if (v74)
    {
      v78 = objc_msgSend(v74, sel_typeName);
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v80 = v79;

      swift_bridgeObjectRelease();
      v76 = v80;
    }
    v81 = v303;
    v82 = v300;
    v83 = v296;
    v84 = v306;
    ((void (*)(uint64_t, _QWORD, char *))v300[13].isa)(v296, *MEMORY[0x1E0D9B318], v306);
    ((void (*)(uint64_t, _QWORD, uint64_t, char *))v82[7].isa)(v83, 0, 1, v84);
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v52, v301, (uint64_t)v25, v302, 0, 0, 0, 0, (uint64_t)&v310, 0, v75, v76, 0, 0, 0, 0, 0, 0, v83,
      0);

    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v25, v304);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v52, v77);
    return;
  }
  if (v59 == *MEMORY[0x1E0D9B1E8])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v85 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (confirmationState: SiriKitConfirmationState, intent: INIntent?, taskName: String?, parameterName: String, confirmedItem: Any?, multicardinalIndex: Int?));
    v86 = *(void **)&v58[v85[12]];
    v87 = (uint64_t *)&v58[v85[16]];
    v89 = *v87;
    v88 = v87[1];
    v90 = (uint64_t *)&v58[v85[20]];
    v91 = (void *)v90[1];
    v299 = *v90;
    v92 = (uint64_t)&v58[v85[24]];
    v93 = v294;
    v94 = v293;
    v95 = v58;
    v96 = v295;
    ((void (**)(char *, char *, char *))v294)[4](v293, v95, v295);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v92, (uint64_t)v309, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v97 = v291;
    ((void (**)(char *, char *, char *))v93)[2](v291, v94, v96);
    v98 = ((uint64_t (*)(char *, char *))v93[11])(v97, v96);
    v99 = v306;
    v100 = v292;
    if (v98 != *MEMORY[0x1E0D9B370])
    {
      if (v98 == *MEMORY[0x1E0D9B378])
      {
        v101 = v308;
        (*(void (**)(char *, _QWORD, uint64_t))(v307 + 104))(v290, *MEMORY[0x1E0D9B6B0], v308);
        v102 = v289;
        SiriKitEvent.timestamp.getter();
        if (v309[3])
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
          v103 = swift_allocObject();
          *(_OWORD *)(v103 + 16) = xmmword_1B4EE3F50;
          *(_QWORD *)(v103 + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
          v104 = swift_allocObject();
          *(_QWORD *)(v103 + 32) = v104;
          outlined init with copy of Any?((uint64_t)v309, v104 + 16);
        }
        else
        {
          v103 = 0;
        }
        v175 = v300;
        v312 = 0;
        v310 = 0u;
        v311 = 0u;
        if (v86)
        {
          v176 = objc_msgSend(v86, sel_typeName);
          v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v178 = v177;

          swift_bridgeObjectRelease();
          v88 = v178;
          v101 = v308;
        }
        isa = (void (*)(uint64_t, uint64_t, uint64_t, char *))v175[7].isa;
        v180 = v296;
        isa(v296, 1, 1, v306);
        v272 = v89;
        v181 = v290;
        TaskLoggingService.logTaskStepAndEntityContextTier1(activityType:eventContext:eventTime:task:app:attribute:chosenItem:disambiguationItems:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:)(v290, v301, (uint64_t)v102, v302, 0, 0, 0, (uint64_t)v309, v103, 0, (uint64_t)&v310, 0, v272, v88, v299, v91, 0, 0, 0,
          0,
          v180);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v180, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
        (*(void (**)(char *, uint64_t))(v303 + 8))(v102, v304);
        (*(void (**)(char *, uint64_t))(v307 + 8))(v181, v101);
LABEL_33:
        ((void (*)(char *, char *))v294[1])(v293, v295);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v309, (uint64_t *)&demangling cache variable for type metadata for Any?);
        return;
      }
      if (v98 != *MEMORY[0x1E0D9B368])
      {
        v159 = (void (*)(char *, char *))v294[1];
        v160 = v295;
        v159(v293, v295);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v309, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v159(v97, v160);
        return;
      }
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v307 + 104))(v42, *MEMORY[0x1E0D9B6B8], v308);
    SiriKitEvent.timestamp.getter();
    v312 = 0;
    v310 = 0u;
    v311 = 0u;
    if (v86)
    {
      v138 = objc_msgSend(v86, sel_typeName);
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v140 = v139;

      swift_bridgeObjectRelease();
      v88 = v140;
    }
    v141 = v296;
    ((void (*)(uint64_t, uint64_t, uint64_t, char *))v300[7].isa)(v296, 1, 1, v99);
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v42, v301, v100, v302, 0, 0, 0, 0, (uint64_t)&v310, 0, v89, v88, v299, v91, 0, 0, 0, 0, v141,
      0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v141, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v100, v304);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v42, v308);
    goto LABEL_33;
  }
  v105 = v306;
  if (v59 == *MEMORY[0x1E0D9B238])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v106 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
    v107 = &v58[v106[12]];
    v108 = *((_QWORD *)v107 + 1);
    v300 = *(NSObject **)v107;
    v306 = *(char **)&v58[v106[16]];
    v109 = &v58[v106[20]];
    v111 = *(char **)v109;
    v110 = *((_QWORD *)v109 + 1);
    v298 = v111;
    v297 = v110;
    v112 = &v58[v106[24]];
    v114 = *(char **)v112;
    v113 = (void (**)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v112 + 1);
    v295 = v114;
    v294 = v113;
    v115 = &v58[v106[28]];
    v116 = *(char **)v115;
    v117 = *((_QWORD *)v115 + 1);
    v118 = (uint64_t *)&v58[v106[32]];
    v119 = *v118;
    v293 = (char *)v118[1];
    v120 = (uint64_t)v293;
    v121 = (uint64_t)&v58[v106[36]];
    (*(void (**)(char *, char *, uint64_t))(v307 + 32))(v54, v58, v308);
    v122 = v296;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v121, v296, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v123 = v299;
    SiriKitEvent.timestamp.getter();
    v312 = 0;
    v310 = 0u;
    v311 = 0u;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v54, v301, v123, v302, (uint64_t)v306, (uint64_t)v298, v297, 0, (uint64_t)&v310, 0, (uint64_t)v300, v108, (uint64_t)v295, v294, v116, v117, v119, v120, v122,
      0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v123, v304);
    outlined destroy of ReferenceResolutionClientProtocol?(v122, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    goto LABEL_3;
  }
  if (v59 == *MEMORY[0x1E0D9B1D0])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v124 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intent: INIntent, app: App?, launchAppBehavior: LaunchAppBehavior?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
    v125 = *(void **)&v58[v124[12]];
    v300 = *(NSObject **)&v58[v124[16]];
    v306 = &v58[v124[20]];
    v126 = &v58[v124[24]];
    v128 = *(char **)v126;
    v127 = *((_QWORD *)v126 + 1);
    v298 = v128;
    v297 = v127;
    v129 = &v58[v124[28]];
    v130 = *((_QWORD *)v129 + 1);
    v295 = *(char **)v129;
    v131 = (uint64_t *)&v58[v124[32]];
    v133 = *v131;
    v294 = (void (**)(_QWORD, _QWORD, _QWORD))v131[1];
    v132 = (uint64_t)v294;
    v134 = (uint64_t)&v58[v124[36]];
    (*(void (**)(char *, char *, uint64_t))(v307 + 32))(v54, v58, v308);
    v135 = v296;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v134, v296, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v136 = v299;
    SiriKitEvent.timestamp.getter();
    v312 = 0;
    v310 = 0u;
    v311 = 0u;
    v137 = v125;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v54, v301, v136, v302, (uint64_t)v300, 0, 0, 0, (uint64_t)&v310, v125, 0, 0, (uint64_t)v298, v297, v295, v130, v133, v132, v135,
      0);

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v136, v304);
    outlined destroy of ReferenceResolutionClientProtocol?(v135, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v54, v308);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v306, &demangling cache variable for type metadata for LaunchAppBehavior?);
  }
  else if (v59 == *MEMORY[0x1E0D9B1F8])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v142 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, parameterName: String, descriptionCode: Int?, flowActivity: FlowActivity?, launchAppBehavior: LaunchAppBehavior?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
    v143 = *(_QWORD *)&v58[v142[12]];
    v144 = *(void **)&v58[v142[16]];
    v145 = (uint64_t *)&v58[v142[20]];
    v147 = *v145;
    v146 = (char *)v145[1];
    v299 = v147;
    v306 = v146;
    v148 = &v58[v142[24]];
    v149 = *(_QWORD *)v148;
    v150 = v148[8];
    v151 = (uint64_t)&v58[v142[28]];
    v152 = &v58[v142[36]];
    v154 = *(char **)v152;
    v153 = *((_QWORD *)v152 + 1);
    v298 = v154;
    v300 = v153;
    v155 = (uint64_t)&v58[v142[40]];
    (*(void (**)(char *, char *, uint64_t))(v307 + 32))(v49, v58, v308);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v151, (uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v155, v287, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v305 = *(_QWORD *)(v305 + 16);
    SiriKitEvent.timestamp.getter();
    if ((v150 & 1) != 0)
    {
      swift_retain();
      v156 = v144;
      v157 = 0;
      v158 = 0;
    }
    else
    {
      v309[0] = v149;
      lazy protocol witness table accessor for type Int and conformance Int();
      swift_retain();
      v182 = v144;
      v157 = BinaryInteger.description.getter();
      v158 = v183;
    }
    v184 = (uint64_t)&v58[v142[32]];
    v185 = v287;
    v186 = (uint64_t)v288;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v49, v301, (uint64_t)v288, v302, v143, 0, 0, 0, (uint64_t)&v310, v144, 0, 0, v299, v306, v298, v300, v157, v158, v287,
      0);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v186, v304);
    outlined destroy of ReferenceResolutionClientProtocol?(v185, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v49, v308);
    outlined destroy of ReferenceResolutionClientProtocol?(v184, &demangling cache variable for type metadata for LaunchAppBehavior?);
  }
  else if (v59 == *MEMORY[0x1E0D9B208])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v161 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, descriptionCode: Int?, flowActivity: FlowActivity?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
    v162 = *(_QWORD *)&v58[v161[12]];
    v163 = *(void **)&v58[v161[16]];
    v164 = &v58[v161[20]];
    v165 = *(_QWORD *)v164;
    v166 = v164[8];
    v167 = (uint64_t)&v58[v161[24]];
    v168 = (char **)&v58[v161[28]];
    v170 = *v168;
    v169 = v168[1];
    v171 = (uint64_t)&v58[v161[32]];
    (*(void (**)(char *, char *, uint64_t))(v307 + 32))(v284, v58, v308);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v167, (uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v171, v285, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    SiriKitEvent.timestamp.getter();
    if ((v166 & 1) != 0)
    {
      swift_retain();
      v172 = v163;
      v173 = 0;
      v174 = 0;
    }
    else
    {
      v309[0] = v165;
      lazy protocol witness table accessor for type Int and conformance Int();
      swift_retain();
      v200 = v163;
      v173 = BinaryInteger.description.getter();
      v174 = v201;
    }
    v202 = v303;
    v203 = v285;
    v273 = v170;
    v204 = v284;
    v205 = v286;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v284, v301, v286, v302, v162, 0, 0, 0, (uint64_t)&v310, v163, 0, 0, 0, 0, v273, v169, v173, v174, v285,
      0);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v205, v304);
    outlined destroy of ReferenceResolutionClientProtocol?(v203, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v204, v308);
  }
  else if (v59 == *MEMORY[0x1E0D9B1C8])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v187 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, descriptionCode: Int?, flowActivity: FlowActivity?, launchAppBehavior: LaunchAppBehavior?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
    v188 = *(_QWORD *)&v58[v187[12]];
    v189 = *(void **)&v58[v187[16]];
    v190 = &v58[v187[20]];
    v191 = *(_QWORD *)v190;
    v192 = v190[8];
    v193 = (uint64_t)&v58[v187[24]];
    v194 = &v58[v187[32]];
    v195 = *((_QWORD *)v194 + 1);
    v306 = *(char **)v194;
    v196 = (uint64_t)&v58[v187[36]];
    (*(void (**)(char *, char *, uint64_t))(v307 + 32))(v281, v58, v308);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v193, (uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v196, v282, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    SiriKitEvent.timestamp.getter();
    if ((v192 & 1) != 0)
    {
      swift_retain();
      v197 = v189;
      v198 = 0;
      v199 = 0;
    }
    else
    {
      v309[0] = v191;
      lazy protocol witness table accessor for type Int and conformance Int();
      swift_retain();
      v230 = v189;
      v198 = BinaryInteger.description.getter();
      v199 = v231;
    }
    v232 = (uint64_t)&v58[v187[28]];
    v233 = v282;
    v234 = v281;
    v235 = v283;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v281, v301, v283, v302, v188, 0, 0, 0, (uint64_t)&v310, v189, 0, 0, 0, 0, v306, v195, v198, v199, v282,
      0);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v235, v304);
    outlined destroy of ReferenceResolutionClientProtocol?(v233, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v234, v308);
    outlined destroy of ReferenceResolutionClientProtocol?(v232, &demangling cache variable for type metadata for LaunchAppBehavior?);
  }
  else if (v59 == *MEMORY[0x1E0D9B198])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v206 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, chosenItem: Any?, disambiguationItems: [Any]?, domainContext: FLOWSchemaFLOWDomainContext?, flowActivity: FlowActivity?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
    v207 = &v58[v206[12]];
    v306 = *(char **)&v58[v206[16]];
    v209 = *(NSObject **)v207;
    v208 = (char *)*((_QWORD *)v207 + 1);
    v297 = v209;
    v295 = v208;
    v210 = &v58[v206[20]];
    v212 = *(NSObject **)v210;
    v211 = (char *)*((_QWORD *)v210 + 1);
    v300 = v212;
    v298 = v211;
    v213 = v206[24];
    v294 = *(void (***)(_QWORD, _QWORD, _QWORD))&v58[v206[28]];
    v293 = *(char **)&v58[v206[32]];
    v214 = (uint64_t)&v58[v213];
    v215 = (uint64_t)&v58[v206[36]];
    v216 = (uint64_t *)&v58[v206[40]];
    v218 = *v216;
    v217 = (char *)v216[1];
    v292 = v218;
    v291 = v217;
    v219 = &v58[v206[44]];
    v220 = *((_QWORD *)v219 + 1);
    v289 = *(char **)v219;
    v288 = v220;
    v221 = (uint64_t *)&v58[v206[48]];
    v223 = *v221;
    v290 = (char *)v221[1];
    v222 = v290;
    v224 = &v58[v206[52]];
    v225 = *(void (**)(char *, char *, uint64_t))(v307 + 32);
    v275 = v54;
    v225(v54, v58, v308);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v214, (uint64_t)v309, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v215, (uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    v226 = (uint64_t)v224;
    v227 = v296;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v226, v296, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v228 = v299;
    SiriKitEvent.timestamp.getter();
    v274 = v223;
    v229 = v293;
    TaskLoggingService.logTaskStepAndEntityContextTier1(activityType:eventContext:eventTime:task:app:attribute:chosenItem:disambiguationItems:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:)(v54, v301, v228, v302, (uint64_t)v306, (uint64_t)v300, v298, (uint64_t)v309, (uint64_t)v294, v293, (uint64_t)&v310, 0, (uint64_t)v297, (uint64_t)v295, v292, v291, v289, v220, v274,
      (uint64_t)v222,
      v227);
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v228, v304);
    outlined destroy of ReferenceResolutionClientProtocol?(v227, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v309, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v275, v308);
  }
  else if (v59 == *MEMORY[0x1E0D9B1A8])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    LODWORD(v298) = *(_DWORD *)v58;
    v236 = *((_QWORD *)v58 + 1);
    v237 = *((_QWORD *)v58 + 2);
    v300 = *((_QWORD *)v58 + 3);
    v306 = (char *)*((_QWORD *)v58 + 4);
    v307 = v236;
    v238 = (void *)*((_QWORD *)v58 + 6);
    v297 = *((_QWORD *)v58 + 5);
    v240 = *((_QWORD *)v58 + 7);
    v239 = (void *)*((_QWORD *)v58 + 8);
    v241 = *((_QWORD *)v58 + 11);
    v308 = *((_QWORD *)v58 + 10);
    v242 = *((_QWORD *)v58 + 12);
    v243 = *((unsigned int *)v58 + 26);
    v244 = v58[108];
    v305 = *(_QWORD *)(v305 + 16);
    v245 = v299;
    SiriKitEvent.timestamp.getter();
    LOBYTE(v310) = v244;
    specialized TaskLoggingService.logSELFFlowTask(activityType:eventContext:eventTime:task:taskType:app:attribute:domainContext:parameterName:responseId:statusReasonDescription:statusReason:)((signed int)v298, v301, v245, v302, v307, v237, (uint64_t)v300, (uint64_t)v306, (uint64_t)v297, v238, v240, v239, v241, v242, v243 | ((unint64_t)v244 << 32));
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v245, v304);
  }
  else if (v59 == *MEMORY[0x1E0D9B1E0])
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
    v246 = v279;
    v247 = v278;
    v248 = v58;
    v249 = v280;
    (*(void (**)(char *, char *, uint64_t))(v279 + 32))(v278, v248, v280);
    v250 = *(_QWORD **)(v305 + 16);
    v251 = v299;
    SiriKitEvent.timestamp.getter();
    v252 = v250 + 7;
    v253 = v250[10];
    v254 = v250[11];
    __swift_project_boxed_opaque_existential_1(v252, v253);
    (*(void (**)(_QWORD *, uint64_t, char *, _QWORD, _QWORD, uint64_t, uint64_t))(v254 + 16))(v301, v251, v247, *(_QWORD *)(v302 + 16), *(_QWORD *)(v302 + 24), v253, v254);
    (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v251, v304);
    (*(void (**)(char *, uint64_t))(v246 + 8))(v247, v249);
  }
  else
  {
    v256 = v303;
    v255 = v304;
    v257 = v305;
    if (v59 == *MEMORY[0x1E0D9B1C0])
    {
      (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
      v258 = (void *)*((_QWORD *)v58 + 2);
      TaskLoggingService.logDomainTier1Data(eventContext:task:taskType:tierOneFlowEvent:)(v301, v302, *(_QWORD *)v58, *((_QWORD *)v58 + 1), v258);
      swift_bridgeObjectRelease();

    }
    else if (v59 == *MEMORY[0x1E0D9B1B0])
    {
      (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
      v260 = *(_QWORD *)v58;
      v259 = *((_QWORD *)v58 + 1);
      v305 = *(_QWORD *)(v257 + 16);
      v261 = v308;
      (*(void (**)(char *, _QWORD, uint64_t))(v307 + 104))(v276, *MEMORY[0x1E0D9B690], v308);
      SiriKitEvent.timestamp.getter();
      v312 = 0;
      v310 = 0u;
      v311 = 0u;
      v309[0] = v260;
      v309[1] = v259;
      v309[4] = 0x203A746365726944;
      v309[5] = 0xE800000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      v262 = v260;
      v263 = (uint64_t)v259;
      if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v263 = 0xEE00746E65746E49;
        v262 = 0x6465737261706E55;
      }
      v264 = v296;
      ((void (*)(uint64_t, uint64_t, uint64_t, char *))v300[7].isa)(v296, 1, 1, v105);
      v265 = v276;
      v266 = v277;
      TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v276, v301, v277, v302, 0, v260, v259, 0, (uint64_t)&v310, 0, v262, v263, 0, 0, 0, 0, 0x6168436369706F54, 0xEC0000006465676ELL, v264,
        0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v264, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v310, &demangling cache variable for type metadata for FlowActivity?);
      (*(void (**)(uint64_t, uint64_t))(v256 + 8))(v266, v255);
      (*(void (**)(char *, uint64_t))(v307 + 8))(v265, v261);
    }
    else if (v59 == *MEMORY[0x1E0D9B1F0])
    {
      (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
      v267 = *(_QWORD *)v58;
      v268 = *((_QWORD *)v58 + 1);
      v269 = (void *)*((_QWORD *)v58 + 2);
      v270 = SiriKitEvent.machAbsoluteTime.getter();
      TaskLoggingService.logDomainPerfContext(eventContext:eventTime:task:taskType:domainPerfContext:)(v301, v270, v302, v267, v268, v269);
      swift_bridgeObjectRelease();

    }
    else if (v59 == *MEMORY[0x1E0D9B218])
    {
      (*(void (**)(char *, uint64_t))(v56 + 96))(v58, v55);
      v271 = *(void **)v58;
      TaskLoggingService.logLocationAccessPrompt(eventContext:task:promptContext:)((uint64_t)v301, v302, *(void **)v58);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
    }
  }
}

void TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char *a15, NSObject *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  __CFString *v51;
  __CFString *v52;
  unint64_t v53;
  uint64_t v54;
  __CFString *v55;
  __CFString *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  os_log_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  os_log_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[3];
  uint64_t v115;
  uint64_t v116;

  v21 = v20;
  v109 = a6;
  v110 = a7;
  v111 = a4;
  v112 = a19;
  v104 = a17;
  v105 = a18;
  v107 = a14;
  v108 = a3;
  v106 = a13;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  MEMORY[0x1E0C80A78](v26);
  v90 = (uint64_t)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = a11;
  v92 = a10;
  if (a12)
  {
    v28 = a11;
    v29 = a12;
  }
  else if (a10)
  {
    v30 = objc_msgSend(a10, sel_typeName);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v31;

  }
  else
  {
    v29 = 0xE700000000000000;
    v28 = 0x6E776F6E6B6E55;
  }
  v94 = a12;
  swift_bridgeObjectRetain();
  v95 = a1;
  v32 = ActivityType.asSELFTypeAndReason(_:)(v112);
  v34 = v33;
  v35 = SiriKitEventContext.resultCandidateId.getter();
  if (v36)
    v37 = v35;
  else
    v37 = 13101;
  v38 = a2;
  if (v36)
    v39 = v36;
  else
    v39 = 0xE200000000000000;
  v40 = v38[10];
  v41 = v38[11];
  v103 = v38;
  v42 = *(_QWORD *)(v111 + 16);
  v43 = *(_QWORD *)(v111 + 24);
  LOBYTE(v114[0]) = v34 & 1;
  *((_QWORD *)&v44 + 1) = v34 & 1;
  *(_QWORD *)&v44 = v32;
  v98 = v43;
  v99 = v42;
  v100 = v41;
  v101 = v40;
  v45 = TaskLoggingService.createFlowTaskSELFClientEvent(activityType:eventTime:resultCandidateId:taskType:app:appResolutionType:attribute:domainContext:executionRequestId:parameterName:platformContext:statusReason:statusReasonDescription:taskId:)(v32, v108, v37, v39, v28, v29, a5, 0x100000000, v109, (uint64_t)v110, a8, v40, v41, v106, v107, a20, v44 >> 32, v104, v105,
          v42,
          v43);
  swift_bridgeObjectRelease();
  v97 = a5;
  v102 = v29;
  if (v45)
  {
    v89 = v45;
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, (os_log_type_t)v48))
    {
      LODWORD(v87) = v48;
      v49 = swift_slowAlloc();
      v86 = swift_slowAlloc();
      v114[0] = v86;
      *(_DWORD *)v49 = 136315906;
      v88 = v47;
      if (v32 > 0xCF)
      {
        v51 = CFSTR("FLOWSTATETYPE_UNKNOWN");
        v52 = CFSTR("FLOWSTATETYPE_UNKNOWN");
      }
      else
      {
        v50 = (int)v32;
        v51 = off_1E6857858[v50];
        v52 = off_1E6857ED8[v50];
      }
      v53 = v98;
      v55 = v51;
      v56 = v52;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v59 = v58;

      v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      swift_bridgeObjectRetain();
      v60 = v99;
      v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v53, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 22) = 2080;
      v61 = v102;
      swift_bridgeObjectRetain();
      v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v61, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v49 + 32) = 2080;
      v62 = v103[12];
      v63 = v103[13];
      swift_bridgeObjectRetain();
      v64 = v62;
      v54 = v60;
      v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v63, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v65 = v88;
      _os_log_impl(&dword_1B4BE6000, v88, (os_log_type_t)v87, "#TaskLoggingService SELF Log - logging task step: %s for taskId: %s, taskType: %s, interactionId:%s", (uint8_t *)v49, 0x2Au);
      v66 = v86;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v66, -1, -1);
      MEMORY[0x1B5E44758](v49, -1, -1);

      a5 = v97;
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v53 = v98;
      v54 = v99;
    }
    v67 = v89;
    (*(void (**)(void *))(v21 + 96))(v89);
    TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(v101, v100, v54, v53);

  }
  v91 = v28;
  v89 = (void *)a9;
  outlined init with copy of ReferenceResolutionClientProtocol(v21 + 16, (uint64_t)v114);
  v69 = v115;
  v68 = v116;
  v86 = (uint64_t)__swift_project_boxed_opaque_existential_1(v114, v115);
  v96 = v21;
  if (a5)
  {
    v70 = App.appIdentifier.getter();
    v72 = v71;
  }
  else
  {
    v70 = 0;
    v72 = 0;
  }
  v73 = (uint64_t)v107;
  v88 = a16;
  v87 = a15;
  v74 = v90;
  outlined init with copy of ReferenceResolutionClientProtocol?(v112, v90, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v75 = type metadata accessor for SiriKitReliabilityCodes();
  v76 = *(_QWORD *)(v75 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v77 = 0;
    v78 = 0;
  }
  else
  {
    v77 = SiriKitReliabilityCodes.rawValue.getter();
    v78 = v79;
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
  }
  v80 = *(void (**)(char *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8);
  v84 = v69;
  v85 = v68;
  v81 = v106;
  v82 = v95;
  v83 = v108;
  v80(v95, v108, v91, v102, v70, v72, v101, v100, v106, v73, v77, v78, v99, v98, v84, v85, v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
  TaskLoggingService.logAndDonateClassicFlowTask(activityType:eventContext:eventTime:task:app:attribute:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:shouldDonateToCurare:appResolutionName:flowMetadata:)(v82, v103, v83, v111, v97, v109, v110, (uint64_t)v89, v92, v93, v94, v81, v73, v87, (uint64_t)v88, v104, v105, v112, 1u,
    0,
    0,
    0);
}

uint64_t ActivityType.asSELFTypeAndReason(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = v1;
  v44 = a1;
  v3 = type metadata accessor for SiriKitReliabilityCodes();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v38 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SiriKitReliabilityCodes?, SiriKitReliabilityCodes?));
  MEMORY[0x1E0C80A78](v42);
  v43 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v40 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v39 = (uint64_t)&v38 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v38 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v38 - v15;
  v17 = type metadata accessor for ActivityType();
  v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B6F0];
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0D9B6C0], v17);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ActivityType and conformance ActivityType, v18, MEMORY[0x1E0D9B700]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v41 = v2;
  if (v47 == v45 && v48 == v46)
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v17);
    v22 = v44;
    outlined init with copy of ReferenceResolutionClientProtocol?(v44, (uint64_t)v16, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v17);
    v22 = v44;
    outlined init with copy of ReferenceResolutionClientProtocol?(v44, (uint64_t)v16, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    if ((v23 & 1) == 0)
    {
      v28 = &demangling cache variable for type metadata for SiriKitReliabilityCodes?;
      v29 = (uint64_t)v16;
      goto LABEL_12;
    }
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v14, *MEMORY[0x1E0D9B300], v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v14, 0, 1, v3);
  v24 = v43;
  v25 = v43 + *(int *)(v42 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, v43, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, v25, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v26(v24, 1, v3) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    if (v26(v25, 1, v3) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
LABEL_17:
      v32 = 0x2B00000000;
      v30 = 27;
      return v32 | v30;
    }
    goto LABEL_10;
  }
  v27 = v39;
  outlined init with copy of ReferenceResolutionClientProtocol?(v24, v39, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if (v26(v25, 1, v3) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v27, v3);
LABEL_10:
    v28 = &demangling cache variable for type metadata for (SiriKitReliabilityCodes?, SiriKitReliabilityCodes?);
    v29 = v24;
LABEL_12:
    outlined destroy of ReferenceResolutionClientProtocol?(v29, v28);
    goto LABEL_13;
  }
  v34 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v38, v25, v3);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitReliabilityCodes and conformance SiriKitReliabilityCodes, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B330], MEMORY[0x1E0D9B340]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v4 + 8);
  v36(v34, v3);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v36((char *)v27, v3);
  outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if ((v35 & 1) != 0)
    goto LABEL_17;
LABEL_13:
  v30 = ActivityType.flowStateType.getter();
  v31 = v40;
  outlined init with copy of ReferenceResolutionClientProtocol?(v22, v40, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v31, 1, v3) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v32 = 0;
  }
  else
  {
    v33 = SiriKitReliabilityCodes.flowStatusReason.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v31, v3);
    v32 = v33 << 32;
  }
  return v32 | v30;
}

uint64_t SiriKitEventContext.resultCandidateId.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    v3 = one-time initialization token for instrumentation;
    swift_bridgeObjectRetain();
    if (v3 != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v18 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v9 = "SiriKitEventContext: Vending overriden rcId: %s";
LABEL_6:
      _os_log_impl(&dword_1B4BE6000, v5, v6, v9, v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

      return v2;
    }
    goto LABEL_13;
  }
  type metadata accessor for SiriEnvironment();
  if (static SiriEnvironment.forCurrentTask.getter())
  {
    SiriEnvironment.currentRequest.getter();
    swift_release();
    v2 = CurrentRequest.resultCandidateId.getter();
    v11 = v10;
    swift_release();
    if (v11)
    {
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.instrumentation);
      swift_bridgeObjectRetain_n();
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc();
        v8 = swift_slowAlloc();
        v18 = v8;
        *(_DWORD *)v7 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v11, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v9 = "SiriKitEventContext: Vending rcId from SiriEnvironment's current flow invocation request: %s";
        goto LABEL_6;
      }
LABEL_13:

      swift_bridgeObjectRelease_n();
      return v2;
    }
  }
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.instrumentation);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1B4BE6000, v14, v15, "SiriKitEventContext: No rcId found in SiriEnvironment. This event might be getting sent from a detached Task or dispatch queue, which loses SiriEnvironment context, and is a bug in the code which is emitting this event.", v16, 2u);
    MEMORY[0x1B5E44758](v16, -1, -1);
  }

  return 0;
}

void *TaskLoggingService.createFlowTaskSELFClientEvent(activityType:eventTime:resultCandidateId:taskType:app:appResolutionType:attribute:domainContext:executionRequestId:parameterName:platformContext:statusReason:statusReasonDescription:taskId:)(unsigned int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, unint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  uint64_t v21;
  unint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  id v72;
  Class isa;
  double v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v84;
  void *v85;
  id v87;
  uint64_t v89[3];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v27 = a21;
  v28 = a13;
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99638]), sel_init);
  if (!v29)
    goto LABEL_18;
  v30 = v29;
  v87 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D996B0]), sel_init);
  if (!v87)
  {

LABEL_18:
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc();
      v58 = swift_slowAlloc();
      v89[0] = v58;
      *(_DWORD *)v57 = 136315650;
      swift_bridgeObjectRetain();
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 12) = 2080;
      swift_bridgeObjectRetain();
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a20, a21, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 22) = 2080;
      swift_bridgeObjectRetain();
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a12, a13, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v55, v56, "#TaskLoggingService SELF Log - unable to instantiate SELF schema, not logging Task step for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v57, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v58, -1, -1);
      MEMORY[0x1B5E44758](v57, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  v31 = TaskLoggingService.constructMetaData(resultCandidateId:executionRequestId:taskId:)(a3, a4, a12, a13, a20, a21);
  if (!v31)
  {
    if (one-time initialization token for instrumentation == -1)
    {
LABEL_25:
      v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.instrumentation);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = swift_slowAlloc();
        v63 = swift_slowAlloc();
        v89[0] = v63;
        *(_DWORD *)v62 = 136315650;
        swift_bridgeObjectRetain();
        v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v62 + 12) = 2080;
        swift_bridgeObjectRetain();
        v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a20, v27, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v62 + 22) = 2080;
        swift_bridgeObjectRetain();
        v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a12, v28, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v60, v61, "#TaskLoggingService SELF Log - unable to construct metaData, not logging Task step for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v62, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v63, -1, -1);
        MEMORY[0x1B5E44758](v62, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

      }
      return 0;
    }
LABEL_59:
    swift_once();
    goto LABEL_25;
  }
  v85 = v31;
  v32 = a19;
  v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99630]), sel_init);
  if (v33)
  {
    v34 = v33;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v21 + 144))(v89, a7);
    v36 = v90;
    v35 = v91;
    __swift_project_boxed_opaque_existential_1(v89, v90);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v36, v35);
    if (v38)
    {
      v39 = v38;
    }
    else
    {
      v37 = 0x6C7070615F746F6ELL;
      v39 = 0xEE00656C62616369;
    }
    v40 = (void *)MEMORY[0x1B5E432E8](v37, v39);
    swift_bridgeObjectRelease();
    objc_msgSend(v34, sel_setBundleId_, v40);

    v41 = v90;
    v42 = v91;
    __swift_project_boxed_opaque_existential_1(v89, v90);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      v43 = 0x6C7070615F746F6ELL;
      v45 = 0xEE00656C62616369;
    }
    v46 = (void *)MEMORY[0x1B5E432E8](v43, v45);
    swift_bridgeObjectRelease();
    objc_msgSend(v34, sel_setAppVersion_, v46);

    if ((a8 & 0x100000000) == 0)
      objc_msgSend(v34, sel_setAppResolutionType_, a8);
    objc_msgSend(v87, sel_setAppContext_, v34);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    v32 = a19;
  }
  v47 = a11;
  v28 = specialized static SiriKitMetricsUtils.formulateSimplifiedStatusDescription(statusDescription:)(a18, v32);
  v49 = v48;
  v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D996A0]), sel_init);
  if (v50)
  {
    v51 = v50;
    v84 = v28;
    v52 = (void *)MEMORY[0x1B5E432E8](a5, a6);
    objc_msgSend(v51, sel_setCurrentTaskName_, v52);

    if (a10)
      v53 = (void *)MEMORY[0x1B5E432E8](a9, a10);
    else
      v53 = 0;
    v28 = a1;
    v66 = a15;
    objc_msgSend(v51, sel_setCurrentTaskType_, v53);

    objc_msgSend(v51, sel_setFlowStateType_, a1);
    v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D996A8]), sel_init);
    v65 = v87;
    if (v67)
    {
      v68 = v67;
      if ((a17 & 0x100000000) != 0)
        v69 = 0;
      else
        v69 = a17;
      objc_msgSend(v67, sel_setStatusReason_, v69);
      objc_msgSend(v51, sel_setFlowStateReason_, v68);

    }
    if (a15)
      v66 = (void *)MEMORY[0x1B5E432E8](a14, a15);
    v27 = a21;
    v64 = a13;
    objc_msgSend(v51, sel_setResolvedSlotName_, v66);

    if (v49)
    {
      v70 = (void *)MEMORY[0x1B5E432E8](v84, v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      v70 = 0;
    }
    objc_msgSend(v51, sel_setFlowStateReasonDescription_, v70);

    objc_msgSend(v87, sel_setFlowState_, v51);
    v47 = a11;
    if (a11)
      goto LABEL_43;
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = a21;
    v64 = a13;
    v65 = v87;
    if (a11)
    {
LABEL_43:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_1B4EEBC90;
      *(_QWORD *)(v71 + 32) = v47;
      v89[0] = v71;
      specialized Array._endMutation()();
      v28 = v89[0];
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for FLOWSchemaFLOWDomainContext);
      v72 = v47;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v65, sel_setDomainContexts_, isa);

    }
  }
  Date.timeIntervalSince1970.getter();
  if ((~*(_QWORD *)&v74 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_57;
  }
  if (v74 <= -9.22337204e18)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v74 >= 9.22337204e18)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  objc_msgSend(v65, sel_setTimestampMs_, (uint64_t)v74);
  objc_msgSend(v65, sel_setSequenceNum_, 0);
  if (a16)
  {
    v75 = one-time initialization token for instrumentation;
    v76 = a16;
    if (v75 != -1)
      swift_once();
    v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = swift_slowAlloc();
      v81 = swift_slowAlloc();
      v89[0] = v81;
      *(_DWORD *)v80 = 136315650;
      swift_bridgeObjectRetain();
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v80 + 12) = 2080;
      swift_bridgeObjectRetain();
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a20, v27, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v80 + 22) = 2080;
      swift_bridgeObjectRetain();
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a12, v64, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v78, v79, "#TaskLoggingService Added platformContext for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v80, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v81, -1, -1);
      v82 = v80;
      v65 = v87;
      MEMORY[0x1B5E44758](v82, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    objc_msgSend(v65, sel_setPlatformRelatedContext_, v76);

  }
  objc_msgSend(v30, sel_setFlowStep_, v65);
  objc_msgSend(v30, sel_setEventMetadata_, v85);

  return v30;
}

void *TaskLoggingService.constructMetaData(resultCandidateId:executionRequestId:taskId:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  id v36;
  void *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  id v50;
  Class isa;
  id v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Class v64;
  id v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  Class v82;
  char **v83;
  id v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void (*v93)(char *, uint64_t);
  os_log_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  id v106;
  Class v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char **v112;
  void (*v113)(char *, uint64_t);
  os_log_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(char *, uint64_t, uint64_t);
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135[2];

  v131 = a6;
  v132 = a5;
  v133 = a4;
  v130 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v123 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v122 = (uint64_t)&v115 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v128 = (uint64_t)&v115 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v115 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v115 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v115 - v21;
  v23 = type metadata accessor for UUID();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v120 = (char *)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v119 = (char *)&v115 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v125 = (char *)&v115 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v115 - v32;
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v115 - v34;
  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99670]), sel_init);
  if (!v36)
  {
    v39 = a1;
    v40 = a2;
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.instrumentation);
    v42 = v131;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = v39;
      v46 = swift_slowAlloc();
      v47 = swift_slowAlloc();
      v135[0] = v47;
      *(_DWORD *)v46 = 136315650;
      swift_bridgeObjectRetain();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v40, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 12) = 2080;
      swift_bridgeObjectRetain();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v42, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 22) = 2080;
      v48 = v133;
      swift_bridgeObjectRetain();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v48, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v43, v44, "#TaskLoggingService SELF Log - unable to instantiate SELF schema, not logging Task step for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v46, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v47, -1, -1);
      MEMORY[0x1B5E44758](v46, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  v37 = v36;
  v124 = a1;
  v127 = a2;
  UUID.init(uuidString:)();
  v129 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v38 = v129(v22, 1, v23);
  v121 = v33;
  if (v38 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v35, v22, v23);
    v49 = v20;
    v50 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v52 = objc_msgSend(v50, sel_initWithNSUUID_, isa);

    objc_msgSend(v37, sel_setTrpId_, v52);
    v20 = v49;
    v33 = v121;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v35, v23);
  }
  v53 = v124;
  v54 = (void *)MEMORY[0x1B5E432E8](v124, v127);
  objc_msgSend(v37, sel_setResultCandidateId_, v54);

  v55 = v131;
  UUID.init(uuidString:)();
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v129(v17, 1, v23) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = v20;
      v61 = swift_slowAlloc();
      v135[0] = v61;
      *(_DWORD *)v59 = 136315138;
      swift_bridgeObjectRetain();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v55, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v57, v58, "#TaskLoggingService SELF Log - current taskId: %s is not a valid UUID String, cannot emit SELF message", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v61, -1, -1);
      MEMORY[0x1B5E44758](v59, -1, -1);

      v62 = (uint64_t)v60;
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v62 = (uint64_t)v20;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v62, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    return 0;
  }
  v117 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  v117(v33, v17, v23);
  v63 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
  v64 = UUID._bridgeToObjectiveC()().super.isa;
  v65 = objc_msgSend(v63, sel_initWithNSUUID_, v64);

  objc_msgSend(v37, sel_setTaskId_, v65);
  v66 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A510]), sel_init);
  if (v66)
  {
    v67 = v66;
    objc_msgSend(v66, sel_setMajor_, 0);
    objc_msgSend(v67, sel_setMinor_, 5);
    objc_msgSend(v37, sel_setVersion_, v67);

  }
  v68 = v128;
  TaskLoggingService.createFlowId(executionRequestId:)(v128);
  v69 = v68;
  v70 = v122;
  outlined init with copy of ReferenceResolutionClientProtocol?(v69, v122, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v71 = v129((char *)v70, 1, v23);
  v72 = v125;
  v118 = v20;
  if (v71 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v74 = v127;
    swift_bridgeObjectRetain_n();
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.debug.getter();
    v77 = v76;
    if (os_log_type_enabled(v75, v76))
    {
      v78 = swift_slowAlloc();
      LODWORD(v122) = v77;
      v79 = v78;
      v125 = (char *)swift_slowAlloc();
      v135[0] = (uint64_t)v125;
      *(_DWORD *)v79 = 136315394;
      swift_bridgeObjectRetain();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v55, v135);
      v132 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v79 + 12) = 2080;
      swift_bridgeObjectRetain();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v74, v135);
      v24 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v75, (os_log_type_t)v122, "#TaskLoggingService SELF Log - metadata has flowId: nil, taskId: %s, rcId: %s", (uint8_t *)v79, 0x16u);
      v80 = v125;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v80, -1, -1);
      MEMORY[0x1B5E44758](v79, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    v117(v125, (char *)v70, v23);
    v81 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
    v82 = UUID._bridgeToObjectiveC()().super.isa;
    v83 = &selRef_reason;
    v84 = objc_msgSend(v81, sel_initWithNSUUID_, v82);

    objc_msgSend(v37, sel_setFlowId_, v84);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Logger.instrumentation);
    v86 = v119;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v119, v72, v23);
    swift_bridgeObjectRetain_n();
    v87 = v127;
    swift_bridgeObjectRetain_n();
    v88 = Logger.logObject.getter();
    v89 = static os_log_type_t.debug.getter();
    LODWORD(v122) = v89;
    if (!os_log_type_enabled(v88, v89))
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      v96 = v86;
      v97 = *(void (**)(char *, uint64_t))(v24 + 8);
      v97(v96, v23);
      v97(v72, v23);
      goto LABEL_32;
    }
    v90 = swift_slowAlloc();
    v116 = swift_slowAlloc();
    v135[0] = v116;
    *(_DWORD *)v90 = 136315650;
    v115 = v88;
    v91 = UUID.uuidString.getter();
    v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v93 = *(void (**)(char *, uint64_t))(v24 + 8);
    v93(v86, v23);
    *(_WORD *)(v90 + 12) = 2080;
    swift_bridgeObjectRetain();
    v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v55, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v90 + 22) = 2080;
    swift_bridgeObjectRetain();
    v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v87, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v94 = v115;
    _os_log_impl(&dword_1B4BE6000, v115, (os_log_type_t)v122, "#TaskLoggingService SELF Log - metadata has flowId: %s, taskId: %s, rcId: %s", (uint8_t *)v90, 0x20u);
    v95 = v116;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v95, -1, -1);
    MEMORY[0x1B5E44758](v90, -1, -1);

    v93(v125, v23);
  }
  v83 = &selRef_reason;
LABEL_32:
  v98 = (uint64_t)v123;
  UUID.init(uuidString:)();
  if (v129((char *)v98, 1, v23) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v98, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v99 = type metadata accessor for Logger();
    __swift_project_value_buffer(v99, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v100 = Logger.logObject.getter();
    v101 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v100, v101))
    {
      v102 = (uint8_t *)swift_slowAlloc();
      v103 = swift_slowAlloc();
      v135[0] = v103;
      *(_DWORD *)v102 = 136315138;
      v104 = v133;
      swift_bridgeObjectRetain();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v104, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v100, v101, "#TaskLoggingService: invalid UUID for executionRequestId %s", v102, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v103, -1, -1);
      MEMORY[0x1B5E44758](v102, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    outlined destroy of ReferenceResolutionClientProtocol?(v128, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v121, v23);
  }
  else
  {
    v105 = v120;
    v117(v120, (char *)v98, v23);
    v106 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
    v107 = UUID._bridgeToObjectiveC()().super.isa;
    v108 = objc_msgSend(v106, v83[45], v107);

    v109 = v126[24];
    v110 = v126[25];
    __swift_project_boxed_opaque_existential_1(v126 + 21, v109);
    v111 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 16))(v109, v110);
    v112 = &selRef_setSubRequestId_;
    if ((v111 & 1) == 0)
      v112 = &selRef_setRequestId_;
    objc_msgSend(v37, *v112, v108);

    v113 = *(void (**)(char *, uint64_t))(v24 + 8);
    v113(v105, v23);
    outlined destroy of ReferenceResolutionClientProtocol?(v128, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v113(v121, v23);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v118, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return v37;
}

uint64_t TaskLoggingService.createFlowId(executionRequestId:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "#TaskLoggingService SELF Log - invalid executionRequestId string, cannot derive flowId form it", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    (*(void (**)(char *))(v1 + 128))(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t protocol witness for AppInformationProvider.resolveAppBundleId.getter in conformance AppInformationResolver()
{
  return dispatch thunk of AppInformationResolver.resolveAppBundleId.getter();
}

uint64_t protocol witness for AppInformationProvider.resolveAppVersion.getter in conformance AppInformationResolver()
{
  return dispatch thunk of AppInformationResolver.resolveAppVersion.getter();
}

uint64_t specialized static SiriKitMetricsUtils.formulateSimplifiedStatusDescription(statusDescription:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if ((a1 || a2 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v27 = 0x6573726170;
      v28 = 0xE500000000000000;
      v26[0] = a1;
      v26[1] = a2;
      v7 = type metadata accessor for Locale();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol.range<A>(of:options:range:locale:)();
      v9 = v8;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Locale?);
      if ((v9 & 1) != 0)
      {
        if (String.count.getter() <= 250)
          return a1;
        if (one-time initialization token for instrumentation != -1)
          swift_once();
        v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
        v15 = Logger.logObject.getter();
        v16 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v17 = 134217984;
          v27 = 250;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B4BE6000, v15, v16, "#SiriKitMetricsUtils - truncating string at char side %ld", v17, 0xCu);
          MEMORY[0x1B5E44758](v17, -1, -1);
        }

        String.index(_:offsetBy:)();
      }
      else
      {
        if (one-time initialization token for instrumentation != -1)
          swift_once();
        v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
        v11 = Logger.logObject.getter();
        v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v13 = 0;
          _os_log_impl(&dword_1B4BE6000, v11, v12, "#SiriKitMetricsUtils - truncating string at parse", v13, 2u);
          MEMORY[0x1B5E44758](v13, -1, -1);
        }

      }
      v18 = String.subscript.getter();
      v20 = v19;
      v22 = v21;
      v24 = v23;
      swift_bridgeObjectRelease();
      a1 = MEMORY[0x1B5E4339C](v18, v20, v22, v24);
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRetain();
  }
  return a1;
}

void TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  Class v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  Class v63;
  id v64;
  id v65;
  uint64_t v66;
  NSObject *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  int v77;
  unsigned int (*isa)(char *, uint64_t, uint64_t);
  id v79;
  void (*v80)(char *, char *, uint64_t);
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;

  v87 = a3;
  v7 = type metadata accessor for UUID();
  v89 = *(NSObject **)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v86 = (char *)&v76 - v12;
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v76 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v76 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v76 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v76 - v27;
  MEMORY[0x1E0C80A78](v26);
  if (!a4)
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.instrumentation);
    v89 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v89, v39))
      goto LABEL_17;
    v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v40 = 0;
    v41 = "#TaskLoggingService SELF Log - current taskId is not set, cannot emit request link info";
    goto LABEL_16;
  }
  if (!a2)
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.instrumentation);
    v89 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v89, v39))
      goto LABEL_17;
    v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v40 = 0;
    v41 = "#TaskLoggingService SELF Log - current executionRequestId is not set, cannot emit request link info";
LABEL_16:
    _os_log_impl(&dword_1B4BE6000, v89, v39, v41, v40, 2u);
    MEMORY[0x1B5E44758](v40, -1, -1);
LABEL_17:

    return;
  }
  v83 = v7;
  v84 = (uint64_t)&v76 - v29;
  v85 = a1;
  v80 = v30;
  v31 = objc_allocWithZone(MEMORY[0x1E0D9A480]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = objc_msgSend(v31, sel_init);
  if (v32)
  {
    v82 = v32;
    v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A490]), sel_init);
    if (v33)
    {
      v81 = v33;
      v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A490]), sel_init);
      if (v34)
      {
        v79 = v34;
        objc_msgSend(v81, sel_setComponent_, 3);
        v35 = v84;
        TaskLoggingService.createFlowId(executionRequestId:)(v84);
        outlined init with copy of ReferenceResolutionClientProtocol?(v35, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v36 = v89;
        v37 = v83;
        isa = (unsigned int (*)(char *, uint64_t, uint64_t))v89[6].isa;
        if (isa(v28, 1, v83) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v36[4].isa)(v14, v28, v37);
          v49 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
          v50 = UUID._bridgeToObjectiveC()().super.isa;
          v51 = objc_msgSend(v49, sel_initWithNSUUID_, v50);

          objc_msgSend(v81, sel_setUuid_, v51);
          ((void (*)(char *, uint64_t))v89[1].isa)(v14, v37);
        }
        v52 = v37;
        v53 = (uint64_t)v80;
        UUID.init(uuidString:)();
        outlined init with copy of ReferenceResolutionClientProtocol?(v53, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if (isa(v24, 1, v52) == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if (one-time initialization token for instrumentation != -1)
            swift_once();
          v54 = type metadata accessor for Logger();
          __swift_project_value_buffer(v54, (uint64_t)static Logger.instrumentation);
          v55 = Logger.logObject.getter();
          v56 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v55, v56))
          {
            v57 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v57 = 0;
            _os_log_impl(&dword_1B4BE6000, v55, v56, "#TaskLoggingService SELF Log - current executionRequestId is not a valid UUID String, cannot emit request link info", v57, 2u);
            MEMORY[0x1B5E44758](v57, -1, -1);
          }

        }
        else
        {
          v80 = (void (*)(char *, char *, uint64_t))v89[4].isa;
          v80(v86, v24, v52);
          v58 = *(_QWORD *)(v88 + 192);
          v59 = *(_QWORD *)(v88 + 200);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v88 + 168), v58);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(v59 + 16))(v58, v59) & 1) != 0)
            v60 = 43;
          else
            v60 = 1;
          v61 = v79;
          objc_msgSend(v79, sel_setComponent_, v60);
          v62 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
          v63 = UUID._bridgeToObjectiveC()().super.isa;
          v64 = objc_msgSend(v62, sel_initWithNSUUID_, v63);

          objc_msgSend(v61, sel_setUuid_, v64);
          v65 = v82;
          objc_msgSend(v82, sel_setSource_, v81);
          objc_msgSend(v65, sel_setTarget_, v61);
          if (one-time initialization token for instrumentation != -1)
            swift_once();
          v66 = type metadata accessor for Logger();
          __swift_project_value_buffer(v66, (uint64_t)static Logger.instrumentation);
          outlined init with copy of ReferenceResolutionClientProtocol?(v84, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v67 = Logger.logObject.getter();
          v68 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v67, (os_log_type_t)v68))
          {
            v77 = v68;
            v69 = swift_slowAlloc();
            v76 = swift_slowAlloc();
            v91 = v76;
            *(_DWORD *)v69 = 136315650;
            swift_bridgeObjectRetain();
            v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, a4, &v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v69 + 12) = 2080;
            outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            v70 = v83;
            if (isa(v18, 1, v83) == 1)
            {
              v71 = 0xE300000000000000;
              v72 = 7104878;
            }
            else
            {
              v80(v10, v18, v70);
              v72 = UUID.uuidString.getter();
              v71 = v73;
              ((void (*)(char *, uint64_t))v89[1].isa)(v10, v70);
            }
            v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v71, &v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            *(_WORD *)(v69 + 22) = 2080;
            swift_bridgeObjectRetain();
            v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, a2, &v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B4BE6000, v67, (os_log_type_t)v77, "#TaskLoggingService SELF Log - logging request link for taskId: %s, flowId:%s, executionRequestId: %s", (uint8_t *)v69, 0x20u);
            v74 = v76;
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v74, -1, -1);
            MEMORY[0x1B5E44758](v69, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n();
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);

            swift_bridgeObjectRelease_n();
          }
          v75 = v82;
          (*(void (**)(id))(v88 + 96))(v82);

          ((void (*)(char *, uint64_t))v89[1].isa)(v86, v83);
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v53, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of ReferenceResolutionClientProtocol?(v84, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        return;
      }

      v43 = v81;
    }
    else
    {
      v43 = v82;
    }

  }
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = swift_slowAlloc();
    v48 = swift_slowAlloc();
    v91 = v48;
    *(_DWORD *)v47 = 136315394;
    swift_bridgeObjectRetain();
    v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, a4, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v47 + 12) = 2080;
    swift_bridgeObjectRetain();
    v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, a2, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v45, v46, "#TaskLoggingService SELF Log - unable to create request link info for SELF for taskId: %s, executionRequestId: %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v48, -1, -1);
    MEMORY[0x1B5E44758](v47, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t protocol witness for BiomeDonator.donateSiriExecutionTaskStep(activityType:eventTime:intentTypeName:appBundleId:requestId:slotName:statusReason:taskId:) in conformance SiriKitBiomeDonator(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, NSObject *a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14)
{
  return SiriKitBiomeDonator.donateSiriExecutionTaskStep(activityType:eventTime:intentTypeName:appBundleId:requestId:slotName:statusReason:taskId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t SiriKitBiomeDonator.donateSiriExecutionTaskStep(activityType:eventTime:intentTypeName:appBundleId:requestId:slotName:statusReason:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, NSObject *a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  char *v59;
  uint64_t v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[4];

  v72 = a8;
  v70 = a7;
  v71 = a6;
  v68 = a2;
  v69 = a5;
  v78 = a13;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation.YieldResult);
  v74 = *(_QWORD *)(v17 - 8);
  v75 = v17;
  MEMORY[0x1E0C80A78](v17);
  v73 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ActivityType();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v76 = a11;
  v77 = a3;
  v23 = a9;
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v19);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  LODWORD(v65) = v26;
  v27 = os_log_type_enabled(v25, v26);
  v67 = a4;
  if (v27)
  {
    v28 = swift_slowAlloc();
    v64 = a1;
    v29 = v28;
    v63 = swift_slowAlloc();
    v80[0] = v63;
    *(_DWORD *)v29 = 136316162;
    v62 = v25;
    if (a14)
      v30 = v78;
    else
      v30 = 0x3E6C696E3CLL;
    v66 = a9;
    if (a14)
      v31 = a14;
    else
      v31 = 0xE500000000000000;
    v61 = v19;
    swift_bridgeObjectRetain();
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, a4, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32 = a12;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 22) = 2080;
    v33 = ActivityType.rawValue.getter();
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v61);
    *(_WORD *)(v29 + 32) = 2080;
    if (a12)
      v35 = v76;
    else
      v35 = 0x3E6C696E3CLL;
    if (a12)
      v36 = a12;
    else
      v36 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 42) = 2080;
    if (a10)
      v37 = v66;
    else
      v37 = 0x3E6C696E3CLL;
    if (a10)
      v38 = (unint64_t)a10;
    else
      v38 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v39 = v37;
    v23 = v66;
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v40 = v62;
    _os_log_impl(&dword_1B4BE6000, v62, (os_log_type_t)v65, "#SiriKitBiomeDonator - donating execution event to BIOME for taskId: %s, taskType: %s, stepType: %s for statusReason:%s, with slotName: %s", (uint8_t *)v29, 0x34u);
    v41 = v63;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v41, -1, -1);
    MEMORY[0x1B5E44758](v29, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v32 = a12;
  }
  v42 = v76;
  Date.timeIntervalSinceReferenceDate.getter();
  v44 = v43;
  v45 = 1701736302;
  v46 = v78;
  if (!a14)
    v46 = 1701736302;
  v76 = v46;
  v47 = 0xE400000000000000;
  if (a14)
    v48 = a14;
  else
    v48 = 0xE400000000000000;
  v68 = v48;
  swift_bridgeObjectRetain();
  v49 = ActivityType.executionTaskStepType.getter();
  if (v32)
    v50 = v42;
  else
    v50 = 1701736302;
  v65 = v50;
  v66 = v49;
  if (v32)
    v51 = v32;
  else
    v51 = 0xE400000000000000;
  v64 = v51;
  if (a10)
    v52 = v23;
  else
    v52 = 1701736302;
  v63 = v52;
  if (a10)
    v53 = a10;
  else
    v53 = 0xE400000000000000;
  v62 = v53;
  if (v71)
    v54 = v69;
  else
    v54 = 1701736302;
  if (v71)
    v55 = v71;
  else
    v55 = 0xE400000000000000;
  if (v72)
  {
    v45 = v70;
    v47 = v72;
  }
  v70 = type metadata accessor for BMSiriExecutionEvent();
  v56 = v67;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = BMSiriExecutionEvent.__allocating_init(taskID:taskStep:statusReason:slotValue:intentName:appBundleId:interactionId:absoluteTimestamp:)(v76, v68, v66, v65, v64, v63, (uint64_t)v62, v77, v44, v56, v54, v55, v45, v47);
  v80[0] = (uint64_t)v57;
  v80[1] = v78;
  v80[2] = a14;
  swift_bridgeObjectRetain();
  v58 = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  v59 = v73;
  AsyncStream.Continuation.yield(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v59, v75);
}

unint64_t type metadata accessor for BMSiriExecutionEvent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BMSiriExecutionEvent;
  if (!lazy cache variable for type metadata for BMSiriExecutionEvent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMSiriExecutionEvent);
  }
  return result;
}

id BMSiriExecutionEvent.__allocating_init(taskID:taskStep:statusReason:slotValue:intentName:appBundleId:interactionId:absoluteTimestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v30;

  v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v22 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  swift_bridgeObjectRelease();
  v23 = (void *)MEMORY[0x1B5E432E8](a4, a5);
  swift_bridgeObjectRelease();
  v24 = (void *)MEMORY[0x1B5E432E8](a6, a7);
  swift_bridgeObjectRelease();
  v25 = (void *)MEMORY[0x1B5E432E8](a8, a10);
  swift_bridgeObjectRelease();
  v26 = (void *)MEMORY[0x1B5E432E8](a11, a12);
  swift_bridgeObjectRelease();
  v27 = (void *)MEMORY[0x1B5E432E8](a13, a14);
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v30, sel_initWithTaskID_taskStep_statusReason_slotValue_intentName_appBundleId_interactionId_absoluteTimestamp_, v22, a3, v23, v24, v25, v26, a9, v27);

  return v28;
}

void TaskLoggingService.logAndDonateClassicFlowTask(activityType:eventContext:eventTime:task:app:attribute:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:shouldDonateToCurare:appResolutionName:flowMetadata:)(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,char *a21,uint64_t a22)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  NSObject *v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(char *, uint64_t, uint64_t);
  int v81;
  char *v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  NSObject *v96;
  unint64_t v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  os_log_type_t v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  int v114;
  int v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  os_log_type_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  NSObject *v136;
  uint64_t v137;
  os_log_type_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t, char *, uint64_t);
  char *v162;
  char *v163;
  __objc2_meth_list *v164;
  uint64_t inited;
  void *v166;
  Class isa;
  id v168;
  id v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  void *v174;
  void *v175;
  uint64_t v176;
  id v177;
  id v178;
  NSObject *v179;
  os_log_type_t v180;
  uint8_t *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  void (*v196)(char *, uint64_t);
  char *v197;
  void (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _QWORD *v204;
  NSObject *v205;
  os_log_type_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  unint64_t v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  NSObject *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  unint64_t v250;
  NSObject *v251;
  os_log_type_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  void (*v279)(uint64_t, char *, uint64_t);
  uint64_t v280;
  char v281;
  void (*v282)(char *, uint64_t);
  uint64_t v283;
  char v284;
  void (*v285)(char *, uint64_t);
  char *v286;
  uint64_t v287;
  uint64_t v288;
  NSObject *v289;
  os_log_type_t v290;
  _BOOL4 v291;
  _QWORD *v292;
  uint64_t v293;
  uint8_t *v294;
  _QWORD *v295;
  char *v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  NSObject *v301;
  os_log_type_t v302;
  unsigned int v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  os_log_t v308;
  void (*v309)(_QWORD, _QWORD, _QWORD);
  uint64_t v310;
  char v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  char *v320;
  _QWORD *v321;
  char *v322;
  uint64_t v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  char *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  NSObject *v333;
  char *v334;
  uint64_t v335;
  NSObject *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char **v341;
  uint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  char *v351;
  void (*v352)(char *, uint64_t);
  _QWORD *v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void (*v360)(_QWORD, _QWORD, _QWORD);
  uint64_t v361;
  id v362[11];
  __int128 v363;
  uint64_t v364;
  unint64_t v365;
  unsigned int (*v366)(_QWORD, _QWORD, _QWORD);
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;

  v330 = a8;
  v336 = a7;
  v337 = a6;
  v346 = a5;
  v356 = a4;
  v338 = a3;
  v353 = a2;
  v372 = *MEMORY[0x1E0C80C00];
  v23 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v23);
  v317 = (char *)&v317 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v347 = type metadata accessor for SiriKitReliabilityCodes();
  v350 = *(_QWORD *)(v347 - 8);
  v25 = MEMORY[0x1E0C80A78](v347);
  v320 = (char *)&v317 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v326 = (char *)&v317 - v27;
  v335 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SiriKitReliabilityCodes?, SiriKitReliabilityCodes?));
  MEMORY[0x1E0C80A78](v335);
  v29 = (char *)&v317 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v31 = MEMORY[0x1E0C80A78](v30);
  v323 = (uint64_t)&v317 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v329 = (unint64_t)&v317 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v342 = (uint64_t)&v317 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v317 - v38;
  v40 = MEMORY[0x1E0C80A78](v37);
  v42 = (char *)&v317 - v41;
  MEMORY[0x1E0C80A78](v40);
  v44 = (char *)&v317 - v43;
  v45 = type metadata accessor for ActivityType();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = MEMORY[0x1E0C80A78](v45);
  v319 = (char *)&v317 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x1E0C80A78](v47);
  v50 = MEMORY[0x1E0C80A78](v49);
  v328 = (char *)&v317 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v325 = (char *)&v317 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v324 = (char *)&v317 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v57 = MEMORY[0x1E0C80A78](v56);
  v343 = (char *)&v317 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v341 = (char **)((char *)&v317 - v60);
  v61 = MEMORY[0x1E0C80A78](v59);
  v62 = MEMORY[0x1E0C80A78](v61);
  v344 = (char *)&v317 - v63;
  MEMORY[0x1E0C80A78](v62);
  v65 = MEMORY[0x1E0C80A78]((char *)&v317 - v64);
  v67 = (char *)&v317 - v66;
  v355 = v45;
  v318 = v68;
  v322 = v69;
  v340 = (char *)v70;
  v351 = (void (*)(_QWORD, _QWORD, _QWORD))v65;
  v334 = v39;
  if (a11)
  {
    v348 = a10;
    v357 = a11;
  }
  else if (a9)
  {
    v71 = objc_msgSend(a9, sel_typeName);
    v348 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v357 = v72;

  }
  else
  {
    v357 = 0xE700000000000000;
    v348 = 0x6E776F6E6B6E55;
  }
  v349 = a18;
  v73 = *(NSObject **)(v46 + 104);
  v332 = *MEMORY[0x1E0D9B6C8];
  v333 = v73;
  ((void (*)(char *))v73)(v67);
  v74 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ActivityType and conformance ActivityType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B6F0], MEMORY[0x1E0D9B700]);
  swift_bridgeObjectRetain();
  v354 = a1;
  dispatch thunk of RawRepresentable.rawValue.getter();
  v331 = v74;
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (*(_OWORD *)v362 == v363)
    v75 = 1;
  else
    v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v76 = v350;
  v345 = a17;
  v339 = a16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v352 = *(void (**)(char *, uint64_t))(v46 + 8);
  v352(v67, v355);
  outlined init with copy of ReferenceResolutionClientProtocol?(v349, (uint64_t)v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if ((v75 & 1) == 0)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v82 = v354;
    v86 = v355;
    v85 = v356;
    v84 = v357;
    goto LABEL_20;
  }
  v77 = v347;
  (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v42, *MEMORY[0x1E0D9B2F8], v347);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v42, 0, 1, v77);
  v78 = v76;
  v79 = (uint64_t)&v29[*(int *)(v335 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v44, (uint64_t)v29, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v42, v79, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v80 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  v81 = v80(v29, 1, v77);
  v82 = v354;
  if (v81 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v42, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v83 = v80((char *)v79, 1, v77);
    v84 = v357;
    if (v83 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v86 = v355;
      v85 = v356;
LABEL_19:
      v92 = v353;
      specialized TaskLoggingService.updateFlowTaskState(aceServiceInvoker:taskName:interactionId:taskId:)(v353 + 4, v348, v84, v353[12], v353[13], *(_QWORD *)(v85 + 16), *(_QWORD *)(v85 + 24));
      v93 = v345;
      goto LABEL_25;
    }
  }
  else
  {
    v87 = (uint64_t)v334;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v29, (uint64_t)v334, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v88 = v80((char *)v79, 1, v77);
    v84 = v357;
    if (v88 != 1)
    {
      v89 = v326;
      (*(void (**)(char *, uint64_t, uint64_t))(v350 + 32))(v326, v79, v77);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitReliabilityCodes and conformance SiriKitReliabilityCodes, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B330], MEMORY[0x1E0D9B340]);
      LODWORD(v335) = dispatch thunk of static Equatable.== infix(_:_:)();
      v357 = v84;
      v90 = *(void (**)(char *, uint64_t))(v350 + 8);
      v91 = v89;
      v82 = v354;
      v90(v91, v77);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v42, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v90((char *)v87, v77);
      v84 = v357;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v86 = v355;
      v85 = v356;
      if ((v335 & 1) != 0)
        goto LABEL_19;
      goto LABEL_18;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v42, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    (*(void (**)(uint64_t, uint64_t))(v350 + 8))(v87, v77);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, &demangling cache variable for type metadata for (SiriKitReliabilityCodes?, SiriKitReliabilityCodes?));
  v86 = v355;
  v85 = v356;
LABEL_18:
  if ((*(_BYTE *)(v85 + 33) & 1) != 0)
    goto LABEL_19;
LABEL_20:
  v92 = v353;
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v94 = type metadata accessor for Logger();
  __swift_project_value_buffer(v94, (uint64_t)static Logger.instrumentation);
  v95 = (char *)v351;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))((char *)v351, v82, v86);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v96 = Logger.logObject.getter();
  v97 = v84;
  v98 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v96, v98))
  {
    v99 = swift_slowAlloc();
    v335 = swift_slowAlloc();
    v362[0] = (id)v335;
    *(_DWORD *)v99 = 136315906;
    v100 = *(_QWORD *)(v85 + 16);
    v101 = *(_QWORD *)(v356 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v99 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v348, v357, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v99 + 22) = 2080;
    v102 = ActivityType.rawValue.getter();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v104 = v95;
    v105 = v355;
    v352(v104, v355);
    *(_WORD *)(v99 + 32) = 2080;
    v106 = v353[12];
    v107 = v353[13];
    swift_bridgeObjectRetain();
    v108 = v106;
    v109 = v357;
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v107, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v85 = v356;
    v82 = v354;
    swift_bridgeObjectRelease();
    v110 = v98;
    v84 = v109;
    _os_log_impl(&dword_1B4BE6000, v96, v110, "#TaskLoggingService - not updating flow task state for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v99, 0x2Au);
    v111 = v335;
    swift_arrayDestroy();
    v92 = v353;
    MEMORY[0x1B5E44758](v111, -1, -1);
    MEMORY[0x1B5E44758](v99, -1, -1);

    v86 = v105;
    v93 = v345;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_release_n();
    v352(v95, v86);

    swift_release_n();
    v93 = v345;
    v84 = v97;
  }
LABEL_25:
  v335 = a15;
  v334 = a14;
  v112 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v113 = v344;
  v112(v344, v82, v86);
  v114 = (*(uint64_t (**)(char *, uint64_t))(v46 + 88))(v113, v86);
  v115 = *MEMORY[0x1E0D9B6D8];
  v351 = (void (*)(_QWORD, _QWORD, _QWORD))v112;
  if (v114 != v115 && v114 != *MEMORY[0x1E0D9B6D0] && v114 != *MEMORY[0x1E0D9B6E8] && v114 != *MEMORY[0x1E0D9B698])
  {
    v352(v113, v86);
    v116 = (char *)v341;
LABEL_34:
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v117 = type metadata accessor for Logger();
    __swift_project_value_buffer(v117, (uint64_t)static Logger.instrumentation);
    v118 = v82;
    v351(v116, v82, v86);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v119 = v85;
    v120 = Logger.logObject.getter();
    v121 = v86;
    v122 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v120, v122))
    {
      v123 = swift_slowAlloc();
      v344 = (char *)swift_slowAlloc();
      v362[0] = v344;
      *(_DWORD *)v123 = 136315906;
      v124 = v92;
      v125 = *(_QWORD *)(v119 + 16);
      v126 = *(_QWORD *)(v356 + 24);
      swift_bridgeObjectRetain();
      *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v126, (uint64_t *)v362);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v123 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v348, v357, (uint64_t *)v362);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v123 + 22) = 2080;
      v127 = ActivityType.rawValue.getter();
      *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v127, v128, (uint64_t *)v362);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v352(v116, v355);
      *(_WORD *)(v123 + 32) = 2080;
      v129 = v124[12];
      v130 = v124[13];
      swift_bridgeObjectRetain();
      v118 = v354;
      *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v130, (uint64_t *)v362);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v120, v122, "#TaskLoggingService - not sending update context to reset FlowTaskState for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v123, 0x2Au);
      v131 = v344;
      swift_arrayDestroy();
      v132 = v131;
      v121 = v355;
      MEMORY[0x1B5E44758](v132, -1, -1);
      MEMORY[0x1B5E44758](v123, -1, -1);

      v133 = v346;
    }
    else
    {
      v357 = v84;
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v352(v116, v121);

      swift_release_n();
      v133 = v346;
      v124 = v92;
    }
    v134 = v350;
    goto LABEL_46;
  }
  v116 = (char *)v341;
  if (v93
    && (v339 == 0x764F726576726553 && v93 == 0xEE00656469727265
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    goto LABEL_34;
  }
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v135 = type metadata accessor for Logger();
  __swift_project_value_buffer(v135, (uint64_t)static Logger.instrumentation);
  v351(v340, v82, v86);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v136 = Logger.logObject.getter();
  v137 = v86;
  v138 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v136, v138))
  {
    v139 = swift_slowAlloc();
    v344 = (char *)swift_slowAlloc();
    v362[0] = v344;
    *(_DWORD *)v139 = 136315650;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v348, v84, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v139 + 12) = 2080;
    v140 = *(_QWORD *)(v356 + 16);
    v141 = *(_QWORD *)(v356 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v139 + 22) = 2080;
    v124 = v353;
    v142 = (uint64_t)v340;
    v143 = ActivityType.rawValue.getter();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, (uint64_t *)v362);
    v118 = v354;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v352((char *)v142, v355);
    _os_log_impl(&dword_1B4BE6000, v136, v138, "#TaskLoggingService - sending update context to reset FlowTaskState for TaskType: %s, TaskId: %s, ActivityType: %s", (uint8_t *)v139, 0x20u);
    v145 = v344;
    swift_arrayDestroy();
    v146 = v145;
    v121 = v355;
    MEMORY[0x1B5E44758](v146, -1, -1);
    MEMORY[0x1B5E44758](v139, -1, -1);

    v147 = v346;
    v134 = v350;
  }
  else
  {
    v118 = v82;
    swift_release_n();
    v357 = v84;
    swift_bridgeObjectRelease_n();
    v352(v340, v137);

    v147 = v346;
    v124 = v92;
    v134 = v350;
    v121 = v137;
  }
  specialized TaskLoggingService.resetFlowTaskState(aceServiceInvoker:)(v124 + 4);
  v133 = v147;
LABEL_46:
  v344 = a21;
  v148 = (uint64_t)v343;
  v351(v343, v118, v121);
  v149 = v124[10];
  v150 = v124[11];
  v151 = v335;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  Date.timeIntervalSince1970.getter();
  v153 = v152;
  v154 = type metadata accessor for SiriKitFlowActivity();
  swift_allocObject();
  v155 = (char *)specialized SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(v148, v133, v149, v150, (uint64_t)v334, v151, v153, 0);
  swift_release();
  v156 = v342;
  outlined init with copy of ReferenceResolutionClientProtocol?(v349, v342, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v157 = v347;
  v341 = *(char ***)(v134 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v341)(v156, 1, v347) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v156, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v158 = 0;
    v159 = 0;
  }
  else
  {
    v158 = SiriKitReliabilityCodes.rawValue.getter();
    v159 = v160;
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v156, v157);
  }
  v161 = (void (*)(uint64_t, char *, uint64_t))v351;
  v162 = v354;
  v163 = v344;
  if (v344)
  {
    v158 = a20;
    swift_bridgeObjectRelease();
    v159 = (uint64_t)v163;
  }
  v327 = v158;
  v342 = a13;
  v343 = v155;
  v164 = &OBJC_INSTANCE_METHODS__TtC14SiriKitRuntime25RemoteConversationService;
  if (!a22)
  {
    v340 = (char *)v159;
    swift_bridgeObjectRetain();
    goto LABEL_64;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x80000001B4F04770;
  *(_QWORD *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)(inited + 48) = a22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (*(_QWORD *)(specialized Dictionary.init(dictionaryLiteral:)(inited) + 16))
  {
    v166 = (void *)objc_opt_self();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v362[0] = 0;
    v168 = objc_msgSend(v166, sel_dataWithJSONObject_options_error_, isa, 0, v362);

    v169 = v362[0];
    if (!v168)
    {
      v174 = v169;
      v175 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v176 = type metadata accessor for Logger();
      __swift_project_value_buffer(v176, (uint64_t)static Logger.instrumentation);
      v177 = v175;
      v178 = v175;
      v179 = Logger.logObject.getter();
      v180 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v179, v180))
      {
        v181 = (uint8_t *)swift_slowAlloc();
        v182 = swift_slowAlloc();
        v362[0] = (id)v182;
        *(_DWORD *)v181 = 136315138;
        swift_getErrorValue();
        v183 = Error.localizedDescription.getter();
        *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v183, v184, (uint64_t *)v362);
        v162 = v354;
        v155 = v343;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B4BE6000, v179, v180, "#TaskLoggingService - failed to encode appResolutionMetrics payload to JSON due to error: %s", v181, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v182, -1, -1);
        MEMORY[0x1B5E44758](v181, -1, -1);
      }
      else
      {

      }
      v161 = (void (*)(uint64_t, char *, uint64_t))v351;
      swift_getErrorValue();
      swift_retain();
      Error.localizedDescription.getter();
      dispatch thunk of DefaultFlowActivity.message.setter();
      swift_release();
      v185 = v350;
      v186 = v326;
      v157 = v347;
      (*(void (**)(char *, _QWORD, uint64_t))(v350 + 104))(v326, *MEMORY[0x1E0D9B2E0], v347);
      v327 = SiriKitReliabilityCodes.rawValue.getter();
      v340 = (char *)v187;

      (*(void (**)(char *, uint64_t))(v185 + 8))(v186, v157);
      goto LABEL_63;
    }
    v170 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v172 = v171;

    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    v173 = v172;
    v162 = v354;
    outlined consume of Data._Representation(v170, v173);
    v157 = v347;
    v161 = (void (*)(uint64_t, char *, uint64_t))v351;
  }
  v340 = (char *)v159;
  swift_bridgeObjectRelease();
  dispatch thunk of DefaultFlowActivity.message.setter();
  swift_release();
LABEL_63:
  v164 = &OBJC_INSTANCE_METHODS__TtC14SiriKitRuntime25RemoteConversationService;
LABEL_64:
  v188 = a12;
  v189 = v342;
  if (v342)
  {
    v190 = *(void (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity
                                                   + *(_QWORD *)v155
                                                   + 312);
    swift_bridgeObjectRetain();
    v190(a12, v189);
    v164 = &OBJC_INSTANCE_METHODS__TtC14SiriKitRuntime25RemoteConversationService;
  }
  v191 = v329;
  outlined init with copy of ReferenceResolutionClientProtocol?(v349, v329, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v341)(v191, 1, v157) != 1)
  {
    v193 = v350;
    v194 = v320;
    (*(void (**)(char *, uint64_t, uint64_t))(v350 + 32))(v320, v191, v157);
    v195 = SiriKitReliabilityCodes.rawValue.getter();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *(_QWORD *)v155 + 216))(v195);
    v196 = *(void (**)(char *, uint64_t))(v193 + 8);
    v188 = a12;
    v197 = v194;
    v164 = &OBJC_INSTANCE_METHODS__TtC14SiriKitRuntime25RemoteConversationService;
    v196(v197, v157);
    v192 = v345;
    if (!v345)
      goto LABEL_71;
    goto LABEL_70;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v191, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v192 = v345;
  if (v345)
  {
LABEL_70:
    v198 = *(void (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity
                                                   + *(_QWORD *)v155
                                                   + 192);
    swift_bridgeObjectRetain();
    v198(v339, v192);
  }
LABEL_71:
  swift_retain();
  Date.timeIntervalSince1970.getter();
  dispatch thunk of DefaultFlowActivity.timestamp.setter();
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol?(v330, (uint64_t)&v363, &demangling cache variable for type metadata for FlowActivity?);
  v317 = (char *)v188;
  if (v365)
  {
    v344 = (char *)v154;
    outlined init with take of ReferenceResolutionClientProtocol(&v363, (uint64_t)v362);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v199 = type metadata accessor for Logger();
    __swift_project_value_buffer(v199, (uint64_t)static Logger.instrumentation);
    v200 = v322;
    v201 = v355;
    v161((uint64_t)v322, v162, v355);
    v202 = v356;
    swift_retain_n();
    v203 = v357;
    swift_bridgeObjectRetain_n();
    v204 = v353;
    swift_retain_n();
    v205 = Logger.logObject.getter();
    v206 = static os_log_type_t.debug.getter();
    v207 = v206;
    if (os_log_type_enabled(v205, v206))
    {
      v208 = swift_slowAlloc();
      v330 = swift_slowAlloc();
      *(_QWORD *)&v363 = v330;
      *(_DWORD *)v208 = 136315906;
      LODWORD(v329) = v207;
      v209 = *(_QWORD *)(v202 + 16);
      v210 = *(_QWORD *)(v356 + 24);
      swift_bridgeObjectRetain();
      v360 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v209, v210, (uint64_t *)&v363);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v208 + 12) = 2080;
      swift_bridgeObjectRetain();
      v360 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v348, v203, (uint64_t *)&v363);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v208 + 22) = 2080;
      v211 = ActivityType.rawValue.getter();
      v360 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v211, v212, (uint64_t *)&v363);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v352(v200, v201);
      *(_WORD *)(v208 + 32) = 2080;
      v214 = v204[12];
      v213 = v204[13];
      swift_bridgeObjectRetain();
      v360 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v214, v213, (uint64_t *)&v363);
      v157 = v347;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v215 = v343;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v205, (os_log_type_t)v329, "#TaskLoggingService - appending domain activities for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v208, 0x2Au);
      v216 = v330;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v216, -1, -1);
      MEMORY[0x1B5E44758](v208, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v352(v200, v201);

      swift_release_n();
      v215 = v343;
    }
    v219 = v350;
    v220 = v344;
    if (v340)
    {
      v221 = (unint64_t)v340;
      v222 = v327;
    }
    else
    {
      v223 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v350 + 104))(v326, *MEMORY[0x1E0D9B318], v157);
      v222 = SiriKitReliabilityCodes.rawValue.getter();
      v221 = v224;
      (*(void (**)(char *, uint64_t))(v219 + 8))(v223, v157);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FlowActivity>);
    v225 = swift_initStackObject();
    *(_OWORD *)(v225 + 16) = xmmword_1B4EE3BA0;
    *(_QWORD *)(v225 + 56) = v220;
    *(_QWORD *)(v225 + 64) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitFlowActivity and conformance DefaultFlowActivity, (uint64_t (*)(uint64_t))type metadata accessor for SiriKitFlowActivity, MEMORY[0x1E0D9ADF8]);
    *(_QWORD *)(v225 + 32) = v215;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v362, v225 + 72);
    if (v336)
      v226 = v337;
    else
      v226 = 0;
    if (v336)
      v227 = v336;
    else
      v227 = 0xE000000000000000;
    v228 = *(_QWORD *)(v356 + 16);
    v229 = *(char **)(v356 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    v344 = v229;
    v315 = (unint64_t)v229;
    v340 = (char *)v228;
    v230 = v354;
    v231 = specialized static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(v348, v357, v354, v222, v221, v225, v226, v227, v228, v315);
    v233 = v232;
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowActivity);
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v362);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v363, &demangling cache variable for type metadata for FlowActivity?);
    if (v340)
    {
      v217 = (unint64_t)v340;
      v218 = v327;
    }
    else
    {
      v234 = v350;
      v235 = v326;
      (*(void (**)(char *, _QWORD, uint64_t))(v350 + 104))(v326, *MEMORY[0x1E0D9B318], v157);
      v218 = SiriKitReliabilityCodes.rawValue.getter();
      v217 = v236;
      (*(void (**)(char *, uint64_t))(v234 + 8))(v235, v157);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FlowActivity>);
    v237 = swift_initStackObject();
    *(_OWORD *)(v237 + 16) = *(_OWORD *)&v164[490].entrysize;
    *(_QWORD *)(v237 + 56) = v154;
    *(_QWORD *)(v237 + 64) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriKitFlowActivity and conformance DefaultFlowActivity, (uint64_t (*)(uint64_t))type metadata accessor for SiriKitFlowActivity, MEMORY[0x1E0D9ADF8]);
    *(_QWORD *)(v237 + 32) = v155;
    if (v336)
      v238 = v337;
    else
      v238 = 0;
    if (v336)
      v239 = v336;
    else
      v239 = 0xE000000000000000;
    v240 = *(_QWORD *)(v356 + 16);
    v241 = *(char **)(v356 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    v344 = v241;
    v316 = (unint64_t)v241;
    v340 = (char *)v240;
    v230 = v354;
    v231 = specialized static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(v348, v357, v354, v218, v217, v237, v238, v239, v240, v316);
    v233 = v242;
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowActivity);
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v243 = v355;
  v244 = v347;
  if (v233)
  {
    v245 = v323;
    outlined init with copy of ReferenceResolutionClientProtocol?(v349, v323, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v341)(v245, 1, v244) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v245, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v246 = 0;
      v247 = 0;
    }
    else
    {
      v246 = SiriKitReliabilityCodes.rawValue.getter();
      v247 = v260;
      (*(void (**)(uint64_t, uint64_t))(v350 + 8))(v245, v244);
    }
    v261 = v357;
    swift_bridgeObjectRetain();
    v262 = v346;
    swift_retain();
    specialized SiriKitRequestEvent.init(intentName:errorCode:app:eventReliabilityCode:)(v348, v261, 0, v262, v246, v247, (uint64_t *)v362);
    v263 = v353[13];
    v341 = (char **)v353[12];
    v264 = specialized TaskLoggingService.createRequestContentString(siriKitRequestEvent:interactionId:)((uint64_t)v362, (uint64_t)v341, v263);
    v266 = v265;
    outlined release of SiriKitRequestEvent((uint64_t)v362);
    if (v266)
      v267 = v264;
    else
      v267 = 0;
    v347 = v267;
    v268 = 0xE000000000000000;
    if (v266)
      v268 = v266;
    v350 = v268;
    swift_bridgeObjectRetain();
    v269 = SiriKitEventContext.resultCandidateId.getter();
    if (v270)
      v271 = v269;
    else
      v271 = 7104878;
    if (v270)
      v272 = v270;
    else
      v272 = 0xE300000000000000;
    if (v262 && (v273 = App.appIdentifier.getter(), v274))
    {
      v275 = v274;
    }
    else
    {
      swift_bridgeObjectRelease();
      v275 = 0xEE00656C62616369;
      v273 = 0x6C7070615F746F6ELL;
    }
    v276 = v325;
    LODWORD(v327) = a19;
    v326 = (char *)v231;
    *(_QWORD *)&v363 = v231;
    *((_QWORD *)&v363 + 1) = v233;
    v364 = v347;
    v365 = v350;
    v366 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v341;
    v367 = v263;
    v368 = v271;
    v369 = v272;
    v370 = v273;
    v371 = v275;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v329 = MetricsEventInformation.dictionaryRepresentation.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v330 = v233;
    swift_bridgeObjectRelease();
    v277 = v324;
    v278 = v355;
    ((void (*)(char *, _QWORD, uint64_t))v333)(v324, v332, v355);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v360 == (void (*)(_QWORD, _QWORD, _QWORD))v358 && v361 == v359)
    {
      swift_bridgeObjectRelease_n();
      v352(v277, v278);
      v279 = (void (*)(uint64_t, char *, uint64_t))v351;
      v351(v276, v230, v278);
      v280 = v346;
    }
    else
    {
      v281 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v352(v277, v278);
      v279 = (void (*)(uint64_t, char *, uint64_t))v351;
      v351(v276, v230, v278);
      v280 = v346;
      if ((v281 & 1) == 0)
      {
        v352(v276, v278);
        goto LABEL_137;
      }
    }
    ((void (*)(char *, _QWORD, uint64_t))v333)(v328, v332, v278);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v360 == (void (*)(_QWORD, _QWORD, _QWORD))v358 && v361 == v359)
    {
      swift_bridgeObjectRelease_n();
      v282 = v352;
      v352(v328, v278);
      v282(v276, v278);
      v283 = v356;
    }
    else
    {
      v284 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v285 = v352;
      v352(v328, v278);
      v285(v276, v278);
      v283 = v356;
      if ((v284 & 1) == 0)
        goto LABEL_129;
    }
    if (*(_BYTE *)(v283 + 33) != 1)
    {
LABEL_129:
      swift_bridgeObjectRelease();
      v286 = v354;
      v287 = v342;
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v288 = type metadata accessor for Logger();
      __swift_project_value_buffer(v288, (uint64_t)static Logger.instrumentation);
      v289 = Logger.logObject.getter();
      v290 = static os_log_type_t.debug.getter();
      v291 = os_log_type_enabled(v289, v290);
      v292 = v353;
      v293 = v330;
      if (v291)
      {
        v294 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v294 = 0;
        _os_log_impl(&dword_1B4BE6000, v289, v290, "#TaskLoggingService - Skip logging Start for non new client task", v294, 2u);
        MEMORY[0x1B5E44758](v294, -1, -1);
      }

      v295 = v321;
      if ((v327 & 1) == 0)
      {
LABEL_134:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_143;
    }
LABEL_137:
    v296 = v354;
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v297 = type metadata accessor for Logger();
    __swift_project_value_buffer(v297, (uint64_t)static Logger.instrumentation);
    v298 = v318;
    v299 = v355;
    v279((uint64_t)v318, v296, v355);
    swift_retain_n();
    v300 = v357;
    swift_bridgeObjectRetain_n();
    v292 = v353;
    swift_retain_n();
    v301 = Logger.logObject.getter();
    v302 = static os_log_type_t.debug.getter();
    v303 = v302;
    if (os_log_type_enabled(v301, v302))
    {
      v304 = swift_slowAlloc();
      v351 = (void (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc();
      v360 = v351;
      *(_DWORD *)v304 = 136315906;
      v333 = v301;
      v332 = v303;
      v305 = (unint64_t)v344;
      swift_bridgeObjectRetain();
      v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v340, v305, (uint64_t *)&v360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v304 + 12) = 2080;
      swift_bridgeObjectRetain();
      v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v348, v300, (uint64_t *)&v360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v304 + 22) = 2080;
      v306 = ActivityType.rawValue.getter();
      v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v306, v307, (uint64_t *)&v360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v352(v298, v299);
      *(_WORD *)(v304 + 32) = 2080;
      v286 = v354;
      swift_bridgeObjectRetain();
      v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v341, v263, (uint64_t *)&v360);
      v292 = v353;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v308 = v333;
      _os_log_impl(&dword_1B4BE6000, v333, (os_log_type_t)v332, "#TaskLoggingService Usage Log - logging task step for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v304, 0x2Au);
      v309 = v351;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v309, -1, -1);
      v310 = v304;
      v280 = v346;
      MEMORY[0x1B5E44758](v310, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v352(v298, v299);

      swift_release_n();
      v286 = v354;
    }
    v293 = v330;
    v311 = v327;
    v312 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v295 = v321;
    TaskLoggingService.logViaSAMetrics(aceServiceInvoker:eventInformation:timings:originalCommandId:)(v292 + 4, v329, v312, 0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v287 = v342;
    if ((v311 & 1) == 0)
      goto LABEL_134;
LABEL_143:
    v314 = v295[10];
    v313 = v295[11];
    __swift_project_boxed_opaque_existential_1(v295 + 7, v314);
    (*(void (**)(char *, _QWORD *, uint64_t, uint64_t, unint64_t, char *, uint64_t, char *, char *, uint64_t, unint64_t, uint64_t, uint64_t, NSObject *, char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v313 + 8))(v286, v292, v338, v347, v350, v326, v293, v340, v344, v348, v357, v280, v337, v336, v317, v287, v334, v335, v339,
      v345,
      v349,
      v314,
      v313);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v248 = type metadata accessor for Logger();
  __swift_project_value_buffer(v248, (uint64_t)static Logger.instrumentation);
  v249 = v319;
  v351(v319, v230, v243);
  swift_retain_n();
  swift_retain_n();
  v250 = v357;
  swift_bridgeObjectRetain();
  v251 = Logger.logObject.getter();
  v252 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v251, v252))
  {
    v253 = swift_slowAlloc();
    v354 = (char *)swift_slowAlloc();
    v362[0] = v354;
    *(_DWORD *)v253 = 136315906;
    v254 = (unint64_t)v344;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v340, v254, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v253 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v348, v250, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v253 + 22) = 2080;
    v255 = ActivityType.rawValue.getter();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v255, v256, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v352(v249, v355);
    *(_WORD *)(v253 + 32) = 2080;
    v257 = v353[12];
    v258 = v353[13];
    swift_bridgeObjectRetain();
    *(_QWORD *)&v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v257, v258, (uint64_t *)v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v251, v252, "#TaskLoggingService - JSON string from the encoding is empty, not logging Task step for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v253, 0x2Au);
    v259 = v354;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v259, -1, -1);
    MEMORY[0x1B5E44758](v253, -1, -1);
    swift_release();

  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
    v352(v249, v243);

    swift_release_n();
  }
}

uint64_t type metadata accessor for SiriKitFlowActivity()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SiriKitFlowActivity;
  if (!type metadata singleton initialization cache for SiriKitFlowActivity)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  v8 = specialized SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  swift_release();
  return v8;
}

uint64_t SiriKitFlowActivity.errorCodeDescription.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.errorCodeDescription);
}

uint64_t specialized static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8, uint64_t a9, unint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  _OWORD v79[8];
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v77 = a8;
  v74 = (void *)a6;
  v75 = a1;
  v15 = type metadata accessor for ActivityType();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for String.Encoding();
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = a4;
  if (!a10)
  {
    v75 = a7;
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.instrumentation);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, a3, v15);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    v47 = v46;
    if (os_log_type_enabled(v45, v46))
    {
      v48 = swift_slowAlloc();
      v74 = (void *)swift_slowAlloc();
      *(_QWORD *)&v83 = v74;
      *(_DWORD *)v48 = 136315650;
      LODWORD(v73) = v47;
      v49 = ActivityType.rawValue.getter();
      *(_QWORD *)&v79[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      *(_WORD *)(v48 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v79[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, a5, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 22) = 2080;
      v51 = v77;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v79[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, (unint64_t)v51, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v45, (os_log_type_t)v73, "#TaskLoggingService - TaskId from MetricsState is Nil, can not be aggregated into a Task. Not logging Task step: %s, Status reason: %s with Task attribute: %s", (uint8_t *)v48, 0x20u);
      v52 = (uint64_t)v74;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v52, -1, -1);
      MEMORY[0x1B5E44758](v48, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  v71 = v22;
  v73 = a9;
  MEMORY[0x1E0C80A78](v20);
  *(&v71 - 8) = a3;
  *(&v71 - 7) = (char *)a4;
  *(&v71 - 6) = (char *)a5;
  *(&v71 - 5) = v23;
  *(&v71 - 4) = (char *)a10;
  *(&v71 - 3) = (char *)a7;
  v24 = a7;
  v25 = v77;
  *(&v71 - 2) = (char *)v77;
  swift_bridgeObjectRetain();
  v72 = specialized Sequence.compactMap<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:), (uint64_t)(&v71 - 10), (uint64_t)v74);
  v74 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = ActivityType.rawValue.getter();
  v28 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = specialized static SiriKitMetricsUtils.formulateIntentTypeName(intentTypeName:)(v75, a2);
  v31 = v30;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v83 = v72;
  *((_QWORD *)&v83 + 1) = v24;
  *(_QWORD *)&v84 = v25;
  BYTE8(v84) = 0;
  *(_QWORD *)&v85 = 0;
  *((_QWORD *)&v85 + 1) = 0xE000000000000000;
  *(_QWORD *)&v86 = 0;
  *((_QWORD *)&v86 + 1) = 0xE000000000000000;
  *(_QWORD *)&v87 = v76;
  *((_QWORD *)&v87 + 1) = a5;
  *(_QWORD *)&v88 = v26;
  *((_QWORD *)&v88 + 1) = v28;
  *(_QWORD *)&v89 = v73;
  *((_QWORD *)&v89 + 1) = a10;
  *(_QWORD *)&v90 = v29;
  *((_QWORD *)&v90 + 1) = v31;
  v91 = 0x3FD999999999999ALL;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v79[6] = v89;
  v79[7] = v90;
  v80 = v91;
  v79[2] = v85;
  v79[3] = v86;
  v79[4] = v87;
  v79[5] = v88;
  v79[0] = v83;
  v79[1] = v84;
  lazy protocol witness table accessor for type TaskData and conformance TaskData();
  v32 = v74;
  v33 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v32)
  {
    swift_bridgeObjectRelease();
    outlined release of TaskData((uint64_t)&v83);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.instrumentation);
    v36 = v32;
    v37 = v32;
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      *(_QWORD *)&v79[0] = v41;
      *(_DWORD *)v40 = 136315138;
      swift_getErrorValue();
      v42 = Error.localizedDescription.getter();
      v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v38, v39, "#TaskLoggingService - JSON encoding error: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v41, -1, -1);
      MEMORY[0x1B5E44758](v40, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();

    }
    return 0;
  }
  v53 = v33;
  v54 = v34;
  outlined release of TaskData((uint64_t)&v83);
  static String.Encoding.utf8.getter();
  v55 = String.init(data:encoding:)();
  if (!v56)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Logger.instrumentation);
    v67 = Logger.logObject.getter();
    v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v69 = 0;
      _os_log_impl(&dword_1B4BE6000, v67, v68, "#TaskLoggingService - JSON encoding error, taskDataString is Nil", v69, 2u);
      MEMORY[0x1B5E44758](v69, -1, -1);
    }
    outlined consume of Data._Representation(v53, v54);
    swift_release();

    return 0;
  }
  v57 = v55;
  v58 = v56;
  v81 = v55;
  v82 = v56;
  v59 = one-time initialization token for instrumentation;
  swift_bridgeObjectRetain();
  if (v59 != -1)
    swift_once();
  v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  v77 = v61;
  if (os_log_type_enabled(v61, v62))
  {
    v63 = swift_slowAlloc();
    v76 = swift_slowAlloc();
    *(_QWORD *)&v79[0] = v76;
    *(_DWORD *)v63 = 136315394;
    swift_bridgeObjectRetain();
    v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v63 + 12) = 2080;
    swift_bridgeObjectRetain();
    v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, a10, (uint64_t *)v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v64 = v77;
    _os_log_impl(&dword_1B4BE6000, v77, v62, "#TaskLoggingService - created TaskContent:%s, for taskId: %s", (uint8_t *)v63, 0x16u);
    v65 = v76;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v65, -1, -1);
    MEMORY[0x1B5E44758](v63, -1, -1);
    outlined consume of Data._Representation(v53, v54);

  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v53, v54);

  }
  swift_release();
  swift_beginAccess();
  return v81;
}

void partial apply for closure #1 in static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2);
}

void closure #1 in static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  os_log_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[5];
  uint64_t v41;

  v39 = a7;
  v37 = a3;
  v38 = a5;
  v15 = type metadata accessor for ActivityType();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowActivity);
  type metadata accessor for DefaultFlowActivity();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v19 = v41;
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.instrumentation);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, v15);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      v24 = swift_slowAlloc();
      v35 = v23;
      v25 = v24;
      v36 = swift_slowAlloc();
      v40[0] = v36;
      *(_DWORD *)v25 = 136315906;
      v33 = a8;
      v34 = v21;
      v26 = ActivityType.rawValue.getter();
      v32 = a6;
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a4, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 22) = 2080;
      v28 = v32;
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v28, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 32) = 2080;
      v29 = v33;
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v29, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v30 = v34;
      _os_log_impl(&dword_1B4BE6000, v34, (os_log_type_t)v35, "#TaskLoggingService - Skipping unsupported flow activity. Not logging Task step: %s, Status reason: %s for taskId: %s, with attribute: %s", (uint8_t *)v25, 0x2Au);
      v31 = v36;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v31, -1, -1);
      MEMORY[0x1B5E44758](v25, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v19 = 0;
  }
  *a9 = v19;
}

uint64_t specialized static SiriKitMetricsUtils.formulateIntentTypeName(intentTypeName:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v17[2];

  v17[0] = a1;
  v17[1] = a2;
  lazy protocol witness table accessor for type String and conformance String();
  v4 = StringProtocol.components<A>(separatedBy:)();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 16 * v5;
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(void **)(v6 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 20041;
    v9._object = (void *)0xE200000000000000;
    if (!String.hasPrefix(_:)(v9))
    {
      v10._countAndFlagsBits = v8;
      v10._object = v7;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      return 20041;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v8 = 0x6465737261706E55;
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v17[0] = v15;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v12, v13, "#SiriKitMetricsUtils - intent name extraction error for intentTypeName: %s, returning UnparsedIntent TaskType", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v15, -1, -1);
      MEMORY[0x1B5E44758](v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return v8;
}

unint64_t lazy protocol witness table accessor for type TaskData and conformance TaskData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskData and conformance TaskData;
  if (!lazy protocol witness table cache variable for type TaskData and conformance TaskData)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for TaskData, &type metadata for TaskData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData and conformance TaskData);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TaskData(_QWORD *a1)
{
  return TaskData.encode(to:)(a1);
}

uint64_t TaskData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[8];
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskData.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskData.CodingKeys and conformance TaskData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = *v3;
  v10[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DefaultFlowActivity]);
  lazy protocol witness table accessor for type [DefaultFlowActivity] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type TaskData.CodingKeys and conformance TaskData.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for TaskData.CodingKeys, &unk_1E6854FB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for TaskData.CodingKeys, &unk_1E6854FB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for TaskData.CodingKeys, &unk_1E6854FB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for TaskData.CodingKeys, &unk_1E6854FB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DefaultFlowActivity] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [DefaultFlowActivity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DefaultFlowActivity] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DefaultFlowActivity]);
    v2 = lazy protocol witness table accessor for type DefaultFlowActivity and conformance DefaultFlowActivity();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DefaultFlowActivity] and conformance <A> [A]);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TaskData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1B4C55CD0 + 4 * byte_1B4EF1E6B[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1B4C55D04 + 4 * byte_1B4EF1E66[v4]))();
}

uint64_t sub_1B4C55D04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4C55D0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4C55D14);
  return result;
}

uint64_t sub_1B4C55D20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4C55D28);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1B4C55D2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4C55D34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for HomeAutomationAffinityScorer.HomeAutomationNamespace(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t SiriKitFlowActivity.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *);
  _BYTE v21[32];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriKitFlowActivity.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys();
  v8 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 88))(v8);
  v21[31] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v9 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 112))(v9);
    v21[30] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 136))(v10);
    v21[29] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 160))(v11);
    v21[28] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 184))(v12);
    v21[27] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 208))(v13);
    v21[26] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 232))(v14);
    v21[25] = 6;
    v15 = KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 256))(v15);
    v21[24] = 7;
    v16 = KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 280))(v16);
    v21[15] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v18 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 304))(v18);
    v21[14] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v19 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 328))(v19);
    v21[13] = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    type metadata accessor for DefaultFlowActivity();
    v20 = (void (*)(_QWORD *))method lookup function for DefaultFlowActivity();
    v20(a1);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
}

unint64_t lazy protocol witness table accessor for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitFlowActivity.CodingKeys, &type metadata for SiriKitFlowActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitFlowActivity.CodingKeys, &type metadata for SiriKitFlowActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitFlowActivity.CodingKeys, &type metadata for SiriKitFlowActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitFlowActivity.CodingKeys, &type metadata for SiriKitFlowActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys);
  }
  return result;
}

uint64_t SiriKitFlowActivity.appBundleId.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t SiriKitFlowActivity.appBundleId.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.appBundleId);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriKitFlowActivity.CodingKeys()
{
  unsigned __int8 *v0;

  return SiriKitFlowActivity.CodingKeys.stringValue.getter(*v0);
}

uint64_t SiriKitFlowActivity.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4C563A8 + 4 * byte_1B4EF077B[a1]))(0x6C646E7542707061, 0xEB00000000644965);
}

uint64_t sub_1B4C563A8()
{
  return 0x656D614E707061;
}

uint64_t sub_1B4C563C0()
{
  return 0x6973726556707061;
}

uint64_t sub_1B4C563E4()
{
  return 0x646C697562;
}

unint64_t sub_1B4C563F8()
{
  return 0xD000000000000014;
}

uint64_t sub_1B4C56420()
{
  return 0x694B697269537369;
}

unint64_t sub_1B4C5643C()
{
  return 0xD000000000000015;
}

uint64_t sub_1B4C5645C()
{
  return 0x656D614E746F6C73;
}

uint64_t sub_1B4C56474()
{
  return 0x64496E727574;
}

uint64_t sub_1B4C56488()
{
  return 0x65736E6F70736572;
}

uint64_t SiriKitFlowActivity.appName.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.appName);
}

uint64_t SiriKitFlowActivity.appVersion.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.appVersion);
}

uint64_t SiriKitFlowActivity.build.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.build);
}

uint64_t SiriKitFlowActivity.errorCodeDescription.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.errorCodeDescription);
}

uint64_t SiriKitFlowActivity.eventReliabilityCode.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.eventReliabilityCode);
}

uint64_t SiriKitFlowActivity.isSiriKit.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for SiriKitFlowActivity.isSiriKit);
  swift_beginAccess();
  return *v1;
}

uint64_t SiriKitFlowActivity.isSiriKitSupportedApp.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for SiriKitFlowActivity.isSiriKitSupportedApp);
  swift_beginAccess();
  return *v1;
}

uint64_t SiriKitFlowActivity.responseId.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.responseId);
}

uint64_t SiriKitFlowActivity.slotName.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.slotName);
}

uint64_t SiriKitFlowActivity.executionRequestId.getter()
{
  return SiriKitFlowActivity.appBundleId.getter(&direct field offset for SiriKitFlowActivity.executionRequestId);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskData.CodingKeys()
{
  unsigned __int8 *v0;

  return TaskData.CodingKeys.stringValue.getter(*v0);
}

uint64_t TaskData.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4C565CC + 4 * byte_1B4EF1E5C[a1]))(0x6974697669746361, 0xEA00000000007365);
}

uint64_t sub_1B4C565CC()
{
  return 0x7475626972747461;
}

uint64_t sub_1B4C565EC()
{
  return 0x655364726143656DLL;
}

uint64_t sub_1B4C5660C()
{
  return 0x64656D726F666572;
}

uint64_t sub_1B4C56630()
{
  return 0x496B736154666572;
}

uint64_t sub_1B4C5664C()
{
  return 0x6552737574617473;
}

uint64_t sub_1B4C5666C()
{
  return 0x6570795470657473;
}

uint64_t sub_1B4C566A8()
{
  return 0x6E6F6973726576;
}

uint64_t specialized SiriKitRequestEvent.init(intentName:errorCode:app:eventReliabilityCode:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(_QWORD);
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a3;
  v52 = a6;
  v42 = a5;
  v46 = a1;
  v10 = type metadata accessor for SiriKitReliabilityCodes();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void (**)(_QWORD))(v11 + 104);
  HIDWORD(v39) = *MEMORY[0x1E0D9B318];
  v40 = (void (*)(char *, _QWORD, uint64_t))v14;
  v14(v13);
  SiriKitReliabilityCodes.rawValue.getter();
  v50 = v15;
  v16 = *(void (**)(char *, uint64_t))(v11 + 8);
  v43 = v10;
  v41 = v16;
  v16(v13, v10);
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  v49 = a4;
  AppInformationResolver.init(app:)();
  v47 = dispatch thunk of AppInformationResolver.resolveAppName.getter();
  v18 = v17;
  v19 = 0xEE00656C62616369;
  if (v17)
    v20 = v17;
  else
    v20 = 0xEE00656C62616369;
  v48 = v20;
  swift_bridgeObjectRetain();
  v45 = dispatch thunk of AppInformationResolver.resolveAppBundleId.getter();
  v22 = v21;
  if (v21)
    v23 = v21;
  else
    v23 = 0xEE00656C62616369;
  swift_bridgeObjectRetain();
  v44 = dispatch thunk of AppInformationResolver.resolveAppVersion.getter();
  v25 = v24;
  if (v24)
    v19 = v24;
  swift_bridgeObjectRetain();
  v46 = specialized static SiriKitMetricsUtils.formulateIntentTypeName(intentTypeName:)(v46, a2);
  v27 = v26;
  swift_bridgeObjectRelease();
  if (v52)
  {
    v28 = v52;
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    v29 = v42;
  }
  else
  {
    v40(v13, HIDWORD(v39), v43);
    swift_bridgeObjectRetain();
    v30 = SiriKitReliabilityCodes.rawValue.getter();
    v52 = v31;
    swift_release();
    v29 = v30;
    swift_release();
    v32 = v13;
    v28 = v52;
    v41(v32, v43);
  }
  swift_bridgeObjectRelease();
  if (v25)
    v33 = v44;
  else
    v33 = 0x6C7070615F746F6ELL;
  if (v22)
    v34 = v45;
  else
    v34 = 0x6C7070615F746F6ELL;
  if (v18)
    v35 = v47;
  else
    v35 = 0x6C7070615F746F6ELL;
  swift_bridgeObjectRelease();
  v36 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a7 = v34;
  a7[1] = v23;
  a7[2] = v35;
  a7[3] = v36;
  a7[4] = v33;
  a7[5] = v19;
  a7[6] = v29;
  a7[7] = v28;
  v38 = v46;
  a7[8] = v51;
  a7[9] = v38;
  a7[10] = v27;
  return result;
}

uint64_t specialized TaskLoggingService.createRequestContentString(siriKitRequestEvent:interactionId:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[5];
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v6 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v6);
  if (!a3)
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.instrumentation);
    outlined retain of SiriKitRequestEvent(a1);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      *(_QWORD *)&v42[0] = v13;
      *(_DWORD *)v12 = 136315394;
      v14 = *(_QWORD *)(a1 + 72);
      v15 = *(_QWORD *)(a1 + 80);
      swift_bridgeObjectRetain();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of SiriKitRequestEvent(a1);
      _os_log_impl(&dword_1B4BE6000, v10, v11, "#TaskLoggingService - interactionId from MetricsState is Nil, not logging this request for intentName: %s, with eventReliabilityCode: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v13, -1, -1);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }
    else
    {
      outlined release of SiriKitRequestEvent(a1);
    }

    return 0;
  }
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  v7 = *(_OWORD *)(a1 + 48);
  v42[2] = *(_OWORD *)(a1 + 32);
  v42[3] = v7;
  v42[4] = *(_OWORD *)(a1 + 64);
  v43 = *(_QWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 16);
  v42[0] = *(_OWORD *)a1;
  v42[1] = v8;
  lazy protocol witness table accessor for type SiriKitRequestEvent and conformance SiriKitRequestEvent();
  v18 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v20 = v19;
  static String.Encoding.utf8.getter();
  v21 = String.init(data:encoding:)();
  if (!v22)
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.instrumentation);
    outlined retain of SiriKitRequestEvent(a1);
    swift_bridgeObjectRetain();
    outlined retain of SiriKitRequestEvent(a1);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v38 = swift_slowAlloc();
      *(_QWORD *)&v42[0] = v38;
      *(_DWORD *)v35 = 136315394;
      v39 = v20;
      v41 = a2;
      v36 = *(_QWORD *)(a1 + 72);
      v37 = *(_QWORD *)(a1 + 80);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of SiriKitRequestEvent(a1);
      outlined release of SiriKitRequestEvent(a1);
      *(_WORD *)(v35 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, a3, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v33, v34, "#TaskLoggingService - JSON encoding error, requestEventString is Nil for intentName: %s, interactionId: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v38, -1, -1);
      MEMORY[0x1B5E44758](v35, -1, -1);
      outlined consume of Data._Representation(v18, v39);

      swift_release();
    }
    else
    {
      outlined consume of Data._Representation(v18, v20);
      swift_release();
      outlined release of SiriKitRequestEvent(a1);
      outlined release of SiriKitRequestEvent(a1);

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  v23 = v21;
  v24 = v22;
  v40 = a2;
  v44 = v21;
  v45 = v22;
  v25 = one-time initialization token for instrumentation;
  swift_bridgeObjectRetain();
  if (v25 != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    *(_QWORD *)&v42[0] = v30;
    *(_DWORD *)v29 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, a3, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v27, v28, "#TaskLoggingService - created requestEvent: %s, for interactionId: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v30, -1, -1);
    MEMORY[0x1B5E44758](v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  outlined consume of Data._Representation(v18, v20);

  swift_release();
  swift_beginAccess();
  return v44;
}

unint64_t lazy protocol witness table accessor for type SiriKitRequestEvent and conformance SiriKitRequestEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitRequestEvent and conformance SiriKitRequestEvent;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent and conformance SiriKitRequestEvent)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitRequestEvent, &type metadata for SiriKitRequestEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent and conformance SiriKitRequestEvent);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriKitRequestEvent(_QWORD *a1)
{
  return SiriKitRequestEvent.encode(to:)(a1);
}

uint64_t SiriKitRequestEvent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriKitRequestEvent.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitRequestEvent.CodingKeys, &unk_1E6853F68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitRequestEvent.CodingKeys, &unk_1E6853F68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitRequestEvent.CodingKeys, &unk_1E6853F68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriKitRequestEvent.CodingKeys, &unk_1E6853F68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriKitRequestEvent.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4C575E0
                                                            + 4 * asc_1B4EF0A50[*v0]))(0x6449707061, 0xE500000000000000);
}

uint64_t sub_1B4C575E0()
{
  return 0x6C70736944707061;
}

uint64_t sub_1B4C57604()
{
  return 0x6973726556707061;
}

unint64_t sub_1B4C57624()
{
  return 0xD000000000000014;
}

uint64_t sub_1B4C57640()
{
  return 0x646F43726F727265;
}

uint64_t sub_1B4C5765C()
{
  return 0x614E746E65746E69;
}

unint64_t MetricsEventInformation.dictionaryRepresentation.getter()
{
  __int128 *v0;
  uint64_t inited;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE6D00;
  v2 = *v0;
  v9 = v0[1];
  v3 = v9;
  v10 = v2;
  *(_OWORD *)(inited + 48) = v2;
  *(_OWORD *)(inited + 80) = v3;
  v4 = v0[3];
  v8 = v0[4];
  *(_OWORD *)(inited + 112) = v8;
  v7 = v0[2];
  *(_OWORD *)(inited + 144) = v7;
  *(_QWORD *)(inited + 32) = 0x6B736154776F6C66;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 64) = 0xD000000000000010;
  *(_QWORD *)(inited + 72) = 0x80000001B4EFE4A0;
  *(_QWORD *)(inited + 96) = 0x6C646E7542707061;
  *(_QWORD *)(inited + 104) = 0xEB00000000644965;
  strcpy((char *)(inited + 128), "interactionId");
  *(_WORD *)(inited + 142) = -4864;
  *(_QWORD *)(inited + 160) = 0xD000000000000011;
  *(_QWORD *)(inited + 168) = 0x80000001B4EF49F0;
  v6 = v4;
  *(_OWORD *)(inited + 176) = v4;
  outlined retain of String((uint64_t)&v10);
  outlined retain of String((uint64_t)&v9);
  outlined retain of String((uint64_t)&v8);
  outlined retain of String((uint64_t)&v7);
  outlined retain of String((uint64_t)&v6);
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t outlined retain of String(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void protocol witness for AceServiceInvokerAsync.submitAndForget(_:setRefId:) in conformance AceServiceInvokerImpl(NSObject *a1, char a2)
{
  AceServiceInvokerImpl.submitAndForget(_:setRefId:)(a1, a2);
}

void protocol witness for AceServiceInvokerAsync.submitAndForget(_:setRefId:) in conformance AceServiceInvokerImpl(Swift::OpaquePointer a1, Swift::Bool a2)
{
  AceServiceInvokerImpl.submitAndForget(_:setRefId:)(a1, a2);
}

Swift::Void __swiftcall AceServiceInvokerImpl.submitAndForget(_:setRefId:)(Swift::OpaquePointer _, Swift::Bool setRefId)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Bool v6;
  NSObject *v7;
  NSObject *v8;

  if (!((unint64_t)_._rawValue >> 62))
  {
    v4 = *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_10;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = setRefId;
    do
    {
      if (((unint64_t)_._rawValue & 0xC000000000000001) != 0)
        v7 = MEMORY[0x1B5E43B94](v5, _._rawValue);
      else
        v7 = *((id *)_._rawValue + v5 + 4);
      v8 = v7;
      ++v5;
      AceServiceInvokerImpl.submitAndForget(_:setRefId:)(v7, v6);

    }
    while (v4 != v5);
    goto LABEL_10;
  }
  __break(1u);
}

void AceServiceInvokerImpl.submitAndForget(_:setRefId:)(NSObject *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t aBlock[6];

  v3 = v2;
  v6 = v3[19];
  v7 = (os_unfair_lock_s *)(v6 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 20));
  LOBYTE(v6) = *(_BYTE *)(v6 + 16);
  os_unfair_lock_unlock(v7);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    oslog = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v9, "Attempting to submitAndForget a command on an invalidated AceServiceInvoker. Ignoring.", v10, 2u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

  }
  else
  {
    if ((a2 & 1) != 0)
      v11 = (void *)MEMORY[0x1E0DEE9D8];
    else
      v11 = &outlined read-only object #0 of AceServiceInvokerImpl.submitAndForget(_:setRefId:);
    v12 = AceServiceInvokerImpl.preparedCommand(_:options:)(a1, (uint64_t)v11);
    swift_bridgeObjectRelease();
    AceServiceInvokerImpl.closeServerRequestIfRequired(givenCommand:)((uint64_t)v12);
    v14 = v3[5];
    v13 = v3[6];
    v15 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    v16 = v12;
    swift_bridgeObjectRetain();
    v17 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(v12, 0, 0, 0, 0, 0, 0, 0, 0, 0, v14, v13);

    if (one-time initialization token for ace != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.ace);
    v19 = v16;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      osloga = v17;
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      aBlock[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v24 = -[NSObject description](v19, sel_description);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      v28 = v25;
      v17 = osloga;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v20, v21, "Submitting command via submitAndForget: %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v23, -1, -1);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }
    else
    {

    }
    v29 = (void *)v3[2];
    aBlock[4] = (uint64_t)closure #2 in AceServiceInvokerImpl.submitAndForget(_:setRefId:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_6;
    v30 = _Block_copy(aBlock);
    objc_msgSend(v29, sel_submitWithExecutionOutput_completion_, v17, v30);
    _Block_release(v30);

  }
}

NSObject *AceServiceInvokerImpl.preparedCommand(_:options:)(NSObject *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v11;
  char v12;
  uint64_t v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = (uint64_t *)(a2 + 40);
    do
    {
      v8 = *v6;
      v6 += 2;
      v7 = v8;
      v9 = v8 != 0;
      v11 = v5-- != 0;
    }
    while (v7 && v11);
  }
  else
  {
    v9 = 1;
  }
  AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(a1, v9);
  specialized AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(a1, v9);
  AceServiceInvokerImpl.shouldWrapCommandForExecution(_:)();
  if ((v12 & 1) != 0)
  {
    v13 = swift_retain();
    specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)(v13, a1);
    swift_release();
    v14 = specialized AceServiceInvokerImpl.wrapCommandForExecution(_:assistantId:)(a1, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
  }
  else
  {
    if (!v4)
    {
LABEL_16:
      specialized static AceMetricsLogger.logAnalytics(command:)(a1);
      return a1;
    }
    v15 = (unint64_t *)(a2 + 40);
    while (1)
    {
      v16 = *v15;
      if (*v15)
        break;
      v15 += 2;
      if (!--v4)
        goto LABEL_16;
    }
    v18 = *(v15 - 1);
    v19 = one-time initialization token for ace;
    swift_bridgeObjectRetain();
    if (v19 != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.ace);
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v33 = v18;
      v23 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v35 = v32;
      *(_DWORD *)v23 = 136315138;
      v24 = swift_bridgeObjectRetain();
      v25 = MEMORY[0x1B5E434D4](v24, &type metadata for AceServiceInvokerImpl.AceSubmitOptions);
      v27 = v26;
      swift_bridgeObjectRelease();
      v28 = v25;
      v18 = v33;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v21, v22, "Submitting to remote assistant: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v32, -1, -1);
      MEMORY[0x1B5E44758](v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v29 = swift_retain();
    specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)(v29, a1);
    swift_release();
    v30 = specialized AceServiceInvokerImpl.wrapCommandForExecution(_:assistantId:)(a1, v18, v16);
    swift_bridgeObjectRelease();
    v14 = v30;
  }
  v31 = v14;
  AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(v14, v9);

  return v31;
}

void AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(void *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, sel_aceId);
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

  }
  else
  {
    UUID.init()();
    v12 = UUID.uuidString.getter();
    v14 = v15;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v16 = (void *)MEMORY[0x1B5E432E8](v12, v14);
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setAceId_, v16);

  if ((a2 & 1) != 0)
  {
    if (v3[8])
    {
      v17 = v3[7];
      v18 = v3[8];
    }
    else
    {
      v17 = v3[5];
      v18 = v3[6];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    v19 = (void *)MEMORY[0x1B5E432E8](v17, v18);
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setRefId_, v19);

  }
}

void specialized AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  unint64_t v10;
  id v11;
  NSArray v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  unint64_t v23;
  id v24;
  Class isa;
  id v26;
  void *v27;
  _QWORD v28[2];

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  objc_opt_self();
  v5 = swift_dynamicCastObjCClass();
  if (v5)
  {
    v6 = (void *)v5;
    v7 = a1;
    v8 = objc_msgSend(v6, sel_dialogs);
    if (v8)
    {
      v9 = v8;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SADialog);
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v11 = v7;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8SADialogCG_AGs5NeverOTg50140_s14SiriKitRuntime21AceServiceInvokerImplC22addMissingComponentIds33_6F702868F5EE7637FC7805F00DECC893LL_8setRefIdySo13SABaseCommandC_SbtFSo8D7CAJcfU_SbSo13SABaseCommandCTf1cn_nTf4nng_n(v10, a2 & 1, v11);
      swift_bridgeObjectRelease();

      v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v12.super.isa = 0;
    }
    objc_msgSend(v6, sel_setDialogs_, v12.super.isa);
    swift_release();

    return;
  }
  objc_opt_self();
  v13 = (void *)swift_dynamicCastObjCClass();
  v14 = a1;
  if (!v13)
  {
    swift_release();
    return;
  }
  v26 = v14;
  v15 = objc_msgSend(v13, sel_views);
  if (!v15)
  {
    isa = 0;
    objc_msgSend(v13, sel_setViews_, 0, v23);
LABEL_24:
    swift_release();

    return;
  }
  v16 = v15;
  v17 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v18 >> 62)
    goto LABEL_21;
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
  {
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_setViews_, isa, v23);
    goto LABEL_24;
  }
  while (1)
  {
    v23 = v17;
    v24 = v13;
    v28[1] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v19 < 0)
      break;
    v20 = 0;
    v17 = v18 & 0xC000000000000001;
    while (v19 != v20)
    {
      if (v17)
        v21 = (id)MEMORY[0x1B5E43B94](v20, v18);
      else
        v21 = *(id *)(v18 + 8 * v20 + 32);
      v22 = v21;
      v27 = v21;
      closure #2 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(&v27, a2 & 1, v26, (uint64_t (*)(void))partial apply for closure #1 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:), v4, v28);

      ++v20;
      v13 = (void *)v28[0];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v19 == v20)
      {
        swift_bridgeObjectRelease();
        v13 = v24;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_22;
  }
  __break(1u);

  swift_release();
  __break(1u);
}

void AceServiceInvokerImpl.shouldWrapCommandForExecution(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[5];

  v0 = type metadata accessor for Logger();
  v2[3] = *(_QWORD *)(v0 - 8);
  v2[4] = v0;
  MEMORY[0x1E0C80A78](v0);
  v2[2] = (char *)v2 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  JUMPOUT(0x1B4C58580);
}

void AceServiceInvokerImpl.closeServerRequestIfRequired(givenCommand:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  if (one-time initialization token for ace != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.ace);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Checking to see if server request should be closed..", v7, 2u);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  v8 = (os_unfair_lock_s *)v2[21];
  v9 = v8 + 4;
  v10 = v8 + 5;
  os_unfair_lock_lock(v8 + 5);
  closure #1 in AceServiceInvokerImpl.closeServerRequestIfRequired(givenCommand:)(v9, a1, v2);
  os_unfair_lock_unlock(v10);
}

uint64_t type metadata accessor for ExecutionOutput()
{
  return objc_opt_self();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(a1, a2, a3, (uint64_t)&unk_1E68511B8, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:));
}

uint64_t protocol witness for CurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:) in conformance SiriKitCurareDonator(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  void *v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void *v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v90 = a8;
  v91 = a6;
  v88 = a7;
  v89 = a5;
  v87 = a4;
  v84 = a1;
  v85 = (char *)a3;
  v95 = a2;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v86 = *(_QWORD *)(v22 - 8);
  v23 = *(_QWORD *)(v86 + 64);
  MEMORY[0x1E0C80A78](v22);
  v94 = (uint64_t)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for Date();
  v24 = *(_QWORD *)(v93 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  MEMORY[0x1E0C80A78](v93);
  v26 = type metadata accessor for ActivityType();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_QWORD *)(v27 + 64);
  MEMORY[0x1E0C80A78](v26);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  result = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(void **)(v21 + 16);
  if (v33)
  {
    v81 = a19;
    v82 = a20;
    v92 = a18;
    v79 = a16;
    v80 = a17;
    v77 = a15;
    v75 = a14;
    v74 = a13;
    v72 = a12;
    v76 = a11;
    v73 = a10;
    v83 = a9;
    v78 = v33;
    static TaskPriority.background.getter();
    v34 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v32, 0, 1, v34);
    v35 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
    v70 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    v69 = v26;
    v35(v70, v84, v26);
    v36 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    v71 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    v36(v71, v85, v93);
    outlined init with copy of SiriKitReliabilityCodes?(a21, v94);
    v37 = (*(unsigned __int8 *)(v27 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v38 = (v28 + *(unsigned __int8 *)(v24 + 80) + v37) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v39 = (v25 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    v85 = v32;
    v41 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    v66 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
    v68 = (v66 + 23) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v68 + 23) & 0xFFFFFFFFFFFFFFF8;
    v65 = (*(unsigned __int8 *)(v86 + 80) + v42 + 16) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
    v43 = (v23 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = (v43 + 23) & 0xFFFFFFFFFFFFFFF8;
    v84 = (v67 + 23) & 0xFFFFFFFFFFFFFFF8;
    v86 = (v84 + 23) & 0xFFFFFFFFFFFFFFF8;
    v44 = (char *)swift_allocObject();
    *((_QWORD *)v44 + 2) = 0;
    *((_QWORD *)v44 + 3) = 0;
    *((_QWORD *)v44 + 4) = v95;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v44[v37], v70, v69);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v44[v38], v71, v93);
    *(_QWORD *)&v44[v39] = v72;
    v45 = &v44[v40];
    v47 = v75;
    v46 = v76;
    *(_QWORD *)v45 = v74;
    *((_QWORD *)v45 + 1) = v47;
    v48 = &v44[v41];
    *(_QWORD *)v48 = v73;
    *((_QWORD *)v48 + 1) = v46;
    v49 = &v44[v66];
    v50 = v79;
    *(_QWORD *)v49 = v77;
    *((_QWORD *)v49 + 1) = v50;
    v51 = &v44[v68];
    v52 = v92;
    *(_QWORD *)v51 = v80;
    *((_QWORD *)v51 + 1) = v52;
    v53 = &v44[v42];
    v54 = (uint64_t)&v44[v65];
    v55 = v82;
    *(_QWORD *)v53 = v81;
    *((_QWORD *)v53 + 1) = v55;
    outlined init with take of SiriKitReliabilityCodes?(v94, v54);
    v56 = &v44[v43];
    v57 = v88;
    v58 = v89;
    *(_QWORD *)v56 = v91;
    *((_QWORD *)v56 + 1) = v57;
    v59 = &v44[v67];
    *(_QWORD *)v59 = v87;
    *((_QWORD *)v59 + 1) = v58;
    v60 = v83;
    v61 = &v44[v84];
    *(_QWORD *)v61 = v90;
    *((_QWORD *)v61 + 1) = v60;
    v62 = v78;
    *(_QWORD *)&v44[v86] = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63 = v62;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v64 = (uint64_t)v85;
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v85, (uint64_t)&async function pointer to partial apply for closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:), (uint64_t)v44);

    swift_release();
    return outlined destroy of ReferenceResolutionClientProtocol?(v64, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  }
  return result;
}

uint64_t outlined init with take of SiriKitReliabilityCodes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of SiriKitRequestEvent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t SiriKitFlowActivity.__deallocating_deinit()
{
  SiriKitFlowActivity.deinit();
  return swift_deallocClassInstance();
}

uint64_t SiriKitFlowActivity.deinit()
{
  uint64_t v0;

  v0 = DefaultFlowActivity.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CamBridge.commit(rcId:) in conformance CamBridgeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return CamBridgeImpl.commit(rcId:)(a1, a2);
}

uint64_t CamBridgeImpl.commit(rcId:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 120);
  swift_release();
  v5 = type metadata accessor for UUID();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  v6(v3, 1, 1, v5);
  v6(v2, 1, 1, v5);
  type metadata accessor for CamBridgeState();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1, v7 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v3, v7 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v2, v7 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v4 + 240) = v7;
  swift_retain();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[14];
  if (v4)
  {
    v6 = v0[13];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v26 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "CamBridge: Commit with rcId: %s.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = v0[15];
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 240);
  swift_beginAccess();
  v11 = *(_QWORD *)(v10 + 16);
  if (*(_QWORD *)(v11 + 16))
  {
    v13 = v0[13];
    v12 = v0[14];
    swift_bridgeObjectRetain();
    swift_retain();
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    if ((v15 & 1) != 0)
    {
      v16 = *(_BYTE *)(*(_QWORD *)(v11 + 56) + v14);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRetain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  v19 = os_log_type_enabled(v17, v18);
  v20 = v0[14];
  if (v19)
  {
    v21 = v0[13];
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v26 = v23;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v17, v18, "CamBridge: Could not find camAction for rcId: %s. Possibly a followup", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v23, -1, -1);
    MEMORY[0x1B5E44758](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v16 = 0;
LABEL_15:
  v24 = (_QWORD *)swift_task_alloc();
  v0[20] = v24;
  *v24 = v0;
  v24[1] = CamBridgeImpl.commit(rcId:);
  return CamBridgeImpl.commit(action:)(v16);
}

uint64_t CamBridgeImpl.commit(rcId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[19] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t CamBridgeImpl.commit(action:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int v3;
  int8x16_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  char v20;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release();
  v2 = (uint64_t *)(v1 + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v2, v0 + 64);
  v3 = *(unsigned __int8 *)(v0 + 105);
  if (v3 == 1)
  {
    v9 = (__int128 *)(v0 + 16);
    v10 = v0 + 112;
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 64), v0 + 112);
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = *(_BYTE *)(v0 + 59);
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v22 = v16;
      *(_DWORD *)v15 = 136315138;
      *(_BYTE *)(v0 + 58) = v14;
      v17 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v10 = v0 + 112;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v12, v13, "CamBridge: Setting previous cam action to: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v16, -1, -1);
      v19 = v15;
      v9 = (__int128 *)(v0 + 16);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }

    v20 = *(_BYTE *)(v0 + 59);
    outlined init with copy of ReferenceResolutionClientProtocol(v10, (uint64_t)v9);
    *(_BYTE *)(v0 + 56) = v20;
    *(_BYTE *)(v0 + 57) = 1;
    swift_beginAccess();
    outlined assign with copy of CamBridgeImpl.CamState(v9, (uint64_t)v2);
    swift_endAccess();
    CamBridgeImpl.camState.didset();
    outlined destroy of CamBridgeImpl.CamState((uint64_t)v9);
    __swift_destroy_boxed_opaque_existential_1(v10);
  }
  else if (v3 != 3
         || *(_BYTE *)(v0 + 104)
         || (v4 = vorrq_s8(*(int8x16_t *)(v0 + 72), *(int8x16_t *)(v0 + 88)),
             *(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | *(_QWORD *)(v0 + 64)))
  {
    outlined destroy of CamBridgeImpl.CamState(v0 + 64);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B4BE6000, v6, v7, "CamBridge: Commit called while CamBridge in uninitialized state. Ignoring.", v8, 2u);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CamBridgeImpl.commit(action:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 232) = v1;
  *(_BYTE *)(v2 + 59) = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v2 + 240) = static MessageBusActor.shared;
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 248) = v3;
  *v3 = v2;
  v3[1] = CamBridgeImpl.commit(action:);
  return CamBridgeImpl.waitForCamWarmup()();
}

uint64_t outlined assign with copy of CamBridgeImpl.CamState(__int128 *a1, uint64_t a2)
{
  assignWithCopy for CamBridgeImpl.CamState(a2, a1);
  return a2;
}

uint64_t assignWithCopy for CamBridgeImpl.CamState(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    switch(v4)
    {
      case 2u:

        break;
      case 1u:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    v5 = *((unsigned __int8 *)a2 + 41);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v6 = *(void **)a2;
      v7 = v6;
      *(_QWORD *)a1 = v6;
      *(_BYTE *)(a1 + 41) = 2;
    }
    else if (v5 == 1)
    {
      v8 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_BYTE *)(a1 + 41) = 1;
    }
    else if (v5)
    {
      v9 = *a2;
      v10 = a2[1];
      *(_OWORD *)(a1 + 26) = *(__int128 *)((char *)a2 + 26);
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 41) = 0;
      swift_retain();
    }
  }
  return a1;
}

void CamBridgeImpl.camState.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9[6];
  uint64_t v10;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CamState((uint64_t *)(v1 + 144), (uint64_t)v9);
    v7 = String.init<A>(describing:)();
    v9[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "CamBridge: camState set to %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AnnounceTypeGlobalOverride(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTag for CamBridgeImpl.CamState(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

ValueMetadata *type metadata accessor for ConversationAction()
{
  return &type metadata for ConversationAction;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyEncodable()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

uint64_t getEnumTagSinglePayload for ConversationAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t partial apply for closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *(_BYTE *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 16);
  v6 = *(_OWORD *)(v0 + 32);
  v7 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v4 + 64) = v3;
  *(_BYTE *)(v4 + 128) = v2;
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  return swift_task_switch();
}

void ConversationBridgeProcessorDelegate.submit(executionOutput:completion:)(void *a1, void (*a2)(_QWORD, void *), uint64_t a3)
{
  uint64_t Strong;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, void (*)(_QWORD, void *), uint64_t))(*(_QWORD *)Strong + 904))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    v8 = a1;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v17 = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = *(_QWORD *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v13 = *(_QWORD *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v9, v10, "ConversationRequestProcessor already released, ingoring sumbit of %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v12, -1, -1);
      MEMORY[0x1B5E44758](v11, -1, -1);

    }
    else
    {

    }
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v15 = (void *)swift_allocError();
    *v16 = 0;
    a2(0, v15);

  }
}

void ConversationRequestProcessor.submit(executionOutput:completion:)(void *a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  Swift::String *v3;
  Swift::String *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  Swift::String *v21;
  void (*v22)(_QWORD, _QWORD);
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t countAndFlagsBits;
  uint8_t *object;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t (*v49)(uint64_t);
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  Swift::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void (*v67)(_QWORD, _QWORD);
  void (*v68)(_QWORD *, uint64_t, uint8_t *, uint64_t, char *, char *, _QWORD, uint64_t, uint64_t, void *, uint64_t, _QWORD, _QWORD, uint64_t (*)(void *, void *), _QWORD *);
  _QWORD *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  void *v73;
  _BYTE *v74;
  void *v75;
  uint64_t v76;
  id v77;
  void *v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void *v95;
  _BYTE *v96;
  char *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(_QWORD, _QWORD);
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127[3];
  uint64_t v128[4];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v121 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UserID();
  v119 = *(_QWORD *)(v10 - 8);
  v120 = (char *)v10;
  MEMORY[0x1E0C80A78](v10);
  v118 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for RequestType();
  v123 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117);
  v122 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  v15 = a1;
  v125 = v14;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v124 = a3;
    v116 = v19;
    v128[0] = v19;
    *(_DWORD *)v18 = 136315138;
    v115 = v18 + 4;
    v20 = objc_msgSend(v15, sel_debugDescription);
    v21 = v4;
    v22 = a2;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v15;
    v26 = v25;

    v27 = v23;
    a2 = v22;
    v4 = v21;
    v127[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15 = v24;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v16, v17, "<<<--- %s", v18, 0xCu);
    v28 = v116;
    swift_arrayDestroy();
    a3 = v124;
    MEMORY[0x1B5E44758](v28, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);
  }
  else
  {

  }
  v30 = *(_QWORD *)&v15[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
  v29 = *(_QWORD *)&v15[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
  countAndFlagsBits = v4[4]._countAndFlagsBits;
  object = (uint8_t *)v4[4]._object;
  v33 = v30 == countAndFlagsBits && v29 == (_QWORD)object;
  if (!v33
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (v30 != v4[5]._countAndFlagsBits || (void *)v29 != v4[5]._object)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v115 = object;
    v116 = countAndFlagsBits;
    v97 = v15;
    swift_retain();
    v98 = Logger.logObject.getter();
    v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = swift_slowAlloc();
      v125 = swift_slowAlloc();
      v128[0] = v125;
      *(_DWORD *)v100 = 136315394;
      swift_bridgeObjectRetain();
      v127[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v100 + 12) = 2080;
      v101 = (unint64_t)v115;
      swift_bridgeObjectRetain();
      v127[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v101, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B4BE6000, v98, v99, "Received FlowOutput for requestId:%s on ConversationRequestProcessor with requestId:%s .. dropping it on the floor", (uint8_t *)v100, 0x16u);
      v102 = v125;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v102, -1, -1);
      MEMORY[0x1B5E44758](v100, -1, -1);
    }
    else
    {

      swift_release();
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v73 = (void *)swift_allocError();
    *v111 = 0;
LABEL_22:
    a2(0, v73);

    return;
  }
  v34 = (*(uint64_t (**)(void))(v4->_countAndFlagsBits + 528))();
  if (!v34)
  {
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v72 = 0;
      _os_log_impl(&dword_1B4BE6000, v70, v71, "Request already canceled. Not submitting flow output", v72, 2u);
      MEMORY[0x1B5E44758](v72, -1, -1);
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v73 = (void *)swift_allocError();
    *v74 = 1;
    goto LABEL_22;
  }
  v35 = v34;
  v116 = countAndFlagsBits;
  v36 = (uint64_t *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v37 = *v36;
  if ((unint64_t)*v36 >> 62 == 1)
  {
    v114 = a2;
    v115 = object;
    v124 = a3;
    v38 = v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 16);
    v40 = v38;
    v41 = v35;
    v113 = v35;
    v42 = v117;
    v39(v122, v40, v117);
    v43 = (void **)(v41 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
    swift_beginAccess();
    v44 = v15;
    v45 = *v43;
    v47 = v118;
    v46 = v119;
    v48 = v120;
    (*(void (**)(char *, uint64_t, char *))(v119 + 16))(v118, (v37 & 0x3FFFFFFFFFFFFFFFLL) + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v120);
    v49 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v44) + 0xA0);
    v50 = v45;
    v125 = v37 & 0x3FFFFFFFFFFFFFFFLL;
    v51 = swift_retain();
    LOBYTE(v49) = v49(v51);
    type metadata accessor for ConversationContextUpdateMetadata();
    v52 = swift_allocObject();
    *(_BYTE *)(v52 + 16) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v123 + 32))(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v122, v42);
    *(_QWORD *)(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v45;
    (*(void (**)(uint64_t, char *, char *))(v46 + 32))(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v47, v48);
    *(_BYTE *)(v52 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = v49 & 1;
    v53 = *(_QWORD *)((char *)v44 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
    swift_bridgeObjectRetain();
    specialized ConversationRequestProcessor.applyEmptyNativeFlowContextUpdateIfRequired(_:selectedResultCandidateId:metadata:)(v53, v52);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD))(**(_QWORD **)((char *)&v4->_countAndFlagsBits
                                                 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker)
                                   + 256))(*(_QWORD *)((char *)v44 + OBJC_IVAR___SKRExecutionOutput_command));
    v54 = v113;
    if (one-time initialization token for insightRequestSummaryLogger != -1)
      swift_once();
    v55 = type metadata accessor for InsightRequestSummaryLogger();
    v56 = __swift_project_value_buffer(v55, (uint64_t)static Logger.insightRequestSummaryLogger);
    v57 = v44;
    swift_retain();
    specialized InsightRequestSummaryLogger.emitDebug(_:)(v56, v4, (uint64_t)v57);

    swift_release();
    v58 = *(uint64_t *)((char *)&v4->_countAndFlagsBits
                     + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
    v59 = v4[5]._countAndFlagsBits;
    v122 = (char *)v4[5]._object;
    v123 = v59;
    v120 = (char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater;
    v60 = v4[6]._object;
    v119 = v4[6]._countAndFlagsBits;
    v61 = (char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
    v62 = v4;
    v63 = type metadata accessor for UUID();
    v64 = *(_QWORD *)(v63 - 8);
    v65 = (uint64_t)v121;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v121, v61, v63);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v65, 0, 1, v63);
    v66 = (_QWORD *)swift_allocObject();
    v66[2] = v62;
    v66[3] = v54;
    v67 = v114;
    v66[4] = v57;
    v66[5] = v67;
    v66[6] = v124;
    v68 = *(void (**)(_QWORD *, uint64_t, uint8_t *, uint64_t, char *, char *, _QWORD, uint64_t, uint64_t, void *, uint64_t, _QWORD, _QWORD, uint64_t (*)(void *, void *), _QWORD *))(*(_QWORD *)v58 + 264);
    v69 = v57;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v68(v69, v116, v115, v123, v122, v120, 0, v52, v119, v60, v65, 0, 0, partial apply for closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:), v66);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v65, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    v75 = *(void **)&v15[OBJC_IVAR___SKRExecutionOutput_command];
    if (!v75)
      goto LABEL_29;
    v76 = one-time initialization token for warmUpSignals;
    v77 = v75;
    if (v76 != -1)
      swift_once();
    v78 = (void *)static ConversationRequestProcessor.warmUpSignals;
    v127[0] = swift_getObjectType();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand.Type);
    LODWORD(v78) = objc_msgSend(v78, sel_containsObject_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();

    if ((_DWORD)v78)
    {
      v114 = a2;
      v115 = object;
      v79 = v15;
      v80 = Logger.logObject.getter();
      v81 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = swift_slowAlloc();
        v113 = v35;
        v83 = (uint8_t *)v82;
        v84 = swift_slowAlloc();
        v125 = (uint64_t)v4;
        v126 = (uint64_t)v75;
        v85 = v84;
        v127[0] = v84;
        *(_DWORD *)v83 = 136315138;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
        v86 = Optional.debugDescription.getter();
        v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B4BE6000, v80, v81, "Sending warmUp command: %s", v83, 0xCu);
        swift_arrayDestroy();
        v88 = v85;
        v4 = (Swift::String *)v125;
        MEMORY[0x1B5E44758](v88, -1, -1);
        MEMORY[0x1B5E44758](v83, -1, -1);
      }
      else
      {

      }
      v103 = *(uint64_t *)((char *)&v4->_countAndFlagsBits
                        + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
      v104 = v4[5]._countAndFlagsBits;
      v105 = v4[5]._object;
      v106 = type metadata accessor for UUID();
      v107 = (uint64_t)v121;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v121, 1, 1, v106);
      (*(void (**)(void *, uint64_t, uint8_t *, uint64_t, void *, _QWORD, _QWORD, _QWORD, uint64_t, void (*)(_QWORD, _QWORD), uint64_t))(*(_QWORD *)v103 + 296))(v75, v116, v115, v104, v105, 0, 0, 0, v107, v114, a3);
      outlined destroy of ReferenceResolutionClientProtocol?(v107, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for insightRequestSummaryLogger != -1)
        swift_once();
      v108 = type metadata accessor for InsightRequestSummaryLogger();
      v109 = __swift_project_value_buffer(v108, (uint64_t)static Logger.insightRequestSummaryLogger);
      v110 = v79;
      swift_retain();
      specialized InsightRequestSummaryLogger.emitDebug(_:)(v109, v4, (uint64_t)v110);

      swift_release();
    }
    else
    {
LABEL_29:
      v89 = Logger.logObject.getter();
      v90 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v89, v90))
      {
        v91 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v91 = 0;
        _os_log_impl(&dword_1B4BE6000, v89, v90, "EXECUTION IS TRYING TO SUBMIT FLOWOUTPUT BEFORE ENDPOINTING!! THIS MUST NOT HAPPEN", v91, 2u);
        MEMORY[0x1B5E44758](v91, -1, -1);
      }

      if (one-time initialization token for insightRequestSummaryLogger != -1)
        swift_once();
      v92 = type metadata accessor for InsightRequestSummaryLogger();
      v93 = __swift_project_value_buffer(v92, (uint64_t)static Logger.insightRequestSummaryLogger);
      v94 = v15;
      swift_retain();
      specialized InsightRequestSummaryLogger.emitDebug(_:)(v93, v4, (uint64_t)v94);

      swift_release();
      lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
      v95 = (void *)swift_allocError();
      *v96 = 8;
      a2(0, v95);

    }
    swift_release();
  }
}

uint64_t ExecutionOutput.debugDescription.getter()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  unint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  unint64_t v54;
  uint64_t v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  Swift::String v63;
  unint64_t v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Swift::String v71;
  uint64_t v72;
  void *v73;
  Swift::String v74;
  unint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  Swift::String v84;
  Swift::String v85;
  objc_super v87;
  uint64_t v88;
  unint64_t v89;

  v1 = v0;
  v87.receiver = v0;
  v87.super_class = (Class)type metadata accessor for ExecutionOutput();
  v2 = objc_msgSendSuper2(&v87, sel_debugDescription);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v88 = v3;
  v89 = v5;
  v6._countAndFlagsBits = 2128672;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v8 = v88;
  v7 = v89;
  v88 = 0;
  v89 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
  v11 = *(void **)&v1[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14 = v88;
  v15 = (void *)v89;
  v88 = v8;
  v89 = v7;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v88;
  v17 = v89;
  v88 = 0;
  v89 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 8250;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  v20 = *(void **)&v1[OBJC_IVAR___SKRExecutionOutput_command];
  if (v20)
  {
    v21 = objc_msgSend(v20, sel_debugDescription);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

  }
  else
  {
    v24 = (void *)0xE500000000000000;
    v22 = 0x3E6C696E3CLL;
  }
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27 = v88;
  v28 = (void *)v89;
  v88 = v18;
  v89 = v17;
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v88;
  v30 = v89;
  v88 = 0;
  v89 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  v32._countAndFlagsBits = 8250;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  v33 = *(void **)&v1[OBJC_IVAR___SKRExecutionOutput_contextUpdate];
  if (v33)
  {
    v34 = objc_msgSend(v33, sel_debugDescription);
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = v36;

  }
  else
  {
    v37 = (void *)0xE500000000000000;
    v35 = 0x3E6C696E3CLL;
  }
  v38._countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 8236;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  v40 = v88;
  v41 = (void *)v89;
  v88 = v31;
  v89 = v30;
  swift_bridgeObjectRetain();
  v42._countAndFlagsBits = v40;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = v88;
  v43 = v89;
  v88 = 0;
  v89 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  v45._countAndFlagsBits = 8250;
  v45._object = (void *)0xE200000000000000;
  String.append(_:)(v45);
  if (*(_QWORD *)&v1[OBJC_IVAR___SKRExecutionOutput_fullPrint + 8])
  {
    v46 = String.debugDescription.getter();
    v48 = v47;
  }
  else
  {
    v48 = 0xE500000000000000;
    v46 = 0x3E6C696E3CLL;
  }
  v49 = v48;
  String.append(_:)(*(Swift::String *)&v46);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 8236;
  v50._object = (void *)0xE200000000000000;
  String.append(_:)(v50);
  v51 = v88;
  v52 = (void *)v89;
  v88 = v44;
  v89 = v43;
  swift_bridgeObjectRetain();
  v53._countAndFlagsBits = v51;
  v53._object = v52;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = v88;
  v54 = v89;
  v88 = 0;
  v89 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  v56._countAndFlagsBits = 8250;
  v56._object = (void *)0xE200000000000000;
  String.append(_:)(v56);
  if (*(_QWORD *)&v1[OBJC_IVAR___SKRExecutionOutput_fullSpeak + 8])
  {
    v57 = String.debugDescription.getter();
    v59 = v58;
  }
  else
  {
    v59 = 0xE500000000000000;
    v57 = 0x3E6C696E3CLL;
  }
  v60 = v59;
  String.append(_:)(*(Swift::String *)&v57);
  swift_bridgeObjectRelease();
  v61 = v88;
  v62 = (void *)v89;
  v88 = v55;
  v89 = v54;
  swift_bridgeObjectRetain();
  v63._countAndFlagsBits = v61;
  v63._object = v62;
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = v88;
  v64 = v89;
  v88 = 0;
  v89 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  v66._countAndFlagsBits = 8250;
  v66._object = (void *)0xE200000000000000;
  String.append(_:)(v66);
  if (*(_QWORD *)&v1[OBJC_IVAR___SKRExecutionOutput_redactedFullPrint + 8])
  {
    v67 = String.debugDescription.getter();
    v69 = v68;
  }
  else
  {
    v69 = 0xE500000000000000;
    v67 = 0x3E6C696E3CLL;
  }
  v70 = v69;
  String.append(_:)(*(Swift::String *)&v67);
  swift_bridgeObjectRelease();
  v71._countAndFlagsBits = 8236;
  v71._object = (void *)0xE200000000000000;
  String.append(_:)(v71);
  v72 = v88;
  v73 = (void *)v89;
  v88 = v65;
  v89 = v64;
  swift_bridgeObjectRetain();
  v74._countAndFlagsBits = v72;
  v74._object = v73;
  String.append(_:)(v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v76 = v88;
  v75 = v89;
  v88 = 0;
  v89 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  v77._countAndFlagsBits = 8250;
  v77._object = (void *)0xE200000000000000;
  String.append(_:)(v77);
  if (*(_QWORD *)&v1[OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak + 8])
  {
    v78 = String.debugDescription.getter();
    v80 = v79;
  }
  else
  {
    v80 = 0xE500000000000000;
    v78 = 0x3E6C696E3CLL;
  }
  v81 = v80;
  String.append(_:)(*(Swift::String *)&v78);
  swift_bridgeObjectRelease();
  v82 = v88;
  v83 = (void *)v89;
  v88 = v76;
  v89 = v75;
  swift_bridgeObjectRetain();
  v84._countAndFlagsBits = v82;
  v84._object = v83;
  String.append(_:)(v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v85._countAndFlagsBits = 125;
  v85._object = (void *)0xE100000000000000;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  return v88;
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  return Optional<A>.encode(to:)();
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  return Optional<A>.encode(to:)();
}

{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(uint64_t a1)
{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1, &demangling cache variable for type metadata for Parse?, &lazy protocol witness table cache variable for type Parse and conformance Parse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C698], MEMORY[0x1E0D9C6A8]);
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1, &demangling cache variable for type metadata for CamParse?, &lazy protocol witness table cache variable for type CamParse and conformance CamParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D97A50], MEMORY[0x1E0D97A60]);
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Int?);
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1, &demangling cache variable for type metadata for Double?);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(a3, a4, a5);
  return Optional<A>.encode(to:)();
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x1E0DEE9B8] + 8;
  v11 = MEMORY[0x1E0DEA968];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          outlined consume of [Int : @Sendable ()].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      result = (unint64_t)outlined init with take of Any(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    outlined init with take of Any(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  _BYTE v65[32];
  _BYTE v66[40];

  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?));
  MEMORY[0x1E0C80A78](v61);
  v60 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Any?));
  MEMORY[0x1E0C80A78](v59);
  v58 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ConversationSessionKey();
  v57 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v55 = (char *)&v48 - v8;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable?));
  v9 = MEMORY[0x1E0C80A78](v54);
  v53 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v52 = (char *)&v48 - v11;
  v62 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Any?>);
    v12 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9E0];
  }
  v13 = *(_QWORD *)(v62 + 64);
  v50 = v62 + 64;
  v14 = -1 << *(_BYTE *)(v62 + 32);
  if (-v14 < 64)
    v15 = ~(-1 << -(char)v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v48 = -1 << *(_BYTE *)(v62 + 32);
  v49 = (unint64_t)(63 - v14) >> 6;
  v17 = v12 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v63 = 0;
  v56 = v7;
  v51 = v12;
  while (1)
  {
    if (v16)
    {
      v64 = (v16 - 1) & v16;
      v20 = __clz(__rbit64(v16)) | (v63 << 6);
      goto LABEL_28;
    }
    v21 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v49)
      goto LABEL_37;
    v22 = *(_QWORD *)(v50 + 8 * v21);
    v23 = v63 + 1;
    if (!v22)
    {
      v23 = v63 + 2;
      if (v63 + 2 >= v49)
        goto LABEL_37;
      v22 = *(_QWORD *)(v50 + 8 * v23);
      if (!v22)
      {
        v23 = v63 + 3;
        if (v63 + 3 >= v49)
          goto LABEL_37;
        v22 = *(_QWORD *)(v50 + 8 * v23);
        if (!v22)
        {
          v23 = v63 + 4;
          if (v63 + 4 >= v49)
            goto LABEL_37;
          v22 = *(_QWORD *)(v50 + 8 * v23);
          if (!v22)
            break;
        }
      }
    }
LABEL_27:
    v63 = v23;
    v64 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_28:
    v25 = v62;
    v26 = v57;
    v27 = *(_QWORD *)(v57 + 72);
    v28 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v57 + 16))(v52, *(_QWORD *)(v62 + 48) + v27 * v20, v4);
    v29 = *(_QWORD *)(v25 + 56) + 32 * v20;
    v30 = v54;
    outlined init with copy of ReferenceResolutionClientProtocol?(v29, (uint64_t)&v28[*(int *)(v54 + 48)], &demangling cache variable for type metadata for Sendable?);
    v31 = (uint64_t)v28;
    v32 = v53;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v31, v53, &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable?));
    v33 = v32 + *(int *)(v30 + 48);
    v34 = v60;
    v35 = (uint64_t)&v60[*(int *)(v61 + 48)];
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
    v36(v60, v32, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v33, (uint64_t)v66, &demangling cache variable for type metadata for Sendable?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_dynamicCast();
    v37 = v58;
    v38 = (uint64_t)&v58[*(int *)(v59 + 48)];
    v36(v58, (uint64_t)v34, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v35, v38, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v39 = v55;
    v36(v55, (uint64_t)v37, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v38, (uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v40 = v56;
    v36(v56, (uint64_t)v39, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v66, (uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v12 = v51;
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v41 = -1 << *(_BYTE *)(v12 + 32);
    v42 = result & ~v41;
    v43 = v42 >> 6;
    if (((-1 << v42) & ~*(_QWORD *)(v17 + 8 * (v42 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v17 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v44 = 0;
      v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v46 = v43 == v45;
        if (v43 == v45)
          v43 = 0;
        v44 |= v46;
        v47 = *(_QWORD *)(v17 + 8 * v43);
      }
      while (v47 == -1);
      v19 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v36((char *)(*(_QWORD *)(v12 + 48) + v19 * v27), (uint64_t)v40, v4);
    result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v65, *(_QWORD *)(v12 + 56) + 32 * v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
    ++*(_QWORD *)(v12 + 16);
    v16 = v64;
  }
  v24 = v63 + 5;
  if (v63 + 5 >= v49)
  {
LABEL_37:
    swift_release();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return v12;
  }
  v22 = *(_QWORD *)(v50 + 8 * v24);
  if (v22)
  {
    v23 = v63 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v49)
      goto LABEL_37;
    v22 = *(_QWORD *)(v50 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  _QWORD v48[2];
  int64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  _BYTE v64[32];
  _OWORD v65[2];

  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable?));
  MEMORY[0x1E0C80A78](v60);
  v59 = (char *)v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Sendable?));
  MEMORY[0x1E0C80A78](v58);
  v57 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ConversationSessionKey();
  v56 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v54 = (char *)v48 - v8;
  v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable));
  v9 = MEMORY[0x1E0C80A78](v53);
  v52 = (uint64_t)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v51 = (char *)v48 - v11;
  v61 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable?>);
    v12 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9E0];
  }
  v13 = *(_QWORD *)(v61 + 64);
  v50 = v61 + 64;
  v14 = -1 << *(_BYTE *)(v61 + 32);
  if (-v14 < 64)
    v15 = ~(-1 << -(char)v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v48[1] = -1 << *(_BYTE *)(v61 + 32);
  v49 = (unint64_t)(63 - v14) >> 6;
  v17 = v12 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v62 = 0;
  v55 = v7;
  while (1)
  {
    if (v16)
    {
      v63 = (v16 - 1) & v16;
      v20 = __clz(__rbit64(v16)) | (v62 << 6);
      goto LABEL_28;
    }
    v21 = v62 + 1;
    if (__OFADD__(v62, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v49)
      goto LABEL_37;
    v22 = *(_QWORD *)(v50 + 8 * v21);
    v23 = v62 + 1;
    if (!v22)
    {
      v23 = v62 + 2;
      if (v62 + 2 >= v49)
        goto LABEL_37;
      v22 = *(_QWORD *)(v50 + 8 * v23);
      if (!v22)
      {
        v23 = v62 + 3;
        if (v62 + 3 >= v49)
          goto LABEL_37;
        v22 = *(_QWORD *)(v50 + 8 * v23);
        if (!v22)
        {
          v23 = v62 + 4;
          if (v62 + 4 >= v49)
            goto LABEL_37;
          v22 = *(_QWORD *)(v50 + 8 * v23);
          if (!v22)
            break;
        }
      }
    }
LABEL_27:
    v62 = v23;
    v63 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_28:
    v25 = v61;
    v26 = v56;
    v27 = *(_QWORD *)(v56 + 72);
    v28 = v51;
    (*(void (**)(char *, unint64_t, uint64_t))(v56 + 16))(v51, *(_QWORD *)(v61 + 48) + v27 * v20, v4);
    v29 = *(_QWORD *)(v25 + 56) + 32 * v20;
    v30 = v53;
    outlined init with copy of Any(v29, (uint64_t)&v28[*(int *)(v53 + 48)]);
    v31 = (uint64_t)v28;
    v32 = v52;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v31, v52, (uint64_t *)&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable));
    v33 = (_OWORD *)(v32 + *(int *)(v30 + 48));
    v34 = v59;
    v35 = (uint64_t)&v59[*(int *)(v60 + 48)];
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
    v36(v59, v32, v4);
    outlined init with take of Any(v33, v65);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
    swift_dynamicCast();
    v37 = v57;
    v38 = (uint64_t)&v57[*(int *)(v58 + 48)];
    v36(v57, (uint64_t)v34, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v35, v38, &demangling cache variable for type metadata for Sendable?);
    v39 = v54;
    v36(v54, (uint64_t)v37, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v38, (uint64_t)v65, &demangling cache variable for type metadata for Sendable?);
    v40 = v55;
    v36(v55, (uint64_t)v39, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v65, (uint64_t)v64, &demangling cache variable for type metadata for Sendable?);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v41 = -1 << *(_BYTE *)(v12 + 32);
    v42 = result & ~v41;
    v43 = v42 >> 6;
    if (((-1 << v42) & ~*(_QWORD *)(v17 + 8 * (v42 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v17 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v44 = 0;
      v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v46 = v43 == v45;
        if (v43 == v45)
          v43 = 0;
        v44 |= v46;
        v47 = *(_QWORD *)(v17 + 8 * v43);
      }
      while (v47 == -1);
      v19 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v36((char *)(*(_QWORD *)(v12 + 48) + v19 * v27), (uint64_t)v40, v4);
    result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v64, *(_QWORD *)(v12 + 56) + 32 * v19, &demangling cache variable for type metadata for Sendable?);
    ++*(_QWORD *)(v12 + 16);
    v16 = v63;
  }
  v24 = v62 + 5;
  if (v62 + 5 >= v49)
  {
LABEL_37:
    swift_release();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return v12;
  }
  v22 = *(_QWORD *)(v50 + 8 * v24);
  if (v22)
  {
    v23 = v62 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v49)
      goto LABEL_37;
    v22 = *(_QWORD *)(v50 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

void protocol witness for DecisionEngineStream.insert(jsonStr:interactionId:) in conformance DecisionEngineCurareStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DecisionEngineCurareStream.insert(jsonStr:interactionId:)(*(Swift::String *)&a1, *(Swift::String *)&a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DecisionEngineCurareStream.insert(jsonStr:interactionId:)(Swift::String jsonStr, Swift::String interactionId)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  unsigned __int8 v16;
  id v17;
  id v18;
  id v19[2];

  object = interactionId._object;
  countAndFlagsBits = interactionId._countAndFlagsBits;
  v5 = jsonStr._object;
  v6 = jsonStr._countAndFlagsBits;
  v19[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = objc_allocWithZone(MEMORY[0x1E0D20F68]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = (void *)MEMORY[0x1B5E432E8](v6, v5);
  swift_bridgeObjectRelease();
  v9 = (void *)MEMORY[0x1B5E432E8](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v7, sel_initWithJsonStr_interactionId_dataVersion_, v8, v9, 0);

  v12 = *(_QWORD *)(v2 + 16);
  v11 = *(_QWORD *)(v2 + 24);
  v13 = objc_allocWithZone(MEMORY[0x1E0D20F70]);
  swift_bridgeObjectRetain();
  v14 = (void *)MEMORY[0x1B5E432E8](v12, v11);
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_initWithStreamId_, v14);

  if (!v15)
    __break(1u);
  v19[0] = 0;
  v16 = objc_msgSend(v15, sel_insert_error_, v10, v19);

  if ((v16 & 1) != 0)
  {
    v17 = v19[0];
  }
  else
  {
    v18 = v19[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

}

BOOL ExecutionOutput.hasEmptyNativeFlowContextUpdate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  return v1 && *(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand) == 0;
}

uint64_t type metadata accessor for ConversationContextUpdateMetadata()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationContextUpdateMetadata;
  if (!type metadata singleton initialization cache for ConversationContextUpdateMetadata)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized ConversationRequestProcessor.applyEmptyNativeFlowContextUpdateIfRequired(_:selectedResultCandidateId:metadata:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for ContextUpdateScope();
  v10 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  result = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1
    && *(_BYTE *)(a2 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) == 1)
  {
    v47 = a2;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1B4BE6000, v21, v22, "Trying to apply an empty NativeFlowContextUpdate since we received an ExecutionContextUpdate without a nativeFlowContextCommand", v23, 2u);
      MEMORY[0x1B5E44758](v23, -1, -1);
    }

    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88368]), sel_init);
    v25 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v19, 1, 1, v25);
    v26 = type metadata accessor for PommesContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v15, 1, 1, v26);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0D9BD80], updated);
    v27 = objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
    v28 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(0, v24, 0, 0, 0, (uint64_t)v19, 0, (uint64_t)v15, (uint64_t)v12, 0, 0);

    v30 = v3[9];
    v46 = v3[8];
    v29 = v46;
    v31 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    v32 = v28;
    v45 = v32;
    swift_bridgeObjectRetain();
    v33 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, v28, 0, 0, 0, 0, 0, 0, 0, 0, v29, v30);

    v34 = *(_QWORD *)((char *)v3
                    + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
    v35 = v3[10];
    v36 = v3[12];
    v43 = v3[11];
    v44 = v35;
    v37 = (char *)v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater;
    v38 = v3[13];
    v39 = (char *)v3 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
    v40 = type metadata accessor for UUID();
    v41 = *(_QWORD *)(v40 - 8);
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v8, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v8, 0, 1, v40);
    (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, void (*)(uint64_t, void *), _QWORD))(*(_QWORD *)v34 + 264))(v33, v46, v30, v44, v43, v37, 0, v47, v36, v38, v8, 0, 0, closure #1 in ConversationRequestProcessor.applyEmptyNativeFlowContextUpdateIfRequired(_:selectedResultCandidateId:metadata:), 0);

    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  return result;
}

void RecentDialogTracker.maybeMemorizeDialog(command:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  int v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  void *v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(void);
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[3];

  v3 = type metadata accessor for Date();
  v65 = *(_QWORD *)(v3 - 8);
  v66 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = type metadata accessor for DialogPhase();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v61 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  RecentDialogTracker.filterExpired()();
  if (!a1)
    return;
  objc_opt_self();
  v17 = swift_dynamicCastObjCClass();
  if (!v17)
    return;
  v18 = (void *)v17;
  v64 = v1;
  v19 = a1;
  v62 = v18;
  v63 = v19;
  v20 = objc_msgSend(v18, sel_dialogPhase);
  if (v20)
  {
    v21 = v20;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  DialogPhase.init(aceValue:)();
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7);
  v23 = v64;
  if (v22 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for DialogPhase?);
LABEL_8:
    if (one-time initialization token for conversationBridge != -1)
LABEL_47:
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
    v27 = v63;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    v30 = os_log_type_enabled(v28, v29);
    v31 = v62;
    if (v30)
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v68[0] = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = objc_msgSend(v31, sel_dialogPhase);
      if (v34)
      {
        v35 = v34;
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v38 = v37;

      }
      else
      {
        v38 = 0xE300000000000000;
        v36 = 7104878;
      }
      v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v28, v29, "RecentDialogTracker: ignoring dialog in phase %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v33, -1, -1);
      MEMORY[0x1B5E44758](v32, -1, -1);

      goto LABEL_38;
    }

    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v16, v7);
  static DialogPhase.reflection.getter();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B5C0], MEMORY[0x1E0D9B5D0]);
  v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v11, v7);
  v25(v13, v7);
  v25(v16, v7);
  if ((v24 & 1) != 0)
    goto LABEL_8;
  if (!*(_QWORD *)(v23 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId + 8))
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.conversationBridge);
    v27 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v27, v58))
    {

      return;
    }
    v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v59 = 0;
    _os_log_impl(&dword_1B4BE6000, v27, v58, "RecentDialogTracker: currentRequestId is not set when maybeMemorizeDialog is called", v59, 2u);
    MEMORY[0x1B5E44758](v59, -1, -1);

LABEL_13:
    return;
  }
  v39 = (uint64_t *)(v23 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  while (1)
  {
    if ((unint64_t)*v39 >> 62)
    {
      swift_bridgeObjectRetain();
      v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v46 < 2)
        goto LABEL_30;
    }
    else if (*(uint64_t *)((*v39 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
    {
      goto LABEL_30;
    }
    swift_beginAccess();
    if ((unint64_t)*v39 >> 62)
      break;
    if (!*(_QWORD *)((*v39 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_29;
LABEL_20:
    v40 = *v39;
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *v39 = v40;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v40 < 0 || (v40 & 0x4000000000000000) != 0)
      specialized _ArrayBuffer._consumeAndCreateNew()(v40);
    v42 = v40 & 0xFFFFFFFFFFFFFF8;
    v43 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v43)
    {
      __break(1u);
      goto LABEL_47;
    }
    v44 = v43 - 1;
    v45 = *(void **)((v40 & 0xFFFFFFFFFFFFFF8) + 8 * v44 + 0x20);
    *(_QWORD *)(v42 + 16) = v44;
    specialized Array._endMutation()();
    swift_endAccess();

  }
  swift_bridgeObjectRetain();
  v47 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v47)
    goto LABEL_20;
LABEL_29:
  __break(1u);
LABEL_30:
  v48 = *(void (**)(void))(v23 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_timeProvider);
  v49 = v63;
  v48();
  static Date.+ infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v6, v66);
  v50 = objc_allocWithZone((Class)type metadata accessor for RecentDialog());
  v51 = RecentDialog.init(addViews:expiresAt:requestId:)();
  swift_beginAccess();
  v52 = v23;
  if ((unint64_t)*v39 >> 62
    && (swift_bridgeObjectRetain(), v60 = _CocoaArrayWrapper.endIndex.getter(), swift_bridgeObjectRelease(), v60 < 0))
  {
    __break(1u);
LABEL_50:
    swift_once();
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v51);
    swift_endAccess();
    *(_BYTE *)(v52 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestHasTrackedDialogs) = 1;
    RecentDialogTracker.updateSiriEnvironment()();
    if (one-time initialization token for conversationBridge != -1)
      goto LABEL_50;
  }
  v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v28 = Logger.logObject.getter();
  v54 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v28, v54))
  {

    swift_release();
    return;
  }
  v55 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v55 = 134217984;
  if ((unint64_t)*v39 >> 62)
  {
    swift_bridgeObjectRetain();
    v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v67 = v56;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  _os_log_impl(&dword_1B4BE6000, v28, v54, "RecentDialogTracker: memorized the last dialog, got %ld in total.", v55, 0xCu);
  MEMORY[0x1B5E44758](v55, -1, -1);

LABEL_38:
}

uint8_t *RecentDialogTracker.filterExpired()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *result;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22[16];
  char *v23;
  uint64_t v24;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_timeProvider))(v3);
  v6 = (unint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
  swift_beginAccess();
  v7 = *v6;
  v23 = v5;
  swift_bridgeObjectRetain();
  v8 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(id *))partial apply for closure #1 in RecentDialogTracker.filterExpired(), (uint64_t)v22, v7);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (*v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 >= v19)
      goto LABEL_12;
  }
  else if (v9 >= *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    *v6 = v8;
    swift_bridgeObjectRelease();
    RecentDialogTracker.updateSiriEnvironment()();
    return (uint8_t *)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  swift_retain();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v11, v12))
  {

    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_12;
  }
  result = (uint8_t *)swift_slowAlloc();
  v14 = result;
  *(_DWORD *)result = 134217984;
  v15 = *v6;
  if (*v6 >> 62)
  {
    v20 = v15 & 0xFFFFFFFFFFFFFF8;
    if (v15 < 0)
      v20 = *v6;
    v21[0] = v20;
    v21[1] = v15;
    swift_bridgeObjectRetain();
    v21[0] = _CocoaArrayWrapper.endIndex.getter();
    result = (uint8_t *)swift_bridgeObjectRelease();
    v18 = v21[0] - v9;
    if (!__OFSUB__(v21[0], v9))
      goto LABEL_10;
  }
  else
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    v17 = __OFSUB__(v16, v9);
    v18 = v16 - v9;
    if (!v17)
    {
LABEL_10:
      v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B4BE6000, v11, v12, "RecentDialogTracker: removed %ld expired dialog(s)", v14, 0xCu);
      MEMORY[0x1B5E44758](v14, -1, -1);

      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in RecentDialogTracker.filterExpired()()
{
  return closure #1 in RecentDialogTracker.filterExpired()() & 1;
}

uint64_t closure #1 in RecentDialogTracker.filterExpired()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  v0 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  RecentDialog.expiresAt.getter();
  v4 = static Date.> infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t type metadata accessor for RecentDialogsEnvironmentProvider()
{
  return objc_opt_self();
}

uint64_t RecentDialogsEnvironmentProvider.numCurrentlyTracked.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

unint64_t type metadata accessor for SABaseCommand()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SABaseCommand;
  if (!lazy cache variable for type metadata for SABaseCommand)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  }
  return result;
}

uint64_t SABaseCommand.isListenAfterSpeaking.getter()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id i;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  unint64_t v47;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    objc_opt_self();
    v16 = swift_dynamicCastObjCClass();
    if (v16)
    {
      v17 = (void *)v16;
      v18 = v0;
      v19 = objc_msgSend(v17, sel_listenAfterSpeaking);
      if (v19)
        goto LABEL_18;
    }
    else
    {
      objc_opt_self();
      v22 = swift_dynamicCastObjCClass();
      if (!v22)
      {
        objc_opt_self();
        v24 = swift_dynamicCastObjCClass();
        if (!v24)
          return 0;
        v25 = (void *)v24;
        v26 = v0;
        v27 = objc_msgSend(v25, sel_callbacks);
        if (v27)
        {
          v28 = v27;
          type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAResultCallback);
          v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        }
        else
        {
          v29 = MEMORY[0x1E0DEE9D8];
        }
        if (v29 >> 62)
          goto LABEL_67;
        v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v30)
        {
LABEL_37:
          v31 = 0;
          v45 = v29;
          v47 = v29 & 0xC000000000000001;
          v42 = v26;
          v43 = v29 + 32;
          v26 = (id)0x1E0D87000;
          v44 = v30;
          while (1)
          {
            if (v47)
              v32 = (id)MEMORY[0x1B5E43B94](v31, v29);
            else
              v32 = *(id *)(v43 + 8 * v31);
            v33 = v32;
            if (__OFADD__(v31++, 1))
              goto LABEL_66;
            v35 = objc_msgSend(v32, sel_commands);
            if (v35)
            {
              v36 = v35;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
              v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            }
            else
            {
              v37 = MEMORY[0x1E0DEE9D8];
            }
            if (v37 >> 62)
            {
              swift_bridgeObjectRetain_n();
              v38 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v38)
              {
LABEL_48:
                v39 = 4;
                v40 = 0;
                if ((v37 & 0xC000000000000001) != 0)
                {
LABEL_49:
                  MEMORY[0x1B5E43B94](v40, v37);
                  v29 = v40 + 1;
                  if (__OFADD__(v40, 1))
                    goto LABEL_65;
                  goto LABEL_53;
                }
                while (1)
                {
                  swift_unknownObjectRetain();
                  v29 = v40 + 1;
                  if (__OFADD__(v40, 1))
                    break;
LABEL_53:
                  objc_opt_self();
                  if (swift_dynamicCastObjCClass())
                  {
                    v41 = SABaseCommand.isListenAfterSpeaking.getter();
                    swift_unknownObjectRelease();
                    if ((v41 & 1) != 0)
                    {

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v7 = 1;
                      goto LABEL_70;
                    }
                    if (v29 == v38)
                      goto LABEL_38;
                  }
                  else
                  {
                    swift_unknownObjectRelease();
                    if (v29 == v38)
                      goto LABEL_38;
                  }
                  v40 = ++v39 - 4;
                  if ((v37 & 0xC000000000000001) != 0)
                    goto LABEL_49;
                }
LABEL_65:
                __break(1u);
LABEL_66:
                __break(1u);
LABEL_67:
                swift_bridgeObjectRetain();
                v30 = _CocoaArrayWrapper.endIndex.getter();
                if (!v30)
                  break;
                goto LABEL_37;
              }
            }
            else
            {
              v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v38)
                goto LABEL_48;
            }
LABEL_38:
            swift_bridgeObjectRelease_n();

            v29 = v45;
            if (v31 == v44)
              goto LABEL_64;
          }
        }

        goto LABEL_69;
      }
      v23 = (void *)v22;
      v18 = v0;
      v19 = objc_msgSend(v23, sel_listenAfterSpeaking);
      if (v19)
      {
LABEL_18:
        v20 = v19;
        v7 = (uint64_t)objc_msgSend(v19, sel_BOOLValue);

        return v7;
      }
    }

    return 0;
  }
  v2 = (void *)v1;
  v3 = v0;
  v4 = objc_msgSend(v2, sel_views);
  if (v4)
  {
    v5 = v4;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v6 >> 62))
      goto LABEL_4;
LABEL_21:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_5;
LABEL_25:

    swift_bridgeObjectRelease_n();
    return v7;
  }
  v6 = MEMORY[0x1E0DEE9D8];
  if (MEMORY[0x1E0DEE9D8] >> 62)
    goto LABEL_21;
LABEL_4:
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_25;
LABEL_5:
  v46 = v3;
  v8 = 4;
  v9 = 0;
  if ((v6 & 0xC000000000000001) == 0)
    goto LABEL_7;
LABEL_6:
  for (i = (id)MEMORY[0x1B5E43B94](v9, v6); ; i = *(id *)(v6 + 8 * v8))
  {
    v11 = i;
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    v13 = objc_msgSend(i, sel_listenAfterSpeaking);
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v13, sel_BOOLValue);

      if ((v15 & 1) != 0)
      {
        v7 = 1;
        goto LABEL_24;
      }
      if (v12 == v7)
        goto LABEL_19;
    }
    else
    {

      if (v12 == v7)
      {
LABEL_19:
        v7 = 0;
LABEL_24:
        v3 = v46;
        goto LABEL_25;
      }
    }
    v9 = ++v8 - 4;
    if ((v6 & 0xC000000000000001) != 0)
      goto LABEL_6;
LABEL_7:
    ;
  }
  __break(1u);
LABEL_64:

LABEL_69:
  v7 = 0;
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_2Tm_0(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 48) + 392))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  if (v2)
  {
    v3 = v1;
    v4 = v2;
    if (one-time initialization token for executor != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v15 = v3;
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v16 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v4, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v6, v7, "Sending ACE command to update request handling indicator with value: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      v10 = v8;
      v3 = v15;
      MEMORY[0x1B5E44758](v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v11 = *(_QWORD *)(v0 + 48);
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D885A8]), sel_init);
    v13 = (void *)MEMORY[0x1B5E432E8](v3, v4);
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setExecutionInputSystem_, v13);

    __swift_project_boxed_opaque_existential_1((_QWORD *)(v11 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker), *(_QWORD *)(v11 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker + 24));
    AceServiceInvokerAsync.submitAndForget(_:)();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::String_optional __swiftcall ConversationService.ActiveTurn.getExecutionInputSystem(rcId:)(Swift::String rcId)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String_optional result;

  object = rcId._object;
  countAndFlagsBits = rcId._countAndFlagsBits;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_executionInputSystem);
  swift_beginAccess();
  v5 = *v4;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v7 & 1) != 0)
    {
      v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
      v9 = *v8;
      v10 = (void *)v8[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = v9;
  v12 = v10;
  result.value._object = v12;
  result.value._countAndFlagsBits = v11;
  return result;
}

uint64_t ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v1 = v0[34];
  v3 = v0[30];
  v2 = (uint64_t *)v0[31];
  swift_beginAccess();
  *(_QWORD *)(v1 + 280) = 0;
  swift_release();
  v5 = *v2;
  v4 = v2[1];
  v6 = (objc_class *)type metadata accessor for ExecutionOutput();
  v0[78] = v6;
  objc_allocWithZone(v6);
  swift_retain();
  swift_bridgeObjectRetain();
  v0[79] = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v5, v4);
  v7 = v3 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId;
  v0[80] = *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  v0[81] = *(_QWORD *)(v7 + 8);
  v8 = v0[29];
  v0[83] = 1;
  v0[82] = v8;
  v9 = v0[34];
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 104);
  if ((v10 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter() < 1)
      goto LABEL_11;
  }
  else if (*(uint64_t *)(v10 + 16) < 1)
  {
    goto LABEL_11;
  }
  v11 = v0[34];
  if ((*(_QWORD *)(v11 + 104) & 0xC000000000000001) != 0)
  {
    v12 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
      v13 = static _SetStorage.allocate(capacity:)();
    }
    else
    {
      v13 = MEMORY[0x1E0DEE9E8];
    }
    *(_QWORD *)(v0[34] + 104) = v13;
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *(_QWORD *)(v11 + 104);
    *(_QWORD *)(v11 + 104) = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeSet<RemoteConversationClient>);
    _NativeSet.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v11 + 104) = v16;
    swift_bridgeObjectRelease();
  }
LABEL_11:
  swift_retain();
  specialized Set._Variant.insert(_:)(&v16, v8);
  swift_endAccess();
  swift_release();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 272);
  v2 = v1[5];
  v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 40) + *(_QWORD *)(v3 + 40));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 616) = v4;
  *v4 = v0;
  v4[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
  return v6(v2, v3);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, void *, uint64_t, _QWORD, uint64_t, uint64_t);
  __int128 v10;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 656);
  v2 = type metadata accessor for Logger();
  v3 = v1 + 16;
  v10 = *(_OWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 696) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 704) = v6;
  *(_OWORD *)(v6 + 16) = v10;
  v9 = (uint64_t (*)(_QWORD, void *, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v5 + 8)
                                                                                 + *(_QWORD *)(v5 + 8));
  swift_unknownObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 712) = v7;
  *v7 = v0;
  v7[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
  return v9(*(_QWORD *)(v0 + 592), &async function pointer to partial apply for closure #1 in RemoteConversationClient.commit(bridge:), v6, *(_QWORD *)(v0 + 576), v4, v5);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  _QWORD *v4;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(unint64_t, unint64_t, void *, uint64_t);

  if (*(_BYTE *)(v0 + 834) == 1)
  {
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1B4BE6000, v1, v2, "[ConversationService] Conversation complete, removing from active conversations", v3, 2u);
      MEMORY[0x1B5E44758](v3, -1, -1);
    }

    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 824) = v4;
    *v4 = v0;
    v4[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
    return RemoteConversationClient.isCorrectable()();
  }
  else
  {
    if ((*(_QWORD *)(*(_QWORD *)(v0 + 272) + 104) & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      v6 = *(_BYTE *)(v0 + 834) ^ 1;
    }
    else
    {
      v6 = 1;
    }
    v7 = *(void **)(v0 + 808);
    v8 = *(_QWORD *)(v0 + 600);
    (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 16))(v7, v6 & 1, *(_QWORD *)(v0 + 744));
    swift_release();

    outlined destroy of CamOutput(v8, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    swift_release();
    v9 = *(_QWORD *)(v0 + 272);

    v10 = *(_QWORD *)(v0 + 272);
    v11 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(_QWORD **)(v9 + 216) + 208);
    swift_retain();
    swift_retain();
    v11(0xD000000000000051, 0x80000001B4EFAEA0, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply, v10);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(void);
  __int128 v10;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 656);
  v2 = type metadata accessor for Logger();
  v3 = v1 + 16;
  v10 = *(_OWORD *)(v0 + 256);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 672) = v6;
  *(_OWORD *)(v6 + 16) = v10;
  v9 = (uint64_t (*)(void))(**(int **)(v5 + 8) + *(_QWORD *)(v5 + 8));
  swift_unknownObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 680) = v7;
  *v7 = v0;
  v7[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
  return v9();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)(v0 + 835) == 1)
  {
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1B4BE6000, v1, v2, "[ConversationService] Conversation is correctable. Setting up Siri Corrections signals", v3, 2u);
      MEMORY[0x1B5E44758](v3, -1, -1);
    }
    v4 = *(_QWORD *)(v0 + 240);

    static CorrectionsContext.builder.getter();
    if (*(_QWORD *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfo))
      swift_bridgeObjectRetain();
    v20 = *(_QWORD *)(v0 + 656);
    v5 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 304);
    v6 = *(_QWORD *)(v0 + 312);
    v17 = *(_QWORD *)(v0 + 328);
    v18 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 288);
    v9 = *(_QWORD *)(v0 + 272);
    dispatch thunk of CorrectionsContext.Builder.userId(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    dispatch thunk of CorrectionsContext.Builder.executionRequestId(_:)();
    swift_release();
    swift_bridgeObjectRetain();
    dispatch thunk of CorrectionsContext.Builder.assistantId(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    dispatch thunk of CorrectionsContext.Builder.resultCandidateId(_:)();
    swift_release();
    dispatch thunk of CorrectionsContext.Builder.build()();
    swift_release();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    CorrectionsDirectInvocation.init(identifier:userData:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v17, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v6);
    dispatch thunk of CorrectionsPlatformClient.setUndoInvocation(directInvocation:context:)();
    outlined destroy of ReferenceResolutionClientProtocol?(v8, &demangling cache variable for type metadata for CorrectionsContext?);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v7, v19);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v17, v6);
    *(_QWORD *)(v9 + 280) = v20;
    swift_retain();
    swift_release();
  }
  v10 = *(_QWORD *)(v0 + 656);
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v10);
  swift_endAccess();
  swift_release();
  if ((*(_QWORD *)(*(_QWORD *)(v0 + 272) + 104) & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  v11 = *(void **)(v0 + 808);
  v12 = *(_QWORD *)(v0 + 600);
  (*(void (**)(void *, BOOL, _QWORD))(*(_QWORD *)(v0 + 264) + 16))(v11, (*(_BYTE *)(v0 + 834) & 1) == 0, *(_QWORD *)(v0 + 744));
  swift_release();

  outlined destroy of CamOutput(v12, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  swift_release();
  v13 = *(_QWORD *)(v0 + 272);

  v14 = *(_QWORD *)(v0 + 272);
  v15 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(_QWORD **)(v13 + 216) + 208);
  swift_retain();
  swift_retain();
  v15(0xD000000000000051, 0x80000001B4EFAEA0, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply, v14);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 688) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  id v6;
  Swift::String v7;
  uint64_t v8;
  void (*v9)(unint64_t, unint64_t, void *, uint64_t);

  v1 = *(void **)(v0 + 688);
  v2 = *(void **)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 272);
  swift_release();
  ObjectType = swift_getObjectType();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 208) = v1;
  v6 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 32))(v2, 0xD00000000000001ELL, 0x80000001B4EFAFE0, ObjectType, v3);

  swift_bridgeObjectRelease();
  swift_release();
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(_QWORD **)(v4 + 216) + 208);
  swift_retain();
  swift_retain();
  v9(0xD000000000000051, 0x80000001B4EFAEA0, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply, v8);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 720) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  void *v7;
  uint8_t *v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  void *v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t ObjectType;
  id v28;
  Swift::String v29;
  void (*v30)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t v32;
  unint64_t v33;

  v1 = *(void **)(v0 + 720);
  swift_release();
  *(_QWORD *)(v0 + 216) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 560) + 8))(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 552));
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(void **)(v0 + 720);
    v7 = *(void **)(v0 + 632);
    if (v5)
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B4BE6000, v3, v4, "Conversation was cancelled during commit. Will not call bridge.close()", v8, 2u);
      MEMORY[0x1B5E44758](v8, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
    }
    v21 = *(_QWORD *)(v0 + 272);
    v22 = &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply;
    v23 = v21;
  }
  else
  {
    v9 = *(void **)(v0 + 720);
    v10 = v9;
    v11 = v9;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void **)(v0 + 720);
    if (v14)
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v32 = v17;
      *(_DWORD *)v16 = 136315138;
      *(_QWORD *)(v0 + 176) = v15;
      v18 = v15;
      v19 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v12, v13, "Error commiting conversation: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v17, -1, -1);
      MEMORY[0x1B5E44758](v16, -1, -1);
    }
    else
    {

    }
    v24 = *(void **)(v0 + 720);
    v25 = *(void **)(v0 + 632);
    v26 = *(_QWORD *)(v0 + 264);
    v21 = *(_QWORD *)(v0 + 272);
    ObjectType = swift_getObjectType();
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v32 = 0xD00000000000001FLL;
    v33 = 0x80000001B4EFAE80;
    *(_QWORD *)(v0 + 184) = v24;
    v28 = v24;
    v29._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v32, v33, ObjectType, v26);

    swift_bridgeObjectRelease();
    swift_release();
    v23 = *(_QWORD *)(v0 + 272);
    v22 = &async function pointer to partial apply for closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
  }
  v30 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(_QWORD **)(v21 + 216) + 208);
  swift_retain();
  swift_retain();
  v30(0xD000000000000051, 0x80000001B4EFAEA0, v22, v23);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t (*v32)(_QWORD, uint64_t, uint64_t);
  uint64_t v33;
  char v34;

  v1 = *(_QWORD *)(v0 + 736);
  v2 = *(_QWORD *)(v0 + 728);
  if (*(_BYTE *)(v0 + 832) == 6)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v33 = v6;
      *(_DWORD *)v5 = 136315138;
      v34 = 6;
      v7 = SelfReflectionAgentDecision.description.getter();
      *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[ConversationService] Falling back to IntelligenceFlow because Self Reflection's decision %s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v6, -1, -1);
      MEMORY[0x1B5E44758](v5, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 744);
    v10 = *(void **)(v0 + 632);
    v11 = *(_QWORD *)(v0 + 600);
    v12 = *(_QWORD *)(v0 + 544);
    v13 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 272);
    v15 = type metadata accessor for PrescribedTool();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 64))(v12, v9, v13);

    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v12, &demangling cache variable for type metadata for PrescribedTool?);
    outlined destroy of CamOutput(v11, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    v16 = *(_QWORD *)(v14 + 216);
    v17 = *(_QWORD *)(v0 + 272);
    v18 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(*(_QWORD *)v16 + 208);
    swift_retain();
    swift_retain();
    v18(0xD000000000000051, 0x80000001B4EFAEA0, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply, v17);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 368);
    v23 = *(_QWORD *)(v0 + 344);
    v22 = *(_QWORD *)(v0 + 352);
    v24 = *(_QWORD *)(v0 + 336);
    v25 = *(_QWORD *)(v0 + 272);
    v26 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 1, 1, v26);
    v27 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v20, 1, 1, v27);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v22, *MEMORY[0x1E0D9BD88], v24);
    objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 792) = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(0, 0, 0, v2, v1, v21, 0, v20, v22, 0, 0);
    v28 = *(void (**)(uint64_t, uint64_t))(**(_QWORD **)(v25 + 208) + 184);
    swift_retain();
    v28(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v29 = *(_QWORD *)(v25 + 40);
    v30 = *(_QWORD *)(v25 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v25 + 16), v29);
    v32 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v30 + 32) + *(_QWORD *)(v30 + 32));
    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 800) = v31;
    *v31 = v0;
    v31[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
    return v32(*(_QWORD *)(v0 + 656), v29, v30);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ObjectType;
  uint64_t v65;
  void (*v66)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;

  v1 = *(_QWORD *)(v0 + 776);
  if (!v1)
  {
    swift_release();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, (os_log_type_t)v17, "[ConversationService] Conversation wanted to redirect via a PluginAction, but could not find a plugin to handle it. Will fall back to server.", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }
    v20 = *(_QWORD *)(v0 + 384);
    v19 = *(_QWORD *)(v0 + 392);
    v21 = *(_QWORD *)(v0 + 376);
    v22 = *(uint64_t **)(v0 + 248);

    v23 = *v22;
    v24 = v22[1];
    v26 = v22[2];
    v25 = v22[3];
    PluginAction.input.getter();
    Input.parse.getter();
    v84 = v24;
    v86 = v23;
    v80 = v25;
    v82 = v26;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v20 + 88))(v19, v21) == *MEMORY[0x1E0D9C678])
    {
      v27 = (uint64_t *)(v0 + 416);
      v28 = (uint64_t *)(v0 + 408);
      v30 = *(_QWORD *)(v0 + 408);
      v29 = *(_QWORD *)(v0 + 416);
      v31 = (uint64_t *)(v0 + 400);
      v33 = *(_QWORD *)(v0 + 392);
      v32 = *(_QWORD *)(v0 + 400);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 384) + 96))(v33, *(_QWORD *)(v0 + 376));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v29, v33, v32);
      USOParse.userParse.getter();
      v34 = 0;
    }
    else
    {
      v27 = (uint64_t *)(v0 + 392);
      v28 = (uint64_t *)(v0 + 384);
      v31 = (uint64_t *)(v0 + 376);
      v34 = 1;
    }
    v46 = *v27;
    v47 = *v31;
    v48 = *v28;
    v73 = *(_QWORD *)(v0 + 648);
    v72 = *(_QWORD *)(v0 + 640);
    v74 = *(void **)(v0 + 632);
    v77 = *(_QWORD *)(v0 + 600);
    v78 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
    v49 = *(_QWORD *)(v0 + 480);
    v50 = *(_QWORD *)(v0 + 488);
    v51 = *(_QWORD *)(v0 + 440);
    v75 = *(_QWORD *)(v0 + 448);
    v76 = *(_QWORD *)(v0 + 472);
    v52 = *(_QWORD *)(v0 + 424);
    v53 = *(_QWORD *)(v0 + 432);
    v55 = *(_QWORD *)(v0 + 264);
    v54 = *(_QWORD *)(v0 + 272);
    v56 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    v57 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v50, v34, 1, v57);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
    v58 = *MEMORY[0x1E0D9ED48];
    v59 = type metadata accessor for ServerFallbackReason();
    v60 = *(_QWORD *)(v59 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 104))(v49, v58, v59);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v49, 0, 1, v59);
    ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v56, v55, v72, v73, v86, v84, v82, v80, 0, v50, v49);

    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?(v50, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    v78(v76, v75);
    outlined destroy of CamOutput(v77, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    v61 = &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply;
    goto LABEL_19;
  }
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
  v6 = *(_QWORD *)(v0 + 600);
  v7 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 448);
  if (v4)
  {
    v85 = *(_QWORD *)(v0 + 600);
    v83 = *(_QWORD *)(v0 + 448);
    v81 = *(_QWORD *)(v0 + 472);
    v9 = (uint8_t *)swift_slowAlloc();
    v79 = v5;
    v10 = swift_slowAlloc();
    *(_DWORD *)v9 = 136315138;
    v87 = v10;
    *(_QWORD *)(v0 + 112) = 0;
    *(_QWORD *)(v0 + 120) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)(v0 + 128), "FlowExtension(");
    *(_BYTE *)(v0 + 143) = -18;
    v11 = *(_QWORD *)(v1 + 112);
    v12 = *(void **)(v1 + 120);
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v11;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    swift_release();
    *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[ConversationService] Discovered a Conversation which can handle the redirected PluginAction: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

    swift_release();
    v79(v81, v83);
    v15 = v85;
  }
  else
  {

    swift_release_n();
    swift_release();
    v5(v7, v8);
    v15 = v6;
  }
  outlined destroy of CamOutput(v15, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  if (*(_QWORD *)(v0 + 664) == 10)
  {
    swift_release();
    v87 = 0;
    v88 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v35._countAndFlagsBits = 0xD000000000000030;
    v35._object = (void *)0x80000001B4EFAF00;
    String.append(_:)(v35);
    *(_QWORD *)(v0 + 160) = 10;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._object = (void *)0x80000001B4EFAF40;
    v37._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v37);
    v39 = v87;
    v38 = v88;
    swift_bridgeObjectRetain_n();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v87 = v43;
      *(_DWORD *)v42 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v40, v41, "[ConversationService] %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v43, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v62 = *(_QWORD *)(v0 + 632);
    v63 = *(_QWORD *)(v0 + 264);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v63 + 32))(v62, v39, v38, ObjectType, v63);
    swift_bridgeObjectRelease();
    swift_release();
    v54 = *(_QWORD *)(v0 + 272);

    v61 = &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply;
LABEL_19:
    v65 = *(_QWORD *)(v0 + 272);
    v66 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(_QWORD **)(v54 + 216) + 208);
    swift_retain();
    swift_retain();
    v66(0xD000000000000051, 0x80000001B4EFAEA0, v61, v65);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  ++*(_QWORD *)(v0 + 664);
  *(_QWORD *)(v0 + 656) = v1;
  v44 = *(_QWORD *)(v0 + 272);
  swift_beginAccess();
  v45 = *(_QWORD *)(v44 + 104);
  if ((v45 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter() < 1)
      goto LABEL_27;
LABEL_21:
    v68 = *(_QWORD *)(v0 + 272);
    if ((*(_QWORD *)(v68 + 104) & 0xC000000000000001) != 0)
    {
      v69 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (v69)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
        v70 = static _SetStorage.allocate(capacity:)();
      }
      else
      {
        v70 = MEMORY[0x1E0DEE9E8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 272) + 104) = v70;
    }
    else
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v87 = *(_QWORD *)(v68 + 104);
      *(_QWORD *)(v68 + 104) = 0x8000000000000000;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeSet<RemoteConversationClient>);
      _NativeSet.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v68 + 104) = v87;
      swift_bridgeObjectRelease();
    }
    goto LABEL_27;
  }
  if (*(uint64_t *)(v45 + 16) >= 1)
    goto LABEL_21;
LABEL_27:
  swift_retain();
  specialized Set._Variant.insert(_:)(&v87, v1);
  swift_endAccess();
  swift_release();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;

  v1 = *(void **)(v0 + 792);
  v2 = *(uint64_t **)(v0 + 248);
  v4 = *v2;
  v3 = v2[1];
  v5 = objc_allocWithZone(*(Class *)(v0 + 624));
  swift_bridgeObjectRetain();
  v6 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, v1, 0, 0, 0, 0, 0, 0, 0, 0, v4, v3);
  *(_QWORD *)(v0 + 808) = v6;

  v7 = v6;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 816) = v8;
  *v8 = v0;
  v8[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
  return RemoteConversationClient.isEmpty()();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(unint64_t, unint64_t, void *, uint64_t);

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
  v2 = *(_QWORD *)(v0 + 600);
  v3 = *(_QWORD *)(v0 + 472);
  v4 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 272);

  swift_release();
  swift_release();
  v1(v3, v4);
  outlined destroy of CamOutput(v2, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  v6 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(_QWORD **)(v5 + 216) + 208);
  swift_retain();
  swift_retain();
  v6(0xD000000000000051, 0x80000001B4EFAEA0, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply, v5);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v7 + 264) = a6;
  *(_QWORD *)(v7 + 272) = v6;
  *(_QWORD *)(v7 + 248) = a4;
  *(_QWORD *)(v7 + 256) = a5;
  *(_BYTE *)(v7 + 833) = a2;
  *(_QWORD *)(v7 + 232) = a1;
  *(_QWORD *)(v7 + 240) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectionsContext?);
  *(_QWORD *)(v7 + 280) = swift_task_alloc();
  v8 = type metadata accessor for CorrectionsDirectInvocation();
  *(_QWORD *)(v7 + 288) = v8;
  *(_QWORD *)(v7 + 296) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 304) = swift_task_alloc();
  v9 = type metadata accessor for CorrectionsContext();
  *(_QWORD *)(v7 + 312) = v9;
  *(_QWORD *)(v7 + 320) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 328) = swift_task_alloc();
  updated = type metadata accessor for ContextUpdateScope();
  *(_QWORD *)(v7 + 336) = updated;
  *(_QWORD *)(v7 + 344) = *(_QWORD *)(updated - 8);
  *(_QWORD *)(v7 + 352) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  *(_QWORD *)(v7 + 360) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  *(_QWORD *)(v7 + 368) = swift_task_alloc();
  v11 = type metadata accessor for Parse();
  *(_QWORD *)(v7 + 376) = v11;
  *(_QWORD *)(v7 + 384) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 392) = swift_task_alloc();
  v12 = type metadata accessor for USOParse();
  *(_QWORD *)(v7 + 400) = v12;
  *(_QWORD *)(v7 + 408) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v7 + 416) = swift_task_alloc();
  v13 = type metadata accessor for Input();
  *(_QWORD *)(v7 + 424) = v13;
  *(_QWORD *)(v7 + 432) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v7 + 440) = swift_task_alloc();
  v14 = type metadata accessor for PluginAction();
  *(_QWORD *)(v7 + 448) = v14;
  *(_QWORD *)(v7 + 456) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v7 + 464) = swift_task_alloc();
  *(_QWORD *)(v7 + 472) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  *(_QWORD *)(v7 + 480) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(_QWORD *)(v7 + 488) = swift_task_alloc();
  *(_QWORD *)(v7 + 496) = swift_task_alloc();
  v15 = type metadata accessor for FlowUnhandledReason();
  *(_QWORD *)(v7 + 504) = v15;
  *(_QWORD *)(v7 + 512) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v7 + 520) = swift_task_alloc();
  *(_QWORD *)(v7 + 528) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrescribedTool?);
  *(_QWORD *)(v7 + 536) = swift_task_alloc();
  *(_QWORD *)(v7 + 544) = swift_task_alloc();
  v16 = type metadata accessor for CancellationError();
  *(_QWORD *)(v7 + 552) = v16;
  *(_QWORD *)(v7 + 560) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v7 + 568) = swift_task_alloc();
  *(_QWORD *)(v7 + 576) = type metadata accessor for ConversationCommitResult();
  *(_QWORD *)(v7 + 584) = swift_task_alloc();
  *(_QWORD *)(v7 + 592) = swift_task_alloc();
  *(_QWORD *)(v7 + 600) = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v7 + 608) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

void ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = v0[75];
  v2 = v0[73];
  outlined init with take of StringKeyedValue(v0[74], v1, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  outlined init with copy of ConversationHelperInput(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  v3 = (char *)sub_1B4C5E5F8 + 4 * byte_1B4EE7FD0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B4C5E5F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t ObjectType;
  _QWORD *v3;

  v1 = (uint64_t *)v0[73];
  v0[91] = *v1;
  v0[92] = v1[1];
  ObjectType = swift_getObjectType();
  v0[93] = ObjectType;
  v3 = (_QWORD *)swift_task_alloc();
  v0[94] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
  return ServiceBridgeDelegate.fetchSelfReflectionDecision()((uint64_t)(v0 + 104), ObjectType, v0[33]);
}

uint64_t sub_1B4C5E670()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = v0[58];
  v2 = v0[59];
  v4 = v0[56];
  v5 = v0[57];
  v6 = v0[34];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 32))(v2, v0[73], v4);
  v7 = *(void (**)(uint64_t))(**(_QWORD **)(v6 + 208) + 192);
  v8 = swift_retain();
  v7(v8);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  v11 = os_log_type_enabled(v9, v10);
  v13 = v0[57];
  v12 = v0[58];
  v14 = v0[56];
  if (v11)
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    *(_QWORD *)(v1 - 80) = v16;
    *(_DWORD *)v15 = 136315138;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B770], MEMORY[0x1E0D9B788]);
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v15 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)(v1 - 80));
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v12, v14);
    _os_log_impl(&dword_1B4BE6000, v9, v10, "[ConversationService] Conversation wants to redirect to plugin action: %s)", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v16, -1, -1);
    MEMORY[0x1B5E44758](v15, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v0[58], v0[56]);
  }

  v0[95] = v19;
  v20 = (_QWORD *)v0[34];
  v21 = v20[5];
  v22 = v20[6];
  __swift_project_boxed_opaque_existential_1(v20 + 2, v21);
  *(_QWORD *)(v1 - 88) = **(int **)(v22 + 24) + *(_QWORD *)(v22 + 24);
  v23 = (_QWORD *)swift_task_alloc();
  v0[96] = v23;
  *v23 = v0;
  v23[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v1 - 88))(v0[59], v0[30], v0[31], v0[32], v0[33], v21, v22);
}

uint64_t type metadata accessor for ConversationCommitResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationCommitResult;
  if (!type metadata singleton initialization cache for ConversationCommitResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t protocol witness for DecisionMaking.commitCorrections() in conformance DecisionEngine()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

{
  uint64_t v0;

  CorrectionsService.commit()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall CorrectionsService.commit()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[CorrectionsService] Commit to clear context inside CorrectionsEngine", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v6 = v1 + 2;
  v8 = v1[5];
  v7 = v1[6];
  __swift_project_boxed_opaque_existential_1(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v8, v7);
}

uint64_t protocol witness for CorrectionsHandling.commit() in conformance CorrectionsPlatformClient()
{
  return dispatch thunk of CorrectionsPlatformClient.commit()();
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(void *a1, void *a2)
{
  uint64_t v2;

  return closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a6;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  swift_retain();
  v30 = a4;
  swift_retain();
  v18 = a2;
  v19 = one-time initialization token for shared;
  v20 = a5;
  v21 = a7;
  swift_retain();
  v22 = a1;
  v23 = a1;
  if (v19 != -1)
    swift_once();
  swift_beginAccess();
  v24 = static MessageBusActor.shared;
  v25 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v24;
  v26[3] = v25;
  v27 = v30;
  v26[4] = a3;
  v26[5] = v27;
  v26[6] = a2;
  v26[7] = v20;
  v26[8] = v31;
  v26[9] = v21;
  v26[10] = v22;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:), (uint64_t)v26);
  (*(void (**)(void))(*(_QWORD *)v16 + 120))();
  return swift_release();
}

uint64_t partial apply for closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationClient.prepare(bridge:)(a1, a2, a3, v9, v8);
}

uint64_t closure #1 in RemoteConversationClient.prepare(bridge:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = swift_allocObject();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:);
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = closure #1 in RemoteConversationClient.prepare(bridge:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t ConversationContextUpdateMetadata.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType;
  v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId;
  v4 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationClient.commit(bridge:)(a1, a2, a3, v9, v8);
}

uint64_t closure #1 in RemoteConversationClient.commit(bridge:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = swift_allocObject();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.commit(bridge:);
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  type metadata accessor for ConversationCommitResult();
  *v4 = v0;
  v4[1] = closure #1 in RemoteConversationClient.commit(bridge:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t FlowPluginInfo.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  void *v19;
  id v20;
  uint64_t ObjectType;

  v3 = v1;
  v4 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4EFD620);
  v5 = objc_msgSend(a1, sel_containsValueForKey_, v4);

  if (v5)
  {
    v6 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4EFD620);
    v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v6);

    v8 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EFD640);
    v9 = objc_msgSend(a1, sel_containsValueForKey_, v8);

    if (v9)
    {
      v10 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EFD640);
      v11 = (uint64_t)objc_msgSend(a1, sel_decodeBoolForKey_, v10);

    }
    else
    {
      v11 = 1;
    }
    v17 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EFD660);
    v18 = objc_msgSend(a1, sel_containsValueForKey_, v17);

    if (v18)
    {
      v19 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EFD660);
      v20 = objc_msgSend(a1, sel_decodeIntegerForKey_, v19);

    }
    else
    {
      v20 = 0;
    }
    ObjectType = swift_getObjectType();

    v16 = (*(uint64_t (**)(id, uint64_t, id, _QWORD))(ObjectType + 104))(v7, v11, v20, 0);
    swift_deallocPartialClassInstance();
  }
  else
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "Could not deserialize suppportsNLv4Parses in FlowPluginInfo", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v16;
}

id FlowPluginInfo.__allocating_init(supportsOnDeviceNL:isPersonalRequest:sensitivityPolicy:)(char a1, unsigned __int8 a2, uint64_t a3, char a4)
{
  objc_class *v4;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  objc_super v13;

  v9 = a2;
  v10 = objc_allocWithZone(v4);
  v10[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL] = a1;
  v10[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest] = (v9 == 2) | a2 & 1;
  if ((a4 & 1) != 0)
    v11 = 0;
  else
    v11 = a3;
  *(_QWORD *)&v10[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy] = v11;
  v13.receiver = v10;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id FlowPluginInfo.init(supportsOnDeviceNL:isPersonalRequest:sensitivityPolicy:)(char a1, char a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  objc_super v7;

  v4[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL] = a1;
  v4[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest] = (a2 == 2) | a2 & 1;
  if ((a4 & 1) != 0)
    a3 = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy] = a3;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for FlowPluginInfo();
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t type metadata accessor for FlowPluginInfo()
{
  return objc_opt_self();
}

uint64_t ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)(void *a1)
{
  return ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(a1, (uint64_t)&unk_1E6851258, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:));
}

void ConversationBridgeProcessorDelegate.flowPluginWillExecute(flowPluginInfo:)(char *a1)
{
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  char *v24;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = (_QWORD *)Strong;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v6, "Checking if request is sensitive", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

    v8 = (void *)objc_opt_self();
    v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy];
    v10 = (void *)objc_opt_self();
    v11 = objc_msgSend(v10, sel_sharedPreferences);
    v12 = objc_msgSend(v11, sel_siriDataSharingOptInStatus);

    v13 = objc_msgSend(v10, sel_sharedPreferences);
    v14 = objc_msgSend(v13, sel_languageCode);

    LODWORD(v8) = objc_msgSend(v8, sel_isRequestSensitiveWithPolicy_optInStatus_siriLanguageCode_, v9, v12, v14);
    if ((_DWORD)v8)
    {
      v15 = v3[8];
      v16 = v3[9];
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(**(_QWORD **)((char *)v3
                                                                           + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil)
                                                             + 232);
      swift_retain();
      swift_bridgeObjectRetain();
      v17(6, v15, v16);
      swift_release();
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *))(*v3 + 976))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    v19 = a1;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v22 = 138412290;
      v24 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v23 = v19;

      _os_log_impl(&dword_1B4BE6000, v20, v21, "ConversationRequestProcessor already released, ignoring flowPluginWillExecute of %@", v22, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v23, -1, -1);
      MEMORY[0x1B5E44758](v22, -1, -1);

    }
    else
    {

    }
  }
}

void ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unsigned __int8 *v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  unsigned __int8 *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  const char *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RequestType();
  v60 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  v11 = a1;
  v61 = v10;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v57 = v7;
    v16 = (_QWORD *)v15;
    *(_DWORD *)v14 = 138412290;
    aBlock[0] = v11;
    v17 = v11;
    v58 = v6;
    v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v16 = v11;

    v6 = v58;
    _os_log_impl(&dword_1B4BE6000, v12, v13, "Received FlowPluginInfo: %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v19 = v16;
    v7 = v57;
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

  }
  v20 = (*(uint64_t (**)(void))(*v2 + 528))();
  if (v20)
  {
    v21 = v20;
    v22 = (void **)(v20 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
    swift_beginAccess();
    v23 = *v22;
    *v22 = v11;

    v24 = v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState;
    v25 = swift_beginAccess();
    if (*(_QWORD *)v24 >> 62 == 1)
    {
      if (*((_BYTE *)v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) == 1)
      {
        v26 = *(_QWORD *)(*(_QWORD *)v24 + 24);
        MEMORY[0x1E0C80A78](v25);
        *(&v56 - 4) = (uint64_t)v2;
        *(&v56 - 3) = v27;
        v54 = v26;
        v55 = v11;
        v28 = objc_allocWithZone((Class)type metadata accessor for FlowPluginInfoMessage());
        v29 = v11;
        swift_bridgeObjectRetain();
        v30 = (void *)FlowPluginInfoMessage.init(build:)();
        swift_bridgeObjectRelease();
        if (v30)
        {
          __swift_project_boxed_opaque_existential_1(v2 + 3, v2[6]);
          dispatch thunk of MessagePublishing.postMessage(_:)();
          v31 = Logger.logObject.getter();
          v32 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v31, v32))
          {
            v33 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v33 = 0;
            _os_log_impl(&dword_1B4BE6000, v31, v32, "Posted FlowPluginInfo message to the bus", v33, 2u);
            MEMORY[0x1B5E44758](v33, -1, -1);
            swift_release();

          }
          else
          {

            swift_release();
          }
          return;
        }
        v38 = Logger.logObject.getter();
        v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v40 = 0;
          v41 = "Could not init FlowPluginInfoMessage";
          goto LABEL_17;
        }
      }
      else
      {
        v58 = (char *)v2[10];
        v42 = v11;
        v43 = v2[11];
        v44 = v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
        swift_beginAccess();
        v45 = (uint64_t)v59;
        v46 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v44, v7);
        v47 = v42[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest];
        v48 = v42;
        LOBYTE(v44) = ConversationRequestProcessorTurnState.isServerFallback.getter();
        v49 = type metadata accessor for UserID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v6, 1, 1, v49);
        v50 = specialized static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)((uint64_t)v58, v43, v45, v47, v44 & 1, 0, 1, 0, (uint64_t)v6);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UserID?);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v7);
        if (v50)
        {
          v51 = (void *)v2[2];
          aBlock[4] = closure #2 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:);
          aBlock[5] = 0;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
          aBlock[3] = &block_descriptor_8;
          v52 = _Block_copy(aBlock);
          v53 = v50;
          objc_msgSend(v51, sel_handleCommand_completion_, v53, v52);
          swift_release();
          _Block_release(v52);

          return;
        }
        v38 = Logger.logObject.getter();
        v39 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v40 = 0;
          v41 = "VoiceIdentificationSignal was not initialized. Refer to RequestDispatcher logs to understand why.";
          goto LABEL_17;
        }
      }
    }
    else
    {
      v37 = v11;
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v40 = 0;
        v41 = "Received FlowPluginInfo from Conversation before endpointing. FlowPluginInfo is not supposed to be sent eagerly.";
LABEL_17:
        _os_log_impl(&dword_1B4BE6000, v38, v39, v41, v40, 2u);
        MEMORY[0x1B5E44758](v40, -1, -1);
        swift_release();

        return;
      }
    }

    swift_release();
    return;
  }
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_1B4BE6000, v34, v35, "Ignoring FlowPluginInfo as we are not in a turn", v36, 2u);
    MEMORY[0x1B5E44758](v36, -1, -1);
  }

}

uint64_t FlowPluginInfo.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;

  _StringGuts.grow(_:)(79);
  v1._countAndFlagsBits = 0xD000000000000022;
  v1._object = (void *)0x80000001B4EFD5B0;
  String.append(_:)(v1);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL))
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL))
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001B4EFD5E0;
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest))
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest))
    v7 = 0xE400000000000000;
  else
    v7 = 0xE500000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000014;
  v9._object = (void *)0x80000001B4EFD600;
  String.append(_:)(v9);
  type metadata accessor for AFSiriDataSharingSensitivityPolicy(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

void type metadata accessor for AFSiriDataSharingSensitivityPolicy(uint64_t a1)
{
  type metadata accessor for AFUserIdentityClassfication(a1, &lazy cache variable for type metadata for AFSiriDataSharingSensitivityPolicy);
}

uint64_t ConversationRequestProcessorTurnState.isServerFallback.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, _QWORD, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = type metadata accessor for RequestType();
  v2 = *(_QWORD **)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v46 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v47 = (char *)&v43 - v6;
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v43 - v8;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v43 - v10;
  v44 = v0;
  v12 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  v45 = (void (*)(char *, uint64_t, uint64_t))v2[2];
  v45(v11, v12, v1);
  v13 = (void (*)(char *, _QWORD, uint64_t))v2[13];
  v13(v9, *MEMORY[0x1E0D9E880], v1);
  lazy protocol witness table accessor for type RequestType and conformance RequestType();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v49 == v51 && v50 == v52)
    v14 = 1;
  else
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = (void (*)(char *, uint64_t))v2[1];
  v15(v9, v1);
  v15(v11, v1);
  if ((v14 & 1) != 0)
    goto LABEL_10;
  v16 = v47;
  v45(v47, v12, v1);
  v17 = v46;
  v13(v46, *MEMORY[0x1E0D9E8A8], v1);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v49 == v51 && v50 == v52)
  {
    swift_bridgeObjectRelease_n();
    v15(v17, v1);
    v15(v16, v1);
LABEL_10:
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1B4BE6000, v20, v21, "Server fallback is always true for this requestType", v22, 2u);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }

    v23 = 1;
    return v23 & 1;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15(v17, v1);
  v15(v16, v1);
  if ((v18 & 1) != 0)
    goto LABEL_10;
  v25 = (_QWORD *)(v44 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  if (*v25 >> 62 == 1)
  {
    v26 = *v25 & 0x3FFFFFFFFFFFFFFFLL;
    v27 = one-time initialization token for conversationBridge;
    swift_retain();
    if (v27 != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v51 = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 800);
      v34 = swift_retain();
      v35 = v33(v34);
      v37 = v36;
      swift_release();
      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v29, v30, "Selected ResultCandidateState: %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v32, -1, -1);
      MEMORY[0x1B5E44758](v31, -1, -1);

    }
    else
    {

      v38 = swift_release_n();
    }
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 592))(v38);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.conversationBridge);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v41, "No selected RC found", v42, 2u);
      MEMORY[0x1B5E44758](v42, -1, -1);
    }

    v23 = 0;
  }
  return v23 & 1;
}

uint64_t ExecutionOutput.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t ObjectType;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v3 = v1;
  v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    v5 = (void *)v4;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    v26 = NSCoder.decodeObject<A>(of:forKey:)();
    type metadata accessor for ExecutionContextUpdate();
    v24 = NSCoder.decodeObject<A>(of:forKey:)();
    v6 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
    v7 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
    v8 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
    v9 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
    ObjectType = swift_getObjectType();

    v25 = v6;
    if (v6)
    {
      v11 = v6;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      if (v7)
        goto LABEL_4;
    }
    else if (v7)
    {
LABEL_4:
      v12 = v7;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      if (v8)
        goto LABEL_5;
      goto LABEL_14;
    }
    if (v8)
    {
LABEL_5:
      v13 = v8;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      v14 = v7;
      if (!v9)
      {
LABEL_15:
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(ObjectType + 136))(v26, v24, 0, 0, 0, 0, 0, 0, 0, 0, v21, v22);

        swift_deallocPartialClassInstance();
        return v20;
      }
LABEL_6:
      v15 = v9;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      goto LABEL_15;
    }
LABEL_14:
    v14 = v7;
    if (!v9)
      goto LABEL_15;
    goto LABEL_6;
  }

  if (one-time initialization token for executor != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v17, v18, "Could not decode ExecutionOutput: missing executionRequestId", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

uint64_t type metadata accessor for ExecutionContextUpdate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ExecutionContextUpdate;
  if (!type metadata singleton initialization cache for ExecutionContextUpdate)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ExecutionContextUpdate.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t);
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  unint64_t v109;
  char *v110;
  void (*v111)(char *, char *, uint64_t);
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, uint64_t, uint64_t);
  char *v141;
  void *v142;
  unsigned int v143;
  uint64_t v144;
  void *v145;
  id v146;
  uint64_t ObjectType;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  id v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  uint8_t *v167;
  id v168;
  uint64_t v169;
  NSObject *v170;
  os_log_type_t v171;
  uint8_t *v172;
  id v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  id v187;
  uint64_t updated;
  uint64_t v189;
  uint64_t v190;
  id v191;
  char *v192;
  char *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  __int128 v222;
  uint64_t v223;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContextUpdateScope?);
  MEMORY[0x1E0C80A78](v3);
  v208 = (char *)&v174 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for ContextUpdateScope();
  v196 = *(_QWORD *)(updated - 8);
  v5 = MEMORY[0x1E0C80A78](updated);
  v182 = (char *)&v174 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v175 = (char *)&v174 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v174 - v9;
  v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  v11 = MEMORY[0x1E0C80A78](v176);
  v181 = (uint64_t)&v174 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v177 = (char *)&v174 - v14;
  MEMORY[0x1E0C80A78](v13);
  v190 = (uint64_t)&v174 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v193 = (char *)&v174 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v198 = (char *)&v174 - v19;
  v20 = type metadata accessor for Siri_Nlu_External_Task();
  v21 = *(_QWORD *)(v20 - 8);
  v214 = v20;
  v215 = v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v207 = (char *)&v174 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v206 = (char *)&v174 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v210 = (char *)&v174 - v27;
  MEMORY[0x1E0C80A78](v26);
  v209 = (char *)&v174 - v28;
  v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v29 = MEMORY[0x1E0C80A78](v178);
  v180 = (uint64_t)&v174 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v179 = (char *)&v174 - v32;
  MEMORY[0x1E0C80A78](v31);
  v200 = (uint64_t)&v174 - v33;
  v34 = type metadata accessor for BinaryDecodingOptions();
  v35 = MEMORY[0x1E0C80A78](v34);
  v192 = (char *)&v174 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v35);
  v197 = (char *)&v174 - v38;
  MEMORY[0x1E0C80A78](v37);
  v202 = (char *)&v174 - v39;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
  MEMORY[0x1E0C80A78](v40);
  v203 = (char *)&v174 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = MEMORY[0x1E0C80A78](v42);
  v213 = (unint64_t)&v174 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44);
  v212 = (char *)&v174 - v46;
  v184 = type metadata accessor for NSFastEnumerationIterator();
  v183 = *(_QWORD *)(v184 - 8);
  v47 = MEMORY[0x1E0C80A78](v184);
  v201 = (char *)&v174 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x1E0C80A78](v47);
  v204 = (char *)&v174 - v50;
  MEMORY[0x1E0C80A78](v49);
  v205 = (char *)&v174 - v51;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SACFProvideContext);
  v187 = v1;
  v186 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
  v185 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  v195 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v52 = swift_allocObject();
  v194 = xmmword_1B4EE3BA0;
  *(_OWORD *)(v52 + 16) = xmmword_1B4EE3BA0;
  v53 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v52 + 32) = v53;
  v211 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  *(_QWORD *)(v52 + 40) = v211;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  v199 = v53;
  v191 = a1;
  if (!*((_QWORD *)&v218 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v217, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    v65 = a1;
    v54 = v214;
    v216 = 0;
    goto LABEL_16;
  }
  v174 = (id)v222;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  v54 = v214;
  if (v223)
  {
    v216 = MEMORY[0x1E0DEE9D8];
    v189 = MEMORY[0x1E0DEE9B8] + 8;
    v55 = MEMORY[0x1E0CB0338];
    while (1)
    {
      outlined init with take of Any(&v222, &v217);
      if ((swift_dynamicCast() & 1) == 0)
        break;
      v56 = v220;
      v57 = v221;
      v219 = 0;
      v217 = 0u;
      v218 = 0u;
      outlined copy of Data._Representation(v220, v221);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F6B0], MEMORY[0x1E0D9F688]);
      v58 = v203;
      v59 = v55;
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v58, 0, 1, v42);
      v60 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v61 = v212;
      v60(v212, v58, v42);
      (*(void (**)(unint64_t, char *, uint64_t))(v43 + 16))(v213, v61, v42);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v216 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v216 + 16) + 1, 1, v216);
      v63 = *(_QWORD *)(v216 + 16);
      v62 = *(_QWORD *)(v216 + 24);
      if (v63 >= v62 >> 1)
        v216 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, v216);
      v64 = v216;
      *(_QWORD *)(v216 + 16) = v63 + 1;
      v60((char *)(v64+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v63), (char *)v213, v42);
      outlined consume of Data._Representation(v56, v57);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v212, v42);
      NSFastEnumerationIterator.next()();
      v54 = v214;
      v55 = v59;
      if (!v223)
        goto LABEL_15;
    }
    swift_bridgeObjectRelease();

    v158 = v191;
    if (one-time initialization token for executor != -1)
      swift_once();
    v159 = type metadata accessor for Logger();
    __swift_project_value_buffer(v159, (uint64_t)static Logger.executor);
    v160 = Logger.logObject.getter();
    v161 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v160, v161))
    {
      v162 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v162 = 0;
      _os_log_impl(&dword_1B4BE6000, v160, v161, "Element in decoded array is not Data", v162, 2u);
      MEMORY[0x1B5E44758](v162, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v183 + 8))(v205, v184);
    goto LABEL_92;
  }
  v216 = MEMORY[0x1E0DEE9D8];
LABEL_15:
  (*(void (**)(char *, uint64_t))(v183 + 8))(v205, v184);

  v65 = v191;
LABEL_16:
  v66 = (uint64_t)v208;
  v67 = v199;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v68 = JSONDecoder.init()();
  v69 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v69)
  {
    v70 = (void *)v69;
    v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v73 = v72;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
    lazy protocol witness table accessor for type [RREntity] and conformance <A> [A]();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v71, v73);
    v205 = (char *)v217;
  }
  else
  {
    v205 = 0;
  }
  v74 = type metadata accessor for PommesContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v200, 1, 1, v74);
  v75 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v75)
  {
    v76 = (void *)v75;
    v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v79 = v78;
    lazy protocol witness table accessor for type PommesContext? and conformance <A> A?();
    v80 = v68;
    v81 = (uint64_t)v179;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    v86 = v200;
    outlined destroy of ReferenceResolutionClientProtocol?(v200, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);

    outlined consume of Data._Representation(v77, v79);
    v87 = v86;
    v54 = v214;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v81, v87, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    v67 = v199;
    v68 = v80;
    v66 = (uint64_t)v208;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v82 = type metadata accessor for Logger();
    __swift_project_value_buffer(v82, (uint64_t)static Logger.executor);
    v83 = Logger.logObject.getter();
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v85 = 0;
      _os_log_impl(&dword_1B4BE6000, v83, v84, "Can't decode PommesContext data into Data", v85, 2u);
      MEMORY[0x1B5E44758](v85, -1, -1);
    }

  }
  v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = v194;
  v89 = v211;
  *(_QWORD *)(v88 + 32) = v67;
  *(_QWORD *)(v88 + 40) = v89;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  v212 = (char *)v68;
  if (!*((_QWORD *)&v218 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v217, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_38;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_38:
    v213 = 0;
    goto LABEL_41;
  }
  v203 = v10;
  v202 = (char *)v222;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v223)
  {
    v213 = MEMORY[0x1E0DEE9D8];
    v90 = v209;
    while (1)
    {
      outlined init with take of Any(&v222, &v217);
      if ((swift_dynamicCast() & 1) == 0)
        break;
      v91 = v220;
      v92 = v221;
      v219 = 0;
      v217 = 0u;
      v218 = 0u;
      outlined copy of Data._Representation(v220, v221);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
      v93 = v198;
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      v94 = v215;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v215 + 56))(v93, 0, 1, v54);
      v95 = v93;
      v96 = *(void (**)(char *, char *, uint64_t))(v94 + 32);
      v96(v90, v95, v54);
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v210, v90, v54);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v213 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v213 + 16) + 1, 1, v213);
      v98 = *(_QWORD *)(v213 + 16);
      v97 = *(_QWORD *)(v213 + 24);
      if (v98 >= v97 >> 1)
        v213 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1, v213);
      v99 = v213;
      *(_QWORD *)(v213 + 16) = v98 + 1;
      v100 = v215;
      v101 = v99
           + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))
           + *(_QWORD *)(v215 + 72) * v98;
      v54 = v214;
      v96((char *)v101, v210, v214);
      outlined consume of Data._Representation(v91, v92);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v209, v54);
      NSFastEnumerationIterator.next()();
      if (!v223)
        goto LABEL_40;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v163 = v191;
    if (one-time initialization token for executor != -1)
      swift_once();
    v164 = type metadata accessor for Logger();
    __swift_project_value_buffer(v164, (uint64_t)static Logger.executor);
    v165 = Logger.logObject.getter();
    v166 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v165, v166))
    {
      v167 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v167 = 0;
      _os_log_impl(&dword_1B4BE6000, v165, v166, "Element in decoded array is not of type Data", v167, 2u);
      MEMORY[0x1B5E44758](v167, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v183 + 8))(v204, v184);
    goto LABEL_91;
  }
  v213 = MEMORY[0x1E0DEE9D8];
LABEL_40:
  (*(void (**)(char *, uint64_t))(v183 + 8))(v204, v184);

  v65 = v191;
  v10 = v203;
  v66 = (uint64_t)v208;
  v67 = v199;
LABEL_41:
  v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = v194;
  v103 = v211;
  *(_QWORD *)(v102 + 32) = v67;
  *(_QWORD *)(v102 + 40) = v103;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v218 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v217, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_53;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_53:
    v215 = 0;
    goto LABEL_56;
  }
  v203 = v10;
  v210 = (char *)v222;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v223)
  {
    v104 = MEMORY[0x1E0DEE9D8];
    v105 = v206;
    while (1)
    {
      outlined init with take of Any(&v222, &v217);
      if ((swift_dynamicCast() & 1) == 0)
        break;
      v106 = v220;
      v107 = v221;
      v219 = 0;
      v217 = 0u;
      v218 = 0u;
      outlined copy of Data._Representation(v220, v221);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
      v108 = v193;
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      v109 = v215;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v215 + 56))(v108, 0, 1, v54);
      v110 = v108;
      v111 = *(void (**)(char *, char *, uint64_t))(v109 + 32);
      v111(v105, v110, v54);
      (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v207, v105, v54);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v104 + 16) + 1, 1, v104);
      v113 = *(_QWORD *)(v104 + 16);
      v112 = *(_QWORD *)(v104 + 24);
      if (v113 >= v112 >> 1)
        v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v112 > 1, v113 + 1, 1, v104);
      *(_QWORD *)(v104 + 16) = v113 + 1;
      v114 = v215;
      v115 = v104
           + ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))
           + *(_QWORD *)(v215 + 72) * v113;
      v54 = v214;
      v111((char *)v115, v207, v214);
      outlined consume of Data._Representation(v106, v107);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v206, v54);
      NSFastEnumerationIterator.next()();
      v66 = (uint64_t)v208;
      if (!v223)
        goto LABEL_55;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v168 = v191;
    if (one-time initialization token for executor != -1)
      swift_once();
    v169 = type metadata accessor for Logger();
    __swift_project_value_buffer(v169, (uint64_t)static Logger.executor);
    v170 = Logger.logObject.getter();
    v171 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v170, v171))
    {
      v172 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v172 = 0;
      _os_log_impl(&dword_1B4BE6000, v170, v171, "Element in decoded array is not of type Data", v172, 2u);
      MEMORY[0x1B5E44758](v172, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v183 + 8))(v201, v184);
LABEL_91:
    outlined destroy of ReferenceResolutionClientProtocol?(v200, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
LABEL_92:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v104 = MEMORY[0x1E0DEE9D8];
LABEL_55:
  v215 = v104;
  (*(void (**)(char *, uint64_t))(v183 + 8))(v201, v184);

  v65 = v191;
  v10 = v203;
LABEL_56:
  v116 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v190, 1, 1, v116);
  v117 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v117)
  {
    v118 = v117;
    v119 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v121 = v120;
    lazy protocol witness table accessor for type Parse.DirectInvocation? and conformance <A> A?();
    v122 = v177;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    v127 = (uint64_t)v122;
    v128 = v190;
    outlined destroy of ReferenceResolutionClientProtocol?(v190, &demangling cache variable for type metadata for Parse.DirectInvocation?);
    outlined consume of Data._Representation(v119, v121);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v127, v128, &demangling cache variable for type metadata for Parse.DirectInvocation?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v129 = type metadata accessor for Logger();
    __swift_project_value_buffer(v129, (uint64_t)static Logger.executor);
    v130 = Logger.logObject.getter();
    v131 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v130, v131))
    {
      v132 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v132 = 0;
      _os_log_impl(&dword_1B4BE6000, v130, v131, "Successfully decoded undoDirectInvocation data into Optional<Parse.DirectInvocation>", v132, 2u);
      MEMORY[0x1B5E44758](v132, -1, -1);
    }

    v124 = v118;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v123 = type metadata accessor for Logger();
    __swift_project_value_buffer(v123, (uint64_t)static Logger.executor);
    v124 = Logger.logObject.getter();
    v125 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v124, v125))
    {
      v126 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v126 = 0;
      _os_log_impl(&dword_1B4BE6000, v124, v125, "Can't decode undoDirectInvocation data into Data", v126, 2u);
      MEMORY[0x1B5E44758](v126, -1, -1);
    }
  }

  v133 = *MEMORY[0x1E0D9BD88];
  v134 = *(void (**)(char *, uint64_t, uint64_t))(v196 + 104);
  v135 = updated;
  v134(v10, v133, updated);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v136 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v136)
  {
    v137 = (void *)v136;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    ContextUpdateScope.init(rawValue:)();

    v138 = v196;
    (*(void (**)(char *, uint64_t))(v196 + 8))(v10, v135);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48))(v66, 1, v135) == 1)
    {
      v139 = v175;
      v134(v175, v133, v135);
      outlined destroy of ReferenceResolutionClientProtocol?(v66, &demangling cache variable for type metadata for ContextUpdateScope?);
      (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v10, v139, v135);
    }
    else
    {
      v140 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 32);
      v141 = v175;
      v140(v175, v66, v135);
      v140(v10, (uint64_t)v141, v135);
    }
  }
  v142 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001ALL, 0x80000001B4EF4CC0);
  v143 = objc_msgSend(v65, sel_containsValueForKey_, v142);

  if (v143 && (v144 = NSCoder.decodeObject<A>(of:forKey:)()) != 0)
  {
    v145 = (void *)v144;
    v217 = 0uLL;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    v211 = *((_QWORD *)&v217 + 1);
    v214 = v217;
  }
  else
  {
    v214 = 0;
    v211 = 0;
  }
  v146 = v187;
  ObjectType = swift_getObjectType();

  v148 = v190;
  v149 = v181;
  outlined init with copy of ReferenceResolutionClientProtocol?(v190, v181, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  v150 = v200;
  v151 = v180;
  outlined init with copy of ReferenceResolutionClientProtocol?(v200, v180, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v152 = v196;
  v153 = v182;
  v154 = v10;
  v155 = v10;
  v156 = updated;
  (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v182, v154, updated);
  v157 = (*(uint64_t (**)(id, id, unint64_t, unint64_t, unint64_t, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t))(ObjectType + 160))(v186, v185, v216, v213, v215, v149, v205, v151, v153, v214, v211);

  swift_release();
  (*(void (**)(char *, uint64_t))(v152 + 8))(v155, v156);
  outlined destroy of ReferenceResolutionClientProtocol?(v148, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  outlined destroy of ReferenceResolutionClientProtocol?(v150, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  swift_deallocPartialClassInstance();
  return v157;
}

uint64_t objectdestroy_11Tm(uint64_t *a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v2 + v6, v4);
  a2(*(_QWORD *)(v2 + v7), *(unsigned __int8 *)(v2 + v7 + 8));
  return swift_deallocObject();
}

uint64_t objectdestroy_7Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [RREntity] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RREntity]);
    v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RREntity and conformance RREntity, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3E50], MEMORY[0x1E0DA3E68]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RREntity]);
    v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RREntity and conformance RREntity, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3E50], MEMORY[0x1E0DA3E60]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesContext? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D98A90], MEMORY[0x1E0D98AA0]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D98A90], MEMORY[0x1E0D98AA8]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEE9A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type Parse.DirectInvocation? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Parse.DirectInvocation?);
    v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Parse.DirectInvocation and conformance Parse.DirectInvocation, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C618], MEMORY[0x1E0D9C628]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Parse.DirectInvocation?);
    v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Parse.DirectInvocation and conformance Parse.DirectInvocation, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C618], MEMORY[0x1E0D9C630]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEE9A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?);
  }
  return result;
}

void specialized static ExecutionContextUpdate.synchronizePromptContexts(pommesContext:nativeFlowContextCommand:)(void (*a1)(_QWORD, _QWORD, _QWORD), void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint8_t *v22;
  uint8_t *v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  unint64_t v32;
  void (*v33)(_QWORD, _QWORD, _QWORD);
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  unint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint8_t *v40;
  Class isa;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  id v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  void (*v68)(char *, _QWORD, uint64_t);
  char *v69;
  unsigned int (*v70)(_QWORD, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v71 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v69 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PommesContext();
  v11 = *(_QWORD **)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = (unsigned int (*)(_QWORD, uint64_t, uint64_t))v11[6];
  if (!v70(a1, 1, v10))
  {
    v68 = (void (*)(char *, _QWORD, uint64_t))v11[2];
    v68(v13, a1, v10);
    v14 = PommesContext.exportPegasusConversationContext()();
    v16 = v15;
    v67 = (void (*)(char *, uint64_t))v11[1];
    v67(v13, v10);
    if (v16 >> 60 != 15)
    {
      v32 = v16;
      v33 = a1;
      if (one-time initialization token for executor != -1)
        swift_once();
      v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.debug.getter();
      v37 = v32;
      if (os_log_type_enabled(v35, v36))
      {
        v38 = v14;
        v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_1B4BE6000, v35, v36, "Propagating PommesContext Pegasus conversation context to NativeFlowContextUpdate", v39, 2u);
        v40 = v39;
        v14 = v38;
        MEMORY[0x1B5E44758](v40, -1, -1);
      }

      if (a2)
      {
        isa = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(a2, sel_setPegasusConversationContext_, isa);

      }
      v71 = v14;
      if (!v70(v33, 1, v10))
      {
        v68(v13, v33, v10);
        v42 = PommesContext.exportPromptContextData()();
        v44 = v43;
        v67(v13, v10);
        if (v44 >> 60 != 15)
        {
          v59 = Logger.logObject.getter();
          v60 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v59, v60))
          {
            v61 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v61 = 0;
            _os_log_impl(&dword_1B4BE6000, v59, v60, "Propagating PommesContext prompt context data to NativeFlowContextUpdate", v61, 2u);
            MEMORY[0x1B5E44758](v61, -1, -1);
          }

          if (!a2)
          {
            outlined consume of Data?(v71, v37);
            outlined consume of Data?(v42, v44);
            return;
          }
          v46 = Data._bridgeToObjectiveC()().super.isa;
          objc_msgSend(a2, sel_setPromptContextProto_, v46);
          outlined consume of Data?(v71, v37);
          v62 = v42;
          v63 = v44;
LABEL_38:
          outlined consume of Data?(v62, v63);

          return;
        }
      }
      v45 = a2;
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v46, v47))
      {
        outlined consume of Data?(v71, v37);

        return;
      }
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v72 = v49;
      *(_DWORD *)v48 = 136315138;
      if (a2)
      {
        v50 = objc_msgSend(v45, sel_promptContextProto);
        if (v50)
        {
          v51 = v50;
          a2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v53 = v52;

LABEL_37:
          *(_QWORD *)&v73 = a2;
          *((_QWORD *)&v73 + 1) = v53;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
          v64 = String.init<A>(describing:)();
          *(_QWORD *)&v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v46, v47, "No PommesContext prompt context data. Leaving existing: %s", v48, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v49, -1, -1);
          MEMORY[0x1B5E44758](v48, -1, -1);
          v62 = v71;
          v63 = v37;
          goto LABEL_38;
        }
        a2 = 0;
      }
      v53 = 0xF000000000000000;
      goto LABEL_37;
    }
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = a2;
    v21 = a1;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1B4BE6000, v18, v19, "Propagating NativeFlowContextUpdate prompt context to PommesContext", v22, 2u);
    v23 = v22;
    a1 = v21;
    a2 = v20;
    MEMORY[0x1B5E44758](v23, -1, -1);
  }

  if (a2 && (v24 = objc_msgSend(a2, sel_promptContextProto)) != 0)
  {
    v25 = v24;
    v68 = (void (*)(char *, _QWORD, uint64_t))a1;
    v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v27;

    v75 = 0;
    v73 = 0u;
    v74 = 0u;
    outlined copy of Data._Representation(v26, v28);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0100], MEMORY[0x1E0DA0060]);
    Message.init(serializedData:extensions:partial:options:)();
    v54 = v71;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v7, 0, 1, v8);
    v55 = v69;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v69, v7, v8);
    if (!v70(v68, 1, v10))
      PommesContext.update(with:)();
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_1B4BE6000, v56, v57, "Applied NFCU promptContext to PommesContext", v58, 2u);
      MEMORY[0x1B5E44758](v58, -1, -1);
    }

    outlined consume of Data._Representation(v26, v28);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v8);
  }
  else
  {
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1B4BE6000, v29, v30, "Unable to apply NFCU promptContext to PommesContext; either no NFCU, no promptContextProto, or serialization error",
        v31,
        2u);
      MEMORY[0x1B5E44758](v31, -1, -1);
    }

  }
}

uint64_t ExecutionContextUpdate.debugDescription.getter()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  unint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  unint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Swift::String v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  unint64_t v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  uint64_t v69;
  void *v70;
  Swift::String v71;
  unint64_t v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  void *v78;
  Swift::String v79;
  unint64_t v80;
  uint64_t v81;
  Swift::String v82;
  uint64_t v83;
  Swift::String v84;
  uint64_t v85;
  void *v86;
  Swift::String v87;
  Swift::String v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  objc_super v94;
  uint64_t v95;
  unint64_t v96;

  v1 = v0;
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  MEMORY[0x1E0C80A78](v91);
  v90 = (uint64_t)&v90 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (objc_class *)type metadata accessor for ExecutionContextUpdate();
  v94.receiver = v0;
  v94.super_class = v6;
  v7 = objc_msgSendSuper2(&v94, sel_debugDescription);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v95 = v8;
  v96 = v10;
  v11._countAndFlagsBits = 31520;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v13 = v95;
  v12 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 0;
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 8250;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v92 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SACFProvideContext?);
  v15._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17 = v95;
  v18 = (void *)v96;
  v95 = v13;
  v96 = v12;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v95;
  v20 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 7;
  _print_unlocked<A, B>(_:_:)();
  v22._countAndFlagsBits = 8250;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v92 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_nluSystemDialogActs];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_SystemDialogAct]?);
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25 = v95;
  v26 = (void *)v96;
  v95 = v21;
  v96 = v20;
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = v25;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v95;
  v28 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 2;
  _print_unlocked<A, B>(_:_:)();
  v30._countAndFlagsBits = 8250;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  v92 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SARDNativeFlowContextUpdate?);
  v31._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 8236;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  v33 = v95;
  v34 = (void *)v96;
  v95 = v29;
  v96 = v28;
  swift_bridgeObjectRetain();
  v35._countAndFlagsBits = v33;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37 = v95;
  v36 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 3;
  _print_unlocked<A, B>(_:_:)();
  v38._countAndFlagsBits = 8250;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  v92 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]?);
  v39._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 8236;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  v41 = v95;
  v42 = (void *)v96;
  v95 = v37;
  v96 = v36;
  swift_bridgeObjectRetain();
  v43._countAndFlagsBits = v41;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = v95;
  v44 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 6;
  _print_unlocked<A, B>(_:_:)();
  v46._countAndFlagsBits = 8250;
  v46._object = (void *)0xE200000000000000;
  String.append(_:)(v46);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v1[OBJC_IVAR___SKRExecutionContextUpdate_pommesContext], (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v47 = type metadata accessor for PommesContext();
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v5, 1, v47);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  if (v48 == 1)
    v49 = 28526;
  else
    v49 = 7562617;
  if (v48 == 1)
    v50 = 0xE200000000000000;
  else
    v50 = 0xE300000000000000;
  v51 = v50;
  String.append(_:)(*(Swift::String *)&v49);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 8236;
  v52._object = (void *)0xE200000000000000;
  String.append(_:)(v52);
  v53 = v95;
  v54 = (void *)v96;
  v95 = v45;
  v96 = v44;
  swift_bridgeObjectRetain();
  v55._countAndFlagsBits = v53;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56 = v95;
  v57 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 8;
  _print_unlocked<A, B>(_:_:)();
  v58._countAndFlagsBits = 8250;
  v58._object = (void *)0xE200000000000000;
  String.append(_:)(v58);
  v92 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_nluActiveTasks];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]?);
  v59._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 8236;
  v60._object = (void *)0xE200000000000000;
  String.append(_:)(v60);
  v61 = v95;
  v62 = (void *)v96;
  v95 = v56;
  v96 = v57;
  swift_bridgeObjectRetain();
  v63._countAndFlagsBits = v61;
  v63._object = v62;
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v64 = v95;
  v65 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 9;
  _print_unlocked<A, B>(_:_:)();
  v66._countAndFlagsBits = 8250;
  v66._object = (void *)0xE200000000000000;
  String.append(_:)(v66);
  v92 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks];
  swift_bridgeObjectRetain();
  v67._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v68._countAndFlagsBits = 8236;
  v68._object = (void *)0xE200000000000000;
  String.append(_:)(v68);
  v69 = v95;
  v70 = (void *)v96;
  v95 = v64;
  v96 = v65;
  swift_bridgeObjectRetain();
  v71._countAndFlagsBits = v69;
  v71._object = v70;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = v95;
  v72 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 10;
  _print_unlocked<A, B>(_:_:)();
  v74._countAndFlagsBits = 8250;
  v74._object = (void *)0xE200000000000000;
  String.append(_:)(v74);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v1[OBJC_IVAR___SKRExecutionContextUpdate_undoDirectInvocation], v90, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  v75._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  v76._countAndFlagsBits = 8236;
  v76._object = (void *)0xE200000000000000;
  String.append(_:)(v76);
  v77 = v95;
  v78 = (void *)v96;
  v95 = v73;
  v96 = v72;
  swift_bridgeObjectRetain();
  v79._countAndFlagsBits = v77;
  v79._object = v78;
  String.append(_:)(v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v81 = v95;
  v80 = v96;
  v95 = 0;
  v96 = 0xE000000000000000;
  LOBYTE(v92) = 12;
  _print_unlocked<A, B>(_:_:)();
  v82._countAndFlagsBits = 8250;
  v82._object = (void *)0xE200000000000000;
  String.append(_:)(v82);
  v83 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId + 8];
  v92 = *(_QWORD *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId];
  v93 = v83;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v84._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v84);
  swift_bridgeObjectRelease();
  v85 = v95;
  v86 = (void *)v96;
  v95 = v81;
  v96 = v80;
  swift_bridgeObjectRetain();
  v87._countAndFlagsBits = v85;
  v87._object = v86;
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v88._countAndFlagsBits = 125;
  v88._object = (void *)0xE100000000000000;
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  return v95;
}

uint64_t ConversationOutputSubmitter.isMUXEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

SiriKitRuntime::ExecutionContextUpdateScope __swiftcall ContextUpdateScope.toExecutionContextUpdateScope(isMUXEnabled:)(Swift::Bool isMUXEnabled)
{
  uint64_t v1;
  uint64_t updated;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;

  updated = type metadata accessor for ContextUpdateScope();
  v4 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!isMUXEnabled)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1B4BE6000, v10, v11, "Forcing context update scope to be .global since MUX is not enabled", v12, 2u);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }

    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, updated);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, updated);
  if (v7 == *MEMORY[0x1E0D9BD80])
    return 1;
  if (v7 != *MEMORY[0x1E0D9BDA0])
  {
    if (v7 != *MEMORY[0x1E0D9BD88])
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, updated);
    return 0;
  }
  return 2;
}

uint64_t protocol witness for ContextUpdating.applyContextUpdate(_:metadata:scope:) in conformance MultiUserContextUpdater()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
}

uint64_t MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  id v18;
  void *v19;
  Class isa;
  id v21;
  uint64_t result;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v5 = v4;
  v6 = v3;
  v24 = a1;
  v29 = MEMORY[0x1E0DEE9E0];
  v25 = a2;
  v26 = &v29;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), _BYTE *))(*(_QWORD *)v3 + 280))(a3, a2 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, partial apply for closure #1 in MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:), v23);
  if (*(_QWORD *)(v7 + 16))
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v28 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = Dictionary.debugDescription.getter();
      v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v9, v10, "Error while dispatching context: %s", v11, 0xCu);
      swift_arrayDestroy();
      v15 = v12;
      v5 = v4;
      MEMORY[0x1B5E44758](v15, -1, -1);
      MEMORY[0x1B5E44758](v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = v29;
    v29 = 0x8000000000000000;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v28);
    if (v5)
    {
      v29 = v28;
      result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    v29 = v28;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, BOOL, _QWORD, _QWORD))(**(_QWORD **)(v6 + 232) + 168))(1, *(_QWORD *)(v29 + 16) != 0, *(_QWORD *)(v6 + 160), *(_QWORD *)(v6 + 168));
  if (!*(_QWORD *)(v29 + 16))
    return swift_bridgeObjectRelease();
  v17 = swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v17);
  v18 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
  v19 = (void *)MEMORY[0x1B5E432E8](0x55747865746E6F43, 0xEE00726574616470);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, -1, isa);
  swift_bridgeObjectRelease();

  if (!v21)
    return swift_bridgeObjectRelease();
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

unint64_t MultiUserContextUpdater.dispatch(forScope:currentUserId:applyContextTo:)(unsigned __int8 a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v4 = MultiUserContextUpdater.contextUpdaters(forScope:currentUserId:)(a1, a2);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
LABEL_3:
      if (v5 >= 1)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
          {
            v7 = MEMORY[0x1B5E43B94](i, v4);
          }
          else
          {
            v7 = *(_QWORD *)(v4 + 8 * i + 32);
            swift_retain();
          }
          a3(v7);
          swift_release();
        }
        swift_bridgeObjectRelease_n();
        v8 = (void *)MEMORY[0x1E0DEE9D8];
        return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v8);
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for conversationBridge != -1)
LABEL_17:
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1B4BE6000, v10, v11, "ContextUpdater list was evaluated to be empty. Ignoring the context update.", v12, 2u);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  v8 = &outlined read-only object #0 of MultiUserContextUpdater.dispatch(forScope:currentUserId:applyContextTo:);
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v8);
}

uint64_t MultiUserContextUpdater.contextUpdaters(forScope:currentUserId:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];

  v3 = v2;
  v50 = a2;
  v5 = type metadata accessor for UserID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v47 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v51 = __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v47 = v9;
    v48 = v11;
    v49 = v5;
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v53[0] = v19;
    *(_DWORD *)v18 = 136315138;
    if (a1)
    {
      if (a1 == 1)
        v20 = 0x55746E6572727563;
      else
        v20 = 0x72657355656D6F68;
      if (a1 == 1)
        v21 = 0xEB00000000726573;
      else
        v21 = 0xE900000000000073;
    }
    else
    {
      v21 = 0xE600000000000000;
      v20 = 0x6C61626F6C67;
    }
    v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v16, v17, "ContextUpdateScope received: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);

    v11 = v48;
    v5 = v49;
    v9 = v47;
    v22 = a1;
    if (!a1)
      goto LABEL_20;
  }
  else
  {

    v22 = a1;
    if (!a1)
    {
LABEL_20:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
      v26 = MultiUserContextUpdater.contextUpdater(forUserId:)((uint64_t)v14);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      if (v26)
        goto LABEL_21;
      v43 = Logger.logObject.getter();
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_1B4BE6000, v43, v44, "Could not find shared contextUpdater instance", v45, 2u);
        MEMORY[0x1B5E44758](v45, -1, -1);
      }

      return MEMORY[0x1E0DEE9D8];
    }
  }
  if (v22 == 1)
  {
    v23 = v50;
    v24 = specialized Set.contains(_:)(v50, *(_QWORD *)(v3 + 240));
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    if ((v24 & 1) != 0)
    {
      v25(v14, v23, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
      v26 = MultiUserContextUpdater.contextUpdater(forUserId:)((uint64_t)v14);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      if (v26)
      {
LABEL_21:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1B4EEBC90;
        *(_QWORD *)(v36 + 32) = v26;
        v53[0] = v36;
        specialized Array._endMutation()();
        return v53[0];
      }
      v27 = v6;
      v25(v11, v23, v5);
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        v31 = swift_slowAlloc();
        v53[0] = v31;
        *(_DWORD *)v30 = 136315138;
        lazy protocol witness table accessor for type UserID and conformance UserID();
        v32 = dispatch thunk of CustomStringConvertible.description.getter();
        v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v5);
        _os_log_impl(&dword_1B4BE6000, v28, v29, "Could not find ContextUpdater for userId: %s", v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v31, -1, -1);
        MEMORY[0x1B5E44758](v30, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v5);
      }

    }
    else
    {
      v25(v9, v23, v5);
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = swift_slowAlloc();
        v53[0] = v40;
        *(_DWORD *)v39 = 136315138;
        lazy protocol witness table accessor for type UserID and conformance UserID();
        v41 = dispatch thunk of CustomStringConvertible.description.getter();
        v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        _os_log_impl(&dword_1B4BE6000, v37, v38, "Current userID: %s does not match any of the userIds in the known userIdSet. This is unexpected!", v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v40, -1, -1);
        MEMORY[0x1B5E44758](v39, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      }

    }
    return MEMORY[0x1E0DEE9D8];
  }
  swift_retain();
  v34 = swift_bridgeObjectRetain();
  v35 = specialized Sequence.compactMap<A>(_:)(v34, v3);
  swift_bridgeObjectRelease();
  swift_release();
  return v35;
}

uint64_t partial apply for closure #1 in MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t closure #1 in MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v8);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v21 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v22 = a3;
    v13 = swift_slowAlloc();
    v23 = v13;
    *(_DWORD *)v12 = 136315138;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 360))(v13);
    v14 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "Applying ContextUpdate for userId: %s", v12, 0xCu);
    swift_arrayDestroy();
    v16 = v13;
    a3 = v22;
    MEMORY[0x1B5E44758](v16, -1, -1);
    v17 = v12;
    a2 = v21;
    MEMORY[0x1B5E44758](v17, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 416))(a2, a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v18, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v23);
  *a4 = v23;
  return swift_bridgeObjectRelease();
}

uint64_t ContextUpdater.applyContextUpdate(_:metadata:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint8_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint8_t *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81[4];
  uint64_t v82;

  v3 = v2;
  v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v75);
  v74 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Parse.DirectInvocation();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v71 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v73 = (char *)&v69 - v15;
  MEMORY[0x1E0C80A78](v14);
  v79 = (char *)&v69 - v16;
  ContextUpdater.applySystemDialogActs(_:)(*(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_nluSystemDialogActs));
  ContextUpdater.applyNewTasks(_:)(*(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_nluActiveTasks));
  ContextUpdater.applyCompletedTasks(_:)(*(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks));
  v17 = *(void **)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand);
  v78 = v11;
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v18, sel_copy);
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
    if (swift_dynamicCast())
      v19 = (void *)v82;
    else
      v19 = 0;
  }
  else
  {
    v19 = 0;
  }
  v20 = *(uint64_t (**)(void))(*v3 + 504);
  v77 = v19;
  v21 = v20();
  v80 = MEMORY[0x1E0DEE9E0];
  v22 = &unk_1ED50F000;
  if (v21)
  {
    v23 = (void *)v21;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v72 = v10;
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    v25 = v23;
    v26 = v23;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v76 = a2;
      v30 = (uint8_t *)v29;
      v31 = swift_slowAlloc();
      v81[0] = v31;
      *(_DWORD *)v30 = 136315138;
      v70 = v30 + 4;
      swift_getErrorValue();
      v32 = Error.localizedDescription.getter();
      v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v27, v28, "Applied NativeFlowContext with error: %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v31, -1, -1);
      v34 = v30;
      a2 = v76;
      MEMORY[0x1B5E44758](v34, -1, -1);
    }
    else
    {

    }
    swift_getErrorValue();
    v35 = Error.localizedDescription.getter();
    v37 = v36;
    v38 = MEMORY[0x1E0DEE9E0];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v81[0] = v38;
    specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v35, v37, 0xD000000000000024, 0x80000001B4EF45F0, isUniquelyReferenced_nonNull_native);
    v80 = v81[0];
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v22 = &unk_1ED50F000;
    v10 = v72;
  }
  v40 = (uint64_t)v79;
  ContextUpdater.applyRREntities(_:)(*(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_rrEntities));
  outlined init with copy of ReferenceResolutionClientProtocol?(a1 + OBJC_IVAR___SKRExecutionContextUpdate_undoDirectInvocation, (uint64_t)v9, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  v41 = v78;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  }
  else
  {
    v76 = a2;
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v40, v9, v10);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.conversationBridge);
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v44 = v73;
    v43(v73, v40, v10);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v72 = swift_slowAlloc();
      v81[0] = v72;
      *(_DWORD *)v47 = 136315138;
      v70 = v47 + 4;
      v43(v71, (uint64_t)v44, v10);
      v48 = String.init<A>(describing:)();
      v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v81);
      v22 = (_QWORD *)&unk_1ED50F000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v50 = *(void (**)(char *, uint64_t))(v78 + 8);
      v50(v44, v10);
      _os_log_impl(&dword_1B4BE6000, v45, v46, "Applying Corrections donation: %s", v47, 0xCu);
      v51 = v72;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v51, -1, -1);
      v52 = v47;
      v40 = (uint64_t)v79;
      MEMORY[0x1B5E44758](v52, -1, -1);
    }
    else
    {
      v50 = *(void (**)(char *, uint64_t))(v41 + 8);
      v50(v44, v10);
    }

    a2 = v76;
    ContextUpdater.applyCorrectionsDonation(_:)(v40);
    v50((char *)v40, v10);
  }
  ContextUpdater.applyPommesContext(_:)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_pommesContext);
  v53 = *(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId + 8);
  if (v53)
  {
    v54 = *(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId);
    if (v22[14] != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      v81[0] = v59;
      *(_DWORD *)v58 = 136315138;
      swift_bridgeObjectRetain();
      v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v53, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v56, v57, "Restoring session snapshot to the past request %s. All past and future context updates for this request will be ignored.", v58, 0xCu);
      swift_arrayDestroy();
      v60 = v59;
      v22 = (_QWORD *)&unk_1ED50F000;
      MEMORY[0x1B5E44758](v60, -1, -1);
      MEMORY[0x1B5E44758](v58, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v3[35] = v54;
    v3[36] = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  ContextUpdater.flushSessionStateUpdates(metadata:)(a2);
  if (v22[14] != -1)
    swift_once();
  v61 = type metadata accessor for Logger();
  __swift_project_value_buffer(v61, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc();
    v65 = swift_slowAlloc();
    v81[0] = v65;
    *(_DWORD *)v64 = 136315138;
    (*(void (**)(void))(*v3 + 360))();
    v66 = String.init<A>(describing:)();
    v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v62, v63, "Done applying context for userId: %s", v64, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v65, -1, -1);
    MEMORY[0x1B5E44758](v64, -1, -1);

  }
  else
  {

    swift_release_n();
  }

  return v80;
}

void SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
  os_unfair_lock_lock(v4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v5, a2);
  os_unfair_lock_unlock(v4);
}

void SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)(uint64_t a1)
{
  SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)(a1, (uint64_t (*)(void))partial apply for closure #1 in SessionStateContextKeysManager.removeKeyIfNotUpdated(_:));
}

void partial apply for closure #1 in SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)()
{
  uint64_t v0;

  closure #1 in SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void closure #1 in SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v5 = type metadata accessor for ConversationSessionKey();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v38 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v38 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v38 - v15;
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v17 + 16))
  {
    swift_bridgeObjectRetain();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v42);
    }
    else
    {
      v42 = 0u;
      v43 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v43 + 1))
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v42, &demangling cache variable for type metadata for Sendable?);
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
      v21 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v22 = v40;
      v21(v40, a2, v5);
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        v41 = v2;
        *(_QWORD *)&v42 = v39;
        *(_DWORD *)v25 = 136315138;
        v38 = v25 + 4;
        v21(v16, (uint64_t)v22, v5);
        v26 = String.init<A>(describing:)();
        v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)&v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
        _os_log_impl(&dword_1B4BE6000, v23, v24, "Not deleting key: %s because it is already updated in the current request", v25, 0xCu);
        v28 = v39;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v28, -1, -1);
        MEMORY[0x1B5E44758](v25, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
      }
      goto LABEL_17;
    }
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
  }
  v41 = v2;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v42, &demangling cache variable for type metadata for Sendable?);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v29(v14, a2, v5);
  swift_beginAccess();
  specialized Set._Variant.insert(_:)((uint64_t)v16, v14);
  v30 = *(void (**)(char *, uint64_t))(v6 + 8);
  v30(v16, v5);
  swift_endAccess();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.conversationBridge);
  v29(v11, a2, v5);
  v23 = Logger.logObject.getter();
  v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    v34 = swift_slowAlloc();
    v40 = (char *)v30;
    v35 = v34;
    *(_QWORD *)&v42 = v34;
    *(_DWORD *)v33 = 136315138;
    v39 = (uint64_t)(v33 + 4);
    v29(v16, (uint64_t)v11, v5);
    v36 = String.init<A>(describing:)();
    v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v40)(v11, v5);
    _os_log_impl(&dword_1B4BE6000, v23, v32, "StateKey: \"%s\" marked for removal from SessionState", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v35, -1, -1);
    MEMORY[0x1B5E44758](v33, -1, -1);
  }
  else
  {
    v30(v11, v5);
  }
LABEL_17:

}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    v1 = type metadata accessor for Input();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9C598], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Input and conformance Input(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Input();
    result = MEMORY[0x1B5E44668](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ContextUpdater.applyNativeFlowContext(_:emptyServerContext:)(id a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59[3];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    if (a1)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v57 = v8;
        v21 = (uint8_t *)swift_slowAlloc();
        v22 = swift_slowAlloc();
        v59[0] = v22;
        *(_DWORD *)v21 = 136315138;
        v23 = (void *)(*(uint64_t (**)(void))(*v3 + 264))();
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, sel_debugDescription);

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v19, v20, "Current NFCU cache is %s, Updating NativeFlowContextCommand cache with new one", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v22, -1, -1);
        MEMORY[0x1B5E44758](v21, -1, -1);

        v8 = v57;
      }
      else
      {

        swift_release_n();
      }
      goto LABEL_33;
    }
LABEL_14:
    v29 = (void *)(*(uint64_t (**)(uint64_t))(*v3 + 264))(v10);

    if (v29)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationBridge);
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v31, v32))
        goto LABEL_25;
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      v34 = "Received nil nativeFlowContextCommand from execution, but previously cached nativeFlowContextCommand during "
            "this request is not nil. Ignoring this update";
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v31, v32))
        goto LABEL_25;
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      v34 = "Both nativeFlowContextCommand cached as well as received from Execution are nil.";
    }
    _os_log_impl(&dword_1B4BE6000, v31, v32, v34, v33, 2u);
    MEMORY[0x1B5E44758](v33, -1, -1);
LABEL_25:

    goto LABEL_37;
  }
  if (!a1)
    goto LABEL_14;
  v13 = (void *)(*(uint64_t (**)(uint64_t))(*v3 + 264))(v10);

  if (v13)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "Not applying an empty nativeFlowContextCommand since we already have a non-nil cached one", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
    goto LABEL_34;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    _os_log_impl(&dword_1B4BE6000, v37, v38, "Applying an empty nativeFlowContextCommand", v39, 2u);
    MEMORY[0x1B5E44758](v39, -1, -1);
  }

LABEL_33:
  swift_beginAccess();
  v15 = v3[32];
  v3[32] = a1;
  a1 = a1;
LABEL_34:

  v40 = a1;
  v41 = objc_msgSend(v40, sel_promptContextProto);
  if (v41)
  {
    v42 = v41;
    v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v44;

    outlined copy of Data._Representation(v43, v45);
    v46 = ContextUpdater.applyPromptContextProtoData(_:)((uint64_t)v12, v43, v45);

    outlined consume of Data._Representation(v43, v45);
    outlined consume of Data._Representation(v43, v45);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    return v46;
  }

LABEL_37:
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
  v48 = Logger.logObject.getter();
  v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    _os_log_impl(&dword_1B4BE6000, v48, v49, "Either NativeFlowContextUpdate or PromptContextProtoData is nil", v50, 2u);
    MEMORY[0x1B5E44758](v50, -1, -1);
  }

  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v53 = 0;
    _os_log_impl(&dword_1B4BE6000, v51, v52, "PromptContextProtoData is nil", v53, 2u);
    MEMORY[0x1B5E44758](v53, -1, -1);
  }

  v54 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v8, 1, 1, v54);
  ContextUpdater.applyLegacyNLContext(_:)((uint64_t)v8);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  return 0;
}

void *ContextUpdater.finalNativeFlowContextCommand.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 256);
  v2 = v1;
  return v1;
}

uint64_t ContextUpdater.applyLegacyNLContext(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  void (*v19)(uint64_t *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  _QWORD v30[2];
  char *v31;
  uint64_t v32;
  uint64_t v33[4];

  v3 = type metadata accessor for ConversationSessionKey();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v31 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v30 - v14;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    v16 = *(_QWORD *)(v1 + 232);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D9EDD0], v3);
    (*(void (**)(char *))(*(_QWORD *)v16 + 160))(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
    v17 = *(_QWORD *)(v1 + 232);
    v33[3] = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    v19 = *(void (**)(uint64_t *, char *, uint64_t))(v11 + 16);
    v19(boxed_opaque_existential_1, v15, v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D9EDD0], v3);
    (*(void (**)(uint64_t *, char *))(*(_QWORD *)v17 + 152))(v33, v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    v21 = v31;
    v19((uint64_t *)v31, v15, v10);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v33[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v30[1] = v24 + 4;
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F660], MEMORY[0x1E0D9F640]);
      v26 = Message.debugDescription.getter();
      v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v28 = *(void (**)(char *, uint64_t))(v11 + 8);
      v28(v21, v10);
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Applied LegacyNLContext: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v25, -1, -1);
      MEMORY[0x1B5E44758](v24, -1, -1);

    }
    else
    {

      v28 = *(void (**)(char *, uint64_t))(v11 + 8);
      v28(v21, v10);
    }
    v28(v15, v10);
  }
  return 0;
}

uint64_t ContextUpdater.applyPommesContext(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  Swift::Bool v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  void (*v29)(uint64_t *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  Swift::Int v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56[4];

  v2 = v1;
  v4 = type metadata accessor for ConversationSessionKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PommesContext();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v54 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v53 = (char *)&v52 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v52 - v17;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    v19 = *(_QWORD *)(v2 + 232);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D9EDB8], v4);
    (*(void (**)(char *))(*(_QWORD *)v19 + 160))(v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1B4BE6000, v21, v22, "No PommesContext found", v23, 2u);
      MEMORY[0x1B5E44758](v23, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v10, v11);
    v24 = PommesContext.isWithinMaxSize()();
    v25 = *(_QWORD *)(v2 + 232);
    v26 = v18;
    v27 = v11;
    if (v24)
    {
      v56[3] = v11;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56);
      v29 = *(void (**)(uint64_t *, char *, uint64_t))(v12 + 16);
      v29(boxed_opaque_existential_1, v18, v11);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D9EDB8], v4);
      (*(void (**)(uint64_t *, char *))(*(_QWORD *)v25 + 152))(v56, v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
      v30 = v12;
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.conversationBridge);
      v32 = v54;
      v29((uint64_t *)v54, v18, v27);
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc();
        v36 = swift_slowAlloc();
        v56[0] = v36;
        *(_DWORD *)v35 = 136315138;
        v53 = v18;
        v37 = PommesContext.description.getter();
        v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v39 = *(void (**)(char *, uint64_t))(v30 + 8);
        v39(v32, v27);
        _os_log_impl(&dword_1B4BE6000, v33, v34, "Applied PommesContext: %s", v35, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v36, -1, -1);
        MEMORY[0x1B5E44758](v35, -1, -1);

        v39(v53, v27);
      }
      else
      {

        v50 = *(void (**)(char *, uint64_t))(v30 + 8);
        v50(v32, v27);
        v50(v26, v27);
      }
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D9EDB8], v4);
      (*(void (**)(char *))(*(_QWORD *)v25 + 160))(v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.conversationBridge);
      v41 = v53;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v53, v18, v11);
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v44 = 134217984;
        v45 = v41;
        v46 = v11;
        v54 = (char *)(v44 + 4);
        v47 = v26;
        v48 = PommesContext.contextSize()();
        v49 = *(void (**)(char *, uint64_t))(v12 + 8);
        v49(v45, v46);
        v56[0] = v48;
        v26 = v47;
        v27 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v42, v43, "Not updating PommesContext (size: %ld because it is larger than the max allowed size", v44, 0xCu);
        MEMORY[0x1B5E44758](v44, -1, -1);
      }
      else
      {
        v49 = *(void (**)(char *, uint64_t))(v12 + 8);
        v49(v41, v27);
      }

      v49(v26, v27);
    }
  }
  return 0;
}

uint64_t ContextUpdater.flushSessionStateUpdates(metadata:)(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  unint64_t v37;
  uint64_t updated;
  unint64_t v39;
  unint64_t v40;
  void *object;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t *v51;
  Swift::String v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  Swift::String v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, _QWORD, uint64_t);
  char *v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  Swift::String v110[2];
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v2 = v1;
  v4 = type metadata accessor for ConversationSessionKey();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v93 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?)?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v93 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = *(void **)(v1 + 288);
  if (!v20)
  {
    v98 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    v99 = v18;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    swift_retain_n();
    v95 = v29;
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    v32 = v31;
    v33 = os_log_type_enabled(v30, v31);
    v106 = v4;
    v107 = v5;
    v96 = v8;
    if (v33)
    {
      v34 = swift_slowAlloc();
      v105 = swift_slowAlloc();
      *(_QWORD *)&v111 = v105;
      *(_DWORD *)v34 = 136315394;
      LODWORD(v104) = v32;
      v35 = *(void (**)(void))(*(_QWORD *)v2 + 360);
      v103._object = v30;
      v35();
      v36 = String.init<A>(describing:)();
      v110[0]._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      swift_retain();
      updated = ConversationContextUpdateMetadata.description.getter();
      v40 = v39;
      swift_release();
      v110[0]._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(updated, v40, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      object = v103._object;
      _os_log_impl(&dword_1B4BE6000, (os_log_t)v103._object, (os_log_type_t)v104, "Flushing all context updates to SessionState for userId: %s. metadata: %s", (uint8_t *)v34, 0x16u);
      v42 = v105;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v42, -1, -1);
      v43 = v34;
      v4 = v106;
      MEMORY[0x1B5E44758](v43, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    v45 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v2 + 232) + 176))(a1);
    v97 = (_QWORD *)v2;
    ContextUpdater.updateSessionState(withData:)();
    v115 = 0;
    v116 = 0xE000000000000000;
    v46 = *(_QWORD *)(v45 + 64);
    v100 = v45 + 64;
    v113 = 0;
    v114 = 0xE000000000000000;
    v47 = 1 << *(_BYTE *)(v45 + 32);
    v48 = -1;
    if (v47 < 64)
      v48 = ~(-1 << v47);
    v2 = v48 & v46;
    v102 = (unint64_t)(v47 + 63) >> 6;
    v94 = v102 - 1;
    v104 = v45;
    result = swift_bridgeObjectRetain();
    v105 = 0;
    v103._countAndFlagsBits = 0;
    v49 = 0;
    v21 = &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?);
    v101 = MEMORY[0x1E0DEE9B8] + 8;
    v20 = (void *)0xE000000000000000;
    v50 = 0xE000000000000000;
    v51 = &v118;
LABEL_45:
    *(v51 - 32) = v50;
    while (!v2)
    {
      v58 = v49 + 1;
      if (__OFADD__(v49, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      if (v58 < v102)
      {
        v59 = *(_QWORD *)(v100 + 8 * v58);
        if (v59)
          goto LABEL_22;
        v60 = v49 + 2;
        ++v49;
        if (v58 + 1 < v102)
        {
          v59 = *(_QWORD *)(v100 + 8 * v60);
          if (v59)
            goto LABEL_25;
          v49 = v58 + 1;
          if (v58 + 2 < v102)
          {
            v59 = *(_QWORD *)(v100 + 8 * (v58 + 2));
            if (v59)
            {
              v58 += 2;
              goto LABEL_22;
            }
            v49 = v58 + 2;
            if (v58 + 3 < v102)
            {
              v59 = *(_QWORD *)(v100 + 8 * (v58 + 3));
              if (v59)
              {
                v58 += 3;
                goto LABEL_22;
              }
              v60 = v58 + 4;
              v49 = v58 + 3;
              if (v58 + 4 < v102)
              {
                v59 = *(_QWORD *)(v100 + 8 * v60);
                if (!v59)
                {
                  while (1)
                  {
                    v58 = v60 + 1;
                    if (__OFADD__(v60, 1))
                      break;
                    if (v58 >= v102)
                    {
                      v49 = v94;
                      goto LABEL_39;
                    }
                    v59 = *(_QWORD *)(v100 + 8 * v58);
                    ++v60;
                    if (v59)
                      goto LABEL_22;
                  }
                  __break(1u);
                  return result;
                }
LABEL_25:
                v58 = v60;
LABEL_22:
                v2 = (v59 - 1) & v59;
                v54 = __clz(__rbit64(v59)) + (v58 << 6);
                v49 = v58;
LABEL_18:
                v55 = v104;
                (*(void (**)(char *, unint64_t, uint64_t))(v107 + 16))(v14, *(_QWORD *)(v104 + 48) + *(_QWORD *)(v107 + 72) * v54, v4);
                v56 = *(_QWORD *)(v55 + 56) + 32 * v54;
                v21 = &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?);
                v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?));
                outlined init with copy of ReferenceResolutionClientProtocol?(v56, (uint64_t)&v14[*(int *)(v57 + 48)], (uint64_t *)&demangling cache variable for type metadata for Any?);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v14, 0, 1, v57);
                goto LABEL_40;
              }
            }
          }
        }
      }
LABEL_39:
      v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v14, 1, 1, v61);
      v2 = 0;
LABEL_40:
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v14, (uint64_t)v16, &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?)?);
      v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 48))(v16, 1, v62) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v67 = v115;
        v66 = v116;
        v68 = v113;
        v69 = v114;
        v70 = v97;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v71 = Logger.logObject.getter();
        v72 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v71, v72))
        {
          v73 = swift_slowAlloc();
          v105 = swift_slowAlloc();
          *(_QWORD *)&v111 = v105;
          *(_DWORD *)v73 = 136315906;
          swift_bridgeObjectRetain();
          v110[0]._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v66, (uint64_t *)&v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v73 + 12) = 2080;
          swift_bridgeObjectRetain();
          v110[0]._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, (uint64_t *)&v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v73 + 22) = 2080;
          v74 = v70[18];
          v75 = v70[19];
          swift_bridgeObjectRetain();
          v110[0]._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)&v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          v76 = swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 32) = 2080;
          (*(void (**)(uint64_t))(*v70 + 360))(v76);
          v77 = String.init<A>(describing:)();
          v110[0]._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, (uint64_t *)&v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v71, v72, "Flushed keysToAdd: [%s] and keysToRemove: [%s] for assistantId: %s, userId: %s", (uint8_t *)v73, 0x2Au);
          v79 = v105;
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v79, -1, -1);
          MEMORY[0x1B5E44758](v73, -1, -1);
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease();

          swift_release_n();
          swift_bridgeObjectRelease_n();
          v80 = swift_bridgeObjectRelease_n();
        }
        v81 = v107;
        v82 = (*(uint64_t (**)(uint64_t))(*v70 + 264))(v80);
        v83 = v106;
        if (v82)
        {
          v84 = v82;
          *((_QWORD *)&v112 + 1) = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
          *(_QWORD *)&v111 = v84;
        }
        else
        {
          v111 = 0u;
          v112 = 0u;
        }
        v85 = *(void (**)(char *, _QWORD, uint64_t))(v81 + 104);
        v86 = v96;
        v85(v96, *MEMORY[0x1E0D9EDE8], v83);
        ContextUpdater.updateSessionState(withValue:forKey:)();
        v87 = *(void (**)(char *, uint64_t))(v81 + 8);
        v87(v86, v83);
        v88 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v89 = (*(uint64_t (**)(uint64_t))(*v70 + 288))(v88);
        v90 = (*(uint64_t (**)(void))(*v70 + 312))();
        v91 = type metadata accessor for AnnounceContext();
        v92 = swift_allocObject();
        *(_QWORD *)(v92 + 16) = v89;
        *(_QWORD *)(v92 + 24) = v90;
        *((_QWORD *)&v112 + 1) = v91;
        *(_QWORD *)&v111 = v92;
        v85(v86, *MEMORY[0x1E0D9EDC8], v83);
        ContextUpdater.updateSessionState(withValue:forKey:)();
        v87(v86, v83);
        return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      v63 = (uint64_t)&v16[*(int *)(v62 + 48)];
      v4 = v106;
      (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v10, v16, v106);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v63, (uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (*((_QWORD *)&v112 + 1))
      {
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v111, (uint64_t)&v108, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v109)
        {
          outlined init with take of Any(&v108, v110);
          v108._countAndFlagsBits = 0;
          v108._object = (void *)0xE000000000000000;
          String.append(_:)(v103);
          swift_bridgeObjectRelease();
          v64._countAndFlagsBits = ConversationSessionKey.rawValue.getter();
          String.append(_:)(v64);
          v21 = &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?);
          swift_bridgeObjectRelease();
          v103._object = (void *)0xE200000000000000;
          v65._countAndFlagsBits = 8250;
          v65._object = (void *)0xE200000000000000;
          String.append(_:)(v65);
          _print_unlocked<A, B>(_:_:)();
          String.append(_:)(v108);
          v4 = v106;
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
          (*(void (**)(char *, uint64_t))(v107 + 8))(v10, v4);
          result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
          v50 = 8236;
          v51 = &v117;
          goto LABEL_45;
        }
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v108, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      v110[0]._countAndFlagsBits = v105;
      v110[0]._object = v20;
      v52._countAndFlagsBits = ConversationSessionKey.rawValue.getter();
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      String.append(_:)(v110[0]);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v10, v4);
      result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v20 = (void *)0xE200000000000000;
      v105 = 8236;
    }
    v53 = __clz(__rbit64(v2));
    v2 &= v2 - 1;
    v54 = v53 | (v49 << 6);
    goto LABEL_18;
  }
  v21 = *(uint64_t **)(v1 + 280);
  v22 = one-time initialization token for conversationBridge;
  swift_bridgeObjectRetain();
  if (v22 != -1)
LABEL_54:
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    *(_QWORD *)&v111 = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain();
    v110[0]._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v21, (unint64_t)v20, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v24, v25, "Not flushing state since snapshot from request %s was requested.", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v27, -1, -1);
    MEMORY[0x1B5E44758](v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40));
  dispatch thunk of ConversationSessionState.restoreSnapshot(requestId:)();
  return swift_bridgeObjectRelease();
}

uint64_t ConversationContextUpdateMetadata.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;

  _StringGuts.grow(_:)(105);
  v1._object = (void *)0x80000001B4EF9560;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  if (*(_BYTE *)(v0 + 16))
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 16))
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x736575716572202CLL;
  v5._object = (void *)0xEF203A6570795474;
  String.append(_:)(v5);
  v6._countAndFlagsBits = RequestType.rawValue.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD000000000000012;
  v7._object = (void *)0x80000001B4EF9580;
  String.append(_:)(v7);
  v8 = *(id *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginInfo?);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000011;
  v10._object = (void *)0x80000001B4EF95A0;
  String.append(_:)(v10);
  type metadata accessor for UserID();
  lazy protocol witness table accessor for type UserID and conformance UserID();
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x80000001B4EF95C0;
  v12._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v12);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext))
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext))
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 93;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t SessionStateContextKeysManager.provideKeysToFlush(metadata:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  int v17;
  os_unfair_lock_s *v18;
  _QWORD *inited;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[48];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for RequestType();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0];
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0D9E890], v10);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, v11, MEMORY[0x1E0D9E8D8]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v33[0] == v31 && v33[1] == v32)
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v10);
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v10);
    if ((v15 & 1) == 0)
      goto LABEL_8;
  }
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo);
  if (v16)
  {
    v17 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL);
    v18 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
    os_unfair_lock_lock(v18);
    if (v17 != 1)
      goto LABEL_19;
    goto LABEL_16;
  }
LABEL_8:
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    type metadata accessor for ServerFallbackDisablingUtils();
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
    inited[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
    inited[4] = 0;
    v20 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
    v21 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
    v22 = specialized ServerFallbackDisablingUtils.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)(0, (uint64_t)v9, (uint64_t)v6);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if ((v22 & 1) == 0)
    {
      v18 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
      os_unfair_lock_lock(v18);
LABEL_19:
      partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest()(v33);
      goto LABEL_17;
    }
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1B4BE6000, v24, v25, "Not flushing local context for server fallback request: Server fallback is disabled.", v26, 2u);
      MEMORY[0x1B5E44758](v26, -1, -1);
    }

  }
  v18 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
  os_unfair_lock_lock(v18);
LABEL_16:
  partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest()(v33);
LABEL_17:
  v27 = v33[0];
  os_unfair_lock_unlock(v18);
  v28 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v27);
  swift_bridgeObjectRelease();
  return v28;
}

unint64_t lazy protocol witness table accessor for type RequestType and conformance RequestType()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RequestType and conformance RequestType;
  if (!lazy protocol witness table cache variable for type RequestType and conformance RequestType)
  {
    v1 = type metadata accessor for RequestType();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9E8D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType);
  }
  return result;
}

uint64_t ContextUpdater.updateSessionState(withData:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UserID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*v0 + 360))(v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    return dispatch thunk of ConversationSessionState.updateSharedValues(data:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    dispatch thunk of ConversationSessionState.updateValues(data:userId:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_AsrHypothesis>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F3C0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Task>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F0B8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StubCamBridge.RankCallArgs>, (uint64_t (*)(_QWORD))type metadata accessor for StubCamBridge.RankCallArgs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CamParse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D97A50]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRDataSourceMetadataValue>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3DC8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_AsrTokenInformation>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F800]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F4B0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C708]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<IntentTopic>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9B648]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3E50]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(topAction: RankedAction, alternativeParses: [CamParse])>, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CamFeature>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D97AA8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F6B0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Parse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C698]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, Parse)>, &demangling cache variable for type metadata for (UUID, Parse));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<IdentifiedUser>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9B928]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3D70]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginAction>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9B770]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_DelegatedUserDialogAct>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F8F8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CorrectionsActionOutcome>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C288]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA0688]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)>, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpanProperty>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA04E8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoEntitySpan>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA05B0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SiriXActionCandidate>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9E558]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParseUserDataAttachment>, (uint64_t (*)(_QWORD))type metadata accessor for ParseUserDataAttachment);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExecutionOverride>, &demangling cache variable for type metadata for ExecutionOverride);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UndoingCommand>, &demangling cache variable for type metadata for UndoingCommand);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginPackage>, &demangling cache variable for type metadata for PluginPackage);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>, &demangling cache variable for type metadata for Output);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<@Sendable ()>, (uint64_t *)&demangling cache variable for type metadata for ());
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppShortcutTarget>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SiriEnvironmentStringKeyedValueFetching>, &demangling cache variable for type metadata for SiriEnvironmentStringKeyedValueFetching);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationHandler>, &demangling cache variable for type metadata for ConversationHandler);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<LinkActionMetadata>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PreExecutionRule>, &demangling cache variable for type metadata for PreExecutionRule);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateRequestMessage>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(appBundleId: String, userData: [String : Any])>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AceServiceInvokerImpl.AceSubmitOptions>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeneralizedAppShortcutTarget>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WorkItem>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      specialized getContiguousArrayStorageType<A>(for:)();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v15 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
          memmove(v13, a4 + 4, 40 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t ContextUpdater.finalActiveTasks.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ContextUpdater.finalExecutedTasks.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logContextFlowSubmitted(contextUpdateReceived:contextUpdateError:requestId:)(Swift::Bool contextUpdateReceived, Swift::Bool contextUpdateError, Swift::String requestId)
{
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;

  object = requestId._object;
  countAndFlagsBits = requestId._countAndFlagsBits;
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F20]), sel_init);
  if (!v8)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
    v15 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v13, "Failed to create ORCHSchemaORCHConversationContextSubmitted event", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }
    goto LABEL_8;
  }
  v15 = v8;
  -[NSObject setContextUpdateError:](v8, sel_setContextUpdateError_, contextUpdateError);
  -[NSObject setContextUpdateReceived:](v15, sel_setContextUpdateReceived_, contextUpdateReceived);
  v9 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(countAndFlagsBits, (uint64_t)object, 0, 0, 0);
  if (!v9)
  {
LABEL_8:
    v11 = v15;
    goto LABEL_9;
  }
  v10 = v9;
  -[NSObject setContextSubmissionMessage:](v9, sel_setContextSubmissionMessage_, v15);
  objc_msgSend(*(id *)(v3 + 16), sel_emitMessage_, v10);

  v11 = v10;
LABEL_9:

}

uint64_t AnnounceContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void closure #1 in ConversationRequestProcessor.applyEmptyNativeFlowContextUpdateIfRequired(_:selectedResultCandidateId:metadata:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;

  if (a2)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    v4 = a2;
    v5 = a2;
    oslog = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v12 = v8;
      *(_DWORD *)v7 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
      v9 = Optional.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, oslog, v6, "Error applying empty NativeFlowContextUpdate: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t ContextUpdater.applyPromptContextProtoData(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  uint8_t *v37;
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v36 - v16;
  if (a3 >> 60 == 15)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v20, "PromptContextProtoData is nil", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }

    v22 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v9, 1, 1, v22);
    ContextUpdater.applyLegacyNLContext(_:)((uint64_t)v9);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1, 1, v11);
  }
  else
  {
    v42 = v3;
    v45 = 0;
    memset(v44, 0, sizeof(v44));
    outlined copy of Data._Representation(a2, a3);
    outlined copy of Data._Representation(a2, a3);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0100], MEMORY[0x1E0DA0060]);
    v41 = a2;
    Message.init(serializedData:extensions:partial:options:)();
    v40 = a1;
    v23 = Com_Apple_Siri_Product_Proto_PromptContext.domainHints.getter();
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 392))(v23);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v39 = v25;
      v27 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      *(_QWORD *)&v44[0] = v38;
      v37 = v27;
      *(_DWORD *)v27 = 136315138;
      v36[1] = v27 + 4;
      v28 = Message.debugDescription.getter();
      v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      v30 = v39;
      v31 = v37;
      _os_log_impl(&dword_1B4BE6000, v39, v26, "Deserialized PromptContextProto: %s", v37, 0xCu);
      v32 = v38;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v32, -1, -1);
      MEMORY[0x1B5E44758](v31, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);

    }
    Com_Apple_Siri_Product_Proto_PromptContext.toLegacyNLContext()((uint64_t)v9);
    v33 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v9, 0, 1, v33);
    ContextUpdater.applyLegacyNLContext(_:)((uint64_t)v9);
    outlined consume of Data?(v41, a3);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    v34 = v40;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v40, v17, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v34, 0, 1, v11);
  }
  return 0;
}

uint64_t ContextUpdater.domainHints.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_domainHints);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t ContextUpdater.applyCorrectionsDonation(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectionsContext?);
  MEMORY[0x1E0C80A78](v2);
  v24 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CorrectionsDirectInvocation();
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UserID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CorrectionsContext();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*v1 + 360))(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    UserID.sharedUserId.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRetain();
  CorrectionsContext.init(userId:assistantId:)();
  v19 = v1[15];
  v20 = v1[16];
  __swift_project_boxed_opaque_existential_1(v1 + 12, v19);
  Parse.DirectInvocation.identifier.getter();
  Parse.DirectInvocation.userData.getter();
  CorrectionsDirectInvocation.init(identifier:userData:)();
  v21 = (uint64_t)v24;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v18, v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 40))(v6, v21, v19, v20);
  outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for CorrectionsContext?);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t protocol witness for CorrectionsHandling.setUndoInvocation(directInvocation:context:) in conformance CorrectionsPlatformClient()
{
  return dispatch thunk of CorrectionsPlatformClient.setUndoInvocation(directInvocation:context:)();
}

Swift::Void __swiftcall ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  object = forExecutionRequestId._object;
  countAndFlagsBits = forExecutionRequestId._countAndFlagsBits;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 != -1)
    swift_once();
  swift_beginAccess();
  v9 = static MessageBusActor.shared;
  v10 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v9;
  v11[3] = v10;
  v11[4] = v1;
  v11[5] = countAndFlagsBits;
  v11[6] = object;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:), (uint64_t)v11);
  swift_release();
}

Swift::Void __swiftcall ConversationBridgeProcessorDelegate.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t Strong;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  object = forExecutionRequestId._object;
  countAndFlagsBits = forExecutionRequestId._countAndFlagsBits;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, void *))(*(_QWORD *)Strong + 1072))(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v9 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v5, v6, "ConversationRequestProcessor already released, ignoring closeServerRequest for request id %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

Swift::Void __swiftcall ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t countAndFlagsBits;
  uint64_t v27;
  uint64_t v28[3];

  v2 = v1;
  object = forExecutionRequestId._object;
  countAndFlagsBits = forExecutionRequestId._countAndFlagsBits;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v28[0] = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v8, v9, "Execution asked to close server request. Cannot fallback to server after this point for requestId: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

  }
  else
  {

    v12 = swift_bridgeObjectRelease_n();
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 528))(v12);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
    v16 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
    v17 = swift_allocObject();
    swift_weakInit();
    v18 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v18 != -1)
      swift_once();
    swift_beginAccess();
    v19 = static MessageBusActor.shared;
    v20 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = v19;
    v21[3] = v20;
    v21[4] = v17;
    v21[5] = v14;
    v21[6] = countAndFlagsBits;
    v21[7] = object;
    swift_retain();
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:), (uint64_t)v21);
    (*(void (**)(void))(*(_QWORD *)v15 + 120))();
    swift_release();
    swift_release();
  }
  else
  {
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "ConversationBridge: commit received while we're not in a turn. Ignoring.", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

  }
}

uint64_t ContextUpdater.applyDisplayHints(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(_QWORD *, char *);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD v38[2];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];
  _QWORD *v49;

  v2 = type metadata accessor for ConversationSessionKey();
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  MEMORY[0x1E0C80A78](v2);
  v39 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(type metadata accessor for RREntity() - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    v38[0] = a1;
    swift_bridgeObjectRetain();
    v9 = 0;
    v43 = v7;
    v44 = v5;
    v42 = v8;
    while (1)
    {
      RREntity.usoEntity.getter();
      v10 = UsoEntity.attributes.getter();
      swift_release();
      if (*(_QWORD *)(v10 + 16))
      {
        v11 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
        if ((v12 & 1) != 0)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (!(v13 >> 62))
          {
            v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v14)
              break;
            goto LABEL_22;
          }
          swift_bridgeObjectRetain();
          v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v14)
            break;
        }
      }
LABEL_22:
      swift_bridgeObjectRelease();
LABEL_4:
      if (++v9 == v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    if (v14 >= 1)
    {
      v45 = v9;
      v15 = 0;
      while (1)
      {
        if ((v13 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1B5E43B94](v15, v13);
          v16 = dispatch thunk of UsoValue.getAsPrimitiveValueString()();
          if (v17)
            goto LABEL_17;
        }
        else
        {
          swift_retain();
          v16 = dispatch thunk of UsoValue.getAsPrimitiveValueString()();
          if (v17)
          {
LABEL_17:
            v18 = v16;
            v19 = v17;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
            v21 = v4[2];
            v20 = v4[3];
            if (v21 >= v20 >> 1)
              v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v4);
            v4[2] = v21 + 1;
            v22 = &v4[2 * v21];
            v22[4] = v18;
            v22[5] = v19;
            swift_release();
            v49 = v4;
            goto LABEL_12;
          }
        }
        swift_release();
LABEL_12:
        if (v14 == ++v15)
        {
          swift_bridgeObjectRelease();
          v5 = v44;
          v9 = v45;
          goto LABEL_4;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_26:
    v23 = *(_QWORD *)(v38[1] + 232);
    v48[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v48[0] = v4;
    v25 = v39;
    v24 = v40;
    v26 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v39, *MEMORY[0x1E0D9EDA8], v41);
    v27 = *(void (**)(_QWORD *, char *))(*(_QWORD *)v23 + 152);
    swift_bridgeObjectRetain();
    v27(v48, v25);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    if (one-time initialization token for conversationBridge == -1)
      goto LABEL_27;
  }
  swift_once();
LABEL_27:
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v47 = v32;
    *(_DWORD *)v31 = 136315138;
    swift_beginAccess();
    v33 = swift_bridgeObjectRetain();
    v34 = MEMORY[0x1B5E434D4](v33, MEMORY[0x1E0DEA968]);
    v36 = v35;
    swift_bridgeObjectRelease();
    v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v29, v30, "#ContextUpdater: Saving to SessionState displayHints:%s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v32, -1, -1);
    MEMORY[0x1B5E44758](v31, -1, -1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Never>);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[a2 + 4];
    if (a1 != a2 || &v4[a1 + 4] >= (_QWORD *)&v16[8 * v15])
      result = (uint64_t)memmove(&v4[a1 + 4], v16, 8 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (_QWORD *)&v16[32 * v15])
      result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0D9B7C8]);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for FlowTask);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v2)
    goto LABEL_31;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v5 = *v3;
  if (*v3 >> 62)
    goto LABEL_34;
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v8 - v7;
  if (__OFADD__(v8, v6))
    goto LABEL_36;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if (v5 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x1B5E43BA0](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for ExecutableTask(0);
  swift_arrayDestroy();
  if (!v6)
    return specialized Array._endMutation()();
  if (!(v5 >> 62))
  {
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v13 - v2;
    if (!__OFSUB__(v13, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v14 = v20 - v2;
  if (__OFSUB__(v20, v2))
    goto LABEL_40;
LABEL_21:
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14)
      memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
    if (!(v5 >> 62))
    {
      v16 = *(_QWORD *)(v11 + 16);
      v17 = v16 + v6;
      if (!__OFADD__(v16, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v17;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v17 = v21 + v6;
    if (!__OFADD__(v21, v6))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void SessionStateContextKeysManager.removeKey(_:)(uint64_t a1)
{
  SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)(a1, (uint64_t (*)(void))partial apply for closure #1 in SessionStateContextKeysManager.removeKey(_:));
}

void partial apply for closure #1 in SessionStateContextKeysManager.removeKey(_:)()
{
  uint64_t v0;

  closure #1 in SessionStateContextKeysManager.removeKey(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void closure #1 in SessionStateContextKeysManager.removeKey(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  _OWORD v26[2];

  v3 = type metadata accessor for ConversationSessionKey();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)v23 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v23 - v11;
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a2, v26);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, &demangling cache variable for type metadata for Sendable?);
  swift_endAccess();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v13(v10, a2, v3);
  swift_beginAccess();
  specialized Set._Variant.insert(_:)((uint64_t)v12, v10);
  v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v12, v3);
  swift_endAccess();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  v13(v7, a2, v3);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v24 = v14;
    v20 = v19;
    *(_QWORD *)&v26[0] = v19;
    *(_DWORD *)v18 = 136315138;
    v23[1] = v18 + 4;
    v13(v12, (uint64_t)v7, v3);
    v21 = String.init<A>(describing:)();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v24(v7, v3);
    _os_log_impl(&dword_1B4BE6000, v16, v17, "StateKey: \"%s\" marked for removal from SessionState", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);
  }
  else
  {
    v14(v7, v3);
  }

}

id ConversationCommitResultXPC.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  BOOL v57;
  id v58;
  uint8_t *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  void *v64;
  id v65;
  id v66;
  _BOOL4 v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  BOOL v81;
  id v82;
  void (*v83)(char *, uint64_t);
  uint8_t *v84;
  void *v85;
  unsigned int v86;
  void *v87;
  id v88;
  void *v89;
  id v90;
  unsigned int v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  void *v102;
  unsigned int v103;
  uint64_t v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  id v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  __int128 v136;
  uint64_t v137;

  v3 = type metadata accessor for BinaryDecodingOptions();
  v4 = MEMORY[0x1E0C80A78](v3);
  v120 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v127 = (void (*)(char *, uint64_t))((char *)&v112 - v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v121 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v112 - v10;
  v12 = type metadata accessor for Siri_Nlu_External_Task();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v124 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v123 = (char *)&v112 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v129 = (char *)&v112 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v112 - v20;
  v119 = type metadata accessor for NSFastEnumerationIterator();
  v118 = *(_QWORD *)(v119 - 8);
  v22 = MEMORY[0x1E0C80A78](v119);
  v122 = (char *)&v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v128 = (char *)&v112 - v24;
  v115 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v25 = swift_allocObject();
  v114 = xmmword_1B4EE3BA0;
  *(_OWORD *)(v25 + 16) = xmmword_1B4EE3BA0;
  v26 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v25 + 32) = v26;
  v116 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  *(_QWORD *)(v25 + 40) = v116;
  v27 = v1;
  v125 = a1;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v132 + 1))
  {

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v131, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_14:
    v35 = v125;
    if (one-time initialization token for executor != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_1B4BE6000, v37, v38, "Could not deserialize proto ActiveTasks array", v39, 2u);
      MEMORY[0x1B5E44758](v39, -1, -1);
    }

    goto LABEL_19;
  }
  v117 = v27;
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_14;
  }
  v112 = v26;
  v113 = (id)v136;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v137)
  {
    v130 = MEMORY[0x1E0DEE9D8];
    v126 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      outlined init with take of Any(&v136, &v131);
      if ((swift_dynamicCast() & 1) == 0)
        break;
      v29 = v134;
      v28 = v135;
      v133 = 0;
      v131 = 0u;
      v132 = 0u;
      outlined copy of Data._Representation(v134, v135);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      v30 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v30(v21, v11, v12);
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v129, v21, v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v130 + 16) + 1, 1, v130);
      v32 = *(_QWORD *)(v130 + 16);
      v31 = *(_QWORD *)(v130 + 24);
      if (v32 >= v31 >> 1)
        v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v130);
      v33 = v129;
      v34 = v130;
      *(_QWORD *)(v130 + 16) = v32 + 1;
      v30((char *)(v34+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v32), v33, v12);
      outlined consume of Data._Representation(v29, v28);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
      NSFastEnumerationIterator.next()();
      if (!v137)
        goto LABEL_22;
    }
    swift_bridgeObjectRelease();

    if (one-time initialization token for executor != -1)
      swift_once();
    v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.executor);
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.error.getter();
    v57 = os_log_type_enabled(v55, v56);
    v58 = v125;
    if (v57)
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_1B4BE6000, v55, v56, "Element in decoded array is not of type Data", v59, 2u);
      MEMORY[0x1B5E44758](v59, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v118 + 8))(v128, v119);
    goto LABEL_19;
  }
  v130 = MEMORY[0x1E0DEE9D8];
LABEL_22:
  v42 = *(void (**)(char *, uint64_t))(v118 + 8);
  v42(v128, v119);
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = v114;
  v44 = v116;
  *(_QWORD *)(v43 + 32) = v112;
  *(_QWORD *)(v43 + 40) = v44;
  v45 = v125;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v132 + 1))
  {

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v131, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRelease();
LABEL_40:
    if (one-time initialization token for executor != -1)
      swift_once();
    v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.executor);
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v63 = 0;
      _os_log_impl(&dword_1B4BE6000, v61, v62, "Could not deserialize proto ActiveTasks array", v63, 2u);
      MEMORY[0x1B5E44758](v63, -1, -1);
    }

    goto LABEL_45;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_40;
  }
  v127 = v42;
  v128 = (char *)v136;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v137)
  {
    v46 = MEMORY[0x1E0DEE9D8];
    v129 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
    v47 = v121;
    while (1)
    {
      outlined init with take of Any(&v136, &v131);
      if ((swift_dynamicCast() & 1) == 0)
        break;
      v48 = v134;
      v49 = v135;
      v133 = 0;
      v131 = 0u;
      v132 = 0u;
      outlined copy of Data._Representation(v134, v135);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v47, 0, 1, v12);
      v50 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v51 = v123;
      v50(v123, v47, v12);
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v124, v51, v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v46 + 16) + 1, 1, v46);
      v53 = *(_QWORD *)(v46 + 16);
      v52 = *(_QWORD *)(v46 + 24);
      if (v53 >= v52 >> 1)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v46);
      *(_QWORD *)(v46 + 16) = v53 + 1;
      v50((char *)(v46+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v53), v124, v12);
      outlined consume of Data._Representation(v48, v49);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v123, v12);
      NSFastEnumerationIterator.next()();
      if (!v137)
        goto LABEL_47;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (one-time initialization token for executor != -1)
      swift_once();
    v78 = type metadata accessor for Logger();
    __swift_project_value_buffer(v78, (uint64_t)static Logger.executor);
    v79 = Logger.logObject.getter();
    v80 = static os_log_type_t.error.getter();
    v81 = os_log_type_enabled(v79, v80);
    v82 = v125;
    v83 = v127;
    if (v81)
    {
      v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v84 = 0;
      _os_log_impl(&dword_1B4BE6000, v79, v80, "Element in decoded array is not of type Data", v84, 2u);
      MEMORY[0x1B5E44758](v84, -1, -1);
    }

    v83(v122, v119);
    goto LABEL_19;
  }
  v46 = MEMORY[0x1E0DEE9D8];
LABEL_47:
  v127(v122, v119);
  v64 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4EF4850);
  v65 = v125;
  v66 = objc_msgSend(v125, sel_decodeIntegerForKey_, v64);

  if ((unint64_t)v66 < 4)
  {
    v67 = 1;
    v68 = v117;
    goto LABEL_49;
  }
  v68 = v117;
  if (v66 != (id)4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (one-time initialization token for executor != -1)
      swift_once();
    v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.executor);
    v99 = Logger.logObject.getter();
    v100 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v101 = 0;
      _os_log_impl(&dword_1B4BE6000, v99, v100, "Error decoding ConversationCommitResultXPC: Unknown FlowUnhandledReasonXPC", v101, 2u);
      MEMORY[0x1B5E44758](v101, -1, -1);
    }

LABEL_45:
LABEL_19:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v85 = (void *)MEMORY[0x1B5E432E8](0x6269726373657270, 0xEE006C6F6F546465);
  v86 = objc_msgSend(v65, sel_containsValueForKey_, v85);

  if (v86)
  {
    v87 = (void *)MEMORY[0x1B5E432E8](0x6269726373657270, 0xEE006C6F6F546465);
    v88 = objc_msgSend(v65, sel_decodeIntegerForKey_, v87);

    v67 = v88 != 0;
  }
  else
  {
    v67 = 1;
  }
LABEL_49:
  v69 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  v70 = (void *)MEMORY[0x1B5E432E8](1701869940, 0xE400000000000000);
  v71 = objc_msgSend(v65, sel_decodeIntegerForKey_, v70);

  if ((unint64_t)v71 >= 5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (one-time initialization token for executor != -1)
      swift_once();
    v74 = type metadata accessor for Logger();
    __swift_project_value_buffer(v74, (uint64_t)static Logger.executor);
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v77 = 0;
      _os_log_impl(&dword_1B4BE6000, v75, v76, "Error decoding ConversationCommitResultXPC: Unknown ConversationCommitResultTypeXPC", v77, 2u);
      MEMORY[0x1B5E44758](v77, -1, -1);
    }

    goto LABEL_19;
  }
  LODWORD(v129) = v67;
  v72 = (void *)MEMORY[0x1B5E432E8](0x726F727265, 0xE500000000000000);
  v73 = objc_msgSend(v65, sel_containsValueForKey_, v72);

  if (v73)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSError);
    v127 = (void (*)(char *, uint64_t))NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    v127 = 0;
  }
  v89 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4EF48A0);
  v90 = v65;
  v91 = objc_msgSend(v65, sel_containsValueForKey_, v89);

  if (v91)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    v92 = NSCoder.decodeObject<A>(of:forKey:)();
    v93 = v90;
    if (v92)
    {
      v94 = (void *)v92;
      v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v97 = v96;

    }
    else
    {
      v95 = 0;
      v97 = 0;
    }
  }
  else
  {
    v95 = 0;
    v97 = 0;
    v93 = v90;
  }
  v102 = (void *)MEMORY[0x1B5E432E8](0x5565737261706572, 0xED00004449726573);
  v103 = objc_msgSend(v93, sel_containsValueForKey_, v102);

  if (v103)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    v104 = NSCoder.decodeObject<A>(of:forKey:)();
    v105 = v117;
    if (v104)
    {
      v106 = (void *)v104;
      v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v109 = v108;

    }
    else
    {
      v107 = 0;
      v109 = 0;
    }
  }
  else
  {
    v107 = 0;
    v109 = 0;
    v105 = v117;
  }
  swift_getObjectType();

  if (v69)
  {
    v111 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    v111 = 0;
    v110 = 0xF000000000000000;
  }
  v40 = specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)((uint64_t)v71, v130, v46, (uint64_t)v66, 0, (char)v129, (uint64_t)v127, v111, v110, v95, v97, v107, v109);

  swift_deallocPartialClassInstance();
  return v40;
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task[0];
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task[0])
  {
    v1 = type metadata accessor for Siri_Nlu_External_Task();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9F090], v1);
    atomic_store(result, lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task);
  }
  return result;
}

uint64_t type metadata accessor for ConversationCommitResultXPC()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.commit(bridge:));
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for ConversationCommitResult();
  v3 = MEMORY[0x1E0C80A78](v2);
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xA0))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationCommitResultXPC.swiftRepresentation()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t i;

  v3 = type metadata accessor for PluginAction();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowUnhandledReason();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v31 - v12;
  switch(*(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_type))
  {
    case 0:
      v14 = *(void **)(v1 + OBJC_IVAR___SKRConversationCommitResult_error);
      if (!v14)
        goto LABEL_28;
      v14;
      return swift_willThrow();
    case 1:
      v26 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_activeTasks);
      v27 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_completedTasks);
      *a1 = v26;
      a1[1] = v27;
      type metadata accessor for ConversationCommitResult();
      goto LABEL_13;
    case 2:
      v21 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason);
      switch(v21)
      {
        case 0:
          goto LABEL_27;
        case 1:
          v22 = (unsigned int *)MEMORY[0x1E0D9B0B0];
          goto LABEL_18;
        case 2:
          v22 = (unsigned int *)MEMORY[0x1E0D9B0A8];
          goto LABEL_18;
        case 3:
          v22 = (unsigned int *)MEMORY[0x1E0D9B0B8];
LABEL_18:
          (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))((char *)v31 - v12, *v22, v7);
          goto LABEL_22;
        case 4:
          if ((*(_BYTE *)(v1 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool + 8) & 1) != 0)
          {
            v28 = type metadata accessor for PrescribedTool();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v11, 1, 1, v28);
            goto LABEL_21;
          }
          v29 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool);
          if (!v29)
          {
            static PrescribedTool.searchTool.getter();
            v30 = type metadata accessor for PrescribedTool();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v11, 0, 1, v30);
LABEL_21:
            (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0D9B0A0], v7);
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v11, v7);
LABEL_22:
            (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 32))(a1, v13, v7);
            type metadata accessor for ConversationCommitResult();
            return swift_storeEnumTagMultiPayload();
          }
          break;
        default:
          goto LABEL_29;
      }
      goto LABEL_31;
    case 3:
      v23 = (uint64_t *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData);
      v24 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData + 8);
      if (v24 >> 60 == 15)
      {
        specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000067, 0x80000001B4EF9360, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/ConversationCommitResult.swift", 127, 2, 184);
        __break(1u);
LABEL_31:
        for (i = v29; ; i = v21)
        {
LABEL_25:
          _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
          __break(1u);
LABEL_26:
          specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000006ALL, 0x80000001B4EF9270, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/ConversationCommitResult.swift", 127, 2, 190);
          __break(1u);
LABEL_27:
          specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000056, 0x80000001B4EF93D0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/ConversationCommitResult.swift", 127, 2, 169);
          __break(1u);
LABEL_28:
          specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000057, 0x80000001B4EF9430, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/ConversationCommitResult.swift", 127, 2, 160);
          __break(1u);
LABEL_29:
          ;
        }
      }
      outlined copy of Data._Representation(*v23, v24);
      v25 = v31[1];
      result = PluginAction.init(data:)();
      if (!v25)
      {
        (*(void (**)(_QWORD *, char *, uint64_t))(v4 + 32))(a1, v6, v3);
        type metadata accessor for ConversationCommitResult();
        return swift_storeEnumTagMultiPayload();
      }
      return result;
    case 4:
      v16 = (_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID);
      v17 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID + 8);
      if (!v17)
        goto LABEL_26;
      v18 = (uint64_t *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseUserID);
      v19 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseUserID + 8);
      if (!v19)
        goto LABEL_26;
      v20 = *v18;
      *a1 = *v16;
      a1[1] = v17;
      a1[2] = v20;
      a1[3] = v19;
      type metadata accessor for ConversationCommitResult();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    default:
      i = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_type);
      goto LABEL_25;
  }
}

void initializeWithCopy for ConversationCommitResult()
{
  char *v0;

  v0 = (char *)sub_1B4C6F0C4 + 4 * byte_1B4EE703D[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_1B4C6F0C4()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *v0 = v2;
  v0[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t destroy for ConversationCommitResult(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      break;
    case 1:
      v3 = type metadata accessor for FlowUnhandledReason();
      goto LABEL_4;
    case 2:
      v3 = type metadata accessor for PluginAction();
LABEL_4:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)(Swift::OpaquePointer activeTasks, Swift::OpaquePointer completedTasks)
{
  Swift::OpaquePointer *v2;
  Swift::OpaquePointer *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35[3];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v33 = v8;
    v13 = v12;
    v32 = swift_slowAlloc();
    v35[0] = v32;
    *(_DWORD *)v13 = 136315394;
    v14 = type metadata accessor for Siri_Nlu_External_Task();
    v15 = swift_bridgeObjectRetain();
    v16 = MEMORY[0x1B5E434D4](v15, v14);
    v18 = v17;
    swift_bridgeObjectRelease();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    v19 = swift_bridgeObjectRetain();
    v20 = MEMORY[0x1B5E434D4](v19, v14);
    v22 = v21;
    swift_bridgeObjectRelease();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "[ConversationService]: Registering ExecutionTaskContext with activeTasks: %s, completedTasks: %s", (uint8_t *)v13, 0x16u);
    v23 = v32;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v23, -1, -1);
    v24 = v13;
    v8 = v33;
    MEMORY[0x1B5E44758](v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v3[2]._rawValue = activeTasks._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[3]._rawValue = completedTasks._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v3[4]._rawValue)
  {
    v25 = swift_retain();
    MEMORY[0x1B5E436B4](v25, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 1, 1, v26);
  v27 = one-time initialization token for shared;
  swift_retain();
  if (v27 != -1)
    swift_once();
  swift_beginAccess();
  v28 = static MessageBusActor.shared;
  v30 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v29, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = v28;
  v31[3] = v30;
  v31[4] = v3;
  swift_retain();
  v3[4]._rawValue = (void *)_sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:), (uint64_t)v31);
  swift_release();
}

uint64_t protocol witness for DecisionMaking.commitConversation(_:) in conformance DecisionEngine(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t RemoteConversationClient.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t SharedFlowPluginConnection.__deallocating_deinit()
{
  SharedFlowPluginConnection.deinit();
  return swift_deallocClassInstance();
}

uint64_t SharedFlowPluginConnection.deinit()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v0 + 72) + 32) + 128))(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.LoadedConversationTracker.releaseLoadedConversation(serial:)(Swift::Int serial)
{
  uint64_t v1;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(serial);
  if ((v5 & 1) != 0)
  {
    v6 = v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    v9 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v8 = v9;
    }
    specialized _NativeDictionary._delete(at:)(v6, v8);
    *v3 = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t SendableRemoteConversationXPCWrapper.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t InterruptibleTaskManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t RemoteConversationClient.isEmpty()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v6 = v4;
    *(_DWORD *)v3 = 136446210;
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v1, v2, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return true.", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v4, -1, -1);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD *, void *, _QWORD, _QWORD, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[3];
  v2 = type metadata accessor for Logger();
  v0[4] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(_QWORD *, void *, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                  + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  v0[5] = v6;
  *v6 = v0;
  v6[1] = RemoteConversationClient.isEmpty();
  return v8(v0 + 6, &async function pointer to closure #1 in RemoteConversationClient.isEmpty(), 0, MEMORY[0x1E0DEAFA0], v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 2)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return true.", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v5, -1, -1);
    MEMORY[0x1B5E44758](v4, -1, -1);

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  else
  {

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t ConversationBridgeProcessorDelegate.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in RemoteConversationClient.isEmpty()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.cancel()()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v4;
    *v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.cancel();
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v11 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x29286C65636E6163, 0xE800000000000000, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #1 in RemoteConversationClient.isEmpty()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v4;
    *v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.cancel();
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v11 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    **(_BYTE **)(v0 + 24) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool) -> ()(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1 & 1);
}

uint64_t RemoteConversationClient.isCorrectable()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD *, void *, _QWORD, _QWORD, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[3];
  v2 = type metadata accessor for Logger();
  v0[4] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(_QWORD *, void *, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                  + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  v0[5] = v6;
  *v6 = v0;
  v6[1] = RemoteConversationClient.isCorrectable();
  return v8(v0 + 6, &async function pointer to closure #1 in RemoteConversationClient.isCorrectable(), 0, MEMORY[0x1E0DEAFA0], v4, v5);
}

{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 2)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x636572726F437369, 0xEF2928656C626174, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return false.", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v5, -1, -1);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v6 = v4;
    *(_DWORD *)v3 = 136446210;
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x636572726F437369, 0xEF2928656C626174, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v1, v2, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return false.", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v4, -1, -1);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.isCorrectable()()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v4;
    *v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.isCorrectable();
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v11 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x636572726F437369, 0xEF2928656C626174, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    **(_BYTE **)(v0 + 24) = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #1 in RemoteConversationClient.isCorrectable()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  return CheckedContinuation.resume(returning:)();
}

void ConversationBridgeProcessorDelegate.close(withExecutionOutput:needsUserInput:)(void *a1, char a2)
{
  uint64_t Strong;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, _QWORD))(*(_QWORD *)Strong + 936))(a1, a2 & 1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    v6 = a1;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v13 = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = *(_QWORD *)&v6[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v12 = *(_QWORD *)&v6[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "ConversationRequestProcessor already released, ignoring close of %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);

    }
    else
    {

    }
  }
}

void ConversationRequestProcessor.close(withExecutionOutput:needsUserInput:)(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = objc_msgSend(v3, sel_debugDescription);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "<<<--- %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);

  }
  else
  {

  }
  ConversationRequestProcessor.closeInternal(_:_:_:)((char *)v3, 0, 0, 0);
}

uint64_t ServerFallbackCapableRequestProcessor.requestHandledOnServer.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer);
  swift_beginAccess();
  return *v1;
}

uint64_t ResultCandidateState.commitSignpostID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  swift_beginAccess();
  v4 = type metadata accessor for ResultCandidateState.LoggingMetadata(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3 + *(int *)(v4 + 20), a1, &demangling cache variable for type metadata for OSSignpostID?);
}

uint64_t closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ConversationService.cleanupEmptyActiveConversations()();
}

uint64_t ConversationService.cleanupEmptyActiveConversations()()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + 232);
  *(_BYTE *)(v0 + 233) = v1;
  if (v1 == 2)
  {
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = swift_slowAlloc();
      v5 = swift_slowAlloc();
      v7 = v5;
      *(_DWORD *)v4 = 136446210;
      *(_QWORD *)(v4 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v7);
      _os_log_impl(&dword_1B4BE6000, v2, v3, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return true.", (uint8_t *)v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v5, -1, -1);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }

  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = swift_retain();
  MEMORY[0x1B5E43498](v1);
  if (*(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  result = swift_release();
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 168);
  if (v5 < 0)
  {
    v10 = __CocoaSet.Iterator.next()();
    if (!v10)
      goto LABEL_25;
    *(_QWORD *)(v0 + 144) = v10;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v9 = *(_QWORD *)(v0 + 136);
    swift_unknownObjectRelease();
    v8 = v3;
    v6 = v4;
    goto LABEL_9;
  }
  if (v4)
  {
    v6 = (v4 - 1) & v4;
    v7 = __clz(__rbit64(v4)) | (v3 << 6);
    v8 = *(_QWORD *)(v0 + 200);
LABEL_6:
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v7);
    swift_retain();
LABEL_9:
    *(_QWORD *)(v0 + 200) = v8;
    *(_QWORD *)(v0 + 208) = v6;
    *(_QWORD *)(v0 + 192) = v9;
    if (v9)
      return swift_task_switch();
    goto LABEL_25;
  }
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
    goto LABEL_36;
  v12 = (unint64_t)(*(_QWORD *)(v0 + 184) + 64) >> 6;
  if (v11 < v12)
  {
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v13 + 8 * v11);
    v8 = v3 + 1;
    if (!v14)
    {
      v8 = v3 + 2;
      if (v3 + 2 >= v12)
        goto LABEL_25;
      v14 = *(_QWORD *)(v13 + 8 * v8);
      if (!v14)
      {
        v8 = v3 + 3;
        if (v3 + 3 >= v12)
          goto LABEL_25;
        v14 = *(_QWORD *)(v13 + 8 * v8);
        if (!v14)
        {
          v8 = v3 + 4;
          if (v3 + 4 >= v12)
            goto LABEL_25;
          v14 = *(_QWORD *)(v13 + 8 * v8);
          if (!v14)
          {
            v15 = v3 + 5;
            while (v12 != v15)
            {
              v14 = *(_QWORD *)(v13 + 8 * v15++);
              if (v14)
              {
                v8 = v15 - 1;
                goto LABEL_14;
              }
            }
            goto LABEL_25;
          }
        }
      }
    }
LABEL_14:
    v6 = (v14 - 1) & v14;
    v7 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_6;
  }
LABEL_25:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  result = swift_release();
  v16 = *(_QWORD *)(v0 + 128);
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v17)
      goto LABEL_27;
LABEL_34:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
    goto LABEL_34;
LABEL_27:
  if (v17 >= 1)
  {
    v18 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
      {
        v19 = MEMORY[0x1B5E43B94](v18, v16);
      }
      else
      {
        v19 = *(_QWORD *)(v16 + 8 * v18 + 32);
        swift_retain();
      }
      ++v18;
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(v19);
      swift_endAccess();
      swift_release();
      swift_release();
    }
    while (v17 != v18);
    goto LABEL_34;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(_BYTE *)(v0 + 233) & 1) != 0)
  {
    v1 = swift_retain();
    MEMORY[0x1B5E43498](v1);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  result = swift_release();
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 168);
  if (v5 < 0)
  {
    v10 = __CocoaSet.Iterator.next()();
    if (!v10)
      goto LABEL_27;
    *(_QWORD *)(v0 + 144) = v10;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v9 = *(_QWORD *)(v0 + 136);
    swift_unknownObjectRelease();
    v8 = v3;
    v6 = v4;
    goto LABEL_11;
  }
  if (v4)
  {
    v6 = (v4 - 1) & v4;
    v7 = __clz(__rbit64(v4)) | (v3 << 6);
    v8 = *(_QWORD *)(v0 + 200);
LABEL_8:
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v7);
    swift_retain();
LABEL_11:
    *(_QWORD *)(v0 + 200) = v8;
    *(_QWORD *)(v0 + 208) = v6;
    *(_QWORD *)(v0 + 192) = v9;
    if (v9)
      return swift_task_switch();
    goto LABEL_27;
  }
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
    goto LABEL_38;
  v12 = (unint64_t)(*(_QWORD *)(v0 + 184) + 64) >> 6;
  if (v11 < v12)
  {
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v13 + 8 * v11);
    v8 = v3 + 1;
    if (!v14)
    {
      v8 = v3 + 2;
      if (v3 + 2 >= v12)
        goto LABEL_27;
      v14 = *(_QWORD *)(v13 + 8 * v8);
      if (!v14)
      {
        v8 = v3 + 3;
        if (v3 + 3 >= v12)
          goto LABEL_27;
        v14 = *(_QWORD *)(v13 + 8 * v8);
        if (!v14)
        {
          v8 = v3 + 4;
          if (v3 + 4 >= v12)
            goto LABEL_27;
          v14 = *(_QWORD *)(v13 + 8 * v8);
          if (!v14)
          {
            v15 = v3 + 5;
            while (v12 != v15)
            {
              v14 = *(_QWORD *)(v13 + 8 * v15++);
              if (v14)
              {
                v8 = v15 - 1;
                goto LABEL_16;
              }
            }
            goto LABEL_27;
          }
        }
      }
    }
LABEL_16:
    v6 = (v14 - 1) & v14;
    v7 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_8;
  }
LABEL_27:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  result = swift_release();
  v16 = *(_QWORD *)(v0 + 128);
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v17)
      goto LABEL_29;
LABEL_36:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
    goto LABEL_36;
LABEL_29:
  if (v17 >= 1)
  {
    v18 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
      {
        v19 = MEMORY[0x1B5E43B94](v18, v16);
      }
      else
      {
        v19 = *(_QWORD *)(v16 + 8 * v18 + 32);
        swift_retain();
      }
      ++v18;
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(v19);
      swift_endAccess();
      swift_release();
      swift_release();
    }
    while (v17 != v18);
    goto LABEL_36;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v0 + 128) = MEMORY[0x1E0DEE9D8];
  v1 = *(_QWORD *)(v0 + 152);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    result = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 24);
    v6 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 176) = v4;
    *(_QWORD *)(v0 + 184) = v6;
    *(_QWORD *)(v0 + 168) = result;
    if (result < 0)
    {
      v19 = __CocoaSet.Iterator.next()();
      if (!v19)
        goto LABEL_28;
      *(_QWORD *)(v0 + 144) = v19;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v11 = *(_QWORD *)(v0 + 136);
      swift_unknownObjectRelease();
      v10 = v5;
      v8 = v7;
      goto LABEL_6;
    }
    if (v7)
      goto LABEL_4;
  }
  else
  {
    v12 = -1 << *(_BYTE *)(v2 + 32);
    v6 = ~v12;
    v4 = v2 + 56;
    v13 = *(_QWORD *)(v2 + 56);
    v14 = -v12;
    *(_QWORD *)(v0 + 176) = v2 + 56;
    *(_QWORD *)(v0 + 184) = v6;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v7 = v15 & v13;
    *(_QWORD *)(v0 + 168) = v2;
    result = swift_bridgeObjectRetain();
    v5 = 0;
    if (v7)
    {
LABEL_4:
      v8 = (v7 - 1) & v7;
      v9 = __clz(__rbit64(v7)) | (v5 << 6);
      v10 = v5;
LABEL_5:
      v11 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v9);
      swift_retain();
LABEL_6:
      *(_QWORD *)(v0 + 200) = v10;
      *(_QWORD *)(v0 + 208) = v8;
      *(_QWORD *)(v0 + 192) = v11;
      if (v11)
        return swift_task_switch();
      goto LABEL_28;
    }
  }
  v16 = v5 + 1;
  if (__OFADD__(v5, 1))
    goto LABEL_39;
  v17 = (unint64_t)(v6 + 64) >> 6;
  if (v16 < v17)
  {
    v18 = *(_QWORD *)(v4 + 8 * v16);
    v10 = v5 + 1;
    if (!v18)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v17)
        goto LABEL_28;
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v17)
          goto LABEL_28;
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v17)
            goto LABEL_28;
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
          {
            v20 = v5 + 5;
            while (v17 != v20)
            {
              v18 = *(_QWORD *)(v4 + 8 * v20++);
              if (v18)
              {
                v10 = v20 - 1;
                goto LABEL_15;
              }
            }
            goto LABEL_28;
          }
        }
      }
    }
LABEL_15:
    v8 = (v18 - 1) & v18;
    v9 = __clz(__rbit64(v18)) + (v10 << 6);
    goto LABEL_5;
  }
LABEL_28:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  result = swift_release();
  v21 = *(_QWORD *)(v0 + 128);
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v22)
      goto LABEL_30;
LABEL_37:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v22)
    goto LABEL_37;
LABEL_30:
  if (v22 >= 1)
  {
    v23 = 0;
    do
    {
      if ((v21 & 0xC000000000000001) != 0)
      {
        v24 = MEMORY[0x1B5E43B94](v23, v21);
      }
      else
      {
        v24 = *(_QWORD *)(v21 + 8 * v23 + 32);
        swift_retain();
      }
      ++v23;
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(v24);
      swift_endAccess();
      swift_release();
      swift_release();
    }
    while (v22 != v23);
    goto LABEL_37;
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v1 + 160) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(_QWORD *, void *, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v17;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[27] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = static os_log_type_t.debug.getter();
  v3 = Logger.logObject.getter();
  v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v17 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = StaticString.description.getter();
    *(_QWORD *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v17);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    v9 = StaticString.description.getter();
    *(_QWORD *)(v5 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v17);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "%s:%s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v11 = (_QWORD *)v0[24];
  v12 = v11[19];
  v13 = v11[20];
  __swift_project_boxed_opaque_existential_1(v11 + 16, v12);
  v16 = (uint64_t (*)(_QWORD *, void *, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v13 + 16)
                                                                                   + *(_QWORD *)(v13 + 16));
  v14 = (_QWORD *)swift_task_alloc();
  v0[28] = v14;
  *v14 = v0;
  v14[1] = ConversationService.cleanupEmptyActiveConversations();
  return v16(v0 + 29, &async function pointer to closure #1 in RemoteConversationClient.isEmpty(), 0, MEMORY[0x1E0DEAFA0], v12, v13);
}

{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    v2 = swift_slowAlloc();
    v3 = swift_slowAlloc();
    v5 = v3;
    *(_DWORD *)v2 = 136446210;
    *(_QWORD *)(v2 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v5);
    _os_log_impl(&dword_1B4BE6000, v0, v1, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return true.", (uint8_t *)v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v3, -1, -1);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

  return swift_task_switch();
}

uint64_t CommitResultCandidateId.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in JetsamHelper.releaseJetsamTransaction()@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16;

  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v16 = v8;
    *(_DWORD *)v7 = 136315138;
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "os_transaction(%s) end", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  v11 = (_QWORD *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction + 8);
  v14 = v13 != 0;
  *v11 = 0;
  v11[1] = 0;
  result = outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(v12, v13);
  *a2 = v14;
  return result;
}

void ConversationRequestProcessor.synchronizedCloseRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 1096))(v3);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 440))(v6) & 1) != 0)
  {
    ConversationRequestProcessor.completeRequest(completion:)(0, 0);
  }
  else
  {
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
    if (v7)
    {
      v8 = (_QWORD *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      if (*v8 >> 62 == 1)
      {
        v9 = *v8 & 0x3FFFFFFFFFFFFFFFLL;
        v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
        v11 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
        v12 = one-time initialization token for shared;
        swift_retain_n();
        swift_retain();
        if (v12 != -1)
          swift_once();
        swift_beginAccess();
        v13 = static MessageBusActor.shared;
        v14 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
        v15 = (_QWORD *)swift_allocObject();
        v15[2] = v13;
        v15[3] = v14;
        v15[4] = v1;
        v15[5] = v9;
        swift_retain();
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.synchronizedCloseRequest(), (uint64_t)v15);
        (*(void (**)(void))(*(_QWORD *)v10 + 120))();
        swift_release();
        swift_release();
      }
      else
      {
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v19 = type metadata accessor for Logger();
        __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
        v20 = Logger.logObject.getter();
        v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v22 = 0;
          _os_log_impl(&dword_1B4BE6000, v20, v21, "Close called before an RC was selected.", v22, 2u);
          MEMORY[0x1B5E44758](v22, -1, -1);
        }

        ConversationRequestProcessor.completeRequest(completion:)(0, 0);
      }
      swift_release();
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
      v24 = Logger.logObject.getter();
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_1B4BE6000, v24, v17, "Ignoring synchronizedCloseRequest as we are not in a turn", v18, 2u);
        MEMORY[0x1B5E44758](v18, -1, -1);
      }

    }
  }
}

Swift::Void __swiftcall ConversationRequestProcessor.safelyCloseContextUpdater()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
  v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
  v7 = one-time initialization token for shared;
  swift_retain();
  if (v7 != -1)
    swift_once();
  swift_beginAccess();
  v8 = static MessageBusActor.shared;
  v9 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v9;
  v10[4] = v1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater(), (uint64_t)v10);
  (*(void (**)(void))(*(_QWORD *)v5 + 120))();
  swift_release();
}

uint64_t ConversationRequestProcessor.sentResultCandidateSelected.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationRequestProcessorTurnState.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  v4 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  outlined consume of ConversationRequestProcessorTurnState.SpeechState(*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState + 8));
  return swift_deallocClassInstance();
}

void ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v6 = v5;
  v30 = a5;
  HIDWORD(v29) = a3;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88378]), sel_init);
  UUID.init()();
  v15 = UUID.uuidString.getter();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v18 = (void *)MEMORY[0x1B5E432E8](v15, v17);
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setAceId_, v18);

  v19 = v6[10];
  v20 = v6[11];
  v21 = v14;
  v22 = (void *)MEMORY[0x1B5E432E8](v19, v20);
  objc_msgSend(v21, sel_setRefId_, v22);

  v23 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  objc_msgSend(v21, sel_setSelectedResultCandidateId_, v23);

  objc_msgSend(v21, sel_setServerFallback_, BYTE4(v29) & 1);
  (*(void (**)(uint64_t))(*v6 + 448))(1);
  v24 = *(void **)((char *)v6
                 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
  v25 = swift_allocObject();
  v26 = v30;
  *(_QWORD *)(v25 + 16) = a4;
  *(_QWORD *)(v25 + 24) = v26;
  aBlock[4] = partial apply for closure #1 in ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:);
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_32;
  v27 = _Block_copy(aBlock);
  v28 = v21;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(a4);
  swift_release();
  objc_msgSend(v24, sel_handleCommand_completion_, v28, v27);
  _Block_release(v27);

}

uint64_t ConversationRequestProcessor.sentResultCandidateSelected.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t protocol witness for ContextUpdating.close() in conformance MultiUserContextUpdater()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 272))();
}

Swift::Void __swiftcall MultiUserContextUpdater.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Closing all ContextUpdater instances", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 184))();
  specialized Sequence.forEach(_:)(v6);
  v7 = swift_bridgeObjectRelease();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v7);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 480))(v8);
    swift_release();
  }
}

uint64_t MultiUserContextUpdater.userIdToContextUpdater.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall ContextUpdater.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void **v23;
  void (*v24)(char *, _QWORD, uint64_t);
  void (*v25)(char *, uint64_t);
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  objc_class *v38;
  char *v39;
  uint64_t v40;
  objc_class *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  id v48;
  char v49;
  uint64_t v50;
  id v51;
  id v52;
  objc_class *updated;
  char *v54;
  id v55;
  id v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  id v65;
  uint64_t v66;
  id v67;
  objc_super v68;
  objc_super v69;
  objc_super v70;
  __int128 v71;
  uint64_t v72;
  void *v73;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v66 = (uint64_t)&v63 - v6;
  v7 = type metadata accessor for ConversationSessionKey();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1B4BE6000, v15, v16, "Closing ContextUpdater", v17, 2u);
    MEMORY[0x1B5E44758](v17, -1, -1);
  }

  (*(void (**)(void))(*(_QWORD *)v1 + 360))();
  v18 = type metadata accessor for UserID();
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v13, 1, v18);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  if (v19 != 1)
  {
    v64 = v5;
    v24 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
    v24(v10, *MEMORY[0x1E0D9EDD8], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v71);
    v25 = *(void (**)(char *, uint64_t))(v8 + 8);
    v25(v10, v7);
    if (v72)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_SystemDialogAct]);
      v26 = swift_dynamicCast();
      v27 = v73;
      if (!v26)
        v27 = 0;
      v65 = v27;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v71, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v65 = 0;
    }
    v24(v10, *MEMORY[0x1E0D9EDA0], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v71);
    v25(v10, v7);
    if (v72)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]);
      if (swift_dynamicCast())
        v28 = v73;
      else
        v28 = 0;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v71, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v28 = 0;
    }
    v24(v10, *MEMORY[0x1E0D9EDB0], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v71);
    v25(v10, v7);
    if (v72)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]);
      if (swift_dynamicCast())
        v29 = v73;
      else
        v29 = 0;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v71, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v29 = 0;
    }
    v24(v10, *MEMORY[0x1E0D9EDF8], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v71);
    v25(v10, v7);
    if (v72)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
      if (swift_dynamicCast())
        v30 = v73;
      else
        v30 = 0;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v71, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v30 = 0;
    }
    v24(v10, *MEMORY[0x1E0D9EDD0], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v71);
    v25(v10, v7);
    if (v72)
    {
      v31 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
      v32 = v66;
      v33 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v32, v33 ^ 1u, 1, v31);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v71, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v34 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v66, 1, 1, v34);
    }
    v35 = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v1 + 240) + 16))
      ContextUpdater.flushResponseText(legacyNLContext:)(v66);
    v36 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 384))(v35);
    v37 = specialized Sequence<>.contains(_:)(0xD000000000000017, 0x80000001B4EF7FF0, v36);
    swift_bridgeObjectRelease();
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_44:
      v61 = outlined destroy of ReferenceResolutionClientProtocol?(v66, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
      (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 232) + 184))(v61);
      *(_QWORD *)(v1 + 240) = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
      v23 = (void **)(v1 + 256);
      goto LABEL_45;
    }
    v38 = (objc_class *)type metadata accessor for ConversationalContextContainer();
    v39 = (char *)objc_allocWithZone(v38);
    *(_QWORD *)&v39[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = v65;
    *(_QWORD *)&v39[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks] = v28;
    *(_QWORD *)&v39[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks] = v29;
    *(_QWORD *)&v39[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities] = v30;
    v70.receiver = v39;
    v70.super_class = v38;
    v65 = objc_msgSendSuper2(&v70, sel_init);
    v40 = (uint64_t)v64;
    outlined init with copy of ReferenceResolutionClientProtocol?(v66, (uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    v41 = (objc_class *)type metadata accessor for ServerPromptData();
    v42 = objc_allocWithZone(v41);
    outlined init with copy of ReferenceResolutionClientProtocol?(v40, (uint64_t)v42 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    v69.receiver = v42;
    v69.super_class = v41;
    v43 = objc_msgSendSuper2(&v69, sel_init);
    outlined destroy of ReferenceResolutionClientProtocol?(v40, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    v44 = v43;
    v45 = MEMORY[0x1E0DEE9E0];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v71 = v45;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v44, 1, isUniquelyReferenced_nonNull_native, &v71);
    v47 = v71;
    swift_bridgeObjectRelease();
    v48 = v65;
    v49 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v71 = v47;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v48, 0, v49, &v71);
    v50 = v71;
    swift_bridgeObjectRelease();
    v24(v10, *MEMORY[0x1E0D9EDE8], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v71);
    v25(v10, v7);
    if (v72)
    {
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v51 = v67;
        objc_msgSend(v67, sel_copy);
        _bridgeAnyObjectToAny(_:)();

        swift_unknownObjectRelease();
        if (swift_dynamicCast())
          v52 = v67;
        else
          v52 = 0;
        goto LABEL_43;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v71, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    v52 = 0;
LABEL_43:
    updated = (objc_class *)type metadata accessor for ServerBoundContextUpdateContainer();
    v54 = (char *)objc_allocWithZone(updated);
    *(_QWORD *)&v54[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = v52;
    v68.receiver = v54;
    v68.super_class = updated;
    v55 = v52;
    v56 = objc_msgSendSuper2(&v68, (SEL)&stru_1E686ADB8.type);
    v57 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v71 = v50;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v56, 2, v57, &v71);
    v58 = v71;
    swift_bridgeObjectRelease();
    v59 = *(_QWORD *)(v1 + 216);
    v60 = *(_QWORD *)(v1 + 224);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 192), v59);
    (*(void (**)(uint64_t, void (*)(), _QWORD, uint64_t, uint64_t))(v60 + 8))(v58, closure #1 in ContextUpdater.close(), 0, v59, v60);
    swift_bridgeObjectRelease();

    goto LABEL_44;
  }
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1B4BE6000, v20, v21, "Closing shared instance of ContextUpdater without further operations", v22, 2u);
    MEMORY[0x1B5E44758](v22, -1, -1);
  }

  (*(void (**)(void))(**(_QWORD **)(v1 + 232) + 184))();
  swift_beginAccess();
  *(_QWORD *)(v1 + 240) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v23 = (void **)(v1 + 256);
LABEL_45:
  swift_beginAccess();
  v62 = *v23;
  *v23 = 0;

}

Swift::Void __swiftcall SessionStateContextKeysManager.reset()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in SessionStateContextKeysManager.reset());
  os_unfair_lock_unlock(v1);
}

uint64_t partial apply for closure #1 in SessionStateContextKeysManager.reset()()
{
  uint64_t v0;

  return closure #1 in SessionStateContextKeysManager.reset()(v0);
}

uint64_t closure #1 in SessionStateContextKeysManager.reset()(uint64_t a1)
{
  swift_beginAccess();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9E8];
  return swift_bridgeObjectRelease();
}

void partial apply for closure #1 in ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16));
}

void closure #1 in ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)(uint64_t a1, void *a2, void (*a3)(uint64_t, void *))
{
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  v7 = a2;
  v8 = a2;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v9, v10))
  {

    if (!a3)
      return;
    goto LABEL_7;
  }
  v11 = (uint8_t *)swift_slowAlloc();
  v12 = swift_slowAlloc();
  v15 = v12;
  *(_DWORD *)v11 = 136315138;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
  v13 = Optional.debugDescription.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v15);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1B4BE6000, v9, v10, "Sent ResultCandidateSelected to server, error: %s", v11, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v12, -1, -1);
  MEMORY[0x1B5E44758](v11, -1, -1);

  if (a3)
LABEL_7:
    a3(a1, a2);
}

uint64_t ResultCandidateState.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  outlined destroy of CamOutput(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, type metadata accessor for ResultCandidateType);
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  v2 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlLanguageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_mitigationDecision, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseStatusCode;
  v4 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_fallbackParse, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of CamOutput(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata, type metadata accessor for ResultCandidateState.LoggingMetadata);
  return v0;
}

void ConversationRequestAwareBridgeBase.handleEndRequestInternal(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  id v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v66 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = RequestMessageBase.requestId.getter();
  v9 = v8;
  v10 = *(uint64_t (**)(void))(*v1 + 376);
  v11 = v10();
  if (!v11)
    goto LABEL_7;
  v13 = *(_QWORD *)(v11 + 64);
  v12 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain();
  swift_release();
  if (v13 == v7 && v12 == v9)
  {
    v16 = swift_bridgeObjectRelease();
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v16 = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
LABEL_7:
      if ((*((_BYTE *)v2
            + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) & 1) != 0
        || (v17 = v10(), swift_release(), v17))
      {
        v18 = a1;
        swift_retain_n();
        v19 = v9;
        v20 = v18;
        swift_bridgeObjectRetain();
        v67 = Logger.logObject.getter();
        v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, (os_log_type_t)v21))
        {
          LODWORD(v64) = v21;
          v22 = swift_slowAlloc();
          v63 = swift_slowAlloc();
          v69 = v63;
          *(_DWORD *)v22 = 136315906;
          MessageBase.messageId.getter();
          lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
          v23 = dispatch thunk of CustomStringConvertible.description.getter();
          v65 = v7;
          v25 = v24;
          (*(void (**)(char *, uint64_t))(v66 + 8))(v6, v4);
          v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v22 + 12) = 2080;
          swift_getObjectType();
          v26 = _typeName(_:qualified:)();
          v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v22 + 22) = 2080;
          swift_bridgeObjectRetain();
          v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v19, &v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v28 = swift_bridgeObjectRelease_n();
          *(_WORD *)(v22 + 32) = 2080;
          v29 = ((uint64_t (*)(uint64_t))v10)(v28);
          if (v29)
          {
            v31 = *(_QWORD *)(v29 + 64);
            v30 = *(_QWORD *)(v29 + 72);
            swift_bridgeObjectRetain();
            swift_release();
          }
          else
          {
            v30 = 0xE700000000000000;
            v31 = 0x74657320746F6ELL;
          }
          v60 = v64;
          v61 = v63;
          v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v67, v60, "Got end request message to non exists request, messageId: %s type: %s requestId: %s, current requestId: %s dropping the message", (uint8_t *)v22, 0x2Au);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v61, -1, -1);
          v44 = v22;
          goto LABEL_34;
        }
        swift_release_n();
        swift_bridgeObjectRelease_n();

LABEL_37:
        return;
      }
      v51 = a1;
      swift_bridgeObjectRetain();
      v67 = Logger.logObject.getter();
      v52 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v67, v52))
      {
        swift_bridgeObjectRelease_n();

        goto LABEL_37;
      }
      v53 = swift_slowAlloc();
      v64 = swift_slowAlloc();
      v69 = v64;
      *(_DWORD *)v53 = 136315650;
      v65 = v7;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v54 = dispatch thunk of CustomStringConvertible.description.getter();
      v56 = v55;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v6, v4);
      v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      swift_getObjectType();
      v57 = _typeName(_:qualified:)();
      v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 22) = 2080;
      swift_bridgeObjectRetain();
      v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v9, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v67, v52, "Got end request message for non-existing request, messageId: %s type: %s requestId: %s, current requestId is not set. Dropping the message", (uint8_t *)v53, 0x20u);
      v59 = v64;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v59, -1, -1);
      v44 = v53;
      goto LABEL_34;
    }
  }
  v32 = v7;
  v33 = ((uint64_t (*)(uint64_t))v10)(v16);
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(*v2 + 496))(a1, v33);
    v33 = swift_release();
  }
  v34 = ((uint64_t (*)(uint64_t))v10)(v33);
  if (!v34)
  {
LABEL_21:
    swift_retain_n();
    swift_bridgeObjectRetain();
    v67 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v67, v39))
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_37;
    }
    v40 = swift_slowAlloc();
    v41 = swift_slowAlloc();
    v69 = v41;
    *(_DWORD *)v40 = 136315394;
    swift_bridgeObjectRetain();
    v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v9, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v40 + 12) = 2080;
    v42 = v2[2];
    v43 = v2[3];
    swift_bridgeObjectRetain();
    v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v67, v39, "Request %s for bridge %s was already changed, not setting processor to 'nil'", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v41, -1, -1);
    v44 = v40;
LABEL_34:
    MEMORY[0x1B5E44758](v44, -1, -1);

    return;
  }
  v36 = *(_QWORD *)(v34 + 64);
  v35 = *(_QWORD *)(v34 + 72);
  swift_bridgeObjectRetain();
  swift_release();
  if (v7 == v36 && v9 == v35)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0)
      goto LABEL_21;
  }
  swift_retain_n();
  swift_bridgeObjectRetain();
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = swift_slowAlloc();
    v48 = swift_slowAlloc();
    v69 = v48;
    *(_DWORD *)v47 = 136315394;
    swift_bridgeObjectRetain();
    v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v9, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v47 + 12) = 2080;
    v49 = v2[2];
    v50 = v2[3];
    swift_bridgeObjectRetain();
    v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v45, v46, "Setting request processor of requestId %s for bridge %s to 'nil'", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v48, -1, -1);
    MEMORY[0x1B5E44758](v47, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(_QWORD))(*v2 + 384))(0);
}

void ConversationRequestProcessor.handleEndRequest(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint8_t *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _DWORD *v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD v56[5];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RREntity();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  v16 = a1;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  v19 = os_log_type_enabled(v17, v18);
  v54 = v9;
  v55 = v11;
  v53 = v13;
  if (v19)
  {
    v20 = swift_slowAlloc();
    v52 = v6;
    v21 = (uint8_t *)v20;
    v51[0] = swift_slowAlloc();
    *(_DWORD *)v21 = 138412290;
    v56[0] = v16;
    v22 = v16;
    v51[1] = v15;
    v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24 = v51[0];
    *(_QWORD *)v51[0] = v16;

    _os_log_impl(&dword_1B4BE6000, v17, v18, "ConversationBridge received message: %@", v21, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v24, -1, -1);
    v25 = v21;
    v6 = v52;
    MEMORY[0x1B5E44758](v25, -1, -1);
  }
  else
  {

  }
  v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v2 + 392))(v56);
  (*(void (**)(_QWORD *))(*(_QWORD *)v26 + 232))(v56);
  v27 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 528))(v27);
  if (v28)
  {
    v29 = v28;
    type metadata accessor for RequestCompletedMessage();
    if (!swift_dynamicCastClass())
      goto LABEL_18;
    v30 = (_QWORD *)(v29 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    if (*v30 >> 62 != 1)
      goto LABEL_18;
    v31 = (void *)v30[1];
    if (!v31)
      goto LABEL_18;
    v32 = v31;
    v33 = objc_msgSend(v32, sel_af_userUtteranceValue);
    if (v33)
    {
      v34 = v33;
      v35 = objc_msgSend(v33, sel_bestTextInterpretation);

      if (v35)
      {
        type metadata accessor for ConversationRequestProcessor();
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v38 = v37;

        v39 = (uint64_t)v54;
        static ConversationRequestProcessor.createUtteranceRREntity(utterance:)(v36, v38, (uint64_t)v54);
        swift_bridgeObjectRelease();
        v40 = v55;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v39, 1, v10) == 1)
        {

          outlined destroy of ReferenceResolutionClientProtocol?(v39, (uint64_t *)&demangling cache variable for type metadata for RREntity?);
        }
        else
        {
          v45 = v53;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v53, v39, v10);
          v46 = v10;
          v47 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient + 24);
          v54 = *(char **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient + 32);
          v52 = (char *)__swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient), v47);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>);
          v48 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
          v49 = swift_allocObject();
          *(_OWORD *)(v49 + 16) = xmmword_1B4EE3F50;
          (*(void (**)(unint64_t, char *, uint64_t))(v40 + 16))(v49 + v48, v45, v46);
          v50 = type metadata accessor for RRFilter();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v6, 1, 1, v50);
          dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)();
          swift_bridgeObjectRelease();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for RRFilter?);

          (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v46);
        }
LABEL_18:
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 376))(1, 0, 3);
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_retain_n();
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (_DWORD *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *v43 = 136315138;
      (*(void (**)(void))(*(_QWORD *)v2 + 368))();
      __asm { BR              X10 }
    }
    swift_release_n();

  }
}

void RecentDialogTracker.handleEndRequest(sessionState:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *oslog;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId + 8);
  if (v2)
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestHasTrackedDialogs) == 1)
    {
      v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId);
      v5 = one-time initialization token for conversationBridge;
      swift_bridgeObjectRetain();
      if (v5 != -1)
        swift_once();
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain_n();
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        v10 = swift_slowAlloc();
        v15 = v10;
        *(_DWORD *)v9 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v2, &v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v7, v8, "RecentDialogTracker: requesting session snapshot for request %s", v9, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v10, -1, -1);
        MEMORY[0x1B5E44758](v9, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of ConversationSessionState.createSnapshot(requestId:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v12, "RecentDialogTracker: handleEndRequest called when currentRequestId is not set", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

  }
}

uint64_t ServerFallbackCapableRequestProcessor.__deallocating_deinit()
{
  uint64_t v0;

  v0 = ConversationRequestProcessor.deinit();
  swift_release();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ConversationRequestProcessor.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  outlined consume of ConversationRequestProcessor.State(*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state + 16));
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  v4 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, &demangling cache variable for type metadata for ContextUpdating?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  swift_release();
  outlined consume of ConversationRequestProcessor.UserIdentification?(*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification), *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification + 8), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification + 16));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ConcurrentTaskPool.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t MultiUserContextUpdater.__deallocating_deinit()
{
  MultiUserContextUpdater.deinit();
  return swift_deallocClassInstance();
}

uint64_t MultiUserContextUpdater.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ContextUpdater.__deallocating_deinit()
{
  ContextUpdater.deinit();
  return swift_deallocClassInstance();
}

uint64_t ContextUpdater.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SessionStateContextKeysManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t USOSerializedIdentifier.isEmergencyNumber.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v1 = objc_msgSend(v0, sel_namespaceString);
  if (!v1)
    goto LABEL_5;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  if (v3 == 0xD000000000000014 && v5 == 0x80000001B4EF4A20)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
LABEL_5:
    result = (uint64_t)objc_msgSend(v0, sel_namespaceString);
    if (!result)
      return result;
    v8 = (void *)result;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    if (v9 != 0x6D754E656E6F6870 || v11 != 0xEB00000000726562)
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v13 & 1) == 0)
        return result;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v14 = objc_msgSend(v0, sel_value);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  if (v15 == 0x636E656772656D65 && v17 == 0xEF7265626D754E79)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v18 & 1;
  }
}

uint64_t specialized MessagesAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v42;
  void (*v43)(_BYTE *, uint64_t);
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _BYTE v48[12];
  int v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;

  v0 = type metadata accessor for UsoEntity_common_MessageMode.DefinedValues();
  v55 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v51 = &v48[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MessageMode.DefinedValues?, UsoEntity_common_MessageMode.DefinedValues?));
  MEMORY[0x1E0C80A78](v2);
  v53 = &v48[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v52 = &v48[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v48[-v8];
  MEMORY[0x1E0C80A78](v7);
  v54 = &v48[-v10];
  v11 = type metadata accessor for USOParse();
  v12 = *(_BYTE **)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v48[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for Parse();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = &v48[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Input.parse.getter();
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v16 + 88))(v18, v15) != *MEMORY[0x1E0D9C678])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1B4BE6000, v27, v28, "MessagesAffinityScorer returning default because this is not a usoParse", v29, 2u);
      MEMORY[0x1B5E44758](v29, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
    return 2;
  }
  (*(void (**)(_BYTE *, uint64_t))(v16 + 96))(v18, v15);
  (*((void (**)(_BYTE *, _BYTE *, uint64_t))v12 + 4))(v14, v18, v11);
  v19 = specialized MessagesAffinityScorer.extractCommonMessageFromUsoParse(usoParse:)();
  v50 = v11;
  if (v19 && (v20 = swift_retain(), v21 = MEMORY[0x1B5E40234](v20), v22 = swift_release(), v21))
  {
    v23 = v54;
    MEMORY[0x1B5E40450](v22);
    swift_release();
    v24 = (uint64_t)v53;
    v25 = v55;
  }
  else
  {
    v23 = v54;
    v25 = v55;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v54, 1, 1, v0);
    v24 = (uint64_t)v53;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v25 + 104))(v9, *MEMORY[0x1E0DA1830], v0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v9, 0, 1, v0);
  v31 = v24 + *(int *)(v2 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v23, v24, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v9, v31, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v32(v24, 1, v0) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    if (v32(v31, 1, v0) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
LABEL_26:
      if (one-time initialization token for executor != -1)
        swift_once();
      v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v47 = 0;
        _os_log_impl(&dword_1B4BE6000, v45, v46, "MessagesAffinityScorer override to .low because this a mail task", v47, 2u);
        MEMORY[0x1B5E44758](v47, -1, -1);
      }

      swift_release();
      (*((void (**)(_BYTE *, uint64_t))v12 + 1))(v14, v50);
      return 1;
    }
  }
  else
  {
    v33 = v52;
    outlined init with copy of ReferenceResolutionClientProtocol?(v24, (uint64_t)v52, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    if (v32(v31, 1, v0) != 1)
    {
      v40 = v55;
      v41 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32);
      v53 = v12;
      v42 = v51;
      v41(v51, v31, v0);
      lazy protocol witness table accessor for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues();
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(_BYTE *, uint64_t))(v40 + 8);
      v12 = v53;
      v43(v42, v0);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v54, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
      v43(v33, v0);
      outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
      if ((v49 & 1) != 0)
        goto LABEL_26;
      goto LABEL_17;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v54, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v33, v0);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for (UsoEntity_common_MessageMode.DefinedValues?, UsoEntity_common_MessageMode.DefinedValues?));
LABEL_17:
  if (v19)
  {
    swift_retain();
    dispatch thunk of UsoEntity_common_Message.subject.getter();
    v35 = v34;
    swift_release();
    if (v35)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    _os_log_impl(&dword_1B4BE6000, v37, v38, "MessagesAffinityScorer override to .high because this a messaging task", v39, 2u);
    MEMORY[0x1B5E44758](v39, -1, -1);
  }

  swift_release();
  (*((void (**)(_BYTE *, uint64_t))v12 + 1))(v14, v50);
  return 3;
}

uint64_t specialized MessagesAffinityScorer.extractCommonMessageFromUsoParse(usoParse:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[24];
  uint64_t v15;

  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, v2, v3, "MessagesAffinityScorer Could not extract usoTask from parse", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }

    return 0;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v15)
  {
LABEL_29:
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "MessagesAffinityScorer Unrecognized task", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_send_common_Message();
  if (swift_dynamicCast())
    goto LABEL_5;
  type metadata accessor for UsoTask_share_common_Message();
  if (swift_dynamicCast())
    goto LABEL_5;
  type metadata accessor for UsoTask_unshare_common_Message();
  if (swift_dynamicCast())
    goto LABEL_5;
  type metadata accessor for UsoTask_reply_common_Message();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_update_common_Message();
    if (swift_dynamicCast()
      || (type metadata accessor for UsoTask_read_common_Message(), swift_dynamicCast())
      || (type metadata accessor for UsoTask_summarise_common_Message(), swift_dynamicCast())
      || (type metadata accessor for UsoTask_delete_common_Message(), swift_dynamicCast())
      || (type metadata accessor for UsoTask_unsend_common_Message(), swift_dynamicCast())
      || (type metadata accessor for UsoTask_request_common_Message(), swift_dynamicCast())
      || (type metadata accessor for UsoTask_checkExistence_common_Message(), swift_dynamicCast())
      || (type metadata accessor for UsoTask_noVerb_common_Message(), swift_dynamicCast()))
    {
LABEL_5:
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      goto LABEL_6;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    goto LABEL_29;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  v0 = v11;
  if (v11)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  v5 = swift_retain();
  MEMORY[0x1B5E4078C](&v12, v5);
LABEL_6:
  swift_release_n();
  swift_release();
  v0 = v12;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance AffinityScorerManager.DefaultAffinityScorer(uint64_t a1)
{
  uint64_t v1;

  return specialized AffinityScorerManager.DefaultAffinityScorer.score(input:environment:)(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t specialized AffinityScorerManager.DefaultAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;

  v3 = type metadata accessor for Parse();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (void **)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  if ((*(unsigned int (**)(void **, uint64_t))(v4 + 88))(v6, v3) == *MEMORY[0x1E0D9C5F8])
  {
    (*(void (**)(void **, uint64_t))(v4 + 96))(v6, v3);
    v7 = *v6;
    dispatch thunk of PommesResponse.primaryQueryConfidence()();
    if (v8 <= 0.5)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
      v14 = Logger.logObject.getter();
      v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1B4BE6000, v14, v15, "Detected low confidence pommes result", v16, 2u);
        MEMORY[0x1B5E44758](v16, -1, -1);
      }

      return 0;
    }
    else
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1B4BE6000, v10, v11, "Detected high confidence pommes result", v12, 2u);
        MEMORY[0x1B5E44758](v12, -1, -1);
      }

    }
  }
  else
  {
    (*(void (**)(void **, uint64_t))(v4 + 8))(v6, v3);
  }
  return a2;
}

uint64_t outlined destroy of ConversationHandlerLocator.ScoredHandler(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConversationHandlerLocator.ScoredHandler();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;

  v1 = v0;
  v2 = objc_allocWithZone((Class)type metadata accessor for SiriWillPromptMessage());
  v3 = SiriWillPromptMessage.init(build:)();
  if (v3)
  {
    v4 = v3;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B4BE6000, v6, v7, "Going to post SiriWillPromptMessage", v8, 2u);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 56));
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    v4 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v10, "Could not create SiriWillPromptMessage", v11, 2u);
      MEMORY[0x1B5E44758](v11, -1, -1);
    }
  }

}

uint64_t ServerFallbackCapableRequestProcessor.handleCancelRequestMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = ConversationRequestProcessor.handleCancelRequestMessage(_:)(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1360))(v2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 440))(result);
    return swift_release();
  }
  return result;
}

uint64_t ConversationRequestProcessor.handleCancelRequestMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD, _QWORD, _QWORD);
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD, _QWORD, _QWORD);
  char *v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD, uint64_t);
  char *v58;
  char v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  char v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint8_t *v81;
  unint64_t v82;
  void *v83;
  uint64_t v85;
  char *v86;
  char v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  id v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  void (*v102)(_QWORD, _QWORD, _QWORD);
  uint64_t v103;
  unint64_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[6];

  v2 = v1;
  v95 = type metadata accessor for RequestType();
  v92 = *(_QWORD *)(v95 - 8);
  v4 = MEMORY[0x1E0C80A78](v95);
  v94 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v93 = (char *)&v89 - v6;
  v7 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v90 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1E0C80A78](v96);
  v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v89 - v17;
  MEMORY[0x1E0C80A78](v16);
  v104 = (unint64_t *)((char *)&v89 - v19);
  v20 = type metadata accessor for InputOrigin();
  v101 = *(_QWORD *)(v20 - 8);
  v102 = (void (*)(_QWORD, _QWORD, _QWORD))v20;
  MEMORY[0x1E0C80A78](v20);
  v105 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  v24 = a1;
  v103 = v23;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  v27 = os_log_type_enabled(v25, v26);
  v98 = v24;
  v99 = v8;
  v97 = v11;
  v91 = v15;
  v100 = v18;
  if (v27)
  {
    v106 = v7;
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v28 = 138412290;
    v110[2] = (uint64_t)v24;
    v30 = v24;
    v7 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v29 = v24;

    _os_log_impl(&dword_1B4BE6000, v25, v26, "ConversationBridge handling message: %@", v28, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v28, -1, -1);

  }
  else
  {

  }
  v31 = (*(uint64_t (**)(void))(*v2 + 528))();
  v32 = (uint64_t)v104;
  v106 = v31;
  v34 = v101;
  v33 = v102;
  if (v31)
  {
    v35 = (unint64_t *)(v106 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v36 = 0;
    if (*v35 >> 62 == 1)
    {
      v36 = *v35 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
    }
    (*(void (**)(char *, _QWORD, _QWORD))(v34 + 104))(v105, *MEMORY[0x1E0D9E7D0], v33);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E7E0], MEMORY[0x1E0D9E7F8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v108 == v110[0] && v109 == v110[1])
    {
      swift_bridgeObjectRelease_n();
      v37 = (*(uint64_t (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v34 + 8))(v105, v33);
      v38 = (uint64_t)v97;
    }
    else
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37 = (*(uint64_t (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v34 + 8))(v105, v33);
      v38 = (uint64_t)v97;
      if ((v42 & 1) == 0)
        goto LABEL_26;
    }
    if (v36)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 520))(v37);
      v43 = v99;
    }
    else
    {
      v43 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56))(v32, 1, 1, v7);
    }
    v44 = v96;
    v45 = (uint64_t)v100;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v100, *MEMORY[0x1E0D9C968], v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v45, 0, 1, v7);
    v46 = v38 + *(int *)(v44 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?(v32, v38, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v45, v46, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    if (v47(v38, 1, v7) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      if (v47(v46, 1, v7) == 1)
      {
        v37 = outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        goto LABEL_26;
      }
    }
    else
    {
      v48 = (uint64_t)v91;
      outlined init with copy of ReferenceResolutionClientProtocol?(v38, (uint64_t)v91, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      if (v47(v46, 1, v7) != 1)
      {
        v85 = v99;
        v86 = v90;
        (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v90, v46, v7);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C978], MEMORY[0x1E0D9C988]);
        v87 = dispatch thunk of static Equatable.== infix(_:_:)();
        v88 = *(void (**)(char *, uint64_t))(v85 + 8);
        v88(v86, v7);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v100, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v104, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        v88((char *)v48, v7);
        v37 = outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        if ((v87 & 1) != 0)
        {
LABEL_26:
          v105 = (char *)v36;
          if (!v36)
          {
            (*(void (**)(uint64_t))(*v2 + 1096))(v37);
            v52 = v106 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
            swift_beginAccess();
            v53 = v92;
            v54 = *(void (**)(_QWORD, _QWORD, _QWORD))(v92 + 16);
            v104 = v35;
            v55 = v93;
            v56 = v95;
            v102 = v54;
            v54(v93, v52, v95);
            v57 = *(void (**)(char *, _QWORD, uint64_t))(v53 + 104);
            v58 = v94;
            v57(v94, *MEMORY[0x1E0D9E880], v56);
            lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
            v59 = dispatch thunk of static Equatable.== infix(_:_:)();
            v60 = *(void (**)(char *, uint64_t))(v53 + 8);
            v60(v58, v56);
            v35 = v104;
            v60(v55, v56);
            if ((v59 & 1) == 0)
              goto LABEL_29;
            v61 = v93;
            v62 = v95;
            v102(v93, v52, v95);
            v63 = v94;
            v57(v94, *MEMORY[0x1E0D9E890], v62);
            v64 = dispatch thunk of static Equatable.== infix(_:_:)();
            v60(v63, v62);
            v60(v61, v62);
            if ((v64 & 1) == 0)
            {
LABEL_29:
              v65 = Logger.logObject.getter();
              v66 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v65, v66))
              {
                v67 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v67 = 0;
                _os_log_impl(&dword_1B4BE6000, v65, v66, "Request cancelled before receiving ResultSelectedMessage", v67, 2u);
                MEMORY[0x1B5E44758](v67, -1, -1);
              }

            }
          }
          v68 = RequestMessageBase.requestId.getter();
          v70 = v69;
          type metadata accessor for CancelExecutionTurn();
          v71 = swift_allocObject();
          *(_QWORD *)(v71 + 16) = v68;
          *(_QWORD *)(v71 + 24) = v70;
          v72 = *(_QWORD *)((char *)v2
                          + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient
                          + 24);
          v73 = *(_QWORD *)((char *)v2
                          + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient
                          + 32);
          __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v72);
          (*(void (**)(uint64_t, _QWORD, _UNKNOWN **, uint64_t, uint64_t))(v73 + 40))(v71, *(_QWORD *)((char *)v2+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v72, v73);
          swift_retain_n();
          v74 = Logger.logObject.getter();
          v75 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v74, v75))
          {
            v76 = swift_slowAlloc();
            v104 = v35;
            v77 = (uint8_t *)v76;
            v78 = swift_slowAlloc();
            v110[0] = v78;
            *(_DWORD *)v77 = 136315138;
            v79 = CancelExecutionTurn.debugDescription.getter();
            v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v110);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B4BE6000, v74, v75, "Successfully sent: %s", v77, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v78, -1, -1);
            v81 = v77;
            v35 = v104;
            MEMORY[0x1B5E44758](v81, -1, -1);

          }
          else
          {

            swift_release_n();
          }
          v82 = *v35;
          v83 = (void *)v35[1];
          outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v35, v83);
          ConversationRequestProcessorTurnState.SpeechState.cancelAll(exceptResultCandidateId:)((Swift::String_optional)0);
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v82, v83);
          swift_release();
          swift_release();
          swift_release();
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*v2 + 376))(1, 0, 3);
        }
LABEL_25:
        v49 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
        v50 = v2[8];
        v51 = v2[9];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 176))(v50, v51, 2);
        v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 232))(5, v50, v51);
        goto LABEL_26;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v100, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v104, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v48, v7);
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
    goto LABEL_25;
  }
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v41 = 0;
    _os_log_impl(&dword_1B4BE6000, v39, v40, "Not sending CancelExecutionTurn to Execution since StartExecutionTurn was not sent either", v41, 2u);
    MEMORY[0x1B5E44758](v41, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*v2 + 376))(1, 0, 3);
}

uint64_t type metadata accessor for CancelExecutionTurn()
{
  return objc_opt_self();
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendCancelExecutionTurn(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t ConversationRuntimeClient.sendCancelExecutionTurn(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, void *, uint64_t);

  v8 = v3[3];
  v7 = v3[4];
  v9 = v3[5];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v11 = StaticString.description.getter();
  v13 = v12;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:);
  *(_QWORD *)(v14 + 24) = v10;
  *(_QWORD *)(v14 + 32) = "bridge(didReceiveCancelRequest:from:)";
  *(_QWORD *)(v14 + 40) = 37;
  *(_BYTE *)(v14 + 48) = 2;
  v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 208);
  swift_retain();
  v15(v11, v13, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v14);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t CancelExecutionTurn.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  _StringGuts.grow(_:)(27);
  v1 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v8 = v1;
  v2._object = (void *)0x80000001B4EF7D50;
  v2._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v2);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

uint64_t ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:)(v2, v3, v4, v5);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveCancelRequest:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveCancelRequest:from:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v8(a4);
}

uint64_t specialized ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[8] = a1;
  v2[9] = v1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2[10] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t specialized ConversationService.bridge(didReceiveCancelRequest:from:)()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t *v18;
  const char *v19;
  _QWORD *v20;

  v1 = *(_QWORD *)(v0 + 72);
  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 120);
  if ((v3 & 0xC0) != 0x80)
    goto LABEL_22;
  v4 = *(char **)(v1 + 112);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)&v4[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData];
  v7 = *(_QWORD *)&v4[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8];
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v6 == v8 && v7 == v9;
  if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_22;
  v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v11 = v6 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    swift_retain();
    v16 = Logger.logObject.getter();
    LOBYTE(v17) = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      v19 = "Got a CancelExecutionTurn, but the current turn's executionRequestId is empty. Will proceed with cancellation.";
LABEL_20:
      _os_log_impl(&dword_1B4BE6000, v16, (os_log_type_t)v17, v19, v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);

      outlined consume of ConversationService.State(v4, v3);
LABEL_22:
      *(_QWORD *)(v0 + 112) = static MessageBusActor.shared;
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v2, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
      swift_retain();
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 120) = v20;
      *v20 = v0;
      v20[1] = specialized ConversationService.bridge(didReceiveCancelRequest:from:);
      return withTaskGroup<A, B>(of:returning:isolation:body:)();
    }
LABEL_21:
    outlined consume of ConversationService.State(v4, v3);

    goto LABEL_22;
  }
  if ((v9 & 0x2000000000000000) != 0)
    v12 = HIBYTE(v9) & 0xF;
  else
    v12 = v8 & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (!v12)
  {
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      v19 = "Got a CancelExecutionTurn, but its executionRequestId is empty. Will proceed with cancellation.";
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  swift_release();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1B4BE6000, v13, v14, "Received CancelExecutionTurn for turn that is not currently executing. Will ignore.", v15, 2u);
    MEMORY[0x1B5E44758](v15, -1, -1);

    outlined consume of ConversationService.State(v4, v3);
  }
  else
  {
    outlined consume of ConversationService.State(v4, v3);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[9];
  v2 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = *(_QWORD *)(v1 + 216);
  v0[12] = v3;
  v6 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v3 + 216) + *(_QWORD *)(*(_QWORD *)v3 + 216));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[13] = v4;
  *v4 = v0;
  v4[1] = specialized ConversationService.bridge(didReceiveCancelRequest:from:);
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release();
  v2 = *(_QWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 96);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 64), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  v4 = *(unsigned __int8 *)(v1 + 120);
  if (v4 >> 6)
  {
    LOBYTE(v5) = v4 & 0x3F;
    if (v4 >> 6 != 1)
      LOBYTE(v5) = 0;
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 112);
  }
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(void **)(v6 + 112);
  *(_QWORD *)(v6 + 112) = v5 & 1;
  *(_BYTE *)(v6 + 120) = 0;
  outlined consume of ConversationService.State(v7, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncSerialQueue.wait()()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(os_unfair_lock_s **)(v1 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in AsyncSerialQueue.wait();
  *(_QWORD *)(v3 + 24) = v1;
  os_unfair_lock_lock(v2 + 4);
  (*(void (**)(uint64_t *__return_ptr))(v3 + 16))(&v7);
  v4 = v7;
  *(_QWORD *)(v0 + 24) = v7;
  os_unfair_lock_unlock(v2 + 4);
  swift_task_dealloc();
  if (!v4)
    return (*(uint64_t (**)(void))(v0 + 8))();
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v5;
  *v5 = v0;
  v5[1] = AsyncSerialQueue.wait();
  return Task<>.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.wait()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
  return swift_retain();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;

  v1 = v0[28];
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    result = Set.Iterator.init(_cocoa:)();
    v2 = v0[7];
    v40 = v0[8];
    v4 = v0[9];
    v5 = v0[10];
    v6 = v0[11];
  }
  else
  {
    v7 = -1 << *(_BYTE *)(v2 + 32);
    v40 = v2 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(v2 + 56);
    result = swift_bridgeObjectRetain();
    v5 = 0;
  }
  v41 = v0 + 12;
  v42 = v0;
  v37 = v0 + 26;
  v38 = v0 + 25;
  v39 = (unint64_t)(v4 + 64) >> 6;
  while (v2 < 0)
  {
    v13 = __CocoaSet.Iterator.next()();
    if (!v13)
      goto LABEL_38;
    *v37 = v13;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = *v38;
    swift_unknownObjectRelease();
    v12 = v5;
    v10 = v6;
    if (!v14)
      goto LABEL_38;
LABEL_30:
    v43 = v10;
    v44 = v12;
    v18 = v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v19 = swift_task_alloc();
    v20 = type metadata accessor for TaskPriority();
    v21 = *(_QWORD *)(v20 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = 0;
    v22[3] = 0;
    v22[4] = v14;
    v23 = swift_task_alloc();
    outlined init with copy of ReferenceResolutionClientProtocol?(v19, v23, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v20);
    swift_retain();
    if (v24 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v23, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
    }
    swift_task_dealloc();
    if (v22[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v25 = dispatch thunk of Actor.unownedExecutor.getter();
      v27 = v26;
      swift_unknownObjectRelease();
    }
    else
    {
      v25 = 0;
      v27 = 0;
    }
    v28 = *(_QWORD *)v42[27];
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:);
    *(_QWORD *)(v29 + 24) = v22;
    v30 = (_QWORD *)(v27 | v25);
    if (v27 | v25)
    {
      v30 = v41;
      *v41 = 0;
      v41[1] = 0;
      v42[14] = v25;
      v42[15] = v27;
    }
    v2 = v18;
    v42[22] = 1;
    v42[23] = v30;
    v42[24] = v28;
    swift_task_create();
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v19, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    result = swift_task_dealloc();
    v5 = v44;
    v6 = v43;
  }
  if (v6)
  {
    v10 = (v6 - 1) & v6;
    v11 = __clz(__rbit64(v6)) | (v5 << 6);
    v12 = v5;
    goto LABEL_29;
  }
  v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  if (v15 >= v39)
    goto LABEL_38;
  v16 = *(_QWORD *)(v40 + 8 * v15);
  v12 = v5 + 1;
  if (v16)
    goto LABEL_28;
  v12 = v5 + 2;
  if (v5 + 2 >= v39)
    goto LABEL_38;
  v16 = *(_QWORD *)(v40 + 8 * v12);
  if (v16)
    goto LABEL_28;
  v12 = v5 + 3;
  if (v5 + 3 >= v39)
    goto LABEL_38;
  v16 = *(_QWORD *)(v40 + 8 * v12);
  if (v16)
    goto LABEL_28;
  v12 = v5 + 4;
  if (v5 + 4 >= v39)
    goto LABEL_38;
  v16 = *(_QWORD *)(v40 + 8 * v12);
  if (v16)
  {
LABEL_28:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_29:
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    swift_retain();
    if (!v14)
      goto LABEL_38;
    goto LABEL_30;
  }
  v17 = v5 + 5;
  while (v39 != v17)
  {
    v16 = *(_QWORD *)(v40 + 8 * v17++);
    if (v16)
    {
      v12 = v17 - 1;
      goto LABEL_28;
    }
  }
LABEL_38:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  v42[30] = static MessageBusActor.shared;
  v42[31] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v31, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  if (__isPlatformVersionAtLeast(2, 18, 0, 0))
  {
    swift_retain();
    v32 = (_QWORD *)swift_task_alloc();
    v42[32] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<()>);
    *v32 = v42;
    v32[1] = closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:);
    return TaskGroup.awaitAllRemainingTasks(isolation:)();
  }
  else
  {
    v33 = v42[30];
    swift_retain();
    if (v33)
    {
      swift_getObjectType();
      v34 = dispatch thunk of Actor.unownedExecutor.getter();
      v36 = v35;
    }
    else
    {
      v34 = 0;
      v36 = 0;
    }
    v42[33] = v34;
    v42[34] = v36;
    return swift_task_switch();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  return swift_taskGroup_wait_next_throwing();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 280) = v0;
  if (!v0)
    *(_BYTE *)(v1 + 289) = *(_BYTE *)(v1 + 288);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v0 + 289) == 1)
  {
    swift_release();
  }
  else
  {
    if (*(_QWORD *)(v0 + 240))
    {
      swift_getObjectType();
      v1 = dispatch thunk of Actor.unownedExecutor.getter();
      v3 = v2;
    }
    else
    {
      v1 = 0;
      v3 = 0;
    }
    *(_QWORD *)(v0 + 264) = v1;
    *(_QWORD *)(v0 + 272) = v3;
  }
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[27] = a2;
  v3[28] = a3;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[29] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.cancel()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void protocol witness for CamBridge.cancel() in conformance CamBridgeImpl()
{
  CamBridgeImpl.cancel()();
}

Swift::Void __swiftcall CamBridgeImpl.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v18 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  if (one-time initialization token for executor != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1B4BE6000, v12, v13, "CamBridge: Cancel signal received. Clearing CamBridge State.", v14, 2u);
    MEMORY[0x1B5E44758](v14, -1, -1);
  }

  v15 = type metadata accessor for UUID();
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v10, 1, 1, v15);
  v16(v8, 1, 1, v15);
  v16(v5, 1, 1, v15);
  type metadata accessor for CamBridgeState();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v10, v17 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v8, v17 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v5, v17 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_beginAccess();
  *(_QWORD *)(v1 + 240) = v17;
  swift_retain();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  swift_release();
}

uint64_t CancelExecutionTurn.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t Siri_Nlu_External_UserParse.preferredUserDialogAct.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v50 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v47 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v51 = (char *)&v46 - v5;
  v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v46 = (char *)&v46 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v46 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v48 = (char *)&v46 - v17;
  v49 = v1;
  v18 = MEMORY[0x1B5E3FA6C](v16);
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v20 = v18 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v21 = *(_QWORD *)(v7 + 72);
    v22 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v22(v15, v20, v6);
      if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
      v20 += v21;
      if (!--v19)
        goto LABEL_5;
    }
    v24 = (uint64_t)v51;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v51, v15, v6);
    v23 = *(char **)(v7 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v23)(v24, 0, 1, v6);
  }
  else
  {
LABEL_5:
    v23 = *(char **)(v7 + 56);
    v24 = (uint64_t)v51;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v23)(v51, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v25(v24, 1, v6) != 1)
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    v35 = v48;
    v34(v48, v24, v6);
    v36 = v50;
    v34(v50, (uint64_t)v35, v6);
    v37 = v36;
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v23)(v37, 0, 1, v6);
  }
  v26 = outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v27 = MEMORY[0x1B5E3FA6C](v26);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v51 = v23;
    v29 = v27 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v30 = *(_QWORD *)(v7 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v31(v10, v29, v6);
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      v29 += v30;
      if (!--v28)
      {
        v32 = v50;
        v23 = v51;
        v33 = (uint64_t)v47;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v51)(v47, 1, 1, v6);
        goto LABEL_17;
      }
    }
    v33 = (uint64_t)v47;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v47, v10, v6);
    v38 = 0;
    v32 = v50;
    v23 = v51;
  }
  else
  {
    v38 = 1;
    v32 = v50;
    v33 = (uint64_t)v47;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v33, v38, 1, v6);
LABEL_17:
  swift_bridgeObjectRelease();
  if (v25(v33, 1, v6) != 1)
  {
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    v44 = v46;
    v43(v46, v33, v6);
    v43(v32, (uint64_t)v44, v6);
    v37 = v32;
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v23)(v37, 0, 1, v6);
  }
  v39 = outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v40 = MEMORY[0x1B5E3FA6C](v39);
  if (*(_QWORD *)(v40 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v32, v40 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v41 = v32;
    v42 = 0;
  }
  else
  {
    v41 = v32;
    v42 = 1;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v23)(v41, v42, 1, v6);
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized PlaybackControlsAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unsigned __int8 v21;
  uint64_t v23;

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for USOParse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v12 = 2;
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B4BE6000, v14, v15, "PlaybackControlsAffinityScorer Got unexpected parse", v16, 2u);
      MEMORY[0x1B5E44758](v16, -1, -1);

      return v12;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v8 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v8)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "PlaybackControlsAffinityScorer Could not extract usoTask from parse", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 2;
  }
  v9 = v8;
  v10 = specialized static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)();
  v11 = v10;
  if ((specialized PlaybackControlsAffinityScorer.controlsShouldSkip(usoTask:parseAttributes:)(v9, HIBYTE(v10) & 1) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    return 1;
  }
  else
  {
    v21 = specialized PlaybackControlsAffinityScorer.controlsShouldTakeAFirstPass(at:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (((v21 | v11) & 1) != 0)
      return 3;
    else
      return 2;
  }
}

uint64_t specialized static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  int v42;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int16 v54;

  v0 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Siri_Nlu_External_UserParse();
  v10 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v13);
  v52 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v15 = *(_QWORD *)(v49 - 8);
  v16 = MEMORY[0x1E0C80A78](v49);
  v45 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v53 = (char *)&v44 - v18;
  v54 = 0;
  v19 = USOParse.userParse.getter();
  v20 = MEMORY[0x1B5E3FA6C](v19);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22 = v20;
  v21(v12, v51);
  v23 = *(_QWORD *)(v22 + 16);
  v50 = v15;
  if (v23)
  {
    v51 = v1;
    v24 = v22;
    v25 = v22 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v26 = *(_QWORD *)(v7 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    v44 = v24;
    swift_bridgeObjectRetain();
    while (1)
    {
      v27(v9, v25, v6);
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v25 += v26;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        v28 = 1;
        v15 = v50;
        v1 = v51;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v29 = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v52, v9, v6);
    v28 = 0;
    v15 = v50;
    v1 = v51;
  }
  else
  {
    v28 = 1;
LABEL_7:
    v29 = (uint64_t)v52;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v29, v28, 1, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v29, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v29, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1B4BE6000, v31, v32, "PlaybackControlsAffinityScorer Could not extract userStatedTask", v33, 2u);
      MEMORY[0x1B5E44758](v33, -1, -1);
    }

  }
  else
  {
    v34 = v46;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v29, v6);
    v35 = v45;
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v48);
    v36 = v49;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v53, v35, v49);
    v37 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    v38 = *(_QWORD *)(v37 + 16);
    if (v38)
    {
      v39 = v37 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      v40 = *(_QWORD *)(v1 + 72);
      v41 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
      swift_bridgeObjectRetain();
      do
      {
        v41(v3, v39, v0);
        closure #2 in static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)((uint64_t)v3, &v54);
        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
        v39 += v40;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease_n();
      v15 = v50;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v53, v36);
  }
  if (HIBYTE(v54))
    v42 = 256;
  else
    v42 = 0;
  return v42 | v54;
}

void closure #2 in static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD v45[2];
  uint8_t *v46;
  uint64_t v47;
  os_log_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v53 = a2;
  v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v54 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v51 = (char *)v45 - v8;
  MEMORY[0x1E0C80A78](v7);
  v52 = (char *)v45 - v9;
  v10 = type metadata accessor for Google_Protobuf_StringValue();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v45 - v15;
  if (one-time initialization token for kSupportedIdentifierNamespaces != -1)
    swift_once();
  v17 = (_QWORD *)static PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces;
  swift_bridgeObjectRetain();
  Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
  v18 = Google_Protobuf_StringValue.value.getter();
  v55 = a1;
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v16, v10);
  LOBYTE(v18) = specialized Sequence<>.contains(_:)(v18, v20, v17);
  swift_bridgeObjectRelease();
  v22 = v55;
  swift_bridgeObjectRelease();
  v23 = v4;
  v24 = v3;
  if ((v18 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
    v50 = v23;
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v27 = v52;
    v26(v52, v22, v24);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    v49 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      v48 = v28;
      v30 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      v57 = v47;
      v46 = v30;
      *(_DWORD *)v30 = 136315138;
      v45[1] = v30 + 4;
      v26(v51, (uint64_t)v27, v24);
      v31 = String.init<A>(describing:)();
      v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v57);
      v22 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v27, v24);
      v33 = v48;
      v34 = v46;
      _os_log_impl(&dword_1B4BE6000, v48, (os_log_type_t)v49, "PlaybackControlsAffinityScorer Found matching identifier %s", v46, 0xCu);
      v35 = v47;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      MEMORY[0x1B5E44758](v34, -1, -1);

      v23 = v50;
    }
    else
    {
      v23 = v50;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v27, v24);

    }
    *v53 = 1;
  }
  v36 = v22;
  Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
  Google_Protobuf_StringValue.init(stringLiteral:)();
  v37 = static Google_Protobuf_StringValue.== infix(_:_:)();
  v21(v14, v10);
  v21(v16, v10);
  v38 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v54, v36, v24);
  if ((v37 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v38, v24);
    return;
  }
  if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x79616C70726961 && v39 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v38, v24);
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v38, v24);
    if ((v40 & 1) == 0)
      return;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.executor);
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_1B4BE6000, v42, v43, "PlaybackControlsAffinityScorer Task has \"AirPlay\" setting", v44, 2u);
    MEMORY[0x1B5E44758](v44, -1, -1);
  }

  v53[1] = 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized PlaybackControlsAffinityScorer.controlsShouldSkip(usoTask:parseAttributes:)(uint64_t a1, char a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE v14[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
  if (!v13)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_8:
    outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
    if (v13)
    {
      type metadata accessor for UsoTask_play_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_release();
        if (one-time initialization token for executor != -1)
          swift_once();
        v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
        v4 = Logger.logObject.getter();
        v5 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v4, v5))
          goto LABEL_23;
        v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v6 = 0;
        v7 = "PlaybackControlsAffinityScorer Task is play::common_MediaItem, controls should *NOT* take a first pass";
        goto LABEL_22;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
    if (v13)
    {
      type metadata accessor for UsoTask_noVerb_common_Setting();
      if (swift_dynamicCast())
      {
        swift_release();
        if ((a2 & 1) != 0)
        {
          if (one-time initialization token for executor != -1)
            swift_once();
          v9 = type metadata accessor for Logger();
          __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
          v4 = Logger.logObject.getter();
          v5 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v4, v5))
            goto LABEL_23;
          v6 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v6 = 0;
          v7 = "PlaybackControlsAffinityScorer Task is an \"AirPlay\" task, controls should *NOT* take a first pass";
          goto LABEL_22;
        }
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    v10 = 0;
    goto LABEL_26;
  }
  type metadata accessor for UsoTask_play_uso_NoEntity();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_8;
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v4, v5))
    goto LABEL_23;
  v6 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v6 = 0;
  v7 = "PlaybackControlsAffinityScorer Task is play::noEntity, controls should *NOT* take a first pass";
LABEL_22:
  _os_log_impl(&dword_1B4BE6000, v4, v5, v7, v6, 2u);
  MEMORY[0x1B5E44758](v6, -1, -1);
LABEL_23:

  v10 = 1;
LABEL_26:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v10;
}

uint64_t specialized PlaybackControlsAffinityScorer.controlsShouldTakeAFirstPass(at:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  _BYTE v5[24];
  uint64_t v6;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v6)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_restart_uso_NoEntity();
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B4BE6000, v1, v2, "PlaybackControlsAffinityScorer Task is repeat::noEntity, controls should take a first pass", v3, 2u);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }

  return 1;
}

uint64_t specialized HomeAutomationAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char *v74;
  os_log_type_t v75;
  uint8_t *v76;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  int v82;
  char *v83;
  _BOOL4 v84;
  _BOOL8 v85;
  uint8_t *v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v3 = type metadata accessor for IdentifierAppBundle();
  v95 = *(_QWORD *)(v3 - 8);
  v96 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for UsoEntitySpan();
  v97 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for USOParse();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Parse();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v15, v12) != *MEMORY[0x1E0D9C678])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1B4BE6000, v43, v44, "HomeAutomationAffinityScorer - [Default] Got unexpected parse", v45, 2u);
      MEMORY[0x1B5E44758](v45, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
  v16 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v16)
  {
    v47 = v9;
    if (one-time initialization token for executor != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v51 = 0;
      _os_log_impl(&dword_1B4BE6000, v49, v50, "HomeAutomationAffinityScorer - [Unsupported] Could not extract uso task", v51, 2u);
      MEMORY[0x1B5E44758](v51, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v8);
    return 0;
  }
  v17 = v16;
  v93 = v9;
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.homeKitProvider.getter();
  swift_release();
  v91 = dispatch thunk of HomeKitProvider.areHomesConfigured(refresh:)();
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  v89 = __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v90 = a2;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v88 = swift_slowAlloc();
    v99 = v88;
    v92 = v8;
    *(_DWORD *)v22 = 136315138;
    v86 = v22 + 4;
    v87 = v22;
    static SiriEnvironment.default.getter();
    SiriEnvironment.homeKitProvider.getter();
    swift_release();
    v23 = dispatch thunk of HomeKitProvider.debugInfo.getter();
    v25 = v24;
    swift_release();
    v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v99);
    v8 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v26 = v20;
    v27 = v87;
    _os_log_impl(&dword_1B4BE6000, v19, v26, "HomeAutomationAffinityScorer - Home configuration is %s", v87, 0xCu);
    v28 = v88;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v28, -1, -1);
    MEMORY[0x1B5E44758](v27, -1, -1);
  }

  v29 = specialized static AffinityScorerUtils.getEntitySpans(_:)();
  v30 = specialized HomeAutomationAffinityScorer.scorePauseOrResumeSetting(usoTask:usoEntitySpans:)(v17, v29);
  v31 = v94;
  if (v30 != 5)
  {
    v46 = v30;
    (*(void (**)(char *, uint64_t))(v93 + 8))(v11, v8);
    swift_release();
    swift_bridgeObjectRelease();
    return v46;
  }
  v88 = v17;
  v83 = v11;
  v85 = specialized HomeAutomationAffinityScorer.hasGeneralNamespaceMatch(_:)(v29);
  v32 = specialized HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:)(v29);
  v84 = specialized HomeAutomationAffinityScorer.hasNamespaceMatch(_:)(v29);
  LODWORD(v87) = specialized HomeAutomationAffinityScorer.hasHKExactMatch(_:)(v29);
  LODWORD(v86) = specialized HomeAutomationAffinityScorer.hasHKFuzzyMatch(_:)(v29);
  v33 = *(_QWORD *)(v29 + 16);
  if (v33)
  {
    v82 = v32;
    v92 = v8;
    v34 = v29 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    v35 = *(_QWORD *)(v97 + 72);
    v36 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
    v81 = v29;
    swift_bridgeObjectRetain();
    while (1)
    {
      v36(v7, v34, v31);
      v37 = v31;
      if (one-time initialization token for kAppBundleIdMatches != -1)
        swift_once();
      v38 = static HomeAutomationAffinityScorer.kAppBundleIdMatches;
      UsoEntitySpan.appBundleSemantic.getter();
      v39 = IdentifierAppBundle.rawValue.getter();
      v41 = v40;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v5, v96);
      LOBYTE(v39) = specialized Set.contains(_:)(v39, v41, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v7, v37);
      if ((v39 & 1) != 0)
        break;
      v31 = v37;
      v34 += v35;
      if (!--v33)
      {
        v53 = 0;
        goto LABEL_30;
      }
    }
    v53 = 0x10000000000;
LABEL_30:
    v29 = v81;
    swift_bridgeObjectRelease();
    v8 = v92;
    v52 = v88;
    LOBYTE(v32) = v82;
  }
  else
  {
    v53 = 0;
    v52 = v88;
  }
  v54 = (char)v87;
  v55 = (char)v86;
  v56 = v85;
  v57 = v84;
  v58 = specialized HomeAutomationAffinityScorer.hasPlaceHintMatch(_:)(v29);
  v59 = specialized HomeAutomationAffinityScorer.isiOSLockRequest(_:)(v29);
  swift_bridgeObjectRelease();
  v60 = 256;
  if ((v32 & 1) == 0)
    v60 = 0;
  v61 = v60 & 0xFFFFFFFFFFFFFFFELL | v56;
  v62 = 0x10000;
  if (!v57)
    v62 = 0;
  v63 = 0x1000000;
  if ((v54 & 1) == 0)
    v63 = 0;
  v64 = v61 | v62 | v63;
  v65 = 0x100000000;
  if ((v55 & 1) == 0)
    v65 = 0;
  v66 = 0x1000000000000;
  if (!v58)
    v66 = 0;
  v67 = v64 | v65 | v53 | v66;
  v68 = specialized HomeAutomationAffinityScorer.scoreSummariseSetting(usoTask:_:)(v52, v67);
  if (v68 != 5)
  {
    v46 = v68;
    (*(void (**)(char *, uint64_t))(v93 + 8))(v83, v8);
    swift_release();
    return v46;
  }
  if ((v91 & 1) == 0)
  {
    v69 = Logger.logObject.getter();
    if (((v58 | v32) & 1) != 0)
    {
      v70 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc();
        *(_DWORD *)v71 = 67109632;
        LODWORD(v99) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v71 + 8) = 1024;
        LODWORD(v99) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v71 + 14) = 1024;
        LODWORD(v99) = v32 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v69, v70, "HomeAutomationAffinityScorer - [Low]\nHome configured: %{BOOL}d &\n(placeHintGeneralMatch: %{BOOL}d || HASpanExactMatch: %{BOOL}d)", (uint8_t *)v71, 0x14u);
        MEMORY[0x1B5E44758](v71, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v93 + 8))(v83, v8);
      return 1;
    }
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v76 = 0;
      _os_log_impl(&dword_1B4BE6000, v69, v75, "HomeAutomationAffinityScorer - [Unsupported] No home configured.", v76, 2u);
      MEMORY[0x1B5E44758](v76, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v83, v8);
    return 0;
  }
  if ((specialized HomeAutomationAffinityScorer.isOverrideScore(_:_:_:)(v52, v67) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v93 + 8))(v83, v8);
    swift_release();
    return 4;
  }
  if (!(v54 & 1 | ((v59 & 1) == 0) | ((v55 | v32) | v58) & 1))
  {
    (*(void (**)(char *, uint64_t))(v93 + 8))(v83, v8);
    swift_release();
    return 1;
  }
  v72 = specialized HomeAutomationAffinityScorer.isHighScore(_:_:_:)(v52, v67);
  v73 = v52;
  v74 = v83;
  if ((v72 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v93 + 8))(v83, v8);
    swift_release();
    return 3;
  }
  if ((specialized HomeAutomationAffinityScorer.isDefaultScore(_:_:_:)(v73, v67) & 1) == 0)
  {
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v80 = 0;
      _os_log_impl(&dword_1B4BE6000, v78, v79, "HomeAutomationAffinityScorer - [Low] Found no HomeAutomation spans", v80, 2u);
      MEMORY[0x1B5E44758](v80, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v74, v8);
    return 1;
  }
  (*(void (**)(char *, uint64_t))(v93 + 8))(v74, v8);
  swift_release();
  return 2;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for UserID();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF90]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF98]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F160]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F170]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized EmergencyAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(char *, unint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void (*v100)(char *, unint64_t, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  _BOOL4 v118;
  uint64_t v119;
  uint8_t *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143[2];

  v0 = type metadata accessor for Google_Protobuf_StringValue();
  v131 = *(_QWORD *)(v0 - 8);
  v132 = v0;
  v1 = MEMORY[0x1E0C80A78](v0);
  v123 = (char *)&v121 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v130 = (char *)&v121 - v3;
  v141 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v133 = *(_QWORD *)(v141 - 8);
  v4 = MEMORY[0x1E0C80A78](v141);
  v124 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v140 = (char *)&v121 - v6;
  v7 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v127 = *(_QWORD *)(v7 - 8);
  v128 = v7;
  MEMORY[0x1E0C80A78](v7);
  v126 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserParse();
  v137 = *(_QWORD *)(v13 - 8);
  v138 = v13;
  MEMORY[0x1E0C80A78](v13);
  v136 = (char *)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v15);
  v135 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v134 = *(_QWORD *)(v129 - 8);
  v17 = MEMORY[0x1E0C80A78](v129);
  v125 = (char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v139 = (char *)&v121 - v19;
  v20 = type metadata accessor for USOParse();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Parse();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v121 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v25 + 88))(v27, v24) != *MEMORY[0x1E0D9C678])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v41, "EmergencyAffinityScorer Got unexpected parse", v42, 2u);
      MEMORY[0x1B5E44758](v42, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v25 + 96))(v27, v24);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v27, v20);
  v28 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v28)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_1B4BE6000, v44, v45, "EmergencyAffinityScorer Could not extract usoTask from parse", v46, 2u);
      MEMORY[0x1B5E44758](v46, -1, -1);
    }

    goto LABEL_27;
  }
  v29 = v28;
  v30 = v136;
  v122 = v23;
  v31 = USOParse.userParse.getter();
  v32 = MEMORY[0x1B5E3FA6C](v31);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v30, v138);
  v33 = *(_QWORD *)(v32 + 16);
  if (v33)
  {
    v121 = v29;
    v138 = v21;
    v34 = v20;
    v35 = v32 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v36 = *(_QWORD *)(v10 + 72);
    v37 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v37(v12, v35, v9);
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v35 += v36;
      if (!--v33)
      {
        swift_bridgeObjectRelease();
        v38 = 1;
        v20 = v34;
        v21 = v138;
        v29 = v121;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    v47 = (uint64_t)v135;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v135, v12, v9);
    v38 = 0;
    v20 = v34;
    v21 = v138;
    v29 = v121;
  }
  else
  {
    v38 = 1;
LABEL_19:
    v47 = (uint64_t)v135;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v47, v38, 1, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v47, 1, v9) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v47);
    v23 = v122;
    if (one-time initialization token for executor != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v51 = 0;
      _os_log_impl(&dword_1B4BE6000, v49, v50, "EmergencyAffinityScorer Could not extract userStatedTask", v51, 2u);
      MEMORY[0x1B5E44758](v51, -1, -1);
    }

    swift_release();
LABEL_27:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    return 2;
  }
  v53 = v126;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v47, v9);
  v54 = v125;
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v127 + 8))(v53, v128);
  v55 = v129;
  (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v139, v54, v129);
  if (UsoTask.baseEntityAsString.getter() == 0xD000000000000014 && v56 == 0x80000001B4EFBCC0)
  {
    swift_bridgeObjectRelease();
    v57 = v122;
LABEL_33:
    if (one-time initialization token for executor != -1)
      swift_once();
    v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.executor);
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v62 = 0;
      _os_log_impl(&dword_1B4BE6000, v60, v61, "EmergencyAffinityScorer Detected common_CrisisSupport entity", v62, 2u);
      MEMORY[0x1B5E44758](v62, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v134 + 8))(v139, v55);
    v63 = *(void (**)(char *, uint64_t))(v21 + 8);
    v64 = v57;
    v65 = v20;
    goto LABEL_38;
  }
  v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v57 = v122;
  if ((v58 & 1) != 0)
    goto LABEL_33;
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v66 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    v121 = v29;
    v68 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    v69 = *(_QWORD *)(v68 + 16);
    if (v69)
    {
      v137 = v20;
      v138 = v21;
      v70 = v68 + ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80));
      v71 = *(_QWORD *)(v133 + 72);
      v72 = *(void (**)(char *, unint64_t, uint64_t))(v133 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v72(v140, v70, v141);
        v73 = v130;
        Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
        v74 = Google_Protobuf_StringValue.value.getter();
        v76 = v75;
        (*(void (**)(char *, uint64_t))(v131 + 8))(v73, v132);
        if (v74 == 0xD000000000000012 && v76 == 0x80000001B4EFBCA0)
          break;
        v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v133 + 8))(v140, v141);
        if ((v77 & 1) != 0)
          goto LABEL_60;
        v70 += v71;
        if (!--v69)
        {
          swift_bridgeObjectRelease_n();
          v20 = v137;
          v21 = v138;
          v57 = v122;
          goto LABEL_51;
        }
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v140, v141);
LABEL_60:
      swift_bridgeObjectRelease_n();
      if (one-time initialization token for executor != -1)
        swift_once();
      v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.executor);
      v85 = Logger.logObject.getter();
      v86 = static os_log_type_t.debug.getter();
      v87 = os_log_type_enabled(v85, v86);
      v57 = v122;
      v88 = v138;
      if (v87)
      {
        v89 = (uint8_t *)swift_slowAlloc();
        v90 = swift_slowAlloc();
        v143[0] = v90;
        *(_DWORD *)v89 = 136315138;
        v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001B4EFBCA0, v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v85, v86, "EmergencyAffinityScorer Detected supported identifier: %s", v89, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v90, -1, -1);
        MEMORY[0x1B5E44758](v89, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v134 + 8))(v139, v129);
      v63 = *(void (**)(char *, uint64_t))(v88 + 8);
      goto LABEL_65;
    }
    swift_bridgeObjectRelease();
LABEL_51:
    v78 = v129;
    if (one-time initialization token for executor != -1)
      swift_once();
    v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)static Logger.executor);
    v80 = Logger.logObject.getter();
    v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v82 = 0;
      _os_log_impl(&dword_1B4BE6000, v80, v81, "EmergencyAffinityScorer No matching identifiers found", v82, 2u);
      MEMORY[0x1B5E44758](v82, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v134 + 8))(v139, v78);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v57, v20);
    return 0;
  }
  v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v67 & 1) != 0)
    goto LABEL_43;
  if (UsoTask.baseEntityAsString.getter() == 0x505F6E6F6D6D6F63 && v83 == 0xED00006E6F737265)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v92 = v129;
    if ((v91 & 1) == 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v106 = type metadata accessor for Logger();
      __swift_project_value_buffer(v106, (uint64_t)static Logger.executor);
      v107 = Logger.logObject.getter();
      v108 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v107, v108))
      {
        v109 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v109 = 0;
        _os_log_impl(&dword_1B4BE6000, v107, v108, "EmergencyAffinityScorer Didn't detect any supported entities", v109, 2u);
        MEMORY[0x1B5E44758](v109, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v134 + 8))(v139, v92);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v57, v20);
      return 2;
    }
  }
  v137 = v20;
  v93 = UsoTask.verbString.getter();
  v95 = specialized Sequence<>.contains(_:)(v93, v94, outlined read-only object #0 of EmergencyAffinityScorer.score(input:environment:));
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v96 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  v97 = *(_QWORD *)(v96 + 16);
  if (v97)
  {
    LODWORD(v136) = v95;
    v121 = v29;
    v138 = v21;
    v98 = v96 + ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80));
    v99 = *(_QWORD *)(v133 + 72);
    v100 = *(void (**)(char *, unint64_t, uint64_t))(v133 + 16);
    v140 = (char *)v96;
    swift_bridgeObjectRetain();
    v101 = v123;
    while (1)
    {
      v100(v124, v98, v141);
      Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
      v102 = Google_Protobuf_StringValue.value.getter();
      v104 = v103;
      (*(void (**)(char *, uint64_t))(v131 + 8))(v101, v132);
      if (v102 == 0xD000000000000015 && v104 == 0x80000001B4EF4A50)
        break;
      v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v124, v141);
      if ((v105 & 1) != 0)
        goto LABEL_81;
      v98 += v99;
      if (!--v97)
      {
        swift_bridgeObjectRelease_n();
        v57 = v122;
        v21 = v138;
        goto LABEL_86;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v124, v141);
LABEL_81:
    swift_bridgeObjectRelease_n();
    v57 = v122;
    v21 = v138;
    if ((v136 & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v110 = type metadata accessor for Logger();
      __swift_project_value_buffer(v110, (uint64_t)static Logger.executor);
      v111 = Logger.logObject.getter();
      v112 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v111, v112))
      {
        v113 = (uint8_t *)swift_slowAlloc();
        v114 = swift_slowAlloc();
        v143[0] = v114;
        *(_DWORD *)v113 = 136315138;
        v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001B4EF4A50, v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v111, v112, "EmergencyAffinityScorer Detected supported identifier: %s", v113, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v114, -1, -1);
        MEMORY[0x1B5E44758](v113, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v134 + 8))(v139, v129);
      v63 = *(void (**)(char *, uint64_t))(v21 + 8);
LABEL_65:
      v64 = v57;
      v65 = v137;
LABEL_38:
      v63(v64, v65);
      return 3;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_86:
  if (one-time initialization token for executor != -1)
    swift_once();
  v115 = type metadata accessor for Logger();
  __swift_project_value_buffer(v115, (uint64_t)static Logger.executor);
  v116 = Logger.logObject.getter();
  v117 = static os_log_type_t.debug.getter();
  v118 = os_log_type_enabled(v116, v117);
  v119 = v137;
  if (v118)
  {
    v120 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v120 = 0;
    _os_log_impl(&dword_1B4BE6000, v116, v117, "EmergencyAffinityScorer No matching identifiers found", v120, 2u);
    MEMORY[0x1B5E44758](v120, -1, -1);
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v134 + 8))(v139, v129);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v57, v119);
  return 0;
}

uint64_t specialized SettingsAffinityScorer.score(input:environment:)(uint64_t a1, void (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;

  v3 = type metadata accessor for USOParse();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Parse();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (void **)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  v11 = (*(uint64_t (**)(void **, unint64_t))(v8 + 88))(v10, v7);
  if (v11 == *MEMORY[0x1E0D9C5F8])
  {
    (*(void (**)(void **, unint64_t))(v8 + 96))(v10, v7);
    v12 = *v10;
    v7 = dispatch thunk of PommesResponse.experiences.getter();
    if (v7 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_4;
    }
    else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v7 & 0xC000000000000001) != 0)
      {
        v13 = (id)MEMORY[0x1B5E43B94](0, v7);
LABEL_7:
        v14 = v13;
        swift_bridgeObjectRelease();

        type metadata accessor for DeviceExpertExperience();
        v15 = swift_dynamicCastClass();

        if (v15)
          return 3;
        else
          return 2;
      }
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v13 = *(id *)(v7 + 32);
        goto LABEL_7;
      }
      __break(1u);
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();

    return 2;
  }
  if (v11 != *MEMORY[0x1E0D9C678])
  {
    if (one-time initialization token for executor == -1)
    {
LABEL_15:
      v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_1B4BE6000, v19, v20, "SettingsAffinityScorer Got unexpected parse", v21, 2u);
        MEMORY[0x1B5E44758](v21, -1, -1);
      }

      (*(void (**)(void **, unint64_t))(v8 + 8))(v10, v7);
      return 2;
    }
LABEL_24:
    swift_once();
    goto LABEL_15;
  }
  (*(void (**)(void **, unint64_t))(v8 + 96))(v10, v7);
  (*(void (**)(char *, void **, uint64_t))(v4 + 32))(v6, v10, v3);
  v17 = specialized SettingsAffinityScorer.scoreForEnvironmentOrAtmosphereIdentifiers(parse:environment:)();
  if (v17 == 5)
    v17 = specialized SettingsAffinityScorer.scoreForSupportedIdentifierMatches(parse:environment:)((uint64_t)v6, a2);
  v16 = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v16;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance SystemCommandsAffinityScorer(uint64_t a1)
{
  uint64_t *v1;

  return specialized SystemCommandsAffinityScorer.score(input:environment:)(a1, *v1, v1[1]);
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchLock(on:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v0 = type metadata accessor for Google_Protobuf_StringValue();
  v31 = *(_QWORD *)(v0 - 8);
  v32 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v29 - v8;
  v10 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v13 = *(_QWORD *)(v4 + 72);
  v29 = v10;
  v30 = v13;
  v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v14(v9, v12, v3);
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v17 = Google_Protobuf_StringValue.value.getter();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v2, v32);
    if (v17 == 0x74416D6574737973 && v19 == 0xEF65747562697274)
    {
      swift_bridgeObjectRelease();
      v14(v7, (unint64_t)v9, v3);
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v14(v7, (unint64_t)v9, v3);
      if ((v20 & 1) == 0)
      {
        v22 = *(void (**)(char *, uint64_t))(v4 + 8);
        v22(v7, v3);
        v22(v9, v3);
        goto LABEL_4;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 1801678700 && v21 == 0xE400000000000000)
      break;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v7, v3);
    v16(v9, v3);
    if ((v15 & 1) != 0)
      goto LABEL_15;
LABEL_4:
    v12 += v30;
    if (!--v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24(v7, v3);
  v24(v9, v3);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1B4BE6000, v26, v27, "SystemCommandsAffinityScorer | Found lock identifier", v28, 2u);
    MEMORY[0x1B5E44758](v28, -1, -1);
  }

  return 1;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance CarCommandsAffinityScorer(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return CarCommandsAffinityScorer.score(input:environment:)(a1, a2, *v2, v2[1]);
}

uint64_t CarCommandsAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (**v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  void (**v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(char *, unint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (**v125)(char *, uint64_t);
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[2];

  v126 = (char *)a4;
  v124 = a3;
  v112 = a2;
  v4 = type metadata accessor for Parse.DirectInvocation();
  v122 = *(_QWORD *)(v4 - 8);
  v123 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v121 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v125 = (void (**)(char *, uint64_t))((char *)&v111 - v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for NLIntent();
  v11 = *(void (***)(char *, char *, uint64_t))(v127 - 8);
  MEMORY[0x1E0C80A78](v127);
  v13 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for Siri_Nlu_External_UserParse();
  v14 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117);
  v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v17);
  v114 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v115 = *(_QWORD *)(v19 - 8);
  v116 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v113 = (char *)&v111 - v23;
  v120 = type metadata accessor for USOParse();
  v118 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120);
  v119 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Parse();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  v29 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v28, v25);
  if (v29 == *MEMORY[0x1E0D9C5E0])
  {
    (*(void (**)(char *, uint64_t))(v26 + 96))(v28, v25);
    v11[4](v13, v28, v127);
    NLIntent.domainNode.getter();
    v30 = type metadata accessor for NonTerminalIntentNode();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = (void (**)(char *, uint64_t))v11;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v10, 1, v30) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for NonTerminalIntentNode?);
      v33 = (uint64_t)v126;
LABEL_25:
      if (one-time initialization token for executor != -1)
        swift_once();
      v68 = type metadata accessor for Logger();
      __swift_project_value_buffer(v68, (uint64_t)static Logger.executor);
      swift_bridgeObjectRetain_n();
      v69 = Logger.logObject.getter();
      v70 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc();
        v72 = swift_slowAlloc();
        v129 = v33;
        v130[0] = v72;
        v126 = v13;
        *(_DWORD *)v71 = 136315138;
        v128 = v124;
        swift_bridgeObjectRetain();
        v73 = String.init<A>(describing:)();
        v128 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v69, v70, "%s received an NLv3 parse that does not contain a carCommands domain node. Returning score: .unsupported.", v71, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v72, -1, -1);
        MEMORY[0x1B5E44758](v71, -1, -1);

        v32[1](v126, v127);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v32[1](v13, v127);
      }
      return 0;
    }
    v47 = NonTerminalIntentNode.ontologyNodeName.getter();
    v49 = v48;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v30);
    v33 = (uint64_t)v126;
    if (v47 == 0x616D6D6F43726163 && v49 == 0xEB0000000073646ELL)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0)
        goto LABEL_25;
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v62 = Logger.logObject.getter();
    v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc();
      v65 = swift_slowAlloc();
      v129 = v33;
      v130[0] = v65;
      *(_DWORD *)v64 = 136315138;
      v128 = v124;
      swift_bridgeObjectRetain();
      v125 = v32;
      v66 = String.init<A>(describing:)();
      v128 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v62, v63, "%s received an NLv3 parse with a carCommands domain node. Returning score: .override.", v64, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v65, -1, -1);
      MEMORY[0x1B5E44758](v64, -1, -1);

      v125[1](v13, v127);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v32[1](v13, v127);
    }
    return 4;
  }
  if (v29 == *MEMORY[0x1E0D9C658])
  {
    (*(void (**)(char *, uint64_t))(v26 + 96))(v28, v25);
    v34 = v122;
    v35 = v123;
    v36 = v125;
    (*(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v122 + 32))(v125, v28, v123);
    if (one-time initialization token for executor != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
    v38 = v121;
    (*(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v34 + 16))(v121, v36, v35);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      v128 = v42;
      *(_DWORD *)v41 = 136315138;
      v43 = Parse.DirectInvocation.identifier.getter();
      v130[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v45 = *(void (**)(char *, uint64_t))(v34 + 8);
      v45(v38, v35);
      _os_log_impl(&dword_1B4BE6000, v39, v40, "CarCommandsAffinityScorer received a direct invocation: %s", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v42, -1, -1);
      MEMORY[0x1B5E44758](v41, -1, -1);

      v46 = v125;
    }
    else
    {

      v45 = *(void (**)(char *, uint64_t))(v34 + 8);
      v45(v38, v35);
      v46 = v36;
    }
    v45((char *)v46, v35);
    return 2;
  }
  if (v29 != *MEMORY[0x1E0D9C678])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v75 = type metadata accessor for Logger();
    __swift_project_value_buffer(v75, (uint64_t)static Logger.executor);
    v76 = Logger.logObject.getter();
    v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v78 = 0;
      _os_log_impl(&dword_1B4BE6000, v76, v77, "CarCommandsAffinityScorer got an unexpected parse. Returning score: .unsupported", v78, 2u);
      MEMORY[0x1B5E44758](v78, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v26 + 96))(v28, v25);
  (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v119, v28, v120);
  v50 = USOParse.userParse.getter();
  v51 = MEMORY[0x1B5E3FA6C](v50);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v117);
  v52 = *(_QWORD *)(v51 + 16);
  if (v52)
  {
    v53 = v115;
    v54 = v51 + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
    v55 = *(_QWORD *)(v115 + 72);
    v56 = *(void (**)(char *, unint64_t, uint64_t))(v115 + 16);
    swift_bridgeObjectRetain();
    v57 = v116;
    while (1)
    {
      v56(v22, v54, v57);
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v22, v57);
      v54 += v55;
      if (!--v52)
      {
        swift_bridgeObjectRelease();
        v58 = 1;
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    v79 = (uint64_t)v114;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v114, v22, v57);
    v58 = 0;
  }
  else
  {
    v58 = 1;
    v53 = v115;
    v57 = v116;
LABEL_38:
    v79 = (uint64_t)v114;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v79, v58, 1, v57);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v79, 1, v57) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)static Logger.executor);
    v81 = Logger.logObject.getter();
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v83 = 0;
      _os_log_impl(&dword_1B4BE6000, v81, v82, "CarCommandsAffinityScorer could not extract UserDialogAct. Returning score: .unsupported", v83, 2u);
      MEMORY[0x1B5E44758](v83, -1, -1);
    }

LABEL_52:
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
    return 0;
  }
  v84 = v113;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v113, v79, v57);
  v85 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v90 = v85;
  if (!(v85 >> 62))
  {
    if (*(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_56;
LABEL_82:
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1)
      swift_once();
    v86 = type metadata accessor for Logger();
    __swift_project_value_buffer(v86, (uint64_t)static Logger.executor);
    v87 = Logger.logObject.getter();
    v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v89 = 0;
      _os_log_impl(&dword_1B4BE6000, v87, v88, "CarCommandsAffinityScorer could not extract UsoTask. Returning score: .unsupported", v89, 2u);
      MEMORY[0x1B5E44758](v89, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v84, v57);
    goto LABEL_52;
  }
  swift_bridgeObjectRetain();
  v110 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v110)
    goto LABEL_82;
LABEL_56:
  if ((v90 & 0xC000000000000001) != 0)
  {
    v92 = MEMORY[0x1B5E43B94](0, v90);
    v91 = v124;
  }
  else
  {
    v91 = v124;
    if (!*(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_85;
    }
    v92 = *(_QWORD *)(v90 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v93 = (uint64_t)v126;
  if ((CarCommandsAffinityScorer.hasOverrideMatch(on:in:)(v92, v112, v91, (uint64_t)v126) & 1) != 0)
  {
    if (one-time initialization token for executor == -1)
    {
LABEL_61:
      v94 = type metadata accessor for Logger();
      __swift_project_value_buffer(v94, (uint64_t)static Logger.executor);
      v95 = Logger.logObject.getter();
      v96 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v95, v96))
      {
        v97 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v97 = 0;
        _os_log_impl(&dword_1B4BE6000, v95, v96, "CarCommandsAffinityScorer found a match with very high probability of belonging to CarCommmands. Returning score: .override.", v97, 2u);
        MEMORY[0x1B5E44758](v97, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v84, v57);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
      return 4;
    }
LABEL_85:
    swift_once();
    goto LABEL_61;
  }
  if (specialized CarCommandsAffinityScorer.hasHighProbabilityMatch(on:in:)(v92, v91, v93))
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.executor);
    v99 = Logger.logObject.getter();
    v100 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v101 = 0;
      _os_log_impl(&dword_1B4BE6000, v99, v100, "CarCommandsAffinityScorer found a match with high probability of belonging to CarCommands. Returning score: .high.", v101, 2u);
      MEMORY[0x1B5E44758](v101, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v84, v57);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
    return 3;
  }
  else if (CarCommandsAffinityScorer.hasMediumProbabilityMatch(on:)(v92, v91, v93))
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v102 = type metadata accessor for Logger();
    __swift_project_value_buffer(v102, (uint64_t)static Logger.executor);
    v103 = Logger.logObject.getter();
    v104 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v105 = 0;
      _os_log_impl(&dword_1B4BE6000, v103, v104, "CarCommandsAffinityScorer found a match with medium probability of belonging to CarCommands. Returning score: .default.", v105, 2u);
      MEMORY[0x1B5E44758](v105, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v84, v57);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
    return 2;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v106 = type metadata accessor for Logger();
    __swift_project_value_buffer(v106, (uint64_t)static Logger.executor);
    v107 = Logger.logObject.getter();
    v108 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v109 = 0;
      _os_log_impl(&dword_1B4BE6000, v107, v108, "CarCommandsAffinityScorer found no CarCommands identifiers. Returning score: .low", v109, 2u);
      MEMORY[0x1B5E44758](v109, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v84, v57);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
    return 1;
  }
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v13;
    v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String?));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (namespace: String, value: String?));
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v13;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v13;
      }
      v4 += 32;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = (_QWORD *)(v2 + 32 * v6);
      v7[4] = v9;
      v7[5] = v10;
      v7[6] = v11;
      v7[7] = v12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized PhoneAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  unsigned __int8 *v16;
  os_unfair_lock_s *v17;
  _BOOL4 v18;
  char v19;
  int v20;
  int v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int16 v30;
  int v31;
  unsigned __int8 *v32;
  os_unfair_lock_s *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  _QWORD v58[2];
  _BOOL4 v59;
  char *v60;
  _BOOL4 v61;

  v0 = type metadata accessor for USOParse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v60 = (char *)v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Parse();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v58 - v8;
  Input.parse.getter();
  v10 = Parse.hasCancelled.getter();
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v9, v3);
  if ((v10 & 1) == 0)
  {
    Input.parse.getter();
    if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v7, v3) == *MEMORY[0x1E0D9C678])
    {
      (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
      v26 = v1;
      v27 = v0;
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v60, v7, v0);
      v28 = specialized static AffinityScorerUtils.getTask(_:)();
      if (v28)
      {
        v29 = v28;
        v30 = UsoTask.parseResult.getter();
        v31 = v30;
        if ((v30 & 0x100) != 0)
          __asm { BR              X9 }
        v58[1] = v29;
        if (one-time initialization token for forceEnabled != -1)
          swift_once();
        v32 = (unsigned __int8 *)(static InCallFeatureFlags.forceEnabled + 16);
        v33 = (os_unfair_lock_s *)(static InCallFeatureFlags.forceEnabled + 20);
        os_unfair_lock_lock((os_unfair_lock_t)(static InCallFeatureFlags.forceEnabled + 20));
        closure #1 in InCallFeatureFlags.isEnabled.getter(v32, (uint64_t)&type metadata for InCallFeatureFlags, (uint64_t (*)(void))lazy protocol witness table accessor for type InCallFeatureFlags and conformance InCallFeatureFlags, &v61);
        os_unfair_lock_unlock(v33);
        v59 = v61;
        SiriEnvironment.callState.getter();
        v34 = dispatch thunk of CallStateEnvironmentProvider.callState.getter();
        swift_release();
        v35 = v34 & 7;
        if (one-time initialization token for executor != -1)
          swift_once();
        v36 = type metadata accessor for Logger();
        __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
        v37 = Logger.logObject.getter();
        v38 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v38))
        {
          v39 = swift_slowAlloc();
          *(_DWORD *)v39 = 67109376;
          v61 = v59;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v39 + 8) = 1024;
          v61 = v35 != 0;
          v26 = v1;
          v27 = v0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B4BE6000, v37, v38, "PhoneAffinityScorer SIC enabled=%{BOOL}d, callIsActive=%{BOOL}d", (uint8_t *)v39, 0xEu);
          MEMORY[0x1B5E44758](v39, -1, -1);
        }

        if (v35)
        {
          if ((v31 & 9) == 1 || !v31 || !v59)
          {
LABEL_50:
            v55 = Logger.logObject.getter();
            v56 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v55, v56))
            {
              v57 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v57 = 0;
              _os_log_impl(&dword_1B4BE6000, v55, v56, "PhoneAffinityScorer returning .unsupported.", v57, 2u);
              MEMORY[0x1B5E44758](v57, -1, -1);
            }

            swift_release();
            (*(void (**)(char *, uint64_t))(v26 + 8))(v60, v27);
            return 0;
          }
        }
        else if (!v59 || (v31 & 8) == 0)
        {
          goto LABEL_50;
        }
        v52 = Logger.logObject.getter();
        v53 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v52, v53))
        {
          v54 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v54 = 0;
          _os_log_impl(&dword_1B4BE6000, v52, v53, "PhoneAffinityScorer returning .override.", v54, 2u);
          MEMORY[0x1B5E44758](v54, -1, -1);
        }

        swift_release();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v60, v27);
        return 4;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v50 = 0;
        _os_log_impl(&dword_1B4BE6000, v48, v49, "PhoneAffinityScorer Could not extract usoTask from parse.", v50, 2u);
        MEMORY[0x1B5E44758](v50, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v60, v0);
    }
    else
    {
      v11(v7, v3);
      if (one-time initialization token for executor != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v25 = 2;
        v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v43 = 0;
        _os_log_impl(&dword_1B4BE6000, v41, v42, "PhoneAffinityScorer received unexpected parse.", v43, 2u);
        MEMORY[0x1B5E44758](v43, -1, -1);

        return v25;
      }

    }
    return 2;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1B4BE6000, v13, v14, "PhoneAffinityScorer received UserCancelled", v15, 2u);
    MEMORY[0x1B5E44758](v15, -1, -1);
  }

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v16 = (unsigned __int8 *)(static PhoneFeatureFlags.forceEnabled + 16);
  v17 = (os_unfair_lock_s *)(static PhoneFeatureFlags.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static PhoneFeatureFlags.forceEnabled + 20));
  closure #1 in InCallFeatureFlags.isEnabled.getter(v16, (uint64_t)&type metadata for PhoneFeatureFlags, (uint64_t (*)(void))lazy protocol witness table accessor for type PhoneFeatureFlags and conformance PhoneFeatureFlags, &v61);
  os_unfair_lock_unlock(v17);
  v18 = v61;
  SiriEnvironment.callState.getter();
  v19 = dispatch thunk of CallStateEnvironmentProvider.callState.getter();
  swift_release();
  if ((v19 & 7) != 0)
  {
    SiriEnvironment.callState.getter();
    v20 = dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter();
    swift_release();
    v21 = !v18 & v20;
    if (v18 && (v20 & 1) != 0)
    {
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_1B4BE6000, v22, v23, "PhoneAffinityScorer - detected an ongoing drop in call and feature is enabled, overriding score.", v24, 2u);
        MEMORY[0x1B5E44758](v24, -1, -1);
      }

      return 4;
    }
  }
  else
  {
    v21 = 0;
  }
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc();
    *(_DWORD *)v46 = 67109376;
    v61 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v46 + 8) = 1024;
    v61 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v44, v45, "PhoneAffinityScorer - cancelCallBellEnabled: %{BOOL}d, dropInCallIsActive: %{BOOL}d. Returning unsupported", (uint8_t *)v46, 0xEu);
    MEMORY[0x1B5E44758](v46, -1, -1);
  }

  return 0;
}

unint64_t lazy protocol witness table accessor for type PhoneFeatureFlags and conformance PhoneFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags;
  if (!lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for PhoneFeatureFlags, &type metadata for PhoneFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags;
  if (!lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for PhoneFeatureFlags, &type metadata for PhoneFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneFeatureFlags and conformance PhoneFeatureFlags);
  }
  return result;
}

uint64_t specialized static AlarmAffinityScorer.isCreateAlarmTaskWithRelativeOffset(task:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  _BYTE v7[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v7, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for UsoTask_create_common_Alarm();
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of Any?((uint64_t)v7, (uint64_t)v5);
  if (!v6)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  type metadata accessor for UsoTask_noVerb_common_Alarm();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
LABEL_7:
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v0 = swift_release();
  if (v5[0] && (v1 = MEMORY[0x1B5E401E0](v0), v2 = swift_release(), v1))
  {
    v3 = MEMORY[0x1B5E402B8](v2);
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v3)
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_release();
  }
  return 0;
}

Swift::Void __swiftcall ConversationService.ExecutionTaskContext.clear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[ConversationService]: Clearing ExecutionTaskContext", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v6;
  swift_bridgeObjectRelease();
}

uint64_t specialized static ServerFallbackCapableRequestProcessor.getDelegatedUDA(rcState:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v35 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v35 - v14;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 640))(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    v33 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v33(v15, v4, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_DelegatedUserDialogAct>);
    v34 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1B4EE3F50;
    v33((char *)(v18 + v34), v15, v5);
    return v18;
  }
  v40 = v5;
  v37 = v9;
  v16 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 280))(v16);
  v18 = MEMORY[0x1E0DEE9D8];
  if (!v17)
    return v18;
  v19 = specialized Sequence.compactMap<A>(_:)(v17);
  result = swift_bridgeObjectRelease();
  v41 = v18;
  v39 = *(_QWORD *)(v19 + 16);
  if (!v39)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return v18;
  }
  v21 = 0;
  v38 = "com.apple.search";
  v36 = 0x80000001B4EFE6C0;
  v22 = v37;
  v23 = v40;
  while (v21 < *(_QWORD *)(v19 + 16))
  {
    v24 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v25 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v12, v19 + v24 + v25 * v21, v23);
    if (Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter() == 0xD000000000000013 && v26 == v36)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      v28 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v28(v22, v12, v40);
      v29 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
        v29 = v41;
      }
      v31 = *(_QWORD *)(v29 + 16);
      v30 = *(_QWORD *)(v29 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v29 = v41;
      }
      *(_QWORD *)(v29 + 16) = v31 + 1;
      v32 = v29 + v24 + v31 * v25;
      v22 = v37;
      v23 = v40;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v28)(v32, v37, v40);
      v41 = v29;
      goto LABEL_6;
    }
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
      goto LABEL_12;
    v23 = v40;
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v40);
LABEL_6:
    if (v39 == ++v21)
    {
      v18 = v41;
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t ResultCandidateState.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_fallbackParse, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, a1);
}

uint64_t key path getter for Collection.first : [Siri_Nlu_External_UserDialogAct]@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v6 = *(_QWORD *)(v5 - 8);
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(a2, v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v5);
}

void ConversationRequestAwareBridgeBase.handleCandidateRequestMessageInternal(_:)(uint64_t a1)
{
  type metadata accessor for UUID();
  MEMORY[0x1E0C80A78]();
  __asm { BR              X10 }
}

void sub_1B4C7E3B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  void (*v65)(uint64_t, _QWORD);
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  id v74;
  uint64_t v75;

  v5 = (void *)(v0 & 0x1FFFFFFFFFFFFFFFLL);
  v6 = *(uint64_t (**)(void))(v2 + 376);
  v7 = v5;
  v8 = v6();
  if (v8)
  {
    v9 = v8;
    v11 = *(_QWORD *)(v8 + 64);
    v10 = *(_QWORD *)(v8 + 72);
    swift_bridgeObjectRetain();
    if (v11 == RequestMessageBase.requestId.getter() && v10 == v12)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
        swift_release();
        goto LABEL_8;
      }
    }
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v1 + 496))(v5, v9);

    swift_release();
    return;
  }
LABEL_8:
  v15 = RequestMessageBase.requestId.getter();
  v17 = v16;
  v18 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 400))();
  *(_QWORD *)(v4 - 128) = v15;
  *(_QWORD *)(v4 - 120) = v17;
  v19 = *(_QWORD *)(v2 + 320);
  MEMORY[0x1B5E4327C](v4 - 128, v18, MEMORY[0x1E0DEA968], v19, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v4 - 152);
  if (v20)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
    v22 = v7;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      *(_QWORD *)(v4 - 128) = v26;
      *(_QWORD *)(v4 - 176) = v7;
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)(v4 - 160) = v25 + 4;
      swift_getObjectType();
      v27 = _typeName(_:qualified:)();
      *(_QWORD *)(v4 - 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)(v4 - 128));
      v7 = *(id *)(v4 - 176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v23, v24, "Posting %s to existing candidate request processor, as the current request processor is for a different turn.", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v26, -1, -1);
      MEMORY[0x1B5E44758](v25, -1, -1);

    }
    else
    {

    }
    goto LABEL_31;
  }
  type metadata accessor for StartCandidateRequestMessage();
  if (swift_dynamicCastClass())
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
    *(_QWORD *)(v4 - 176) = v7;
    v31 = v7;
    *(_QWORD *)(v4 - 192) = v30;
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    v34 = os_log_type_enabled(v32, v33);
    *(_QWORD *)(v4 - 184) = v19;
    if (v34)
    {
      v35 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      *(_QWORD *)(v4 - 200) = v36;
      *(_QWORD *)(v4 - 128) = v36;
      *(_DWORD *)v35 = 136315394;
      swift_getObjectType();
      v37 = _typeName(_:qualified:)();
      *(_QWORD *)(v4 - 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)(v4 - 128));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      v39 = RequestMessageBase.requestId.getter();
      *(_QWORD *)(v4 - 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)(v4 - 128));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v32, v33, "Creating candidate request processor to handle %s<requestId=%s>, as we have not received a StartTurn for this request yet.", (uint8_t *)v35, 0x16u);
      v41 = *(_QWORD *)(v4 - 200);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v41, -1, -1);
      MEMORY[0x1B5E44758](v35, -1, -1);

    }
    else
    {

    }
    *(_QWORD *)(v4 - 152) = v5;
    type metadata accessor for RequestMessageBase();
    v50 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RootRequestAware);
    if (swift_dynamicCast())
    {
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v4 - 128), *(_QWORD *)(v4 - 104));
      v51 = dispatch thunk of RootRequestAware.rootRequestId.getter();
      v53 = v52;
      __swift_destroy_boxed_opaque_existential_1(v4 - 128);
    }
    else
    {
      *(_QWORD *)(v4 - 96) = 0;
      *(_OWORD *)(v4 - 128) = 0u;
      *(_OWORD *)(v4 - 112) = 0u;
      outlined destroy of ReferenceResolutionClientProtocol?(v4 - 128, &demangling cache variable for type metadata for RootRequestAware?);
      v51 = RequestMessageBase.requestId.getter();
      v53 = v54;
    }
    v55 = v50;
    v56 = MessageBase.assistantId.getter();
    v58 = v57;

    v59 = v55;
    SessionMessageBase.sessionId.getter();

    v60 = RequestMessageBase.requestId.getter();
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 472))(v56, v58, v3, v60, v61, v51, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 168) + 8))(v3, *(_QWORD *)(v4 - 160));
    if (v20)
    {
      swift_retain();
      v62 = RequestMessageBase.requestId.getter();
      *(_QWORD *)(v4 - 144) = v63;
      *(_QWORD *)(v4 - 136) = v20;
      *(_QWORD *)(v4 - 152) = v62;
      v64 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 416);
      swift_retain();
      v65 = (void (*)(uint64_t, _QWORD))v64(v4 - 128);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v65(v4 - 128, 0);
      swift_release();
      v7 = *(id *)(v4 - 176);
LABEL_31:
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v1 + 496))(v5, v20);
      swift_release();

      return;
    }
    v66 = v59;
    v67 = Logger.logObject.getter();
    v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = swift_slowAlloc();
      v70 = (_QWORD *)swift_slowAlloc();
      v71 = swift_slowAlloc();
      *(_QWORD *)(v4 - 160) = v71;
      *(_QWORD *)(v4 - 128) = v71;
      *(_DWORD *)v69 = 136315394;
      v72 = RequestMessageBase.requestId.getter();
      *(_QWORD *)(v4 - 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)(v4 - 128));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 12) = 2112;
      *(_QWORD *)(v4 - 152) = v5;
      v74 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v70 = v5;

      _os_log_impl(&dword_1B4BE6000, v67, v68, "Error creating candidate request processor for requestId: %s. Dropping %@.", (uint8_t *)v69, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v70, -1, -1);
      v75 = *(_QWORD *)(v4 - 160);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v75, -1, -1);
      MEMORY[0x1B5E44758](v69, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.conversationBridge);
    v43 = v7;
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      *(_QWORD *)(v4 - 128) = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = RequestMessageBase.requestId.getter();
      *(_QWORD *)(v4 - 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)(v4 - 128));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v44, v45, "Receiving candidate message with unknown requestId %s. We should have received a StartCandidateRequestMessage first. Ignoring.", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v47, -1, -1);
      MEMORY[0x1B5E44758](v46, -1, -1);

    }
    else
    {

    }
  }
}

void ServerFallbackCapableRequestProcessor.handleExecuteNLOnServerMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  unint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  char v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[3];

  v2 = v1;
  v4 = type metadata accessor for MessageSource();
  v68 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage) = a1;
  v8 = a1;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  v11 = v8;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  v14 = os_log_type_enabled(v12, v13);
  v69 = v11;
  if (v14)
  {
    v15 = swift_slowAlloc();
    v67 = v2;
    v16 = v15;
    v17 = (_QWORD *)swift_slowAlloc();
    v65 = swift_slowAlloc();
    v71 = (uint64_t)v11;
    v72[0] = v65;
    *(_DWORD *)v16 = 138412546;
    v64 = v4;
    v66 = v10;
    v18 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = a1;

    *(_WORD *)(v16 + 12) = 2080;
    MessageBase.source.getter();
    v19 = MessageSource.rawValue.getter();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v6, v64);
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v12, v13, "ExecutionBridge received message: %@ from: %s", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    v22 = v65;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    v23 = v16;
    v2 = v67;
    MEMORY[0x1B5E44758](v23, -1, -1);

  }
  else
  {

  }
  v24 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 528))();
  if (!v24)
  {
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1B4BE6000, v36, v37, "Received ExecuteNLOnServer while we are not in a turn. Ignoring.", v38, 2u);
      MEMORY[0x1B5E44758](v38, -1, -1);
    }
    goto LABEL_13;
  }
  v25 = v24;
  v26 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v28 = v27;
  v29 = (unint64_t *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v30 = *v29;
  v31 = (void *)v29[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v29, v31);
  v32 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v26, v28, v30, v31);
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v30, v31);
  if (!v32)
  {
    v40 = *v29;
    v39 = (void *)v29[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v40, v39);
    v32 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v26, v28, v40, v39);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v40, v39);
    if (v32)
    {
      swift_retain();
      goto LABEL_16;
    }
    swift_bridgeObjectRetain();
    v36 = Logger.logObject.getter();
    v60 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v60))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_32;
    }
    v61 = (uint8_t *)swift_slowAlloc();
    v62 = swift_slowAlloc();
    v71 = v62;
    *(_DWORD *)v61 = 136315138;
    swift_bridgeObjectRetain();
    v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v36, v60, "Received ExecuteNLOnServer before RC state is created for RC ID: %s .. this may happen if no ASR or text input message was received before this message is received from the message bus.", v61, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v62, -1, -1);
    MEMORY[0x1B5E44758](v61, -1, -1);
    swift_release();
LABEL_13:

    return;
  }
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_1B4BE6000, v33, v34, "TRPState is present, running ENOS in Medoc path", v35, 2u);
    MEMORY[0x1B5E44758](v35, -1, -1);
  }

LABEL_16:
  v41 = (uint64_t (*)(uint64_t))*((_QWORD *)v32->isa + 47);
  v42 = swift_retain();
  v43 = v41(v42);
  if (ResultCandidateProcessingStatus.rawValue.getter(v43) == 0x64656C65636E6163 && v44 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v46 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_retain_n();
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        v50 = swift_slowAlloc();
        v71 = v50;
        *(_DWORD *)v49 = 136315138;
        v67 = v2;
        v51 = (uint64_t (*)(uint64_t))*((_QWORD *)v32->isa + 100);
        v52 = swift_retain();
        v53 = v51(v52);
        v55 = v54;
        swift_release();
        v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v47, v48, "Received ExecuteNLOnServer when RC state: %s", v49, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v50, -1, -1);
        MEMORY[0x1B5E44758](v49, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      ServerFallbackCapableRequestProcessor.attemptServerFallback(executeNLOnServer:rcState:)(v69, v32);
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
  v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v56, v57))
  {

    swift_bridgeObjectRelease_n();
LABEL_31:
    swift_release();
    swift_release();
    goto LABEL_32;
  }
  v58 = (uint8_t *)swift_slowAlloc();
  v59 = swift_slowAlloc();
  v71 = v59;
  *(_DWORD *)v58 = 136315138;
  swift_bridgeObjectRetain();
  v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1B4BE6000, v56, v57, "RC ID:%s has already been canceled. Not handling ExecuteNLOnServerMessage any further.", v58, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v59, -1, -1);
  MEMORY[0x1B5E44758](v58, -1, -1);
  swift_release();
  swift_release();

LABEL_32:
  swift_release();
}

void ServerFallbackCapableRequestProcessor.attemptServerFallback(executeNLOnServer:rcState:)(void *a1, NSObject *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t isa;
  unint64_t v40;
  _BYTE *v41;
  _QWORD *v42;
  uint64_t (*v43)(uint64_t *);
  id v44;
  void (*v45)(uint64_t *, _QWORD);
  _QWORD *v46;
  _QWORD *v47;
  _BYTE *v48;
  void (*v49)(_BYTE *, uint64_t);
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  _QWORD *v54;
  uint8_t *v55;
  void (*v56)(uint64_t);
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void);
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _BYTE v75[12];
  int v76;
  id v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _QWORD *v83;
  NSObject *v84;
  uint64_t v85[4];
  uint64_t v86;
  uint64_t v87;

  v5 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v80 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v78 = &v75[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1E0C80A78](v7);
  v81 = &v75[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v79 = &v75[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = &v75[-v13];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v75[-v15];
  v17 = type metadata accessor for InputOrigin();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = &v75[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = (*(uint64_t (**)(uint64_t))(*v2 + 528))(v19);
  if (v22)
  {
    v77 = a1;
    v83 = v2;
    v84 = a2;
    v82 = v22;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v18 + 104))(v21, *MEMORY[0x1E0D9E7D0], v17);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E7E0], MEMORY[0x1E0D9E7F8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v85[0] == v86 && v85[1] == v87)
    {
      swift_bridgeObjectRelease_n();
      v23 = (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 8))(v21, v17);
      v24 = v84;
    }
    else
    {
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 8))(v21, v17);
      v24 = v84;
      if ((v28 & 1) == 0)
        goto LABEL_32;
    }
    if (((*((uint64_t (**)(uint64_t))v24->isa + 56))(v23) & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationBridge);
      swift_retain();
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        v38 = swift_slowAlloc();
        v85[0] = v38;
        *(_DWORD *)v37 = 136315138;
        isa = (uint64_t)v24[2].isa;
        v40 = (unint64_t)v84[3].isa;
        swift_bridgeObjectRetain();
        v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(isa, v40, v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        v24 = v84;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v35, v36, "Server fallback gated for RC %s in FF request until endpointer signal is available", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v38, -1, -1);
        MEMORY[0x1B5E44758](v37, -1, -1);

      }
      else
      {

        swift_release();
      }
      v42 = v83;
      (*((void (**)(uint64_t))v24->isa + 48))(10);
      v43 = *(uint64_t (**)(uint64_t *))(*v42 + 1448);
      v44 = v77;
      v45 = (void (*)(uint64_t *, _QWORD))v43(v85);
      v47 = v46;
      MEMORY[0x1B5E43498]();
      if (*(_QWORD *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v45(v85, 0);
      goto LABEL_46;
    }
    (*((void (**)(void))v24->isa + 65))();
    v29 = v80;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v80 + 104))(v14, *MEMORY[0x1E0D9C970], v5);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v14, 0, 1, v5);
    v30 = *(int *)(v7 + 48);
    v31 = v81;
    v32 = (uint64_t)&v81[v30];
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)v81, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, v32, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
    if (v33((uint64_t)v31, 1, v5) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      if (v33(v32, 1, v5) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v31, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
LABEL_27:
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v50 = type metadata accessor for Logger();
        __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationBridge);
        v51 = Logger.logObject.getter();
        v52 = static os_log_type_t.debug.getter();
        v53 = os_log_type_enabled(v51, v52);
        v54 = v83;
        if (v53)
        {
          v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v55 = 0;
          _os_log_impl(&dword_1B4BE6000, v51, v52, "SDSD decision was 'mitigated', not sending ENOS command to server. Setting rcState to serverFallbackFinished and sending CommitResultCandidateId", v55, 2u);
          MEMORY[0x1B5E44758](v55, -1, -1);
        }

        (*((void (**)(uint64_t))v24->isa + 48))(11);
        specialized static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(1, v54[12], v54[13], (uint64_t)v54 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v54[8], v54[9], v54 + 3);
        (*(void (**))(*v54 + 1040))(v24);
        goto LABEL_46;
      }
    }
    else
    {
      v41 = v79;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v31, (uint64_t)v79, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      if (v33(v32, 1, v5) != 1)
      {
        v48 = v78;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v29 + 32))(v78, v32, v5);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C978], MEMORY[0x1E0D9C988]);
        v76 = dispatch thunk of static Equatable.== infix(_:_:)();
        v49 = *(void (**)(_BYTE *, uint64_t))(v29 + 8);
        v49(v48, v5);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        v49(v41, v5);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v31, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        if ((v76 & 1) != 0)
          goto LABEL_27;
LABEL_32:
        v56 = (void (*)(uint64_t))*((_QWORD *)v24->isa + 48);
        v56(9);
        (*((void (**)(uint64_t))v24->isa + 75))(1);
        v57 = v83;
        ServerFallbackCapableRequestProcessor.makePreExecutionRules(_:)(v24);
        v58 = (*(uint64_t (**)(void))(**(_QWORD **)((char *)v57
                                                 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker)
                                   + 88))();
        (*((void (**)(_QWORD))v24->isa + 60))(BYTE1(v58));
        v59 = (*((uint64_t (**)(uint64_t))v24->isa + 63))(v58);
        v60 = (uint64_t (*)(void))*((_QWORD *)v24->isa + 59);
        v61 = ((uint64_t (*)(uint64_t))v60)(v59);
        if (((*(uint64_t (**)(uint64_t))(*v57 + 1488))(v61) & 1) != 0)
        {
          if (one-time initialization token for conversationBridge != -1)
            swift_once();
          v62 = type metadata accessor for Logger();
          __swift_project_value_buffer(v62, (uint64_t)static Logger.conversationBridge);
          swift_retain_n();
          v63 = Logger.logObject.getter();
          v64 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v63, v64))
          {
            v65 = (uint8_t *)swift_slowAlloc();
            v66 = swift_slowAlloc();
            v85[0] = v66;
            *(_DWORD *)v65 = 136315138;
            v67 = v60();
            v68 = PreExecutionDecision.rawValue.getter(v67);
            v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v85);
            v24 = v84;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B4BE6000, v63, v64, "Stopping server fallback because of preExecutionDecision %s", v65, 0xCu);
            swift_arrayDestroy();
            v70 = v66;
            v57 = v83;
            MEMORY[0x1B5E44758](v70, -1, -1);
            MEMORY[0x1B5E44758](v65, -1, -1);

          }
          else
          {

            swift_release_n();
          }
          v73 = ((uint64_t (*)(uint64_t))v56)(11);
          if (((*((uint64_t (**)(uint64_t))v24->isa + 56))(v73) & 1) != 0)
            (*(void (**))(*v57 + 1040))(v24);
          goto LABEL_45;
        }
        v71 = (*((uint64_t (**)(void))v24->isa + 47))();
        if (ResultCandidateProcessingStatus.rawValue.getter(v71) == 0xD000000000000018 && v72 == 0x80000001B4EF52F0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v74 & 1) == 0)
          {
LABEL_45:
            swift_release();
LABEL_46:
            swift_release();
            return;
          }
        }
        ServerFallbackCapableRequestProcessor.sendExecuteNLOnServerCommand(executeNLOnServer:rcState:turn:)((uint64_t)v77, v24, v82);
        goto LABEL_45;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v41, v5);
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v31, &demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
    goto LABEL_32;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  v84 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v84, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1B4BE6000, v84, v26, "Received ExecuteNLOnServer while we are not in a turn. Ignoring.", v27, 2u);
    MEMORY[0x1B5E44758](v27, -1, -1);
  }

}

uint64_t ResultCandidateState.serverFallback.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallback);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.makePreExecutionRules(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;

  if ((*(unsigned __int8 (**)(void))(*(_QWORD *)v1 + 1408))() == 2)
  {
    v3 = specialized static HALUtils.isUserOnPhoneCall(_:_:)(*(void **)(v1 + 16), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1416))(v3);
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v31 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = *(uint64_t (**)(uint64_t))(*a1 + 800);
    v10 = swift_retain();
    v11 = v9(v10);
    v13 = v12;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Constructing PreExecutionRules for RC: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    v14 = swift_release_n();
  }
  v15 = *(uint64_t (**)(uint64_t))(*a1 + 448);
  if ((v15(v14) & 1) != 0)
    v16 = ServerFallbackCapableRequestProcessor.makePreExecutionRulesAfterRCSelection(_:)((uint64_t)a1);
  else
    v16 = specialized ServerFallbackCapableRequestProcessor.makePreExecutionRulesBeforeRCSelection(_:)();
  v17 = v16;
  swift_retain_n();
  swift_retain_n();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    v31 = v30;
    *(_DWORD *)v20 = 136315650;
    v21 = a1[2];
    v22 = a1[3];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v23 = swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 1024;
    v15(v23);
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v20 + 18) = 2080;
    v24 = *(_QWORD *)(v17 + 16);
    swift_bridgeObjectRetain();
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExecutionRule);
    v26 = MEMORY[0x1B5E434D4](v24, v25);
    v28 = v27;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v18, v19, "[ServerFallback] Built following rules for [RC ID=%s, selected=%{BOOL}d] : %s", (uint8_t *)v20, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v30, -1, -1);
    MEMORY[0x1B5E44758](v20, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  return v17;
}

uint64_t ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall);
  swift_beginAccess();
  return *v1;
}

uint64_t specialized static HALUtils.isUserOnPhoneCall(_:_:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  dispatch_semaphore_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v32 = a3;
  v5 = type metadata accessor for OSSignpostID();
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  MEMORY[0x1E0C80A78](v5);
  v29 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v28 - v12;
  v14 = swift_allocObject();
  *(_BYTE *)(v14 + 16) = 2;
  v15 = dispatch_semaphore_create(0);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v14;
  *(_QWORD *)(v16 + 24) = v15;
  swift_retain();
  v17 = v15;
  specialized static HALUtils.isUserOnPhoneCall(_:_:completion:)(a1, a2, v32, (uint64_t)partial apply for closure #1 in static HALUtils.isUserOnPhoneCall(_:_:), v16);
  swift_release();
  static DispatchTime.now()();
  if (one-time initialization token for phoneCallStateQueryTimeoutInMillis != -1)
    swift_once();
  v18 = type metadata accessor for DispatchTimeInterval();
  v19 = __swift_project_value_buffer(v18, (uint64_t)static HALUtils.phoneCallStateQueryTimeoutInMillis);
  MEMORY[0x1B5E431A4](v11, v19);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  MEMORY[0x1B5E43894](v13);
  v20(v13, v7);
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Timed out fetching phoneCallState.", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

    static os_signpost_type_t.event.getter();
    if (one-time initialization token for executor != -1)
      swift_once();
    v25 = v29;
    static OSSignpostID.exclusive.getter();
    v26 = 2;
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v31);
    swift_release();

  }
  else
  {

    swift_beginAccess();
    v26 = *(unsigned __int8 *)(v14 + 16);
    swift_release();
  }
  return v26;
}

uint64_t specialized static HALUtils.isUserOnPhoneCall(_:_:completion:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  Class isa;
  void *v32;
  void *v33;
  _QWORD v35[2];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t aBlock[6];

  v37 = a4;
  v38 = a5;
  v39 = a2;
  v7 = type metadata accessor for OSSignpostID();
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  v8 = *(_QWORD *)(v40 + 64);
  v9 = MEMORY[0x1E0C80A78](v7);
  v36 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v35 - v10;
  if (one-time initialization token for executor != -1)
    swift_once();
  v12 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136315138;
    swift_bridgeObjectRetain();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, a3, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Fetching isUserOnPhoneCall status for requestId: %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    MEMORY[0x1B5E44758](v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(inited + 40) = v19;
    swift_unknownObjectRetain();
    v35[1] = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    v20 = v40;
    v21 = v41;
    v22 = v36;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v36, v11, v41);
    v23 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v24 = (v8 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v26 + v23, v22, v21);
    v27 = (_QWORD *)(v26 + v24);
    v29 = v38;
    v28 = v39;
    *v27 = v39;
    v27[1] = a3;
    v30 = (_QWORD *)(v26 + v25);
    *v30 = v37;
    v30[1] = v29;
    swift_bridgeObjectRetain();
    swift_retain();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v32 = (void *)MEMORY[0x1B5E432E8](v28, a3);
    aBlock[4] = (uint64_t)partial apply for closure #1 in static HALUtils.isUserOnPhoneCall(_:_:completion:);
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_13;
    v33 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_, isa, v32, 0, v33);
    _Block_release(v33);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

  }
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v11, v41);
}

uint64_t partial apply for closure #1 in static HALUtils.isUserOnPhoneCall(_:_:completion:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OSSignpostID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static HALUtils.isUserOnPhoneCall(_:_:completion:)(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(uint64_t (**)(BOOL))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t closure #1 in static HALUtils.isUserOnPhoneCall(_:_:completion:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(BOOL))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  id v20;
  id v21;
  unsigned __int8 v22;
  uint64_t v23;
  _BOOL4 v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31[3];
  uint64_t v32;
  BOOL v33;

  if (!a1)
    goto LABEL_17;
  v9 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!(a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_4;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    v29 = 0u;
    v30 = 0u;
    goto LABEL_18;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v12 = (id)MEMORY[0x1B5E43B94](0, a1);
  }
  else
  {
    if (!*(_QWORD *)(v9 + 16))
    {
      __break(1u);
      return result;
    }
    v12 = *(id *)(a1 + 32);
  }
  v13 = v12;
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v13, sel_serializedContextByKey);

  if (!v14)
    goto LABEL_17;
  v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v15 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17), (v19 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v15 + 56) + 32 * v18, (uint64_t)&v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v30 + 1))
    {
      outlined init with take of Any(&v29, v31);
      v20 = objc_allocWithZone(MEMORY[0x1E0CFE848]);
      __swift_project_boxed_opaque_existential_1(v31, v32);
      v21 = objc_msgSend(v20, sel_initWithSerializedBackingStore_, _bridgeAnythingToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      if ((objc_msgSend(v21, sel_callState) & 1) != 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);

        v33 = 1;
      }
      else
      {
        v22 = objc_msgSend(v21, sel_callState);

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
        v33 = (v22 & 2) != 0;
      }
      goto LABEL_19;
    }
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_18:
  outlined destroy of Any?((uint64_t)&v29);
  v33 = 0;
LABEL_19:
  static os_signpost_type_t.end.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  v24 = v33;
  swift_bridgeObjectRetain_n();
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v31[0] = v28;
    *(_DWORD *)v27 = 67109378;
    LODWORD(v29) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 8) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v25, v26, "Retrieved isUserOnPhoneCall status: %{BOOL}d for requestId: %s", (uint8_t *)v27, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v28, -1, -1);
    MEMORY[0x1B5E44758](v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  return a5(v33);
}

Swift::Int partial apply for closure #1 in static HALUtils.isUserOnPhoneCall(_:_:)(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  *(_BYTE *)(v3 + 16) = a1;
  return OS_dispatch_semaphore.signal()();
}

uint64_t ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.makePreExecutionRulesAfterRCSelection(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _UNKNOWN **v43;
  _QWORD *v44;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SiriInCallFeatureFlag();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1408))(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0D98458], v7);
  v13 = SiriInCallFeatureFlag.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v14 = type metadata accessor for HangUpRule();
  v15 = (_BYTE *)swift_allocObject();
  v15[16] = 0;
  v15[17] = v12;
  v15[18] = v13 & 1;
  swift_beginAccess();
  v16 = v44;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  v18 = v16[2];
  v17 = v16[3];
  if (v18 >= v17 >> 1)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
  v42 = v14;
  v43 = &protocol witness table for HangUpRule;
  *(_QWORD *)&v41 = v15;
  v16[2] = v18 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v41, (uint64_t)&v16[5 * v18 + 4]);
  v44 = v16;
  swift_endAccess();
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider);
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider);
  v21 = *(void **)(v2 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage);
  if (v21)
  {
    swift_retain();
    v22 = v21;
    swift_retain();
    ExecuteNLOnServerMessageBase.fallbackReason.getter();

    v23 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v6, 0, 1, v23);
  }
  else
  {
    v24 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 1, 1, v24);
    swift_retain();
    swift_retain();
  }
  v25 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v26 = type metadata accessor for OfflineServerFallbackRule();
  v27 = swift_allocObject();
  v28 = (_QWORD *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  v28[3] = type metadata accessor for NSProcessInfo();
  v28[4] = &protocol witness table for NSProcessInfo;
  *v28 = v25;
  *(_BYTE *)(v27 + 16) = 5;
  *(_QWORD *)(v27 + 24) = v19;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v6, v27 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  *(_QWORD *)(v27 + 32) = v20;
  swift_beginAccess();
  v29 = v44;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
  v31 = v29[2];
  v30 = v29[3];
  if (v31 >= v30 >> 1)
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
  v42 = v26;
  v43 = &protocol witness table for OfflineServerFallbackRule;
  *(_QWORD *)&v41 = v27;
  v29[2] = v31 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v41, (uint64_t)&v29[5 * v31 + 4]);
  v44 = v29;
  v32 = swift_endAccess();
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 568))(v32);
  v34 = type metadata accessor for ServerFTMRule();
  v35 = swift_allocObject();
  *(_BYTE *)(v35 + 16) = 3;
  *(_BYTE *)(v35 + 17) = v33 & 1;
  swift_beginAccess();
  v36 = v44;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
  v38 = v36[2];
  v37 = v36[3];
  if (v38 >= v37 >> 1)
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v36);
  v42 = v34;
  v43 = &protocol witness table for ServerFTMRule;
  *(_QWORD *)&v41 = v35;
  v36[2] = v38 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v41, (uint64_t)&v36[5 * v38 + 4]);
  swift_endAccess();
  type metadata accessor for CompositePreExecutionRules();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v36;
  return result;
}

uint64_t type metadata accessor for CompositePreExecutionRules.Builder()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HangUpRule()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for OfflineServerFallbackRule()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OfflineServerFallbackRule;
  if (!type metadata singleton initialization cache for OfflineServerFallbackRule)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t type metadata accessor for NSProcessInfo()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSProcessInfo;
  if (!lazy cache variable for type metadata for NSProcessInfo)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSProcessInfo);
  }
  return result;
}

uint64_t ResultCandidateState.overrideFTMAsPerServer.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_overrideFTMAsPerServer);
  swift_beginAccess();
  return *v1;
}

uint64_t type metadata accessor for ServerFTMRule()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CompositePreExecutionRules()
{
  return objc_opt_self();
}

uint64_t PreExecutionDecisionMaker.evaluate(rules:)(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Evaluating Pre-Execution Decision..", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v20 = 11;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    outlined init with copy of ReferenceResolutionClientProtocol(v6 + 32, (uint64_t)v17);
    v7 = v18;
    v8 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    v9 = (char *)&loc_1B4C81B14
       + 4 * asc_1B4EECE20[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8)];
    __asm { BR              X9 }
  }
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v17[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = PreExecutionDecision.rawValue.getter(0xBu);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "Pre-Execution Decision was evaluated as: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  swift_beginAccess();
  return (v20 << 8) | 7u;
}

uint64_t protocol witness for PreExecutionRule.evaluate() in conformance HangUpRule()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

SiriKitRuntime::PreExecutionDecision __swiftcall HangUpRule.evaluate()()
{
  uint64_t v0;
  int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if ((*(_BYTE *)(v0 + 18) & 1) != 0)
    return 11;
  v2 = *(unsigned __int8 *)(v0 + 17);
  if (v2 == 2)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "PhoneCallState is nil for HangUpRule. This should never happen! Failing request for privacy reasons.", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }

    return 9;
  }
  else if ((v2 & 1) != 0)
  {
    return 0;
  }
  else
  {
    return 11;
  }
}

uint64_t protocol witness for PreExecutionRule.evaluate() in conformance OfflineServerFallbackRule()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

SiriKitRuntime::PreExecutionDecision __swiftcall OfflineServerFallbackRule.evaluate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((dispatch thunk of NetworkAvailability.isAvailable.getter() & 1) != 0)
    return 11;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))() & 1) != 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v24 = v9;
      *(_DWORD *)v8 = 136315138;
      outlined init with copy of ServerFallbackReason?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, (uint64_t)v3);
      v10 = type metadata accessor for ServerFallbackReason();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v3, 1, v10) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for ServerFallbackReason?);
        v12 = 0x80000001B4EFE700;
        v13 = 0xD000000000000026;
      }
      else
      {
        v13 = ServerFallbackReason.rawValue.getter();
        v12 = v22;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v3, v10);
      }
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v6, v7, "Device is offline and attempting to fallback to the server because of an error: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return 6;
  }
  else
  {
    v14 = dispatch thunk of NetworkAvailability.isInAirplaneMode.getter();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      *(_DWORD *)v18 = 136315138;
      v24 = v19;
      if ((v14 & 1) != 0)
        v20 = 0x64656C62616E65;
      else
        v20 = 0x64656C6261736964;
      if ((v14 & 1) != 0)
        v21 = 0xE700000000000000;
      else
        v21 = 0xE800000000000000;
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v16, v17, "Device is offline with airplane mode %s. Rejecting server fallback.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v19, -1, -1);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

    if ((v14 & 1) != 0)
      return 5;
    else
      return 4;
  }
}

SiriKitRuntime::PreExecutionDecision __swiftcall ServerFTMRule.evaluate()()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 17))
    return 3;
  else
    return 11;
}

Swift::Bool __swiftcall ServerFallbackCapableRequestProcessor.shouldNotProceedWithServerFallback(preExecutionDecision:)(SiriKitRuntime::PreExecutionDecision preExecutionDecision)
{
  uint64_t v2;
  char v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;

  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000017 && v2 == 0x80000001B4EF4D50)
    goto LABEL_3;
  v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
    return 1;
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000024 && v5 == 0x80000001B4EF4DF0)
    goto LABEL_3;
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    return 1;
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000024 && v7 == 0x80000001B4EF4E20)
    goto LABEL_3;
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
    return 1;
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000024 && v9 == 0x80000001B4EF4E50)
    goto LABEL_3;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    return 1;
  if (PreExecutionDecision.rawValue.getter(preExecutionDecision) == 0xD000000000000015 && v11 == 0x80000001B4EF4ED0)
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return 1;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

id ServerFallbackCapableRequestProcessor.sendExecuteNLOnServerCommand(executeNLOnServer:rcState:turn:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id result;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *);
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD aBlock[6];

  v7 = type metadata accessor for ServerFallbackReason();
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  MEMORY[0x1E0C80A78](v7);
  v45 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RequestType();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v3;
  LODWORD(v17) = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
  v19 = a3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  v48 = v14;
  v44 = a1;
  if ((_DWORD)v17 == 1)
  {
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v19, v15);
    v20 = ExecuteNLOnServerMessage.toSARDMUXExecuteNLOnServer(rcState:requestType:refId:)((int64_t)a2, (uint64_t)v18, v51[10], v51[11]);
  }
  else
  {
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v19, v15);
    v22 = v51[10];
    v21 = v51[11];
    v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88350]), sel_init);
    aBlock[0] = v20;
    v23 = v21;
    v14 = v48;
    specialized ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(aBlock, a2, v18, v22, v23);
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  UUID.init()();
  v24 = v49;
  v25 = v50;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v11, v14, v50);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v11, 0, 1, v25);
  (*(void (**)(char *))(*a2 + 816))(v11);
  v26 = *(uint64_t *)((char *)v51 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  result = objc_msgSend(v20, sel_refId);
  if (result)
  {
    v28 = result;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;

    v32 = a2[2];
    v33 = a2[3];
    v34 = v45;
    ExecuteNLOnServerMessageBase.fallbackReason.getter();
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)v26 + 200);
    v44 = v32;
    v35(v29, v31, v32, v33, v14, v34);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v47);
    v36 = *(void **)((char *)v51
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
    aBlock[4] = closure #1 in ServerFallbackCapableRequestProcessor.sendExecuteNLOnServerCommand(executeNLOnServer:rcState:turn:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_22;
    v37 = _Block_copy(aBlock);
    v38 = v20;
    objc_msgSend(v36, sel_handleCommand_completion_, v38, v37);
    _Block_release(v37);

    if (((*(uint64_t (**)(void))(*a2 + 448))() & 1) != 0 && ((*(uint64_t (**)(void))(*v51 + 440))() & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.conversationBridge);
      v40 = Logger.logObject.getter();
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v42 = 0;
        _os_log_impl(&dword_1B4BE6000, v40, v41, "Sending ResultCandidateSelected with ExecuteNLOnServer itself", v42, 2u);
        MEMORY[0x1B5E44758](v42, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*v51 + 1184))(v44, v33, 1, 0, 0);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, v50);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ResultCandidateState.serverFallbackContextId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  swift_beginAccess();
  outlined assign with copy of ReferenceResolutionClientProtocol?(a1, v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  return outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

void ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  Class isa;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  id v41;
  uint8_t *v42;
  void *v43;
  id v44;
  Class v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  NSObject *v78;

  v69 = a5;
  v12 = type metadata accessor for ServerFallbackReason();
  v72 = *(_QWORD *)(v12 - 8);
  v73 = v12;
  MEMORY[0x1E0C80A78](v12);
  v70 = v13;
  v71 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for InsightRequestSummaryLogger();
  MEMORY[0x1E0C80A78](v66);
  v76 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for UUID();
  v67 = *(_QWORD *)(v75 - 8);
  v18 = *(_QWORD *)(v67 + 64);
  v19 = MEMORY[0x1E0C80A78](v75);
  v68 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v61 - v20;
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A020]), sel_init);
  if (!v22)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
    v78 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1B4BE6000, v78, v36, "Failed to create ORCHSchemaORCHServerFallbackInitiated event", v37, 2u);
      MEMORY[0x1B5E44758](v37, -1, -1);
    }
    goto LABEL_19;
  }
  v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 264);
  v77 = a4;
  v78 = v22;
  v65 = a6;
  v24 = v23(a6);
  -[NSObject setFallbackReason:](v78, sel_setFallbackReason_, v24);
  v74 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a1, a2, a3, (uint64_t)v77, 1);
  if (!v74)
  {
LABEL_19:

    return;
  }
  v25 = v6;
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A010]), sel_init);
  if (!v26)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.conversationBridge);
    v77 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    v40 = os_log_type_enabled(v77, v39);
    v41 = v74;
    if (v40)
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1B4BE6000, v77, v39, "Failed to create ORCHSchemaORCHServerFallbackContext event", v42, 2u);
      MEMORY[0x1B5E44758](v42, -1, -1);

      return;
    }

    goto LABEL_19;
  }
  v27 = v26;
  v63 = a2;
  v64 = a1;
  v28 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
  v29 = v69;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v31 = objc_msgSend(v28, sel_initWithNSUUID_, isa);

  objc_msgSend(v27, sel_setContextId_, v31);
  objc_msgSend(v27, sel_setStartedOrChanged_, v78);
  UUID.init(uuidString:)();
  v32 = v27;
  v33 = v67;
  v34 = v75;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v17, 1, v75) == 1)
  {
    outlined destroy of UUID?((uint64_t)v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v21, v17, v34);
    v43 = v32;
    v44 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
    v45 = UUID._bridgeToObjectiveC()().super.isa;
    v46 = objc_msgSend(v44, sel_initWithNSUUID_, v45);

    objc_msgSend(v43, sel_setTrpId_, v46);
    v32 = v43;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v34);
  }
  v47 = v65;
  v62 = v32;
  v48 = v74;
  objc_msgSend(v74, sel_setServerFallbackContext_, v32);
  objc_msgSend(*(id *)(v25 + 16), sel_emitMessage_, v48);
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v49 = __swift_project_value_buffer(v66, (uint64_t)static Logger.insightRequestSummaryLogger);
  outlined init with copy of InsightRequestSummaryLogger(v49, v76);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v51 = v33;
  v52 = v68;
  v50(v68, v29, v34);
  v54 = v71;
  v53 = v72;
  v55 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v47, v73);
  v56 = (*(unsigned __int8 *)(v51 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  v57 = (v18 + *(unsigned __int8 *)(v53 + 80) + v56) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  v58 = (char *)swift_allocObject();
  v59 = v63;
  *((_QWORD *)v58 + 2) = v64;
  *((_QWORD *)v58 + 3) = v59;
  *((_QWORD *)v58 + 4) = a3;
  *((_QWORD *)v58 + 5) = v77;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v58[v56], v52, v75);
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v58[v57], v54, v55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v60 = v76;
  InsightRequestSummaryLogger.emitDebug(_:)(partial apply for implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:), (uint64_t)v58);

  swift_release();
  outlined destroy of InsightRequestSummaryLogger(v60);
}

uint64_t ConversationBridgeInstrumentationUtil.mapServerFallbackReasonToLoggingReason(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;

  v2 = type metadata accessor for ServerFallbackReason();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0D9ED30])
    return 5;
  if (v6 == *MEMORY[0x1E0D9ED38])
    return 4;
  if (v6 == *MEMORY[0x1E0D9ED20])
    return 2;
  if (v6 == *MEMORY[0x1E0D9ED48])
    return 3;
  if (v6 == *MEMORY[0x1E0D9ED28])
    return 1;
  if (v6 == *MEMORY[0x1E0D9ED40])
    return 6;
  if (v6 != *MEMORY[0x1E0D9ED50])
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t outlined init with copy of InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InsightRequestSummaryLogger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t InsightRequestSummaryLogger.emitDebug(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  int v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  os_log_t v36;
  uint64_t v37;
  _QWORD v39[2];
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint8_t *v45;
  uint64_t v46;
  os_log_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v5);
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, (os_log_type_t)v10))
  {
    v44 = v10;
    v47 = v9;
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v43 = v12;
    v45 = v11;
    v46 = a2;
    *(_DWORD *)v11 = 136315138;
    v51 = 123;
    v52 = 0xE100000000000000;
    v53 = v12;
    v13 = a1();
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v40 = v8;
      v41 = v6;
      v42 = v5;
      v50 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      v15 = v50;
      v39[1] = v13;
      v16 = (void **)(v13 + 56);
      do
      {
        v18 = (uint64_t)*(v16 - 3);
        v17 = *(v16 - 2);
        v19 = (uint64_t)*(v16 - 1);
        v20 = *v16;
        v48 = 34;
        v49 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21._countAndFlagsBits = v18;
        v21._object = v17;
        String.append(_:)(v21);
        v22._countAndFlagsBits = 2243106;
        v22._object = (void *)0xE300000000000000;
        String.append(_:)(v22);
        v23._countAndFlagsBits = v19;
        v23._object = v20;
        String.append(_:)(v23);
        v24._countAndFlagsBits = 34;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v25 = v48;
        v26 = v49;
        v50 = v15;
        v28 = *(_QWORD *)(v15 + 16);
        v27 = *(_QWORD *)(v15 + 24);
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          v15 = v50;
        }
        v16 += 4;
        *(_QWORD *)(v15 + 16) = v28 + 1;
        v29 = v15 + 16 * v28;
        *(_QWORD *)(v29 + 32) = v25;
        *(_QWORD *)(v29 + 40) = v26;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      v6 = v41;
      v5 = v42;
      v8 = v40;
    }
    else
    {
      swift_bridgeObjectRelease();
      v15 = MEMORY[0x1E0DEE9D8];
    }
    v30 = v45;
    v48 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v31 = BidirectionalCollection<>.joined(separator:)();
    v33 = v32;
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 125;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    v36 = v47;
    _os_log_impl(&dword_1B4BE6000, v47, (os_log_type_t)v44, "%s", v30, 0xCu);
    v37 = v43;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v37, -1, -1);
    MEMORY[0x1B5E44758](v30, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t partial apply for implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)()
{
  uint64_t *v0;

  type metadata accessor for UUID();
  type metadata accessor for ServerFallbackReason();
  return implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t implicit closure #1 in ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B4EE4F30;
  *(_QWORD *)(v8 + 32) = 0x614E656764697262;
  *(_QWORD *)(v8 + 40) = 0xEA0000000000656DLL;
  *(_QWORD *)(v8 + 48) = 0xD000000000000012;
  *(_QWORD *)(v8 + 56) = 0x80000001B4EF8FF0;
  *(_QWORD *)(v8 + 64) = 0xD000000000000012;
  *(_QWORD *)(v8 + 72) = 0x80000001B4EF9010;
  *(_QWORD *)(v8 + 80) = 0xD00000000000001ALL;
  *(_QWORD *)(v8 + 88) = 0x80000001B4EF5480;
  *(_QWORD *)(v8 + 96) = 0x4974736575716572;
  *(_QWORD *)(v8 + 104) = 0xE900000000000064;
  *(_QWORD *)(v8 + 112) = a1;
  *(_QWORD *)(v8 + 120) = a2;
  *(_QWORD *)(v8 + 128) = 0xD000000000000011;
  *(_QWORD *)(v8 + 136) = 0x80000001B4EF49F0;
  *(_QWORD *)(v8 + 144) = a3;
  *(_QWORD *)(v8 + 152) = a4;
  *(_QWORD *)(v8 + 160) = 0xD000000000000017;
  *(_QWORD *)(v8 + 168) = 0x80000001B4EF9030;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v8 + 176) = UUID.uuidString.getter();
  *(_QWORD *)(v8 + 184) = v9;
  *(_QWORD *)(v8 + 192) = 0xD000000000000014;
  *(_QWORD *)(v8 + 200) = 0x80000001B4EF49D0;
  *(_QWORD *)(v8 + 208) = ServerFallbackReason.rawValue.getter();
  *(_QWORD *)(v8 + 216) = v10;
  return v8;
}

uint64_t outlined destroy of InsightRequestSummaryLogger(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InsightRequestSummaryLogger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for InsightRequestSummaryLogger(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t HangUpRule.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t OfflineServerFallbackRule.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  return swift_deallocClassInstance();
}

uint64_t ServerFTMRule.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void outlined consume of CandidateRequestMessage?(uint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0)

}

void closure #1 in ServerFallbackCapableRequestProcessor.sendExecuteNLOnServerCommand(executeNLOnServer:rcState:turn:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  v4 = a2;
  v5 = a2;
  oslog = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    if (a2)
    {
      swift_getErrorValue();
      v9 = Error.localizedDescription.getter();
      v11 = v10;
    }
    else
    {
      v11 = 0xE400000000000000;
      v9 = 1701736302;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, oslog, v6, "Sent ExecuteNLOnServer command to server, error:%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

  }
}

uint64_t protocol witness for Bridge.handle(_:executionContextInfo:reply:) in conformance ConversationBridgeSPI()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t ConversationBridgeSPI.handle(_:executionContextInfo:reply:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  id v10;
  void *v11;
  Swift::String v12;
  _QWORD *v13;
  void (*v14)(unint64_t, unint64_t, void *, _QWORD *);
  id v15;
  id v16;

  v9 = *(_QWORD *)(v4 + 16);
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(a1, sel_aceId);
  if (v10)
  {
    v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v12._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v4;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a4;
  v14 = *(void (**)(unint64_t, unint64_t, void *, _QWORD *))(*(_QWORD *)v9 + 208);
  swift_retain();
  v15 = a1;
  v16 = a2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(a3);
  v14(0xD00000000000001ALL, 0x80000001B4EF88A0, &async function pointer to partial apply for closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:), v13);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t partial apply for closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:)(v2, v3, v4, v5, v6);
}

uint64_t closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:)()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v0 + 40) + 24) + 272))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ConversationBridgeSPI.handle(_:executionContextInfo:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t ConversationMessageDispatchingBridgeBase.handle(_:executionContextInfo:reply:)(void *a1, uint64_t a2, uint8_t *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint8_t *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint8_t *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  os_log_type_t v64;
  uint8_t *v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8_t *v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint8_t *bufa;
  uint8_t *buf;
  uint8_t *v80;
  uint8_t *v81;
  uint8_t *v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v5 = v4;
  v10 = *v4;
  v11 = objc_msgSend(a1, sel_groupIdentifier);
  if (v11)
  {
    v12 = v11;
    v89 = a2;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16 = (*(uint64_t (**)(void))(*v5 + 200))();
    v91 = v13;
    v92 = v15;
    v19 = type metadata accessor for ConversationMessageDispatchingBridgeBase.CommandHandlerBase(255, *(_QWORD *)(v10 + 80), v17, v18);
    v20 = MEMORY[0x1E0DEA968];
    v21 = MEMORY[0x1E0DEA978];
    v22 = type metadata accessor for Dictionary();
    MEMORY[0x1B5E4327C](&v93, &v91, v16, v20, v22, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v93;
    if (v93)
    {
      v24 = objc_msgSend(a1, sel_encodedClassName);
      if (!v24)
      {
        swift_bridgeObjectRelease();
        v52 = a1;
        v53 = Logger.logObject.getter();
        v64 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v53, v64))
        {

          goto LABEL_23;
        }
        v87 = a4;
        v55 = swift_slowAlloc();
        v82 = (uint8_t *)swift_slowAlloc();
        v91 = (uint64_t)v82;
        *(_DWORD *)v55 = 136315138;
        v65 = a3;
        v66 = objc_msgSend(v52, sel_debugDescription);
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v69 = v68;

        a3 = v65;
        v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a4 = v87;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v53, v64, "Commnad %s don't have encodedClassName, failed command", (uint8_t *)v55, 0xCu);
        v70 = v82;
        goto LABEL_18;
      }
      v25 = v24;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v28 = v27;

      v91 = v26;
      v92 = v28;
      MEMORY[0x1B5E4327C](&v93, &v91, v23, MEMORY[0x1E0DEA968], v19, MEMORY[0x1E0DEA978]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v93;
      if (v93)
      {
        v30 = a1;
        v31 = Logger.logObject.getter();
        v32 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v84 = a4;
          v33 = (uint8_t *)swift_slowAlloc();
          v80 = (uint8_t *)swift_slowAlloc();
          v91 = (uint64_t)v80;
          *(_DWORD *)v33 = 136315138;
          bufa = v33;
          v34 = a3;
          v35 = objc_msgSend(v30, sel_debugDescription);
          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v38 = v37;

          a3 = v34;
          v39 = v36;
          a4 = v84;
          v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, &v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v31, v32, "dispatch commnad %s to the handle method", bufa, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v80, -1, -1);
          MEMORY[0x1B5E44758](bufa, -1, -1);
        }
        else
        {

        }
        (*(void (**)(_QWORD *, id, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v29 + 88))(v5, v30, v89, a3, a4);
        return swift_release();
      }
      v71 = a1;
      swift_retain_n();
      v52 = v71;
      v53 = Logger.logObject.getter();
      v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = swift_slowAlloc();
        buf = (uint8_t *)swift_slowAlloc();
        v91 = (uint64_t)buf;
        *(_DWORD *)v55 = 136315394;
        v83 = a3;
        v88 = a4;
        v72 = v5[2];
        v73 = v5[3];
        swift_bridgeObjectRetain();
        v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 12) = 2080;
        v74 = objc_msgSend(v52, sel_debugDescription);
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v77 = v76;

        a3 = v83;
        v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, &v91);
        a4 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        v62 = "%s was not able to handle: %s, command is not register. Falling back to super.handle()";
        goto LABEL_17;
      }
    }
    else
    {
      v51 = a1;
      swift_retain_n();
      v52 = v51;
      v53 = Logger.logObject.getter();
      v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = swift_slowAlloc();
        buf = (uint8_t *)swift_slowAlloc();
        v91 = (uint64_t)buf;
        *(_DWORD *)v55 = 136315394;
        v81 = a3;
        v86 = a4;
        v56 = v5[2];
        v57 = v5[3];
        swift_bridgeObjectRetain();
        v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 12) = 2080;
        v58 = objc_msgSend(v52, sel_debugDescription);
        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v61 = v60;

        a3 = v81;
        v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v61, &v91);
        a4 = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        v62 = "%s was not able to handle: %s, group is not register. Falling back to super.handle()";
LABEL_17:
        _os_log_impl(&dword_1B4BE6000, v53, v54, v62, (uint8_t *)v55, 0x16u);
        v70 = buf;
LABEL_18:
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v70, -1, -1);
        MEMORY[0x1B5E44758](v55, -1, -1);
LABEL_23:

        return (*(uint64_t (**)(id, uint64_t, uint8_t *, uint64_t))(*v5 + 304))(v52, v89, a3, a4);
      }
    }

    swift_release_n();
    goto LABEL_23;
  }
  v40 = a1;
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v85 = a4;
    v43 = (uint8_t *)swift_slowAlloc();
    v90 = swift_slowAlloc();
    v91 = v90;
    *(_DWORD *)v43 = 136315138;
    v44 = a2;
    v45 = v5;
    v46 = a3;
    v47 = objc_msgSend(v40, sel_debugDescription);
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    a3 = v46;
    v5 = v45;
    a2 = v44;
    v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v85;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v41, v42, "Commnad %s don't have group identifier, failed command", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v90, -1, -1);
    MEMORY[0x1B5E44758](v43, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(id, uint64_t, uint8_t *, uint64_t))(*v5 + 304))(v40, a2, a3, a4);
}

