@implementation HMMTRAccessoryServer

- (id)_hapAccessoryAtEndpoint:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v4 = a3;
  -[HAPAccessoryServer accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6 == 1)
  {
    -[HMMTRAccessoryServer primaryAccessory](self, "primaryAccessory");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[HMMTRAccessoryServer deviceTopology](self, "deviceTopology");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HAPAccessoryServer accessories](self, "accessories");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __62__HMMTRAccessoryServer_HAPAccessory___hapAccessoryAtEndpoint___block_invoke;
    v12[3] = &unk_250F1F870;
    v13 = v8;
    v14 = v4;
    v10 = v8;
    objc_msgSend(v9, "hmf_objectPassingTest:", v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

- (id)endPointForHapAccessory:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  objc_msgSend(a3, "services");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hmf_objectPassingTest:", &__block_literal_global_31);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  objc_msgSend(v6, "endpoint");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t __62__HMMTRAccessoryServer_HAPAccessory__endPointForHapAccessory___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "type");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqual:", CFSTR("0000003E-0000-1000-8000-0026BB765291"));

  return v3;
}

uint64_t __62__HMMTRAccessoryServer_HAPAccessory___hapAccessoryAtEndpoint___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  objc_msgSend(a2, "services");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hmf_objectPassingTest:", &__block_literal_global_83);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  v7 = *(void **)(a1 + 32);
  objc_msgSend(v6, "endpoint");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "getPartsListAtEndpoint:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "endpoint");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v10, "isEqual:", *(_QWORD *)(a1 + 40)) & 1) != 0)
    v11 = 1;
  else
    v11 = objc_msgSend(v9, "containsObject:", *(_QWORD *)(a1 + 40));

  return v11;
}

uint64_t __62__HMMTRAccessoryServer_HAPAccessory___hapAccessoryAtEndpoint___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "type");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqual:", CFSTR("0000003E-0000-1000-8000-0026BB765291"));

  return v3;
}

- (void)_handleCHIPRemoteRequest:(id)a3 device:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  HMMTRAccessoryServer *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  HMMTRAccessoryServer *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  HMMTRAccessoryServer *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  HMMTRAccessoryServer *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  HMMTRAccessoryServer *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _QWORD v56[4];
  id v57;
  id v58;
  id v59;
  _QWORD v60[4];
  id v61;
  id v62;
  id v63;
  _QWORD v64[4];
  id v65;
  id v66;
  id v67;
  _QWORD v68[2];
  _QWORD v69[2];
  _BYTE location[12];
  __int16 v71;
  id v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("command"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    objc_msgSend(v8, "CHIPEndpointID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "CHIPClusterID");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "CHIPAttributeID");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "CHIPCommandID");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "isEqualToString:", CFSTR("read")))
    {
      objc_initWeak((id *)location, self);
      objc_msgSend(v8, "CHIPReadParams");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HAPAccessoryServer clientQueue](self, "clientQueue");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v64[0] = MEMORY[0x24BDAC760];
      v64[1] = 3221225472;
      v64[2] = __81__HMMTRAccessoryServer_RemoteAccess___handleCHIPRemoteRequest_device_completion___block_invoke;
      v64[3] = &unk_250F20880;
      objc_copyWeak(&v67, (id *)location);
      v65 = v11;
      v66 = v10;
      objc_msgSend(v9, "readAttributeWithEndpointId:clusterId:attributeId:params:clientQueue:completion:", v12, v55, v54, v13, v14, v64);

      objc_destroyWeak(&v67);
      objc_destroyWeak((id *)location);
    }
    else if (objc_msgSend(v11, "isEqualToString:", CFSTR("write")))
    {
      objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("data"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
      {
        objc_initWeak((id *)location, self);
        objc_msgSend(v8, "CHIPTimedWriteTimeout");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HAPAccessoryServer clientQueue](self, "clientQueue");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v60[0] = MEMORY[0x24BDAC760];
        v60[1] = 3221225472;
        v60[2] = __81__HMMTRAccessoryServer_RemoteAccess___handleCHIPRemoteRequest_device_completion___block_invoke_7;
        v60[3] = &unk_250F20880;
        objc_copyWeak(&v63, (id *)location);
        v61 = v11;
        v62 = v10;
        objc_msgSend(v9, "writeAttributeWithEndpointId:clusterId:attributeId:value:timedWriteTimeout:clientQueue:completion:", v12, v55, v54, v19, v20, v21, v60);

        objc_destroyWeak(&v63);
        objc_destroyWeak((id *)location);
      }
      else
      {
        v32 = (void *)MEMORY[0x242656984]();
        v33 = self;
        HMFGetOSLogHandle();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)location = 138543618;
          *(_QWORD *)&location[4] = v35;
          v71 = 2112;
          v72 = v8;
          _os_log_impl(&dword_23E95B000, v34, OS_LOG_TYPE_ERROR, "%{public}@\"data\" field missing from CHIP remote request message payload: %@", location, 0x16u);

        }
        objc_autoreleasePoolPop(v32);
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 2, 0);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, void *))v10 + 2))(v10, 0, v36);

      }
    }
    else if (objc_msgSend(v11, "isEqualToString:", CFSTR("command")))
    {
      if (v53 && v55)
      {
        objc_msgSend(v8, "CHIPCommandFields");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v22)
        {
          v23 = *MEMORY[0x24BDDB4F8];
          v24 = *MEMORY[0x24BDDB518];
          v68[0] = *MEMORY[0x24BDDB500];
          v68[1] = v24;
          v69[0] = v23;
          v69[1] = MEMORY[0x24BDBD1A8];
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v69, v68, 2);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
        }
        objc_initWeak((id *)location, self);
        objc_msgSend(v8, "CHIPTimedInvokeTimeout");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[HAPAccessoryServer clientQueue](self, "clientQueue");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v56[0] = MEMORY[0x24BDAC760];
        v56[1] = 3221225472;
        v56[2] = __81__HMMTRAccessoryServer_RemoteAccess___handleCHIPRemoteRequest_device_completion___block_invoke_9;
        v56[3] = &unk_250F20880;
        objc_copyWeak(&v59, (id *)location);
        v57 = v11;
        v58 = v10;
        objc_msgSend(v9, "invokeCommandWithEndpointId:clusterId:commandId:commandFields:timedInvokeTimeout:clientQueue:completion:", v12, v55, v53, v22, v25, v26, v56);

        objc_destroyWeak(&v59);
        objc_destroyWeak((id *)location);

      }
      else
      {
        v37 = (void *)MEMORY[0x242656984]();
        v38 = self;
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)location = 138543362;
          *(_QWORD *)&location[4] = v40;
          _os_log_impl(&dword_23E95B000, v39, OS_LOG_TYPE_ERROR, "%{public}@Invoke CHIP command with no specific command path", location, 0xCu);

        }
        objc_autoreleasePoolPop(v37);
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 9, 0);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, void *))v10 + 2))(v10, 0, v41);

      }
    }
    else if (objc_msgSend(v11, "isEqualToString:", CFSTR("subscribe")))
    {
      objc_msgSend(v8, "CHIPMinInterval");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "CHIPMaxInterval");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      if (v52 && v51)
      {
        v27 = objc_alloc_init(MEMORY[0x24BDBCED8]);
        v28 = (void *)MEMORY[0x242656984](objc_msgSend(v27, "setCHIPRemoteCommand:", v11));
        v29 = self;
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)location = 138543618;
          *(_QWORD *)&location[4] = v31;
          v71 = 2112;
          v72 = v27;
          _os_log_impl(&dword_23E95B000, v30, OS_LOG_TYPE_DEBUG, "%{public}@Subscribe CHIP attribute responded with %@", location, 0x16u);

        }
        objc_autoreleasePoolPop(v28);
        (*((void (**)(id, id, _QWORD))v10 + 2))(v10, v27, 0);
      }
      else
      {
        v47 = (void *)MEMORY[0x242656984]();
        v48 = self;
        HMFGetOSLogHandle();
        v49 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)location = 138543362;
          *(_QWORD *)&location[4] = v50;
          _os_log_impl(&dword_23E95B000, v49, OS_LOG_TYPE_ERROR, "%{public}@Subscribe CHIP attribute with no specific min/max interval", location, 0xCu);

        }
        objc_autoreleasePoolPop(v47);
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 9, 0);
        v27 = (id)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, id))v10 + 2))(v10, 0, v27);
      }

    }
    else if (objc_msgSend(v11, "isEqualToString:", CFSTR("downloadLog")))
    {
      -[HMMTRAccessoryServer _handleDownloadLogCommand:device:completion:](self, "_handleDownloadLogCommand:device:completion:", v8, v9, v10);
    }
    else
    {
      v42 = (void *)MEMORY[0x242656984]();
      v43 = self;
      HMFGetOSLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)location = 138543362;
        *(_QWORD *)&location[4] = v45;
        _os_log_impl(&dword_23E95B000, v44, OS_LOG_TYPE_ERROR, "%{public}@Unsupported manufacturer extension control command", location, 0xCu);

      }
      objc_autoreleasePoolPop(v42);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 3, 0);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v10 + 2))(v10, 0, v46);

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v18;
      v71 = 2112;
      v72 = v8;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@\"command\" field missing from CHIP remote request message payload: %@", location, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 2, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v10 + 2))(v10, 0, v12);
  }

}

- (void)_handleDownloadLogCommand:(id)a3 device:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  HMMTRAccessoryServer *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "CHIPDownloadLogType");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "CHIPDownloadTimeout");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v11 && v12)
  {
    v14 = objc_msgSend(v11, "integerValue");
    objc_msgSend(v13, "doubleValue");
    v16 = v15;
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = MEMORY[0x24BDAC760];
    v23[1] = 3221225472;
    v23[2] = __82__HMMTRAccessoryServer_RemoteAccess___handleDownloadLogCommand_device_completion___block_invoke;
    v23[3] = &unk_250F208A8;
    v23[4] = self;
    v24 = v10;
    objc_msgSend(v9, "downloadLogOfType:timeout:queue:completion:", v14, v17, v23, v16);

  }
  else
  {
    v18 = (void *)MEMORY[0x242656984]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v21;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_ERROR, "%{public}@Download log command w/o valid log type/timeout", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 9);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v10 + 2))(v10, 0, v22);

  }
}

- (void)handleCHIPRemoteRequest:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  uint64_t v18;
  _QWORD v19[5];
  id v20;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = random();
  v9 = (void *)MEMORY[0x242656984]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v12;
    v25 = 2048;
    v26 = v8;
    _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@Accessory Operation Queue: remote request job(%lu) queued.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v9);
  v13 = MEMORY[0x24BDAC760];
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __73__HMMTRAccessoryServer_RemoteAccess__handleCHIPRemoteRequest_completion___block_invoke;
  v19[3] = &unk_250F228E8;
  v22 = v8;
  v19[4] = v10;
  v20 = v6;
  v21 = v7;
  v16[0] = v13;
  v16[1] = 3221225472;
  v16[2] = __73__HMMTRAccessoryServer_RemoteAccess__handleCHIPRemoteRequest_completion___block_invoke_19;
  v16[3] = &unk_250F208F8;
  v17 = v21;
  v18 = v8;
  v16[4] = v10;
  v14 = v6;
  v15 = v21;
  -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v10, "queueAccessoryOperation:highPriority:completion:", v19, 0, v16);

}

void __73__HMMTRAccessoryServer_RemoteAccess__handleCHIPRemoteRequest_completion___block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  id v29;
  uint64_t v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + (int)*MEMORY[0x24BE1BC68]);
  v3 = os_unfair_lock_lock_with_options();
  v4 = (void *)MEMORY[0x242656984](v3);
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v32 = v7;
    v33 = 2048;
    v34 = v8;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Accessory Operation Queue: remote request job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "deviceController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9
    && (v10 = (void *)MEMORY[0x24BDDB598],
        objc_msgSend(*(id *)(a1 + 32), "nodeID"),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v10, "deviceWithNodeID:controller:", v11, v9),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v11,
        v12))
  {
    v13 = *(void **)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 3221225472;
    v28[2] = __73__HMMTRAccessoryServer_RemoteAccess__handleCHIPRemoteRequest_completion___block_invoke_16;
    v28[3] = &unk_250F208D0;
    v16 = *(void **)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 56);
    v28[4] = v13;
    v30 = v15;
    v29 = v16;
    objc_msgSend(v13, "_handleCHIPRemoteRequest:device:completion:", v14, v12, v28);

  }
  else
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138543618;
      v32 = v20;
      v33 = 2048;
      v34 = v21;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@Device not found to handle remote request job(%lu)", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v22 = (void *)MEMORY[0x242656984]();
    v23 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v24 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138543618;
      v32 = v25;
      v33 = 2048;
      v34 = v26;
      _os_log_impl(&dword_23E95B000, v24, OS_LOG_TYPE_INFO, "%{public}@Accessory Operation Queue: remote request job(%lu) complete.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    v27 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 2, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v27 + 16))(v27, 0, v12);
  }

  os_unfair_lock_unlock(v2);
}

void __73__HMMTRAccessoryServer_RemoteAccess__handleCHIPRemoteRequest_completion___block_invoke_19(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 48);
      v9 = 138543618;
      v10 = v7;
      v11 = 2048;
      v12 = v8;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Accessory Operation Queue: remote request job(%lu) unscheduled.", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void __73__HMMTRAccessoryServer_RemoteAccess__handleCHIPRemoteRequest_completion___block_invoke_16(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 48);
    v12 = 138543618;
    v13 = v10;
    v14 = 2048;
    v15 = v11;
    _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Accessory Operation Queue: remote request job(%lu) complete.", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __82__HMMTRAccessoryServer_RemoteAccess___handleDownloadLogCommand_device_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  objc_msgSend(v5, "lastPathComponent");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x242656984]();
  v9 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v37 = v11;
    v38 = 2112;
    v39 = v5;
    v40 = 2112;
    v41 = v6;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Did download to URL: %@. Error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  if (v5 && !v6 && v7)
  {
    objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "preferenceForKey:", CFSTR("maxAccessoryLogSize"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "numberValue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "unsignedIntegerValue");

    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "path");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = 0;
    objc_msgSend(v16, "attributesOfItemAtPath:error:", v17, &v33);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v33;

    v20 = objc_msgSend(v18, "fileSize");
    v21 = v20;
    if (v19 || v20 > v15)
    {
      v25 = (void *)MEMORY[0x242656984]();
      v26 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v31 = v25;
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v21);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v37 = v28;
        v38 = 2112;
        v39 = v29;
        v40 = 2112;
        v41 = v19;
        _os_log_impl(&dword_23E95B000, v27, OS_LOG_TYPE_ERROR, "%{public}@Invalid log file with size %@. Error: %@", buf, 0x20u);

        v25 = v31;
      }

      objc_autoreleasePoolPop(v25);
      v30 = *(_QWORD *)(a1 + 40);
      if (!v19)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 12);
        v19 = (id)objc_claimAutoreleasedReturnValue();
      }
      (*(void (**)(uint64_t, _QWORD, id))(v30 + 16))(v30, 0, v19);
    }
    else
    {
      v32 = 0;
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfURL:options:error:", v5, 0, &v32);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v32;
      if (v22)
      {
        v34[0] = CFSTR("fileData");
        v34[1] = CFSTR("fileName");
        v35[0] = v22;
        v35[1] = v7;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v35, v34, 2);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v23 = 0;
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

    }
    goto LABEL_21;
  }
  v24 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 12);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v24 + 16))(v24, 0, v18);
LABEL_21:

    goto LABEL_22;
  }
  (*(void (**)(uint64_t, _QWORD, id))(v24 + 16))(v24, 0, v6);
LABEL_22:

}

void __81__HMMTRAccessoryServer_RemoteAccess___handleCHIPRemoteRequest_device_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id WeakRetained;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = WeakRetained;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v6)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543618;
        v24 = v13;
        v25 = 2112;
        v26 = v6;
        v14 = "%{public}@Read CHIP attribute completed with an error: %@";
        v15 = v12;
        v16 = OS_LOG_TYPE_ERROR;
LABEL_7:
        _os_log_impl(&dword_23E95B000, v15, v16, v14, (uint8_t *)&v23, 0x16u);

      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v13;
      v25 = 2112;
      v26 = v5;
      v14 = "%{public}@Read CHIP attribute completed with value: %@";
      v15 = v12;
      v16 = OS_LOG_TYPE_DEBUG;
      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v9);
  }
  if (v5)
  {
    v17 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    objc_msgSend(v17, "setCHIPRemoteCommand:", *(_QWORD *)(a1 + 32));
    v18 = objc_msgSend(v17, "setCHIPRemoteResults:", v5);
    if (WeakRetained)
    {
      v19 = (void *)MEMORY[0x242656984](v18);
      v20 = WeakRetained;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543618;
        v24 = v22;
        v25 = 2112;
        v26 = v17;
        _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Read CHIP attribute responded with %@", (uint8_t *)&v23, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, id, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, v6, v7);
  }

}

void __81__HMMTRAccessoryServer_RemoteAccess___handleCHIPRemoteRequest_device_completion___block_invoke_7(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id WeakRetained;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = WeakRetained;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v6)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543618;
        v24 = v13;
        v25 = 2112;
        v26 = v6;
        v14 = "%{public}@Write CHIP attribute completed with an error: %@";
        v15 = v12;
        v16 = OS_LOG_TYPE_ERROR;
LABEL_7:
        _os_log_impl(&dword_23E95B000, v15, v16, v14, (uint8_t *)&v23, 0x16u);

      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v13;
      v25 = 2112;
      v26 = v5;
      v14 = "%{public}@Write CHIP attribute completed with values: %@";
      v15 = v12;
      v16 = OS_LOG_TYPE_DEBUG;
      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v9);
  }
  if (v5)
  {
    v17 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    objc_msgSend(v17, "setCHIPRemoteCommand:", *(_QWORD *)(a1 + 32));
    v18 = objc_msgSend(v17, "setCHIPRemoteResults:", v5);
    if (WeakRetained)
    {
      v19 = (void *)MEMORY[0x242656984](v18);
      v20 = WeakRetained;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543618;
        v24 = v22;
        v25 = 2112;
        v26 = v17;
        _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Write CHIP attribute responded with %@", (uint8_t *)&v23, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, id, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, v6, v7);
  }

}

void __81__HMMTRAccessoryServer_RemoteAccess___handleCHIPRemoteRequest_device_completion___block_invoke_9(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id WeakRetained;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = WeakRetained;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v6)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543618;
        v24 = v13;
        v25 = 2112;
        v26 = v6;
        v14 = "%{public}@Invoke CHIP command completed with an error: %@";
        v15 = v12;
        v16 = OS_LOG_TYPE_ERROR;
LABEL_7:
        _os_log_impl(&dword_23E95B000, v15, v16, v14, (uint8_t *)&v23, 0x16u);

      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v13;
      v25 = 2112;
      v26 = v5;
      v14 = "%{public}@Invoke CHIP command completed with response: %@";
      v15 = v12;
      v16 = OS_LOG_TYPE_DEBUG;
      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v9);
  }
  if (v5)
  {
    v17 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    objc_msgSend(v17, "setCHIPRemoteCommand:", *(_QWORD *)(a1 + 32));
    v18 = objc_msgSend(v17, "setCHIPRemoteResults:", v5);
    if (WeakRetained)
    {
      v19 = (void *)MEMORY[0x242656984](v18);
      v20 = WeakRetained;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543618;
        v24 = v22;
        v25 = 2112;
        v26 = v17;
        _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Invoke CHIP command responded with %@", (uint8_t *)&v23, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, id, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, v6, v7);
  }

}

- (void)_handleDiagnosticsEvent:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  dispatch_time_t v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  HMMTRAccessoryServer *v46;
  void *v47;
  int v48;
  void *v49;
  int v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t k;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  HMMTRAccessoryServer *v79;
  NSObject *v80;
  void *v81;
  void *v82;
  void *v83;
  HMMTRAccessoryServerDiagnosticsEvent *v84;
  void *v85;
  HMMTRAccessoryServerDiagnosticsEvent *v86;
  char v87;
  void *v88;
  void *v89;
  int v90;
  uint64_t v91;
  void *v92;
  void *v93;
  id v94;
  void *v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t i;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  void *v110;
  void *v111;
  id v112;
  HMMTRAccessoryServer *v113;
  void *v114;
  HMMTRAccessoryServer *v115;
  NSObject *v116;
  void *v117;
  void *v118;
  void *v119;
  HMMTRAccessoryServer *v120;
  NSObject *v121;
  void *v122;
  void *v123;
  void *v124;
  HMMTRAccessoryServerDiagnosticsEvent *v125;
  void *v126;
  HMMTRAccessoryServerDiagnosticsEvent *v127;
  void *v128;
  HMMTRAccessoryServer *v129;
  NSObject *v130;
  void *v131;
  void *v132;
  int v133;
  uint64_t v134;
  void *v135;
  void *v136;
  id v137;
  void *v138;
  void *v139;
  id v140;
  void *v141;
  void *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t j;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  id v153;
  HMMTRAccessoryServer *v154;
  void *v155;
  HMMTRAccessoryServer *v156;
  NSObject *v157;
  id v158;
  void *v159;
  void *v160;
  void *v161;
  HMMTRAccessoryServer *v162;
  NSObject *v163;
  void *v164;
  void *v165;
  const char *v166;
  void *v167;
  HMMTRAccessoryServer *v168;
  NSObject *v169;
  void *v170;
  void *v171;
  HMMTRAccessoryServer *v172;
  NSObject *v173;
  void *v174;
  void *v175;
  void *v176;
  HMMTRAccessoryServerDiagnosticsEvent *v177;
  void *v178;
  HMMTRAccessoryServerDiagnosticsEvent **v179;
  const __CFString **v180;
  void *v181;
  HMMTRAccessoryServer *v182;
  NSObject *v183;
  void *v184;
  void *v185;
  const char *v186;
  void *v187;
  HMMTRAccessoryServer *v188;
  NSObject *v189;
  void *v190;
  void *v191;
  void *v192;
  HMMTRAccessoryServerDiagnosticsEvent *v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t m;
  void *v203;
  void *v204;
  void *v205;
  int v206;
  void *v207;
  HMMTRAccessoryServer *v208;
  NSObject *v209;
  void *v210;
  void *v211;
  HMMTRAccessoryServer *v212;
  NSObject *v213;
  void *v214;
  void *v215;
  void *v216;
  uint64_t v217;
  void *v218;
  void *v219;
  uint64_t v220;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  id obj;
  id obja;
  id objb;
  HMMTRAccessoryServer *v240;
  HMMTRAccessoryServer *v241;
  HMMTRAccessoryServer *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  _QWORD block[5];
  id v268;
  id v269;
  id v270;
  _BYTE v271[128];
  _BYTE v272[128];
  void *v273;
  const __CFString *v274;
  HMMTRAccessoryServerDiagnosticsEvent *v275;
  _BYTE v276[128];
  void *v277;
  const __CFString *v278;
  HMMTRAccessoryServerDiagnosticsEvent *v279;
  _BYTE v280[128];
  _QWORD v281[2];
  const __CFString *v282;
  HMMTRAccessoryServerDiagnosticsEvent *v283;
  uint8_t buf[4];
  void *v285;
  __int16 v286;
  id v287;
  __int16 v288;
  id v289;
  __int16 v290;
  id v291;
  __int16 v292;
  void *v293;
  __int16 v294;
  void *v295;
  _BYTE v296[128];
  void *v297;
  const __CFString *v298;
  HMMTRAccessoryServerDiagnosticsEvent *v299;
  _BYTE v300[128];
  uint64_t v301;

  v301 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB4B0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB4A8]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB4B8]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  objc_msgSend(v7, "cluster");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isEqual:", &unk_250F3F240);

  if (v15)
  {
    objc_msgSend(v7, "event");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isEqual:", &unk_250F3F2D0);

    if (v17)
    {
      v18 = dispatch_time(0, 10000000000);
      -[HAPAccessoryServer clientQueue](self, "clientQueue");
      v19 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __69__HMMTRAccessoryServer_DiagnosticsInternal___handleDiagnosticsEvent___block_invoke;
      block[3] = &unk_250F224A8;
      block[4] = self;
      v268 = v10;
      v269 = v13;
      v270 = v4;
      dispatch_after(v18, v19, block);

    }
    goto LABEL_165;
  }
  objc_msgSend(v7, "cluster");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "isEqual:", &unk_250F3F2A0);

  if (v21)
  {
    objc_msgSend(v7, "event");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "isEqual:", &unk_250F3F2D0);

    if (v23)
    {
      v24 = *MEMORY[0x24BDDB478];
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB478]);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v26 = v25;
      else
        v26 = 0;
      v27 = v26;

      if (v27)
      {
        objc_msgSend(v27, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v29 = v28;
        else
          v29 = 0;
        v30 = v29;

        v234 = v30;
        if ((objc_msgSend(v30, "isEqual:", *MEMORY[0x24BDDB4F8]) & 1) != 0)
        {
          v240 = self;
          v225 = v10;
          v227 = v13;
          v229 = v7;
          v221 = v4;
          v218 = v27;
          objc_msgSend(v27, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v32 = v31;
          else
            v32 = 0;
          v33 = v32;

          if (v33)
          {
            v265 = 0u;
            v266 = 0u;
            v263 = 0u;
            v264 = 0u;
            obj = v33;
            v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v263, v300, 16);
            if (v34)
            {
              v35 = v34;
              v36 = *(_QWORD *)v264;
              v37 = *MEMORY[0x24BDDB470];
LABEL_29:
              v38 = 0;
              while (1)
              {
                if (*(_QWORD *)v264 != v36)
                  objc_enumerationMutation(obj);
                v39 = *(void **)(*((_QWORD *)&v263 + 1) + 8 * v38);
                objc_msgSend(v39, "objectForKeyedSubscript:", v37);
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                v41 = (objc_opt_isKindOfClass() & 1) != 0 ? v40 : 0;
                v42 = v41;

                objc_msgSend(v39, "objectForKeyedSubscript:", v24);
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                v44 = (objc_opt_isKindOfClass() & 1) != 0 ? v43 : 0;
                v45 = v44;

                if ((objc_msgSend(v42, "isEqual:", &unk_250F3F2D0) & 1) != 0)
                  break;

                if (v35 == ++v38)
                {
                  v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v263, v300, 16);
                  if (v35)
                    goto LABEL_29;
                  goto LABEL_41;
                }
              }
              v46 = v240;
              -[HMMTRAccessoryServer numberOfReadValue:](v240, "numberOfReadValue:", v45);
              v118 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v118)
                goto LABEL_114;
              v119 = (void *)MEMORY[0x242656984]();
              v120 = v240;
              HMFGetOSLogHandle();
              v121 = objc_claimAutoreleasedReturnValue();
              v7 = v229;
              if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v122 = (void *)objc_claimAutoreleasedReturnValue();
                -[HMMTRAccessoryServer primaryAccessory](v120, "primaryAccessory");
                v123 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v123, "shortDescription");
                v124 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138544386;
                v285 = v122;
                v286 = 2112;
                v287 = v124;
                v288 = 2112;
                v289 = v225;
                v290 = 2112;
                v291 = v227;
                v292 = 2112;
                v293 = v118;
                _os_log_impl(&dword_23E95B000, v121, OS_LOG_TYPE_INFO, "%{public}@%@ [Event no. %@, UpTime %@] Thread connection status %@", buf, 0x34u);

              }
              objc_autoreleasePoolPop(v119);
              v298 = CFSTR("threadNetwork_ConnectionStatus");
              v125 = [HMMTRAccessoryServerDiagnosticsEvent alloc];
              v297 = v118;
              objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v297, 1);
              v126 = (void *)objc_claimAutoreleasedReturnValue();
              v127 = -[HMMTRAccessoryServerDiagnosticsEvent initWithValues:](v125, "initWithValues:", v126);
              v299 = v127;
              objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v299, &v298, 1);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v4 = v221;
              goto LABEL_172;
            }
LABEL_41:

            v46 = v240;
LABEL_114:
            v128 = (void *)MEMORY[0x242656984]();
            v129 = v46;
            HMFGetOSLogHandle();
            v130 = objc_claimAutoreleasedReturnValue();
            v4 = v221;
            v7 = v229;
            if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v131 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v285 = v131;
              v286 = 2112;
              v287 = v221;
              _os_log_impl(&dword_23E95B000, v130, OS_LOG_TYPE_ERROR, "%{public}@ThreadNetworkDiagnostics ConnectionStatus event data has unexpected structure: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v128);

            goto LABEL_200;
          }
          goto LABEL_203;
        }
        v54 = v27;
        v114 = (void *)MEMORY[0x242656984]();
        v115 = self;
        HMFGetOSLogHandle();
        v116 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v117 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v285 = v117;
          v286 = 2112;
          v287 = v234;
          _os_log_impl(&dword_23E95B000, v116, OS_LOG_TYPE_ERROR, "%{public}@ThreadNetworkDiagnostics ConnectionStatus event data type is unexpected: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v114);

        goto LABEL_145;
      }
LABEL_202:
      _HMFPreconditionFailure();
      goto LABEL_203;
    }
LABEL_165:
    v88 = 0;
    goto LABEL_166;
  }
  objc_msgSend(v7, "cluster");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = objc_msgSend(v47, "isEqual:", &unk_250F3F2B8);

  if (!v48)
    goto LABEL_165;
  objc_msgSend(v7, "event");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = objc_msgSend(v49, "isEqual:", &unk_250F3F2E8);

  if (!v50)
  {
    objc_msgSend(v7, "event");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = objc_msgSend(v89, "isEqual:", &unk_250F3F300);

    if (v90)
    {
      v242 = self;
      v91 = *MEMORY[0x24BDDB478];
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB478]);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v93 = v92;
      else
        v93 = 0;
      v94 = v93;

      if (!v94)
        goto LABEL_202;
      objc_msgSend(v94, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v96 = v95;
      else
        v96 = 0;
      v97 = v96;

      v234 = v97;
      if ((objc_msgSend(v97, "isEqual:", *MEMORY[0x24BDDB4F8]) & 1) != 0)
      {
        v225 = v10;
        v227 = v13;
        v231 = v7;
        v223 = v4;
        v218 = v94;
        objc_msgSend(v94, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v99 = v98;
        else
          v99 = 0;
        v100 = v99;

        if (v100)
        {
          v257 = 0u;
          v258 = 0u;
          v255 = 0u;
          v256 = 0u;
          obj = v100;
          v101 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v255, v280, 16);
          if (!v101)
            goto LABEL_106;
          v102 = v101;
          v103 = *(_QWORD *)v256;
          v104 = *MEMORY[0x24BDDB470];
          while (1)
          {
            for (i = 0; i != v102; ++i)
            {
              if (*(_QWORD *)v256 != v103)
                objc_enumerationMutation(obj);
              v106 = *(void **)(*((_QWORD *)&v255 + 1) + 8 * i);
              objc_msgSend(v106, "objectForKeyedSubscript:", v104);
              v107 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v108 = v107;
              else
                v108 = 0;
              v109 = v108;

              objc_msgSend(v106, "objectForKeyedSubscript:", v91);
              v110 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v111 = v110;
              else
                v111 = 0;
              v112 = v111;

              if ((objc_msgSend(v109, "isEqual:", &unk_250F3F2D0) & 1) != 0)
              {
                v113 = v242;
                -[HMMTRAccessoryServer numberOfReadValue:](v242, "numberOfReadValue:", v112);
                v118 = (void *)objc_claimAutoreleasedReturnValue();

                if (v118)
                {
                  v171 = (void *)MEMORY[0x242656984]();
                  v172 = v242;
                  HMFGetOSLogHandle();
                  v173 = objc_claimAutoreleasedReturnValue();
                  v7 = v231;
                  if (os_log_type_enabled(v173, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v174 = (void *)objc_claimAutoreleasedReturnValue();
                    -[HMMTRAccessoryServer primaryAccessory](v172, "primaryAccessory");
                    v175 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v175, "shortDescription");
                    v176 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138544386;
                    v285 = v174;
                    v286 = 2112;
                    v287 = v176;
                    v288 = 2112;
                    v289 = v225;
                    v290 = 2112;
                    v291 = v227;
                    v292 = 2112;
                    v293 = v118;
                    _os_log_impl(&dword_23E95B000, v173, OS_LOG_TYPE_INFO, "%{public}@%@ [Event no. %@, UpTime %@] WiFi Connection Status event with status %@", buf, 0x34u);

                  }
                  objc_autoreleasePoolPop(v171);
                  v278 = CFSTR("wifiNetwork_ConnectionStatus");
                  v177 = [HMMTRAccessoryServerDiagnosticsEvent alloc];
                  v277 = v118;
                  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v277, 1);
                  v126 = (void *)objc_claimAutoreleasedReturnValue();
                  v127 = -[HMMTRAccessoryServerDiagnosticsEvent initWithValues:](v177, "initWithValues:", v126);
                  v279 = v127;
                  v178 = (void *)MEMORY[0x24BDBCE70];
                  v179 = &v279;
                  v180 = &v278;
                  goto LABEL_171;
                }
LABEL_159:
                v181 = (void *)MEMORY[0x242656984]();
                v182 = v113;
                HMFGetOSLogHandle();
                v183 = objc_claimAutoreleasedReturnValue();
                v4 = v223;
                v7 = v231;
                v184 = v234;
                if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v185 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v285 = v185;
                  v286 = 2112;
                  v287 = v223;
                  v186 = "%{public}@WiFiNetworkDiagnostics ConnectionStatus event data has unexpected structure: %@";
                  goto LABEL_198;
                }
                goto LABEL_199;
              }

            }
            v102 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v255, v280, 16);
            if (!v102)
            {
LABEL_106:

              v113 = v242;
              goto LABEL_159;
            }
          }
        }
        goto LABEL_203;
      }
      v160 = v94;
      v161 = (void *)MEMORY[0x242656984]();
      v162 = self;
      HMFGetOSLogHandle();
      v163 = objc_claimAutoreleasedReturnValue();
      v164 = v234;
      if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v165 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v285 = v165;
        v286 = 2112;
        v287 = v234;
        v166 = "%{public}@WiFiNetworkDiagnostics ConnectionStatus event data type is unexpected: %@";
LABEL_163:
        _os_log_impl(&dword_23E95B000, v163, OS_LOG_TYPE_ERROR, v166, buf, 0x16u);

      }
    }
    else
    {
      objc_msgSend(v7, "event");
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      v133 = objc_msgSend(v132, "isEqual:", &unk_250F3F2D0);

      if (!v133)
        goto LABEL_165;
      v242 = self;
      v134 = *MEMORY[0x24BDDB478];
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB478]);
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v136 = v135;
      else
        v136 = 0;
      v137 = v136;

      if (!v137)
        goto LABEL_202;
      objc_msgSend(v137, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v139 = v138;
      else
        v139 = 0;
      v140 = v139;

      v234 = v140;
      if ((objc_msgSend(v140, "isEqual:", *MEMORY[0x24BDDB4F8]) & 1) != 0)
      {
        v225 = v10;
        v227 = v13;
        v232 = v7;
        v223 = v4;
        v218 = v137;
        objc_msgSend(v137, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v142;

        if (v143)
        {
          v253 = 0u;
          v254 = 0u;
          v251 = 0u;
          v252 = 0u;
          obj = v143;
          v144 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v251, v276, 16);
          if (!v144)
            goto LABEL_141;
          v145 = v144;
          v146 = *(_QWORD *)v252;
          v147 = *MEMORY[0x24BDDB470];
          while (1)
          {
            for (j = 0; j != v145; ++j)
            {
              if (*(_QWORD *)v252 != v146)
                objc_enumerationMutation(obj);
              v149 = *(void **)(*((_QWORD *)&v251 + 1) + 8 * j);
              objc_msgSend(v149, "hmf_numberForKey:", v147);
              v150 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v149, "objectForKeyedSubscript:", v134);
              v151 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v152 = v151;
              else
                v152 = 0;
              v153 = v152;

              if ((objc_msgSend(v150, "isEqual:", &unk_250F3F2D0) & 1) != 0)
              {
                v154 = v242;
                -[HMMTRAccessoryServer numberOfReadValue:](v242, "numberOfReadValue:", v153);
                v118 = (void *)objc_claimAutoreleasedReturnValue();

                if (v118)
                {
                  v187 = (void *)MEMORY[0x242656984]();
                  v188 = v242;
                  HMFGetOSLogHandle();
                  v189 = objc_claimAutoreleasedReturnValue();
                  v7 = v232;
                  if (os_log_type_enabled(v189, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v190 = (void *)objc_claimAutoreleasedReturnValue();
                    -[HMMTRAccessoryServer primaryAccessory](v188, "primaryAccessory");
                    v191 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v191, "shortDescription");
                    v192 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138544386;
                    v285 = v190;
                    v286 = 2112;
                    v287 = v192;
                    v288 = 2112;
                    v289 = v225;
                    v290 = 2112;
                    v291 = v227;
                    v292 = 2112;
                    v293 = v118;
                    _os_log_impl(&dword_23E95B000, v189, OS_LOG_TYPE_INFO, "%{public}@%@ [Event no. %@, UpTime %@] WiFi Disconnection event with reason %@", buf, 0x34u);

                  }
                  objc_autoreleasePoolPop(v187);
                  v274 = CFSTR("wifiNetwork_ConnectionStatus");
                  v193 = [HMMTRAccessoryServerDiagnosticsEvent alloc];
                  v273 = v118;
                  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v273, 1);
                  v126 = (void *)objc_claimAutoreleasedReturnValue();
                  v127 = -[HMMTRAccessoryServerDiagnosticsEvent initWithValues:](v193, "initWithValues:", v126);
                  v275 = v127;
                  v178 = (void *)MEMORY[0x24BDBCE70];
                  v179 = &v275;
                  v180 = &v274;
LABEL_171:
                  objc_msgSend(v178, "dictionaryWithObjects:forKeys:count:", v179, v180, 1);
                  v88 = (void *)objc_claimAutoreleasedReturnValue();
                  v4 = v223;
                  v46 = v242;
LABEL_172:

                  v10 = v225;
                  v13 = v227;
                  goto LABEL_173;
                }
LABEL_196:
                v181 = (void *)MEMORY[0x242656984]();
                v182 = v154;
                HMFGetOSLogHandle();
                v183 = objc_claimAutoreleasedReturnValue();
                v4 = v223;
                v7 = v232;
                v184 = v234;
                if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v185 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v285 = v185;
                  v286 = 2112;
                  v287 = v223;
                  v186 = "%{public}@WiFiNetworkDiagnostics Disconnection event data has unexpected structure: %@";
LABEL_198:
                  _os_log_impl(&dword_23E95B000, v183, OS_LOG_TYPE_ERROR, v186, buf, 0x16u);

                }
LABEL_199:

                objc_autoreleasePoolPop(v181);
LABEL_200:

                v88 = 0;
LABEL_201:
                v10 = v225;
                v13 = v227;
                goto LABEL_166;
              }

            }
            v145 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v251, v276, 16);
            if (!v145)
            {
LABEL_141:

              v154 = v242;
              goto LABEL_196;
            }
          }
        }
LABEL_203:
        _HMFPreconditionFailure();
      }
      v160 = v137;
      v161 = (void *)MEMORY[0x242656984]();
      v162 = self;
      HMFGetOSLogHandle();
      v163 = objc_claimAutoreleasedReturnValue();
      v164 = v234;
      if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v165 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v285 = v165;
        v286 = 2112;
        v287 = v234;
        v166 = "%{public}@WiFiNetworkDiagnostics Disconnection event data type is unexpected: %@";
        goto LABEL_163;
      }
    }

    objc_autoreleasePoolPop(v161);
    goto LABEL_165;
  }
  v51 = *MEMORY[0x24BDDB478];
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB478]);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v53 = v52;
  else
    v53 = 0;
  v54 = v53;

  if (!v54)
    goto LABEL_202;
  objc_msgSend(v54, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v56 = v55;
  else
    v56 = 0;
  v57 = v56;

  if ((objc_msgSend(v57, "isEqual:", *MEMORY[0x24BDDB4F8]) & 1) == 0)
  {
    v155 = (void *)MEMORY[0x242656984]();
    v156 = self;
    HMFGetOSLogHandle();
    v157 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v158 = v57;
      v159 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v285 = v159;
      v286 = 2112;
      v287 = v158;
      _os_log_impl(&dword_23E95B000, v157, OS_LOG_TYPE_ERROR, "%{public}@WiFiNetworkDiagnostics AssociationFailure event data type is unexpected: %@", buf, 0x16u);

      v57 = v158;
    }

    objc_autoreleasePoolPop(v155);
LABEL_145:

    goto LABEL_165;
  }
  v228 = v13;
  objc_msgSend(v54, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v59 = v58;
  else
    v59 = 0;
  v60 = v59;

  if (!v60)
    goto LABEL_203;
  v216 = v57;
  v219 = v54;
  v241 = self;
  v261 = 0u;
  v262 = 0u;
  v259 = 0u;
  v260 = 0u;
  v61 = v60;
  v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v259, v296, 16);
  obja = v61;
  if (!v62)
  {

    v64 = 0;
    v235 = 0;
    goto LABEL_149;
  }
  v63 = v62;
  v222 = v4;
  v226 = v10;
  v230 = v7;
  v235 = 0;
  v64 = 0;
  v65 = *(_QWORD *)v260;
  v66 = *MEMORY[0x24BDDB470];
  do
  {
    for (k = 0; k != v63; ++k)
    {
      if (*(_QWORD *)v260 != v65)
        objc_enumerationMutation(obja);
      v68 = *(void **)(*((_QWORD *)&v259 + 1) + 8 * k);
      objc_msgSend(v68, "objectForKeyedSubscript:", v66);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v70 = v69;
      else
        v70 = 0;
      v71 = v70;

      objc_msgSend(v68, "objectForKeyedSubscript:", v51);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v73 = v72;
      else
        v73 = 0;
      v74 = v73;

      if (objc_msgSend(v71, "isEqual:", &unk_250F3F2D0))
      {
        -[HMMTRAccessoryServer numberOfReadValue:](v241, "numberOfReadValue:", v74);
        v75 = objc_claimAutoreleasedReturnValue();
        v76 = v64;
        v64 = (void *)v75;
      }
      else
      {
        if (!objc_msgSend(v71, "isEqual:", &unk_250F3F2E8))
          goto LABEL_72;
        -[HMMTRAccessoryServer numberOfReadValue:](v241, "numberOfReadValue:", v74);
        v77 = objc_claimAutoreleasedReturnValue();
        v76 = v235;
        v235 = (void *)v77;
      }

LABEL_72:
    }
    v63 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v259, v296, 16);
  }
  while (v63);

  v10 = v226;
  v7 = v230;
  if (!v64)
  {
LABEL_149:
    v13 = v228;
    goto LABEL_150;
  }
  v13 = v228;
  if (v235)
  {
    v78 = (void *)MEMORY[0x242656984]();
    v79 = v241;
    HMFGetOSLogHandle();
    v80 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer primaryAccessory](v79, "primaryAccessory");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "shortDescription");
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544642;
      v285 = v81;
      v286 = 2112;
      v287 = v83;
      v288 = 2112;
      v289 = v226;
      v290 = 2112;
      v291 = v228;
      v292 = 2112;
      v293 = v64;
      v294 = 2112;
      v295 = v235;
      _os_log_impl(&dword_23E95B000, v80, OS_LOG_TYPE_INFO, "%{public}@%@ [Event no. %@, UpTime %@] WiFi Association Failure event with cause %@, status %@", buf, 0x3Eu);

      v10 = v226;
    }

    objc_autoreleasePoolPop(v78);
    v282 = CFSTR("wifiNetwork_AssociationFailure");
    v84 = [HMMTRAccessoryServerDiagnosticsEvent alloc];
    v281[0] = v64;
    v281[1] = v235;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v281, 2);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v86 = -[HMMTRAccessoryServerDiagnosticsEvent initWithValues:](v84, "initWithValues:", v85);
    v283 = v86;
    v87 = 1;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v283, &v282, 1);
    v88 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = v222;
    goto LABEL_153;
  }
LABEL_150:
  v167 = (void *)MEMORY[0x242656984]();
  v168 = v241;
  HMFGetOSLogHandle();
  v169 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v285 = v170;
    v286 = 2112;
    v287 = v4;
    _os_log_impl(&dword_23E95B000, v169, OS_LOG_TYPE_ERROR, "%{public}@WiFiNetworkDiagnostics AssociationFailure event data has unexpected structure: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v167);
  v87 = 0;
  v88 = 0;
LABEL_153:

  v46 = v241;
  if ((v87 & 1) != 0)
  {
LABEL_173:
    if (v88)
    {
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      -[HAPAccessoryServer accessories](v46, "accessories");
      v194 = (void *)objc_claimAutoreleasedReturnValue();
      v220 = objc_msgSend(v194, "countByEnumeratingWithState:objects:count:", &v247, v272, 16);
      if (v220)
      {
        v195 = *(_QWORD *)v248;
        v224 = v4;
        v225 = v10;
        v227 = v13;
        v233 = v7;
        objb = v194;
        v217 = *(_QWORD *)v248;
        do
        {
          v196 = 0;
          do
          {
            if (*(_QWORD *)v248 != v195)
              objc_enumerationMutation(v194);
            v197 = *(void **)(*((_QWORD *)&v247 + 1) + 8 * v196);
            v243 = 0u;
            v244 = 0u;
            v245 = 0u;
            v246 = 0u;
            v236 = v197;
            objc_msgSend(v197, "services");
            v198 = (void *)objc_claimAutoreleasedReturnValue();
            v199 = objc_msgSend(v198, "countByEnumeratingWithState:objects:count:", &v243, v271, 16);
            if (v199)
            {
              v200 = v199;
              v201 = *(_QWORD *)v244;
              while (2)
              {
                for (m = 0; m != v200; ++m)
                {
                  if (*(_QWORD *)v244 != v201)
                    objc_enumerationMutation(v198);
                  v203 = *(void **)(*((_QWORD *)&v243 + 1) + 8 * m);
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                  {
                    objc_msgSend(v203, "endpoint");
                    v204 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v233, "endpoint");
                    v205 = (void *)objc_claimAutoreleasedReturnValue();
                    v206 = objc_msgSend(v204, "isEqualToNumber:", v205);

                    if (v206)
                    {
                      v211 = (void *)MEMORY[0x242656984]();
                      v212 = v46;
                      HMFGetOSLogHandle();
                      v213 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v213, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v214 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138543874;
                        v285 = v214;
                        v286 = 2112;
                        v287 = v88;
                        v288 = 2112;
                        v289 = v236;
                        _os_log_impl(&dword_23E95B000, v213, OS_LOG_TYPE_INFO, "%{public}@Calling delegate to handle diagnostics event: %@ for accessory: %@", buf, 0x20u);

                      }
                      objc_autoreleasePoolPop(v211);
                      -[HMMTRAccessoryServer diagnosticsEventDelegate](v212, "diagnosticsEventDelegate");
                      v215 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v215, "handleDiagnosticsEvents:forAccessory:", v88, v236);

                      v4 = v224;
                      v7 = v233;
                      goto LABEL_201;
                    }
                  }
                }
                v200 = objc_msgSend(v198, "countByEnumeratingWithState:objects:count:", &v243, v271, 16);
                if (v200)
                  continue;
                break;
              }
            }

            ++v196;
            v195 = v217;
            v13 = v227;
            v7 = v233;
            v10 = v225;
            v194 = objb;
          }
          while (v196 != v220);
          v4 = v224;
          v220 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v247, v272, 16);
        }
        while (v220);
      }

      v207 = (void *)MEMORY[0x242656984]();
      v208 = v46;
      HMFGetOSLogHandle();
      v209 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v210 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v285 = v210;
        v286 = 2112;
        v287 = v88;
        _os_log_impl(&dword_23E95B000, v209, OS_LOG_TYPE_ERROR, "%{public}@Diagnostic event did not find any destination accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v207);
    }
  }
LABEL_166:

}

- (id)_getOperationalNetworkAddressForAccessory:(id)a3
{
  id v4;
  void *v5;
  HMMTRDeviceTopology *v6;
  void *v7;
  HMMTRDeviceTopology *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  id v19;
  void *v20;
  HMMTRAccessoryServer *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  HMMTRAccessoryServer *v29;
  NSObject *v30;
  void *v31;
  char v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = [HMMTRDeviceTopology alloc];
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMMTRDeviceTopology initWithNodeId:server:](v6, "initWithNodeId:server:", v7, self);

    if (v8)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer endpointsForHAPAccessory:topology:](self, "endpointsForHAPAccessory:topology:", v4, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = 0;
      if (objc_msgSend(v10, "count"))
      {

        v10 = &unk_250F405F0;
      }
      -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer generalDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:](self, "generalDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:", v10, v8, v11, &v33);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend(v12, "readAttributeNetworkInterfacesWithParams:", 0);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer _getOperationalHardwareAddressFromReadValue:](self, "_getOperationalHardwareAddressFromReadValue:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        v15 = (void *)MEMORY[0x242656984]();
        v16 = self;
        HMFGetOSLogHandle();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v35 = v18;
          v36 = 2112;
          v37 = v14;
          _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Found operational hardware address: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v15);
        objc_msgSend(v9, "setObject:forKeyedSubscript:", v14, CFSTR("hardware_address"));

        v19 = 0;
      }
      else
      {
        v28 = (void *)MEMORY[0x242656984]();
        v29 = self;
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v35 = v31;
          _os_log_impl(&dword_23E95B000, v30, OS_LOG_TYPE_ERROR, "%{public}@Matter device doesn't have general diagnostic cluster", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v28);
        v19 = v9;
      }

    }
    else
    {
      v24 = (void *)MEMORY[0x242656984]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v35 = v27;
        _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_ERROR, "%{public}@Matter topology is nil", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      v19 = 0;
    }

  }
  else
  {
    v20 = (void *)MEMORY[0x242656984]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v23;
      _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_ERROR, "%{public}@Matter device is nil", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    v19 = 0;
  }

  return v19;
}

- (id)_getOperationalHardwareAddressFromReadValue:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  HMMTRAccessoryServer *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id obj;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  HMMTRAccessoryServer *v63;
  void *v64;
  id v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[128];
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v6 = *MEMORY[0x24BDDB500];
    objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    v10 = objc_msgSend(v9, "isEqual:", *MEMORY[0x24BDDB458]);
    v11 = 0;
    v12 = 0;
    if (v10)
    {
      v52 = v9;
      v63 = self;
      v53 = v5;
      v56 = *MEMORY[0x24BDDB518];
      objc_msgSend(v5, "objectForKeyedSubscript:");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v14 = v13;
      else
        v14 = 0;
      v15 = v14;

      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      obj = v15;
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v76, 16);
      if (v16)
      {
        v17 = v16;
        v18 = 0;
        v64 = 0;
        v19 = *(_QWORD *)v72;
        v66 = *MEMORY[0x24BDDB478];
        v61 = *MEMORY[0x24BDDB4F8];
        v20 = *MEMORY[0x24BDDB470];
        v21 = v63;
        v54 = *(_QWORD *)v72;
        v55 = v6;
        while (1)
        {
          v22 = 0;
          v57 = v17;
          do
          {
            if (*(_QWORD *)v72 != v19)
              objc_enumerationMutation(obj);
            if ((v18 & 1) != 0)
              goto LABEL_54;
            objc_msgSend(*(id *)(*((_QWORD *)&v71 + 1) + 8 * v22), "objectForKeyedSubscript:", v66);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v24 = v23;
            else
              v24 = 0;
            v25 = v24;

            objc_msgSend(v25, "objectForKeyedSubscript:", v6);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v27 = v26;
            else
              v27 = 0;
            v28 = v6;
            v29 = v27;

            v62 = v29;
            if (objc_msgSend(v29, "isEqual:", v61))
            {
              v59 = v25;
              v60 = v22;
              objc_msgSend(v25, "objectForKeyedSubscript:", v56);
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v31 = v30;
              else
                v31 = 0;
              v32 = v31;

              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v65 = v32;
              v33 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v67, v75, 16);
              if (v33)
              {
                v34 = v33;
                v35 = *(_QWORD *)v68;
                do
                {
                  for (i = 0; i != v34; ++i)
                  {
                    if (*(_QWORD *)v68 != v35)
                      objc_enumerationMutation(v65);
                    v37 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * i);
                    objc_msgSend(v37, "objectForKeyedSubscript:", v20);
                    v38 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) != 0)
                      v39 = v38;
                    else
                      v39 = 0;
                    v40 = v39;

                    if (objc_msgSend(v40, "isEqual:", &unk_250F3F2E8))
                    {
                      objc_msgSend(v37, "objectForKeyedSubscript:", v66);
                      v41 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                        v42 = v41;
                      else
                        v42 = 0;
                      v43 = v42;

                      -[HMMTRAccessoryServer numberOfReadValue:](v21, "numberOfReadValue:", v43);
                      v44 = (void *)objc_claimAutoreleasedReturnValue();

                      if (objc_msgSend(v44, "BOOLValue"))
                        v18 = 1;
                    }
                    else
                    {
                      if (!objc_msgSend(v40, "isEqual:", &unk_250F3F330))
                        goto LABEL_45;
                      objc_msgSend(v37, "objectForKeyedSubscript:", v66);
                      v45 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                        v46 = v45;
                      else
                        v46 = 0;
                      v47 = v46;

                      -[HMMTRAccessoryServer dataOfReadValue:](v21, "dataOfReadValue:", v47);
                      v44 = (void *)objc_claimAutoreleasedReturnValue();
                      v48 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F188]), "initWithAddressData:", v44);
                      objc_msgSend(v48, "formattedString");
                      v49 = objc_claimAutoreleasedReturnValue();

                      v64 = (void *)v49;
                      v21 = v63;
                    }

LABEL_45:
                  }
                  v34 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v67, v75, 16);
                }
                while (v34);
              }

              v19 = v54;
              v6 = v55;
              v17 = v57;
              v25 = v59;
              v22 = v60;
            }
            else
            {
              v6 = v28;
            }

            ++v22;
          }
          while (v22 != v17);
          v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v76, 16);
          if (!v17)
            goto LABEL_54;
        }
      }
      v18 = 0;
      v64 = 0;
LABEL_54:

      v12 = v64;
      if ((v18 & 1) != 0)
        v11 = v64;
      else
        v11 = 0;
      v9 = v52;
      v5 = v53;
    }
    v50 = v11;

  }
  else
  {
    v50 = 0;
  }

  return v50;
}

void __69__HMMTRAccessoryServer_DiagnosticsInternal___handleDiagnosticsEvent___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  const __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "shortDescription");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "hmdHAPAccessoryDelegate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544642;
    v11 = CFSTR("Yes");
    v15 = v5;
    if (!v10)
      v11 = CFSTR("No");
    v16 = 2112;
    v17 = v6;
    v18 = 2112;
    v19 = v9;
    v20 = 2112;
    v21 = v7;
    v22 = 2112;
    v23 = v8;
    v24 = 2112;
    v25 = v11;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@%@ [Event no. %@, UpTime %@] Startup Event %@, delegated: %@", buf, 0x3Eu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "hmdHAPAccessoryDelegate");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "handleStartUpWithEventNumber:", *(_QWORD *)(a1 + 40));

}

- (id)collectDiagnosticsForAccessory:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD block[5];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy_;
  v20 = __Block_byref_object_dispose_;
  v21 = 0;
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v23 = v8;
    v24 = 2112;
    v25 = v4;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Collecting accessory diagnostics for %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HAPAccessoryServer clientQueue](v6, "clientQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __68__HMMTRAccessoryServer_Diagnostics__collectDiagnosticsForAccessory___block_invoke;
  block[3] = &unk_250F235D0;
  v14 = v4;
  v15 = &v16;
  block[4] = v6;
  v10 = v4;
  dispatch_sync(v9, block);

  v11 = (id)v17[5];
  _Block_object_dispose(&v16, 8);

  return v11;
}

- (id)readPastDiagnosticEventsFromAccessory:(id)a3 fromEventNumber:(id)a4
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = &unk_250F3F240;
  v11 = &unk_250F3F270;
  v12 = &unk_250F3F288;
  v13 = &unk_250F3F2A0;
  v14 = &unk_250F3F2B8;
  v5 = (void *)MEMORY[0x24BDBCE30];
  v6 = a3;
  objc_msgSend(v5, "arrayWithObjects:count:", &v10, 5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer _readPastEventsFromAccessory:forClusters:](self, "_readPastEventsFromAccessory:forClusters:", v6, v7, v10, v11, v12, v13, v14, v15);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)_readPastEventsFromAccessory:(id)a3 forClusters:(id)a4
{
  void *v6;
  HMMTRDeviceTopology *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  HMMTRAccessoryServer *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMMTRAccessoryServer *v26;
  NSObject *v27;
  void *v28;
  id v30;
  NSObject *group;
  id v32;
  id obj;
  void *v34;
  HMMTRDeviceTopology *v35;
  _QWORD v36[4];
  NSObject *v37;
  id v38;
  uint64_t v39;
  HMMTRAccessoryServer *v40;
  id v41;
  uint64_t *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  id v52;
  uint8_t v53[128];
  uint8_t buf[4];
  void *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v32 = a3;
  v30 = a4;
  v47 = 0;
  v48 = &v47;
  v49 = 0x3032000000;
  v50 = __Block_byref_object_copy_;
  v51 = __Block_byref_object_dispose_;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v52 = (id)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(a4) = v6 == 0;

  if ((_DWORD)a4)
  {
    v21 = (void *)MEMORY[0x242656984]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v55 = v24;
      _os_log_impl(&dword_23E95B000, v23, OS_LOG_TYPE_ERROR, "%{public}@Matter device is nil", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    v20 = 0;
  }
  else
  {
    v7 = [HMMTRDeviceTopology alloc];
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = -[HMMTRDeviceTopology initWithNodeId:server:](v7, "initWithNodeId:server:", v8, self);

    if (v35)
    {
      -[HMMTRAccessoryServer endpointsForHAPAccessory:topology:](self, "endpointsForHAPAccessory:topology:", v32);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      buf[0] = 0;
      if (!objc_msgSend(v9, "count"))
      {

        v9 = &unk_250F405D8;
      }
      v34 = v9;
      group = dispatch_group_create();
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      obj = v30;
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v44;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v44 != v11)
              objc_enumerationMutation(obj);
            v13 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i);
            -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMMTRAccessoryServer endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:](self, "endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:", v13, &stru_250F24B08, v34, v35, v14, buf);
            v15 = (void *)objc_claimAutoreleasedReturnValue();

            if (!buf[0])
            {
              -[HMMTRAccessoryServer deviceController](self, "deviceController");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMMTRAccessoryServer nodeID](self, "nodeID");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v17, "unsignedLongLongValue");
              -[HAPAccessoryServer clientQueue](self, "clientQueue");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v36[0] = MEMORY[0x24BDAC760];
              v36[1] = 3221225472;
              v36[2] = __78__HMMTRAccessoryServer_Diagnostics___readPastEventsFromAccessory_forClusters___block_invoke;
              v36[3] = &unk_250F20AC0;
              v37 = group;
              v38 = v15;
              v39 = v13;
              v40 = self;
              v41 = v32;
              v42 = &v47;
              objc_msgSend(v16, "getBaseDevice:queue:completionHandler:", v18, v19, v36);

            }
          }
          v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
        }
        while (v10);
      }

      dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
      v20 = (id)v48[5];

    }
    else
    {
      v25 = (void *)MEMORY[0x242656984]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v55 = v28;
        _os_log_impl(&dword_23E95B000, v27, OS_LOG_TYPE_ERROR, "%{public}@Matter topology is nil", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v25);
      v20 = 0;
    }

  }
  _Block_object_dispose(&v47, 8);

  return v20;
}

- (id)_processEvent:(id)a3
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v21[4];
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BDDB4B0];
  v4 = a3;
  objc_msgSend(v4, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB4A8]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB4B8]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
    v14 = v13;
  else
    v14 = &unk_250F3F2D0;
  v21[0] = CFSTR("UpTime");
  v21[1] = CFSTR("EventNumber");
  if (v10)
    v15 = v10;
  else
    v15 = &unk_250F3F2D0;
  v22[0] = v14;
  v22[1] = v15;
  v21[2] = CFSTR("Cluster");
  objc_msgSend(v7, "cluster");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v22[2] = v16;
  v21[3] = CFSTR("Event");
  objc_msgSend(v7, "event");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
    v18 = v17;
  else
    v18 = &unk_250F3F2D0;
  v22[3] = v18;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v22, v21, 4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

- (int64_t)_getLinkLayerTypeForAccessory:(id)a3
{
  id v4;
  void *v5;
  HMMTRDeviceTopology *v6;
  void *v7;
  HMMTRDeviceTopology *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMMTRAccessoryServer *v15;
  NSObject *v16;
  void *v17;
  unint64_t v18;
  char v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = [HMMTRDeviceTopology alloc];
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMMTRDeviceTopology initWithNodeId:server:](v6, "initWithNodeId:server:", v7, self);

    if (v8)
    {
      -[HMMTRAccessoryServer endpointsForHAPAccessory:topology:](self, "endpointsForHAPAccessory:topology:", v4, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 0;
      -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer networkCommissioningClusterFromEndpoints:topology:device:definitelyUnsupported:](self, "networkCommissioningClusterFromEndpoints:topology:device:definitelyUnsupported:", v9, v8, v10, &v20);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        objc_msgSend(v11, "readAttributeFeatureMapWithParams:", 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          v14 = (void *)MEMORY[0x242656984]();
          v15 = self;
          HMFGetOSLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v22 = v17;
            v23 = 2112;
            v24 = v13;
            _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_DEBUG, "%{public}@NetworkCommissioningCluster featureMap: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v14);
          if ((objc_msgSend(v13, "unsignedIntegerValue") & 1) != 0)
          {
            v18 = 1;
          }
          else if ((objc_msgSend(v13, "unsignedIntegerValue") & 2) != 0)
          {
            v18 = 4;
          }
          else
          {
            v18 = ((unint64_t)objc_msgSend(v13, "unsignedIntegerValue") >> 1) & 2;
          }
        }
        else
        {
          v18 = 0;
        }

      }
      else
      {
        v18 = 0;
      }

    }
    else
    {
      v18 = 0;
    }

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

- (int64_t)getLinkLayerTypeForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  int64_t v7;
  _QWORD block[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __66__HMMTRAccessoryServer_Diagnostics__getLinkLayerTypeForAccessory___block_invoke;
  block[3] = &unk_250F235D0;
  v10 = v4;
  v11 = &v12;
  block[4] = self;
  v6 = v4;
  dispatch_sync(v5, block);

  v7 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v7;
}

- (id)getSupportedLinkLayerTypesFromNetworkCommissioningClusterFeatureMap:(id)a3
{
  id v4;
  void *v5;
  char v6;
  uint64_t v7;
  void *v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, "unsignedIntegerValue");
    v7 = (8 * objc_msgSend(v5, "unsignedIntegerValue")) & 0x10 | (2 * (v6 & 1));
    v8 = (void *)(v7 | objc_msgSend(v5, "unsignedIntegerValue") & 4);
    v9 = (void *)MEMORY[0x242656984]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v12;
      v16 = 2112;
      v17 = v5;
      v18 = 2048;
      v19 = v8;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_DEBUG, "%{public}@NetworkCommissioningCluster featureMap: %@, supportedLinkLayerTypes = %ld", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    if (v8)
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v8);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)_getSupportedLinkLayerTypesForAccessory:(id)a3
{
  id v4;
  void *v5;
  HMMTRDeviceTopology *v6;
  void *v7;
  HMMTRDeviceTopology *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMMTRAccessoryServer *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  char v28;
  uint8_t buf[4];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = [HMMTRDeviceTopology alloc];
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMMTRDeviceTopology initWithNodeId:server:](v6, "initWithNodeId:server:", v7, self);

    if (v8)
    {
      -[HMMTRAccessoryServer endpointsForHAPAccessory:topology:](self, "endpointsForHAPAccessory:topology:", v4, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 0;
      -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer networkCommissioningClusterFromEndpoints:topology:device:definitelyUnsupported:](self, "networkCommissioningClusterFromEndpoints:topology:device:definitelyUnsupported:", v9, v8, v10, &v28);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        objc_msgSend(v11, "readAttributeFeatureMapWithParams:", 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMMTRAccessoryServer getSupportedLinkLayerTypesFromNetworkCommissioningClusterFeatureMap:](self, "getSupportedLinkLayerTypesFromNetworkCommissioningClusterFeatureMap:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v23 = (void *)MEMORY[0x242656984]();
        v24 = self;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v30 = v26;
          _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_ERROR, "%{public}@Error retrieving supported link layers - no network commissioning cluster", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v23);
        v14 = 0;
      }

    }
    else
    {
      v19 = (void *)MEMORY[0x242656984]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v30 = v22;
        _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_ERROR, "%{public}@Error retrieving supported link layers - no topology", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      v14 = 0;
    }

  }
  else
  {
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v30 = v18;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@Error retrieving supported link layers - matter device not available", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    v14 = 0;
  }

  return v14;
}

- (id)getSupportedLinkLayerTypesForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD block[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy_;
  v16 = __Block_byref_object_dispose_;
  v17 = 0;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __76__HMMTRAccessoryServer_Diagnostics__getSupportedLinkLayerTypesForAccessory___block_invoke;
  block[3] = &unk_250F235D0;
  v10 = v4;
  v11 = &v12;
  block[4] = self;
  v6 = v4;
  dispatch_sync(v5, block);

  v7 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v7;
}

- (id)getOperationalNetworkAddressForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD block[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy_;
  v16 = __Block_byref_object_dispose_;
  v17 = 0;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __78__HMMTRAccessoryServer_Diagnostics__getOperationalNetworkAddressForAccessory___block_invoke;
  block[3] = &unk_250F235D0;
  v10 = v4;
  v11 = &v12;
  block[4] = self;
  v6 = v4;
  dispatch_sync(v5, block);

  v7 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v7;
}

- (id)getConnectNetworkIDForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD block[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy_;
  v16 = __Block_byref_object_dispose_;
  v17 = 0;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __69__HMMTRAccessoryServer_Diagnostics__getConnectNetworkIDForAccessory___block_invoke;
  block[3] = &unk_250F235D0;
  v10 = v4;
  v11 = &v12;
  block[4] = self;
  v6 = v4;
  dispatch_sync(v5, block);

  v7 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v7;
}

- (id)getWiFiNetworkLinkQualityForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD block[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy_;
  v16 = __Block_byref_object_dispose_;
  v17 = 0;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __75__HMMTRAccessoryServer_Diagnostics__getWiFiNetworkLinkQualityForAccessory___block_invoke;
  block[3] = &unk_250F235D0;
  v10 = v4;
  v11 = &v12;
  block[4] = self;
  v6 = v4;
  dispatch_sync(v5, block);

  v7 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v7;
}

- (id)getThreadNetworkLinkQualityForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD block[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy_;
  v16 = __Block_byref_object_dispose_;
  v17 = 0;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __77__HMMTRAccessoryServer_Diagnostics__getThreadNetworkLinkQualityForAccessory___block_invoke;
  block[3] = &unk_250F235D0;
  v10 = v4;
  v11 = &v12;
  block[4] = self;
  v6 = v4;
  dispatch_sync(v5, block);

  v7 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v7;
}

- (void)resetThreadNetworkDiagnosticsCountForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __84__HMMTRAccessoryServer_Diagnostics__resetThreadNetworkDiagnosticsCountForAccessory___block_invoke;
  v7[3] = &unk_250F22458;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)resetWiFiNetworkDiagnosticsCountForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __82__HMMTRAccessoryServer_Diagnostics__resetWiFiNetworkDiagnosticsCountForAccessory___block_invoke;
  v7[3] = &unk_250F22458;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (id)endpointsForHAPAccessory:(id)a3 topology:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  id v14;
  void *v15;
  int v16;
  void *v17;
  HMMTRAccessoryServer *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMMTRAccessoryServer *v27;
  NSObject *v28;
  void *v29;
  id v30;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  id v44;
  __int16 v45;
  void *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v33 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v34 = v5;
  objc_msgSend(v5, "services");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v47, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v36;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v36 != v10)
          objc_enumerationMutation(v7);
        v12 = *(id *)(*((_QWORD *)&v35 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v13 = v12;
        else
          v13 = 0;
        v14 = v13;

        objc_msgSend(v14, "type");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "isEqual:", CFSTR("0000003E-0000-1000-8000-0026BB765291"));

        if (v16)
        {
          objc_msgSend(v14, "endpoint");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v23);

          objc_msgSend(v14, "endpoint");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = v33;
          objc_msgSend(v33, "getPartsListAtEndpoint:", v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          v26 = (void *)MEMORY[0x242656984](objc_msgSend(v6, "addObjectsFromArray:", v25));
          v27 = self;
          HMFGetOSLogHandle();
          v28 = objc_claimAutoreleasedReturnValue();
          v20 = v34;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v40 = v29;
            v41 = 2112;
            v42 = v34;
            v43 = 2112;
            v44 = v14;
            v45 = 2112;
            v46 = v6;
            _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_DEBUG, "%{public}@HAPAccessory %@ service: %@, endpoints: %@", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v26);
          v30 = v6;

          goto LABEL_18;
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v47, 16);
      if (v9)
        continue;
      break;
    }
  }

  v17 = (void *)MEMORY[0x242656984]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = v34;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v40 = v21;
    v41 = 2112;
    v42 = v34;
    _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@No endpoints available for diagnostic clusters for HAPAccessory: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  v22 = v33;
LABEL_18:

  return v6;
}

- (id)endpointForDiagnosticCluster:(id)a3 clusterName:(id)a4 amongEndpoints:(id)a5 topology:(id)a6 device:(id)a7 definitelyUnsupported:(BOOL *)a8
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  HMMTRAccessoryServer *v27;
  NSObject *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  HMMTRAccessoryServer *v51;
  NSObject *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  HMMTRAccessoryServer *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  HMMTRAccessoryServer *v61;
  NSObject *v62;
  void *v63;
  void *v65;
  void *v66;
  HMMTRAccessoryServer *v67;
  NSObject *v68;
  void *v69;
  void *v70;
  void *v71;
  HMMTRAccessoryServer *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  HMMTRAccessoryServer *v76;
  NSObject *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  id obj;
  HMMTRAccessoryServer *v83;
  HMMTRAccessoryServer *v84;
  id v85;
  id v86;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint8_t v96[128];
  uint8_t buf[4];
  void *v98;
  __int16 v99;
  id v100;
  __int16 v101;
  id v102;
  _BYTE v103[128];
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v18 = v15;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v92, v103, 16);
  if (!v19)
  {

LABEL_40:
    v60 = (void *)MEMORY[0x242656984]();
    v61 = self;
    HMFGetOSLogHandle();
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v98 = v63;
      v99 = 2112;
      v100 = v14;
      v101 = 2112;
      v102 = v18;
      _os_log_impl(&dword_23E95B000, v62, OS_LOG_TYPE_DEBUG, "%{public}@No %@ cluster in any endpoints %@.", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v60);
    v54 = 0;
    *a8 = 1;
    goto LABEL_43;
  }
  v20 = v19;
  v83 = self;
  v85 = v17;
  v86 = v14;
  v21 = 0;
  v22 = *(_QWORD *)v93;
  while (2)
  {
    for (i = 0; i != v20; ++i)
    {
      if (*(_QWORD *)v93 != v22)
        objc_enumerationMutation(v18);
      v24 = *(void **)(*((_QWORD *)&v92 + 1) + 8 * i);
      objc_msgSend(v16, "getClustersInUseAtEndpoint:", v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v25, "containsObject:", v13))
      {
        v56 = (void *)MEMORY[0x242656984]();
        v57 = v83;
        HMFGetOSLogHandle();
        v58 = objc_claimAutoreleasedReturnValue();
        v14 = v86;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v98 = v59;
          v99 = 2112;
          v100 = v86;
          v101 = 2112;
          v102 = v24;
          _os_log_impl(&dword_23E95B000, v58, OS_LOG_TYPE_DEBUG, "%{public}@%@ cluster found in endpoint %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v56);
        v54 = v24;

        v17 = v85;
        goto LABEL_43;
      }
      v21 |= objc_msgSend(v24, "isEqual:", &unk_250F3F2D0);

    }
    v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v92, v103, 16);
    if (v20)
      continue;
    break;
  }

  v17 = v85;
  v14 = v86;
  self = v83;
  if ((v21 & 1) == 0)
    goto LABEL_40;
  v26 = (void *)MEMORY[0x242656984]();
  v27 = v83;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v98 = v29;
    v99 = 2112;
    v100 = v86;
    _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Checking endpoint 0 for %@ cluster", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v26);
  v30 = objc_alloc(MEMORY[0x24BDDB5D8]);
  -[HAPAccessoryServer clientQueue](v27, "clientQueue");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = (void *)objc_msgSend(v30, "initWithDevice:endpointID:queue:", v85, &unk_250F3F2D0, v31);

  objc_msgSend(v32, "readAttributeServerListWithParams:", 0);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v81 = v33;
  if (v33)
  {
    v34 = v33;
    v84 = v27;
    objc_msgSend(v33, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v36 = v35;
    else
      v36 = 0;
    v37 = v36;

    v80 = v37;
    if ((objc_msgSend(v37, "isEqual:", *MEMORY[0x24BDDB458]) & 1) != 0)
    {
      v79 = v32;
      objc_msgSend(v34, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v39 = v38;
      else
        v39 = 0;
      v40 = v39;

      if (!v40)
LABEL_57:
        _HMFPreconditionFailure();
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      obj = v40;
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v96, 16);
      if (!v41)
        goto LABEL_33;
      v42 = v41;
      v43 = *(_QWORD *)v89;
      v44 = *MEMORY[0x24BDDB478];
LABEL_23:
      v45 = 0;
      while (1)
      {
        if (*(_QWORD *)v89 != v43)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v88 + 1) + 8 * v45), "objectForKeyedSubscript:", v44);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v47 = v46;
        else
          v47 = 0;
        v48 = v47;

        if (!v48)
        {
          _HMFPreconditionFailure();
          goto LABEL_57;
        }
        -[HMMTRAccessoryServer numberOfReadValue:](v84, "numberOfReadValue:", v48);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v49, "isEqual:", v13))
          break;

        if (v42 == ++v45)
        {
          v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v96, 16);
          if (!v42)
          {
LABEL_33:

            v50 = (void *)MEMORY[0x242656984]();
            v51 = v84;
            HMFGetOSLogHandle();
            v52 = objc_claimAutoreleasedReturnValue();
            v14 = v86;
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v98 = v53;
              v99 = 2112;
              v100 = v86;
              _os_log_impl(&dword_23E95B000, v52, OS_LOG_TYPE_DEBUG, "%{public}@Endpoint 0 does not have cluster %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v50);
            v54 = 0;
            *a8 = 1;
            v17 = v85;
            v55 = obj;
            goto LABEL_53;
          }
          goto LABEL_23;
        }
      }
      v75 = (void *)MEMORY[0x242656984]();
      v76 = v84;
      HMFGetOSLogHandle();
      v77 = objc_claimAutoreleasedReturnValue();
      v14 = v86;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v98 = v78;
        v99 = 2112;
        v100 = v86;
        _os_log_impl(&dword_23E95B000, v77, OS_LOG_TYPE_DEBUG, "%{public}@Endpoint 0 has cluster %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v75);

      v55 = obj;
      v54 = &unk_250F3F2D0;
      v17 = v85;
LABEL_53:

      v65 = v79;
    }
    else
    {
      v65 = v32;
      v71 = (void *)MEMORY[0x242656984]();
      v72 = v84;
      HMFGetOSLogHandle();
      v73 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v98 = v74;
        v99 = 2112;
        v100 = v80;
        _os_log_impl(&dword_23E95B000, v73, OS_LOG_TYPE_ERROR, "%{public}@Unexpected ServerList value type: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v71);
      v54 = 0;
      *a8 = 0;
    }
    v70 = v81;

  }
  else
  {
    v65 = v32;
    v66 = (void *)MEMORY[0x242656984]();
    v67 = v27;
    HMFGetOSLogHandle();
    v68 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v98 = v69;
      _os_log_impl(&dword_23E95B000, v68, OS_LOG_TYPE_ERROR, "%{public}@ServerList couldn't be read from endpoint 0", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v66);
    v54 = 0;
    *a8 = 0;
    v70 = 0;
  }

LABEL_43:
  return v54;
}

- (id)generalDiagnosticsClusterFromEndpoints:(id)a3 topology:(id)a4 device:(id)a5 definitelyUnsupported:(BOOL *)a6
{
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;

  v10 = a5;
  -[HMMTRAccessoryServer endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:](self, "endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:", &unk_250F3F270, CFSTR("GeneralDiagnostics"), a3, a4, v10, a6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = objc_alloc(MEMORY[0x24BDDB5E8]);
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v12, "initWithDevice:endpointID:queue:", v10, v11, v13);

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (id)threadNetworkDiagnosticsClusterFromEndpoints:(id)a3 topology:(id)a4 device:(id)a5 definitelyUnsupported:(BOOL *)a6
{
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;

  v10 = a5;
  -[HMMTRAccessoryServer endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:](self, "endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:", &unk_250F3F2A0, CFSTR("ThreadNetworkDiagnostics"), a3, a4, v10, a6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = objc_alloc(MEMORY[0x24BDDB628]);
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v12, "initWithDevice:endpointID:queue:", v10, v11, v13);

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (id)wifiNetworkDiagnosticsClusterFromEndpoints:(id)a3 topology:(id)a4 device:(id)a5 definitelyUnsupported:(BOOL *)a6
{
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;

  v10 = a5;
  -[HMMTRAccessoryServer endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:](self, "endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:", &unk_250F3F2B8, CFSTR("WiFiNetworkDiagnostics"), a3, a4, v10, a6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = objc_alloc(MEMORY[0x24BDDB630]);
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v12, "initWithDevice:endpointID:queue:", v10, v11, v13);

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (id)networkCommissioningClusterFromEndpoints:(id)a3 topology:(id)a4 device:(id)a5 definitelyUnsupported:(BOOL *)a6
{
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v10 = a5;
  -[HMMTRAccessoryServer endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:](self, "endpointForDiagnosticCluster:clusterName:amongEndpoints:topology:device:definitelyUnsupported:", &unk_250F3F258, CFSTR("NetworkCommissioningCluster"), a3, a4, v10, a6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = objc_alloc(MEMORY[0x24BDDB600]);
    v13 = objc_msgSend(v11, "unsignedShortValue");
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)objc_msgSend(v12, "initWithDevice:endpoint:queue:", v10, v13, v14);

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

- (id)numberOfReadValue:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a3;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if ((objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDDB4F0]) & 1) != 0
      || (objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDDB510]) & 1) != 0
      || (objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDDB468]) & 1) != 0
      || (objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDDB4C0]) & 1) != 0
      || objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDDB488]))
    {
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v9 = v8;
      else
        v9 = 0;
      v10 = v9;

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (id)dataOfReadValue:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  int v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v3 = a3;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    v8 = objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDDB4D8]);
    v9 = 0;
    if (v8)
    {
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v11 = v10;
      else
        v11 = 0;
      v9 = v11;

    }
    v12 = v9;

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

- (id)stringOfReadValue:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  __CFString *v13;
  uint64_t v14;
  unint64_t v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  void *v19;

  v3 = a3;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDDB4D8]))
    {
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v9 = v8;
      else
        v9 = 0;
      v10 = v9;

      v11 = objc_alloc(MEMORY[0x24BDD17C8]);
      v12 = objc_retainAutorelease(v10);
      v13 = (__CFString *)objc_msgSend(v11, "initWithBytes:length:encoding:", objc_msgSend(v12, "bytes"), objc_msgSend(v12, "length"), 4);
      if (!v13)
      {
        v12 = objc_retainAutorelease(v12);
        v14 = objc_msgSend(v12, "bytes");
        if (objc_msgSend(v12, "length"))
        {
          v15 = 0;
          v16 = &stru_250F24B08;
          do
          {
            v17 = v16;
            -[__CFString stringByAppendingFormat:](v16, "stringByAppendingFormat:", CFSTR("%X"), *(unsigned __int8 *)(v14 + v15));
            v16 = (__CFString *)objc_claimAutoreleasedReturnValue();

            ++v15;
          }
          while (objc_msgSend(v12, "length") > v15);
        }
        else
        {
          v16 = &stru_250F24B08;
        }
        goto LABEL_21;
      }
    }
    else
    {
      if (!objc_msgSend(v7, "isEqual:", *MEMORY[0x24BDDB508]))
      {
        v16 = 0;
        goto LABEL_23;
      }
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v19 = v12;
      else
        v19 = 0;
      v13 = v19;
    }
    v16 = v13;
LABEL_21:

LABEL_23:
    v18 = v16;

    goto LABEL_24;
  }
  v18 = 0;
LABEL_24:

  return v18;
}

- (id)connectedNetworkIDFromReadValue:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id obj;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  v4 = v3;
  if (v3)
  {
    v5 = *MEMORY[0x24BDDB500];
    objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 0x24BDD1000uLL;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v6;
    else
      v8 = 0;
    v9 = v8;

    v10 = objc_msgSend(v9, "isEqual:", *MEMORY[0x24BDDB458]);
    v11 = 0;
    v12 = 0;
    if (v10)
    {
      v54 = v9;
      v55 = v4;
      v59 = *MEMORY[0x24BDDB518];
      objc_msgSend(v4, "objectForKeyedSubscript:");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v14 = v13;
      else
        v14 = 0;
      v15 = v14;

      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      obj = v15;
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
      if (v16)
      {
        v17 = v16;
        v18 = 0;
        v65 = 0;
        v19 = *(_QWORD *)v73;
        v67 = *MEMORY[0x24BDDB478];
        v20 = *MEMORY[0x24BDDB4F8];
        v21 = *MEMORY[0x24BDDB470];
        v57 = *(_QWORD *)v73;
        v58 = v5;
        v56 = *MEMORY[0x24BDDB4F8];
        while (1)
        {
          v22 = 0;
          v63 = v17;
          do
          {
            if (*(_QWORD *)v73 != v19)
              objc_enumerationMutation(obj);
            if ((v18 & 1) != 0)
              goto LABEL_54;
            objc_msgSend(*(id *)(*((_QWORD *)&v72 + 1) + 8 * v22), "objectForKeyedSubscript:", v67);
            v23 = v20;
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v25 = v24;
            else
              v25 = 0;
            v26 = v25;

            objc_msgSend(v26, "objectForKeyedSubscript:", v5);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = v7;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v29 = v27;
            else
              v29 = 0;
            v30 = v5;
            v31 = v29;

            v20 = v23;
            v64 = v31;
            if (objc_msgSend(v31, "isEqual:", v23))
            {
              v61 = v26;
              v62 = v22;
              objc_msgSend(v26, "objectForKeyedSubscript:", v59);
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v33 = v32;
              else
                v33 = 0;
              v34 = v33;

              v70 = 0u;
              v71 = 0u;
              v68 = 0u;
              v69 = 0u;
              v35 = v34;
              v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v68, v76, 16);
              if (v36)
              {
                v37 = v36;
                v38 = *(_QWORD *)v69;
                do
                {
                  for (i = 0; i != v37; ++i)
                  {
                    if (*(_QWORD *)v69 != v38)
                      objc_enumerationMutation(v35);
                    v40 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * i);
                    objc_msgSend(v40, "objectForKeyedSubscript:", v21);
                    v41 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) != 0)
                      v42 = v41;
                    else
                      v42 = 0;
                    v43 = v42;

                    if (objc_msgSend(v43, "isEqual:", &unk_250F3F2E8))
                    {
                      objc_msgSend(v40, "objectForKeyedSubscript:", v67);
                      v44 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                        v45 = v44;
                      else
                        v45 = 0;
                      v46 = v45;

                      -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v46);
                      v47 = (id)objc_claimAutoreleasedReturnValue();

                      if (objc_msgSend(v47, "BOOLValue"))
                        v18 = 1;
                    }
                    else
                    {
                      if (!objc_msgSend(v43, "isEqual:", &unk_250F3F2D0))
                        goto LABEL_45;
                      objc_msgSend(v40, "objectForKeyedSubscript:", v67);
                      v48 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                        v49 = v48;
                      else
                        v49 = 0;
                      v47 = v49;

                      -[HMMTRAccessoryServer stringOfReadValue:](self, "stringOfReadValue:", v47);
                      v50 = objc_claimAutoreleasedReturnValue();

                      v65 = (void *)v50;
                    }

LABEL_45:
                  }
                  v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v68, v76, 16);
                }
                while (v37);
              }

              v19 = v57;
              v5 = v58;
              v7 = 0x24BDD1000;
              v22 = v62;
              v51 = v63;
              v20 = v56;
              v26 = v61;
            }
            else
            {
              v5 = v30;
              v7 = v28;
              v51 = v63;
            }

            ++v22;
          }
          while (v22 != v51);
          v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
          if (!v17)
            goto LABEL_54;
        }
      }
      v18 = 0;
      v65 = 0;
LABEL_54:

      v12 = v65;
      if ((v18 & 1) != 0)
        v11 = v65;
      else
        v11 = 0;
      v9 = v54;
      v4 = v55;
    }
    v52 = v11;

  }
  else
  {
    v52 = 0;
  }

  return v52;
}

- (id)packetCountOfThreadNetworkDiagnostics:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;

  v4 = a3;
  objc_msgSend(v4, "readAttributeTxTotalCountWithParams:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6
    && (v7 = objc_msgSend(v6, "unsignedLongValue"),
        objc_msgSend(v4, "readAttributeRxTotalCountWithParams:", 0),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v8),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v6,
        v8,
        v9))
  {
    v10 = objc_msgSend(v9, "unsignedLongValue");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v10 + v7));
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

- (id)errorCountOfThreadNetworkDiagnostics:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  int v36;
  int v37;
  int v38;
  int v39;

  v4 = a3;
  objc_msgSend(v4, "readAttributeTxDirectMaxRetryExpiryCountWithParams:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_13;
  v7 = objc_msgSend(v6, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeTxIndirectMaxRetryExpiryCountWithParams:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
    goto LABEL_13;
  v10 = objc_msgSend(v9, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeTxErrCcaCountWithParams:", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
    goto LABEL_13;
  v13 = objc_msgSend(v12, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeTxErrAbortCountWithParams:", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v15)
    goto LABEL_13;
  v16 = objc_msgSend(v15, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeTxErrBusyChannelCountWithParams:", 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v18)
    goto LABEL_13;
  v19 = objc_msgSend(v18, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeRxErrNoFrameCountWithParams:", 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v21)
    goto LABEL_13;
  v39 = objc_msgSend(v21, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeRxErrUnknownNeighborCountWithParams:", 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v23)
    goto LABEL_13;
  v38 = objc_msgSend(v23, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeRxErrInvalidSrcAddrCountWithParams:", 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v25)
    goto LABEL_13;
  v37 = objc_msgSend(v25, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeRxErrSecCountWithParams:", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v27)
    goto LABEL_13;
  v36 = objc_msgSend(v27, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeRxErrFcsCountWithParams:", 0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v29)
    goto LABEL_13;
  v30 = objc_msgSend(v29, "unsignedLongValue");
  objc_msgSend(v4, "readAttributeRxErrOtherCountWithParams:", 0);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (v32)
  {
    v33 = objc_msgSend(v32, "unsignedLongValue");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v10 + v7 + v13 + v16 + v19 + v39 + v38 + v37 + v36 + v30 + v33));
    v34 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
LABEL_13:
    v34 = 0;
  }

  return v34;
}

- (id)highestRSSIofThreadNetworkDiagnostics:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  id v40;
  HMMTRAccessoryServer *v41;
  NSObject *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  HMMTRAccessoryServer *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  HMMTRAccessoryServer *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  HMMTRAccessoryServer *v55;
  NSObject *v56;
  void *v57;
  id v58;
  void *v60;
  id v61;
  void *context;
  id obj;
  void *v64;
  HMMTRAccessoryServer *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[128];
  uint8_t v83[128];
  uint8_t buf[4];
  uint64_t v85;
  __int16 v86;
  id v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "readAttributeNeighborTableWithParams:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v70 = *MEMORY[0x24BDDB500];
    objc_msgSend(v5, "objectForKeyedSubscript:");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if ((objc_msgSend(v9, "isEqual:", *MEMORY[0x24BDDB458]) & 1) != 0)
    {
      v66 = *MEMORY[0x24BDDB518];
      objc_msgSend(v6, "objectForKeyedSubscript:");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v11 = v10;
      else
        v11 = 0;
      v12 = v11;

      if (!v12)
        goto LABEL_73;
      v60 = v6;
      v61 = v4;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v13 = v12;
      v69 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
      if (!v69)
      {
        v64 = 0;
        goto LABEL_66;
      }
      v64 = 0;
      v68 = *(_QWORD *)v79;
      v72 = *MEMORY[0x24BDDB478];
      v67 = *MEMORY[0x24BDDB4F8];
      v14 = *MEMORY[0x24BDDB470];
      v65 = self;
      obj = v13;
LABEL_12:
      v15 = 0;
      while (1)
      {
        v16 = v9;
        if (*(_QWORD *)v79 != v68)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v78 + 1) + 8 * v15), "objectForKeyedSubscript:", v72, v60, v61);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
        v19 = v18;

        if (!v19)
        {
LABEL_71:
          _HMFPreconditionFailure();
LABEL_72:
          _HMFPreconditionFailure();
LABEL_73:
          _HMFPreconditionFailure();
        }
        objc_msgSend(v19, "objectForKeyedSubscript:", v70);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        v21 = (objc_opt_isKindOfClass() & 1) != 0 ? v20 : 0;
        v9 = v21;

        if ((objc_msgSend(v9, "isEqual:", v67) & 1) == 0)
          break;
        objc_msgSend(v19, "objectForKeyedSubscript:", v66);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v23 = v22;
        else
          v23 = 0;
        v24 = v23;

        if (!v24)
          goto LABEL_72;
        v73 = v15;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v25 = v24;
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v74, v82, 16);
        if (v26)
        {
          v27 = v26;
          v71 = v9;
          v28 = *(_QWORD *)v75;
LABEL_29:
          v29 = 0;
          while (1)
          {
            if (*(_QWORD *)v75 != v28)
              objc_enumerationMutation(v25);
            v30 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * v29);
            objc_msgSend(v30, "objectForKeyedSubscript:", v14);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v32 = v31;
            else
              v32 = 0;
            v33 = v32;

            if (!v33)
            {
              _HMFPreconditionFailure();
              goto LABEL_71;
            }
            if (objc_msgSend(v33, "isEqual:", &unk_250F3F318))
              break;

            if (v27 == ++v29)
            {
              v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v74, v82, 16);
              if (!v27)
              {
                v9 = v71;
                self = v65;
                goto LABEL_53;
              }
              goto LABEL_29;
            }
          }
          objc_msgSend(v30, "objectForKeyedSubscript:", v72);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v35 = v34;
          else
            v35 = 0;
          v36 = v35;

          if (!v36)
            goto LABEL_71;
          self = v65;
          -[HMMTRAccessoryServer numberOfReadValue:](v65, "numberOfReadValue:", v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = v37;
          if (v37)
          {
            v9 = v71;
            if (!v64 || (v39 = objc_msgSend(v37, "integerValue"), v39 > objc_msgSend(v64, "integerValue")))
            {
              v40 = v38;

              v64 = v40;
            }
          }
          else
          {
            context = (void *)MEMORY[0x242656984]();
            v41 = v65;
            HMFGetOSLogHandle();
            v42 = objc_claimAutoreleasedReturnValue();
            v9 = v71;
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v43 = objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v85 = v43;
              v44 = (void *)v43;
              _os_log_impl(&dword_23E95B000, v42, OS_LOG_TYPE_ERROR, "%{public}@ThreadNetworkDiagnostics NeighborTable AverageRssi entry is not a number", buf, 0xCu);

              self = v65;
            }

            objc_autoreleasePoolPop(context);
          }

          v17 = v34;
        }
        else
        {
          v17 = v19;
        }
LABEL_53:

        v15 = v73 + 1;
        if (v73 + 1 == v69)
        {
          v13 = obj;
          v69 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
          if (!v69)
          {
LABEL_66:

            v58 = v64;
            v49 = v58;
            v6 = v60;
            v4 = v61;
            goto LABEL_67;
          }
          goto LABEL_12;
        }
      }
      v54 = (void *)MEMORY[0x242656984]();
      v55 = self;
      HMFGetOSLogHandle();
      v56 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v85 = (uint64_t)v57;
        v86 = 2112;
        v87 = v9;
        _os_log_impl(&dword_23E95B000, v56, OS_LOG_TYPE_ERROR, "%{public}@ThreadNetworkDiagnostics NeighborTable entry is not a structure but a %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v54);

      v13 = obj;
      v49 = 0;
      v6 = v60;
      v4 = v61;
      v58 = v64;
LABEL_67:

    }
    else
    {
      v50 = (void *)MEMORY[0x242656984]();
      v51 = self;
      HMFGetOSLogHandle();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v85 = (uint64_t)v53;
        v86 = 2112;
        v87 = v9;
        _os_log_impl(&dword_23E95B000, v52, OS_LOG_TYPE_ERROR, "%{public}@ThreadNetworkDiagnostics NeighborTable attribute is not an array but a %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v50);
      v49 = 0;
    }

  }
  else
  {
    v45 = (void *)MEMORY[0x242656984]();
    v46 = self;
    HMFGetOSLogHandle();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v85 = (uint64_t)v48;
      _os_log_impl(&dword_23E95B000, v47, OS_LOG_TYPE_ERROR, "%{public}@NeighborTable missing from ThreadNetworkDiagnostics", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v45);
    v49 = 0;
  }

  return v49;
}

- (id)packetCountOfWiFiNetworkDiagnostics:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;

  v4 = a3;
  objc_msgSend(v4, "readAttributePacketUnicastTxCountWithParams:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_6;
  v7 = objc_msgSend(v6, "unsignedLongValue");
  objc_msgSend(v4, "readAttributePacketMulticastTxCountWithParams:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
    goto LABEL_6;
  v10 = objc_msgSend(v9, "unsignedLongValue");
  objc_msgSend(v4, "readAttributePacketUnicastRxCountWithParams:", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
    goto LABEL_6;
  v13 = objc_msgSend(v12, "unsignedLongValue");
  objc_msgSend(v4, "readAttributePacketMulticastRxCountWithParams:", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    v16 = objc_msgSend(v15, "unsignedLongValue");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v10 + v7 + v13 + v16));
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
LABEL_6:
    v17 = 0;
  }

  return v17;
}

- (id)errorCountOfWiFiNetworkDiagnostics:(id)a3
{
  void *v4;
  void *v5;

  objc_msgSend(a3, "readAttributeOverrunCountWithParams:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer numberOfReadValue:](self, "numberOfReadValue:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void __82__HMMTRAccessoryServer_Diagnostics__resetWiFiNetworkDiagnosticsCountForAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  HMMTRDeviceTopology *v7;
  void *v8;
  HMMTRDeviceTopology *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v16 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Resetting WiFiNetworkDiagnostics counters", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = [HMMTRDeviceTopology alloc];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMMTRDeviceTopology initWithNodeId:server:](v7, "initWithNodeId:server:", v8, *(_QWORD *)(a1 + 32));

    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "endpointsForHAPAccessory:topology:", *(_QWORD *)(a1 + 40), v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      buf[0] = 0;
      v11 = *(void **)(a1 + 32);
      objc_msgSend(v11, "matterDevice");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "wifiNetworkDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:", v10, v9, v12, buf);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 3221225472;
      v14[2] = __82__HMMTRAccessoryServer_Diagnostics__resetWiFiNetworkDiagnosticsCountForAccessory___block_invoke_147;
      v14[3] = &unk_250F223C0;
      v14[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v13, "resetCountsWithExpectedValues:expectedValueInterval:completion:", MEMORY[0x24BDBD1A8], &unk_250F3F2D0, v14);

    }
  }
}

void __82__HMMTRAccessoryServer_Diagnostics__resetWiFiNetworkDiagnosticsCountForAccessory___block_invoke_147(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Reset WiFiNetworkDiagnostics counters with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __84__HMMTRAccessoryServer_Diagnostics__resetThreadNetworkDiagnosticsCountForAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  HMMTRDeviceTopology *v7;
  void *v8;
  HMMTRDeviceTopology *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v16 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Resetting ThreadNetworkDiagnostics counters", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = [HMMTRDeviceTopology alloc];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMMTRDeviceTopology initWithNodeId:server:](v7, "initWithNodeId:server:", v8, *(_QWORD *)(a1 + 32));

    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "endpointsForHAPAccessory:topology:", *(_QWORD *)(a1 + 40), v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      buf[0] = 0;
      v11 = *(void **)(a1 + 32);
      objc_msgSend(v11, "matterDevice");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "threadNetworkDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:", v10, v9, v12, buf);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 3221225472;
      v14[2] = __84__HMMTRAccessoryServer_Diagnostics__resetThreadNetworkDiagnosticsCountForAccessory___block_invoke_145;
      v14[3] = &unk_250F223C0;
      v14[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v13, "resetCountsWithExpectedValues:expectedValueInterval:completion:", MEMORY[0x24BDBD1A8], &unk_250F3F2D0, v14);

    }
  }
}

void __84__HMMTRAccessoryServer_Diagnostics__resetThreadNetworkDiagnosticsCountForAccessory___block_invoke_145(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Reset ThreadNetworkDiagnostics counters with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __77__HMMTRAccessoryServer_Diagnostics__getThreadNetworkLinkQualityForAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  HMMTRDeviceTopology *v3;
  void *v4;
  HMMTRDeviceTopology *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  char v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = [HMMTRDeviceTopology alloc];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[HMMTRDeviceTopology initWithNodeId:server:](v3, "initWithNodeId:server:", v4, *(_QWORD *)(a1 + 32));

    if (v5)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      objc_msgSend(*(id *)(a1 + 32), "endpointsForHAPAccessory:topology:", *(_QWORD *)(a1 + 40), v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 0;
      v10 = *(void **)(a1 + 32);
      objc_msgSend(v10, "matterDevice");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "threadNetworkDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:", v9, v5, v11, &v26);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("threadNetwork_DiagnosticsSupported"));
        objc_msgSend(*(id *)(a1 + 32), "highestRSSIofThreadNetworkDiagnostics:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "highestRSSIofThreadNetworkDiagnostics:", v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          v15 = (void *)MEMORY[0x242656984]();
          v16 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v28 = v18;
            v29 = 2112;
            v30 = v14;
            _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - RSSI: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v15);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v14, CFSTR("threadNetwork_RSSI"));
        }
        v19 = *(void **)(a1 + 32);
        objc_msgSend(v12, "readAttributeNetworkNameWithParams:", 0);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "stringOfReadValue:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (v21)
        {
          v22 = (void *)MEMORY[0x242656984]();
          v23 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v28 = v25;
            v29 = 2112;
            v30 = v21;
            _os_log_impl(&dword_23E95B000, v24, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - Network Name: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v22);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v21, CFSTR("threadNetwork_Name"));
        }

      }
    }

  }
}

void __75__HMMTRAccessoryServer_Diagnostics__getWiFiNetworkLinkQualityForAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  HMMTRDeviceTopology *v3;
  void *v4;
  HMMTRDeviceTopology *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  char v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = [HMMTRDeviceTopology alloc];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[HMMTRDeviceTopology initWithNodeId:server:](v3, "initWithNodeId:server:", v4, *(_QWORD *)(a1 + 32));

    if (v5)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      objc_msgSend(*(id *)(a1 + 32), "endpointsForHAPAccessory:topology:", *(_QWORD *)(a1 + 40), v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 0;
      v10 = *(void **)(a1 + 32);
      objc_msgSend(v10, "matterDevice");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "wifiNetworkDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:", v9, v5, v11, &v20);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("wifiNetwork_DiagnosticsSupported"));
        v13 = *(void **)(a1 + 32);
        objc_msgSend(v12, "readAttributeRSSIWithParams:", 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "numberOfReadValue:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          v16 = (void *)MEMORY[0x242656984]();
          v17 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v22 = v19;
            v23 = 2112;
            v24 = v15;
            _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - RSSI: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v15, CFSTR("wifiNetwork_RSSI"));
        }

      }
    }

  }
}

void __69__HMMTRAccessoryServer_Diagnostics__getConnectNetworkIDForAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  HMMTRDeviceTopology *v3;
  void *v4;
  HMMTRDeviceTopology *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  char v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = [HMMTRDeviceTopology alloc];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[HMMTRDeviceTopology initWithNodeId:server:](v3, "initWithNodeId:server:", v4, *(_QWORD *)(a1 + 32));

    if (v5)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      objc_msgSend(*(id *)(a1 + 32), "endpointsForHAPAccessory:topology:", *(_QWORD *)(a1 + 40), v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 0;
      v10 = *(void **)(a1 + 32);
      objc_msgSend(v10, "matterDevice");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "networkCommissioningClusterFromEndpoints:topology:device:definitelyUnsupported:", v9, v5, v11, &v20);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        v13 = *(void **)(a1 + 32);
        objc_msgSend(v12, "readAttributeNetworksWithParams:", 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "connectedNetworkIDFromReadValue:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        v16 = (void *)MEMORY[0x242656984]();
        v17 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v22 = v19;
          v23 = 2112;
          v24 = v15;
          _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Found connected network ID: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v16);
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v15, CFSTR("network_ID"));

      }
    }

  }
}

void __78__HMMTRAccessoryServer_Diagnostics__getOperationalNetworkAddressForAccessory___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "_getOperationalNetworkAddressForAccessory:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void __76__HMMTRAccessoryServer_Diagnostics__getSupportedLinkLayerTypesForAccessory___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "_getSupportedLinkLayerTypesForAccessory:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t __66__HMMTRAccessoryServer_Diagnostics__getLinkLayerTypeForAccessory___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_getLinkLayerTypeForAccessory:", *(_QWORD *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void __78__HMMTRAccessoryServer_Diagnostics___readPastEventsFromAccessory_forClusters___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  objc_class *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD v15[5];
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!a3)
  {
    v20 = v3;
    v21 = v4;
    v6 = (objc_class *)MEMORY[0x24BDDB7F0];
    v7 = a2;
    v8 = objc_alloc_init(v6);
    objc_msgSend(v8, "setFilterByFabric:", 1);
    objc_msgSend(v8, "setMinEventNumber:", 0);
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "clientQueue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __78__HMMTRAccessoryServer_Diagnostics___readPastEventsFromAccessory_forClusters___block_invoke_2;
    v15[3] = &unk_250F20A98;
    v12 = *(void **)(a1 + 64);
    v15[4] = *(_QWORD *)(a1 + 56);
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v16 = v13;
    v17 = v14;
    v19 = *(_QWORD *)(a1 + 72);
    v18 = *(id *)(a1 + 32);
    objc_msgSend(v7, "readEventsWithEndpointID:clusterID:eventID:params:queue:completion:", v9, v10, 0, v8, v11, v15);

  }
}

void __78__HMMTRAccessoryServer_Diagnostics___readPastEventsFromAccessory_forClusters___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id obj;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t v31[128];
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(*(id *)(a1 + 48), "integerValue");
    *(_DWORD *)buf = 138544130;
    v33 = v10;
    v34 = 2112;
    v35 = v11;
    v36 = 2048;
    v37 = v12;
    v38 = 2112;
    v39 = v6;
    _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_DEBUG, "%{public}@[%@] Read diagnostic events for cluster ID 0x%lX, error: %@", buf, 0x2Au);

  }
  v25 = v6;

  objc_autoreleasePoolPop(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  obj = v5;
  v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v28 != v15)
          objc_enumerationMutation(obj);
        v17 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
        v18 = (void *)MEMORY[0x242656984]();
        v19 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "shortDescription");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v33 = v21;
          v34 = 2112;
          v35 = v22;
          v36 = 2112;
          v37 = v17;
          _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@[%@] Received diagnostic event %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v18);
        v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        objc_msgSend(*(id *)(a1 + 32), "_processEvent:", v17);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "addObject:", v24);

      }
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    }
    while (v14);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __68__HMMTRAccessoryServer_Diagnostics__collectDiagnosticsForAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  HMMTRDeviceTopology *v3;
  void *v4;
  HMMTRDeviceTopology *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  double v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  NSObject *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  NSObject *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  NSObject *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  NSObject *v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  NSObject *v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  NSObject *v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  NSObject *v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  NSObject *v90;
  id v91;
  void *v92;
  id v93;
  NSObject *v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  NSObject *v101;
  id v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  id v107;
  NSObject *v108;
  id v109;
  void *v110;
  void *v111;
  id v112;
  NSObject *v113;
  id v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  id v122;
  NSObject *v123;
  id v124;
  void *v125;
  void *v126;
  void *v127;
  id v128;
  NSObject *v129;
  id v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  id v135;
  NSObject *v136;
  id v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  id v142;
  NSObject *v143;
  id v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  id v149;
  NSObject *v150;
  id v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  id v156;
  NSObject *v157;
  id v158;
  void *v159;
  void *v160;
  void *v161;
  id v162;
  NSObject *v163;
  id v164;
  void *v165;
  void *v166;
  id v167;
  NSObject *v168;
  id v169;
  void *v170;
  void *v171;
  void *v172;
  id v173;
  NSObject *v174;
  id v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  id v180;
  NSObject *v181;
  id v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  id v187;
  NSObject *v188;
  id v189;
  void *v190;
  void *v191;
  char v192;
  uint8_t buf[4];
  id v194;
  __int16 v195;
  void *v196;
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = [HMMTRDeviceTopology alloc];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[HMMTRDeviceTopology initWithNodeId:server:](v3, "initWithNodeId:server:", v4, *(_QWORD *)(a1 + 32));

    if (v5)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      objc_msgSend(*(id *)(a1 + 32), "endpointsForHAPAccessory:topology:", *(_QWORD *)(a1 + 40), v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v192 = 0;
      v10 = *(void **)(a1 + 32);
      objc_msgSend(v10, "matterDevice");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "generalDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:", v9, v5, v11, &v192);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("general_DiagnosticsSupported"));
        v13 = *(void **)(a1 + 32);
        objc_msgSend(v12, "readAttributeRebootCountWithParams:", 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "numberOfReadValue:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          v16 = (void *)MEMORY[0x242656984]();
          v17 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v18 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v19 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v19;
            v195 = 2112;
            v196 = v15;
            _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_DEBUG, "%{public}@GeneralDiagnostics - RebootCount: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v15, CFSTR("general_RebootCount"));
        }
        v20 = *(void **)(a1 + 32);
        objc_msgSend(v12, "readAttributeUpTimeWithParams:", 0);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "numberOfReadValue:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        if (v22)
        {
          v23 = (void *)MEMORY[0x242656984]();
          v24 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v25 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v26 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v26;
            v195 = 2112;
            v196 = v22;
            _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_DEBUG, "%{public}@GeneralDiagnostics - UpTime: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v23);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v22, CFSTR("general_UpTime"));
          v27 = objc_alloc_init(MEMORY[0x24BDD1500]);
          objc_msgSend(MEMORY[0x24BDBCEA0], "localeWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "setLocale:", v28);

          objc_msgSend(v27, "setDateFormat:", CFSTR("yyyy-MM-dd' 'HH:mm:ss-ZZZZZ"));
          objc_msgSend(MEMORY[0x24BDBCF38], "timeZoneForSecondsFromGMT:", -28800);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "setTimeZone:", v29);

          objc_msgSend(MEMORY[0x24BDBCE60], "date");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "doubleValue");
          objc_msgSend(v30, "addTimeInterval:", -v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v27, "stringFromDate:", v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v33, CFSTR("general_LastRebootTime"));

        }
        v34 = *(void **)(a1 + 32);
        objc_msgSend(v12, "readAttributeTotalOperationalHoursWithParams:", 0);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "numberOfReadValue:", v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();

        if (v36)
        {
          v37 = (void *)MEMORY[0x242656984]();
          v38 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v39 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v40 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v40;
            v195 = 2112;
            v196 = v36;
            _os_log_impl(&dword_23E95B000, v39, OS_LOG_TYPE_DEBUG, "%{public}@GeneralDiagnostics - TotalOperationalHours: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v37);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v36, CFSTR("general_TotalOperationalHours"));
        }
        v41 = *(void **)(a1 + 32);
        objc_msgSend(v12, "readAttributeBootReasonWithParams:", 0);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "numberOfReadValue:", v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        if (v43)
        {
          v44 = (void *)MEMORY[0x242656984]();
          v45 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v46 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v47 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v47;
            v195 = 2112;
            v196 = v43;
            _os_log_impl(&dword_23E95B000, v46, OS_LOG_TYPE_DEBUG, "%{public}@GeneralDiagnostics - BootReason: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v44);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v43, CFSTR("general_BootReason"));
        }

      }
      else if (v192)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C0], CFSTR("general_DiagnosticsSupported"));
      }
      v48 = *(void **)(a1 + 32);
      objc_msgSend(v48, "matterDevice");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "threadNetworkDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:", v9, v5, v49, &v192);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      v191 = v12;
      if (v50)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("threadNetwork_DiagnosticsSupported"));
        v51 = *(void **)(a1 + 32);
        objc_msgSend(v50, "readAttributeFeatureMapWithParams:", 0);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "numberOfReadValue:", v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();

        if (v53)
        {
          v54 = (void *)MEMORY[0x242656984]();
          v55 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v56 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v57 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v57;
            v195 = 2112;
            v196 = v53;
            _os_log_impl(&dword_23E95B000, v56, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - FeatureMap: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v54);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v53, CFSTR("threadNetwork_DiagnosticsFeatureMap"));
        }
        if ((objc_msgSend(v53, "unsignedIntegerValue") & 8) != 0)
        {
          objc_msgSend(*(id *)(a1 + 32), "packetCountOfThreadNetworkDiagnostics:", v50);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          if (v59)
          {
            v60 = (void *)MEMORY[0x242656984]();
            v61 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v62 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v63 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v63;
              v195 = 2112;
              v196 = v59;
              _os_log_impl(&dword_23E95B000, v62, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - PacketCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v60);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v59, CFSTR("threadNetwork_PacketCount"));
          }
          v64 = *(void **)(a1 + 32);
          objc_msgSend(v50, "readAttributeTxUnicastCountWithParams:", 0);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v64, "numberOfReadValue:", v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();

          if (v66)
          {
            v67 = (void *)MEMORY[0x242656984]();
            v68 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v69 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v70 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v70;
              v195 = 2112;
              v196 = v66;
              _os_log_impl(&dword_23E95B000, v69, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - TxUnicastCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v67);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v66, CFSTR("threadNetwork_PacketTxUnicastCount"));
          }
          v71 = *(void **)(a1 + 32);
          objc_msgSend(v50, "readAttributeTxBroadcastCountWithParams:", 0);
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "numberOfReadValue:", v72);
          v73 = (void *)objc_claimAutoreleasedReturnValue();

          if (v73)
          {
            v74 = (void *)MEMORY[0x242656984]();
            v75 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v76 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v77 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v77;
              v195 = 2112;
              v196 = v73;
              _os_log_impl(&dword_23E95B000, v76, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - TxBroadcastCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v74);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v73, CFSTR("threadNetwork_PacketTxBroadcastCount"));
          }
          v78 = *(void **)(a1 + 32);
          objc_msgSend(v50, "readAttributeRxUnicastCountWithParams:", 0);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "numberOfReadValue:", v79);
          v80 = (void *)objc_claimAutoreleasedReturnValue();

          if (v80)
          {
            v81 = (void *)MEMORY[0x242656984]();
            v82 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v83 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v84 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v84;
              v195 = 2112;
              v196 = v80;
              _os_log_impl(&dword_23E95B000, v83, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - RxUnicastCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v81);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v80, CFSTR("threadNetwork_PacketRxUnicastCount"));
          }
          v85 = *(void **)(a1 + 32);
          objc_msgSend(v50, "readAttributeRxBroadcastCountWithParams:", 0);
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v85, "numberOfReadValue:", v86);
          v87 = (void *)objc_claimAutoreleasedReturnValue();

          if (v87)
          {
            v88 = (void *)MEMORY[0x242656984]();
            v89 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v90 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v91 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v91;
              v195 = 2112;
              v196 = v87;
              _os_log_impl(&dword_23E95B000, v90, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - RxBroadcastCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v88);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v87, CFSTR("threadNetwork_PacketRxBroadcastCount"));
          }
          objc_msgSend(*(id *)(a1 + 32), "errorCountOfThreadNetworkDiagnostics:", v50);
          v58 = (void *)objc_claimAutoreleasedReturnValue();

          if (v58)
          {
            v92 = (void *)MEMORY[0x242656984]();
            v93 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v94 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v95 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v95;
              v195 = 2112;
              v196 = v58;
              _os_log_impl(&dword_23E95B000, v94, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - ErrorCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v92);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v58, CFSTR("threadNetwork_ErrorCount"));
          }
        }
        else
        {
          v58 = 0;
        }
        if ((objc_msgSend(v53, "unsignedIntegerValue") & 2) != 0)
        {
          v97 = *(void **)(a1 + 32);
          objc_msgSend(v50, "readAttributeOverrunCountWithParams:", 0);
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v97, "numberOfReadValue:", v98);
          v96 = (void *)objc_claimAutoreleasedReturnValue();

          if (v96)
          {
            v99 = (void *)MEMORY[0x242656984]();
            v100 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v101 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v102 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v102;
              v195 = 2112;
              v196 = v96;
              _os_log_impl(&dword_23E95B000, v101, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - OverrunCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v99);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v96, CFSTR("threadNetwork_OverrunCount"));
          }
        }
        else
        {
          v96 = v58;
        }
        v103 = *(void **)(a1 + 32);
        objc_msgSend(v50, "readAttributeChannelWithParams:", 0);
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v103, "numberOfReadValue:", v104);
        v105 = (void *)objc_claimAutoreleasedReturnValue();

        if (v105)
        {
          v106 = (void *)MEMORY[0x242656984]();
          v107 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v108 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v109 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v109;
            v195 = 2112;
            v196 = v105;
            _os_log_impl(&dword_23E95B000, v108, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - ChannelNumber: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v106);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v105, CFSTR("threadNetwork_ChannelNumber"));
        }
        objc_msgSend(*(id *)(a1 + 32), "highestRSSIofThreadNetworkDiagnostics:", v50);
        v110 = (void *)objc_claimAutoreleasedReturnValue();

        if (v110)
        {
          v111 = (void *)MEMORY[0x242656984]();
          v112 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v113 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v114 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v114;
            v195 = 2112;
            v196 = v110;
            _os_log_impl(&dword_23E95B000, v113, OS_LOG_TYPE_DEBUG, "%{public}@ThreadNetworkDiagnostics - RSSI: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v111);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v110, CFSTR("threadNetwork_RSSI"));
        }

        v12 = v191;
      }
      else if (v192)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C0], CFSTR("threadNetwork_DiagnosticsSupported"));
      }
      v115 = *(void **)(a1 + 32);
      objc_msgSend(v115, "matterDevice");
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "wifiNetworkDiagnosticsClusterFromEndpoints:topology:device:definitelyUnsupported:", v9, v5, v116, &v192);
      v117 = (void *)objc_claimAutoreleasedReturnValue();

      if (v117)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("wifiNetwork_DiagnosticsSupported"));
        v118 = *(void **)(a1 + 32);
        objc_msgSend(v117, "readAttributeFeatureMapWithParams:", 0);
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v118, "numberOfReadValue:", v119);
        v120 = (void *)objc_claimAutoreleasedReturnValue();

        if (v120)
        {
          v121 = (void *)MEMORY[0x242656984]();
          v122 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v123 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v124 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v124;
            v195 = 2112;
            v196 = v120;
            _os_log_impl(&dword_23E95B000, v123, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - FeatureMap: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v121);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v120, CFSTR("wifiNetwork_DiagnosticsFeatureMap"));
        }
        v190 = v9;
        if ((objc_msgSend(v120, "unsignedIntegerValue") & 1) != 0)
        {
          objc_msgSend(*(id *)(a1 + 32), "packetCountOfWiFiNetworkDiagnostics:", v117);
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          if (v126)
          {
            v127 = (void *)MEMORY[0x242656984]();
            v128 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v129 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v130 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v130;
              v195 = 2112;
              v196 = v126;
              _os_log_impl(&dword_23E95B000, v129, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - PacketCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v127);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v126, CFSTR("wifiNetwork_PacketCount"));
          }
          v131 = *(void **)(a1 + 32);
          objc_msgSend(v117, "readAttributePacketUnicastTxCountWithParams:", 0);
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v131, "numberOfReadValue:", v132);
          v133 = (void *)objc_claimAutoreleasedReturnValue();

          if (v133)
          {
            v134 = (void *)MEMORY[0x242656984]();
            v135 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v136 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v137 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v137;
              v195 = 2112;
              v196 = v133;
              _os_log_impl(&dword_23E95B000, v136, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - PacketTxUnicastCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v134);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v133, CFSTR("wifiNetwork_PacketTxUnicastCount"));
          }
          v138 = *(void **)(a1 + 32);
          objc_msgSend(v117, "readAttributePacketMulticastTxCountWithParams:", 0);
          v139 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v138, "numberOfReadValue:", v139);
          v140 = (void *)objc_claimAutoreleasedReturnValue();

          if (v140)
          {
            v141 = (void *)MEMORY[0x242656984]();
            v142 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v143 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v144 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v144;
              v195 = 2112;
              v196 = v140;
              _os_log_impl(&dword_23E95B000, v143, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - PacketTxMulticastCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v141);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v140, CFSTR("wifiNetwork_PacketTxMulticastCount"));
          }
          v145 = *(void **)(a1 + 32);
          objc_msgSend(v117, "readAttributePacketUnicastRxCountWithParams:", 0);
          v146 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v145, "numberOfReadValue:", v146);
          v147 = (void *)objc_claimAutoreleasedReturnValue();

          if (v147)
          {
            v148 = (void *)MEMORY[0x242656984]();
            v149 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v150 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v151 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v151;
              v195 = 2112;
              v196 = v147;
              _os_log_impl(&dword_23E95B000, v150, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - PacketRxUnicastCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v148);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v147, CFSTR("wifiNetwork_PacketRxUnicastCount"));
          }
          v152 = *(void **)(a1 + 32);
          objc_msgSend(v117, "readAttributePacketMulticastRxCountWithParams:", 0);
          v153 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v152, "numberOfReadValue:", v153);
          v154 = (void *)objc_claimAutoreleasedReturnValue();

          if (v154)
          {
            v155 = (void *)MEMORY[0x242656984]();
            v156 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v157 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v158 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v158;
              v195 = 2112;
              v196 = v154;
              _os_log_impl(&dword_23E95B000, v157, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - PacketRxMulticastCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v155);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v154, CFSTR("wifiNetwork_PacketRxMulticastCount"));
          }
          v159 = *(void **)(a1 + 32);
          objc_msgSend(v117, "readAttributeBeaconRxCountWithParams:", 0);
          v160 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v159, "numberOfReadValue:", v160);
          v125 = (void *)objc_claimAutoreleasedReturnValue();

          if (v125)
          {
            v161 = (void *)MEMORY[0x242656984]();
            v162 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v163 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v164 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v164;
              v195 = 2112;
              v196 = v125;
              _os_log_impl(&dword_23E95B000, v163, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - BeaconRxCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v161);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v125, CFSTR("wifiNetwork_BeaconRxCount"));
          }
        }
        else
        {
          v125 = 0;
        }
        if ((objc_msgSend(v120, "unsignedIntegerValue") & 2) != 0)
        {
          objc_msgSend(*(id *)(a1 + 32), "errorCountOfWiFiNetworkDiagnostics:", v117);
          v165 = (void *)objc_claimAutoreleasedReturnValue();

          if (v165)
          {
            v166 = (void *)MEMORY[0x242656984]();
            v167 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v168 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v169 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v169;
              v195 = 2112;
              v196 = v165;
              _os_log_impl(&dword_23E95B000, v168, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - ErrorCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v166);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v165, CFSTR("wifiNetwork_ErrorCount"));
          }
          v170 = *(void **)(a1 + 32);
          objc_msgSend(v117, "readAttributeBeaconLostCountWithParams:", 0);
          v171 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v170, "numberOfReadValue:", v171);
          v125 = (void *)objc_claimAutoreleasedReturnValue();

          if (v125)
          {
            v172 = (void *)MEMORY[0x242656984]();
            v173 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v174 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v175 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v194 = v175;
              v195 = 2112;
              v196 = v125;
              _os_log_impl(&dword_23E95B000, v174, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - BeaconLostCount: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v172);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v125, CFSTR("wifiNetwork_BeaconLostCount"));
          }
        }
        v176 = *(void **)(a1 + 32);
        objc_msgSend(v117, "readAttributeChannelNumberWithParams:", 0);
        v177 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v176, "numberOfReadValue:", v177);
        v178 = (void *)objc_claimAutoreleasedReturnValue();

        if (v178)
        {
          v179 = (void *)MEMORY[0x242656984]();
          v180 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v181 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v182 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v182;
            v195 = 2112;
            v196 = v178;
            _os_log_impl(&dword_23E95B000, v181, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - ChannelNumber: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v179);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v178, CFSTR("wifiNetwork_ChannelNumber"));
        }
        v183 = *(void **)(a1 + 32);
        objc_msgSend(v117, "readAttributeRSSIWithParams:", 0);
        v184 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v183, "numberOfReadValue:", v184);
        v185 = (void *)objc_claimAutoreleasedReturnValue();

        v9 = v190;
        if (v185)
        {
          v186 = (void *)MEMORY[0x242656984]();
          v187 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v188 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v189 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v194 = v189;
            v195 = 2112;
            v196 = v185;
            _os_log_impl(&dword_23E95B000, v188, OS_LOG_TYPE_DEBUG, "%{public}@WiFiNetworkDiagnostics - RSSI: %@", buf, 0x16u);

            v9 = v190;
          }

          objc_autoreleasePoolPop(v186);
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v185, CFSTR("wifiNetwork_RSSI"));
        }

        v12 = v191;
      }
      else if (v192)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C0], CFSTR("wifiNetwork_DiagnosticsSupported"));
      }

    }
  }
}

- (void)_pairOnSystemCommissionerFabricUnlessAlreadyPairedWithRootPublicKey:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = a3;
  -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](self, "_notifyDelegateOfPairingStep:", 10);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __119__HMMTRAccessoryServer_SystemCommissionerPairing___pairOnSystemCommissionerFabricUnlessAlreadyPairedWithRootPublicKey___block_invoke;
  v6[3] = &unk_250F22EE0;
  v6[4] = self;
  v7 = v4;
  v5 = v4;
  -[HMMTRAccessoryServer fetchPairingsWithCompletionHandler:](self, "fetchPairingsWithCompletionHandler:", v6);

}

- (void)_pairOnSystemCommissionerFabric
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMMTRAccessoryServer *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char **__ptr32 *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  HMMTRAccessoryServer *v28;
  NSObject *v29;
  void *v30;
  char **__ptr32 *v31;
  void *v32;
  HMMTRAccessoryServer *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  HMMTRAccessoryServer *v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  uint64_t v42;
  _QWORD block[6];
  _QWORD v44[5];
  NSObject *v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](-[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](self, "_notifyDelegateOfPairingStep:", 13));
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v47 = v6;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@Pairing with system commissioner fabric after successful Apple Home pairing", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMMTRAccessoryServer setBlockInvalidation:](v4, "setBlockInvalidation:", 1);
  v7 = random();
  v8 = (void *)MEMORY[0x242656984]();
  v9 = v4;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v47 = v11;
    v48 = 2048;
    v49 = v7;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Commissioning with system commissioner fabric job(%lu) queued.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v12 = (void *)MEMORY[0x242656984]();
  v13 = v9;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v47 = v15;
    v48 = 2048;
    v49 = v7;
    _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Commissioning with system commissioner fabric job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  v16 = dispatch_group_create();
  dispatch_group_enter(v16);
  -[HMMTRAccessoryServer deviceController](v13, "deviceController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    v18 = (void *)MEMORY[0x24BDDB598];
    -[HMMTRAccessoryServer nodeID](v13, "nodeID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "deviceWithNodeID:controller:", v19, v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = MEMORY[0x24BDAC760];
    v22 = &off_23EA7F000;
    if (v20)
    {
      v42 = v7;
      -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](v13, "_notifyDelegateOfPairingStep:", 14);
      v23 = objc_alloc(MEMORY[0x24BDDB580]);
      -[HAPAccessoryServer clientQueue](v13, "clientQueue");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = (void *)objc_msgSend(v23, "initWithDevice:endpointID:queue:", v20, &unk_250F3F468, v24);

      v26 = objc_alloc_init(MEMORY[0x24BDDB758]);
      objc_msgSend(v26, "setExpiryLengthSeconds:", &unk_250F3F480);
      v27 = (void *)MEMORY[0x242656984](objc_msgSend(v26, "setBreadcrumb:", &unk_250F3F468));
      v28 = v13;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v47 = v30;
        _os_log_impl(&dword_23E95B000, v29, OS_LOG_TYPE_INFO, "%{public}@Arming fail safe", buf, 0xCu);

        v22 = &off_23EA7F000;
      }

      objc_autoreleasePoolPop(v27);
      v21 = MEMORY[0x24BDAC760];
      v44[0] = MEMORY[0x24BDAC760];
      v44[1] = *((_QWORD *)v22 + 83);
      v44[2] = __82__HMMTRAccessoryServer_SystemCommissionerPairing___pairOnSystemCommissionerFabric__block_invoke;
      v44[3] = &unk_250F20C00;
      v44[4] = v28;
      v45 = v16;
      objc_msgSend(v25, "armFailSafeWithParams:completion:", v26, v44);

      v7 = v42;
      v31 = v22;
    }
    else
    {
      v37 = (void *)MEMORY[0x242656984]();
      v38 = v13;
      HMFGetOSLogHandle();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v47 = v40;
        _os_log_impl(&dword_23E95B000, v39, OS_LOG_TYPE_ERROR, "%{public}@Could not commission system commissioner fabric because no device was paired", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v37);
      dispatch_group_leave(v16);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 13, v25);
      v26 = (id)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v38, "_handlePairingFailureWithError:context:", v25, v26);
      v31 = &off_23EA7F000;
    }

    -[HAPAccessoryServer clientQueue](v13, "clientQueue");
    v41 = objc_claimAutoreleasedReturnValue();
    block[0] = v21;
    block[1] = *((_QWORD *)v31 + 83);
    block[2] = __82__HMMTRAccessoryServer_SystemCommissionerPairing___pairOnSystemCommissionerFabric__block_invoke_11;
    block[3] = &unk_250F226B0;
    block[4] = v13;
    block[5] = v7;
    dispatch_group_notify(v16, v41, block);

  }
  else
  {
    v32 = (void *)MEMORY[0x242656984]();
    v33 = v13;
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v47 = v35;
      _os_log_impl(&dword_23E95B000, v34, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to commission with system commissioner fabric", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v32);
    dispatch_group_leave(v16);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 13, v20);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v33, "_handlePairingFailureWithError:context:", v20, v36);

  }
}

- (void)_handleArmFailSafeResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup:(id)a3 error:(id)a4
{
  NSObject *v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMMTRAccessoryServer *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  int v25;
  void *v26;
  HMMTRAccessoryServer *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  HMMTRAccessoryServer *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  HMMTRAccessoryServer *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  _QWORD v39[5];
  NSObject *v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x242656984]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v42 = v11;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Handling Arm fail safe response", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  if (v7)
  {
    v12 = (void *)MEMORY[0x242656984]();
    v13 = v9;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v42 = v15;
      v43 = 2112;
      v44 = v7;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to arm fail safe with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    dispatch_group_leave(v6);
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 14, v7);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v13, "_handlePairingFailureWithError:context:", v7, v16);
  }
  else
  {
    -[HMMTRAccessoryServer deviceController](v9, "deviceController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      v17 = (void *)MEMORY[0x24BDDB598];
      -[HMMTRAccessoryServer nodeID](v9, "nodeID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "deviceWithNodeID:controller:", v18, v16);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19)
      {
        -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](v9, "_notifyDelegateOfPairingStep:", 15);
        v20 = objc_alloc(MEMORY[0x24BDDB590]);
        -[HAPAccessoryServer clientQueue](v9, "clientQueue");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = (void *)objc_msgSend(v20, "initWithDevice:endpointID:queue:", v19, &unk_250F3F468, v21);

        v23 = objc_alloc_init(MEMORY[0x24BDDB7C8]);
        objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithCapacity:", 32);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 8;
        do
        {
          *(_DWORD *)buf = 0;
          *(_DWORD *)buf = arc4random();
          objc_msgSend(v24, "appendBytes:length:", buf, 4);
          --v25;
        }
        while (v25);
        v26 = (void *)MEMORY[0x242656984](objc_msgSend(v23, "setCsrNonce:", v24));
        v27 = v9;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = v26;
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v42 = v29;
          _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_INFO, "%{public}@Sending CSRRequest", buf, 0xCu);

          v26 = v38;
        }

        objc_autoreleasePoolPop(v26);
        v39[0] = MEMORY[0x24BDAC760];
        v39[1] = 3221225472;
        v39[2] = __144__HMMTRAccessoryServer_SystemCommissionerPairing___handleArmFailSafeResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup_error___block_invoke;
        v39[3] = &unk_250F20C28;
        v39[4] = v27;
        v40 = v6;
        objc_msgSend(v22, "CSRRequestWithParams:completion:", v23, v39);

      }
      else
      {
        v34 = (void *)MEMORY[0x242656984]();
        v35 = v9;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v42 = v37;
          _os_log_impl(&dword_23E95B000, v36, OS_LOG_TYPE_ERROR, "%{public}@Could not commission system commissioner fabric because no device was paired", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v34);
        dispatch_group_leave(v6);
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 14, v22);
        v23 = (id)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v35, "_handlePairingFailureWithError:context:", v22, v23);
      }

    }
    else
    {
      v30 = (void *)MEMORY[0x242656984]();
      v31 = v9;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v42 = v33;
        _os_log_impl(&dword_23E95B000, v32, OS_LOG_TYPE_ERROR, "%{public}@Accessory server disabled. Aborting system commissioner fabric commissioning.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v30);
      dispatch_group_leave(v6);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 14, v19);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v31, "_handlePairingFailureWithError:context:", v19, v22);
    }

  }
}

- (void)_handleCSRResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup:(id)a3 responseParams:(id)a4 error:(id)a5
{
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  HMMTRAccessoryServer *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD v34[5];
  NSObject *v35;
  id v36;
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x242656984]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v10)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v15;
      v40 = 2112;
      v41 = v10;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed CSR request with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    dispatch_group_leave(v8);
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 15, v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v12, "_handlePairingFailureWithError:context:", v10, v16);
  }
  else
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v17;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling CSRResponse", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    -[HMMTRAccessoryServer deviceController](v12, "deviceController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      v18 = (void *)MEMORY[0x24BDDB598];
      -[HMMTRAccessoryServer nodeID](v12, "nodeID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "deviceWithNodeID:controller:", v19, v16);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20)
      {
        -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](v12, "_notifyDelegateOfPairingStep:", 16);
        -[HMMTRAccessoryServer browser](v12, "browser");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v34[0] = MEMORY[0x24BDAC760];
        v34[1] = 3221225472;
        v34[2] = __151__HMMTRAccessoryServer_SystemCommissionerPairing___handleCSRResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup_responseParams_error___block_invoke;
        v34[3] = &unk_250F20C78;
        v34[4] = v12;
        v35 = v8;
        v36 = v9;
        v22 = v20;
        v37 = v22;
        objc_msgSend(v21, "fetchSystemCommissionerRootCertificateWithCompletion:", v34);

      }
      else
      {
        v28 = (void *)MEMORY[0x242656984]();
        v29 = v12;
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v39 = v31;
          v40 = 2112;
          v41 = 0;
          _os_log_impl(&dword_23E95B000, v30, OS_LOG_TYPE_ERROR, "%{public}@Could not commission system commissioner fabric because no device was paired: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v28);
        dispatch_group_leave(v8);
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 15, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v29, "_handlePairingFailureWithError:context:", v32, v33);

        v22 = 0;
      }
    }
    else
    {
      v23 = (void *)MEMORY[0x242656984]();
      v24 = v12;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v26;
        _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_ERROR, "%{public}@Accessory server disabled. Aborting system commissioner fabric commissioning.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      dispatch_group_leave(v8);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
      v22 = (id)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 15, v22);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v24, "_handlePairingFailureWithError:context:", v22, v27);

    }
  }

}

- (void)_handleSystemCommissionerRootCertificate:(id)a3 fabricID:(id)a4 ipk:(id)a5 controllerNodeID:(id)a6 dispatchGroup:(id)a7 csrResponseParams:(id)a8 device:(id)a9
{
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  HMMTRAccessoryServer *v27;
  NSObject *v28;
  id v29;
  NSObject *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMMTRAccessoryServer *v38;
  NSObject *v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  _QWORD v49[5];
  NSObject *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint8_t buf[4];
  void *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v15 = a3;
  v48 = a4;
  v47 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = objc_alloc(MEMORY[0x24BDDB590]);
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (void *)objc_msgSend(v20, "initWithDevice:endpointID:queue:", v19, &unk_250F3F468, v21);

  v23 = objc_alloc_init(MEMORY[0x24BDDB7C0]);
  objc_msgSend(MEMORY[0x24BDDB5B0], "convertX509Certificate:", v15);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setRootCertificate:", v24);

  objc_msgSend(v23, "rootCertificate");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (v25)
  {
    v26 = (void *)MEMORY[0x242656984](-[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](self, "_notifyDelegateOfPairingStep:", 17));
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v45 = v15;
      v29 = v19;
      v30 = v17;
      v31 = v22;
      v32 = v18;
      v33 = v16;
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v57 = v34;
      _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_INFO, "%{public}@Adding trusted root certificate", buf, 0xCu);

      v16 = v33;
      v18 = v32;
      v22 = v31;
      v17 = v30;
      v19 = v29;
      v15 = v45;
    }

    objc_autoreleasePoolPop(v26);
    v49[0] = MEMORY[0x24BDAC760];
    v49[1] = 3221225472;
    v49[2] = __161__HMMTRAccessoryServer_SystemCommissionerPairing___handleSystemCommissionerRootCertificate_fabricID_ipk_controllerNodeID_dispatchGroup_csrResponseParams_device___block_invoke;
    v49[3] = &unk_250F20CA0;
    v49[4] = v27;
    v50 = v17;
    v51 = v18;
    v35 = v48;
    v52 = v48;
    v53 = v15;
    v36 = v47;
    v54 = v47;
    v55 = v16;
    objc_msgSend(v22, "addTrustedRootCertificateWithParams:completion:", v23, v49);

  }
  else
  {
    v37 = (void *)MEMORY[0x242656984]();
    v38 = self;
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v46 = v22;
      v40 = v18;
      v41 = v16;
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v57 = v42;
      _os_log_impl(&dword_23E95B000, v39, OS_LOG_TYPE_ERROR, "%{public}@Failed to convert root CA cert to Matter certificate", buf, 0xCu);

      v16 = v41;
      v18 = v40;
      v22 = v46;
    }

    objc_autoreleasePoolPop(v37);
    dispatch_group_leave(v17);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 16, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v38, "_handlePairingFailureWithError:context:", v43, v44);

    v36 = v47;
    v35 = v48;
  }

}

- (void)_handleAddTrustedRootCertificateCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup:(id)a3 fabricID:(id)a4 rootCACert:(id)a5 operationalPublicKey:(__SecKey *)a6 ipk:(id)a7 controllerNodeID:(id)a8
{
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  HMMTRAccessoryServer *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  HMMTRAccessoryServer *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  HMMTRAccessoryServer *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD v40[5];
  NSObject *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  __SecKey *v47;
  uint8_t buf[4];
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a7;
  v18 = a8;
  v19 = (void *)MEMORY[0x242656984]();
  v20 = self;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v49 = v22;
    _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_INFO, "%{public}@Handling AddTrustedRootCert response", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v19);
  -[HMMTRAccessoryServer deviceController](v20, "deviceController");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (v23)
  {
    v24 = (void *)MEMORY[0x24BDDB598];
    -[HMMTRAccessoryServer nodeID](v20, "nodeID");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "deviceWithNodeID:controller:", v25, v23);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (v26)
    {
      -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](v20, "_notifyDelegateOfPairingStep:", 18);
      -[HMMTRAccessoryServer browser](v20, "browser");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v40[0] = MEMORY[0x24BDAC760];
      v40[1] = 3221225472;
      v40[2] = __216__HMMTRAccessoryServer_SystemCommissionerPairing___handleAddTrustedRootCertificateCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup_fabricID_rootCACert_operationalPublicKey_ipk_controllerNodeID___block_invoke;
      v40[3] = &unk_250F20CF0;
      v40[4] = v20;
      v41 = v14;
      v42 = v15;
      v43 = v16;
      v47 = a6;
      v44 = v17;
      v45 = v18;
      v28 = v26;
      v46 = v28;
      objc_msgSend(v27, "createNewSystemCommissionerFabricNodeIDWithCompletion:", v40);

    }
    else
    {
      v34 = (void *)MEMORY[0x242656984]();
      v35 = v20;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v49 = v37;
        _os_log_impl(&dword_23E95B000, v36, OS_LOG_TYPE_ERROR, "%{public}@Could not commission system commissioner fabric because no device was paired", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v34);
      dispatch_group_leave(v14);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 17, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v35, "_handlePairingFailureWithError:context:", v38, v39);

      v28 = 0;
    }
  }
  else
  {
    v29 = (void *)MEMORY[0x242656984]();
    v30 = v20;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v49 = v32;
      _os_log_impl(&dword_23E95B000, v31, OS_LOG_TYPE_ERROR, "%{public}@Accessory server disabled. Aborting system commissioner fabric commissioning.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v29);
    dispatch_group_leave(v14);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v28 = (id)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 17, v28);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v30, "_handlePairingFailureWithError:context:", v28, v33);

  }
}

- (void)_handleNewSystemCommissionerFabricNodeID:(id)a3 dispatchGroup:(id)a4 fabricID:(id)a5 rootCACert:(id)a6 operationalPublicKey:(__SecKey *)a7 ipk:(id)a8 controllerNodeID:(id)a9 device:(id)a10
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  HMMTRAccessoryServer *v29;
  NSObject *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMMTRAccessoryServer *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  HMMTRAccessoryServer *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  NSObject *group;
  id v49;
  id v50;
  _QWORD v51[5];
  NSObject *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  id v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v16 = a3;
  group = a4;
  v17 = a5;
  v18 = a6;
  v50 = a8;
  v49 = a9;
  v19 = a10;
  v20 = objc_alloc(MEMORY[0x24BDDB590]);
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = v19;
  v46 = (void *)objc_msgSend(v20, "initWithDevice:endpointID:queue:", v19, &unk_250F3F468, v21);

  v22 = objc_alloc_init(MEMORY[0x24BDDB7B8]);
  -[HMMTRAccessoryServer browser](self, "browser");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = 0;
  objc_msgSend(v23, "createSystemCommissionerFabricNOCWithSigningCertificate:operationalPublicKey:fabricID:nodeID:caseAuthenticatedTags:error:", v18, a7, v17, v16, 0, &v58);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v58;

  if (!v24)
  {
    v36 = (void *)MEMORY[0x242656984]();
    v37 = self;
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v60 = v39;
      v61 = 2112;
      v62 = v25;
      _os_log_impl(&dword_23E95B000, v38, OS_LOG_TYPE_ERROR, "%{public}@Failed to create system fabric NOC: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v36);
    v32 = group;
    dispatch_group_leave(group);
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 18, v25);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v37, "_handlePairingFailureWithError:context:", v25, v40);
    goto LABEL_12;
  }
  objc_msgSend(MEMORY[0x24BDDB5B0], "convertX509Certificate:", v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setNocValue:", v26);

  objc_msgSend(v22, "nocValue");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v27)
  {
    v41 = (void *)MEMORY[0x242656984]();
    v42 = self;
    HMFGetOSLogHandle();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v60 = v44;
      _os_log_impl(&dword_23E95B000, v43, OS_LOG_TYPE_ERROR, "%{public}@Failed to convert NOC to TLV format", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v41);
    v32 = group;
    dispatch_group_leave(group);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 18, v40);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v42, "_handlePairingFailureWithError:context:", v40, v45);

LABEL_12:
    v34 = v49;
    v33 = v50;
    v35 = v46;
    goto LABEL_13;
  }
  objc_msgSend(v22, "setIpkValue:", v50);
  objc_msgSend(v22, "setCaseAdminSubject:", v49);
  objc_msgSend(v22, "setAdminVendorId:", &unk_250F3F498);
  v28 = (void *)MEMORY[0x242656984](-[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](self, "_notifyDelegateOfPairingStep:", 19));
  v29 = self;
  HMFGetOSLogHandle();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v60 = v31;
    v61 = 2112;
    v62 = v16;
    _os_log_impl(&dword_23E95B000, v30, OS_LOG_TYPE_INFO, "%{public}@Adding NOC for System Commissioner with node ID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v28);
  v51[0] = MEMORY[0x24BDAC760];
  v51[1] = 3221225472;
  v51[2] = __175__HMMTRAccessoryServer_SystemCommissionerPairing___handleNewSystemCommissionerFabricNodeID_dispatchGroup_fabricID_rootCACert_operationalPublicKey_ipk_controllerNodeID_device___block_invoke;
  v51[3] = &unk_250F20D18;
  v51[4] = v29;
  v32 = group;
  v52 = group;
  v53 = v17;
  v54 = v18;
  v33 = v50;
  v55 = v50;
  v34 = v49;
  v56 = v49;
  v57 = v16;
  v35 = v46;
  objc_msgSend(v46, "addNOCWithParams:completion:", v22, v51);

LABEL_13:
}

- (void)_handleAddNocCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup:(id)a3 fabricID:(id)a4 rootCACert:(id)a5 ipk:(id)a6 controllerNodeID:(id)a7 commissioneeNodeID:(id)a8 error:(id)a9
{
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  HMMTRAccessoryServer *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMMTRAccessoryServer *v26;
  NSObject *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMMTRAccessoryServer *v34;
  NSObject *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  _QWORD v44[5];
  id v45;
  NSObject *v46;
  id v47;
  id v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v15 = a3;
  v43 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v21 = (void *)MEMORY[0x242656984]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v50 = v24;
    _os_log_impl(&dword_23E95B000, v23, OS_LOG_TYPE_INFO, "%{public}@Handling Add NOC response", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
  if (v20)
  {
    v25 = (void *)MEMORY[0x242656984]();
    v26 = v22;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v50 = v28;
      v51 = 2112;
      v52 = v20;
      _os_log_impl(&dword_23E95B000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to add noc with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    dispatch_group_leave(v15);
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 19, v20);
    v29 = (id)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v26, "_handlePairingFailureWithError:context:", v20, v29);
LABEL_7:
    v30 = v43;
    goto LABEL_12;
  }
  -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](v22, "_notifyDelegateOfPairingStep:", 20);
  -[HMMTRAccessoryServer storage](v22, "storage");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "endLocalStorageModeByPersistingAppleFabricData");

  -[HMMTRAccessoryServer browser](v22, "browser");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = (void *)MEMORY[0x242656984]();
  v34 = v22;
  HMFGetOSLogHandle();
  v35 = objc_claimAutoreleasedReturnValue();
  v36 = v35;
  if (!v32)
  {
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v50 = v39;
      _os_log_impl(&dword_23E95B000, v36, OS_LOG_TYPE_ERROR, "%{public}@Accessory Server Browser disappeared. Aborting pairing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v33);
    dispatch_group_leave(v15);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 1, 0);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 20, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v34, "_handlePairingFailureWithError:context:", v40, v41);

    v29 = 0;
    goto LABEL_7;
  }
  v42 = v16;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v50 = v37;
    _os_log_impl(&dword_23E95B000, v36, OS_LOG_TYPE_INFO, "%{public}@Switching to System Commissioner Fabric to complete commissioning...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v33);
  -[HAPAccessoryServer clientQueue](v34, "clientQueue");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v44[0] = MEMORY[0x24BDAC760];
  v44[1] = 3221225472;
  v44[2] = __201__HMMTRAccessoryServer_SystemCommissionerPairing___handleAddNocCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup_fabricID_rootCACert_ipk_controllerNodeID_commissioneeNodeID_error___block_invoke;
  v44[3] = &unk_250F20D40;
  v44[4] = v34;
  v29 = v32;
  v45 = v29;
  v46 = v15;
  v30 = v43;
  v47 = v43;
  v48 = v19;
  objc_msgSend(v29, "finishSystemCommissionerFabricCommissioningWithFabricID:rootCACert:ipk:controllerNodeID:commissioneeNodeID:queue:completion:", v47, v42, v17, v18, v48, v38, v44);

  v16 = v42;
LABEL_12:

}

void __201__HMMTRAccessoryServer_SystemCommissionerPairing___handleAddNocCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup_fabricID_rootCACert_ipk_controllerNodeID_commissioneeNodeID_error___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  char v55;
  uint64_t v56;
  void *v57;
  void *v58;
  char v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  int v77;
  void *v78;
  __int16 v79;
  id v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v8)
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v77 = 138543618;
      v78 = v13;
      v79 = 2112;
      v80 = v8;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to finish commissioning for System Commissioner with error: %@", (uint8_t *)&v77, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 32), "storage");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "endLocalStorageModeBySyncingToRemote:", 0);

    v15 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "fabricID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setupStorageStateForHomeFabricID:", v16);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v8, v9);
    goto LABEL_29;
  }
  v17 = (void *)MEMORY[0x242656984](objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingStep:", 22));
  v18 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = *(void **)(a1 + 56);
    v77 = 138543618;
    v78 = v20;
    v79 = 2112;
    v80 = v21;
    _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_INFO, "%{public}@Successfully commissioned accessory to System Commissioner Fabric (%@), updating storage", (uint8_t *)&v77, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  objc_msgSend(*(id *)(a1 + 32), "storage");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "addPairedNodeID:toSystemCommissionerFabric:", *(_QWORD *)(a1 + 64), 1);

  objc_msgSend(*(id *)(a1 + 32), "storage");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMTRStorage formatKeyForNodeId:key:](HMMTRStorage, "formatKeyForNodeId:key:", *(_QWORD *)(a1 + 64), CFSTR("HMD.MTRPlugin.VendorID."));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "vendorID");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setValueForKey:value:systemCommissionerFabric:", v24, v25, 1);

  objc_msgSend(*(id *)(a1 + 32), "storage");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMTRStorage formatKeyForNodeId:key:](HMMTRStorage, "formatKeyForNodeId:key:", *(_QWORD *)(a1 + 64), CFSTR("HMD.MTRPlugin.FabricIndex."));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setValueForKey:value:systemCommissionerFabric:", v27, *(_QWORD *)(a1 + 56), 1);

  objc_msgSend(*(id *)(a1 + 32), "storage");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMTRStorage formatKeyForNodeId:key:](HMMTRStorage, "formatKeyForNodeId:key:", *(_QWORD *)(a1 + 64), CFSTR("HMD.MTRPlugin.ProductID."));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "productID");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setValueForKey:value:systemCommissionerFabric:", v29, v30, 1);

  objc_msgSend(*(id *)(a1 + 32), "storage");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMTRStorage formatKeyForNodeId:key:](HMMTRStorage, "formatKeyForNodeId:key:", *(_QWORD *)(a1 + 64), CFSTR("HMD.MTRPlugin.Category."));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "category");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setValueForKey:value:systemCommissionerFabric:", v32, v33, 1);

  objc_msgSend(*(id *)(a1 + 32), "storage");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMTRStorage formatKeyForNodeId:key:](HMMTRStorage, "formatKeyForNodeId:key:", *(_QWORD *)(a1 + 64), CFSTR("HMD.MTRPlugin.ConfigNumber."));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "configNumber"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "setValueForKey:value:systemCommissionerFabric:", v35, v36, 1);

  objc_msgSend(*(id *)(a1 + 32), "storage");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMTRStorage formatKeyForNodeId:key:](HMMTRStorage, "formatKeyForNodeId:key:", *(_QWORD *)(a1 + 64), CFSTR("HMD.MTRPlugin.Staged."));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "setValueForKey:value:systemCommissionerFabric:", v38, MEMORY[0x24BDBD1C0], 1);

  objc_msgSend(*(id *)(a1 + 32), "topology");
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  if (v39)
  {
    objc_msgSend(*(id *)(a1 + 32), "storage");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRStorage formatKeyForNodeId:key:](HMMTRStorage, "formatKeyForNodeId:key:", *(_QWORD *)(a1 + 64), CFSTR("HMD.MTRPlugin.Topology."));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "topology");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "base64EncodedStringWithOptions:", 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setValueForKey:value:systemCommissionerFabric:", v41, v43, 1);

  }
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "storage");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "UUIDString");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("HMD.MTRPlugin.MTS.NodeIDForUUID."), "stringByAppendingString:", v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "setValueForKey:value:systemCommissionerFabric:", v47, *(_QWORD *)(a1 + 64), 1);

  objc_msgSend(*(id *)(a1 + 32), "storage");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "setUuid:forSystemCommissionerFabricNode:", v44, *(_QWORD *)(a1 + 64));

  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "storage");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setSerialNumber:forSystemCommissionerFabricNode:", v7, *(_QWORD *)(a1 + 64));

  }
  objc_msgSend(*(id *)(a1 + 32), "storage");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "name");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "setDeviceName:forSystemCommissionerFabricNode:", v51, *(_QWORD *)(a1 + 64));

  objc_msgSend(*(id *)(a1 + 32), "setupPayloadString");
  v52 = objc_claimAutoreleasedReturnValue();
  if (v52
    && (v53 = (void *)v52,
        objc_msgSend(*(id *)(a1 + 32), "setupPayloadString"),
        v54 = (void *)objc_claimAutoreleasedReturnValue(),
        v55 = objc_msgSend(v54, "isEqual:", &stru_250F24B08),
        v54,
        v53,
        (v55 & 1) == 0))
  {
    objc_msgSend(*(id *)(a1 + 32), "storage");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setupPayloadString");
    v61 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "onboardingSetupPayloadString");
    v56 = objc_claimAutoreleasedReturnValue();
    if (!v56)
      goto LABEL_18;
    v57 = (void *)v56;
    objc_msgSend(*(id *)(a1 + 32), "onboardingSetupPayloadString");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v58, "isEqual:", &stru_250F24B08);

    if ((v59 & 1) != 0)
      goto LABEL_18;
    objc_msgSend(*(id *)(a1 + 32), "storage");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "onboardingSetupPayloadString");
    v61 = objc_claimAutoreleasedReturnValue();
  }
  v62 = (void *)v61;
  objc_msgSend(v60, "setSetupPayload:forSystemCommissionerFabricNode:", v61, *(_QWORD *)(a1 + 64));

LABEL_18:
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    objc_msgSend(*(id *)(a1 + 32), "storage");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "setWEDSupported:forSystemCommissionerFabricNode:", objc_msgSend(*(id *)(a1 + 32), "isWEDDevice"), *(_QWORD *)(a1 + 64));

    if (objc_msgSend(*(id *)(a1 + 32), "isWEDDevice"))
    {
      objc_msgSend(*(id *)(a1 + 32), "storage");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "eMACAddress");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "setExtendedMACAddress:forSystemCommissionerFabricNode:", v65, *(_QWORD *)(a1 + 64));

    }
  }
  v66 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "vendorID");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "productID");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setupPayloadString");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v69, "isEqual:", &stru_250F24B08))
  {
    objc_msgSend(v66, "cleanUpStaleSystemCommissionerPairingsWithNewlyPairedUUID:vendorID:productID:serialNumber:setupPayload:", v44, v67, v68, v7, 0);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setupPayloadString");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "cleanUpStaleSystemCommissionerPairingsWithNewlyPairedUUID:vendorID:productID:serialNumber:setupPayload:", v44, v67, v68, v7, v70);

  }
  v71 = (void *)MEMORY[0x242656984]();
  v72 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v73 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = 138543362;
    v78 = v74;
    _os_log_impl(&dword_23E95B000, v73, OS_LOG_TYPE_INFO, "%{public}@Successfully paired accessory into System Commissioner", (uint8_t *)&v77, 0xCu);

  }
  objc_autoreleasePoolPop(v71);

  v75 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "fabricID");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "setupStorageStateForHomeFabricID:", v76);

  if ((isFeatureMatteriPhoneOnlyPairingControlEnabled() & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setOperationDisabled:", 1);
    objc_msgSend(*(id *)(a1 + 32), "setOperationDisabledReason:", 1);
  }
  objc_msgSend(*(id *)(a1 + 32), "_handlePairOnSystemCommissionerFabricSuccess");
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
LABEL_29:

}

uint64_t __175__HMMTRAccessoryServer_SystemCommissionerPairing___handleNewSystemCommissionerFabricNodeID_dispatchGroup_fabricID_rootCACert_operationalPublicKey_ipk_controllerNodeID_device___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleAddNocCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup:fabricID:rootCACert:ipk:controllerNodeID:commissioneeNodeID:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), a3);
}

void __216__HMMTRAccessoryServer_SystemCommissionerPairing___handleAddTrustedRootCertificateCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup_fabricID_rootCACert_operationalPublicKey_ipk_controllerNodeID___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD block[5];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __216__HMMTRAccessoryServer_SystemCommissionerPairing___handleAddTrustedRootCertificateCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup_fabricID_rootCACert_operationalPublicKey_ipk_controllerNodeID___block_invoke_2;
  block[3] = &unk_250F20CC8;
  v5 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v10 = v3;
  v11 = v5;
  v12 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 88);
  v13 = v6;
  v17 = v7;
  v14 = *(id *)(a1 + 64);
  v15 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 80);
  v8 = v3;
  dispatch_async(v4, block);

}

uint64_t __216__HMMTRAccessoryServer_SystemCommissionerPairing___handleAddTrustedRootCertificateCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup_fabricID_rootCACert_operationalPublicKey_ipk_controllerNodeID___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleNewSystemCommissionerFabricNodeID:dispatchGroup:fabricID:rootCACert:operationalPublicKey:ipk:controllerNodeID:device:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
}

void __161__HMMTRAccessoryServer_SystemCommissionerPairing___handleSystemCommissionerRootCertificate_fabricID_ipk_controllerNodeID_dispatchGroup_csrResponseParams_device___block_invoke(uint64_t a1, void *a2)
{
  const __CFData *v3;
  const __CFData *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  const __CFData *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFDictionary *v15;
  SecKeyRef v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  const __CFData *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  __CFError *v30;
  void *v31;
  CFErrorRef v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  const __CFData *v37;
  __int16 v38;
  CFErrorRef v39;
  _QWORD v40[2];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v8;
      v36 = 2112;
      v37 = v4;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to add trusted root certificate with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 16, v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v4, v9);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "nocsrElements");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRTLVParser csrFromNOCSRElements:](HMMTRTLVParser, "csrFromNOCSRElements:", v10);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v33 = 0;
      objc_msgSend(MEMORY[0x24BDDB5B0], "publicKeyFromCSR:error:", v9, &v33);
      v11 = (const __CFData *)objc_claimAutoreleasedReturnValue();
      v4 = (const __CFData *)v33;
      if (v11)
      {
        v12 = *MEMORY[0x24BDE9060];
        v13 = *MEMORY[0x24BDE9028];
        v40[0] = *MEMORY[0x24BDE9050];
        v40[1] = v13;
        v14 = *MEMORY[0x24BDE9038];
        v41[0] = v12;
        v41[1] = v14;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v41, v40, 2);
        v15 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        v32 = 0;
        v16 = SecKeyCreateWithData(v11, v15, &v32);
        if (v16)
        {
          objc_msgSend(*(id *)(a1 + 32), "_handleAddTrustedRootCertificateCompletionDuringSystemCommissionerFabricCommissioningWithDispatchGroup:fabricID:rootCACert:operationalPublicKey:ipk:controllerNodeID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v16, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
        }
        else
        {
          v26 = (void *)MEMORY[0x242656984]();
          v27 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v35 = v29;
            v36 = 2112;
            v37 = v11;
            v38 = 2112;
            v39 = v32;
            _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_ERROR, "%{public}@Failed to create SecKey from %@: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v26);
          dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
          v30 = v32;
          +[HMMTRAccessoryPairingEndContext otherContextWithStep:error:](HMMTRAccessoryPairingEndContext, "otherContextWithStep:error:", 16, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v30, v31);

        }
      }
      else
      {
        v22 = (void *)MEMORY[0x242656984]();
        v23 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v35 = v25;
          v36 = 2112;
          v37 = v4;
          _os_log_impl(&dword_23E95B000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to extract public key from CSR: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v22);
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
        +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 16, v4);
        v15 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v4, v15);
        v11 = 0;
      }
    }
    else
    {
      v17 = (void *)MEMORY[0x242656984]();
      v18 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "nocsrElements");
        v21 = (const __CFData *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v35 = v20;
        v36 = 2112;
        v37 = v21;
        _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to extract CSR from nocsr_elements: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
      v11 = (const __CFData *)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 16, v11);
      v15 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v11, v15);
      v4 = 0;
    }

  }
}

void __151__HMMTRAccessoryServer_SystemCommissionerPairing___handleCSRResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup_responseParams_error___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD block[4];
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v16 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[2] = __151__HMMTRAccessoryServer_SystemCommissionerPairing___handleCSRResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup_responseParams_error___block_invoke_2;
  block[3] = &unk_250F20C50;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(a1 + 40);
  v26 = v15;
  v27 = v17;
  block[1] = 3221225472;
  v25 = v11;
  v28 = v18;
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v32 = *(id *)(a1 + 48);
  v33 = *(id *)(a1 + 56);
  v19 = v14;
  v20 = v13;
  v21 = v12;
  v22 = v15;
  v23 = v11;
  dispatch_async(v16, block);

}

void __151__HMMTRAccessoryServer_SystemCommissionerPairing___handleCSRResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup_responseParams_error___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint8_t buf[4];
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32) && !*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "_handleSystemCommissionerRootCertificate:fabricID:ipk:controllerNodeID:dispatchGroup:csrResponseParams:device:", *(_QWORD *)(a1 + 96));
  }
  else
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v9 = v5;
      v10 = 2112;
      v11 = v6;
      _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch root certificate: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 16, *(_QWORD *)(a1 + 40));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "_handlePairingFailureWithError:context:", *(_QWORD *)(a1 + 40), v7);

  }
}

uint64_t __144__HMMTRAccessoryServer_SystemCommissionerPairing___handleArmFailSafeResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup_error___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleCSRResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup:responseParams:error:", *(_QWORD *)(a1 + 40), a2, a3);
}

uint64_t __82__HMMTRAccessoryServer_SystemCommissionerPairing___pairOnSystemCommissionerFabric__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleArmFailSafeResponseDuringSystemCommissionerFabricCommissioningWithDispatchGroup:error:", *(_QWORD *)(a1 + 40), a3);
}

uint64_t __82__HMMTRAccessoryServer_SystemCommissionerPairing___pairOnSystemCommissionerFabric__block_invoke_11(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2048;
    v11 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Commissioning with system commissioner fabric job(%lu) completed.", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "setBlockInvalidation:", 0);
}

void __119__HMMTRAccessoryServer_SystemCommissionerPairing___pairOnSystemCommissionerFabricUnlessAlreadyPairedWithRootPublicKey___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t v29[128];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v10 = v7;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v26;
      while (2)
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v26 != v13)
            objc_enumerationMutation(v10);
          objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v14), "rootPublicKey", (_QWORD)v25);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "isEqual:", *(_QWORD *)(a1 + 40));

          if (v16)
          {
            v17 = (void *)MEMORY[0x242656984]();
            v18 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v31 = v20;
              _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_INFO, "%{public}@Accessory is already paired to system commissioner fabric. Completing Apple Home pairing.", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v17);
            if ((isFeatureMatteriPhoneOnlyPairingControlEnabled() & 1) == 0)
            {
              objc_msgSend(*(id *)(a1 + 32), "setOperationDisabled:", 1);
              objc_msgSend(*(id *)(a1 + 32), "setOperationDisabledReason:", 1);
            }
            objc_msgSend(*(id *)(a1 + 32), "_handlePairOnSystemCommissionerFabricSuccess");

            goto LABEL_19;
          }
          ++v14;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        if (v12)
          continue;
        break;
      }
    }

    objc_msgSend(*(id *)(a1 + 32), "_pairOnSystemCommissionerFabric");
  }
  else
  {
    v21 = (void *)MEMORY[0x242656984]();
    v22 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v24;
      v32 = 2112;
      v33 = v8;
      _os_log_impl(&dword_23E95B000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch pairings from newly paired accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v8, v9);
  }
LABEL_19:

}

- (HMMTRAccessoryServer)initWithKeystore:(id)a3 browser:(id)a4
{
  id v6;
  HMMTRAccessoryServer *v7;
  uint64_t v8;
  NSNumber *objectID;
  void *v10;
  id WeakRetained;
  uint64_t v12;
  NSNumber *fabricID;
  int v14;
  uint64_t v15;
  NSUUID *commissioningID;
  NSNumber *supportedLinkLayerTypes;
  HMMTRDuration *maxMetricDuration;
  NSNumber *softwareVersionNumber;
  NSString *softwareVersionString;
  id v21;
  NSMutableDictionary *v22;
  NSMutableDictionary *clusterIDCharacteristicMap;
  HMMTRHAPEnumerator *v24;
  HMMTRHAPEnumerator *hapEnumerator;
  NSMutableDictionary *v26;
  NSMutableDictionary *attributeTimers;
  HMMTRAttributeReportDistributor *v28;
  HMMTRAttributeReportDistributor *reportDistributor;
  NSNumber *commissioneeNetworkCommissioningClusterEndpoint;
  NSArray *commissioneeNetworks;
  void *v32;
  void *v33;
  HMMTRFirmwareUpdateStatus *v34;
  HMMTRFirmwareUpdateStatus *matterFirmwareUpdateStatus;
  void *v36;
  NSMutableDictionary *v37;
  NSMutableDictionary *characteristicProtocolMappingStates;
  NSString *deviceConnectedStateCaptureInformation;
  NSString *partsListStateCaptureInformation;
  id descriptorClusterManager;
  uint64_t v42;
  NSMutableArray *serviceEnumerationFromDeviceCompletionHandlers;
  uint64_t v44;
  NSMutableDictionary *pendingMTRDeviceReadReadyHandlers;
  objc_super v47;

  v6 = a4;
  v47.receiver = self;
  v47.super_class = (Class)HMMTRAccessoryServer;
  v7 = -[HAPAccessoryServer initWithKeystore:](&v47, sel_initWithKeystore_, a3);
  if (v7)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", arc4random());
    v8 = objc_claimAutoreleasedReturnValue();
    objectID = v7->_objectID;
    v7->_objectID = (NSNumber *)v8;

    objc_storeWeak((id *)&v7->_browser, v6);
    objc_msgSend(v6, "storage");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak((id *)&v7->_storage, v10);

    WeakRetained = objc_loadWeakRetained((id *)&v7->_storage);
    objc_msgSend(WeakRetained, "fabricID");
    v12 = objc_claimAutoreleasedReturnValue();
    fabricID = v7->_fabricID;
    v7->_fabricID = (NSNumber *)v12;

    v14 = objc_msgSend(v6, "isSystemCommissionerMode");
    v7->_knownToSystemCommissioner = v14;
    if (v14)
    {
      objc_msgSend(MEMORY[0x24BDD1880], "UUID");
      v15 = objc_claimAutoreleasedReturnValue();
      commissioningID = v7->_commissioningID;
      v7->_commissioningID = (NSUUID *)v15;

    }
    v7->_pairedState = 0;
    v7->_pairingProgress = 0;
    v7->_storageUpdatePending = 0;
    v7->_removalInProgress = 0;
    v7->_blockInvalidation = 0;
    v7->_locallyDiscovered = 0;
    v7->_discoveredOverBLE = 0;
    v7->_bleScanPending = 0;
    v7->_linkLayerType = 0;
    v7->_certified = 0;
    v7->_requiresThreadRouter = 0;
    v7->_delayDiscovery = 0;
    v7->_wedDevice = 0;
    supportedLinkLayerTypes = v7->_supportedLinkLayerTypes;
    v7->_supportedLinkLayerTypes = 0;

    v7->_operationDisabled = 0;
    v7->_operationDisabledReason = 0;
    v7->_hasPriorSuccessfulPairing = 0;
    maxMetricDuration = v7->_maxMetricDuration;
    v7->_maxMetricDuration = 0;

    softwareVersionNumber = v7->_softwareVersionNumber;
    v7->_softwareVersionNumber = 0;

    softwareVersionString = v7->_softwareVersionString;
    v7->_softwareVersionString = (NSString *)CFSTR("unknown");

    v21 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    -[HMMTRAccessoryServer setPairingDurationDictionary:](v7, "setPairingDurationDictionary:", v21);

    v22 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x24BDBCED8]);
    clusterIDCharacteristicMap = v7->_clusterIDCharacteristicMap;
    v7->_clusterIDCharacteristicMap = v22;

    v24 = -[HMMTRHAPEnumerator initWithClusterIDCharacteristicMap:]([HMMTRHAPEnumerator alloc], "initWithClusterIDCharacteristicMap:", v7->_clusterIDCharacteristicMap);
    hapEnumerator = v7->_hapEnumerator;
    v7->_hapEnumerator = v24;

    v26 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x24BDBCED8]);
    attributeTimers = v7->_attributeTimers;
    v7->_attributeTimers = v26;

    v28 = objc_alloc_init(HMMTRAttributeReportDistributor);
    reportDistributor = v7->_reportDistributor;
    v7->_reportDistributor = v28;

    commissioneeNetworkCommissioningClusterEndpoint = v7->_commissioneeNetworkCommissioningClusterEndpoint;
    v7->_commissioneeNetworkCommissioningClusterEndpoint = 0;

    commissioneeNetworks = v7->_commissioneeNetworks;
    v7->_commissioneeNetworks = 0;

    v7->_commissioneeHasActiveNetwork = 0;
    v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE1BB98]), "initWithValue:", 1);
    v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE1BB18]), "initWithOTAProviderState:downloadedFirmwareVersionNumber:accessoryDownloadProgressPercent:", v32, 0, 0);
    v34 = -[HMMTRFirmwareUpdateStatus initWithFirmwareUpdateStatus:accessoryServer:browser:]([HMMTRFirmwareUpdateStatus alloc], "initWithFirmwareUpdateStatus:accessoryServer:browser:", v33, v7, v6);
    matterFirmwareUpdateStatus = v7->_matterFirmwareUpdateStatus;
    v7->_matterFirmwareUpdateStatus = v34;

    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "addObserver:selector:name:object:", v7, sel_handleThreadNetworkStateChangedNotification_, CFSTR("HMMTRThreadRadioStateChangedNotification"), 0);

    v37 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x24BDBCED8]);
    characteristicProtocolMappingStates = v7->_characteristicProtocolMappingStates;
    v7->_characteristicProtocolMappingStates = v37;

    -[HMMTRAccessoryServer _updateDefaultEntriesForClusterIDCharacteristicMap:](v7, "_updateDefaultEntriesForClusterIDCharacteristicMap:", v7->_clusterIDCharacteristicMap);
    deviceConnectedStateCaptureInformation = v7->_deviceConnectedStateCaptureInformation;
    v7->_deviceConnectedStateCaptureInformation = 0;

    partsListStateCaptureInformation = v7->_partsListStateCaptureInformation;
    v7->_partsListStateCaptureInformation = 0;

    descriptorClusterManager = v7->_descriptorClusterManager;
    v7->_descriptorClusterManager = &__block_literal_global_8456;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v42 = objc_claimAutoreleasedReturnValue();
    serviceEnumerationFromDeviceCompletionHandlers = v7->_serviceEnumerationFromDeviceCompletionHandlers;
    v7->_serviceEnumerationFromDeviceCompletionHandlers = (NSMutableArray *)v42;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v44 = objc_claimAutoreleasedReturnValue();
    pendingMTRDeviceReadReadyHandlers = v7->_pendingMTRDeviceReadReadyHandlers;
    v7->_pendingMTRDeviceReadReadyHandlers = (NSMutableDictionary *)v44;

  }
  return v7;
}

- (void)dealloc
{
  objc_super v3;

  -[HMMTRAccessoryServer _deregisterStateCaptureHandlers](self, "_deregisterStateCaptureHandlers");
  v3.receiver = self;
  v3.super_class = (Class)HMMTRAccessoryServer;
  -[HMMTRAccessoryServer dealloc](&v3, sel_dealloc);
}

- (void)dispatchBlock:(id)a3
{
  id v4;
  NSObject *v5;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v5, v4);

}

- (MTRDeviceController)deviceController
{
  void *v2;
  void *v3;

  -[HMMTRAccessoryServer controllerWrapper](self, "controllerWrapper");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "controller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (MTRDeviceController *)v3;
}

- (void)_updateDefaultEntriesForClusterIDCharacteristicMap:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000023-0000-1000-8000-0026BB765291"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v4, &unk_250F3FC00, v5);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000021-0000-1000-8000-0026BB765291"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v6, &unk_250F3FC00, v7);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000020-0000-1000-8000-0026BB765291"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v8, &unk_250F3FC00, v9);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000014-0000-1000-8000-0026BB765291"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v10, &unk_250F3FC00, v11);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000030-0000-1000-8000-0026BB765291"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v12, &unk_250F3FC00, v13);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000052-0000-1000-8000-0026BB765291"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v14, &unk_250F3FC00, v15);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("0000026D-0000-1000-8000-0026BB765291"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v16, &unk_250F3FC00, v17);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000234-0000-1000-8000-0026BB765291"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 42);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v18, &unk_250F3FC00, v19);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000235-0000-1000-8000-0026BB765291"));
  v21 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 42);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v21, &unk_250F3FC00, v20);

}

- (void)_updateDefaultEntriesForBridgedClusterIDCharacteristicMap:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v4 = a3;
  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000023-0000-1000-8000-0026BB765291"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v5, v4, v6);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000021-0000-1000-8000-0026BB765291"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v7, v4, v8);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000020-0000-1000-8000-0026BB765291"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v9, v4, v10);

  +[HMMTRUtilities hmmtr_shortTypeFromUUID:](HMMTRUtilities, "hmmtr_shortTypeFromUUID:", CFSTR("00000030-0000-1000-8000-0026BB765291"));
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%0X"), 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setClusterIDForCharacteristic:endpointID:clusterID:](self, "setClusterIDForCharacteristic:endpointID:clusterID:", v12, v4, v11);

}

- (id)deviceID
{
  id v3;
  void *v4;
  void *v5;

  v3 = objc_alloc(MEMORY[0x24BE1BAD8]);
  -[HAPAccessoryServer identifier](self, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithDeviceIDString:", v4);

  return v5;
}

- (NSMutableDictionary)clusterIDCharacteristicMap
{
  return self->_clusterIDCharacteristicMap;
}

- (void)setClusterIDForCharacteristic:(id)a3 endpointID:(id)a4 clusterID:(id)a5
{
  NSMutableDictionary *clusterIDCharacteristicMap;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  v14 = a4;
  clusterIDCharacteristicMap = self->_clusterIDCharacteristicMap;
  v9 = a5;
  v10 = a3;
  -[NSMutableDictionary objectForKeyedSubscript:](clusterIDCharacteristicMap, "objectForKeyedSubscript:", v14);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    v12 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](self->_clusterIDCharacteristicMap, "setObject:forKeyedSubscript:", v12, v14);

  }
  -[NSMutableDictionary objectForKeyedSubscript:](self->_clusterIDCharacteristicMap, "objectForKeyedSubscript:", v14);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setValue:forKey:", v9, v10);

}

- (NSError)removeReason
{
  os_unfair_lock_s *v3;
  NSError *v4;

  v3 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  v4 = self->_removeReason;
  os_unfair_lock_unlock(v3);
  return v4;
}

- (HMMTRAccessoryPairingEndContext)pairingEndContextWhenRemove
{
  os_unfair_lock_s *v3;
  HMMTRAccessoryPairingEndContext *v4;

  v3 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  v4 = self->_pairingEndContextWhenRemove;
  os_unfair_lock_unlock(v3);
  return v4;
}

- (void)setRemoveReason:(id)a3 pairingEndContextWhenRemove:(id)a4
{
  NSError *v6;
  HMMTRAccessoryPairingEndContext *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  void *v10;
  HMMTRAccessoryServer *v11;
  NSObject *v12;
  void *v13;
  NSError *removeReason;
  HMMTRAccessoryPairingEndContext *pairingEndContextWhenRemove;
  NSError *v16;
  NSError *v17;
  HMMTRAccessoryPairingEndContext *v18;
  int v19;
  void *v20;
  __int16 v21;
  NSError *v22;
  __int16 v23;
  NSError *v24;
  __int16 v25;
  HMMTRAccessoryPairingEndContext *v26;
  __int16 v27;
  HMMTRAccessoryPairingEndContext *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = (NSError *)a3;
  v7 = (HMMTRAccessoryPairingEndContext *)a4;
  v8 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  v9 = os_unfair_lock_lock_with_options();
  v10 = (void *)MEMORY[0x242656984](v9);
  v11 = self;
  HMFGetOSLogHandle();
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    removeReason = v11->_removeReason;
    pairingEndContextWhenRemove = v11->_pairingEndContextWhenRemove;
    v19 = 138544386;
    v20 = v13;
    v21 = 2112;
    v22 = removeReason;
    v23 = 2112;
    v24 = v6;
    v25 = 2112;
    v26 = pairingEndContextWhenRemove;
    v27 = 2112;
    v28 = v7;
    _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_INFO, "%{public}@Setting removeReason %@ -> %@, context %@ -> %@", (uint8_t *)&v19, 0x34u);

  }
  objc_autoreleasePoolPop(v10);
  v16 = v11->_removeReason;
  v11->_removeReason = v6;
  v17 = v6;

  v18 = v11->_pairingEndContextWhenRemove;
  v11->_pairingEndContextWhenRemove = v7;

  os_unfair_lock_unlock(v8);
}

- (HMMTRPairing)currentPairing
{
  void *v3;
  void *v4;
  HMMTRAccessoryServer *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMMTRPairing *v29;
  void *v30;
  HMMTRAccessoryServer *v31;
  NSObject *v32;
  void *v34;
  void *v35;
  HMMTRAccessoryServer *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  HMMTRPairing *v41;
  void *v42;
  void *v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer currentPairingInfo](self, "currentPairingInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v45 = v7;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@CurrentPairingInfo is not cached, fetching info from storage", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    -[HMMTRAccessoryServer storage](v5, "storage");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dataSource");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer fabricID](v5, "fabricID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "storageDataSourceForFabricWithID:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](v5, "nodeID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "storageDataSourceForDeviceWithNodeID:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "pairings");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "objectEnumerator");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "nextObject");
    v16 = objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      v17 = (void *)v16;
      do
      {
        objc_msgSend(v17, "nodeID");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer nodeID](v5, "nodeID");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v18, "isEqual:", v19))
        {
          objc_msgSend(v17, "rootPublicKey");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMMTRAccessoryServer rootPublicKey](v5, "rootPublicKey");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "isEqual:", v21);

          if ((v22 & 1) != 0)
          {
            v43 = v14;
            v41 = [HMMTRPairing alloc];
            objc_msgSend(v17, "nodeID");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "fabricID");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "fabricLabel");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "rootPublicKey");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "vendorID");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "vendorName");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = -[HMMTRPairing initWithNodeID:fabricID:fabricLabel:rootPublicKey:vendorID:vendorName:](v41, "initWithNodeID:fabricID:fabricLabel:rootPublicKey:vendorID:vendorName:", v42, v24, v25, v26, v27, v28);
            -[HMMTRAccessoryServer setCurrentPairingInfo:](v5, "setCurrentPairingInfo:", v29);

            v30 = (void *)MEMORY[0x242656984]();
            v31 = v5;
            HMFGetOSLogHandle();
            v32 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v45 = v34;
              v46 = 2112;
              v47 = v17;
              _os_log_impl(&dword_23E95B000, v32, OS_LOG_TYPE_INFO, "%{public}@Updated currentPairingInfo with pairing from storage: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v30);

            v14 = v43;
            break;
          }
        }
        else
        {

        }
        objc_msgSend(v15, "nextObject");
        v23 = objc_claimAutoreleasedReturnValue();

        v17 = (void *)v23;
      }
      while (v23);
    }

  }
  v35 = (void *)MEMORY[0x242656984]();
  v36 = self;
  HMFGetOSLogHandle();
  v37 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer currentPairingInfo](v36, "currentPairingInfo");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v45 = v38;
    v46 = 2112;
    v47 = v39;
    _os_log_impl(&dword_23E95B000, v37, OS_LOG_TYPE_INFO, "%{public}@Returning current pairing info %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v35);
  -[HMMTRAccessoryServer currentPairingInfo](v36, "currentPairingInfo");
  return (HMMTRPairing *)(id)objc_claimAutoreleasedReturnValue();
}

- (BOOL)isStaged
{
  return -[HMMTRAccessoryServer pairedState](self, "pairedState") == 2;
}

- (BOOL)isPaired
{
  return -[HMMTRAccessoryServer pairedState](self, "pairedState") == 3;
}

- (int64_t)pairedState
{
  os_unfair_lock_s *v3;
  int64_t pairedState;

  v3 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  pairedState = self->_pairedState;
  os_unfair_lock_unlock(v3);
  return pairedState;
}

- (void)setPairedState:(int64_t)a3
{
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  BOOL v9;
  os_unfair_lock_s *v10;
  NSObject *v11;
  _QWORD block[6];
  BOOL v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x242656984](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v15 = v8;
    v16 = 2048;
    v17 = -[HMMTRAccessoryServer pairedState](v6, "pairedState");
    v18 = 2048;
    v19 = a3;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating paired state from %ld to %ld", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  v9 = -[HMMTRAccessoryServer isStaged](v6, "isStaged");
  v10 = (os_unfair_lock_s *)((char *)v6 + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  v6->_pairedState = a3;
  os_unfair_lock_unlock(v10);
  -[HAPAccessoryServer clientQueue](v6, "clientQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __39__HMMTRAccessoryServer_setPairedState___block_invoke;
  block[3] = &unk_250F22398;
  block[4] = v6;
  block[5] = a3;
  v13 = v9;
  dispatch_async(v11, block);

}

- (int64_t)linkLayerType
{
  os_unfair_lock_s *v3;
  int64_t linkLayerType;
  void *v5;

  v3 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  linkLayerType = self->_linkLayerType;
  os_unfair_lock_unlock(v3);
  if (!linkLayerType)
  {
    if (-[HAPAccessoryServer isReachable](self, "isReachable"))
    {
      -[HMMTRAccessoryServer primaryAccessory](self, "primaryAccessory");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      linkLayerType = -[HMMTRAccessoryServer getLinkLayerTypeForAccessory:](self, "getLinkLayerTypeForAccessory:", v5);
      -[HMMTRAccessoryServer setLinkLayerType:](self, "setLinkLayerType:", linkLayerType);
      objc_msgSend(v5, "setLinkLayerType:", linkLayerType);

    }
    else
    {
      return 0;
    }
  }
  return linkLayerType;
}

- (BOOL)accessoryLinkLayerTypeIsWifiOrEthernet
{
  return (unint64_t)(-[HMMTRAccessoryServer linkLayerType](self, "linkLayerType") - 1) < 2;
}

- (void)setLinkLayerType:(int64_t)a3
{
  os_unfair_lock_s *v5;

  v5 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  self->_linkLayerType = a3;
  os_unfair_lock_unlock(v5);
}

- (int64_t)linkType
{
  return 1;
}

- (int64_t)communicationProtocol
{
  return 2;
}

- (BOOL)hasPreferredLocalLink
{
  BOOL v3;
  void *v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (-[HMMTRAccessoryServer isDisabled](self, "isDisabled"))
  {
    v3 = 0;
  }
  else
  {
    -[HMMTRAccessoryServer residentReachabilityUpdateWaitTimer](self, "residentReachabilityUpdateWaitTimer");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v4 != 0;

  }
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer isDisabled](v6, "isDisabled");
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer residentReachabilityUpdateWaitTimer](v6, "residentReachabilityUpdateWaitTimer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138544130;
    v15 = v8;
    v16 = 2112;
    v17 = v9;
    v18 = 2112;
    v19 = v11;
    v20 = 2112;
    v21 = v12;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_DEBUG, "%{public}@disabled %@, timer running %@ -> local link preferred: %@", (uint8_t *)&v14, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  return v3;
}

- (id)reachabilityChangedReason
{
  return CFSTR("Keepalive");
}

- (NSNumber)softwareVersionNumber
{
  return self->_softwareVersionNumber;
}

- (void)updateSoftwareVersion:(id)a3
{
  id v5;
  void *v6;
  HMMTRAccessoryServer *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = (void *)MEMORY[0x242656984]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer softwareVersionNumber](v7, "softwareVersionNumber");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v20 = v9;
    v21 = 2112;
    v22 = v10;
    v23 = 2112;
    v24 = v5;
    _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Updating software version number from from %@ to %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  objc_storeStrong((id *)&v7->_softwareVersionNumber, a3);
  -[HMMTRAccessoryServer storage](v7, "storage");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "fabricDataSource");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v7, "nodeID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "storageDataSourceForDeviceWithNodeID:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer softwareVersionNumber](v7, "softwareVersionNumber");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = __46__HMMTRAccessoryServer_updateSoftwareVersion___block_invoke;
  v18[3] = &unk_250F223C0;
  v18[4] = v7;
  objc_msgSend(v14, "updateSoftwareVersionNumber:completion:", v15, v18);

  -[HMMTRAccessoryServer matterFirmwareUpdateStatus](v7, "matterFirmwareUpdateStatus");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    -[HMMTRAccessoryServer matterFirmwareUpdateStatus](v7, "matterFirmwareUpdateStatus");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "checkCurrentFirmwareVersionNumber:", v5);

  }
}

- (void)notifyMatterFirmwareRevisionNumberCharacteristicChanged
{
  dispatch_time_t v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id location;

  if (self->_softwareVersionNumber)
  {
    objc_initWeak(&location, self);
    v3 = dispatch_time(0, 100000000);
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = __79__HMMTRAccessoryServer_notifyMatterFirmwareRevisionNumberCharacteristicChanged__block_invoke;
    v5[3] = &unk_250F223E8;
    objc_copyWeak(&v6, &location);
    dispatch_after(v3, v4, v5);

    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }
}

- (NSString)softwareVersionString
{
  return self->_softwareVersionString;
}

- (NSData)rootPublicKey
{
  _BOOL4 v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = -[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner");
  -[HMMTRAccessoryServer browser](self, "browser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3)
    objc_msgSend(v4, "systemCommissionerFabricRootPublicKey");
  else
    objc_msgSend(v4, "appleHomeFabricRootPublicKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSData *)v6;
}

- (void)_updateMetrics
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  const __CFString *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  const __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v17 = v6;
    v18 = 2114;
    v19 = CFSTR("hmmtrAccessoryPairingStart");
    v20 = 2112;
    v21 = CFSTR("Pairing start");
    v22 = 2114;
    v23 = CFSTR("transport");
    v24 = 2112;
    v25 = CFSTR("unknown");
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v14 = CFSTR("transport");
  v15 = CFSTR("unknown");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v8, "initWithTag:data:", CFSTR("hmmtrAccessoryPairingStart"), v9);
  -[HMFActivity tagProcessorList](v4->_activity, "tagProcessorList");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "submitTaggedEvent:processorList:", v10, v11);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMMTRAccessoryServer discoveredOverBLE](v4, "discoveredOverBLE"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer setPairingMetricWithKey:value:](v4, "setPairingMetricWithKey:value:", CFSTR("hmmtrAccessoryPairingDiscoveredOverBLE"), v12);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMMTRAccessoryServer knownToSystemCommissioner](v4, "knownToSystemCommissioner"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer setPairingMetricWithKey:value:](v4, "setPairingMetricWithKey:value:", CFSTR("HMMTRAccessoryPairingKnownToSystemCommissioner"), v13);

}

- (void)_startPairingWithError:(id *)a3 pairingEndContext:(id *)a4
{
  -[HMMTRAccessoryServer _startPairingWithReadyToCancelHandler:error:pairingEndContext:](self, "_startPairingWithReadyToCancelHandler:error:pairingEndContext:", 0, a3, a4);
}

- (void)_startPairingWithReadyToCancelHandler:(id)a3 error:(id *)a4 pairingEndContext:(id *)a5
{
  void (**v8)(id, _QWORD *);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMFActivity *v13;
  HMFActivity *activity;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  HMMTRAccessoryServer *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  id v25;
  void *v26;
  HMMTRAccessoryServer *v27;
  NSObject *v28;
  void *v29;
  id v30;
  void *v31;
  HMMTRAccessoryServer *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD v41[5];
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  HMMTRAccessoryServer *v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = (void (**)(id, _QWORD *))a3;
  -[HMMTRAccessoryServer browser](self, "browser");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "attestationStatus");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setAccessoryServer:", self);

  -[HMMTRAccessoryServer browser](self, "browser");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setCommissioneeAccessoryServer:", self);

  -[HMMTRAccessoryServer deviceController](self, "deviceController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v12, "isRunning") & 1) != 0)
  {
    v13 = (HMFActivity *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F138]), "initWithName:", CFSTR("CHIP Accessory Pairing"));
    activity = self->_activity;
    self->_activity = v13;

    if (!-[HMMTRAccessoryServer hasPriorSuccessfulPairing](self, "hasPriorSuccessfulPairing"))
      -[HMMTRAccessoryServer _prepareThreadCredentials](self, "_prepareThreadCredentials");
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setDeviceControllerDelegate:queue:", self, v15);

    -[HMMTRAccessoryServer _pairingSetupPayload](self, "_pairingSetupPayload");
    v16 = objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      v17 = (id)v16;
      -[HMMTRAccessoryServer setCommissioningSessionEstablished:](self, "setCommissioningSessionEstablished:", 0);
      -[HMMTRAccessoryServer setCommissioningCompleted:](self, "setCommissioningCompleted:", 0);
      -[HMMTRAccessoryServer setPairingUsingMatterSupport:](self, "setPairingUsingMatterSupport:", 0);
      -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](self, "_notifyDelegateOfPairingStep:", 2);
      v18 = (id)objc_msgSend(v12, "setupCommissioningSessionWithPayload:newNodeID:error:", v17, self->_nodeID, a4);
      if (a4)
      {
        if (a5)
        {
          +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 2, *a4);
          v18 = (id)objc_claimAutoreleasedReturnValue();
          *a5 = v18;
        }
        v19 = (void *)MEMORY[0x242656984](v18);
        v20 = self;
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = (void *)v22;
          v24 = (HMMTRAccessoryServer *)*a4;
          if (a5)
            v25 = *a5;
          else
            v25 = 0;
          *(_DWORD *)buf = 138543874;
          v43 = v22;
          v44 = 2112;
          v45 = v24;
          v46 = 2112;
          v47 = v25;
          _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_ERROR, "%{public}@Error setup commissioning session %@, context %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v19);
      }
      v31 = (void *)MEMORY[0x242656984](v18);
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v43 = (uint64_t)v34;
        v44 = 2112;
        v45 = v32;
        _os_log_impl(&dword_23E95B000, v33, OS_LOG_TYPE_INFO, "%{public}@Starting pairing for accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v31);
      if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled())
      {
        -[HMMTRAccessoryServer browser](v32, "browser");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "enableUnrestrictedOperationsForAccessoryServer:", v32);

      }
      -[HMMTRAccessoryServer _updateMetrics](v32, "_updateMetrics");
      -[HMMTRAccessoryServer setCommissioningFailureOverridingError:](v32, "setCommissioningFailureOverridingError:", 0);
      -[HMMTRAccessoryServer setPairingProgress:](v32, "setPairingProgress:", 1);
      v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, 180.0);
      -[HMMTRAccessoryServer setPairingTimer:](v32, "setPairingTimer:", v36);

      -[HAPAccessoryServer clientQueue](v32, "clientQueue");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer pairingTimer](v32, "pairingTimer");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "setDelegateQueue:", v37);

      -[HMMTRAccessoryServer pairingTimer](v32, "pairingTimer");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "setDelegate:", v32);

      -[HMMTRAccessoryServer pairingTimer](v32, "pairingTimer");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "resume");

      if (v8)
      {
        v41[0] = MEMORY[0x24BDAC760];
        v41[1] = 3221225472;
        v41[2] = __86__HMMTRAccessoryServer__startPairingWithReadyToCancelHandler_error_pairingEndContext___block_invoke;
        v41[3] = &unk_250F23DF0;
        v41[4] = v32;
        v8[2](v8, v41);
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 9);
      v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *a4 = v30;
      if (a5)
      {
        +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 1, v30);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }

      v17 = 0;
    }
LABEL_28:

    goto LABEL_29;
  }
  v26 = (void *)MEMORY[0x242656984]();
  v27 = self;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v43 = (uint64_t)v29;
    _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_ERROR, "%{public}@CHIP Stack is not running", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v26);
  if (a4)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 3);
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *a4 = v17;
    if (a5)
    {
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 1, v17);
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_28;
  }
LABEL_29:

}

- (void)startPairingMetricWithActivity:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __55__HMMTRAccessoryServer_startPairingMetricWithActivity___block_invoke;
  v7[3] = &unk_250F22458;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_retryPairing
{
  void *v3;
  void *v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  NSNumber *nodeID;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMMTRAccessoryServer *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  HMMTRAccessoryServer *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!-[HMMTRAccessoryServer _pairingInProgressForMatterSupportFallback](self, "_pairingInProgressForMatterSupportFallback"))return;
  -[HMMTRAccessoryServer _clearCommissioneeInfoAfterPairingCompletion](self, "_clearCommissioneeInfoAfterPairingCompletion");
  -[HMMTRAccessoryServer setCommissioningFailureOverridingError:](self, "setCommissioningFailureOverridingError:", 0);
  if (-[HMMTRAccessoryServer pairingUsingMatterSupport](self, "pairingUsingMatterSupport"))
    goto LABEL_3;
  -[HMMTRAccessoryServer setPairingUsingMatterSupport:](self, "setPairingUsingMatterSupport:", 1);
  if (-[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner"))
  {
    -[HMMTRAccessoryServer stageCompletion](self, "stageCompletion");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (!v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v36 = v33;
        _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_ERROR, "%{public}@No fallback for failed pairing system commissioner with no staging interface. Will keep retrying with original setup payload.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
LABEL_3:
      -[HMMTRAccessoryServer setPairingUsingMatterSupport:](self, "setPairingUsingMatterSupport:", 0);
      -[HMMTRAccessoryServer _restoreCommissioneeInfoBeforeNextPairingAttempt](self, "_restoreCommissioneeInfoBeforeNextPairingAttempt");
      -[HMMTRAccessoryServer browser](self, "browser");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
      {
        -[HMMTRAccessoryServer _pairingSetupPayload](self, "_pairingSetupPayload");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = (void *)MEMORY[0x242656984]();
        v6 = self;
        HMFGetOSLogHandle();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v36 = v8;
          v37 = 2112;
          v38 = v4;
          _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Retrying pairing with setup payload: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v5);
        objc_msgSend(v3, "setCommissioneeAccessoryServer:", v6);
        -[HMMTRAccessoryServer deviceController](v6, "deviceController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          -[HAPAccessoryServer clientQueue](v6, "clientQueue");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setDeviceControllerDelegate:queue:", v6, v10);

          nodeID = v6->_nodeID;
          v34 = 0;
          objc_msgSend(v9, "setupCommissioningSessionWithPayload:newNodeID:error:", v4, nodeID, &v34);
          v12 = v34;
          +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 2, v12);
          v13 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
          v12 = (id)objc_claimAutoreleasedReturnValue();
          +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 2, v12);
          v13 = objc_claimAutoreleasedReturnValue();
        }
        v28 = (void *)v13;
        if (v12)
        {
          v29 = (void *)MEMORY[0x242656984]();
          v30 = v6;
          HMFGetOSLogHandle();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v36 = v32;
            v37 = 2112;
            v38 = v12;
            _os_log_impl(&dword_23E95B000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to setup commissioning session: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v29);
          -[HMMTRAccessoryServer _pairingComplete:context:](v30, "_pairingComplete:context:", v12, v28);
        }

      }
      else
      {
        v24 = (void *)MEMORY[0x242656984]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v36 = v27;
          _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_ERROR, "%{public}@Browser is gone. Stopping pairing attempt.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 15);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 2, v4);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v25, "_handlePairingFailureWithError:context:", v4, v12);
      }

      return;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v19;
      _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_INFO, "%{public}@Trying to find an existing System Commissioner pairing as a fallback", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    -[HMMTRAccessoryServer _returnMatterSupportPairingAsStagedPairing](v16, "_returnMatterSupportPairingAsStagedPairing");
  }
  else
  {
    v20 = (void *)MEMORY[0x242656984]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v23;
      _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_INFO, "%{public}@Trying to pair using MatterSupport", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    -[HMMTRAccessoryServer _tryPairingUsingMatterSupport](v21, "_tryPairingUsingMatterSupport");
  }
}

- (BOOL)_pairingInProgressForMatterSupportFallback
{
  return -[HMMTRAccessoryServer pairingProgress](self, "pairingProgress") != 3
      && -[HMMTRAccessoryServer pairingProgress](self, "pairingProgress") != 0;
}

- (void)_tryPairingUsingMatterSupport
{
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  HMMTRAccessoryServer *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMMTRAccessoryServer *v26;
  NSObject *v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer setupPayloadString](self, "setupPayloadString");
  v3 = objc_claimAutoreleasedReturnValue();
  if (v3
    && (v4 = (void *)v3,
        -[HMMTRAccessoryServer setupPayloadString](self, "setupPayloadString"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isEqual:", &stru_250F24B08),
        v5,
        v4,
        !v6))
  {
    v11 = (void *)MEMORY[0x24BDDB810];
    -[HMMTRAccessoryServer setupPayloadString](self, "setupPayloadString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 0;
    objc_msgSend(v11, "setupPayloadWithOnboardingPayload:error:", v12, &v32);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v32;

    if (v14)
    {
      v15 = (void *)MEMORY[0x242656984]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer setupPayloadString](v16, "setupPayloadString");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v34 = v18;
        v35 = 2112;
        v36 = v19;
        v37 = 2112;
        v38 = v14;
        _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@Parsing setup payload \"%@\" failed: %@. Failing pairing without trying with MatterSupport", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
      +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 2, v14);
      v20 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 9);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v16, "_handlePairingFailureWithError:context:", v21, v20);

    }
    else
    {
      -[HMMTRAccessoryServer browser](self, "browser");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "systemCommissionerPairingManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v23)
      {
        -[HMMTRAccessoryServer storage](self, "storage");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "endLocalStorageModeBySyncingToRemote:", 0);

        -[HMMTRAccessoryServer setPairingUsingMatterSupport:](self, "setPairingUsingMatterSupport:", 1);
        v29[0] = MEMORY[0x24BDAC760];
        v29[1] = 3221225472;
        v29[2] = __53__HMMTRAccessoryServer__tryPairingUsingMatterSupport__block_invoke;
        v29[3] = &unk_250F22480;
        v29[4] = self;
        v30 = v13;
        v20 = v23;
        v31 = v20;
        objc_msgSend(v20, "fetchSystemCommissionerPairingsWithCompletionHandler:", v29);

      }
      else
      {
        v25 = (void *)MEMORY[0x242656984]();
        v26 = self;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v34 = v28;
          _os_log_impl(&dword_23E95B000, v27, OS_LOG_TYPE_ERROR, "%{public}@No system commissioner pairing managager is available. Retrying pairing directly.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v25);
        -[HMMTRAccessoryServer _retryPairing](v26, "_retryPairing");
        v20 = 0;
      }
    }

  }
  else
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v10;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Nearby accessory pairing flow. Hence, cannot try with MatterSupport. Retrying pairing directly.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMMTRAccessoryServer _retryPairing](v8, "_retryPairing");
  }
}

- (void)tryPairingWithOnboardingPayload:(id)a3 systemCommissionerPairings:(id)a4 pairingManager:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __98__HMMTRAccessoryServer_tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke;
  v15[3] = &unk_250F224A8;
  v15[4] = self;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, v15);

}

- (void)_tryPairingWithOnboardingPayload:(id)a3 systemCommissionerPairings:(id)a4 pairingManager:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMMTRAccessoryServer *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[5];
  id v31;
  id v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (-[HMMTRAccessoryServer _pairingInProgressForMatterSupportFallback](self, "_pairingInProgressForMatterSupportFallback"))
  {
    if (objc_msgSend(v9, "hmf_isEmpty"))
    {
      v11 = (void *)MEMORY[0x242656984]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v35 = v14;
        _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Exhausted all system commissioner pairings to pair for onboarding setup payload", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      -[HMMTRAccessoryServer _retryPairing](v12, "_retryPairing");
    }
    else
    {
      objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD15E0], "indexSetWithIndexesInRange:", 1, objc_msgSend(v9, "count") - 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectsAtIndexes:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = (void *)MEMORY[0x242656984]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v35 = v21;
        v36 = 2112;
        v37 = v15;
        _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Checking %@ for onboarding setup payload match", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(v15, "setupPayload");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "isEqualAsOnboarding:", v8);

      if (v23)
      {
        v24 = (void *)MEMORY[0x242656984]();
        v25 = v19;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "uuid");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v35 = v27;
          v36 = 2112;
          v37 = v28;
          _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_INFO, "%{public}@System commissioner pairing %@ matched onboarding payload. Attempting to open commissioning window", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(v15, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30[0] = MEMORY[0x24BDAC760];
        v30[1] = 3221225472;
        v30[2] = __99__HMMTRAccessoryServer__tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke;
        v30[3] = &unk_250F224D0;
        v30[4] = v25;
        v31 = v8;
        v32 = v17;
        v33 = v10;
        objc_msgSend(v33, "openCommissioningWindowForSystemCommissionerPairingUUID:duration:completionHandler:", v29, v30, 180.0);

      }
      else
      {
        -[HMMTRAccessoryServer tryPairingWithOnboardingPayload:systemCommissionerPairings:pairingManager:](v19, "tryPairingWithOnboardingPayload:systemCommissionerPairings:pairingManager:", v8, v17, v10);
      }

    }
  }

}

- (void)_returnMatterSupportPairingAsStagedPairing
{
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  HMMTRAccessoryServer *v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMMTRAccessoryServer *v26;
  NSObject *v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer setupPayloadString](self, "setupPayloadString");
  v3 = objc_claimAutoreleasedReturnValue();
  if (v3
    && (v4 = (void *)v3,
        -[HMMTRAccessoryServer setupPayloadString](self, "setupPayloadString"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isEqual:", &stru_250F24B08),
        v5,
        v4,
        !v6))
  {
    v13 = (void *)MEMORY[0x24BDDB810];
    -[HMMTRAccessoryServer setupPayloadString](self, "setupPayloadString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 0;
    objc_msgSend(v13, "setupPayloadWithOnboardingPayload:error:", v14, &v32);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v32;

    if (v11)
    {
      v15 = (void *)MEMORY[0x242656984]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer setupPayloadString](v16, "setupPayloadString");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v34 = v18;
        v35 = 2112;
        v36 = v19;
        v37 = 2112;
        v38 = v11;
        _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@Parsing setup payload \"%@\" failed: %@. Failing pairing without looking for matching MatterSupport pairing", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 9);
      v20 = (id)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 2, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v16, "_handlePairingFailureWithError:context:", v20, v21);

    }
    else
    {
      -[HMMTRAccessoryServer browser](self, "browser");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "systemCommissionerPairingManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v23)
      {
        -[HMMTRAccessoryServer storage](self, "storage");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "endLocalStorageModeBySyncingToRemote:", 0);

        v29[0] = MEMORY[0x24BDAC760];
        v29[1] = 3221225472;
        v29[2] = __66__HMMTRAccessoryServer__returnMatterSupportPairingAsStagedPairing__block_invoke;
        v29[3] = &unk_250F22480;
        v29[4] = self;
        v30 = v12;
        v20 = v23;
        v31 = v20;
        objc_msgSend(v20, "fetchSystemCommissionerPairingsWithCompletionHandler:", v29);

      }
      else
      {
        v25 = (void *)MEMORY[0x242656984]();
        v26 = self;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v34 = v28;
          _os_log_impl(&dword_23E95B000, v27, OS_LOG_TYPE_ERROR, "%{public}@No system commissioner pairing managager is available. Retrying pairing directly.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v25);
        -[HMMTRAccessoryServer _retryPairing](v26, "_retryPairing");
        v20 = 0;
      }
    }

  }
  else
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v10;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Pairing without onboarding payload. Hence, failing pairing without looking for matching MatterSupport pairing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 9);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 2, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v8, "_handlePairingFailureWithError:context:", v11, v12);
  }

}

- (void)findSystemCommissionerPairingMatchingSetupPayload:(id)a3 systemCommissionerPairings:(id)a4 pairingManager:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __116__HMMTRAccessoryServer_findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke;
  v15[3] = &unk_250F224A8;
  v15[4] = self;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, v15);

}

- (void)_findSystemCommissionerPairingMatchingSetupPayload:(id)a3 systemCommissionerPairings:(id)a4 pairingManager:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMMTRAccessoryServer *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[5];
  id v31;
  id v32;
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (-[HMMTRAccessoryServer _pairingInProgressForMatterSupportFallback](self, "_pairingInProgressForMatterSupportFallback"))
  {
    if (objc_msgSend(v9, "hmf_isEmpty"))
    {
      v11 = (void *)MEMORY[0x242656984]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v36 = v14;
        _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Exhausted all system commissioner pairings to match onboarding setup payload", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      -[HMMTRAccessoryServer _retryPairing](v12, "_retryPairing");
    }
    else
    {
      objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD15E0], "indexSetWithIndexesInRange:", 1, objc_msgSend(v9, "count") - 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectsAtIndexes:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = (void *)MEMORY[0x242656984]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v36 = v21;
        v37 = 2112;
        v38 = v15;
        _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Checking %@ for onboarding setup payload match", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(v15, "setupPayload");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "isEqualAsOnboarding:", v8);

      if (v23)
      {
        v24 = (void *)MEMORY[0x242656984]();
        v25 = v19;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "uuid");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v36 = v27;
          v37 = 2112;
          v38 = v28;
          _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_INFO, "%{public}@System commissioner pairing %@ matched onboarding payload. Checking whether it is connected.", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(v15, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30[0] = MEMORY[0x24BDAC760];
        v30[1] = 3221225472;
        v30[2] = __117__HMMTRAccessoryServer__findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke;
        v30[3] = &unk_250F23840;
        v30[4] = v25;
        v31 = v8;
        v32 = v17;
        v33 = v10;
        v34 = v15;
        objc_msgSend(v33, "readCommissioningWindowStatusForSystemCommissionerPairingUUID:completionHandler:", v29, v30);

      }
      else
      {
        -[HMMTRAccessoryServer findSystemCommissionerPairingMatchingSetupPayload:systemCommissionerPairings:pairingManager:](v19, "findSystemCommissionerPairingMatchingSetupPayload:systemCommissionerPairings:pairingManager:", v8, v17, v10);
      }

    }
  }

}

- (void)queueAccessoryOperation:(id)a3 highPriority:(BOOL)a4 completion:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD block[5];
  id v21;
  id v22;
  BOOL v23;

  v8 = a3;
  v9 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke;
    block[3] = &unk_250F225C0;
    block[4] = self;
    v21 = v9;
    v22 = v8;
    v23 = a4;
    v11 = v9;
    v12 = v8;
    dispatch_async(v10, block);

    v13 = v21;
  }
  else
  {
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v14 = objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke_194;
    v17[3] = &unk_250F225E8;
    v18 = v8;
    v19 = v9;
    v15 = v9;
    v16 = v8;
    dispatch_async(v14, v17);

    v13 = v18;
  }

}

- (void)timerDidFire:(id)a3
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  const __CFString *v13;
  uint64_t *v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, void *, void *);
  void *v34;
  HMMTRAccessoryServer *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, void *, void *);
  void *v39;
  HMMTRAccessoryServer *v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  HMMTRAccessoryServer *v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer pairingTimer](self, "pairingTimer");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v4)
  {
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v42 = v18;
      v43 = 2112;
      v44 = v16;
      v45 = 1024;
      v46 = 180;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@Pairing Timeout: Accessory Server: %@ was not paired in over %d seconds. Cancelling pairing...", buf, 0x1Cu);

    }
    objc_autoreleasePoolPop(v15);
    -[HMMTRAccessoryServer deviceController](v16, "deviceController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](v16, "nodeID");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "cancelCommissioningForNodeID:error:", v20, 0);

    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 24);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:description:reason:suggestion:underlyingError:", 15, CFSTR("Failed to pair Matter Accessory in time"), 0, 0, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithCancelledError:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithCancelledError:", v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _pairingComplete:context:](v16, "_pairingComplete:context:", v22, v23);

  }
  else
  {
    -[HMMTRAccessoryServer residentReachabilityUpdateWaitTimer](self, "residentReachabilityUpdateWaitTimer");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    if (v6 == v4)
    {
      v24 = (void *)MEMORY[0x242656984]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v42 = v27;
        _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_INFO, "%{public}@Waited long enough for resident to update reachability", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      -[HMMTRAccessoryServer setResidentReachabilityUpdateWaitTimer:](v25, "setResidentReachabilityUpdateWaitTimer:", 0);
    }
    else
    {
      -[HMMTRAccessoryServer stateCaptureConfigChangeTimer](self, "stateCaptureConfigChangeTimer");
      v7 = (id)objc_claimAutoreleasedReturnValue();

      if (v7 == v4)
      {
        v28 = (void *)MEMORY[0x242656984]();
        v10 = self;
        HMFGetOSLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v42 = v30;
          _os_log_impl(&dword_23E95B000, v29, OS_LOG_TYPE_INFO, "%{public}@State Capture: Timer expired, generate State Capture Information for configuration change", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v28);
        -[HMMTRAccessoryServer setStateCaptureConfigChangeTimer:](v10, "setStateCaptureConfigChangeTimer:", 0);
        v36 = MEMORY[0x24BDAC760];
        v37 = 3221225472;
        v38 = __37__HMMTRAccessoryServer_timerDidFire___block_invoke;
        v39 = &unk_250F22610;
        v40 = v10;
        v13 = CFSTR("ConfigurationChange");
        v14 = &v36;
        goto LABEL_17;
      }
      -[HMMTRAccessoryServer stateCaptureDeviceConnectedTimer](self, "stateCaptureDeviceConnectedTimer");
      v8 = (id)objc_claimAutoreleasedReturnValue();

      if (v8 == v4)
      {
        v9 = (void *)MEMORY[0x242656984]();
        v10 = self;
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v42 = v12;
          _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@State Capture: Timer expired, generate State Capture Information for Device Connected", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v9);
        -[HMMTRAccessoryServer setStateCaptureDeviceConnectedTimer:](v10, "setStateCaptureDeviceConnectedTimer:", 0);
        v31 = MEMORY[0x24BDAC760];
        v32 = 3221225472;
        v33 = __37__HMMTRAccessoryServer_timerDidFire___block_invoke_202;
        v34 = &unk_250F22610;
        v35 = v10;
        v13 = CFSTR("DeviceConnected");
        v14 = &v31;
LABEL_17:
        -[HMMTRAccessoryServer generateStateCaptureInformationForReason:completionHandler:](v10, "generateStateCaptureInformationForReason:completionHandler:", v13, v14, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
      }
    }
  }

}

- (BOOL)hasNetworkProvisioningFailed:(unsigned int)a3
{
  unsigned int v3;

  v3 = self->_networkProvisioningFailures | a3;
  if ((~v3 & 3) == 0)
    v3 |= 4u;
  self->_networkProvisioningFailures = v3;
  return (v3 >> 2) & 1;
}

- (void)startStagedPairingWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __57__HMMTRAccessoryServer_startStagedPairingWithCompletion___block_invoke;
  v7[3] = &unk_250F22768;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)startStagedPairingWithDeviceCredentialHandler:(id)a3 wifiScanResultsHandler:(id)a4 threadScanResultsHandler:(id)a5 readyToCancelHandler:(id)a6 progressUpdateHandler:(id)a7 scanningNetworks:(BOOL)a8 completion:(id)a9
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  BOOL v35;

  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a9;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v21 = objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = __189__HMMTRAccessoryServer_startStagedPairingWithDeviceCredentialHandler_wifiScanResultsHandler_threadScanResultsHandler_readyToCancelHandler_progressUpdateHandler_scanningNetworks_completion___block_invoke;
  v28[3] = &unk_250F22638;
  v28[4] = self;
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v35 = a8;
  v32 = v19;
  v33 = v20;
  v34 = v18;
  v22 = v18;
  v23 = v20;
  v24 = v19;
  v25 = v17;
  v26 = v16;
  v27 = v15;
  dispatch_async(v21, v28);

}

- (void)updateVidPidWithAttestationDeviceInfo:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  HMMTRAccessoryServer *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const char *v21;
  HMMTRAccessoryServer *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  HMMTRAccessoryServer *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer vendorID](self, "vendorID");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5
    && (v6 = (void *)v5,
        -[HMMTRAccessoryServer productID](self, "productID"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v7,
        v6,
        v7))
  {
    -[HMMTRAccessoryServer vendorID](self, "vendorID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "basicInformationVendorID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "isEqualToNumber:", v9) & 1) != 0)
    {
      -[HMMTRAccessoryServer productID](self, "productID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "basicInformationProductID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "isEqualToNumber:", v11);

      if ((v12 & 1) != 0)
        goto LABEL_13;
    }
    else
    {

    }
    v13 = (void *)MEMORY[0x242656984]();
    v22 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer vendorID](v22, "vendorID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer productID](v22, "productID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "basicInformationVendorID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "basicInformationProductID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138544642;
      v26 = v16;
      v27 = 2112;
      v28 = v17;
      v29 = 2112;
      v30 = v18;
      v31 = 2112;
      v32 = v19;
      v33 = 2112;
      v34 = v20;
      v35 = 2112;
      v36 = v22;
      v21 = "%{public}@Accessory vid/pid (%@/%@) mismatch with deviceAttestation. Using vid/pid from deviceAttestation (%"
            "@/%@) for accessoryServer %@";
      goto LABEL_11;
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x242656984]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer vendorID](v14, "vendorID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer productID](v14, "productID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "basicInformationVendorID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "basicInformationProductID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138544642;
      v26 = v16;
      v27 = 2112;
      v28 = v17;
      v29 = 2112;
      v30 = v18;
      v31 = 2112;
      v32 = v19;
      v33 = 2112;
      v34 = v20;
      v35 = 2112;
      v36 = v14;
      v21 = "%{public}@Accessory has nil vid/pid (%@/%@). Using vid/pid from deviceAttestation (%@/%@) for accessoryServer %@";
LABEL_11:
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, v21, (uint8_t *)&v25, 0x3Eu);

    }
  }

  objc_autoreleasePoolPop(v13);
  objc_msgSend(v4, "basicInformationVendorID");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setVendorID:](self, "setVendorID:", v23);

  objc_msgSend(v4, "basicInformationProductID");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setProductID:](self, "setProductID:", v24);

  -[HMMTRAccessoryServer updateProductAttributes](self, "updateProductAttributes");
LABEL_13:

}

- (void)validateAttestationDeviceInfo:(id)a3 error:(id)a4 completion:(id)a5
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD block[5];
  id v13;
  id v14;

  v7 = a3;
  v8 = a5;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __71__HMMTRAccessoryServer_validateAttestationDeviceInfo_error_completion___block_invoke;
  block[3] = &unk_250F240D8;
  block[4] = self;
  v13 = v7;
  v14 = v8;
  v10 = v8;
  v11 = v7;
  dispatch_async(v9, block);

}

- (BOOL)updateProductAttributes
{
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMMTRAccessoryServer *v15;
  NSObject *v16;
  __CFString *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  id *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  __CFString *v33;
  void *v34;
  HMMTRAccessoryServer *v35;
  NSObject *v36;
  void *v37;
  __CFString *v38;
  void *v39;
  void *v40;
  HMMTRAccessoryServer *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  const __CFString *v62;
  __int16 v63;
  const __CFString *v64;
  __int16 v65;
  const __CFString *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  const __CFString *v70;
  __int16 v71;
  void *v72;
  __int16 v73;
  const __CFString *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  const __CFString *v78;
  __int16 v79;
  void *v80;
  const __CFString *v81;
  _QWORD v82[3];

  v82[1] = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer browser](self, "browser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "vendorMetadataStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "metadata");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer vendorID](self, "vendorID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "vendorWithID:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "name");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer setVendorNameFromDcl:](self, "setVendorNameFromDcl:", v9);

  -[HMMTRAccessoryServer productID](self, "productID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[HMMTRAccessoryServer productID](self, "productID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "productWithID:", v11);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer setProductNameFromDcl:](self, "setProductNameFromDcl:", v12);

    objc_msgSend(v10, "categoryNumber");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v58 = v8;
    if (v13)
    {
      v14 = (void *)MEMORY[0x242656984]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        -[HAPAccessoryServer category](v15, "category");
        v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "categoryNumber");
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v60 = v2;
        v61 = 2112;
        v62 = v17;
        v63 = 2112;
        v64 = v18;
        _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Updating product category from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(v10, "categoryNumber");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HAPAccessoryServer setCategory:](v15, "setCategory:", v19);

      v20 = (void *)MEMORY[0x242656984]();
      v21 = v15;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "category");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v60 = v2;
        v61 = 2114;
        v62 = CFSTR("stagedPairingAccessoryInfo");
        v63 = 2112;
        v64 = CFSTR("Accessory Info");
        v65 = 2114;
        v66 = CFSTR("categoryNumber");
        v67 = 2112;
        v68 = v23;
        _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_alloc(MEMORY[0x24BE4F1D0]);
      objc_msgSend(v21, "category");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (v26)
      {
        v81 = CFSTR("categoryNumber");
        objc_msgSend(v21, "category");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        v82[0] = v2;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v82, &v81, 1);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v27 = (void *)MEMORY[0x24BDBD1B8];
      }
      v29 = (void *)objc_msgSend(v25, "initWithTag:data:", CFSTR("stagedPairingAccessoryInfo"), v27);
      objc_msgSend(v21[56], "tagProcessorList");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "submitTaggedEvent:processorList:", v29, v30);

      if (v26)
      {

      }
      v28 = 1;
    }
    else
    {
      v28 = 0;
    }
    objc_msgSend(v10, "name");
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (v31)
    {
      objc_msgSend(v10, "name");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRUtilities sanitizeHAPName:](HMMTRUtilities, "sanitizeHAPName:", v32);
      v33 = (__CFString *)objc_claimAutoreleasedReturnValue();

      v34 = (void *)MEMORY[0x242656984]();
      v35 = self;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        -[HAPAccessoryServer name](v35, "name");
        v38 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v60 = v37;
        v61 = 2112;
        v62 = v38;
        v63 = 2112;
        v64 = v33;
        _os_log_impl(&dword_23E95B000, v36, OS_LOG_TYPE_INFO, "%{public}@Updating product name from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v34);
      if (v13)
      {
        v28 = 1;
      }
      else
      {
        -[HAPAccessoryServer name](v35, "name");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v39, "isEqual:", v33) ^ 1;

      }
      -[HAPAccessoryServer setName:](v35, "setName:", v33);

    }
    v40 = (void *)MEMORY[0x242656984]();
    v41 = self;
    HMFGetOSLogHandle();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[HMMTRAccessoryServer communicationProtocol](v41, "communicationProtocol"));
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer vendorID](v41, "vendorID");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer productID](v41, "productID");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMMTRAccessoryServer knownToSystemCommissioner](v41, "knownToSystemCommissioner"));
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138545922;
      v60 = v43;
      v61 = 2114;
      v62 = CFSTR("stagedPairingAccessoryInfo");
      v63 = 2112;
      v64 = CFSTR("Accessory Info");
      v65 = 2114;
      v66 = CFSTR("communicationProtocol");
      v67 = 2112;
      v68 = v44;
      v69 = 2114;
      v70 = CFSTR("vendorNumber");
      v71 = 2112;
      v72 = v45;
      v73 = 2114;
      v74 = CFSTR("productID");
      v75 = 2112;
      v76 = v46;
      v77 = 2114;
      v78 = CFSTR("accessoryKnownToSystemCommissioner");
      v79 = 2112;
      v80 = v47;
      _os_log_impl(&dword_23E95B000, v42, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x70u);

    }
    objc_autoreleasePoolPop(v40);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_alloc(MEMORY[0x24BE4F1D0]);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[HMMTRAccessoryServer communicationProtocol](v41, "communicationProtocol"));
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer vendorID](v41, "vendorID");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer productID](v41, "productID");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMMTRAccessoryServer knownToSystemCommissioner](v41, "knownToSystemCommissioner"));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = (void *)objc_msgSend(v49, "initWithTag:data:", CFSTR("stagedPairingAccessoryInfo"), v54, CFSTR("communicationProtocol"), v50, CFSTR("vendorNumber"), v51, CFSTR("productID"), v52, CFSTR("accessoryKnownToSystemCommissioner"), v53);
    -[HMFActivity tagProcessorList](v41->_activity, "tagProcessorList");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "submitTaggedEvent:processorList:", v55, v56);

    LOBYTE(v10) = v28 != 0;
    v8 = v58;
  }

  return (char)v10;
}

- (void)abortStagingWithError:(id)a3 context:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __54__HMMTRAccessoryServer_abortStagingWithError_context___block_invoke;
  block[3] = &unk_250F224F8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_setupPairingProperties
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    isFeatureMatteriPhoneOnlyPairingControlEnabled();
    HMFBooleanToString();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer pairingTargetFabric](v4, "pairingTargetFabric");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer pairingTargetFabric](v4, "pairingTargetFabric");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "delegate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "requiresRemoteFabricDataUpdate");
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138544130;
    v16 = v6;
    v17 = 2112;
    v18 = v7;
    v19 = 2112;
    v20 = v8;
    v21 = 2112;
    v22 = v11;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@_setupPairingProperties - iPhoneOnlyPairing: %@, pairingTargetFabric: %@, requiresRemoteFabricDataUpdate: %@", (uint8_t *)&v15, 0x2Au);

  }
  objc_autoreleasePoolPop(v3);
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    -[HMMTRAccessoryServer pairingTargetFabric](v4, "pairingTargetFabric");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      -[HMMTRAccessoryServer pairingTargetFabric](v4, "pairingTargetFabric");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "delegate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer setShouldPairWithoutResident:](v4, "setShouldPairWithoutResident:", objc_msgSend(v14, "requiresRemoteFabricDataUpdate") ^ 1);

    }
    else
    {
      -[HMMTRAccessoryServer setShouldPairWithoutResident:](v4, "setShouldPairWithoutResident:", 0);
    }

  }
  else
  {
    -[HMMTRAccessoryServer setShouldPairWithoutResident:](v4, "setShouldPairWithoutResident:", 0);
  }
}

- (void)startPairingWithRequest:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __48__HMMTRAccessoryServer_startPairingWithRequest___block_invoke;
  v7[3] = &unk_250F22458;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_startLocallyDiscoveredAccessoryServerPairingWithRequest:(id)a3 fabricID:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  HMMTRAccessoryServer *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  id v25;
  id v26;
  _QWORD v27[5];
  id v28;
  id v29;
  _QWORD v30[5];
  uint8_t buf[4];
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = MEMORY[0x24BDAC760];
  v30[0] = MEMORY[0x24BDAC760];
  v30[1] = 3221225472;
  v30[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke;
  v30[3] = &unk_250F23DF0;
  v30[4] = self;
  v9 = (void *)MEMORY[0x242656B10](v30);
  v10 = objc_msgSend(v6, "isOwnerPairing") ^ 1;
  -[HMMTRAccessoryServer storage](self, "storage");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setSharedAdmin:", v10);

  if ((objc_msgSend(v6, "isOwnerPairing") & 1) == 0)
  {
    objc_msgSend(v6, "chipFabricID");
    v12 = objc_claimAutoreleasedReturnValue();

    v7 = (id)v12;
  }
  v27[0] = v8;
  v27[1] = 3221225472;
  v27[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_2;
  v27[3] = &unk_250F24150;
  v27[4] = self;
  v13 = v7;
  v28 = v13;
  v14 = v9;
  v29 = v14;
  v15 = (void *)MEMORY[0x242656B10](v27);
  -[HMMTRAccessoryServer browser](self, "browser");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    v23[0] = v8;
    v23[1] = 3221225472;
    v23[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_208;
    v23[3] = &unk_250F229B0;
    v23[4] = self;
    v24 = v13;
    v25 = v6;
    v26 = v15;
    objc_msgSend(v16, "createMatterOperationalKeyPairIfAbsentWithCompletion:", v23);

  }
  else
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v20;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@No accessory server browser to move on with pairing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 11);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 1, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v18, "_handlePairingFailureWithError:context:", v21, v22);

  }
}

- (BOOL)matchesSetupID:(id)a3
{
  id v4;
  os_unfair_lock_s *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v15;

  v4 = a3;
  if (!-[HMMTRAccessoryServer isDisabled](self, "isDisabled"))
  {
    v5 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
    os_unfair_lock_lock_with_options();
    -[HMMTRAccessoryServer discriminator](self, "discriminator");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6
      && (-[HMMTRAccessoryServer setUpPINCode](self, "setUpPINCode"),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v7,
          v6,
          v7))
    {
      -[HMMTRAccessoryServer setUpPINCode](self, "setUpPINCode");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = -[HMMTRAccessoryServer discriminatorIsOriginatedFromShort](self, "discriminatorIsOriginatedFromShort");
      if (v9)
      {
        v10 = (void *)MEMORY[0x24BDD16E0];
        -[HMMTRAccessoryServer discriminator](self, "discriminator");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "numberWithUnsignedInteger:", (unint64_t)objc_msgSend(v11, "unsignedIntegerValue") >> 8);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        -[HMMTRAccessoryServer discriminator](self, "discriminator");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v12;
      }
      +[HMMTRUtilities setupIDFromSetupCode:discriminator:](HMMTRUtilities, "setupIDFromSetupCode:discriminator:", v8, v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)

      os_unfair_lock_unlock(v5);
      if (v15)
      {
        v13 = objc_msgSend(v15, "isEqualToString:", v4);

        goto LABEL_8;
      }
    }
    else
    {
      os_unfair_lock_unlock(v5);
    }
  }
  v13 = 0;
LABEL_8:

  return v13;
}

- (BOOL)matchesSetupID:(id)a3 serverIdentifier:(id)a4
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v10;
  void *v11;
  char v12;

  v6 = (unint64_t)a3;
  v7 = (unint64_t)a4;
  if (!-[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner")
    && v6 | v7
    && -[HMMTRAccessoryServer pairingProgress](self, "pairingProgress") != 3)
  {
    if (v6)
    {
      v10 = -[HMMTRAccessoryServer matchesSetupID:](self, "matchesSetupID:", v6);
      if (v7)
      {
LABEL_8:
        -[HAPAccessoryServer identifier](self, "identifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqualToString:", v7);

LABEL_11:
        v8 = v10 & v12;
        goto LABEL_5;
      }
    }
    else
    {
      v10 = 1;
      if (v7)
        goto LABEL_8;
    }
    v12 = 1;
    goto LABEL_11;
  }
  v8 = 0;
LABEL_5:

  return v8;
}

- (unint64_t)pairingProgress
{
  os_unfair_lock_s *v3;
  unint64_t pairingProgress;

  v3 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  pairingProgress = self->_pairingProgress;
  os_unfair_lock_unlock(v3);
  return pairingProgress;
}

- (void)setPairingProgress:(unint64_t)a3
{
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  os_unfair_lock_s *v9;
  int v10;
  void *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  HMMTRAccessoryServer *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x242656984](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543874;
    v11 = v8;
    v12 = 2048;
    v13 = a3;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Pairing progress updated: %tu for server: %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  v9 = (os_unfair_lock_s *)((char *)v6 + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  v6->_pairingProgress = a3;
  os_unfair_lock_unlock(v9);
}

- (BOOL)isPairingInProgress
{
  unint64_t v2;

  v2 = -[HMMTRAccessoryServer pairingProgress](self, "pairingProgress");
  return (v2 < 5) & (6u >> v2);
}

- (HAPAccessory)primaryAccessory
{
  os_unfair_lock_s *v3;
  HAPAccessory *v4;

  v3 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  v4 = self->_primaryAccessory;
  os_unfair_lock_unlock(v3);
  return v4;
}

- (void)_initAccessoriesForServer
{
  void *v3;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer primaryAccessory](self, "primaryAccessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v5, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer setAccessories:](self, "setAccessories:", v4);

}

- (void)setPrimaryAccessory:(id)a3
{
  HAPAccessory *v4;
  os_unfair_lock_s *v5;

  v4 = (HAPAccessory *)a3;
  v5 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  if (self->_primaryAccessory)
  {
    _HMFPreconditionFailure();
    __break(1u);
  }
  else
  {
    self->_primaryAccessory = v4;
    os_unfair_lock_unlock(v5);
    -[HMMTRAccessoryServer _initAccessoriesForServer](self, "_initAccessoriesForServer");
  }
}

- (BOOL)tryPairingPassword:(id)a3 onboardingSetupPayloadString:(id)a4 error:(id *)a5
{
  id v7;
  id v8;
  _BOOL4 v9;
  NSObject *v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  _QWORD block[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v8 = a4;
  v9 = -[HMMTRAccessoryServer locallyDiscovered](self, "locallyDiscovered");
  if (v9)
  {
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __78__HMMTRAccessoryServer_tryPairingPassword_onboardingSetupPayloadString_error___block_invoke;
    block[3] = &unk_250F224F8;
    block[4] = self;
    v17 = v7;
    v18 = v8;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x242656984]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v14;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@CHIP Accessory in current state cannot try pairing password.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

  return v9;
}

- (BOOL)stopPairingWithError:(id *)a3
{
  NSObject *v4;
  _QWORD v6[4];
  id v7;
  id location;

  objc_initWeak(&location, self);
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __45__HMMTRAccessoryServer_stopPairingWithError___block_invoke;
  v6[3] = &unk_250F223E8;
  objc_copyWeak(&v7, &location);
  dispatch_async(v4, v6);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
  return 1;
}

- (void)addPairing:(id)a3 completionQueue:(id)a4 completionHandler:(id)a5
{
  id v7;
  id v8;
  _QWORD v9[5];
  id v10;

  v7 = a5;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __69__HMMTRAccessoryServer_addPairing_completionQueue_completionHandler___block_invoke;
  v9[3] = &unk_250F22768;
  v9[4] = self;
  v10 = v7;
  v8 = v7;
  dispatch_async((dispatch_queue_t)a4, v9);

}

- (void)removePairing:(id)a3 completionQueue:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD block[5];
  id v13;
  id v14;

  v8 = a3;
  v9 = a5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __72__HMMTRAccessoryServer_removePairing_completionQueue_completionHandler___block_invoke;
  block[3] = &unk_250F240D8;
  block[4] = self;
  v13 = v8;
  v14 = v9;
  v10 = v9;
  v11 = v8;
  dispatch_async((dispatch_queue_t)a4, block);

}

- (BOOL)removePairingForCurrentControllerOnQueue:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(id, _QWORD);
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  HMMTRAccessoryServer *v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  _QWORD v31[4];
  void (**v32)(id, _QWORD);
  _QWORD v33[5];
  id v34;
  void (**v35)(id, _QWORD);
  uint64_t v36;
  _QWORD block[4];
  id v38;
  HMMTRAccessoryServer *v39;
  id v40;
  void (**v41)(id, _QWORD);
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (void (**)(id, _QWORD))a4;
  if (-[HMMTRAccessoryServer isDisabled](self, "isDisabled"))
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v43 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory server already disabled. Remove complete.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    -[HMMTRAccessoryServer browser](v9, "browser");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmmtrErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "invalidateAccessoryServer:reason:", v9, v13);

    v7[2](v7, 0);
  }
  else if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled")
         && -[HMMTRAccessoryServer operationDisabledReason](self, "operationDisabledReason") != 1)
  {
    v20 = (void *)MEMORY[0x242656984]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = -[HMMTRAccessoryServer operationDisabledReason](v21, "operationDisabledReason");
      v25 = "";
      if (v24 == 2)
        v25 = " because pairings are removed on accessory side";
      *(_DWORD *)buf = 138543618;
      v43 = v23;
      v44 = 2080;
      v45 = (uint64_t)v25;
      _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_INFO, "%{public}@Operation disabled%s. Proceeding with removing accessory on the controller side.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    -[HMMTRAccessoryServer browser](v21, "browser");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v26;
    if (v26
      && (objc_msgSend(v26, "workQueue"), v28 = (void *)objc_claimAutoreleasedReturnValue(), v28, v28))
    {
      objc_msgSend(v27, "workQueue");
      v29 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke;
      block[3] = &unk_250F22B48;
      v38 = v27;
      v39 = v21;
      v40 = v6;
      v41 = v7;
      dispatch_async(v29, block);

    }
    else
    {
      -[HMMTRAccessoryServer _onUnpairFinishedWithError:queue:completion:](v21, "_onUnpairFinishedWithError:queue:completion:", 0, v6, v7);
    }

  }
  else
  {
    v14 = random();
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v43 = v18;
      v44 = 2048;
      v45 = v14;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: unpair job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    -[HMMTRAccessoryServer setRemovalInProgress:](v16, "setRemovalInProgress:", 1);
    v19 = MEMORY[0x24BDAC760];
    v33[0] = MEMORY[0x24BDAC760];
    v33[1] = 3221225472;
    v33[2] = __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_222;
    v33[3] = &unk_250F228E8;
    v33[4] = v16;
    v36 = v14;
    v34 = v6;
    v35 = v7;
    v31[0] = v19;
    v31[1] = 3221225472;
    v31[2] = __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_226;
    v31[3] = &unk_250F23F80;
    v32 = v35;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v16, "queueAccessoryOperation:highPriority:completion:", v33, 1, v31);

  }
  return 1;
}

- (void)_unpair:(id)a3 completion:(id)a4
{
  NSObject *v6;
  id v7;
  NSNumber *discriminator;
  NSNumber *setUpPINCode;
  void *v10;
  unint64_t v11;
  void *v12;
  id *v13;
  _QWORD *v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[5];
  NSObject *v20;
  id v21;
  _QWORD v22[5];
  id v23;
  _QWORD block[5];
  id v25;
  uint8_t buf[4];
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  discriminator = self->_discriminator;
  self->_discriminator = 0;

  setUpPINCode = self->_setUpPINCode;
  self->_setUpPINCode = 0;

  -[HMMTRAccessoryServer deviceController](self, "deviceController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!-[HMMTRAccessoryServer isPaired](self, "isPaired")
    && !-[HMMTRAccessoryServer commissioningCompleted](self, "commissioningCompleted"))
  {
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v18;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@Ignoring unpair request as accessory is not paired", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __43__HMMTRAccessoryServer__unpair_completion___block_invoke;
    block[3] = &unk_250F22768;
    block[4] = v16;
    v13 = &v25;
    v25 = v7;
    v14 = block;
    goto LABEL_9;
  }
  -[HMMTRAccessoryServer setRemovalInProgress:](self, "setRemovalInProgress:", 1);
  if (!v10)
  {
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __43__HMMTRAccessoryServer__unpair_completion___block_invoke_2;
    v22[3] = &unk_250F22768;
    v22[4] = self;
    v13 = &v23;
    v23 = v7;
    v14 = v22;
LABEL_9:
    dispatch_async(v6, v14);
    goto LABEL_10;
  }
  v11 = -[NSNumber unsignedLongLongValue](self->_nodeID, "unsignedLongLongValue");
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __43__HMMTRAccessoryServer__unpair_completion___block_invoke_3;
  v19[3] = &unk_250F22740;
  v19[4] = self;
  v13 = (id *)&v20;
  v20 = v6;
  v21 = v7;
  objc_msgSend(v10, "getBaseDevice:queue:completionHandler:", v11, v12, v19);

LABEL_10:
}

- (void)_onUnpairFinishedWithError:(id)a3 queue:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  id v27;
  id v28;
  NSObject *queue;
  _QWORD block[4];
  id v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  queue = a4;
  v9 = a5;
  objc_msgSend(v8, "domain");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEqualToString:", *MEMORY[0x24BDDB490]);

  if (v11)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v12 = objc_claimAutoreleasedReturnValue();

    v8 = (id)v12;
  }
  -[HMMTRAccessoryServer setPairedState:](self, "setPairedState:", 0);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  -[HAPAccessoryServer accessories](self, "accessories");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v34 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        -[HAPAccessoryServer keyStore](self, "keyStore");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "identifier");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "removeAccessoryKeyForName:error:", v20, 0);

      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v15);
  }

  -[HMMTRAccessoryServer _deleteAccessoryServerData](self, "_deleteAccessoryServerData");
  -[HMMTRAccessoryServer browser](self, "browser");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1540], "hmmtrErrorWithCode:", 12);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "abortOperationsForAccessoryServer:reason:", self, v22);

  -[HMMTRAccessoryServer disable](self, "disable");
  v23 = (void *)MEMORY[0x242656984](-[HMMTRAccessoryServer setRemovalInProgress:](self, "setRemovalInProgress:", 0));
  v24 = self;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v38 = v26;
    v39 = 2112;
    v40 = v8;
    _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_INFO, "%{public}@CHIP Accessory unpair completed. Error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v23);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __68__HMMTRAccessoryServer__onUnpairFinishedWithError_queue_completion___block_invoke;
  block[3] = &unk_250F22768;
  v31 = v8;
  v32 = v9;
  v27 = v8;
  v28 = v9;
  dispatch_async(queue, block);

}

- (void)commitStagedPairing
{
  NSObject *v3;
  _QWORD block[5];

  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __43__HMMTRAccessoryServer_commitStagedPairing__block_invoke;
  block[3] = &unk_250F23DF0;
  block[4] = self;
  dispatch_async(v3, block);

}

- (BOOL)isPairedInStorage
{
  uint64_t v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;

  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
    return 0;
  v4 = (void *)v3;
  -[HMMTRAccessoryServer fabricID](self, "fabricID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
    return 0;
  v6 = -[HMMTRAccessoryServer knownToSystemCommissioner](self, "knownToSystemCommissioner");
  -[HMMTRAccessoryServer storage](self, "storage");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v6)
  {
    objc_msgSend(v7, "pairedNodeIDsOnSystemCommissionerFabric:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v9, "containsObject:", v10);
  }
  else
  {
    objc_msgSend(v7, "dataSource");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer fabricID](self, "fabricID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "storageDataSourceForFabricWithID:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "allNodeIDs");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v13, "containsObject:", v14);

  }
  return v11;
}

- (void)listPairingsWithCompletionQueue:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v6 = a4;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __74__HMMTRAccessoryServer_listPairingsWithCompletionQueue_completionHandler___block_invoke;
  v8[3] = &unk_250F22768;
  v8[4] = self;
  v9 = v6;
  v7 = v6;
  dispatch_async((dispatch_queue_t)a3, v8);

}

- (void)discoverAccessories
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  _QWORD block[5];
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@discoverAccessories", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HAPAccessoryServer clientQueue](v4, "clientQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __43__HMMTRAccessoryServer_discoverAccessories__block_invoke;
  block[3] = &unk_250F23DF0;
  block[4] = v4;
  dispatch_async(v7, block);

}

- (void)disable
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  _QWORD block[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t v27[128];
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v29 = v6;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@disabling", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMMTRAccessoryServer matterFirmwareUpdateStatus](v4, "matterFirmwareUpdateStatus");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "otaProviderState");

  if (v8 == 4)
  {
    -[HMMTRAccessoryServer matterFirmwareUpdateStatus](v4, "matterFirmwareUpdateStatus");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateFirmwareUpdateStatus:", 0);

  }
  -[HMMTRAccessoryServer serviceEnumerationFromDeviceCompletionHandlers](v4, "serviceEnumerationFromDeviceCompletionHandlers");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v10, "copy");

  -[HMMTRAccessoryServer serviceEnumerationFromDeviceCompletionHandlers](v4, "serviceEnumerationFromDeviceCompletionHandlers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeAllObjects");

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v13 = v11;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v24;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v24 != v16)
          objc_enumerationMutation(v13);
        v18 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v17);
        objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v19);

        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v15);
  }

  -[HAPAccessoryServer setReachable:](v4, "setReachable:", 0);
  -[HAPAccessoryServer setSecuritySessionOpen:](v4, "setSecuritySessionOpen:", 0);
  -[HMMTRAccessoryServer setControllerWrapper:](v4, "setControllerWrapper:", 0);
  -[HMMTRAccessoryServer setMatterDevice:](v4, "setMatterDevice:", 0);
  -[HMMTRAccessoryServer reachabilityManager](v4, "reachabilityManager");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "stop");

  -[HAPAccessoryServer clientQueue](v4, "clientQueue");
  v21 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __31__HMMTRAccessoryServer_disable__block_invoke;
  block[3] = &unk_250F23DF0;
  block[4] = v4;
  dispatch_async(v21, block);

}

- (void)_flushMTRDeviceReadReadyHandlers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  HMMTRAccessoryServer *v7;
  NSObject *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t v19[128];
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer pendingMTRDeviceReadReadyHandlers](self, "pendingMTRDeviceReadReadyHandlers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "allValues");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMMTRAccessoryServer pendingMTRDeviceReadReadyHandlers](self, "pendingMTRDeviceReadReadyHandlers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeAllObjects");

  if ((objc_msgSend(v4, "hmf_isEmpty") & 1) == 0)
  {
    v6 = (void *)MEMORY[0x242656984]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v9;
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_INFO, "%{public}@Flushing all pending MTRDevice read-ready handlers", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
  }
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v10 = v4;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v14) + 16))(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v14));
        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v12);
  }

}

- (BOOL)isDisabled
{
  BOOL v3;
  void *v4;

  if (-[HAPAccessoryServer isReachable](self, "isReachable"))
    return 0;
  -[HMMTRAccessoryServer controllerWrapper](self, "controllerWrapper");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v4 == 0;

  return v3;
}

- (void)didUpdateReachability:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;

  v3 = a3;
  -[HAPAccessoryServer setReachable:](self, "setReachable:");
  -[HMMTRAccessoryServer primaryAccessory](self, "primaryAccessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer buildReachabilityNotificationDictionary:reachable:linkType:withError:](self, "buildReachabilityNotificationDictionary:reachable:linkType:withError:", v5, v3, 1, 0);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  -[HAPAccessoryServer notifyClients:withDictionary:](self, "notifyClients:withDictionary:", 1, v6);
}

- (void)_startInitialReachableStateTimerWithCompletion:(id)a3
{
  id v4;
  dispatch_time_t v5;
  NSObject *v6;

  v4 = a3;
  v5 = dispatch_time(0, 60000000000);
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_after(v5, v6, v4);

}

- (void)setupReporting
{
  NSObject *v3;
  _QWORD block[5];

  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __38__HMMTRAccessoryServer_setupReporting__block_invoke;
  block[3] = &unk_250F23DF0;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_setupMatterDevice
{
  NSObject *v3;
  _BOOL4 v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  HMMTRAccessoryServer *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id location;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = -[HMMTRAccessoryServer isDisabled](self, "isDisabled");
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v9;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Setup-reporting block called after server is disabled. Ignored.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v10;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Request to setup reporting", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    -[HMMTRAccessoryServer matterDevice](v6, "matterDevice");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11 == 0;

    if (v12)
    {
      __42__HMMTRAccessoryServer__setupMatterDevice__block_invoke(v13, v6);
      if (!-[HMMTRAccessoryServer controllerRevokeHandlerRegistered](v6, "controllerRevokeHandlerRegistered"))
      {
        -[HMMTRAccessoryServer setControllerRevokeHandlerRegistered:](v6, "setControllerRevokeHandlerRegistered:", 1);
        objc_initWeak(&location, v6);
        -[HMMTRAccessoryServer controllerWrapper](v6, "controllerWrapper");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[HAPAccessoryServer clientQueue](v6, "clientQueue");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v20[0] = MEMORY[0x24BDAC760];
        v20[1] = 3221225472;
        v20[2] = __42__HMMTRAccessoryServer__setupMatterDevice__block_invoke_246;
        v20[3] = &unk_250F227D0;
        objc_copyWeak(&v22, &location);
        v21 = &__block_literal_global_243_8297;
        objc_msgSend(v14, "registerRevokeHandlerWithQueue:handler:", v15, v20);

        v16 = (void *)MEMORY[0x242656984]();
        v17 = v6;
        HMFGetOSLogHandle();
        v18 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v25 = v19;
          _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_INFO, "%{public}@Registered controller revoke handler", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v16);

        objc_destroyWeak(&v22);
        objc_destroyWeak(&location);
      }
    }
  }
}

- (void)triggerEstablishingMatterSubscription
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 3221225472;
  v2[2] = __61__HMMTRAccessoryServer_triggerEstablishingMatterSubscription__block_invoke;
  v2[3] = &unk_250F23DF0;
  v2[4] = self;
  -[HMMTRAccessoryServer dispatchBlock:](self, "dispatchBlock:", v2);
}

- (void)isDiscoverableWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __53__HMMTRAccessoryServer_isDiscoverableWithCompletion___block_invoke;
  v7[3] = &unk_250F22768;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (BOOL)_handleUnmappedAttributeReport:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  char v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  NSString *v23;
  NSString *softwareVersionString;
  void *v25;
  int v26;
  void *v27;
  BOOL v28;
  _QWORD block[5];

  v4 = a3;
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB460]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "cluster");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "isEqualToNumber:", &unk_250F3FC30) & 1) != 0)
  {
    objc_msgSend(v5, "attribute");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToNumber:", &unk_250F3FC48);

    if (v8)
    {
      -[HMMTRAccessoryServer chipDelegate](self, "chipDelegate");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_opt_respondsToSelector();

      if ((v10 & 1) != 0)
      {
        -[HAPAccessoryServer delegateQueue](self, "delegateQueue");
        v11 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 3221225472;
        block[2] = __55__HMMTRAccessoryServer__handleUnmappedAttributeReport___block_invoke;
        block[3] = &unk_250F23DF0;
        block[4] = self;
        dispatch_async(v11, block);

      }
      goto LABEL_22;
    }
  }
  else
  {

  }
  objc_msgSend(v5, "cluster");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v12, "isEqualToNumber:", &unk_250F3FC60) & 1) != 0)
  {
    objc_msgSend(v5, "attribute");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isEqualToNumber:", &unk_250F3FC78);

    if (v14)
    {
      +[HMMTRUtilities mtrBaseClusterValueFromMTRClusterReportValue:](HMMTRUtilities, "mtrBaseClusterValueFromMTRClusterReportValue:", v4);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v16 = v15;
      else
        v16 = 0;
      v17 = v16;

      -[HMMTRAccessoryServer updateSoftwareVersion:](self, "updateSoftwareVersion:", v17);
      goto LABEL_23;
    }
  }
  else
  {

  }
  objc_msgSend(v5, "cluster");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v18, "isEqualToNumber:", &unk_250F3FC60) & 1) != 0)
  {
    objc_msgSend(v5, "attribute");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isEqualToNumber:", &unk_250F3FC90);

    if (v20)
    {
      +[HMMTRUtilities mtrBaseClusterValueFromMTRClusterReportValue:](HMMTRUtilities, "mtrBaseClusterValueFromMTRClusterReportValue:", v4);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v22 = v21;
      else
        v22 = 0;
      v23 = v22;

      softwareVersionString = self->_softwareVersionString;
      self->_softwareVersionString = v23;

      goto LABEL_23;
    }
  }
  else
  {

  }
  objc_msgSend(v5, "cluster");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "isEqualToNumber:", &unk_250F3FCA8);

  if (!v26)
  {
LABEL_23:
    v28 = 0;
    goto LABEL_24;
  }
  -[HMMTRAccessoryServer matterFirmwareUpdateStatus](self, "matterFirmwareUpdateStatus");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "handleOTARequestorAttributeReport:", v4);

LABEL_22:
  v28 = 1;
LABEL_24:

  return v28;
}

- (id)deviceTopology
{
  HMMTRDeviceTopology *v3;
  void *v4;
  HMMTRDeviceTopology *v5;

  v3 = [HMMTRDeviceTopology alloc];
  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[HMMTRDeviceTopology initWithNodeId:server:](v3, "initWithNodeId:server:", v4, self);

  return v5;
}

- (BOOL)_isBridgedBasicInformation:(id)a3 reportClusterID:(id)a4
{
  id v5;
  BOOL v6;

  v5 = a4;
  v6 = objc_msgSend(a3, "isEqualToNumber:", &unk_250F3FC60)
    && (objc_msgSend(v5, "isEqualToNumber:", &unk_250F3FCC0) & 1) != 0;

  return v6;
}

- (void)_updateAdditionalCharacteristicsFromCharacteristicUpdate:(id)a3 service:(id)a4 path:(id)a5 completionHandler:(id)a6
{
  void *v6;
  id v10;
  id v11;
  id v12;
  void (**v13)(id, id);
  id v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  char v25;
  void (**v26)(id, id);
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char v37;
  id v38;
  void *v39;
  HMMTRAccessoryServer *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  HMMTRAccessoryServer *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char v54;
  id v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  HMMTRProtocolOperation *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  void *v66;
  HMMTRAccessoryServer *v67;
  NSObject *v68;
  void *v69;
  void *v70;
  HMMTRProtocolOperation *v71;
  id v72;
  id obj;
  id obja;
  id objb;
  void *v76;
  void *v77;
  int v78;
  id v79;
  id v80;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD v86[5];
  id v87;
  id v88;
  id v89;
  void (**v90)(id, id);
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint8_t buf[4];
  void *v96;
  __int16 v97;
  id v98;
  __int16 v99;
  id v100;
  _BYTE v101[128];
  _BYTE v102[128];
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void (**)(id, id))a6;
  v14 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  objc_msgSend(v12, "cluster");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v15, "isEqualToNumber:", &unk_250F3FCD8))
    goto LABEL_13;
  objc_msgSend(v12, "attribute");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "isEqualToNumber:", &unk_250F3FCF0) & 1) == 0)
  {

LABEL_13:
    goto LABEL_14;
  }
  objc_msgSend(v10, "type");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isEqualToString:", CFSTR("00000033-0000-1000-8000-0026BB765291"));

  if (v17)
  {
    objc_msgSend(v10, "value");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v19 = v18;
    else
      v19 = 0;
    v20 = v19;

    if (!v20
      || (objc_msgSend(v20, "isEqualToNumber:", &unk_250F3FC00) & 1) != 0
      || objc_msgSend(v20, "isEqualToNumber:", &unk_250F3FD08))
    {
      v13[2](v13, v14);
    }
    else
    {
      v72 = v20;
      v77 = v14;
      v80 = v11;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      objc_msgSend(v11, "characteristics");
      obja = (id)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v91, v102, 16);
      if (v48)
      {
        v49 = v48;
        v50 = *(_QWORD *)v92;
LABEL_47:
        v51 = 0;
        while (1)
        {
          if (*(_QWORD *)v92 != v50)
            objc_enumerationMutation(obja);
          v52 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * v51);
          objc_msgSend(v52, "type");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = objc_msgSend(v53, "isEqualToString:", CFSTR("00000035-0000-1000-8000-0026BB765291"));

          if ((v54 & 1) != 0)
            break;
          if (v49 == ++v51)
          {
            v49 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v91, v102, 16);
            if (v49)
              goto LABEL_47;
            goto LABEL_53;
          }
        }
        v55 = v52;

        if (!v55)
          goto LABEL_56;
        v56 = (void *)MEMORY[0x24BDDB678];
        -[HMMTRAccessoryServer nodeID](self, "nodeID");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = objc_msgSend(v57, "unsignedLongLongValue");
        -[HMMTRAccessoryServer deviceController](self, "deviceController");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "deviceWithNodeID:deviceController:", v58, v59);
        objb = (id)objc_claimAutoreleasedReturnValue();

        v60 = [HMMTRProtocolOperation alloc];
        -[HMMTRAccessoryServer clusterIDCharacteristicMap](self, "clusterIDCharacteristicMap");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = -[HMMTRProtocolOperation initWithOperationOfType:characteristic:matterDevice:clusterIDCharacteristicMap:](v60, "initWithOperationOfType:characteristic:matterDevice:clusterIDCharacteristicMap:", 4, v55, objb, v61);

        +[HMMTRProtocolOperationManager sharedInstance](HMMTRProtocolOperationManager, "sharedInstance");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        -[HAPAccessoryServer clientQueue](self, "clientQueue");
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer reportDistributor](self, "reportDistributor");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v86[0] = MEMORY[0x24BDAC760];
        v86[1] = 3221225472;
        v86[2] = __112__HMMTRAccessoryServer__updateAdditionalCharacteristicsFromCharacteristicUpdate_service_path_completionHandler___block_invoke;
        v86[3] = &unk_250F227F8;
        v86[4] = self;
        v87 = v55;
        v88 = v10;
        v89 = v77;
        v90 = v13;
        v65 = v55;
        objc_msgSend(v62, "registerOperation:accessoryServer:clientQueue:reportDistributor:operationResponseHandler:updatedAttributesHandler:", v71, self, v63, v64, v86, 0);

        v14 = v77;
      }
      else
      {
LABEL_53:

LABEL_56:
        v66 = (void *)MEMORY[0x242656984]();
        v67 = self;
        HMFGetOSLogHandle();
        v68 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endpoint");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v96 = v69;
          v97 = 2112;
          v98 = v70;
          _os_log_impl(&dword_23E95B000, v68, OS_LOG_TYPE_ERROR, "%{public}@Unexpected, target temperature characteristic not found on endpoint %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v66);
        v14 = v77;
        v13[2](v13, v77);
      }
      v11 = v80;
      v20 = v72;
    }

    goto LABEL_44;
  }
LABEL_14:
  objc_msgSend(v12, "cluster");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "isEqualToNumber:", &unk_250F3FD20);

  if (!v22)
  {
    v13[2](v13, v14);
    goto LABEL_44;
  }
  objc_msgSend(v12, "attribute");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "isEqualToNumber:", &unk_250F3FD38);
  v25 = v24;
  if (v24
    && (objc_msgSend(v10, "type"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v6, "isEqualToString:", CFSTR("00000013-0000-1000-8000-0026BB765291"))))
  {

  }
  else
  {
    v26 = v13;
    v27 = v14;
    objc_msgSend(v12, "attribute");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v28, "isEqualToNumber:", &unk_250F3FD50))
    {

      if ((v25 & 1) != 0)
      v14 = v27;
      v13 = v26;
      goto LABEL_44;
    }
    objc_msgSend(v10, "type");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v78 = objc_msgSend(v29, "isEqualToString:", CFSTR("0000002F-0000-1000-8000-0026BB765291"));

    if ((v25 & 1) != 0)
    {

      v14 = v27;
      v13 = v26;
      if ((v78 & 1) == 0)
        goto LABEL_44;
    }
    else
    {

      v14 = v27;
      v13 = v26;
      if (!v78)
        goto LABEL_44;
    }
  }
  obj = v10;
  v76 = v14;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v79 = v11;
  objc_msgSend(v11, "characteristics");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v82, v101, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v83;
LABEL_29:
    v34 = 0;
    while (1)
    {
      if (*(_QWORD *)v83 != v33)
        objc_enumerationMutation(v30);
      v35 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * v34);
      objc_msgSend(v35, "type");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend(v36, "isEqualToString:", CFSTR("000000CE-0000-1000-8000-0026BB765291"));

      if ((v37 & 1) != 0)
        break;
      if (v32 == ++v34)
      {
        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v82, v101, 16);
        if (v32)
          goto LABEL_29;
        goto LABEL_35;
      }
    }
    v38 = v35;

    if (!v38)
      goto LABEL_40;
    v39 = (void *)MEMORY[0x242656984]();
    v40 = self;
    HMFGetOSLogHandle();
    v41 = objc_claimAutoreleasedReturnValue();
    v10 = obj;
    v14 = v76;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v96 = v42;
      v97 = 2112;
      v98 = v38;
      v99 = 2112;
      v100 = obj;
      _os_log_impl(&dword_23E95B000, v41, OS_LOG_TYPE_INFO, "%{public}@Updated additional characteristic %@ \nbased on characteristic \n%@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v39);
    objc_msgSend(v38, "setValue:", &unk_250F3FD68);
    objc_msgSend(v76, "addObject:", v38);
    v13[2](v13, v76);

  }
  else
  {
LABEL_35:

LABEL_40:
    v43 = (void *)MEMORY[0x242656984]();
    v44 = self;
    HMFGetOSLogHandle();
    v45 = objc_claimAutoreleasedReturnValue();
    v10 = obj;
    v14 = v76;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "endpoint");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v96 = v46;
      v97 = 2112;
      v98 = v47;
      _os_log_impl(&dword_23E95B000, v45, OS_LOG_TYPE_ERROR, "%{public}@Unexpected, color temperature characteristic not found on endpoint %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v43);
    v13[2](v13, v76);
  }
  v11 = v79;
LABEL_44:

}

- (void)_updatedCharacteristicsForAttributeReport:(id)a3 completionHandler:(id)a4
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t k;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  BOOL v27;
  void *v28;
  HMMTRAccessoryServer *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  HMMTRProtocolOperation *v33;
  void *v34;
  void *v35;
  HMMTRProtocolOperation *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  HMMTRAccessoryServer *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  HMMTRAccessoryServer *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  HMMTRAccessoryServer *v58;
  NSObject *v59;
  void *v60;
  NSObject *v61;
  void *v62;
  HMMTRAccessoryServer *v63;
  NSObject *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  id obj;
  uint64_t i;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t j;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  NSObject *group;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  _QWORD block[5];
  id v88;
  id v89;
  uint64_t *v90;
  _QWORD v91[4];
  NSObject *v92;
  uint64_t *v93;
  _QWORD v94[6];
  id v95;
  void *v96;
  NSObject *v97;
  uint64_t *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t);
  void (*v115)(uint64_t);
  id v116;
  uint8_t buf[4];
  void *v118;
  __int16 v119;
  void *v120;
  __int16 v121;
  id v122;
  _BYTE v123[128];
  _BYTE v124[128];
  _BYTE v125[128];
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v79 = a3;
  v70 = a4;
  group = dispatch_group_create();
  v111 = 0;
  v112 = &v111;
  v113 = 0x3032000000;
  v114 = __Block_byref_object_copy__7961;
  v115 = __Block_byref_object_dispose__7962;
  v116 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  objc_msgSend(v79, "objectForKeyedSubscript:", *MEMORY[0x24BDDB460]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    -[HAPAccessoryServer accessories](self, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v66 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v125, 16);
    if (!v66)
      goto LABEL_57;
    v67 = *(_QWORD *)v108;
    while (1)
    {
      for (i = 0; i != v66; ++i)
      {
        if (*(_QWORD *)v108 != v67)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * i);
        v103 = 0u;
        v104 = 0u;
        v105 = 0u;
        v106 = 0u;
        objc_msgSend(v8, "services");
        v71 = (id)objc_claimAutoreleasedReturnValue();
        v73 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v103, v124, 16);
        if (v73)
        {
          v72 = *(_QWORD *)v104;
          do
          {
            for (j = 0; j != v73; ++j)
            {
              if (*(_QWORD *)v104 != v72)
                objc_enumerationMutation(v71);
              v77 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(v77, "endpoint");
                v9 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v7, "endpoint");
                v10 = (void *)objc_claimAutoreleasedReturnValue();
                v11 = objc_msgSend(v9, "isEqualToNumber:", v10);

                if (v11)
                {
                  v101 = 0u;
                  v102 = 0u;
                  v99 = 0u;
                  v100 = 0u;
                  objc_msgSend(v77, "characteristics");
                  v12 = (void *)objc_claimAutoreleasedReturnValue();
                  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v99, v123, 16);
                  if (!v13)
                    goto LABEL_52;
                  v82 = *(_QWORD *)v100;
                  v80 = v12;
                  while (1)
                  {
                    v83 = v13;
                    for (k = 0; k != v83; ++k)
                    {
                      if (*(_QWORD *)v100 != v82)
                        objc_enumerationMutation(v80);
                      v15 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * k);
                      +[HMMTRProtocolMap protocolMap](HMMTRProtocolMap, "protocolMap");
                      v16 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v7, "endpoint");
                      v17 = (void *)objc_claimAutoreleasedReturnValue();
                      -[HMMTRAccessoryServer clusterIDCharacteristicMap](self, "clusterIDCharacteristicMap");
                      v18 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v16, "reportDescriptionForCharacteristic:endpointID:clusterIDCharacteristicMap:", v15, v17, v18);
                      v19 = (void *)objc_claimAutoreleasedReturnValue();

                      if (v19)
                      {
                        objc_msgSend(v19, "clusterId");
                        v20 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v7, "cluster");
                        v21 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v20 == v21
                          || (objc_msgSend(v19, "clusterId"),
                              v84 = (void *)objc_claimAutoreleasedReturnValue(),
                              objc_msgSend(v7, "cluster"),
                              v85 = (void *)objc_claimAutoreleasedReturnValue(),
                              -[HMMTRAccessoryServer _isBridgedBasicInformation:reportClusterID:](self, "_isBridgedBasicInformation:reportClusterID:", v84, v85)))
                        {
                          objc_msgSend(v19, "attributeIds");
                          v22 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v7, "attribute");
                          v23 = (void *)objc_claimAutoreleasedReturnValue();
                          v24 = objc_msgSend(v22, "containsObject:", v23);

                          if (v20 == v21)
                          {

                            if (!v24)
                              goto LABEL_46;
                            goto LABEL_30;
                          }
                        }
                        else
                        {
                          LOBYTE(v24) = 0;
                        }

                        if ((v24 & 1) == 0)
                          goto LABEL_46;
LABEL_30:
                        dispatch_group_enter(group);
                        objc_msgSend(v19, "clusterClass");
                        v25 = (void *)objc_claimAutoreleasedReturnValue();
                        if (!v25
                          || (objc_msgSend(v19, "clusterSelector"),
                              v26 = (void *)objc_claimAutoreleasedReturnValue(),
                              v27 = v26 == 0,
                              v26,
                              v25,
                              v27))
                        {
                          v40 = (void *)MEMORY[0x242656984]();
                          v41 = self;
                          HMFGetOSLogHandle();
                          v42 = (id)objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
                          {
                            HMFGetLogIdentifier();
                            v43 = (void *)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138543874;
                            v118 = v43;
                            v119 = 2112;
                            v120 = v15;
                            v121 = 2112;
                            v122 = v79;
                            _os_log_impl(&dword_23E95B000, v42, OS_LOG_TYPE_DEBUG, "%{public}@Updating characteristic: %@ from report: %@", buf, 0x20u);

                          }
                          objc_autoreleasePoolPop(v40);
                          v44 = (void *)objc_msgSend(v15, "copy");
                          objc_msgSend(v15, "service");
                          v45 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v44, "setService:", v45);

                          objc_msgSend(v19, "mapValue");
                          v46 = (void *)objc_claimAutoreleasedReturnValue();
                          if (v46)
                          {
                            objc_msgSend(v19, "mapValue");
                            v78 = objc_claimAutoreleasedReturnValue();
                            (*(void (**)(uint64_t, id))(v78 + 16))(v78, v79);
                            v47 = objc_claimAutoreleasedReturnValue();
                            v75 = (void *)v47;
                          }
                          else
                          {
                            +[HMMTRUtilities mtrBaseClusterValueFromMTRClusterReportValue:](HMMTRUtilities, "mtrBaseClusterValueFromMTRClusterReportValue:", v79);
                            v47 = objc_claimAutoreleasedReturnValue();
                            v76 = (void *)v47;
                          }
                          objc_msgSend(v44, "setValue:", v47);
                          v48 = v76;
                          if (v46)
                          {

                            v48 = (void *)v78;
                          }

                          v49 = (void *)MEMORY[0x242656984]();
                          v50 = v41;
                          HMFGetOSLogHandle();
                          v51 = (id)objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
                          {
                            HMFGetLogIdentifier();
                            v52 = (void *)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138543618;
                            v118 = v52;
                            v119 = 2112;
                            v120 = v44;
                            _os_log_impl(&dword_23E95B000, v51, OS_LOG_TYPE_INFO, "%{public}@Updated characteristic from report: %@", buf, 0x16u);

                          }
                          objc_autoreleasePoolPop(v49);
                          objc_msgSend((id)v112[5], "addObject:", v44);
                          +[HMMTRProtocolMap protocolMap](HMMTRProtocolMap, "protocolMap");
                          v53 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v7, "endpoint");
                          v54 = (void *)objc_claimAutoreleasedReturnValue();
                          -[HMMTRAccessoryServer clusterIDCharacteristicMap](v50, "clusterIDCharacteristicMap");
                          v55 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v53, "getUpdatedLinkedCharacteristics:endpointID:clusterIDCharacteristicMap:", v44, v54, v55);
                          v56 = (void *)objc_claimAutoreleasedReturnValue();

                          objc_msgSend((id)v112[5], "addObjectsFromArray:", v56);
                          v91[0] = MEMORY[0x24BDAC760];
                          v91[1] = 3221225472;
                          v91[2] = __84__HMMTRAccessoryServer__updatedCharacteristicsForAttributeReport_completionHandler___block_invoke_286;
                          v91[3] = &unk_250F22820;
                          v93 = &v111;
                          v92 = group;
                          -[HMMTRAccessoryServer _updateAdditionalCharacteristicsFromCharacteristicUpdate:service:path:completionHandler:](v50, "_updateAdditionalCharacteristicsFromCharacteristicUpdate:service:path:completionHandler:", v44, v77, v7, v91);

                        }
                        else
                        {
                          v28 = (void *)MEMORY[0x242656984]();
                          v29 = self;
                          HMFGetOSLogHandle();
                          v30 = (id)objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                          {
                            HMFGetLogIdentifier();
                            v31 = (void *)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138543618;
                            v118 = v31;
                            v119 = 2112;
                            v120 = v15;
                            _os_log_impl(&dword_23E95B000, v30, OS_LOG_TYPE_INFO, "%{public}@Attribute report needs custom handling for Characteristic %@", buf, 0x16u);

                          }
                          objc_autoreleasePoolPop(v28);
                          -[HMMTRAccessoryServer matterDevice](v29, "matterDevice");
                          v32 = (void *)objc_claimAutoreleasedReturnValue();

                          if (v32)
                          {
                            v33 = [HMMTRProtocolOperation alloc];
                            -[HMMTRAccessoryServer matterDevice](v29, "matterDevice");
                            v34 = (void *)objc_claimAutoreleasedReturnValue();
                            -[HMMTRAccessoryServer clusterIDCharacteristicMap](v29, "clusterIDCharacteristicMap");
                            v35 = (void *)objc_claimAutoreleasedReturnValue();
                            v36 = -[HMMTRProtocolOperation initWithOperationOfType:characteristic:matterDevice:primaryArgument:clusterIDCharacteristicMap:](v33, "initWithOperationOfType:characteristic:matterDevice:primaryArgument:clusterIDCharacteristicMap:", 2, v15, v34, v79, v35);

                            +[HMMTRProtocolOperationManager sharedInstance](HMMTRProtocolOperationManager, "sharedInstance");
                            v37 = (void *)objc_claimAutoreleasedReturnValue();
                            -[HAPAccessoryServer clientQueue](v29, "clientQueue");
                            v38 = (void *)objc_claimAutoreleasedReturnValue();
                            -[HMMTRAccessoryServer reportDistributor](v29, "reportDistributor");
                            v39 = (void *)objc_claimAutoreleasedReturnValue();
                            v94[0] = MEMORY[0x24BDAC760];
                            v94[1] = 3221225472;
                            v94[2] = __84__HMMTRAccessoryServer__updatedCharacteristicsForAttributeReport_completionHandler___block_invoke;
                            v94[3] = &unk_250F22848;
                            v94[4] = v29;
                            v94[5] = v15;
                            v98 = &v111;
                            v95 = v7;
                            v96 = v77;
                            v97 = group;
                            objc_msgSend(v37, "registerOperation:accessoryServer:clientQueue:reportDistributor:operationResponseHandler:updatedAttributesHandler:", v36, v29, v38, v39, v94, 0);

                          }
                          else
                          {
                            v57 = (void *)MEMORY[0x242656984]();
                            v58 = v29;
                            HMFGetOSLogHandle();
                            v59 = (id)objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                            {
                              HMFGetLogIdentifier();
                              v60 = (void *)objc_claimAutoreleasedReturnValue();
                              *(_DWORD *)buf = 138543618;
                              v118 = v60;
                              v119 = 2112;
                              v120 = v15;
                              _os_log_impl(&dword_23E95B000, v59, OS_LOG_TYPE_ERROR, "%{public}@MTRDevice unavailable to custom-handle the Attribute Report for characteristic %@", buf, 0x16u);

                            }
                            objc_autoreleasePoolPop(v57);
                            dispatch_group_leave(group);
                          }
                        }
                      }
LABEL_46:

                    }
                    v12 = v80;
                    v13 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v99, v123, 16);
                    if (!v13)
                    {
LABEL_52:

                      break;
                    }
                  }
                }
              }
            }
            v73 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v103, v124, 16);
          }
          while (v73);
        }

      }
      v66 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v125, 16);
      if (!v66)
      {
LABEL_57:

        -[HAPAccessoryServer clientQueue](self, "clientQueue");
        v61 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 3221225472;
        block[2] = __84__HMMTRAccessoryServer__updatedCharacteristicsForAttributeReport_completionHandler___block_invoke_2;
        block[3] = &unk_250F238B8;
        block[4] = self;
        v90 = &v111;
        v88 = v7;
        v89 = v70;
        dispatch_group_notify(group, v61, block);

        goto LABEL_61;
      }
    }
  }
  v62 = (void *)MEMORY[0x242656984]();
  v63 = self;
  HMFGetOSLogHandle();
  v64 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v118 = v65;
    _os_log_impl(&dword_23E95B000, v64, OS_LOG_TYPE_ERROR, "%{public}@Attribute path missing from report. Cannot handle this report.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v62);
  (*((void (**)(id, uint64_t))v70 + 2))(v70, v112[5]);
LABEL_61:

  _Block_object_dispose(&v111, 8);
}

- (void)_updatedCharacteristicsForEventReport:(id)a3 completionHandler:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  id v14;
  int v15;
  void *v16;
  HMMTRAccessoryServer *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  BOOL v49;
  void *v50;
  int v51;
  void *v52;
  char v53;
  void *v54;
  void (**v55)(_QWORD, _QWORD, _QWORD);
  void *v56;
  void *v57;
  void *v58;
  HMMTRAccessoryServer *v59;
  NSObject *v60;
  NSObject *v61;
  void *v62;
  void *v63;
  HMMTRAccessoryServer *v64;
  NSObject *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  HMMTRAccessoryServer *v75;
  NSObject *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  id obj;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  HMMTRAccessoryServer *v95;
  id v96;
  uint64_t v97;
  _QWORD v98[4];
  id v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint8_t buf[4];
  void *v113;
  __int16 v114;
  id v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  void *v119;
  __int16 v120;
  void *v121;
  _BYTE v122[128];
  _BYTE v123[128];
  _BYTE v124[128];
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v82 = a4;
  v91 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v92 = v6;
  objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x24BDDB4B0]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  objc_msgSend(v9, "cluster");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEqual:", &unk_250F3FD80);

  if (!v11)
    goto LABEL_12;
  objc_msgSend(v92, "objectForKeyedSubscript:", *MEMORY[0x24BDDB4A0]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v13 = (objc_opt_isKindOfClass() & 1) != 0 ? v12 : 0;
  v14 = v13;

  v15 = objc_msgSend(v14, "isEqual:", MEMORY[0x24BDBD1C8]);
  if (v15)
  {
    v16 = (void *)MEMORY[0x242656984]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v113 = v19;
      v114 = 2112;
      v115 = v92;
      _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Ignored switch event %@ in initial reports", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v20 = v82;
    (*((void (**)(id, _QWORD))v82 + 2))(v82, MEMORY[0x24BDBD1A8]);
    v21 = v91;
  }
  else
  {
LABEL_12:
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    -[HAPAccessoryServer accessories](self, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v85 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v124, 16);
    if (v85)
    {
      v22 = 0x250F1E000uLL;
      v84 = *(_QWORD *)v109;
      v94 = v9;
      v95 = self;
      do
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v109 != v84)
            objc_enumerationMutation(obj);
          v86 = v23;
          v24 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * v23);
          v104 = 0u;
          v105 = 0u;
          v106 = 0u;
          v107 = 0u;
          objc_msgSend(v24, "services");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v104, v123, 16);
          if (v26)
          {
            v27 = v26;
            v28 = *(_QWORD *)v105;
            v87 = *(_QWORD *)v105;
            v88 = v25;
            do
            {
              v29 = 0;
              v89 = v27;
              do
              {
                if (*(_QWORD *)v105 != v28)
                  objc_enumerationMutation(v25);
                v30 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * v29);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  objc_msgSend(v30, "endpoint");
                  v90 = v29;
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v9, "endpoint");
                  v93 = v30;
                  v32 = (void *)objc_claimAutoreleasedReturnValue();
                  v33 = objc_msgSend(v31, "isEqualToNumber:", v32);

                  v29 = v90;
                  if (v33)
                  {
                    v102 = 0u;
                    v103 = 0u;
                    v100 = 0u;
                    v101 = 0u;
                    objc_msgSend(v93, "characteristics");
                    v96 = (id)objc_claimAutoreleasedReturnValue();
                    v34 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v100, v122, 16);
                    if (v34)
                    {
                      v35 = v34;
                      v97 = *(_QWORD *)v101;
                      do
                      {
                        for (i = 0; i != v35; ++i)
                        {
                          if (*(_QWORD *)v101 != v97)
                            objc_enumerationMutation(v96);
                          v37 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * i);
                          objc_msgSend(*(id *)(v22 + 3568), "protocolMap");
                          v38 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v9, "endpoint");
                          v39 = (void *)objc_claimAutoreleasedReturnValue();
                          -[HMMTRAccessoryServer clusterIDCharacteristicMap](self, "clusterIDCharacteristicMap");
                          v40 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v38, "reportDescriptionForCharacteristic:endpointID:clusterIDCharacteristicMap:", v37, v39, v40);
                          v41 = (void *)objc_claimAutoreleasedReturnValue();

                          if (v41)
                          {
                            objc_msgSend(v41, "clusterId");
                            v42 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v9, "cluster");
                            v43 = (void *)objc_claimAutoreleasedReturnValue();
                            if ((objc_msgSend(v42, "isEqualToNumber:", v43) & 1) != 0
                              && (objc_msgSend(v41, "eventIds"), (v44 = objc_claimAutoreleasedReturnValue()) != 0))
                            {
                              v45 = (void *)v44;
                              objc_msgSend(v41, "eventIds");
                              v46 = (void *)objc_claimAutoreleasedReturnValue();
                              v98[0] = MEMORY[0x24BDAC760];
                              v98[1] = 3221225472;
                              v98[2] = __80__HMMTRAccessoryServer__updatedCharacteristicsForEventReport_completionHandler___block_invoke;
                              v98[3] = &unk_250F22870;
                              v47 = v9;
                              v99 = v47;
                              v48 = objc_msgSend(v46, "indexOfObjectPassingTest:", v98);

                              v22 = 0x250F1E000;
                              v49 = v48 == 0x7FFFFFFFFFFFFFFFLL;
                              self = v95;
                              if (!v49)
                              {
                                objc_msgSend(v93, "type");
                                v50 = (void *)objc_claimAutoreleasedReturnValue();
                                v51 = objc_msgSend(v50, "isEqualToString:", CFSTR("0000003E-0000-1000-8000-0026BB765291"));

                                if (!v51
                                  || (objc_msgSend(v47, "cluster"),
                                      v52 = (void *)objc_claimAutoreleasedReturnValue(),
                                      v53 = objc_msgSend(v52, "isEqual:", &unk_250F3FD98),
                                      v52,
                                      (v53 & 1) == 0))
                                {
                                  objc_msgSend(v41, "mapEvent");
                                  v54 = (void *)objc_claimAutoreleasedReturnValue();

                                  if (v54)
                                  {
                                    objc_msgSend(v41, "mapEvent");
                                    v55 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v47, "event");
                                    v56 = (void *)objc_claimAutoreleasedReturnValue();
                                    ((void (**)(_QWORD, void *, void *))v55)[2](v55, v56, v92);
                                    v57 = (void *)objc_claimAutoreleasedReturnValue();

                                  }
                                  else
                                  {
                                    +[HMMTRUtilities mtrBaseClusterValueFromMTRClusterReportValue:](HMMTRUtilities, "mtrBaseClusterValueFromMTRClusterReportValue:", v92);
                                    v57 = (void *)objc_claimAutoreleasedReturnValue();
                                  }
                                  v58 = (void *)MEMORY[0x242656984]();
                                  v59 = v95;
                                  HMFGetOSLogHandle();
                                  v60 = objc_claimAutoreleasedReturnValue();
                                  v61 = v60;
                                  if (v57)
                                  {
                                    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
                                    {
                                      HMFGetLogIdentifier();
                                      v62 = (void *)objc_claimAutoreleasedReturnValue();
                                      *(_DWORD *)buf = 138543874;
                                      v113 = v62;
                                      v114 = 2112;
                                      v115 = v37;
                                      v116 = 2112;
                                      v117 = v57;
                                      _os_log_impl(&dword_23E95B000, v61, OS_LOG_TYPE_INFO, "%{public}@Updating characteristic: %@ from report with value: %@", buf, 0x20u);

                                    }
                                    objc_autoreleasePoolPop(v58);
                                    v63 = (void *)MEMORY[0x242656984]();
                                    v64 = v59;
                                    HMFGetOSLogHandle();
                                    v65 = objc_claimAutoreleasedReturnValue();
                                    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
                                    {
                                      HMFGetLogIdentifier();
                                      v66 = (void *)objc_claimAutoreleasedReturnValue();
                                      *(_DWORD *)buf = 138543618;
                                      v113 = v66;
                                      v114 = 2112;
                                      v115 = v37;
                                      _os_log_impl(&dword_23E95B000, v65, OS_LOG_TYPE_INFO, "%{public}@Creating a copy for characteristic before modifying it %@", buf, 0x16u);

                                    }
                                    objc_autoreleasePoolPop(v63);
                                    v67 = (void *)objc_msgSend(v37, "copy");
                                    objc_msgSend(v37, "service");
                                    v68 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v67, "setService:", v68);

                                    objc_msgSend(v67, "setValue:", v57);
                                    objc_msgSend(v91, "addObject:", v67);
                                    +[HMMTRProtocolMap protocolMap](HMMTRProtocolMap, "protocolMap");
                                    v69 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v47, "endpoint");
                                    v70 = (void *)objc_claimAutoreleasedReturnValue();
                                    -[HMMTRAccessoryServer clusterIDCharacteristicMap](v64, "clusterIDCharacteristicMap");
                                    v71 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v69, "getUpdatedLinkedCharacteristics:endpointID:clusterIDCharacteristicMap:", v67, v70, v71);
                                    v72 = (void *)objc_claimAutoreleasedReturnValue();

                                    objc_msgSend(v91, "addObjectsFromArray:", v72);
                                    self = v95;
                                  }
                                  else
                                  {
                                    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                                    {
                                      HMFGetLogIdentifier();
                                      v73 = (void *)objc_claimAutoreleasedReturnValue();
                                      *(_DWORD *)buf = 138543618;
                                      v113 = v73;
                                      v114 = 2112;
                                      v115 = v92;
                                      _os_log_impl(&dword_23E95B000, v61, OS_LOG_TYPE_DEBUG, "%{public}@Ignored event %@ which doesn't derive a value", buf, 0x16u);

                                      self = v95;
                                    }

                                    objc_autoreleasePoolPop(v58);
                                  }

                                  v22 = 0x250F1E000;
                                }
                              }
                              v42 = v99;
                              v9 = v94;
                            }
                            else
                            {

                            }
                          }

                        }
                        v35 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v100, v122, 16);
                      }
                      while (v35);
                    }

                    v28 = v87;
                    v25 = v88;
                    v27 = v89;
                    v29 = v90;
                  }
                }
                ++v29;
              }
              while (v29 != v27);
              v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v104, v123, 16);
            }
            while (v27);
          }

          v23 = v86 + 1;
        }
        while (v86 + 1 != v85);
        v85 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v124, 16);
      }
      while (v85);
    }

    v74 = (void *)MEMORY[0x242656984]();
    v75 = self;
    HMFGetOSLogHandle();
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "endpoint");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "cluster");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "event");
      v80 = v9;
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v113 = v77;
      v114 = 2112;
      v115 = v91;
      v116 = 2112;
      v117 = v78;
      v118 = 2112;
      v119 = v79;
      v120 = 2112;
      v121 = v81;
      _os_log_impl(&dword_23E95B000, v76, OS_LOG_TYPE_DEBUG, "%{public}@Updated characteristics %@ for Report endpoint:%@ cluster:%@ event:%@", buf, 0x34u);

      v9 = v80;
    }

    objc_autoreleasePoolPop(v74);
    v20 = v82;
    v21 = v91;
    (*((void (**)(id, id))v82 + 2))(v82, v91);
  }

}

- (void)_updateAttributeTimer:(id)a3 report:(id)a4 timeout:(double)a5 server:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMMTRAccessoryServer *v17;
  NSObject *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  HMMTRAttributeTimer *v22;
  void *v23;
  HMMTRAttributeTimer *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a6;
  objc_msgSend(v10, "description");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer attributeTimers](self, "attributeTimers");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKeyedSubscript:", v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = (void *)MEMORY[0x242656984]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
  if (v15)
  {
    if (v19)
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543874;
      v28 = v20;
      v29 = 2112;
      v30 = v13;
      v31 = 2112;
      v32 = v11;
      _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Attribute timer found for %@ - reset timer and update report with %@", (uint8_t *)&v27, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
    -[HMMTRAccessoryServer attributeTimers](v17, "attributeTimers");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "objectForKey:", v13);
    v22 = (HMMTRAttributeTimer *)objc_claimAutoreleasedReturnValue();

    -[HMMTRAttributeTimer updateReport:](v22, "updateReport:", v11);
  }
  else
  {
    if (v19)
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543874;
      v28 = v23;
      v29 = 2112;
      v30 = v13;
      v31 = 2112;
      v32 = v11;
      _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Attribute timer NOT found for path %@ - Create timer with report %@", (uint8_t *)&v27, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
    v24 = [HMMTRAttributeTimer alloc];
    -[HAPAccessoryServer clientQueue](v17, "clientQueue");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = -[HMMTRAttributeTimer initWithServer:report:timeout:queue:server:](v24, "initWithServer:report:timeout:queue:server:", v10, v11, v25, v17, a5);

    -[HMMTRAccessoryServer attributeTimers](v17, "attributeTimers");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setObject:forKey:", v22, v13);

    -[HMMTRAttributeTimer start](v22, "start");
  }

}

- (void)openPairingWindowForDuration:(double)a3 completionHandler:(id)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  double v11;

  v6 = a4;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __71__HMMTRAccessoryServer_openPairingWindowForDuration_completionHandler___block_invoke;
  block[3] = &unk_250F230D0;
  v11 = a3;
  block[4] = self;
  v10 = v6;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)_metricCollectionWithError:(id)a3 description:(id)a4 progressState:(int64_t)a5
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a3;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  HMMLogTagActivityWithErrorAndField();

  objc_msgSend(v15, "userInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "objectForKey:", *MEMORY[0x24BDD1398]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(v15, "domain");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("hmmtrAccessoryPairingEventErrorDomainKey"), v11);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v15, "code"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("hmmtrAccessoryPairingEventErrorCodeKey"), v12);

  if (v10)
  {
    objc_msgSend(v10, "domain");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("hmmtrAccessoryPairingEventUnderlyingErrorDomainKey"), v13);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v10, "code"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("hmmtrAccessoryPairingEventUnderlyingErrorCodeKey"), v14);

  }
}

- (unsigned)getTransportTypeWithNodeID:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  dispatch_time_t v13;
  unsigned __int8 v14;
  _QWORD v16[5];
  id v17;
  NSObject *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v5 = dispatch_group_create();
  -[HMMTRAccessoryServer deviceController](self, "deviceController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    dispatch_group_enter(v5);
    v7 = objc_msgSend(v4, "unsignedLongLongValue");
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __51__HMMTRAccessoryServer_getTransportTypeWithNodeID___block_invoke;
    v16[3] = &unk_250F22898;
    v16[4] = self;
    v17 = v4;
    v18 = v5;
    v19 = &v20;
    objc_msgSend(v6, "getBaseDevice:queue:completionHandler:", v7, v8, v16);

  }
  else
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v12;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_ERROR, "%{public}@No device controller to get transport type", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
  }
  v13 = dispatch_time(0, 1000000000);
  dispatch_group_wait(v5, v13);
  if (*((unsigned __int8 *)v21 + 24) >= 4u)
    v14 = 0;
  else
    v14 = *((_BYTE *)v21 + 24);

  _Block_object_dispose(&v20, 8);
  return v14;
}

- (id)getTransportTypeStringWithNodeID:(id)a3
{
  unsigned int v3;

  v3 = -[HMMTRAccessoryServer getTransportTypeWithNodeID:](self, "getTransportTypeWithNodeID:", a3) - 1;
  if (v3 > 2)
    return CFSTR("HMMTRTransportTypeUndefined");
  else
    return off_250F23610[v3];
}

- (void)_openPairingWindowForDuration:(double)a3 completionHandler:(id)a4
{
  void (**v6)(id, void *);
  void *v7;
  HMMTRAccessoryServer *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMMTRAccessoryServer *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  void (**v19)(id, void *);
  _QWORD v20[5];
  void (**v21)(id, void *);
  uint64_t v22;
  double v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = (void (**)(id, void *))a4;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v10;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting open pairing window.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v6[2](v6, v11);

  }
  else
  {
    v12 = random();
    v13 = (void *)MEMORY[0x242656984]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v16;
      v26 = 2048;
      v27 = v12;
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: open pairing window job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v17 = MEMORY[0x24BDAC760];
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke;
    v20[3] = &unk_250F22910;
    v20[4] = v14;
    v22 = v12;
    v23 = a3;
    v21 = v6;
    v18[0] = v17;
    v18[1] = 3221225472;
    v18[2] = __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke_309;
    v18[3] = &unk_250F23F80;
    v19 = v21;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v14, "queueAccessoryOperation:highPriority:completion:", v20, 1, v18);

  }
}

- (void)openPairingWindowWithPINForDuration:(double)a3 completionHandler:(id)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  double v11;

  v6 = a4;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __78__HMMTRAccessoryServer_openPairingWindowWithPINForDuration_completionHandler___block_invoke;
  block[3] = &unk_250F230D0;
  v11 = a3;
  block[4] = self;
  v10 = v6;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)_openPairingWindowWithPINForDuration:(double)a3 completionHandler:(id)a4
{
  void (**v6)(id, _QWORD, void *);
  void *v7;
  HMMTRAccessoryServer *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  HMMTRAccessoryServer *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD v30[4];
  void (**v31)(id, _QWORD, void *);
  _QWORD v32[5];
  void (**v33)(id, _QWORD, void *);
  uint64_t v34;
  double v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = (void (**)(id, _QWORD, void *))a4;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v37 = v10;
      v11 = "%{public}@Accessory server operations disabled. Aborting open pairing window.";
LABEL_15:
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, v11, buf, 0xCu);

      goto LABEL_16;
    }
    goto LABEL_16;
  }
  -[HMMTRAccessoryServer browser](self, "browser");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v37 = v10;
      v11 = "%{public}@Browser is nil";
      goto LABEL_15;
    }
LABEL_16:

    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v6[2](v6, 0, v29);

    goto LABEL_17;
  }
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled())
  {
    v13 = (void *)MEMORY[0x242656984]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v37 = v16;
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, "%{public}@Aborting all thread connection requests due to external pairing request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    -[HMMTRAccessoryServer browser](v14, "browser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmmtrErrorWithCode:", 6);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "abortAndSuspendAllOperationsWithReason:", v18);

    -[HMMTRAccessoryServer browser](v14, "browser");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "enableUnrestrictedOperationsForAccessoryServer:", v14);

    if (-[HMMTRAccessoryServer knownToSystemCommissioner](v14, "knownToSystemCommissioner"))
    {
      -[HMMTRAccessoryServer browser](v14, "browser");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "threadRadioManager");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer fabricID](v14, "fabricID");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "startThreadRadioForSystemCommissionerFabricID:", v22);

    }
  }
  v23 = random();
  v24 = (void *)MEMORY[0x242656984]();
  v25 = self;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v27;
    v38 = 2048;
    v39 = v23;
    _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: open pairing window with PIN job(%lu) queued.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v24);
  v28 = MEMORY[0x24BDAC760];
  v32[0] = MEMORY[0x24BDAC760];
  v32[1] = 3221225472;
  v32[2] = __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke;
  v32[3] = &unk_250F22910;
  v32[4] = v25;
  v34 = v23;
  v35 = a3;
  v33 = v6;
  v30[0] = v28;
  v30[1] = 3221225472;
  v30[2] = __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_315;
  v30[3] = &unk_250F23F80;
  v31 = v33;
  -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v25, "queueAccessoryOperation:highPriority:completion:", v32, 1, v30);

LABEL_17:
}

- (void)readPairingWindowStatusWithCompletionHandler:(id)a3
{
  void (**v4)(id, _QWORD, void *);
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];
  void (**v17)(id, _QWORD, void *);
  _QWORD v18[5];
  void (**v19)(id, _QWORD, void *);
  uint64_t v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, _QWORD, void *))a3;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting reading pairing window status.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, 0, v9);

  }
  else
  {
    v10 = random();
    v11 = (void *)MEMORY[0x242656984]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v14;
      v23 = 2048;
      v24 = v10;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: read pairing window status job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = MEMORY[0x24BDAC760];
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke;
    v18[3] = &unk_250F230D0;
    v18[4] = v12;
    v20 = v10;
    v19 = v4;
    v16[0] = v15;
    v16[1] = 3221225472;
    v16[2] = __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke_323;
    v16[3] = &unk_250F23F80;
    v17 = v19;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v12, "queueAccessoryOperation:highPriority:completion:", v18, 0, v16);

  }
}

- (void)removePairing:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint64_t v25;
  _QWORD block[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting remove-pairing.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    -[HAPAccessoryServer clientQueue](v9, "clientQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke;
    block[3] = &unk_250F22988;
    v27 = v7;
    dispatch_async(v12, block);

    v13 = v27;
  }
  else
  {
    v14 = random();
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v18;
      v30 = 2048;
      v31 = v14;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: remove pairing job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v19 = MEMORY[0x24BDAC760];
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_324;
    v22[3] = &unk_250F228E8;
    v22[4] = v16;
    v25 = v14;
    v23 = v6;
    v24 = v7;
    v20[0] = v19;
    v20[1] = 3221225472;
    v20[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_329;
    v20[3] = &unk_250F23F80;
    v21 = v24;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v16, "queueAccessoryOperation:highPriority:completion:", v22, 0, v20);

    v13 = v23;
  }

}

- (void)updateFabricLabel:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  os_unfair_lock_s *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  HMMTRAccessoryServer *v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  _QWORD v27[5];
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  char v32;
  _QWORD block[4];
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting fabric label update.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    -[HAPAccessoryServer clientQueue](v9, "clientQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke;
    block[3] = &unk_250F22988;
    v34 = v7;
    dispatch_async(v12, block);

    v13 = v34;
  }
  else
  {
    v14 = random();
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
    os_unfair_lock_lock_with_options();
    -[HMMTRAccessoryServer lastPendingFabricLabel](self, "lastPendingFabricLabel");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "firstObject");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "isEqual:", v6);

    if ((v19 & 1) == 0)
    {
      objc_msgSend(v15, "addObject:", v6);
      -[HMMTRAccessoryServer setLastPendingFabricLabel:](self, "setLastPendingFabricLabel:", v15);
    }
    os_unfair_lock_unlock(v16);
    v20 = (void *)MEMORY[0x242656984]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v23;
      v37 = 2048;
      v38 = v14;
      _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: update fabric label job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    v24 = MEMORY[0x24BDAC760];
    v27[0] = MEMORY[0x24BDAC760];
    v27[1] = 3221225472;
    v27[2] = __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_330;
    v27[3] = &unk_250F22A28;
    v27[4] = v21;
    v31 = v14;
    v28 = v6;
    v32 = v19;
    v29 = v15;
    v30 = v7;
    v25[0] = v24;
    v25[1] = 3221225472;
    v25[2] = __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_335;
    v25[3] = &unk_250F23F80;
    v26 = v30;
    v13 = v15;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v21, "queueAccessoryOperation:highPriority:completion:", v27, 0, v25);

  }
}

- (void)updateAccessoryName:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  HMMTRAccessoryServer *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint8_t v45[128];
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  id v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v47 = v8;
    v48 = 2112;
    v49 = v4;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating accessory name to: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HAPAccessoryServer setName:](v6, "setName:", v4);
  -[HMMTRAccessoryServer primaryAccessory](v6, "primaryAccessory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setName:", v4);

  v35 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  -[HMMTRAccessoryServer primaryAccessory](v6, "primaryAccessory");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "services");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v41;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v41 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
        objc_msgSend(v16, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "isEqualToString:", CFSTR("0000003E-0000-1000-8000-0026BB765291"));

        if (v18)
        {
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          objc_msgSend(v16, "characteristics");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
          if (v20)
          {
            v21 = v20;
            v22 = *(_QWORD *)v37;
            v34 = v4;
            while (2)
            {
              for (j = 0; j != v21; ++j)
              {
                if (*(_QWORD *)v37 != v22)
                  objc_enumerationMutation(v19);
                v24 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * j);
                objc_msgSend(v24, "type", v34);
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                v26 = objc_msgSend(v25, "isEqualToString:", CFSTR("00000023-0000-1000-8000-0026BB765291"));

                if (v26)
                {
                  v27 = (void *)objc_msgSend(v24, "copy");
                  objc_msgSend(v24, "service");
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v27, "setService:", v28);

                  v4 = v34;
                  v29 = (void *)MEMORY[0x242656984](objc_msgSend(v27, "setValue:", v34));
                  v30 = v6;
                  HMFGetOSLogHandle();
                  v31 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v32 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543618;
                    v47 = v32;
                    v48 = 2112;
                    v49 = v27;
                    _os_log_impl(&dword_23E95B000, v31, OS_LOG_TYPE_INFO, "%{public}@Notification: Updated characteristic: %@", buf, 0x16u);

                  }
                  objc_autoreleasePoolPop(v29);
                  objc_msgSend(v35, "addObject:", v27);

                  goto LABEL_24;
                }
              }
              v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
              v4 = v34;
              if (v21)
                continue;
              break;
            }
          }
LABEL_24:

          goto LABEL_25;
        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
      if (v13)
        continue;
      break;
    }
  }
LABEL_25:

  -[HAPAccessoryServer delegate](v6, "delegate");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:", v6, v35, 0, 0);

}

- (void)fetchPairingsWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  void *v12;
  HMMTRAccessoryServer *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[5];
  id v20;
  uint64_t v21;
  _QWORD block[4];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting fetching pairings.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    -[HAPAccessoryServer clientQueue](v6, "clientQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke;
    block[3] = &unk_250F22988;
    v23 = v4;
    dispatch_async(v9, block);

    v10 = v23;
  }
  else
  {
    v11 = random();
    v12 = (void *)MEMORY[0x242656984]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v15;
      v26 = 2048;
      v27 = v11;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch pairings job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v16 = MEMORY[0x24BDAC760];
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_336;
    v19[3] = &unk_250F230D0;
    v19[4] = v13;
    v21 = v11;
    v20 = v4;
    v17[0] = v16;
    v17[1] = 3221225472;
    v17[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_342;
    v17[3] = &unk_250F23F80;
    v18 = v20;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v13, "queueAccessoryOperation:highPriority:completion:", v19, 0, v17);

    v10 = v20;
  }

}

- (void)_fetchCurrentPairingWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[5];
  id v19;
  uint64_t v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting fetching current pairing.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *, _QWORD))v4 + 2))(v4, 0, v9, 0);

  }
  else
  {
    v10 = random();
    v11 = (void *)MEMORY[0x242656984]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v14;
      v23 = 2048;
      v24 = v10;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch current pairing job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = MEMORY[0x24BDAC760];
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke;
    v18[3] = &unk_250F230D0;
    v18[4] = v12;
    v20 = v10;
    v19 = v4;
    v16[0] = v15;
    v16[1] = 3221225472;
    v16[2] = __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_347;
    v16[3] = &unk_250F23F80;
    v17 = v19;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v12, "queueAccessoryOperation:highPriority:completion:", v18, 0, v16);

  }
}

- (void)_fetchSerialNumberWithCompletionHandler:(id)a3
{
  void (**v4)(id, void *);
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];
  void (**v17)(id, void *);
  _QWORD v18[5];
  void (**v19)(id, void *);
  uint64_t v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, void *))a3;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting fetching serial number.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, v9);

  }
  else
  {
    v10 = random();
    v11 = (void *)MEMORY[0x242656984]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v14;
      v23 = 2048;
      v24 = v10;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch serial number job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = MEMORY[0x24BDAC760];
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke;
    v18[3] = &unk_250F230D0;
    v18[4] = v12;
    v20 = v10;
    v19 = v4;
    v16[0] = v15;
    v16[1] = 3221225472;
    v16[2] = __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_352;
    v16[3] = &unk_250F23F80;
    v17 = v19;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v12, "queueAccessoryOperation:highPriority:completion:", v18, 0, v16);

  }
}

- (void)fetchSoftwareVersion:(BOOL)a3 completionHandler:(id)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  BOOL v11;

  v6 = a4;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __63__HMMTRAccessoryServer_fetchSoftwareVersion_completionHandler___block_invoke;
  block[3] = &unk_250F22AC8;
  block[4] = self;
  v10 = v6;
  v11 = a3;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)setupThreadPairing
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  id v10;
  _QWORD v11[5];
  id v12;

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
    && -[HMMTRAccessoryServer linkLayerType](self, "linkLayerType") == 4)
  {
    -[HMMTRAccessoryServer browser](self, "browser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isCurrentDeviceAllowedAccessoryControlDespiteReachableResident");

    if (v4)
    {
      -[HMMTRAccessoryServer eMACAddress](self, "eMACAddress");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "dataUsingEncoding:", 4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMMTRAccessoryServer browser](self, "browser");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "threadRadioManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = -[HMMTRAccessoryServer isWEDDevice](self, "isWEDDevice");
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 3221225472;
      v11[2] = __42__HMMTRAccessoryServer_setupThreadPairing__block_invoke;
      v11[3] = &unk_250F23E18;
      v11[4] = self;
      v12 = v6;
      v10 = v6;
      objc_msgSend(v8, "startAccessoryPairingWithExtendedMACAddress:isWedDevice:accessoryServer:completion:", v10, v9, self, v11);

    }
  }
}

- (void)fetchWEDSupportInformationFromDevice:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint64_t v25;
  _QWORD block[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting fetching WED support information.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    -[HAPAccessoryServer clientQueue](v9, "clientQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke;
    block[3] = &unk_250F22988;
    v27 = v7;
    dispatch_async(v12, block);

    v13 = v27;
  }
  else
  {
    v14 = random();
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v18;
      v30 = 2048;
      v31 = v14;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch WED support information job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v19 = MEMORY[0x24BDAC760];
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_356;
    v22[3] = &unk_250F228E8;
    v22[4] = v16;
    v25 = v14;
    v24 = v7;
    v23 = v6;
    v20[0] = v19;
    v20[1] = 3221225472;
    v20[2] = __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_361;
    v20[3] = &unk_250F23F80;
    v21 = v24;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v16, "queueAccessoryOperation:highPriority:completion:", v22, 0, v20);

    v13 = v24;
  }

}

- (void)fetchExtendedMACAddressFromDevice:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint64_t v25;
  _QWORD block[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting fetching eMAC address.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    -[HAPAccessoryServer clientQueue](v9, "clientQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke;
    block[3] = &unk_250F22988;
    v27 = v7;
    dispatch_async(v12, block);

    v13 = v27;
  }
  else
  {
    v14 = random();
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v18;
      v30 = 2048;
      v31 = v14;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch eMAC address job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v19 = MEMORY[0x24BDAC760];
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_362;
    v22[3] = &unk_250F228E8;
    v22[4] = v16;
    v25 = v14;
    v24 = v7;
    v23 = v6;
    v20[0] = v19;
    v20[1] = 3221225472;
    v20[2] = __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_370;
    v20[3] = &unk_250F23F80;
    v21 = v24;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v16, "queueAccessoryOperation:highPriority:completion:", v22, 0, v20);

    v13 = v24;
  }

}

- (void)removeAllPairingsWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  void *v12;
  HMMTRAccessoryServer *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[5];
  id v20;
  uint64_t v21;
  _QWORD block[4];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting removing all pairings.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    -[HAPAccessoryServer clientQueue](v6, "clientQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke;
    block[3] = &unk_250F22988;
    v23 = v4;
    dispatch_async(v9, block);

    v10 = v23;
  }
  else
  {
    v11 = random();
    v12 = (void *)MEMORY[0x242656984]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v15;
      v26 = 2048;
      v27 = v11;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: remove all pairings job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v16 = MEMORY[0x24BDAC760];
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_371;
    v19[3] = &unk_250F230D0;
    v19[4] = v13;
    v21 = v11;
    v20 = v4;
    v17[0] = v16;
    v17[1] = 3221225472;
    v17[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_377;
    v17[3] = &unk_250F23F80;
    v18 = v20;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v13, "queueAccessoryOperation:highPriority:completion:", v19, 1, v17);

    v10 = v20;
  }

}

- (id)_readFixedCharacteristicValue:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqual:", CFSTR("000000CB-0000-1000-8000-0026BB765291")))
  {

  }
  else
  {
    objc_msgSend(v4, "type");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqual:", CFSTR("000000CD-0000-1000-8000-0026BB765291"));

    if (!v7)
    {
      v12 = 0;
      goto LABEL_8;
    }
  }
  v8 = (void *)MEMORY[0x242656984]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v4;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Read operation on fixed value characteristic: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v4, "value");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_8:

  return v12;
}

- (void)_readCharacteristicValueFromCacheWithCharacteristic:(id)a3 responseHandler:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v6 = a3;
  v7 = a4;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __92__HMMTRAccessoryServer__readCharacteristicValueFromCacheWithCharacteristic_responseHandler___block_invoke;
  v10[3] = &unk_250F22BB8;
  v10[4] = self;
  v11 = v6;
  v12 = v7;
  v8 = v7;
  v9 = v6;
  -[HMMTRAccessoryServer _queryBridgedAccessoryAndUnreachablePerCacheForCharacteristic:completion:](self, "_queryBridgedAccessoryAndUnreachablePerCacheForCharacteristic:completion:", v9, v10);

}

- (void)_readCharacteristicValueFromCacheAfterConfirmingBridgedAccessroyReachabilityWithCharacteristic:(id)a3 responseHandler:(id)a4
{
  id v6;
  void (**v7)(id, void *);
  void *v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  HMMTRProtocolOperation *v13;
  void *v14;
  void *v15;
  HMMTRProtocolOperation *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (void (**)(id, void *))a4;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138543618;
      v29 = v12;
      v30 = 2112;
      v31 = v6;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Read cache operation starts for characteristic: %@", (uint8_t *)&v28, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v13 = [HMMTRProtocolOperation alloc];
    -[HMMTRAccessoryServer matterDevice](v10, "matterDevice");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer clusterIDCharacteristicMap](v10, "clusterIDCharacteristicMap");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[HMMTRProtocolOperation initWithOperationOfType:characteristic:matterDevice:clusterIDCharacteristicMap:](v13, "initWithOperationOfType:characteristic:matterDevice:clusterIDCharacteristicMap:", 4, v6, v14, v15);

    if (v16)
    {
      +[HMMTRProtocolOperationManager sharedInstance](HMMTRProtocolOperationManager, "sharedInstance");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HAPAccessoryServer clientQueue](v10, "clientQueue");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer reportDistributor](v10, "reportDistributor");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "registerOperation:accessoryServer:clientQueue:reportDistributor:operationResponseHandler:updatedAttributesHandler:", v16, v10, v18, v19, v7, 0);

    }
    else
    {
      v23 = (void *)MEMORY[0x242656984]();
      v24 = v10;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138543618;
        v29 = v26;
        v30 = 2112;
        v31 = v6;
        _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_DEBUG, "%{public}@Read cache operation failed to be created for characteristic: %@", (uint8_t *)&v28, 0x16u);

      }
      objc_autoreleasePoolPop(v23);
      v27 = (void *)MEMORY[0x24BE1BA20];
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 14, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "responseTupleForCharacteristic:error:", v6, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v7[2](v7, v18);
    }

  }
  else
  {
    v20 = (void *)MEMORY[0x24BE1BA20];
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 14, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "responseTupleForCharacteristic:error:", v6, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, v22);

  }
}

- (void)_readCharacteristicValuesForFailedResponses:(id)a3 atIndexes:(id)a4 device:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  void (**v13)(_QWORD);
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  HMMTRAccessoryServer *v23;
  id v24;
  id v25;
  id v26;
  void (**v27)(_QWORD);
  uint64_t v28;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void (**)(_QWORD))a6;
  +[HMMTRProtocolOperationManager sharedInstance](HMMTRProtocolOperationManager, "sharedInstance");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "count"))
  {
    objc_msgSend(v11, "popFirstObject");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "unsignedIntValue");

    objc_msgSend(v10, "objectAtIndexedSubscript:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "characteristic");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __103__HMMTRAccessoryServer__readCharacteristicValuesForFailedResponses_atIndexes_device_completionHandler___block_invoke;
    v20[3] = &unk_250F22C08;
    v21 = v10;
    v22 = v18;
    v28 = v16;
    v23 = self;
    v24 = v11;
    v25 = v12;
    v27 = v13;
    v26 = v14;
    v19 = v18;
    -[HMMTRAccessoryServer _checkDeviceIfAccessoryIsBridgedAndUnreachableForCharacteristic:device:completion:](self, "_checkDeviceIfAccessoryIsBridgedAndUnreachableForCharacteristic:device:completion:", v19, v25, v20);

  }
  else
  {
    v13[2](v13);
  }

}

- (void)_readCharacteristicValuesForFailedResponses:(id)a3 dispatchGroup:(id)a4 errorHandler:(id)a5
{
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  HMMTRAccessoryServer *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  NSObject *v22;
  HMMTRAccessoryServer *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  dispatch_group_enter(v9);
  -[HMMTRAccessoryServer deviceController](self, "deviceController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v11, "isRunning") & 1) != 0)
  {
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "unsignedLongLongValue");
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __95__HMMTRAccessoryServer__readCharacteristicValuesForFailedResponses_dispatchGroup_errorHandler___block_invoke;
    v20[3] = &unk_250F22C30;
    v21 = v8;
    v22 = v9;
    v23 = self;
    v24 = v10;
    objc_msgSend(v11, "getBaseDevice:queue:completionHandler:", v13, v14, v20);

    v15 = v21;
  }
  else
  {
    v16 = (void *)MEMORY[0x242656984]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v19;
      _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_ERROR, "%{public}@No active Matter device controller to read characteristic values", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    dispatch_group_leave(v9);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v10 + 2))(v10, v15);
  }

}

- (id)_readLocallyMaintainedCharacteristicValue:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  void *v13;

  v4 = a3;
  objc_msgSend(v4, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqual:", CFSTR("0000026E-0000-1000-8000-0026BB765291"));

  if (v6)
  {
    -[HMMTRAccessoryServer matterFirmwareUpdateStatus](self, "matterFirmwareUpdateStatus");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "readForMatterFirmwareUpdateStatusCharacteristic:", v4);
    v8 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v4, "type");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isEqual:", CFSTR("00000235-0000-1000-8000-0026BB765291"));

    if (v10)
    {
      -[HMMTRAccessoryServer matterFirmwareUpdateStatus](self, "matterFirmwareUpdateStatus");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "readForHAPFirmwareUpdateStatusCharacteristic:", v4);
      v8 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v4, "type");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqual:", CFSTR("00000234-0000-1000-8000-0026BB765291"));

      if (!v12)
      {
        v13 = 0;
        goto LABEL_8;
      }
      -[HMMTRAccessoryServer matterFirmwareUpdateStatus](self, "matterFirmwareUpdateStatus");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "readForHAPFirmwareUpdateReadinessCharacteristic:", v4);
      v8 = objc_claimAutoreleasedReturnValue();
    }
  }
  v13 = (void *)v8;

LABEL_8:
  return v13;
}

- (void)_readCharacteristicValues:(id)a3 timeout:(double)a4 skipCache:(BOOL)a5 sendNotification:(BOOL)a6 completionQueue:(id)a7 completionHandler:(id)a8
{
  id v14;
  NSObject *v15;
  id v16;
  void *v17;
  void *v18;
  HMMTRAccessoryServer *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[5];
  id v32;
  NSObject *v33;
  id v34;
  uint64_t v35;
  double v36;
  BOOL v37;
  BOOL v38;
  _QWORD block[4];
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a7;
  v16 = a8;
  if (!v15 || (v17 = v16) == 0)
    _HMFPreconditionFailure();
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v18 = (void *)MEMORY[0x242656984]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v21;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting reading characteristic.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke;
    block[3] = &unk_250F22988;
    v40 = v17;
    dispatch_async(v15, block);
    v22 = v40;
  }
  else
  {
    v23 = random();
    v24 = (void *)MEMORY[0x242656984]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v42 = v27;
      v43 = 2112;
      v44 = v14;
      v45 = 2048;
      v46 = v23;
      _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Read characteristics(%@) job(%lu) queued.", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v24);
    v28 = MEMORY[0x24BDAC760];
    v31[0] = MEMORY[0x24BDAC760];
    v31[1] = 3221225472;
    v31[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_388;
    v31[3] = &unk_250F22DA0;
    v31[4] = v25;
    v35 = v23;
    v36 = a4;
    v32 = v14;
    v37 = a5;
    v33 = v15;
    v34 = v17;
    v38 = a6;
    v29[0] = v28;
    v29[1] = 3221225472;
    v29[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_397;
    v29[3] = &unk_250F23F80;
    v30 = v34;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v25, "queueAccessoryOperation:highPriority:completion:", v31, 0, v29);

    v22 = v32;
  }

}

- (void)readCharacteristicValues:(id)a3 timeout:(double)a4 completionQueue:(id)a5 completionHandler:(id)a6
{
  -[HMMTRAccessoryServer _readCharacteristicValues:timeout:skipCache:sendNotification:completionQueue:completionHandler:](self, "_readCharacteristicValues:timeout:skipCache:sendNotification:completionQueue:completionHandler:", a3, 0, 0, a5, a6, a4);
}

- (void)_writeCharacteristicValues:(id)a3 device:(id)a4 responseTuples:(id)a5 completionQueue:(id)a6 completionHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMMTRAccessoryServer *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMMTRProtocolOperation *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMMTRProtocolOperation *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  HMMTRDeviceTopology *v41;
  void *v42;
  HMMTRDeviceTopology *v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  _QWORD v61[4];
  id v62;
  id v63;
  HMMTRAccessoryServer *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  HMMTRProtocolOperation *v69;
  id v70;
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  id v76;
  __int16 v77;
  id v78;
  __int16 v79;
  id v80;
  __int16 v81;
  id v82;
  __int16 v83;
  void *v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void *)MEMORY[0x242656984]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  v59 = v13;
  v60 = v16;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v12, "count");
    v22 = (void *)MEMORY[0x242656B10](v16);
    *(_DWORD *)buf = 138544898;
    v72 = v20;
    v73 = 2048;
    v74 = v21;
    v13 = v59;
    v75 = 2112;
    v76 = v12;
    v77 = 2112;
    v78 = v59;
    v79 = 2112;
    v80 = v14;
    v81 = 2112;
    v82 = v15;
    v83 = 2112;
    v84 = v22;
    _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_DEBUG, "%{public}@_writeCharacteristicValues count %lu, characteristicWriteRequests %@, device %@, responseTuples %@, completionQueue %@, completionHandler %@", buf, 0x48u);

    v16 = v60;
  }

  objc_autoreleasePoolPop(v17);
  +[HMMTRProtocolOperationManager sharedInstance](HMMTRProtocolOperationManager, "sharedInstance");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "count"))
  {
    v55 = v23;
    v57 = v12;
    v58 = v15;
    objc_msgSend(v12, "popFirstObject");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v14 = (id)objc_claimAutoreleasedReturnValue();
    }
    v56 = v14;
    objc_msgSend(v24, "primary");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "characteristic");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _populateServiceForCharacteristic:](v18, "_populateServiceForCharacteristic:", v26);

    -[HMMTRAccessoryServer matterDevice](v18, "matterDevice");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    v28 = [HMMTRProtocolOperation alloc];
    v29 = objc_msgSend(v24, "characteristicHandlingType");
    objc_msgSend(v24, "primary");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "characteristic");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "primary");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "value");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (v27)
    {
      -[HMMTRAccessoryServer matterDevice](v18, "matterDevice");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer clusterIDCharacteristicMap](v18, "clusterIDCharacteristicMap");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = -[HMMTRProtocolOperation initWithOperationOfType:characteristicHandlingType:targetCharacteristic:targetValue:matterDevice:clusterIDCharacteristicMap:](v28, "initWithOperationOfType:characteristicHandlingType:targetCharacteristic:targetValue:matterDevice:clusterIDCharacteristicMap:", 1, v29, v31, v33, v34, v35);

      v13 = v59;
      -[HMMTRProtocolOperation setDevice:](v36, "setDevice:", v59);
    }
    else
    {
      -[HMMTRAccessoryServer clusterIDCharacteristicMap](v18, "clusterIDCharacteristicMap");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = v29;
      v13 = v59;
      v36 = -[HMMTRProtocolOperation initWithOperationOfType:characteristicHandlingType:targetCharacteristic:targetValue:device:clusterIDCharacteristicMap:](v28, "initWithOperationOfType:characteristicHandlingType:targetCharacteristic:targetValue:device:clusterIDCharacteristicMap:", 1, v38, v31, v33, v59, v37);

    }
    objc_msgSend(v24, "primary");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRProtocolOperation setWritePrimaryRequestTuple:](v36, "setWritePrimaryRequestTuple:", v39);

    objc_msgSend(v24, "secondary");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRProtocolOperation setWriteSecondaryRequestTuple:](v36, "setWriteSecondaryRequestTuple:", v40);

    v41 = [HMMTRDeviceTopology alloc];
    -[HMMTRAccessoryServer nodeID](v18, "nodeID");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = -[HMMTRDeviceTopology initWithNodeId:server:](v41, "initWithNodeId:server:", v42, v18);
    -[HMMTRProtocolOperation setTopology:](v36, "setTopology:", v43);

    v14 = v56;
    v23 = v55;
    if (v36)
    {
      v61[0] = MEMORY[0x24BDAC760];
      v61[1] = 3221225472;
      v61[2] = __107__HMMTRAccessoryServer__writeCharacteristicValues_device_responseTuples_completionQueue_completionHandler___block_invoke;
      v61[3] = &unk_250F22E18;
      v44 = v24;
      v62 = v44;
      v63 = v56;
      v64 = v18;
      v65 = v57;
      v45 = v13;
      v66 = v45;
      v67 = v58;
      v70 = v60;
      v68 = v55;
      v69 = v36;
      v46 = (void *)MEMORY[0x242656B10](v61);
      -[HMMTRAccessoryServer matterDevice](v18, "matterDevice");
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v44, "primary");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "characteristic");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      if (v47)
        -[HMMTRAccessoryServer _queryBridgedAccessoryAndUnreachablePerCacheForCharacteristic:completion:](v18, "_queryBridgedAccessoryAndUnreachablePerCacheForCharacteristic:completion:", v49, v46);
      else
        -[HMMTRAccessoryServer _checkDeviceIfAccessoryIsBridgedAndUnreachableForCharacteristic:device:completion:](v18, "_checkDeviceIfAccessoryIsBridgedAndUnreachableForCharacteristic:device:completion:", v49, v45, v46);

      v50 = v62;
      v13 = v59;
      v12 = v57;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 3, 0);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = (void *)MEMORY[0x24BE1BA20];
      objc_msgSend(v24, "primary");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "characteristic");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "responseTupleForCharacteristic:error:", v53, v50);
      v54 = (void *)objc_claimAutoreleasedReturnValue();

      v14 = v56;
      objc_msgSend(v56, "addObject:", v54);
      -[HMMTRAccessoryServer _writeCharacteristicValues:device:responseTuples:completionQueue:completionHandler:](v18, "_writeCharacteristicValues:device:responseTuples:completionQueue:completionHandler:", v57, v13, v56, v58, v60);

      v12 = v57;
    }

    v15 = v58;
    v16 = v60;
  }
  else
  {
    (*((void (**)(id, id, _QWORD))v16 + 2))(v16, v14, 0);
  }

}

- (void)writeCharacteristicValues:(id)a3 timeout:(double)a4 completionQueue:(id)a5 completionHandler:(id)a6
{
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  HMMTRAccessoryServer *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  HMMTRAccessoryServer *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  NSObject *v27;
  id v28;
  id v29;
  id v30[3];
  _QWORD block[4];
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a5;
  v12 = a6;
  if (!v11 || (v13 = v12) == 0)
    _HMFPreconditionFailure();
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v14 = (void *)MEMORY[0x242656984]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v17;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting writing characteristic.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke;
    block[3] = &unk_250F22988;
    v32 = v13;
    dispatch_async(v11, block);

  }
  else
  {
    v18 = (void *)random();
    v19 = (void *)MEMORY[0x242656984]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v34 = v22;
      v35 = 2112;
      v36 = v10;
      v37 = 2048;
      v38 = v18;
      _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Write characteristics(%@) job(%lu) queued.", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v19);
    objc_initWeak((id *)buf, v20);
    v23 = MEMORY[0x24BDAC760];
    v26[0] = MEMORY[0x24BDAC760];
    v26[1] = 3221225472;
    v26[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_398;
    v26[3] = &unk_250F22E90;
    objc_copyWeak(v30, (id *)buf);
    v30[1] = v18;
    v30[2] = *(id *)&a4;
    v29 = v13;
    v27 = v11;
    v28 = v10;
    v24[0] = v23;
    v24[1] = 3221225472;
    v24[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_403;
    v24[3] = &unk_250F23F80;
    v25 = v29;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v20, "queueAccessoryOperation:highPriority:completion:", v26, 1, v24);

    objc_destroyWeak(v30);
    objc_destroyWeak((id *)buf);
  }

}

- (id)_populateHandlingForCharacteristics:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  HMMTRCharacteristicWriteRequestTuple *v6;
  uint64_t i;
  void *v8;
  HMMTRCharacteristicWriteRequestTuple *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  HMMTRCharacteristicWriteRequestTuple *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  HMMTRCharacteristicWriteRequestTuple *v23;
  id v25;
  char v26;
  HMMTRCharacteristicWriteRequestTuple *v27;
  id obj;
  uint64_t v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v30 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v25 = v3;
    obj = v3;
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (!v4)
    {
      v27 = 0;
      v6 = 0;
      goto LABEL_29;
    }
    v5 = v4;
    v26 = 0;
    v27 = 0;
    v6 = 0;
    v29 = *(_QWORD *)v32;
    while (1)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v32 != v29)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        v9 = -[HMMTRCharacteristicWriteRequestTuple initWithRequestTuple:]([HMMTRCharacteristicWriteRequestTuple alloc], "initWithRequestTuple:", v8);
        -[HMMTRCharacteristicWriteRequestTuple setSecondary:](v9, "setSecondary:", 0);
        objc_msgSend(v8, "characteristic");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "type");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v11, "isEqualToString:", CFSTR("00000013-0000-1000-8000-0026BB765291")))
        {

LABEL_10:
          if (!v6)
          {
            v15 = v9;
            v6 = v15;
LABEL_12:
            -[HMMTRCharacteristicWriteRequestTuple setCharacteristicHandlingType:](v15, "setCharacteristicHandlingType:", 0, v25);
            goto LABEL_25;
          }
          -[HMMTRCharacteristicWriteRequestTuple setCharacteristicHandlingType:](v6, "setCharacteristicHandlingType:", 1);
          -[HMMTRCharacteristicWriteRequestTuple setCharacteristicHandlingType:](v9, "setCharacteristicHandlingType:", 2);
          -[HMMTRCharacteristicWriteRequestTuple primary](v6, "primary");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMMTRCharacteristicWriteRequestTuple setSecondary:](v9, "setSecondary:", v19);

          v6 = 0;
          goto LABEL_25;
        }
        objc_msgSend(v8, "characteristic");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "type");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isEqualToString:", CFSTR("0000002F-0000-1000-8000-0026BB765291"));

        if (v14)
          goto LABEL_10;
        objc_msgSend(v8, "characteristic");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "isEqualToString:", CFSTR("00000029-0000-1000-8000-0026BB765291"));

        if (v18)
        {
          -[HMMTRCharacteristicWriteRequestTuple setCharacteristicHandlingType:](v9, "setCharacteristicHandlingType:", 0);
          if (v27)
            -[HMMTRCharacteristicWriteRequestTuple setCharacteristicHandlingType:](v27, "setCharacteristicHandlingType:", 3);
          else
            v27 = 0;
          v26 = 1;
        }
        else
        {
          objc_msgSend(v8, "characteristic");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "type");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("000000B0-0000-1000-8000-0026BB765291"));

          if (!v22)
          {
            v15 = v9;
            goto LABEL_12;
          }
          v23 = v9;

          if ((v26 & 1) != 0)
          {
            -[HMMTRCharacteristicWriteRequestTuple setCharacteristicHandlingType:](v23, "setCharacteristicHandlingType:", 3);
            v26 = 1;
          }
          else
          {
            -[HMMTRCharacteristicWriteRequestTuple setCharacteristicHandlingType:](v23, "setCharacteristicHandlingType:", 0);
            v26 = 0;
          }
          v27 = v23;
        }
LABEL_25:
        objc_msgSend(v30, "addObject:", v9, v25);

      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      if (!v5)
      {
LABEL_29:

        v3 = v25;
        break;
      }
    }
  }

  return v30;
}

- (void)_populateServiceForCharacteristic:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMMTRAccessoryServer *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  void *v36;
  HMMTRAccessoryServer *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  __int128 v41;
  id obj;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  id v50;
  __int16 v51;
  void *v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer primaryAccessory](self, "primaryAccessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "characteristicsOfType:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = v7;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
  if (v8)
  {
    v10 = v8;
    v11 = *(_QWORD *)v44;
    *(_QWORD *)&v9 = 138543874;
    v41 = v9;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v44 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend(v4, "service", v41);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v14)
        {
          v15 = (void *)MEMORY[0x242656984]();
          v16 = self;
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v48 = v18;
            v49 = 2112;
            v50 = v4;
            _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@read/write is missing service for Characteristic %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v15);
          v19 = (void *)MEMORY[0x242656984]();
          v20 = v16;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v48 = v22;
            v49 = 2112;
            v50 = v13;
            _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_ERROR, "%{public}@current primary characteristic %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v19);
        }
        objc_msgSend(v13, "service");
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v23)
        {
          v24 = (void *)MEMORY[0x242656984]();
          v25 = self;
          HMFGetOSLogHandle();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v48 = v27;
            v49 = 2112;
            v50 = v13;
            _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_ERROR, "%{public}@No primary service for primary Characteristic %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v24);
        }
        objc_msgSend(v13, "instanceID");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "instanceID");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v28, "isEqualToNumber:", v29);

        if (v30)
        {
          objc_msgSend(v4, "service");
          v31 = objc_claimAutoreleasedReturnValue();
          if (!v31)
            goto LABEL_19;
          v32 = (void *)v31;
          objc_msgSend(v13, "service");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "service");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = objc_msgSend(v33, "isEqualToService:", v34);

          if ((v35 & 1) == 0)
          {
LABEL_19:
            v36 = (void *)MEMORY[0x242656984]();
            v37 = self;
            HMFGetOSLogHandle();
            v38 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v41;
              v48 = v39;
              v49 = 2112;
              v50 = v4;
              v51 = 2112;
              v52 = v13;
              _os_log_impl(&dword_23E95B000, v38, OS_LOG_TYPE_INFO, "%{public}@Updating service for Characteristic %@ using local characteristic %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v36);
            objc_msgSend(v13, "service");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "setService:", v40);

          }
        }
      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
    }
    while (v10);
  }

}

- (void)enableEvents:(BOOL)a3 forCharacteristics:(id)a4 withCompletionHandler:(id)a5 queue:(id)a6
{
  id v7;
  id v8;
  _QWORD block[4];
  id v10;

  v7 = a5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __84__HMMTRAccessoryServer_enableEvents_forCharacteristics_withCompletionHandler_queue___block_invoke;
  block[3] = &unk_250F22988;
  v10 = v7;
  v8 = v7;
  dispatch_async((dispatch_queue_t)a6, block);

}

- (void)identifyWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __47__HMMTRAccessoryServer_identifyWithCompletion___block_invoke;
  block[3] = &unk_250F22988;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, block);

}

- (void)handleUpdatesForCharacteristics:(id)a3 stateNumber:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x242656984]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543362;
    v13 = v11;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@UNIMPLEMENTED: CHIP Accessory doesn't implement handleUpdatesForCharacteristics", (uint8_t *)&v12, 0xCu);

  }
  objc_autoreleasePoolPop(v8);

}

- (BOOL)pingSupported
{
  return 0;
}

- (BOOL)_delegateRespondsToSelector:(SEL)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[HAPAccessoryServer delegate](self, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HAPAccessoryServer delegateQueue](self, "delegateQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[HAPAccessoryServer delegate](self, "delegate");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_opt_respondsToSelector();

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }

  return v7 & 1;
}

- (void)addMetricsWithDuration:(id)a3 metricsKey:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  const __CFString *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  id v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (v6)
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v20 = v11;
      v21 = 2114;
      v22 = v7;
      v23 = 2112;
      v24 = v7;
      v25 = 2114;
      v26 = CFSTR("duration");
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v17 = CFSTR("duration");
    v18 = v6;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)objc_msgSend(v13, "initWithTag:data:", v7, v14);
    -[HMFActivity tagProcessorList](v9->_activity, "tagProcessorList");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "submitTaggedEvent:processorList:", v15, v16);

    -[HAPAccessoryServer setPairingMetricWithKey:value:](v9, "setPairingMetricWithKey:value:", v7, v6);
  }

}

- (id)_progressStateToString:(int64_t)a3
{
  int64_t v3;
  __CFString *v4;

  v3 = a3 - 18;
  if ((unint64_t)(a3 - 18) < 0x15 && ((0x1FEDB3u >> v3) & 1) != 0)
  {
    v4 = off_250F23628[v3];
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown progressState %ld"), a3);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

- (void)_updateMetricWithProgressState:(int64_t)a3 error:(id)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  HMMTRAccessoryServer *v11;
  NSObject *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  const __CFString *v23;
  const __CFString *v24;
  void *v25;
  HMMTRAccessoryServer *v26;
  NSObject *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  HMMTRAccessoryServer *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void **v38;
  const __CFString **v39;
  void *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  const __CFString *v47;
  void *v48;
  const __CFString *v49;
  void *v50;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  const __CFString *v54;
  __int16 v55;
  const __CFString *v56;
  __int16 v57;
  const __CFString *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  const __CFString *v62;
  __int16 v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  -[HMMTRAccessoryServer _progressStateToString:](self, "_progressStateToString:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("hmmtrAccessoryPairingEventLastProgressState"), v7);
  if (v6)
  {
    v9 = -[HMMTRAccessoryServer _metricCollectionWithError:description:progressState:](self, "_metricCollectionWithError:description:progressState:", v6, CFSTR("Error in progress state"), a3);
  }
  else
  {
    v10 = (void *)MEMORY[0x242656984](v8);
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = 0x24BDD1000;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a3);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544898;
      v52 = v14;
      v53 = 2114;
      v54 = CFSTR("hmmtrAccessoryServerStateChange");
      v55 = 2112;
      v56 = CFSTR("Matter Progress Pairing State");
      v57 = 2114;
      v58 = CFSTR("state");
      v59 = 2112;
      v60 = v15;
      v61 = 2114;
      v62 = CFSTR("stateName");
      v63 = 2112;
      v64 = v7;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

      v13 = 0x24BDD1000uLL;
    }

    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_alloc(MEMORY[0x24BE4F1D0]);
    objc_msgSend(*(id *)(v13 + 1760), "numberWithInteger:", a3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v17, "initWithTag:data:", CFSTR("hmmtrAccessoryServerStateChange"), v19, CFSTR("state"), v18, CFSTR("stateName"), v7);
    -[HMFActivity tagProcessorList](v11->_activity, "tagProcessorList");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "submitTaggedEvent:processorList:", v20, v21);

  }
  switch(a3)
  {
    case 17:
    case 20:
    case 21:
    case 27:
    case 30:
    case 33:
      break;
    case 18:
      -[HMMTRAccessoryServer _endCurrentMetricTimeWithName:](self, "_endCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNameNetworkScan"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = CFSTR("hmmtrAccessoryPairingEventNetworkScanDurationInSeconds");
      goto LABEL_19;
    case 19:
      v24 = CFSTR("hmmtrAccessoryMetricNameNetworkScan");
      goto LABEL_21;
    case 22:
      -[HMMTRAccessoryServer _endCurrentMetricTimeWithName:](self, "_endCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNamePairingWindow"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = CFSTR("hmmtrAccessoryPairingEventWindowOpenedDurationInSeconds");
      goto LABEL_19;
    case 23:
      v24 = CFSTR("hmmtrAccessoryMetricNamePairingWindow");
      goto LABEL_21;
    case 25:
      -[HMMTRAccessoryServer _endCurrentMetricTimeWithName:](self, "_endCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNamePairingWindowWithPasscode"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = CFSTR("hmmtrAccessoryPairingEventWindowOpenedWithPassCodeDurationInSeconds");
      goto LABEL_19;
    case 26:
      v24 = CFSTR("hmmtrAccessoryMetricNamePairingWindowWithPasscode");
      goto LABEL_21;
    case 28:
      -[HMMTRAccessoryServer _endCurrentMetricTimeWithName:](self, "_endCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNameCommissioningAccessory"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = CFSTR("hmmtrAccessoryPairingEventCommissioningDurationInSeconds");
      goto LABEL_19;
    case 29:
      v24 = CFSTR("hmmtrAccessoryMetricNameCommissioningAccessory");
      goto LABEL_21;
    case 31:
      -[HMMTRAccessoryServer _endCurrentMetricTimeWithName:](self, "_endCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNameRetrieveThreadCredentials"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = CFSTR("hmmtrAccessoryPairingEventThreadCredentialSetupDurationInSeconds");
LABEL_19:
      -[HMMTRAccessoryServer addMetricsWithDuration:metricsKey:](self, "addMetricsWithDuration:metricsKey:", v22, v23);

      break;
    case 32:
      v24 = CFSTR("hmmtrAccessoryMetricNameRetrieveThreadCredentials");
LABEL_21:
      v29 = -[HMMTRAccessoryServer _endCurrentMetricTimeWithName:](self, "_endCurrentMetricTimeWithName:", v24);
      break;
    case 34:
      v30 = (void *)MEMORY[0x24BDBD1C8];
      v31 = (void *)MEMORY[0x242656984](-[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("HMMTRAccessoryPairingEventCASESessionSanityCheckPassed"), MEMORY[0x24BDBD1C8]));
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v52 = v34;
        v53 = 2114;
        v54 = CFSTR("hmmtrAccessoryServerCaseSessionSanityCheck");
        v55 = 2112;
        v56 = CFSTR("Case Sanity Check");
        v57 = 2114;
        v58 = CFSTR("success");
        v59 = 2112;
        v60 = v30;
        _os_log_impl(&dword_23E95B000, v33, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

      }
      objc_autoreleasePoolPop(v31);
      objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_alloc(MEMORY[0x24BE4F1D0]);
      v47 = CFSTR("success");
      v48 = v30;
      v37 = (void *)MEMORY[0x24BDBCE70];
      v38 = &v48;
      v39 = &v47;
      goto LABEL_28;
    case 35:
      v40 = (void *)MEMORY[0x24BDBD1C0];
      v41 = (void *)MEMORY[0x242656984](-[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("HMMTRAccessoryPairingEventCASESessionSanityCheckPassed"), MEMORY[0x24BDBD1C0]));
      v32 = self;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v52 = v43;
        v53 = 2114;
        v54 = CFSTR("hmmtrAccessoryServerCaseSessionSanityCheck");
        v55 = 2112;
        v56 = CFSTR("Case Sanity Check");
        v57 = 2114;
        v58 = CFSTR("success");
        v59 = 2112;
        v60 = v40;
        _os_log_impl(&dword_23E95B000, v42, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

      }
      objc_autoreleasePoolPop(v41);
      objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_alloc(MEMORY[0x24BE4F1D0]);
      v49 = CFSTR("success");
      v50 = v40;
      v37 = (void *)MEMORY[0x24BDBCE70];
      v38 = &v50;
      v39 = &v49;
LABEL_28:
      objc_msgSend(v37, "dictionaryWithObjects:forKeys:count:", v38, v39, 1);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = (void *)objc_msgSend(v36, "initWithTag:data:", CFSTR("hmmtrAccessoryServerCaseSessionSanityCheck"), v44);
      -[HMFActivity tagProcessorList](v32->_activity, "tagProcessorList");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "submitTaggedEvent:processorList:", v45, v46);

      break;
    default:
      v25 = (void *)MEMORY[0x242656984](v9);
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v52 = v28;
        v53 = 2048;
        v54 = (const __CFString *)a3;
        _os_log_impl(&dword_23E95B000, v27, OS_LOG_TYPE_INFO, "%{public}@Unhandled progress state %ld", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v25);
      break;
  }

}

- (void)_notifyDelegateOfPairingProgress:(int64_t)a3
{
  -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:error:](self, "_notifyDelegateOfPairingProgress:error:", a3, 0);
}

- (void)_notifyDelegateOfPairingProgress:(int64_t)a3 error:(id)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  _BOOL4 v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void (**v14)(_QWORD, _QWORD);
  _QWORD v15[6];

  v6 = a4;
  -[HAPAccessoryServer delegateQueue](self, "delegateQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = (void *)v7;
    v9 = -[HMMTRAccessoryServer _delegateRespondsToSelector:](self, "_delegateRespondsToSelector:", sel_accessoryServer_updatePairingProgress_);

    if (v9)
    {
      -[HAPAccessoryServer delegateQueue](self, "delegateQueue");
      v10 = objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __63__HMMTRAccessoryServer__notifyDelegateOfPairingProgress_error___block_invoke;
      v15[3] = &unk_250F226B0;
      v15[4] = self;
      v15[5] = a3;
      dispatch_async(v10, v15);

    }
  }
  if (-[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner"))
  {
    -[HMMTRAccessoryServer stageCompletion](self, "stageCompletion");
    v11 = objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v12 = (void *)v11;
      -[HMMTRAccessoryServer stageProgressUpdateHandler](self, "stageProgressUpdateHandler");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13)
      {
        -[HMMTRAccessoryServer stageProgressUpdateHandler](self, "stageProgressUpdateHandler");
        v14 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v14[2](v14, a3);

      }
    }
  }
  -[HMMTRAccessoryServer _updateMetricWithProgressState:error:](self, "_updateMetricWithProgressState:error:", a3, v6);

}

- (void)_deleteAccessoryServerData
{
  void *v3;
  id v4;

  if (!-[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner"))
  {
    -[HMMTRAccessoryServer storage](self, "storage");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeRecordsForNode:systemCommissionerFabric:", v3, 0);

  }
}

- (void)_persistAccessoryServerData
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  char v67;
  uint64_t v68;
  void *v69;
  void *v70;
  char v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  int v92;
  void *v93;
  __int16 v94;
  HMMTRAccessoryServer *v95;
  __int16 v96;
  void *v97;
  __int16 v98;
  void *v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer storage](v4, "storage");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "isSharedAdmin");
    HMFBooleanToString();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer knownToSystemCommissioner](v4, "knownToSystemCommissioner");
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = 138544130;
    v93 = v6;
    v94 = 2112;
    v95 = v4;
    v96 = 2112;
    v97 = v8;
    v98 = 2112;
    v99 = v9;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@Persisting HomeKitMatter Data for Accessory: %@, shared admin: %@, system commissioner mode: %@", (uint8_t *)&v92, 0x2Au);

  }
  objc_autoreleasePoolPop(v3);
  -[HMMTRAccessoryServer storage](v4, "storage");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isSharedAdmin");

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    -[HMMTRAccessoryServer pairingTargetHomeUUID](v4, "pairingTargetHomeUUID");
    v12 = objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v13 = (void *)v12;
      -[HMMTRAccessoryServer storage](v4, "storage");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "dataSource");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer pairingTargetHomeUUID](v4, "pairingTargetHomeUUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "appleHomeFabricWithUUID:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (v17)
      {
        objc_msgSend(v17, "delegate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "requiresRemoteFabricDataUpdate");

        LOBYTE(v11) = v19 | v11;
      }
    }
    if ((v11 & 1) == 0)
      goto LABEL_11;
  }
  else if (!v11)
  {
    goto LABEL_11;
  }
  if (!-[HMMTRAccessoryServer knownToSystemCommissioner](v4, "knownToSystemCommissioner"))
  {
    -[HMMTRAccessoryServer browser](v4, "browser");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "notifyPairingCompletionForAccessoryServer:", v4);

    -[HMMTRAccessoryServer storage](v4, "storage");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "endLocalStorageModeBySyncingToRemote:", 0);
LABEL_33:

    goto LABEL_34;
  }
LABEL_11:
  v20 = -[HMMTRAccessoryServer isKnownToSystemCommissioner](v4, "isKnownToSystemCommissioner");
  -[HMMTRAccessoryServer storage](v4, "storage");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setSystemCommissionerFabric:", v20);

  -[HMMTRAccessoryServer storage](v4, "storage");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer fabricID](v4, "fabricID");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "prepareStorageForFabricID:", v23);

  -[HMMTRAccessoryServer storage](v4, "storage");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "startLocalStorageMode");

  -[HMMTRAccessoryServer storage](v4, "storage");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v4, "nodeID");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "addPairedNodeID:", v26);

  -[HMMTRAccessoryServer storage](v4, "storage");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer vendorID](v4, "vendorID");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v4, "nodeID");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setVendorID:forNode:", v28, v29);

  -[HMMTRAccessoryServer storage](v4, "storage");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer fabricID](v4, "fabricID");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v4, "nodeID");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "setFabricID:forNode:", v31, v32);

  -[HMMTRAccessoryServer storage](v4, "storage");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer productID](v4, "productID");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v4, "nodeID");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "setProductID:forNode:", v34, v35);

  -[HMMTRAccessoryServer storage](v4, "storage");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer category](v4, "category");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v4, "nodeID");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "setCategory:forNode:", v37, v38);

  -[HMMTRAccessoryServer storage](v4, "storage");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HAPAccessoryServer configNumber](v4, "configNumber"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v4, "nodeID");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setConfigNumber:forNode:", v40, v41);

  -[HMMTRAccessoryServer storage](v4, "storage");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = -[HMMTRAccessoryServer isStaged](v4, "isStaged");
  -[HMMTRAccessoryServer nodeID](v4, "nodeID");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "setStaged:forNode:", v43, v44);

  -[HMMTRAccessoryServer topology](v4, "topology");
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  if (v45)
  {
    -[HMMTRAccessoryServer storage](v4, "storage");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer topology](v4, "topology");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](v4, "nodeID");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setTopology:forNode:", v47, v48);

  }
  else if (!-[HMMTRAccessoryServer isKnownToSystemCommissioner](v4, "isKnownToSystemCommissioner"))
  {
    _HMFPreconditionFailure();
  }
  if (-[HMMTRAccessoryServer isKnownToSystemCommissioner](v4, "isKnownToSystemCommissioner"))
  {
    -[HMMTRAccessoryServer storage](v4, "storage");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](v4, "nodeID");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer commissioningID](v4, "commissioningID");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setSystemCommissionerFabricNodeID:forUuid:", v50, v51);

    -[HMMTRAccessoryServer storage](v4, "storage");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer commissioningID](v4, "commissioningID");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](v4, "nodeID");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "setUuid:forSystemCommissionerFabricNode:", v53, v54);

    -[HMMTRAccessoryServer primaryAccessory](v4, "primaryAccessory");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "serialNumber");
    v56 = (void *)objc_claimAutoreleasedReturnValue();

    if (v56)
    {
      -[HMMTRAccessoryServer storage](v4, "storage");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer primaryAccessory](v4, "primaryAccessory");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "serialNumber");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer nodeID](v4, "nodeID");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "setSerialNumber:forSystemCommissionerFabricNode:", v59, v60);

    }
    -[HMMTRAccessoryServer storage](v4, "storage");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    -[HAPAccessoryServer name](v4, "name");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](v4, "nodeID");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "setDeviceName:forSystemCommissionerFabricNode:", v62, v63);

    -[HMMTRAccessoryServer setupPayloadString](v4, "setupPayloadString");
    v64 = objc_claimAutoreleasedReturnValue();
    if (v64
      && (v65 = (void *)v64,
          -[HMMTRAccessoryServer setupPayloadString](v4, "setupPayloadString"),
          v66 = (void *)objc_claimAutoreleasedReturnValue(),
          v67 = objc_msgSend(v66, "isEqual:", &stru_250F24B08),
          v66,
          v65,
          (v67 & 1) == 0))
    {
      -[HMMTRAccessoryServer storage](v4, "storage");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer setupPayloadString](v4, "setupPayloadString");
      v73 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMMTRAccessoryServer onboardingSetupPayloadString](v4, "onboardingSetupPayloadString");
      v68 = objc_claimAutoreleasedReturnValue();
      if (!v68
        || (v69 = (void *)v68,
            -[HMMTRAccessoryServer onboardingSetupPayloadString](v4, "onboardingSetupPayloadString"),
            v70 = (void *)objc_claimAutoreleasedReturnValue(),
            v71 = objc_msgSend(v70, "isEqual:", &stru_250F24B08),
            v70,
            v69,
            (v71 & 1) != 0))
      {
LABEL_25:
        if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
        {
          -[HMMTRAccessoryServer storage](v4, "storage");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v79 = -[HMMTRAccessoryServer isWEDDevice](v4, "isWEDDevice");
          -[HMMTRAccessoryServer nodeID](v4, "nodeID");
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "setWEDSupported:forSystemCommissionerFabricNode:", v79, v80);

          if (-[HMMTRAccessoryServer isWEDDevice](v4, "isWEDDevice"))
          {
            -[HMMTRAccessoryServer storage](v4, "storage");
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMMTRAccessoryServer eMACAddress](v4, "eMACAddress");
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMMTRAccessoryServer nodeID](v4, "nodeID");
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v81, "setExtendedMACAddress:forSystemCommissionerFabricNode:", v82, v83);

          }
        }
        goto LABEL_28;
      }
      -[HMMTRAccessoryServer storage](v4, "storage");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer onboardingSetupPayloadString](v4, "onboardingSetupPayloadString");
      v73 = objc_claimAutoreleasedReturnValue();
    }
    v76 = (void *)v73;
    -[HMMTRAccessoryServer nodeID](v4, "nodeID");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "setSetupPayload:forSystemCommissionerFabricNode:", v76, v77);

    goto LABEL_25;
  }
LABEL_28:
  -[HMMTRAccessoryServer storage](v4, "storage");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "endLocalStorageModeBySyncingToRemote:", 1);

  if (-[HMMTRAccessoryServer isKnownToSystemCommissioner](v4, "isKnownToSystemCommissioner"))
  {
    -[HMMTRAccessoryServer browser](v4, "browser");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer commissioningID](v4, "commissioningID");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer vendorID](v4, "vendorID");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer productID](v4, "productID");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer primaryAccessory](v4, "primaryAccessory");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v88, "serialNumber");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer setupPayloadString](v4, "setupPayloadString");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v90, "isEqual:", &stru_250F24B08))
    {
      objc_msgSend(v75, "cleanUpStaleSystemCommissionerPairingsWithNewlyPairedUUID:vendorID:productID:serialNumber:setupPayload:", v85, v86, v87, v89, 0);
    }
    else
    {
      -[HMMTRAccessoryServer setupPayloadString](v4, "setupPayloadString");
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "cleanUpStaleSystemCommissionerPairingsWithNewlyPairedUUID:vendorID:productID:serialNumber:setupPayload:", v85, v86, v87, v89, v91);

    }
    goto LABEL_33;
  }
LABEL_34:
  -[HMMTRAccessoryServer setStorageUpdatePending:](v4, "setStorageUpdatePending:", 0);
}

- (void)_clearCommissioneeInfoAfterPairingCompletion
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  -[HMMTRAccessoryServer browser](self, "browser");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCommissioneeAccessoryServer:", 0);

  if (!-[HMMTRAccessoryServer pairingUsingMatterSupport](self, "pairingUsingMatterSupport"))
  {
    -[HMMTRAccessoryServer storage](self, "storage");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "rootCert");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer setOriginalPairingAttemptRootCert:](self, "setOriginalPairingAttemptRootCert:", v5);

    -[HMMTRAccessoryServer storage](self, "storage");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "operationalCert");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer setOriginalPairingAttemptOperationalCert:](self, "setOriginalPairingAttemptOperationalCert:", v7);

  }
  -[HMMTRAccessoryServer storage](self, "storage");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setRootCert:", 0);

  -[HMMTRAccessoryServer storage](self, "storage");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setOperationalCert:", 0);

}

- (void)_restoreCommissioneeInfoBeforeNextPairingAttempt
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (!-[HMMTRAccessoryServer pairingUsingMatterSupport](self, "pairingUsingMatterSupport"))
  {
    -[HMMTRAccessoryServer originalPairingAttemptRootCert](self, "originalPairingAttemptRootCert");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer storage](self, "storage");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setRootCert:", v3);

    -[HMMTRAccessoryServer originalPairingAttemptOperationalCert](self, "originalPairingAttemptOperationalCert");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer storage](self, "storage");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setOperationalCert:", v6);

  }
}

- (id)_pairingSetupPayload
{
  uint64_t v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  HMMTRAccessoryServer *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  NSNumber *v12;
  NSNumber *discriminator;
  const __CFString *v14;
  NSNumber *setUpPINCode;
  void *v16;
  NSNumber *v17;
  void *v18;
  HMMTRAccessoryServer *v19;
  NSObject *v20;
  void *v21;
  NSNumber *nodeID;
  NSNumber *v23;
  void *v24;
  void *v25;
  void *v26;
  HMMTRAccessoryServer *v27;
  NSObject *v28;
  void *v29;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  NSNumber *v35;
  __int16 v36;
  NSNumber *v37;
  __int16 v38;
  const __CFString *v39;
  __int16 v40;
  NSNumber *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer setupPayloadString](self, "setupPayloadString");
  v3 = objc_claimAutoreleasedReturnValue();
  if (v3
    && (v4 = (void *)v3,
        -[HMMTRAccessoryServer setupPayloadString](self, "setupPayloadString"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isEqual:", &stru_250F24B08),
        v5,
        v4,
        (v6 & 1) == 0))
  {
    v18 = (void *)MEMORY[0x242656984]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      nodeID = v19->_nodeID;
      -[HMMTRAccessoryServer setupPayloadString](v19, "setupPayloadString");
      v23 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v33 = (uint64_t)v21;
      v34 = 2112;
      v35 = nodeID;
      v36 = 2112;
      v37 = v23;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@Pairing node ID: %@, onboarding payload: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v18);
    v24 = (void *)MEMORY[0x24BDDB810];
    -[HMMTRAccessoryServer setupPayloadString](v19, "setupPayloadString");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 0;
    objc_msgSend(v24, "setupPayloadWithOnboardingPayload:error:", v25, &v31);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (NSNumber *)v31;

    if (!v16)
    {
      v26 = (void *)MEMORY[0x242656984]();
      v27 = v19;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v33 = (uint64_t)v29;
        v34 = 2112;
        v35 = v17;
        _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse onboarding payload: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v26);
      v16 = 0;
    }
  }
  else
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = (void *)v10;
      v12 = v8->_nodeID;
      discriminator = v8->_discriminator;
      if (v8->_discriminatorIsOriginatedFromShort)
        v14 = CFSTR("YES");
      else
        v14 = CFSTR("NO");
      setUpPINCode = v8->_setUpPINCode;
      *(_DWORD *)buf = 138544386;
      v33 = v10;
      v34 = 2112;
      v35 = v12;
      v36 = 2112;
      v37 = discriminator;
      v38 = 2112;
      v39 = v14;
      v40 = 2112;
      v41 = setUpPINCode;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Pairing node ID: %@, discriminator: %@, short: %@, setupPINCode: %@", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v7);
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDB810]), "initWithSetupPasscode:discriminator:", v8->_setUpPINCode, v8->_discriminator);
    objc_msgSend(v16, "setHasShortDiscriminator:", v8->_discriminatorIsOriginatedFromShort);
    v17 = 0;
  }

  return v16;
}

- (void)_pairingComplete:(id)a3 context:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *linkLayerType;
  void *v13;
  void *v14;
  HMMTRAccessoryServer *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMMTRAccessoryServer *v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  void *v36;
  void *v37;
  char v38;
  id v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  HMMTRAccessoryServer *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  HMMTRAccessoryServer *v50;
  NSObject *v51;
  void *v52;
  void (**v53)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v54;
  id obj;
  void *v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t v62[4];
  void *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  id v67;
  _BYTE v68[128];
  __int128 v69;
  __int128 v70;
  const __CFString *v71;
  void *v72;
  uint8_t buf[32];
  __int16 v74;
  const __CFString *v75;
  __int16 v76;
  void *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (!v6)
    -[HMMTRAccessoryServer setPairingTimer:](self, "setPairingTimer:", 0);
  if (-[HMMTRAccessoryServer pairingProgress](self, "pairingProgress") == 3
    || -[HMMTRAccessoryServer pairingProgress](self, "pairingProgress") == 4)
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Pairing has already finished, ignoring pairing completion indication with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  else
  {
    linkLayerType = (void *)self->_linkLayerType;
    -[HMMTRAccessoryServer primaryAccessory](self, "primaryAccessory");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setLinkLayerType:", linkLayerType);

    v14 = (void *)MEMORY[0x242656984]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      HAPLinkLayerTypeDescription();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = CFSTR("accessoryTransport");
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = CFSTR("accessory transport");
      v74 = 2114;
      v75 = CFSTR("transport");
      v76 = 2112;
      v77 = v18;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_alloc(MEMORY[0x24BE4F1D0]);
    HAPLinkLayerTypeDescription();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      v71 = CFSTR("transport");
      HAPLinkLayerTypeDescription();
      linkLayerType = (void *)objc_claimAutoreleasedReturnValue();
      v72 = linkLayerType;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v72, &v71, 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v22 = (void *)MEMORY[0x24BDBD1B8];
    }
    v23 = (void *)objc_msgSend(v20, "initWithTag:data:", CFSTR("accessoryTransport"), v22);
    -[HMFActivity tagProcessorList](v15->_activity, "tagProcessorList");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "submitTaggedEvent:processorList:", v23, v24);

    if (v21)
    {

    }
    v25 = (void *)MEMORY[0x242656984]();
    v26 = v15;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = v27;
    if (v6)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v29;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v7;
        _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory pairing failed: %@, %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v25);
      -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v26, "_handlePairingFailureWithError:context:", v6, v7);
    }
    else
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v30;
        _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_INFO, "%{public}@CHIP Accessory pairing succeeded", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v25);
      -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](v26, "_notifyDelegateOfPairingStep:", 8);
      memset(buf, 0, sizeof(buf));
      v69 = 0u;
      v70 = 0u;
      cced25519_make_key_pair_compat();
      v56 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBytes:length:", buf, 32);
      if (-[HMMTRAccessoryServer pairedState](v26, "pairedState") != 1)
      {
        v54 = v7;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        -[HAPAccessoryServer accessories](v26, "accessories");
        obj = (id)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
        if (v31)
        {
          v32 = v31;
          v33 = *(_QWORD *)v59;
          while (2)
          {
            for (i = 0; i != v32; ++i)
            {
              if (*(_QWORD *)v59 != v33)
                objc_enumerationMutation(obj);
              v35 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * i);
              -[HAPAccessoryServer keyStore](v26, "keyStore");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "identifier");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              v57 = 0;
              v38 = objc_msgSend(v36, "savePublicKey:forAccessoryName:error:", v56, v37, &v57);
              v39 = v57;

              if ((v38 & 1) == 0)
              {
                v44 = (void *)MEMORY[0x242656984]();
                v45 = v26;
                HMFGetOSLogHandle();
                v46 = objc_claimAutoreleasedReturnValue();
                v7 = v54;
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)v62 = 138543874;
                  v63 = v47;
                  v64 = 2112;
                  v65 = v35;
                  v66 = 2112;
                  v67 = v39;
                  _os_log_impl(&dword_23E95B000, v46, OS_LOG_TYPE_ERROR, "%{public}@Failed to save public key for paired accessory %@: %@", v62, 0x20u);

                }
                objc_autoreleasePoolPop(v44);
                +[HMMTRAccessoryPairingEndContext hapContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hapContextWithStep:error:", 8, v39);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                -[HMMTRAccessoryServer _handlePairingFailureWithError:context:](v45, "_handlePairingFailureWithError:context:", v39, v48);

                goto LABEL_45;
              }

            }
            v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
            if (v32)
              continue;
            break;
          }
        }

        v7 = v54;
      }
      if (-[HMMTRAccessoryServer pairedState](v26, "pairedState") == 1)
      {
        -[HMMTRAccessoryServer setPairedState:](v26, "setPairedState:", 2);
        -[HMMTRAccessoryServer setPairingProgress:](v26, "setPairingProgress:", 4);
        -[HMMTRAccessoryServer stageCompletion](v26, "stageCompletion");
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        if (v40)
        {
          -[HMMTRAccessoryServer browser](v26, "browser");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend(v41, "isSystemCommissionerMode");

          if (v42)
          {
            -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](v26, "_notifyDelegateOfPairingProgress:", 13);
            -[HMMTRAccessoryServer browser](v26, "browser");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "commitStagedAccessoryServer:", v26);

          }
          else
          {
            -[HMMTRAccessoryServer stageCompletion](v26, "stageCompletion");
            v53 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
            ((void (**)(_QWORD, uint64_t, HMMTRAccessoryServer *, _QWORD))v53)[2](v53, 1, v26, 0);

            -[HMMTRAccessoryServer setStageCompletion:](v26, "setStageCompletion:", 0);
          }
        }
        else
        {
          v49 = (void *)MEMORY[0x242656984]();
          v50 = v26;
          HMFGetOSLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v62 = 138543362;
            v63 = v52;
            _os_log_impl(&dword_23E95B000, v51, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory is paired and staged but has no stage completion handler set!", v62, 0xCu);

          }
          objc_autoreleasePoolPop(v49);
        }
      }
      else
      {
        -[HMMTRAccessoryServer _finalizePairing](v26, "_finalizePairing");
      }
      -[HMMTRAccessoryServer _clearCommissioneeInfoAfterPairingCompletion](v26, "_clearCommissioneeInfoAfterPairingCompletion");
LABEL_45:

    }
  }

}

- (id)populateACLEntriesAfterPairing
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  HMMTRAccessoryServer *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  HMMTRAccessoryServer *v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  HMMTRAccessoryServer *v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  HMMTRAccessoryServer *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  HMMTRAccessoryServer *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  HMMTRAccessoryServer *v53;
  NSObject *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint8_t buf[4];
  void *v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  void *v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    -[HMMTRAccessoryServer deviceController](self, "deviceController");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "controllerNodeID");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v35);

LABEL_19:
    v18 = 0;
    v10 = 0;
    goto LABEL_30;
  }
  -[HMMTRAccessoryServer browser](self, "browser");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer fabricID](self, "fabricID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "appleHomeFabricWithID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "delegate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v6) = objc_msgSend(v8, "isCurrentUserOwner");

  if (!(_DWORD)v6)
  {
    v36 = (void *)MEMORY[0x242656984]();
    v37 = self;
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer storage](v37, "storage");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "fabricID");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v77 = v39;
      v78 = 2112;
      v79 = v41;
      _os_log_impl(&dword_23E95B000, v38, OS_LOG_TYPE_DEBUG, "%{public}@Not owner for home with fabric %@ - Not updating ACLs and blocking invalidation", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v36);
    -[HMMTRAccessoryServer setBlockInvalidation:](v37, "setBlockInvalidation:", 1);

    goto LABEL_19;
  }
  objc_msgSend(v7, "delegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "accessoryAdministerPrivilegeCATID:", 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v75 = v7;
  if (v10)
  {
    v11 = objc_msgSend(v10, "integerValue");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v11 | 0xFFFFFFFD00000000);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v12);

    v13 = (void *)MEMORY[0x242656984]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v77 = v16;
      v78 = 2112;
      v79 = v10;
      v80 = 2048;
      v81 = objc_msgSend(v10, "integerValue");
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, "%{public}@ACL: adding admin CAT %@ (0x%lX)", buf, 0x20u);

      v7 = v75;
    }

    objc_autoreleasePoolPop(v13);
  }
  objc_msgSend(v7, "delegate");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "accessoryOperatePrivilegeCATID:", 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    v19 = objc_msgSend(v18, "integerValue");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v19 | 0xFFFFFFFD00000000);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v20);

    v21 = (void *)MEMORY[0x242656984]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v18, "integerValue");
      *(_DWORD *)buf = 138543874;
      v77 = v24;
      v78 = 2112;
      v79 = v18;
      v80 = 2048;
      v81 = v25;
      _os_log_impl(&dword_23E95B000, v23, OS_LOG_TYPE_INFO, "%{public}@ACL: adding operate CAT %@ (0x%lX)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v21);
    v7 = v75;
  }
  objc_msgSend(v7, "fabricData");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "residentNodeID");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    v28 = (void *)MEMORY[0x242656984]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v27, "integerValue");
      *(_DWORD *)buf = 138543874;
      v77 = v31;
      v78 = 2112;
      v79 = v27;
      v80 = 2048;
      v81 = v32;
      _os_log_impl(&dword_23E95B000, v30, OS_LOG_TYPE_INFO, "%{public}@ACL: adding resident's NodeID %@ (0x%lX)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v28);
    v33 = objc_msgSend(v3, "addObject:", v27);
LABEL_26:
    v7 = v75;
    goto LABEL_27;
  }
  objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend(v42, "productPlatform");

  if (v43 == 4)
  {
    -[HMMTRAccessoryServer deviceController](self, "deviceController");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "controllerNodeID");
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    if (v45)
    {
      v46 = (void *)MEMORY[0x242656984]();
      v47 = self;
      HMFGetOSLogHandle();
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v49 = v4;
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = objc_msgSend(v45, "integerValue");
        *(_DWORD *)buf = 138543874;
        v77 = v50;
        v78 = 2112;
        v79 = v45;
        v80 = 2048;
        v81 = v51;
        _os_log_impl(&dword_23E95B000, v48, OS_LOG_TYPE_INFO, "%{public}@ACL: adding current device's NodeID %@ (0x%lX)", buf, 0x20u);

        v4 = v49;
        v27 = 0;
      }

      objc_autoreleasePoolPop(v46);
      objc_msgSend(v3, "addObject:", v45);
    }

    goto LABEL_26;
  }
LABEL_27:
  v52 = (void *)MEMORY[0x242656984](v33);
  v53 = self;
  HMFGetOSLogHandle();
  v54 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v72 = v3;
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer browser](v53, "browser");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "currentFabricID");
    v73 = v52;
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer fabricID](v53, "fabricID");
    v74 = v27;
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer storage](v53, "storage");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "fabricID");
    v59 = v4;
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544642;
    v77 = v55;
    v78 = 2112;
    v79 = v10;
    v80 = 2112;
    v81 = (uint64_t)v18;
    v82 = 2112;
    v83 = v56;
    v84 = 2112;
    v85 = v57;
    v86 = 2112;
    v87 = v60;
    _os_log_impl(&dword_23E95B000, v54, OS_LOG_TYPE_DEBUG, "%{public}@Updating CATs (admin %@, user %@) for FabricID (browser's %@, server's %@, storage's %@", buf, 0x3Eu);

    v4 = v59;
    v7 = v75;

    v27 = v74;
    v52 = v73;

    v3 = v72;
  }

  objc_autoreleasePoolPop(v52);
LABEL_30:
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = (void *)MEMORY[0x24BDBCF20];
  v63 = (void *)objc_msgSend(v3, "copy");
  objc_msgSend(v62, "setWithArray:", v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "allObjects");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "setObject:forKeyedSubscript:", v65, CFSTR("adminNodesForPairing"));

  v66 = (void *)MEMORY[0x24BDBCF20];
  v67 = (void *)objc_msgSend(v4, "copy");
  objc_msgSend(v66, "setWithArray:", v67);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "allObjects");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "setObject:forKeyedSubscript:", v69, CFSTR("regularNodesForPairing"));

  return v61;
}

- (id)populateACLEntriesForPairing
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  void *v31;
  HMMTRAccessoryServer *v32;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  HMMTRAccessoryServer *v51;
  NSObject *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  HMMTRAccessoryServer *v64;
  NSObject *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  BOOL v71;
  void *v72;
  void *v73;
  void *v74;
  HMMTRAccessoryServer *v75;
  NSObject *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  HMMTRAccessoryServer *v82;
  NSObject *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  HMMTRAccessoryServer *v94;
  NSObject *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  _QWORD v111[5];
  _QWORD v112[5];
  uint8_t buf[4];
  void *v114;
  __int16 v115;
  void *v116;
  __int16 v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  if (-[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner"))
  {
    v3 = (void *)MEMORY[0x242656984]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v114 = v6;
      _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Not populating ACL entries for System Commissioner pairing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionary");
    return (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      v109 = v9;
      v10 = (void *)MEMORY[0x24BDDB5B0];
      -[HMMTRAccessoryServer controllerWrapper](self, "controllerWrapper");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "startupParams");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "operationalCertificate");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "convertX509Certificate:", v13);
      v14 = objc_claimAutoreleasedReturnValue();

      v107 = (void *)v14;
      v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDB5A8]), "initWithTLVBytes:", v14);
      -[HMMTRAccessoryServer browser](self, "browser");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer fabricID](self, "fabricID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "appleHomeFabricWithID:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v18, "delegate");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "accessoryAdministerPrivilegeCATID:", 0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v108 = v20;
      if (v20)
      {
        v21 = objc_msgSend(v20, "integerValue");
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v21 | 0xFFFFFFFD00000000);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v22);

        v23 = (void *)MEMORY[0x242656984]();
        v24 = self;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v114 = v26;
          v115 = 2112;
          v116 = v108;
          v117 = 2048;
          v118 = objc_msgSend(v108, "integerValue");
          _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_INFO, "%{public}@ACL: adding admin CAT %@ (0x%lX)", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v23);
      }
      objc_msgSend(v18, "delegate");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "accessoryOperatePrivilegeCATID:", 0);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      if (v28)
      {
        v29 = objc_msgSend(v28, "integerValue");
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v29 | 0xFFFFFFFD00000000);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "addObject:", v30);

        v31 = (void *)MEMORY[0x242656984]();
        v32 = self;
        HMFGetOSLogHandle();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = objc_msgSend(v28, "integerValue");
          *(_DWORD *)buf = 138543874;
          v114 = v34;
          v115 = 2112;
          v116 = v28;
          v117 = 2048;
          v118 = v35;
          _os_log_impl(&dword_23E95B000, v33, OS_LOG_TYPE_INFO, "%{public}@ACL: adding operate CAT %@ (0x%lX)", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v31);
      }
      objc_msgSend(v18, "delegate");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend(v36, "isCurrentUserOwner");

      if (v37 && v15)
      {
        objc_msgSend(v15, "subject");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "caseAuthenticatedTags");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "allObjects");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v112[0] = MEMORY[0x24BDAC760];
        v112[1] = 3221225472;
        v112[2] = __52__HMMTRAccessoryServer_populateACLEntriesForPairing__block_invoke;
        v112[3] = &unk_250F22EB8;
        v112[4] = self;
        objc_msgSend(v40, "na_map:", v112);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObjectsFromArray:", v41);

      }
      -[HMMTRAccessoryServer storage](self, "storage");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "isSharedAdmin");

      if (v43)
      {
        if (v15)
        {
          objc_msgSend(v15, "subject");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "caseAuthenticatedTags");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "allObjects");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v111[0] = MEMORY[0x24BDAC760];
          v111[1] = 3221225472;
          v111[2] = __52__HMMTRAccessoryServer_populateACLEntriesForPairing__block_invoke_463;
          v111[3] = &unk_250F22EB8;
          v111[4] = self;
          objc_msgSend(v46, "na_map:", v111);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v109, "addObjectsFromArray:", v47);

        }
        -[HMMTRAccessoryServer deviceController](self, "deviceController");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "controllerNodeID");
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (v49)
        {
          v50 = (void *)MEMORY[0x242656984]();
          v51 = self;
          HMFGetOSLogHandle();
          v52 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = objc_msgSend(v49, "integerValue");
            *(_DWORD *)buf = 138543874;
            v114 = v53;
            v115 = 2112;
            v116 = v49;
            v117 = 2048;
            v118 = v54;
            _os_log_impl(&dword_23E95B000, v52, OS_LOG_TYPE_INFO, "%{public}@ACL: adding current controller's NodeID %@ (0x%lX)", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v50);
          objc_msgSend(v8, "addObject:", v49);
        }

      }
      -[HMMTRAccessoryServer fabricID](self, "fabricID");
      v55 = (void *)objc_claimAutoreleasedReturnValue();

      if (v55)
      {
        -[HMMTRAccessoryServer storage](self, "storage");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "dataSource");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer pairingTargetHomeUUID](self, "pairingTargetHomeUUID");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "appleHomeFabricWithUUID:", v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v59, "fabricData");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v60, "residentNodeID");
        v61 = (void *)objc_claimAutoreleasedReturnValue();

        if (v61)
          goto LABEL_28;
      }
      -[HMMTRAccessoryServer storage](self, "storage");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "legacyNodeIDForCurrentFabric");
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      if (v61)
      {
LABEL_28:
        v63 = (void *)MEMORY[0x242656984]();
        v64 = self;
        HMFGetOSLogHandle();
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = objc_msgSend(v61, "integerValue");
          *(_DWORD *)buf = 138543874;
          v114 = v66;
          v115 = 2112;
          v116 = v61;
          v117 = 2048;
          v118 = v67;
          _os_log_impl(&dword_23E95B000, v65, OS_LOG_TYPE_INFO, "%{public}@ACL: adding resident's NodeID %@ (0x%lX)", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v63);
        objc_msgSend(v8, "addObject:", v61);
      }
      -[HMMTRAccessoryServer controllerWrapper](self, "controllerWrapper");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v68, "startupParams");
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v69, "operationalCertificate");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      v71 = +[HMMTRAccessoryServer certificateSubjectHasCATs:](HMMTRAccessoryServer, "certificateSubjectHasCATs:", v70);

      if (!v71)
      {
        -[HMMTRAccessoryServer deviceController](self, "deviceController");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v72, "controllerNodeID");
        v73 = (void *)objc_claimAutoreleasedReturnValue();

        if (v73 && (objc_msgSend(v73, "isEqual:", v61) & 1) == 0)
        {
          v74 = (void *)MEMORY[0x242656984]();
          v75 = self;
          HMFGetOSLogHandle();
          v76 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            v78 = objc_msgSend(v73, "integerValue");
            *(_DWORD *)buf = 138543874;
            v114 = v77;
            v115 = 2112;
            v116 = v73;
            v117 = 2048;
            v118 = v78;
            _os_log_impl(&dword_23E95B000, v76, OS_LOG_TYPE_INFO, "%{public}@ACL: adding current controller's NodeID %@ (0x%lX) because it couldn't find any CAT in NOC", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v74);
          objc_msgSend(v8, "addObject:", v73);
        }

      }
      v9 = v109;
    }
    else
    {
      -[HMMTRAccessoryServer storage](self, "storage");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "ownerNodeID");
      v80 = (void *)objc_claimAutoreleasedReturnValue();

      if (v80)
      {
        v81 = (void *)MEMORY[0x242656984]();
        v82 = self;
        HMFGetOSLogHandle();
        v83 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMMTRAccessoryServer storage](v82, "storage");
          v110 = v8;
          v85 = v9;
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v86, "ownerNodeID");
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMMTRAccessoryServer storage](v82, "storage");
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v88, "ownerNodeID");
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v114 = v84;
          v115 = 2112;
          v116 = v87;
          v117 = 2048;
          v118 = objc_msgSend(v89, "integerValue");
          _os_log_impl(&dword_23E95B000, v83, OS_LOG_TYPE_INFO, "%{public}@ACL: adding resident's NodeID %@ (0x%lX)", buf, 0x20u);

          v9 = v85;
          v8 = v110;

        }
        objc_autoreleasePoolPop(v81);
        -[HMMTRAccessoryServer storage](v82, "storage");
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v90, "ownerNodeID");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v91);

      }
      -[HMMTRAccessoryServer deviceController](self, "deviceController");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v92, "controllerNodeID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      if (v18)
      {
        v93 = (void *)MEMORY[0x242656984]();
        v94 = self;
        HMFGetOSLogHandle();
        v95 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          v97 = objc_msgSend(v18, "integerValue");
          *(_DWORD *)buf = 138543874;
          v114 = v96;
          v115 = 2112;
          v116 = v18;
          v117 = 2048;
          v118 = v97;
          _os_log_impl(&dword_23E95B000, v95, OS_LOG_TYPE_INFO, "%{public}@ACL: adding current controller's NodeID %@ (0x%lX)", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v93);
        objc_msgSend(v8, "addObject:", v18);
      }
    }

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = (void *)MEMORY[0x24BDBCF20];
    v100 = (void *)objc_msgSend(v8, "copy");
    objc_msgSend(v99, "setWithArray:", v100);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v101, "allObjects");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "setObject:forKeyedSubscript:", v102, CFSTR("adminNodesForPairing"));

    v103 = (void *)MEMORY[0x24BDBCF20];
    v104 = (void *)objc_msgSend(v9, "copy");
    objc_msgSend(v103, "setWithArray:", v104);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "allObjects");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "setObject:forKeyedSubscript:", v106, CFSTR("regularNodesForPairing"));

    return v98;
  }
}

- (void)_finalizePairing
{
  uint64_t v3;
  void (**v4)(_QWORD);
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  HMMTRAccessoryServer *v13;
  NSObject *v14;
  void *v15;
  _QWORD block[5];
  void (**v17)(_QWORD);
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v20[5];
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v24[5];
  NSObject *v25;
  _QWORD v26[5];
  id v27;
  _QWORD v28[3];
  char v29;
  _QWORD v30[5];
  uint8_t buf[4];
  void *v32;
  uint64_t v33;

  v3 = MEMORY[0x24BDAC760];
  v33 = *MEMORY[0x24BDAC8D0];
  v30[0] = MEMORY[0x24BDAC760];
  v30[1] = 3221225472;
  v30[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke;
  v30[3] = &unk_250F23DF0;
  v30[4] = self;
  v4 = (void (**)(_QWORD))MEMORY[0x242656B10](v30, a2);
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2020000000;
  v29 = 0;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3032000000;
  v26[3] = __Block_byref_object_copy__7961;
  v26[4] = __Block_byref_object_dispose__7962;
  v27 = 0;
  v5 = dispatch_group_create();
  -[HMMTRAccessoryServer setBlockInvalidation:](self, "setBlockInvalidation:", 1);
  if (-[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner"))
  {
    dispatch_group_enter(v5);
    v24[0] = v3;
    v24[1] = 3221225472;
    v24[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_2;
    v24[3] = &unk_250F23E18;
    v24[4] = self;
    v25 = v5;
    -[HMMTRAccessoryServer _fetchSerialNumberWithCompletionHandler:](self, "_fetchSerialNumberWithCompletionHandler:", v24);

  }
  -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](self, "_notifyDelegateOfPairingStep:", 9);
  dispatch_group_enter(v5);
  -[HMMTRAccessoryServer populateACLEntriesForPairing](self, "populateACLEntriesForPairing");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("adminNodesForPairing"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("regularNodesForPairing"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v3;
  v20[1] = 3221225472;
  v20[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_465;
  v20[3] = &unk_250F22F80;
  v20[4] = self;
  v22 = v28;
  v23 = v26;
  v9 = v5;
  v21 = v9;
  -[HMMTRAccessoryServer updateAccessoryControlToAdministratorNodes:sharedUserNodes:completion:](self, "updateAccessoryControlToAdministratorNodes:sharedUserNodes:completion:", v7, v8, v20);
  -[HAPAccessoryServer delegateQueue](self, "delegateQueue");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[HAPAccessoryServer delegateQueue](self, "delegateQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = v3;
    block[1] = 3221225472;
    block[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_472;
    block[3] = &unk_250F22FA8;
    block[4] = self;
    v18 = v28;
    v19 = v26;
    v17 = v4;
    dispatch_group_notify(v9, v11, block);

  }
  else
  {
    v12 = (void *)MEMORY[0x242656984]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v15;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_ERROR, "%{public}@Browser died. Updating paired state but the accessory server must be removed soon.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    v4[2](v4);
  }

  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v28, 8);

}

- (void)_reportPairingComplete
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMMTRAccessoryServer *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  _QWORD block[5];
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _BOOL4 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v20 = v6;
    v21 = 2080;
    v22 = "-[HMMTRAccessoryServer _reportPairingComplete]";
    v23 = 1024;
    v24 = -[HMMTRAccessoryServer operationDisabled](v4, "operationDisabled");
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@%s operationDisabled = %d", buf, 0x1Cu);

  }
  objc_autoreleasePoolPop(v3);
  if (!-[HMMTRAccessoryServer operationDisabled](v4, "operationDisabled"))
    -[HMMTRAccessoryServer setDelayDiscovery:](v4, "setDelayDiscovery:", 1);
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
    && !-[HMMTRAccessoryServer operationDisabled](v4, "operationDisabled")
    && !-[HMMTRAccessoryServer knownToSystemCommissioner](v4, "knownToSystemCommissioner"))
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, 60.0);
    -[HMMTRAccessoryServer setResidentReachabilityUpdateWaitTimer:](v4, "setResidentReachabilityUpdateWaitTimer:", v7);

    -[HAPAccessoryServer clientQueue](v4, "clientQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer residentReachabilityUpdateWaitTimer](v4, "residentReachabilityUpdateWaitTimer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setDelegateQueue:", v8);

    -[HMMTRAccessoryServer residentReachabilityUpdateWaitTimer](v4, "residentReachabilityUpdateWaitTimer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setDelegate:", v4);

    -[HMMTRAccessoryServer residentReachabilityUpdateWaitTimer](v4, "residentReachabilityUpdateWaitTimer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "resume");

    v12 = (void *)MEMORY[0x242656984]();
    v13 = v4;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v15;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_INFO, "%{public}@Kicked off timer to stay active while resident updates reachability state", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }
  -[HMMTRAccessoryServer setPairingProgress:](v4, "setPairingProgress:", 4);
  -[HAPAccessoryServer delegateQueue](v4, "delegateQueue");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    -[HAPAccessoryServer delegateQueue](v4, "delegateQueue");
    v17 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __46__HMMTRAccessoryServer__reportPairingComplete__block_invoke;
    block[3] = &unk_250F23DF0;
    block[4] = v4;
    dispatch_async(v17, block);

  }
}

- (void)_finishMaximumDurationCollection
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  const __CFString *v25;
  __int16 v26;
  const __CFString *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer maxMetricDuration](v4, "maxMetricDuration");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer maxMetricDuration](v4, "maxMetricDuration");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "duration");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v21 = v6;
    v22 = 2114;
    v23 = CFSTR("hmmtrAccessoryServerPairingMaximumDuration");
    v24 = 2112;
    v25 = CFSTR("Maximum time segment of pairing");
    v26 = 2114;
    v27 = CFSTR("hmmtrAccessoryPairingEventMaxDurationName");
    v28 = 2112;
    v29 = v8;
    v30 = 2114;
    v31 = CFSTR("hmmtrAccessoryPairingEventMaxDurationTimeInSeconds");
    v32 = 2112;
    v33 = v10;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_alloc(MEMORY[0x24BE4F1D0]);
  -[HMMTRAccessoryServer maxMetricDuration](v4, "maxMetricDuration");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "name");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer maxMetricDuration](v4, "maxMetricDuration");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "duration");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v12, "initWithTag:data:", CFSTR("hmmtrAccessoryServerPairingMaximumDuration"), v17, CFSTR("hmmtrAccessoryPairingEventMaxDurationName"), v14, CFSTR("hmmtrAccessoryPairingEventMaxDurationTimeInSeconds"), v16);
  -[HMFActivity tagProcessorList](v4->_activity, "tagProcessorList");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "submitTaggedEvent:processorList:", v18, v19);

  -[HMMTRAccessoryServer setMaxMetricDuration:](v4, "setMaxMetricDuration:", 0);
}

- (void)finishPairing
{
  NSObject *v3;
  _QWORD block[5];

  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __37__HMMTRAccessoryServer_finishPairing__block_invoke;
  block[3] = &unk_250F23DF0;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_disconnectWithError:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  HMMTRAccessoryServer *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMMTRAccessoryServer isPaired](self, "isPaired"))
  {
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      v5 = (void *)MEMORY[0x242656984]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543618;
        v16 = v8;
        v17 = 2112;
        v18 = v6;
        _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Keeping CHIP link alive for accessory:%@ till invalidated", (uint8_t *)&v15, 0x16u);

      }
      objc_autoreleasePoolPop(v5);
    }
    else
    {
      -[HMMTRAccessoryServer browser](self, "browser");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isCurrentDevicePrimaryResident");

      if ((v10 & 1) == 0)
      {
        v11 = (void *)MEMORY[0x242656984]();
        v12 = self;
        HMFGetOSLogHandle();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = 138543618;
          v16 = v14;
          v17 = 2112;
          v18 = v12;
          _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Terminating CHIP link for accessory:%@. Only the Primary Resident may communicate with it now.", (uint8_t *)&v15, 0x16u);

        }
        objc_autoreleasePoolPop(v11);
        -[HMMTRAccessoryServer disable](v12, "disable");
      }
    }
  }

}

- (void)disconnect
{
  -[HMMTRAccessoryServer disconnectWithError:](self, "disconnectWithError:", 0);
}

- (void)disconnectWithError:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __44__HMMTRAccessoryServer_disconnectWithError___block_invoke;
  v7[3] = &unk_250F22458;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_setCategoryForPrimaryAccessory:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    v5 = (void *)MEMORY[0x242656984](-[HAPAccessoryServer setCategory:](self, "setCategory:", v4));
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v4;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Set category to %@ for primary accessory", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

- (id)_getFirstNonOtherCategory:(id)a3
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  v4 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, "count") == 1)
    {
      objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C0], "sortDescriptorWithKey:ascending:", CFSTR("self"), 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v21[0] = v6;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v21, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "sortedArrayUsingDescriptors:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v9 = v8;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v17;
        while (2)
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v17 != v12)
              objc_enumerationMutation(v9);
            v14 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
            if (objc_msgSend(v14, "integerValue", (_QWORD)v16) > 1)
            {
              v5 = v14;

              goto LABEL_15;
            }
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
          if (v11)
            continue;
          break;
        }
      }

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 1);
      v5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_15:

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)_categoryFromAccessoryInfo:(id)a3 endpoint:(id)a4
{
  void *v5;
  void *v6;

  objc_msgSend(a3, "categoriesForEndpoint:", a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer _getFirstNonOtherCategory:](self, "_getFirstNonOtherCategory:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)_categoryFromTopology:(id)a3 endpoint:(id)a4
{
  void *v5;
  void *v6;

  objc_msgSend(a3, "getHAPCategoriesAtEndpoint:", a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer _getFirstNonOtherCategory:](self, "_getFirstNonOtherCategory:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)_endpointForOTARequestorWithTopology:(id)a3 mtrDevice:(id)a4 callbackQueue:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  void (**v13)(id, void *, _QWORD);
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  HMMTRAccessoryServer *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  void (**v25)(id, void *, _QWORD);
  uint8_t buf[4];
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void (**)(id, void *, _QWORD))a6;
  objc_msgSend(v10, "getOTARequestorEndpoints");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    objc_msgSend(v10, "getVersionForKey:", CFSTR("EnumeratedProtocolMap"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "intValue");

    if (v16 > 100)
    {
      objc_msgSend(v10, "getEnabledOTARequestorEndpoint");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        v13[2](v13, v18, 0);
      }
      else
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(id, void *, void *))v13)[2](v13, 0, v23);

      }
LABEL_12:

      goto LABEL_13;
    }
  }
  if (!v11)
  {
    v19 = (void *)MEMORY[0x242656984]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v22;
      _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_ERROR, "%{public}@No Matter device available to get the OTA requestor endpoint", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 8);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, void *, void *))v13)[2](v13, 0, v18);
    goto LABEL_12;
  }
  +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __103__HMMTRAccessoryServer__endpointForOTARequestorWithTopology_mtrDevice_callbackQueue_completionHandler___block_invoke;
  v24[3] = &unk_250F22FD0;
  v25 = v13;
  objc_msgSend(v17, "endpointForClusterID:mtrDevice:callbackQueue:completionHandler:", &unk_250F3FCA8, v11, v12, v24);

LABEL_13:
}

- (void)_createFirmwareUpdateServiceWithInstanceID:(int64_t)a3 device:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  HMMTRDeviceTopology *v10;
  void *v11;
  HMMTRDeviceTopology *v12;
  void *v13;
  id v14;
  _QWORD v15[5];
  id v16;
  _QWORD *v17;
  int64_t v18;
  _QWORD v19[4];

  v8 = a4;
  v9 = a5;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2020000000;
  v19[3] = a3;
  v10 = [HMMTRDeviceTopology alloc];
  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HMMTRDeviceTopology initWithNodeId:server:](v10, "initWithNodeId:server:", v11, self);

  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __92__HMMTRAccessoryServer__createFirmwareUpdateServiceWithInstanceID_device_completionHandler___block_invoke;
  v15[3] = &unk_250F22FF8;
  v14 = v9;
  v15[4] = self;
  v16 = v14;
  v17 = v19;
  v18 = a3;
  -[HMMTRAccessoryServer _endpointForOTARequestorWithTopology:mtrDevice:callbackQueue:completionHandler:](self, "_endpointForOTARequestorWithTopology:mtrDevice:callbackQueue:completionHandler:", v12, v8, v13, v15);

  _Block_object_dispose(v19, 8);
}

- (id)_distinctEndpointsHavingHapServicesForTopology:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a3, "hapServiceTypes");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x24BDBCEB8];
  objc_msgSend(v3, "allKeys");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "arrayWithArray:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  objc_msgSend(v6, "sortUsingComparator:", &__block_literal_global_584);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v12), "integerValue", (_QWORD)v15));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v7, "containsObject:", v13) & 1) == 0)
          objc_msgSend(v7, "addObject:", v13);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
  }

  return v7;
}

- (void)enumerateHAPServices:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __45__HMMTRAccessoryServer_enumerateHAPServices___block_invoke;
  v7[3] = &unk_250F22768;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)updateAllCharacteristicValuesPostHAPServiceEnumeration:(id)a3
{
  void *v4;
  HMMTRAccessoryServer *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  id v20;
  id obj;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD block[4];
  id v26;
  __int128 *v27;
  _QWORD v28[6];
  NSObject *v29;
  __int128 *p_buf;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint8_t v40[128];
  __int128 buf;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v20 = a3;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = self;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Updating all characteristic values from MTRDevice cache", (uint8_t *)&buf, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  v8 = dispatch_group_create();
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v42 = 0x3032000000;
  v43 = __Block_byref_object_copy__7961;
  v44 = __Block_byref_object_dispose__7962;
  v45 = 0;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  -[HMMTRAccessoryServer primaryAccessory](v5, "primaryAccessory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "services");
  obj = (id)objc_claimAutoreleasedReturnValue();

  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v10)
  {
    v22 = *(_QWORD *)v36;
    do
    {
      v11 = 0;
      v23 = v10;
      do
      {
        if (*(_QWORD *)v36 != v22)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v11);
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        objc_msgSend(v12, "characteristics");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
        v24 = v11;
        if (v14)
        {
          v15 = *(_QWORD *)v32;
          do
          {
            v16 = 0;
            do
            {
              if (*(_QWORD *)v32 != v15)
                objc_enumerationMutation(v13);
              v17 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v16);
              dispatch_group_enter(v8);
              v28[0] = MEMORY[0x24BDAC760];
              v28[1] = 3221225472;
              v28[2] = __79__HMMTRAccessoryServer_updateAllCharacteristicValuesPostHAPServiceEnumeration___block_invoke;
              v28[3] = &unk_250F23060;
              v28[4] = v5;
              v28[5] = v17;
              p_buf = &buf;
              v29 = v8;
              -[HMMTRAccessoryServer _readCharacteristicValueFromCacheWithCharacteristic:responseHandler:](v5, "_readCharacteristicValueFromCacheWithCharacteristic:responseHandler:", v17, v28);

              ++v16;
            }
            while (v14 != v16);
            v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
          }
          while (v14);
        }

        v11 = v24 + 1;
      }
      while (v24 + 1 != v23);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v10);
  }

  -[HAPAccessoryServer clientQueue](v5, "clientQueue");
  v18 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __79__HMMTRAccessoryServer_updateAllCharacteristicValuesPostHAPServiceEnumeration___block_invoke_585;
  block[3] = &unk_250F23C08;
  v26 = v20;
  v27 = &buf;
  v19 = v20;
  dispatch_group_notify(v8, v18, block);

  _Block_object_dispose(&buf, 8);
}

- (void)_rebuildHAPServicesFromCHIPWithCompletionHandler:(id)a3
{
  void (**v4)(id, void *);
  _BOOL4 v5;
  void *v6;
  HMMTRAccessoryServer *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void (**v14)(id, void *);
  void *v15;
  void *v16;
  int v17;
  void (**v18)(void);
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v29[5];
  _QWORD v30[5];
  _QWORD v31[5];
  id v32;
  _QWORD v33[5];
  void (**v34)(id, void *);
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, void *))a3;
  v5 = -[HMMTRAccessoryServer operationDisabled](self, "operationDisabled");
  v6 = (void *)MEMORY[0x242656984]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v10;
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting rebuilding HAP services.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    if (v4)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v4[2](v4, v11);

    }
  }
  else
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v12;
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_INFO, "%{public}@Rebuilding HAP Services from MTRDevice cache", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v13 = MEMORY[0x24BDAC760];
    v33[0] = MEMORY[0x24BDAC760];
    v33[1] = 3221225472;
    v33[2] = __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke;
    v33[3] = &unk_250F23CD0;
    v33[4] = v7;
    v14 = v4;
    v34 = v14;
    v15 = (void *)MEMORY[0x242656B10](v33);
    -[HMMTRAccessoryServer _setupMatterDevice](v7, "_setupMatterDevice");
    -[HMMTRAccessoryServer matterDevice](v7, "matterDevice");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "deviceCachePrimed");

    if (v17)
    {
      -[HMMTRAccessoryServer setServiceEnumerationInProgress:](v7, "setServiceEnumerationInProgress:", 1);
      -[HMMTRAccessoryServer descriptorClusterManager](v7, "descriptorClusterManager");
      v18 = (void (**)(void))objc_claimAutoreleasedReturnValue();
      v18[2]();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer matterDevice](v7, "matterDevice");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer nodeID](v7, "nodeID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HAPAccessoryServer clientQueue](v7, "clientQueue");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v31[0] = v13;
      v31[1] = 3221225472;
      v31[2] = __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_587;
      v31[3] = &unk_250F230A8;
      v31[4] = v7;
      v32 = v15;
      objc_msgSend(v19, "fetchHAPServicesWithMTRDevice:nodeId:server:callbackQueue:completionHandler:", v20, v21, v7, v22, v31);

    }
    else
    {
      v23 = (void *)MEMORY[0x242656984]();
      v24 = v7;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v36 = v26;
        _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_INFO, "%{public}@Could not retrieve hap services because MTRDevice cache is not ready", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      -[HMMTRAccessoryServer setFullServiceEnumerationPendingCachePrimedEvent:](v24, "setFullServiceEnumerationPendingCachePrimedEvent:", 1);
      if (v14)
      {
        -[HMMTRAccessoryServer serviceEnumerationFromDeviceCompletionHandlers](v24, "serviceEnumerationFromDeviceCompletionHandlers");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = (void *)MEMORY[0x242656B10](v14);
        objc_msgSend(v27, "addObject:", v28);

      }
      v29[4] = v24;
      v30[0] = v13;
      v30[1] = 3221225472;
      v30[2] = __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_596;
      v30[3] = &unk_250F23DF0;
      v30[4] = v24;
      v29[0] = v13;
      v29[1] = 3221225472;
      v29[2] = __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_597;
      v29[3] = &unk_250F223C0;
      -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v24, "queueAccessoryOperation:highPriority:completion:", v30, 0, v29);
    }

  }
}

- (void)_buildHAPCategoriesFromCHIPWithCompletionHandler:(id)a3
{
  void (**v4)(id, void *);
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];
  void (**v17)(id, void *);
  _QWORD v18[5];
  void (**v19)(id, void *);
  uint64_t v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, void *))a3;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting building HAP categories.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, v9);

  }
  else
  {
    v10 = random();
    v11 = (void *)MEMORY[0x242656984]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v14;
      v23 = 2048;
      v24 = v10;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Category build job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = MEMORY[0x24BDAC760];
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke;
    v18[3] = &unk_250F230D0;
    v18[4] = v12;
    v20 = v10;
    v19 = v4;
    v16[0] = v15;
    v16[1] = 3221225472;
    v16[2] = __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_602;
    v16[3] = &unk_250F23F80;
    v17 = v19;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v12, "queueAccessoryOperation:highPriority:completion:", v18, 0, v16);

  }
}

- (void)_handlePairingFailureWithError:(id)a3 context:(id)a4
{
  HMMTRAccessoryServer *v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v19;
  HMMTRAccessoryServer *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  HMMTRAccessoryServer *v27;
  id v28;
  void *v29;
  HMMTRAccessoryServer *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  HMMTRAccessoryServer *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  _QWORD v52[5];
  _QWORD v53[5];
  _QWORD block[5];
  HMMTRAccessoryServer *v55;
  id v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  HMMTRAccessoryServer *v60;
  __int16 v61;
  id v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v6 = (HMMTRAccessoryServer *)a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x242656984]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v58 = v11;
    v59 = 2112;
    v60 = v6;
    v61 = 2112;
    v62 = v7;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@Cleaning up state due to pairing failure error %@ context %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMMTRAccessoryServer _clearCommissioneeInfoAfterPairingCompletion](v9, "_clearCommissioneeInfoAfterPairingCompletion");
  -[HMMTRAccessoryServer domain](v6, "domain");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isEqualToString:", *MEMORY[0x24BDDB490]);

  if (v13)
  {
    if (-[HMMTRAccessoryServer code](v6, "code") == 11)
      v14 = 18;
    else
      v14 = 15;
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:description:reason:suggestion:underlyingError:", v14, 0, 0, 0, v6);
    v15 = objc_claimAutoreleasedReturnValue();

    v6 = (HMMTRAccessoryServer *)v15;
  }
  if (-[HMMTRAccessoryServer isHMFError](v6, "isHMFError")
    && -[HMMTRAccessoryServer code](v6, "code") == 11)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:description:reason:suggestion:underlyingError:", 15, 0, 0, 0, v6);
    v16 = objc_claimAutoreleasedReturnValue();

    v6 = (HMMTRAccessoryServer *)v16;
  }
  -[HMMTRAccessoryServer setPairingProgress:](v9, "setPairingProgress:", 3);
  if (-[HMMTRAccessoryServer pairedState](v9, "pairedState") == 1)
  {
    -[HMMTRAccessoryServer stageCompletion](v9, "stageCompletion");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      -[HMMTRAccessoryServer stageCompletion](v9, "stageCompletion");
      v18 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, _QWORD, HMMTRAccessoryServer *))v18)[2](v18, 0, 0, v6);

      -[HMMTRAccessoryServer setStageCompletion:](v9, "setStageCompletion:", 0);
    }
    else
    {
      v19 = (void *)MEMORY[0x242656984]();
      v20 = v9;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v58 = v22;
        _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory is staged but has no stage completion handler set!", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
    }
  }
  -[HMMTRAccessoryServer setRemoveReason:pairingEndContextWhenRemove:](v9, "setRemoveReason:pairingEndContextWhenRemove:", v6, v7);
  -[HMMTRAccessoryServer storage](v9, "storage");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "endLocalStorageModeBySyncingToRemote:", 0);

  -[HAPAccessoryServer clientQueue](v9, "clientQueue");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer _unpair:completion:](v9, "_unpair:completion:", v24, 0);

  -[HAPAccessoryServer delegateQueue](v9, "delegateQueue");
  v25 = objc_claimAutoreleasedReturnValue();
  v26 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __63__HMMTRAccessoryServer__handlePairingFailureWithError_context___block_invoke;
  block[3] = &unk_250F224F8;
  block[4] = v9;
  v27 = v6;
  v55 = v27;
  v28 = v7;
  v56 = v28;
  dispatch_async(v25, block);

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v29 = (void *)MEMORY[0x242656984]();
    v30 = v9;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v58 = v32;
      _os_log_impl(&dword_23E95B000, v31, OS_LOG_TYPE_DEBUG, "%{public}@Resetting storage state after pairing failure", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v29);
    -[HMMTRAccessoryServer browser](v30, "browser");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "setupStorageStateAndRediscoverAccessoriesForHomeFabricID:", 0);

    -[HMMTRAccessoryServer browser](v30, "browser");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "disableUnrestrictedOperationsForAccessoryServer:", v30);

    -[HMMTRAccessoryServer browser](v30, "browser");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "resumeAllOperations");

    -[HMMTRAccessoryServer fabricID](v30, "fabricID");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (v36)
    {
      -[HMMTRAccessoryServer storage](v30, "storage");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "dataSource");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer fabricID](v30, "fabricID");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "appleHomeFabricWithID:", v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v40 = 0;
    }

    -[HMMTRAccessoryServer browser](v30, "browser");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_msgSend(v41, "isCurrentDeviceAllowedAccessoryControlDespiteReachableResidentForFabric:", v40);

    if (v42)
    {
      -[HMMTRAccessoryServer browser](v30, "browser");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "threadRadioManager");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v53[0] = v26;
      v53[1] = 3221225472;
      v53[2] = __63__HMMTRAccessoryServer__handlePairingFailureWithError_context___block_invoke_603;
      v53[3] = &unk_250F223C0;
      v53[4] = v30;
      objc_msgSend(v44, "stopAccessoryPairingWithCompletion:", v53);

      if (-[HMMTRAccessoryServer isWEDDevice](v30, "isWEDDevice"))
      {
        -[HMMTRAccessoryServer eMACAddress](v30, "eMACAddress");
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        if (v45)
        {
          v46 = (void *)MEMORY[0x242656984]();
          v47 = v30;
          HMFGetOSLogHandle();
          v48 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v58 = v49;
            v59 = 2112;
            v60 = v47;
            _os_log_impl(&dword_23E95B000, v48, OS_LOG_TYPE_INFO, "%{public}@Disconnecting from WED accessory %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v46);
          -[HMMTRAccessoryServer browser](v47, "browser");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "threadRadioManager");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v52[0] = v26;
          v52[1] = 3221225472;
          v52[2] = __63__HMMTRAccessoryServer__handlePairingFailureWithError_context___block_invoke_604;
          v52[3] = &unk_250F223C0;
          v52[4] = v47;
          objc_msgSend(v51, "connectToAccessoryWithExtendedMACAddress:completion:", 0, v52);

        }
      }
    }

  }
}

- (void)_commissionWithParams:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](v6, "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v15 = v8;
    v16 = 2112;
    v17 = v9;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Requesting to commission device(%@).", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMMTRAccessoryServer _startCurrentMetricTimeWithName:](v6, "_startCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNameCommissioningAccessory"));
  -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](v6, "_notifyDelegateOfPairingProgress:", 27);
  -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](v6, "_notifyDelegateOfPairingStep:", 6);
  -[HMMTRAccessoryServer deviceController](v6, "deviceController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v6, "nodeID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0;
  objc_msgSend(v10, "commissionDevice:commissioningParams:error:", objc_msgSend(v11, "unsignedLongLongValue"), v4, &v13);
  v12 = v13;

  if (v12)
    -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:error:](v6, "_notifyDelegateOfPairingProgress:error:", 29, v12);

}

- (BOOL)_populateCommissioningParameterCountryCode:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer browser](self, "browser");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "regulatoryInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "countryCode");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setCountryCode:", v7);

  objc_msgSend(v4, "countryCode");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v12;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_ERROR, "%{public}@Country code could not be estimated. Moving on with pairing without country code.", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
  }

  return 1;
}

- (void)_setSupportedLinkLayerTypes:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMMTRAccessoryServer *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  const char *v11;
  void *v12;
  HMMTRAccessoryServer *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[5];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = v4;
  if (!v4)
  {
    v6 = (void *)MEMORY[0x242656984]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer nodeID](v7, "nodeID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v9;
      v27 = 2112;
      v28 = v10;
      v11 = "%{public}@Nil supported link layer types - cannot determine supported link layer for accessory with nodeID %@";
      goto LABEL_7;
    }
LABEL_8:

    objc_autoreleasePoolPop(v6);
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToValue:", &unk_250F3FC00))
  {
    v6 = (void *)MEMORY[0x242656984]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer nodeID](v7, "nodeID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v9;
      v27 = 2112;
      v28 = v10;
      v11 = "%{public}@No supported link layer types - cannot determine supported link layer for accessory with nodeID %@";
LABEL_7:
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  objc_msgSend(v5, "unsignedIntValue");
  objc_msgSend(v5, "unsignedIntValue");
  objc_msgSend(v5, "unsignedIntValue");
  v12 = (void *)MEMORY[0x242656984]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v26 = v15;
    v27 = 2112;
    v28 = v5;
    v29 = 2112;
    v30 = v16;
    v31 = 2112;
    v32 = v17;
    v33 = 2112;
    v34 = v18;
    _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_INFO, "%{public}@Accessory supported link layer types: %@ [WiFi:%@, Ethernet:%@, Thread:%@]", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v12);
  -[HMMTRAccessoryServer setSupportedLinkLayerTypes:](v13, "setSupportedLinkLayerTypes:", v5);
  -[HMMTRAccessoryServer storage](v13, "storage");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "fabricDataSource");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v13, "nodeID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "storageDataSourceForDeviceWithNodeID:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer supportedLinkLayerTypes](v13, "supportedLinkLayerTypes");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __52__HMMTRAccessoryServer__setSupportedLinkLayerTypes___block_invoke;
  v24[3] = &unk_250F223C0;
  v24[4] = v13;
  objc_msgSend(v22, "updateSupportedLinkLayerTypes:completion:", v23, v24);

LABEL_12:
}

- (void)_collectNetworkCredentials:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  id v16;
  void *v17;
  HMMTRAccessoryServer *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  BOOL v26;
  _QWORD v27[5];
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v31 = v8;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Checking what network technology is supported for the accessory.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMMTRAccessoryServer setPairingProgress:](v6, "setPairingProgress:", 2);
  -[HMMTRAccessoryServer deviceController](v6, "deviceController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](v6, "nodeID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = 0;
  objc_msgSend(v9, "getDeviceBeingCommissioned:error:", objc_msgSend(v10, "unsignedLongLongValue"), &v29);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v29;

  if (v11)
  {
    v13 = objc_msgSend(v11, "sessionTransportType");
    v14 = MEMORY[0x24BDAC760];
    v15 = v13 == 2;
    v27[0] = MEMORY[0x24BDAC760];
    v27[1] = 3221225472;
    v27[2] = __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke;
    v27[3] = &unk_250F230F8;
    v27[4] = v6;
    v28 = v9;
    v22[0] = v14;
    v22[1] = 3221225472;
    v22[2] = __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke_2;
    v22[3] = &unk_250F23170;
    v22[4] = v6;
    v25 = (id)MEMORY[0x242656B10](v27);
    v23 = v11;
    v26 = v15;
    v24 = v4;
    v16 = v25;
    -[HMMTRAccessoryServer _getCommissioneeNetworkCommissioningClusterEndpointWithDevice:completion:](v6, "_getCommissioneeNetworkCommissioningClusterEndpointWithDevice:completion:", v23, v22);

  }
  else
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = v6;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v20;
      v32 = 2112;
      v33 = v12;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_INFO, "%{public}@Failed to check supported network technologies for server. Error: %@...", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 3, v12);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _pairingComplete:context:](v18, "_pairingComplete:context:", v12, v21);

  }
}

- (void)_getCommissioneeNetworkCommissioningClusterEndpointWithDevice:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(id, void *, _QWORD);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  void (**v13)(id, void *, _QWORD);

  v6 = a3;
  v7 = (void (**)(id, void *, _QWORD))a4;
  -[HMMTRAccessoryServer commissioneeNetworkCommissioningClusterEndpoint](self, "commissioneeNetworkCommissioningClusterEndpoint");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[HMMTRAccessoryServer commissioneeNetworkCommissioningClusterEndpoint](self, "commissioneeNetworkCommissioningClusterEndpoint");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, v9, 0);

  }
  else
  {
    +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __97__HMMTRAccessoryServer__getCommissioneeNetworkCommissioningClusterEndpointWithDevice_completion___block_invoke;
    v12[3] = &unk_250F24178;
    v12[4] = self;
    v13 = v7;
    objc_msgSend(v10, "endpointForClusterID:device:callbackQueue:completionHandler:", &unk_250F3FDF8, v6, v11, v12);

  }
}

- (void)_getCommissioneeHasActiveNetworkWithNetworkCommissioningCluster:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(id, BOOL, _QWORD);
  void *v8;
  _QWORD v9[5];
  void (**v10)(id, BOOL, _QWORD);

  v6 = a3;
  v7 = (void (**)(id, BOOL, _QWORD))a4;
  -[HMMTRAccessoryServer commissioneeNetworks](self, "commissioneeNetworks");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v7[2](v7, -[HMMTRAccessoryServer commissioneeHasActiveNetwork](self, "commissioneeHasActiveNetwork"), 0);
  }
  else
  {
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __99__HMMTRAccessoryServer__getCommissioneeHasActiveNetworkWithNetworkCommissioningCluster_completion___block_invoke;
    v9[3] = &unk_250F22B20;
    v9[4] = self;
    v10 = v7;
    objc_msgSend(v6, "readAttributeNetworksWithCompletion:", v9);

  }
}

- (void)updateAccessoryControlToAdministratorNodes:(id)a3 sharedUserNodes:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, _QWORD);
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  HMMTRAccessoryServer *v29;
  NSObject *v30;
  void *v31;
  id v32;
  void *v33;
  HMMTRAccessoryServer *v34;
  NSObject *v35;
  void *v36;
  _QWORD v37[5];
  id v38;
  void (**v39)(id, _QWORD);
  uint8_t buf[4];
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, _QWORD))a5;
  if (-[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner"))
  {
    v11 = (void *)MEMORY[0x242656984]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
LABEL_5:

      objc_autoreleasePoolPop(v11);
      v10[2](v10, 0);
      goto LABEL_20;
    }
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v41 = v14;
    v15 = "%{public}@Skipping ACL update for System Commissioner pairing";
    v16 = v13;
    v17 = OS_LOG_TYPE_DEBUG;
LABEL_4:
    _os_log_impl(&dword_23E95B000, v16, v17, v15, buf, 0xCu);

    goto LABEL_5;
  }
  if (!objc_msgSend(v8, "count") && !objc_msgSend(v9, "count"))
  {
    v11 = (void *)MEMORY[0x242656984]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      goto LABEL_5;
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v41 = v14;
    v15 = "%{public}@No ACL nodes to update on accessory";
    v16 = v13;
    v17 = OS_LOG_TYPE_INFO;
    goto LABEL_4;
  }
  v18 = (void *)MEMORY[0x24BDDB598];
  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer deviceController](self, "deviceController");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "deviceWithNodeID:controller:", v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    v22 = objc_alloc(MEMORY[0x24BDDB548]);
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(v22, "initWithDevice:endpointID:queue:", v21, &unk_250F3FC00, v23);

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "count"))
    {
      v26 = objc_alloc_init(MEMORY[0x24BDDB520]);
      objc_msgSend(v26, "setPrivilege:", &unk_250F3FE10);
      objc_msgSend(v26, "setAuthMode:", &unk_250F3FE28);
      objc_msgSend(v26, "setSubjects:", v8);
      objc_msgSend(v25, "addObject:", v26);

    }
    if (objc_msgSend(v9, "count"))
    {
      v27 = objc_alloc_init(MEMORY[0x24BDDB520]);
      objc_msgSend(v27, "setPrivilege:", &unk_250F3FE40);
      objc_msgSend(v27, "setAuthMode:", &unk_250F3FE28);
      objc_msgSend(v27, "setSubjects:", v9);
      objc_msgSend(v25, "addObject:", v27);

    }
    v28 = (void *)MEMORY[0x242656984]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v31;
      _os_log_impl(&dword_23E95B000, v30, OS_LOG_TYPE_INFO, "%{public}@Updating accessory ACL to", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v28);
    +[HMMTRUtilities printAccessControlList:](HMMTRUtilities, "printAccessControlList:", v25);
    v37[0] = MEMORY[0x24BDAC760];
    v37[1] = 3221225472;
    v37[2] = __94__HMMTRAccessoryServer_updateAccessoryControlToAdministratorNodes_sharedUserNodes_completion___block_invoke;
    v37[3] = &unk_250F228C0;
    v37[4] = v29;
    v38 = v24;
    v39 = v10;
    v32 = v24;
    objc_msgSend(v32, "writeAttributeACLWithValue:completion:", v25, v37);

  }
  else
  {
    v33 = (void *)MEMORY[0x242656984]();
    v34 = self;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v36;
      _os_log_impl(&dword_23E95B000, v35, OS_LOG_TYPE_ERROR, "%{public}@Failed to read ACL. No device found", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v33);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, void *))v10)[2](v10, v25);
  }

LABEL_20:
}

- (void)updateAccessoryControlToIncludeAdministratorNodes:(id)a3 sharedUserNodes:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, _QWORD);
  _BOOL4 v11;
  void *v12;
  HMMTRAccessoryServer *v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  HMMTRAccessoryServer *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  HMMTRAccessoryServer *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  _QWORD v39[5];
  id v40;
  id v41;
  id v42;
  void (**v43)(id, _QWORD);
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, _QWORD))a5;
  v11 = -[HMMTRAccessoryServer isKnownToSystemCommissioner](self, "isKnownToSystemCommissioner");
  v12 = (void *)MEMORY[0x242656984]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v11)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v45 = v16;
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Skipping ACL update for System Commissioner pairing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    goto LABEL_5;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v45 = v17;
    v46 = 2112;
    v47 = v8;
    v48 = 2112;
    v49 = v9;
    _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, "%{public}@Updating accessory ACL to include administrative access to %@ and view access to %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v12);
  -[HMMTRAccessoryServer storage](v13, "storage");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v18, "isSharedAdmin"))
  {

  }
  else
  {
    -[HMMTRAccessoryServer browser](v13, "browser");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isCurrentDevicePrimaryResident");

    if ((v20 & 1) == 0 && (isFeatureMatteriPhoneOnlyPairingControlEnabled() & 1) == 0)
    {
LABEL_5:
      v10[2](v10, 0);
      goto LABEL_20;
    }
  }
  if (objc_msgSend(v8, "count") || objc_msgSend(v9, "count"))
  {
    v21 = (void *)MEMORY[0x24BDDB598];
    -[HMMTRAccessoryServer nodeID](v13, "nodeID");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer deviceController](v13, "deviceController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "deviceWithNodeID:controller:", v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v24)
    {
      v25 = objc_alloc(MEMORY[0x24BDDB548]);
      -[HAPAccessoryServer clientQueue](v13, "clientQueue");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (void *)objc_msgSend(v25, "initWithDevice:endpointID:queue:", v24, &unk_250F3FC00, v26);

      v28 = objc_alloc_init(MEMORY[0x24BDDB7F0]);
      v39[0] = MEMORY[0x24BDAC760];
      v39[1] = 3221225472;
      v39[2] = __101__HMMTRAccessoryServer_updateAccessoryControlToIncludeAdministratorNodes_sharedUserNodes_completion___block_invoke;
      v39[3] = &unk_250F24100;
      v39[4] = v13;
      v43 = v10;
      v40 = v8;
      v41 = v9;
      v42 = v27;
      v29 = v27;
      objc_msgSend(v29, "readAttributeACLWithParams:completion:", v28, v39);

    }
    else
    {
      v30 = (void *)MEMORY[0x242656984]();
      v31 = v13;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v45 = v33;
        _os_log_impl(&dword_23E95B000, v32, OS_LOG_TYPE_ERROR, "%{public}@Failed to read ACL. No device found", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v30);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v28 = (id)objc_claimAutoreleasedReturnValue();
      ((void (**)(id, id))v10)[2](v10, v28);
    }

  }
  else
  {
    v34 = (void *)MEMORY[0x242656984]();
    v35 = v13;
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v45 = v37;
      _os_log_impl(&dword_23E95B000, v36, OS_LOG_TYPE_ERROR, "%{public}@Invalid list of allowed nodes", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v34);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 3);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, void *))v10)[2](v10, v38);

  }
LABEL_20:

}

- (void)updateAccessoryControlToRemoveAdministratorNode:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  _QWORD v27[5];
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x242656984]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v32 = v11;
    v33 = 2112;
    v34 = v6;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Updating accessory ACL to remove administrative access to %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMMTRAccessoryServer storage](v9, "storage");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isSharedAdmin");

  if ((v13 & 1) != 0)
  {
    v14 = (void *)MEMORY[0x24BDDB598];
    -[HMMTRAccessoryServer nodeID](v9, "nodeID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer deviceController](v9, "deviceController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "deviceWithNodeID:controller:", v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      v18 = objc_alloc(MEMORY[0x24BDDB548]);
      -[HAPAccessoryServer clientQueue](v9, "clientQueue");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)objc_msgSend(v18, "initWithDevice:endpointID:queue:", v17, &unk_250F3FC00, v19);

      v21 = objc_alloc_init(MEMORY[0x24BDDB7F0]);
      v27[0] = MEMORY[0x24BDAC760];
      v27[1] = 3221225472;
      v27[2] = __83__HMMTRAccessoryServer_updateAccessoryControlToRemoveAdministratorNode_completion___block_invoke;
      v27[3] = &unk_250F231C0;
      v27[4] = v9;
      v30 = v7;
      v28 = v6;
      v29 = v20;
      v22 = v20;
      objc_msgSend(v22, "readAttributeACLWithParams:completion:", v21, v27);

    }
    else
    {
      v23 = (void *)MEMORY[0x242656984]();
      v24 = v9;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v32 = v26;
        _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to read ACL. No device found", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v21 = (id)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, id))v7 + 2))(v7, v21);
    }

  }
  else
  {
    (*((void (**)(id, _QWORD))v7 + 2))(v7, 0);
  }

}

- (void)_removeSharedAdminControllerNodeIDFromACLWithCompletion:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  HMMTRAccessoryServer *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer storage](self, "storage");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isSharedAdmin");

  if ((v6 & 1) != 0)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v16 = v10;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Removing shared admin controller device's node ID from ACL", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMMTRAccessoryServer deviceController](v8, "deviceController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "controllerNodeID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __80__HMMTRAccessoryServer__removeSharedAdminControllerNodeIDFromACLWithCompletion___block_invoke;
    v13[3] = &unk_250F23F80;
    v14 = v4;
    -[HMMTRAccessoryServer updateAccessoryControlToRemoveAdministratorNode:completion:](v8, "updateAccessoryControlToRemoveAdministratorNode:completion:", v12, v13);

  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

- (id)mergeExistingAclEntries:(id)a3 withAdminNodes:(id)a4 regularUserNodes:(id)a5
{
  id v8;
  void *v9;
  void *v10;

  v8 = a5;
  -[HMMTRAccessoryServer mergeExistingAclEntries:withNewNodes:withPrivilege:](self, "mergeExistingAclEntries:withNewNodes:withPrivilege:", a3, a4, 5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer mergeExistingAclEntries:withNewNodes:withPrivilege:](self, "mergeExistingAclEntries:withNewNodes:withPrivilege:", v9, v8, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (id)mergeExistingAclEntries:(id)a3 withNewNodes:(id)a4 withPrivilege:(unsigned __int8)a5
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  _BOOL4 v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned int v44;
  id obj;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  int v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _BYTE v73[128];
  _BYTE v74[128];
  _BYTE v75[128];
  uint64_t v76;

  v44 = a5;
  v76 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (!objc_msgSend(v7, "count"))
  {
    v6 = v6;
    v42 = v6;
    goto LABEL_49;
  }
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  obj = v7;
  v49 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, v75, 16);
  if (!v49)
    goto LABEL_47;
  v47 = v7;
  v48 = *(_QWORD *)v69;
  v9 = v44;
  v46 = v8;
  do
  {
    for (i = 0; i != v49; ++i)
    {
      if (*(_QWORD *)v69 != v48)
        objc_enumerationMutation(obj);
      v11 = *(_QWORD *)(*((_QWORD *)&v68 + 1) + 8 * i);
      v12 = +[HMMTRUtilities isValidCATSubject:](HMMTRUtilities, "isValidCATSubject:", v11);
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v13 = v6;
      v57 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v64, v74, 16);
      if (!v57)
      {

        objc_msgSend(v8, "addObjectsFromArray:", v13);
LABEL_38:
        v33 = objc_alloc_init(MEMORY[0x24BDDB520]);
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedChar:", v44);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "setPrivilege:", v34);

        objc_msgSend(v33, "setAuthMode:", &unk_250F3FE28);
        v72 = v11;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v72, 1);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "setSubjects:", v35);

        objc_msgSend(v8, "addObject:", v33);
        goto LABEL_45;
      }
      v53 = i;
      v54 = 0;
      v50 = 0;
      v14 = 0;
      v15 = *(_QWORD *)v65;
      v56 = v13;
      do
      {
        v16 = 0;
        v52 = v14 + v57;
        do
        {
          if (*(_QWORD *)v65 != v15)
            objc_enumerationMutation(v13);
          v17 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * v16);
          objc_msgSend(v17, "privilege");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v18, "integerValue") != v9)
            goto LABEL_15;
          objc_msgSend(v17, "targets");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v19, "count"))
          {

LABEL_15:
            goto LABEL_16;
          }
          objc_msgSend(v17, "authMode");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v20, "integerValue");

          v13 = v56;
          v22 = v21 == 2;
          v9 = v44;
          if (v22)
          {
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            objc_msgSend(v17, "subjects");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v60, v73, 16);
            if (v23)
            {
              v24 = v23;
              v25 = 0;
              v26 = *(_QWORD *)v61;
              while (2)
              {
                v27 = 0;
                v51 = v25;
                v55 = v25 + v24;
                do
                {
                  if (*(_QWORD *)v61 != v26)
                    objc_enumerationMutation(v18);
                  v28 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v27);
                  if (objc_msgSend(v28, "isEqualToNumber:", v11))
                  {

                    v13 = v56;
                    v8 = v46;
                    objc_msgSend(v46, "addObjectsFromArray:", v56);
                    v7 = v47;
                    v9 = v44;
                    goto LABEL_44;
                  }
                  if (v12)
                  {
                    if (+[HMMTRUtilities isValidCATSubject:](HMMTRUtilities, "isValidCATSubject:", v28))
                    {
                      v59 = 0;
                      +[HMMTRUtilities parseCaseAuthenticatedTag:identifier:version:](HMMTRUtilities, "parseCaseAuthenticatedTag:identifier:version:", v11, (char *)&v59 + 2, &v59);
                      v58 = 0;
                      +[HMMTRUtilities parseCaseAuthenticatedTag:identifier:version:](HMMTRUtilities, "parseCaseAuthenticatedTag:identifier:version:", v28, (char *)&v58 + 2, &v58);
                      if (HIWORD(v59) == HIWORD(v58))
                      {
                        v30 = v51 + v27;

                        v31 = v56;
                        v8 = v46;
                        objc_msgSend(v46, "addObjectsFromArray:", v56);
                        v32 = 1;
                        v7 = v47;
                        goto LABEL_40;
                      }
                    }
                  }
                  ++v27;
                }
                while (v24 != v27);
                v24 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v60, v73, 16);
                v25 = v55;
                if (v24)
                  continue;
                break;
              }
              v54 = 1;
              v50 = v14;
              v9 = v44;
              v13 = v56;
            }
            else
            {
              v54 = 1;
              v50 = v14;
            }
            goto LABEL_15;
          }
LABEL_16:
          ++v14;
          ++v16;
        }
        while (v16 != v57);
        v29 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v64, v74, 16);
        v14 = v52;
        v57 = v29;
      }
      while (v29);

      v8 = v46;
      objc_msgSend(v46, "addObjectsFromArray:", v13);
      v7 = v47;
      i = v53;
      if ((v54 & 1) == 0)
        goto LABEL_38;
      v30 = 0;
      v31 = v13;
      v32 = 0;
      v14 = v50;
LABEL_40:
      v36 = (void *)MEMORY[0x24BDBCEB8];
      objc_msgSend(v31, "objectAtIndexedSubscript:", v14);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "subjects");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "arrayWithArray:", v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      if ((v12 & v32) == 1)
        objc_msgSend(v39, "setObject:atIndexedSubscript:", v11, v30);
      else
        objc_msgSend(v39, "addObject:", v11);
      v40 = (void *)objc_msgSend(v39, "copy");
      objc_msgSend(v8, "objectAtIndexedSubscript:", v14);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "setSubjects:", v40);

      v9 = v44;
      v13 = v56;
LABEL_44:
      i = v53;
LABEL_45:
      v6 = (id)objc_msgSend(v8, "copy");

      objc_msgSend(v8, "removeAllObjects");
    }
    v49 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, v75, 16);
  }
  while (v49);
LABEL_47:

  v42 = (void *)objc_msgSend(v6, "copy");
LABEL_49:

  return v42;
}

- (id)removeNode:(id)a3 withPrivilge:(unsigned __int8)a4 fromExistingAclEntries:(id)a5
{
  int v6;
  id v8;
  id v9;
  void *v10;
  HMMTRAccessoryServer *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  id v15;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[128];
  uint8_t buf[4];
  void *v40;
  uint64_t v41;

  v6 = a4;
  v41 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  if (!v8 || objc_msgSend(v8, "isEqualToNumber:", &unk_250F3FC00))
    goto LABEL_11;
  if (v6 != 5)
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v13;
      v14 = "%{public}@Current implementation is restricted to removal of admin nodes only";
      goto LABEL_9;
    }
LABEL_10:

    objc_autoreleasePoolPop(v10);
LABEL_11:
    v15 = v9;
    goto LABEL_12;
  }
  if (+[HMMTRUtilities isValidCATSubject:](HMMTRUtilities, "isValidCATSubject:", v8))
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v13;
      v14 = "%{public}@Current implementation doesn't support removal of CAT IDs";
LABEL_9:
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_INFO, v14, buf, 0xCu);

      goto LABEL_10;
    }
    goto LABEL_10;
  }
  v33 = v8;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v32 = v9;
  v18 = v9;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v35 != v21)
          objc_enumerationMutation(v18);
        v23 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        v24 = (void *)MEMORY[0x24BDBCEF0];
        objc_msgSend(v23, "subjects", v32);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "setWithArray:", v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v23, "privilege");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v27, "integerValue");

        if (v28 == 5)
          objc_msgSend(v26, "removeObject:", v33);
        objc_msgSend(v26, "allObjects");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "setSubjects:", v29);

        objc_msgSend(v23, "subjects");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v30, "count");

        if (v31)
          objc_msgSend(v17, "addObject:", v23);

      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    }
    while (v20);
  }

  v15 = (id)objc_msgSend(v17, "copy");
  v9 = v32;
  v8 = v33;
LABEL_12:

  return v15;
}

- (BOOL)_controllerIsOnWiFiNetworkWhichSupportsBothBands
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  unint64_t v13;
  void *v14;
  HMMTRAccessoryServer *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  const __CFString *v20;
  BOOL v21;
  char v22;
  HMMTRAccessoryServer *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  const __CFString *v36;
  __int16 v37;
  const __CFString *v38;
  _BYTE v39[128];
  uint64_t v40;

  v24 = self;
  v40 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v2 = (void *)WiFiCopyCurrentNetworkInfoEx();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("ssid"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("rawRecord"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("networkKnownBSSListKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v39, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)v27;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v27 != v10)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * i), "objectForKeyedSubscript:", CFSTR("CHANNEL_FLAGS"), v24);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "unsignedIntegerValue");

        v9 |= (v13 >> 3) & 1;
        v8 |= (v13 >> 4) & 1;
        if ((v9 & 1) != 0 && (v8 & 1) != 0)
        {
          LOBYTE(v8) = 1;
          LOBYTE(v9) = 1;
          goto LABEL_13;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v39, 16);
      if (v7)
        continue;
      break;
    }
  }
  else
  {
    LOBYTE(v8) = 0;
    LOBYTE(v9) = 0;
  }
LABEL_13:

  v14 = (void *)MEMORY[0x242656984]();
  v15 = v24;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v17;
    v19 = &stru_250F24B08;
    v20 = CFSTR(" 2.4GHz");
    if ((v9 & 1) == 0)
      v20 = &stru_250F24B08;
    *(_DWORD *)buf = 138544130;
    v32 = v17;
    if ((v8 & 1) != 0)
      v19 = CFSTR(" 5GHz");
    v33 = 2112;
    v34 = v25;
    v35 = 2112;
    v36 = v20;
    v37 = 2112;
    v38 = v19;
    _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Current WiFi network(%@) bands%@%@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v14);
  if (v30)
    v21 = 1;
  else
    v21 = v25 == 0;
  v22 = v21;

  return (v22 | v9 & v8) & 1;
}

- (id)currentWiFiNetworkInfo
{
  return (id)WiFiCopyCurrentNetworkInfoEx();
}

- (id)wifiNetworkInfoForSSID:(id)a3
{
  void *v3;
  id v4;
  const __CFString *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v6 = CFSTR("ssid");
  v7[0] = a3;
  v3 = (void *)MEMORY[0x24BDBCE70];
  v4 = a3;
  objc_msgSend(v3, "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);

  return (id)WiFiCopyNetworkInfo();
}

- (void)_populateWifiCredentials:(id)a3 scanResults:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMMTRAccessoryServer *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  HMMTRAccessoryServer *v29;
  HMMTRAccessoryServer *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMMTRAccessoryServer *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  void *v46;
  void *v47;
  HMMTRAccessoryServer *v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  HMMTRAccessoryServer *v58;
  NSObject *v59;
  void *v60;
  uint64_t v61;
  HMMTRAccessoryServer *v62;
  id v63;
  void *v64;
  void *v65;
  HMMTRAccessoryServer *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  HMMTRAccessoryServer *v71;
  NSObject *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  HMMTRAccessoryServer *v77;
  NSObject *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  HMMTRAccessoryServer *v89;
  id v90;
  void *v91;
  uint64_t v92;
  void *v93;
  id v94;
  id v95;
  id obj;
  id obja;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[128];
  uint8_t v111[128];
  uint8_t buf[4];
  void *v113;
  __int16 v114;
  void *v115;
  __int16 v116;
  void *v117;
  _BYTE v118[128];
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v90 = a5;
  -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](self, "_notifyDelegateOfPairingStep:", 5);
  -[HMMTRAccessoryServer currentWiFiNetworkInfo](self, "currentWiFiNetworkInfo");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x242656984]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v113 = v13;
    _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_INFO, "%{public}@Collecting WiFi credentials for the accessory", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](v11, "_notifyDelegateOfPairingProgress:", 14);
  objc_msgSend(v91, "objectForKey:", CFSTR("ssid"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    v87 = v8;
    v15 = (void *)MEMORY[0x24BDBCEB8];
    objc_msgSend(v9, "wiFiScanResults");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "arrayWithCapacity:", objc_msgSend(v16, "count"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v88 = v9;
    objc_msgSend(v9, "wiFiScanResults");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v106, v118, 16);
    v93 = v17;
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v107;
      v21 = 0x24BDD1000uLL;
      do
      {
        v22 = 0;
        v94 = (id)v19;
        do
        {
          if (*(_QWORD *)v107 != v20)
            objc_enumerationMutation(obj);
          v23 = *(void **)(*((_QWORD *)&v106 + 1) + 8 * v22);
          v24 = objc_alloc(*(Class *)(v21 + 1992));
          objc_msgSend(v23, "ssid");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (void *)objc_msgSend(v24, "initWithData:encoding:", v25, 4);

          if (v26)
          {
            objc_msgSend(v17, "addObject:", v26);
          }
          else
          {
            v27 = v21;
            v28 = (void *)MEMORY[0x242656984]();
            v29 = v11;
            v30 = v11;
            HMFGetOSLogHandle();
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "ssid");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v113 = v32;
              v114 = 2112;
              v115 = v33;
              _os_log_impl(&dword_23E95B000, v31, OS_LOG_TYPE_ERROR, "%{public}@Unexpected non-UTF8 SSID was skipped: %@", buf, 0x16u);

              v17 = v93;
            }

            objc_autoreleasePoolPop(v28);
            v11 = v29;
            v21 = v27;
            v19 = (uint64_t)v94;
          }

          ++v22;
        }
        while (v19 != v22);
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v106, v118, 16);
      }
      while (v19);
    }

    objc_msgSend(v91, "objectForKeyedSubscript:", CFSTR("ssid"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = (void *)MEMORY[0x242656984]();
    v36 = v11;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v113 = v38;
      v114 = 2112;
      v115 = v34;
      v116 = 2112;
      v117 = v17;
      _os_log_impl(&dword_23E95B000, v37, OS_LOG_TYPE_INFO, "%{public}@Current network: %@, scanned networks: %@", buf, 0x20u);

    }
    v89 = v36;

    objc_autoreleasePoolPop(v35);
    if ((objc_msgSend(v17, "containsObject:", v34) & 1) != 0 || !objc_msgSend(v17, "count"))
    {
      v53 = v91;
      v8 = v87;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v17, "count"));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v102 = 0u;
      v103 = 0u;
      v104 = 0u;
      v105 = 0u;
      v40 = v17;
      v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v102, v111, 16);
      if (v41)
      {
        v42 = v41;
        v43 = *(_QWORD *)v103;
        do
        {
          for (i = 0; i != v42; ++i)
          {
            if (*(_QWORD *)v103 != v43)
              objc_enumerationMutation(v40);
            v45 = *(_QWORD *)(*((_QWORD *)&v102 + 1) + 8 * i);
            objc_msgSend(v34, "commonPrefixWithString:options:", v45, 10);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v46, "length"))
              objc_msgSend(v39, "addObject:", v45);

          }
          v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v102, v111, 16);
        }
        while (v42);
      }

      v47 = (void *)MEMORY[0x242656984]();
      v48 = v89;
      HMFGetOSLogHandle();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v113 = v50;
        v114 = 2112;
        v115 = v39;
        _os_log_impl(&dword_23E95B000, v49, OS_LOG_TYPE_INFO, "%{public}@Possible compatible results: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v47);
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v95 = v39;
      v51 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v98, v110, 16);
      if (v51)
      {
        v52 = v51;
        v53 = 0;
        v54 = *(_QWORD *)v99;
        while (2)
        {
          v55 = 0;
          v92 = v52;
          do
          {
            if (*(_QWORD *)v99 != v54)
              objc_enumerationMutation(v95);
            -[HMMTRAccessoryServer wifiNetworkInfoForSSID:](v48, "wifiNetworkInfoForSSID:", *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v55));
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            if (v56)
            {
              v57 = (void *)MEMORY[0x242656984]();
              v58 = v48;
              HMFGetOSLogHandle();
              v59 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                obja = v57;
                v60 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v56, "objectForKeyedSubscript:", CFSTR("ssid"));
                v61 = v54;
                v62 = v48;
                v63 = v53;
                v64 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v113 = v60;
                v114 = 2112;
                v115 = v64;
                _os_log_impl(&dword_23E95B000, v59, OS_LOG_TYPE_INFO, "%{public}@Matched : %@", buf, 0x16u);

                v53 = v63;
                v48 = v62;
                v54 = v61;
                v52 = v92;

                v57 = obja;
              }

              objc_autoreleasePoolPop(v57);
              if (v53)
              {

                goto LABEL_49;
              }
              v53 = v56;
            }

            ++v55;
          }
          while (v52 != v55);
          v52 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v98, v110, 16);
          if (v52)
            continue;
          break;
        }
      }
      else
      {
LABEL_49:
        v53 = 0;
      }

      v8 = v87;
      v17 = v93;
    }
    v9 = v88;
    if (v53)
      goto LABEL_55;
    v70 = (void *)MEMORY[0x242656984]();
    v71 = v89;
    HMFGetOSLogHandle();
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v113 = v73;
      _os_log_impl(&dword_23E95B000, v72, OS_LOG_TYPE_INFO, "%{public}@No matching SSID among scan results", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v70);
    v53 = v91;
    v74 = *MEMORY[0x24BE1B690];
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 20, 0);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer setCommissioningFailureOverridingError:](v71, "setCommissioningFailureOverridingError:", v75);

    if (v53)
    {
LABEL_55:
      v76 = (void *)MEMORY[0x242656984]();
      v77 = v89;
      HMFGetOSLogHandle();
      v78 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("ssid"));
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v113 = v79;
        v114 = 2112;
        v115 = v80;
        _os_log_impl(&dword_23E95B000, v78, OS_LOG_TYPE_INFO, "%{public}@Configuring with wifi ssid %@", buf, 0x16u);

        v9 = v88;
      }

      objc_autoreleasePoolPop(v76);
      objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("ssid"));
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "dataUsingEncoding:", 4);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setWifiSSID:", v82);

      objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("password"));
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v83, "dataUsingEncoding:", 4);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setWifiCredentials:", v84);

      -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](v77, "_notifyDelegateOfPairingProgress:", 15);
      v69 = v90;
      (*((void (**)(id, id, _QWORD, _QWORD))v90 + 2))(v90, v8, 0, 0);
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", v74, 20, 0);
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:error:](v71, "_notifyDelegateOfPairingProgress:error:", 16, v85);
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 5, v85);
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      v69 = v90;
      (*((void (**)(id, _QWORD, void *, void *))v90 + 2))(v90, 0, v85, v86);

    }
  }
  else
  {
    v65 = (void *)MEMORY[0x242656984]();
    v66 = v11;
    HMFGetOSLogHandle();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v113 = v68;
      _os_log_impl(&dword_23E95B000, v67, OS_LOG_TYPE_ERROR, "%{public}@Unable to send WiFi Credentials. No SSID available. Is WiFi connected?", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v65);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 21, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:error:](v66, "_notifyDelegateOfPairingProgress:error:", 16, v17);
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 5, v17);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = v90;
    (*((void (**)(id, _QWORD, void *, void *))v90 + 2))(v90, 0, v17, v34);
    v53 = 0;
  }

}

- (void)_startCurrentMetricTimeWithName:(id)a3
{
  HMMTRMetricBundle *v4;
  void *v5;
  HMMTRMetricBundle *v6;
  os_unfair_lock_s *v7;
  void *v8;
  id v9;

  v9 = a3;
  v4 = [HMMTRMetricBundle alloc];
  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[HMMTRMetricBundle initWithTime:name:](v4, "initWithTime:name:", v5, v9);

  v7 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  -[HMMTRAccessoryServer pairingDurationDictionary](self, "pairingDurationDictionary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, v9);

  os_unfair_lock_unlock(v7);
}

- (id)_endCurrentMetricTimeWithName:(id)a3
{
  id v4;
  os_unfair_lock_s *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  HMMTRDuration *v18;
  void *v19;
  HMMTRDuration *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMMTRAccessoryServer *v26;
  NSObject *v27;
  void *v28;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (os_unfair_lock_s *)((char *)self + (int)*MEMORY[0x24BE1BC68]);
  os_unfair_lock_lock_with_options();
  -[HMMTRAccessoryServer pairingDurationDictionary](self, "pairingDurationDictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[HMMTRAccessoryServer pairingDurationDictionary](self, "pairingDurationDictionary");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "removeObjectForKey:", v4);

    v9 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "durationWithDate:", v10);
    objc_msgSend(v9, "numberWithDouble:");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "doubleValue");
    v13 = v12;
    -[HMMTRAccessoryServer maxMetricDuration](self, "maxMetricDuration");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "duration");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "doubleValue");
    v17 = v16;

    if (v13 > v17)
    {
      v18 = [HMMTRDuration alloc];
      objc_msgSend(v7, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[HMMTRDuration initWithName:duration:](v18, "initWithName:duration:", v19, v11);
      -[HMMTRAccessoryServer setMaxMetricDuration:](self, "setMaxMetricDuration:", v20);

      -[HMMTRAccessoryServer maxMetricDuration](self, "maxMetricDuration");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "name");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("hmmtrAccessoryPairingEventMaxDurationName"), v22);

      -[HMMTRAccessoryServer maxMetricDuration](self, "maxMetricDuration");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "duration");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[HAPAccessoryServer setPairingMetricWithKey:value:](self, "setPairingMetricWithKey:value:", CFSTR("hmmtrAccessoryPairingEventMaxDurationTimeInSeconds"), v24);

    }
    os_unfair_lock_unlock(v5);
  }
  else
  {
    v25 = (void *)MEMORY[0x242656984]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 138543618;
      v31 = v28;
      v32 = 2112;
      v33 = v4;
      _os_log_impl(&dword_23E95B000, v27, OS_LOG_TYPE_ERROR, "%{public}@failed to find metric %@ to complete", (uint8_t *)&v30, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    os_unfair_lock_unlock(v5);
    v11 = 0;
  }

  return v11;
}

- (void)_prepareThreadCredentials
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v16 = v6;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@Collecting Thread Credentials...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMMTRAccessoryServer setDefaultThreadOperationalDataset:](v4, "setDefaultThreadOperationalDataset:", 0);
  -[HMMTRAccessoryServer setDefaultThreadOperationalDatasetRetrieved:](v4, "setDefaultThreadOperationalDatasetRetrieved:", 0);
  -[HMMTRAccessoryServer _startCurrentMetricTimeWithName:](v4, "_startCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNameRetrieveThreadCredentials"));
  -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](v4, "_notifyDelegateOfPairingProgress:", 30);
  if (-[HMMTRAccessoryServer pairedState](v4, "pairedState") == 1)
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDF6068]), "initWithKeychainAccessGroup:", CFSTR("com.apple.thread.network"));
    objc_initWeak((id *)buf, v4);
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_2_641;
    v10[3] = &unk_250F23210;
    objc_copyWeak(&v12, (id *)buf);
    v8 = v7;
    v11 = v8;
    objc_msgSend(v8, "retrievePreferredCredentialsInternally:", v10);

    objc_destroyWeak(&v12);
    objc_destroyWeak((id *)buf);

  }
  else
  {
    objc_initWeak((id *)buf, v4);
    -[HMMTRAccessoryServer browser](v4, "browser");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke;
    v13[3] = &unk_250F231E8;
    objc_copyWeak(&v14, (id *)buf);
    objc_msgSend(v9, "fetchPreferredThreadCredentialsForServer:withCompletion:", v4, v13);

    objc_destroyWeak(&v14);
    objc_destroyWeak((id *)buf);
  }
}

- (void)_populateThreadCredentials:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(id, _QWORD, void *, void *);
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  HMMTRAccessoryServer *v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  void (**v26)(id, _QWORD, void *, void *);
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (void (**)(id, _QWORD, void *, void *))a4;
  -[HMMTRAccessoryServer defaultThreadOperationalDatasetReceiveBlock](self, "defaultThreadOperationalDatasetReceiveBlock");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[HMMTRAccessoryServer defaultThreadOperationalDatasetReceiveBlock](self, "defaultThreadOperationalDatasetReceiveBlock");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v10);

    -[HMMTRAccessoryServer setDefaultThreadOperationalDatasetReceiveBlock:](self, "setDefaultThreadOperationalDatasetReceiveBlock:", 0);
  }
  if (-[HMMTRAccessoryServer defaultThreadOperationalDatasetRetrieved](self, "defaultThreadOperationalDatasetRetrieved"))
  {
    -[HMMTRAccessoryServer defaultThreadOperationalDataset](self, "defaultThreadOperationalDataset");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = v11 == 0;
    v13 = (void *)MEMORY[0x242656984]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v12)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v29 = v21;
        _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_ERROR, "%{public}@Populating Thread credential collection error", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v13);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 30, 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 4, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v7[2](v7, 0, v22, v23);

    }
    else
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer defaultThreadOperationalDataset](v14, "defaultThreadOperationalDataset");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "hmf_hexadecimalRepresentation");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v29 = v17;
        v30 = 2112;
        v31 = v19;
        _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Populating Thread credentials - dataset: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
      -[HMMTRAccessoryServer defaultThreadOperationalDataset](v14, "defaultThreadOperationalDataset");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setThreadOperationalDataset:", v20);

      ((void (**)(id, id, void *, void *))v7)[2](v7, v6, 0, 0);
    }
  }
  else
  {
    objc_initWeak((id *)buf, self);
    v24[0] = MEMORY[0x24BDAC760];
    v24[1] = 3221225472;
    v24[2] = __62__HMMTRAccessoryServer__populateThreadCredentials_completion___block_invoke;
    v24[3] = &unk_250F23238;
    objc_copyWeak(&v27, (id *)buf);
    v25 = v6;
    v26 = v7;
    -[HMMTRAccessoryServer setDefaultThreadOperationalDatasetReceiveBlock:](self, "setDefaultThreadOperationalDatasetReceiveBlock:", v24);

    objc_destroyWeak(&v27);
    objc_destroyWeak((id *)buf);
  }

}

- (id)_matterCredentialsFromTHCredentials:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_alloc(MEMORY[0x24BDDB820]);
  objc_msgSend(v4, "activeOperationalDataSet");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);

  v8 = (void *)MEMORY[0x242656984]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "networkName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "panID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v11;
    v17 = 2112;
    v18 = v12;
    v19 = 2112;
    v20 = v13;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Converted THCredentials to MTRThreadOperationalDataset. Got network with Name:%@ and PanID:%@", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v8);

  return v7;
}

- (id)_convertFetchedCredentials:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  HMMTRAccessoryServer *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_alloc(MEMORY[0x24BDDB820]);
  objc_msgSend(v4, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "extendedPANID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "masterKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "PSKc");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v4, "channel");
  objc_msgSend(v4, "PANID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v5, "initWithNetworkName:extendedPANID:masterKey:PSKc:channel:panID:", v6, v7, v8, v9, v10, v11);

  v13 = (void *)MEMORY[0x242656984]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "networkName");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "panID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543874;
    v21 = v16;
    v22 = 2112;
    v23 = v17;
    v24 = 2112;
    v25 = v18;
    _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, "%{public}@Converted HAPThreadNetworkMetadata to MTRThreadOperationalDataset. Got network with Name:%@ and PanID:%@", (uint8_t *)&v20, 0x20u);

  }
  objc_autoreleasePoolPop(v13);

  return v12;
}

- (void)_requestAccessoryNetworkScanWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  id v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer deviceController](self, "deviceController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  objc_msgSend(v5, "getDeviceBeingCommissioned:error:", objc_msgSend(v6, "unsignedLongLongValue"), &v17);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v17;

  if (v7)
  {
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke;
    v14[3] = &unk_250F24150;
    v14[4] = self;
    v16 = v4;
    v15 = v7;
    -[HMMTRAccessoryServer _getCommissioneeNetworkCommissioningClusterEndpointWithDevice:completion:](self, "_getCommissioneeNetworkCommissioningClusterEndpointWithDevice:completion:", v15, v14);

  }
  else
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v12;
      v20 = 2112;
      v21 = v8;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_ERROR, "%{public}@Couldn't get device being commissioned for network scanning: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    if (!v8)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
      v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 3, v8);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, id, void *))v4 + 2))(v4, 0, v8, v13);

  }
}

- (void)_onNetworkScanResults:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMMTRAccessoryServer *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "wiFiScanResults");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {

    goto LABEL_4;
  }
  objc_msgSend(v4, "threadScanResults");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
LABEL_4:
    objc_msgSend(v4, "wiFiScanResults");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v4, "wiFiScanResults");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _onWiFiScanResults:](self, "_onWiFiScanResults:", v8);
    }
    else
    {
      objc_msgSend(v4, "threadScanResults");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v9)
        _HMFPreconditionFailure();
      objc_msgSend(v4, "threadScanResults");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _onThreadScanResults:](self, "_onThreadScanResults:", v8);
    }
    goto LABEL_11;
  }
  v10 = (void *)MEMORY[0x242656984]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543362;
    v16 = v13;
    _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_ERROR, "%{public}@Neither WiFi nor Thread scan results present in scan response", (uint8_t *)&v15, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 11, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 3, v8);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer _pairingComplete:context:](v11, "_pairingComplete:context:", v8, v14);

LABEL_11:
}

- (void)_onWiFiScanResults:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  HMMTRAccessoryServer *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void (**v22)(_QWORD, _QWORD, _QWORD);
  id obj;
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = v3;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v27;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v27 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v8);
        v10 = objc_alloc(MEMORY[0x24BDDB8B0]);
        objc_msgSend(v9, "ssid");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "rssi");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "security");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "unsignedCharValue");
        objc_msgSend(v9, "wiFiBand");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = (void *)objc_msgSend(v10, "initWithSSID:rssi:security:band:", v11, v12, v14, objc_msgSend(v15, "unsignedCharValue"));
        objc_msgSend(v4, "addObject:", v16);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v6);
  }

  v17 = (void *)MEMORY[0x242656984]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v4, "count");
    *(_DWORD *)buf = 138543618;
    v31 = v20;
    v32 = 2048;
    v33 = v21;
    _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_INFO, "%{public}@Calling scan results handler with %lu scan results", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  -[HMMTRAccessoryServer stageWiFiScanResultsHandler](v18, "stageWiFiScanResultsHandler");
  v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3221225472;
  v25[2] = __43__HMMTRAccessoryServer__onWiFiScanResults___block_invoke;
  v25[3] = &unk_250F232B0;
  v25[4] = v18;
  ((void (**)(_QWORD, void *, _QWORD *))v22)[2](v22, v4, v25);

}

- (void)_onThreadScanResults:(id)a3
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  id obj;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = v3;
  v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v21)
  {
    v19 = *(_QWORD *)v24;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v24 != v19)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v4);
        v6 = objc_alloc(MEMORY[0x24BDDB8A0]);
        objc_msgSend(v5, "networkName");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "panId");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "extendedPanId");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "channel");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "extendedAddress");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "rssi");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "version");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "lqi");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (void *)objc_msgSend(v6, "initWithNetworkName:panID:extendedPANID:channel:extendedAddress:rssi:version:lqi:", v7, v8, v9, v10, v11, v12, v13, v14);
        objc_msgSend(v20, "addObject:", v15);

        ++v4;
      }
      while (v21 != v4);
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v21);
  }

  -[HMMTRAccessoryServer stageThreadScanResultsHandler](self, "stageThreadScanResultsHandler");
  v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __45__HMMTRAccessoryServer__onThreadScanResults___block_invoke;
  v22[3] = &unk_250F23300;
  v22[4] = self;
  ((void (**)(_QWORD, void *, _QWORD *))v16)[2](v16, v20, v22);

}

- (id)protocolMappingStateForCharacteristic:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMMTRProtocolMappingState *v7;
  void *v8;
  void *v9;

  v4 = a3;
  -[HMMTRAccessoryServer characteristicProtocolMappingStates](self, "characteristicProtocolMappingStates");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "instanceID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", v6);
  v7 = (HMMTRProtocolMappingState *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v7 = objc_alloc_init(HMMTRProtocolMappingState);
    -[HMMTRAccessoryServer characteristicProtocolMappingStates](self, "characteristicProtocolMappingStates");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "instanceID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, v9);

  }
  return v7;
}

- (void)generateStateCaptureInformationForReason:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint64_t v25;
  _QWORD block[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting generating state capture information.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    -[HAPAccessoryServer clientQueue](v9, "clientQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke;
    block[3] = &unk_250F22988;
    v27 = v7;
    dispatch_async(v12, block);

    v13 = v27;
  }
  else
  {
    v14 = random();
    v15 = (void *)MEMORY[0x242656984]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v18;
      v30 = 2048;
      v31 = v14;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: generate state capture information job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v19 = MEMORY[0x24BDAC760];
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_665;
    v22[3] = &unk_250F228E8;
    v22[4] = v16;
    v25 = v14;
    v24 = v7;
    v23 = v6;
    v20[0] = v19;
    v20[1] = 3221225472;
    v20[2] = __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_673;
    v20[3] = &unk_250F23F80;
    v21 = v24;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v16, "queueAccessoryOperation:highPriority:completion:", v22, 0, v20);

    v13 = v24;
  }

}

- (BOOL)_shouldUpdateUnreachableState
{
  void *v3;
  BOOL v4;

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    -[HMMTRAccessoryServer browser](self, "browser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (objc_msgSend(v3, "isCurrentDevicePrimaryResident") & 1) == 0
      && -[HMMTRAccessoryServer isWEDDevice](self, "isWEDDevice");

  }
  else
  {
    v4 = 0;
  }
  return !v4;
}

- (void)_handleUnreachableStateWithError:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer setMtrDeviceConnected:](self, "setMtrDeviceConnected:", 0);
  if (-[HMMTRAccessoryServer _shouldUpdateUnreachableState](self, "_shouldUpdateUnreachableState"))
  {
    -[HMMTRAccessoryServer didUpdateReachability:](self, "didUpdateReachability:", 0);
    -[HMMTRAccessoryServer _updateDelegateOfConnectionStatus:withError:](self, "_updateDelegateOfConnectionStatus:withError:", 0, v4);
  }
  else
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Ignored unreachable state for WED accessory", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }

}

- (void)updateDefaultOtaProvider:(id)a3 providerEndpoint:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  HMMTRAccessoryServer *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  _QWORD block[4];
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (-[HMMTRAccessoryServer operationDisabled](self, "operationDisabled"))
  {
    v11 = (void *)MEMORY[0x242656984]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v14;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Accessory server operations disabled. Aborting updating default OTA provider.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    -[HAPAccessoryServer clientQueue](v12, "clientQueue");
    v15 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke;
    block[3] = &unk_250F22988;
    v31 = v10;
    dispatch_async(v15, block);

    v16 = v31;
  }
  else
  {
    v17 = random();
    v18 = (void *)MEMORY[0x242656984]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v21;
      v34 = 2048;
      v35 = v17;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: update default ota provider job(%lu) queued.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    v22 = MEMORY[0x24BDAC760];
    v25[0] = MEMORY[0x24BDAC760];
    v25[1] = 3221225472;
    v25[2] = __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_674;
    v25[3] = &unk_250F233A0;
    v25[4] = v19;
    v29 = v17;
    v26 = v8;
    v28 = v10;
    v27 = v9;
    v23[0] = v22;
    v23[1] = 3221225472;
    v23[2] = __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_681;
    v23[3] = &unk_250F23F80;
    v24 = v28;
    -[HMMTRAccessoryServer queueAccessoryOperation:highPriority:completion:](v19, "queueAccessoryOperation:highPriority:completion:", v25, 0, v23);

    v16 = v26;
  }

}

- (void)announceOtaProvider:(id)a3 providerEndpoint:(id)a4 immediateAnnouncement:(BOOL)a5 completionHandler:(id)a6
{
  _BOOL4 v7;
  id v10;
  id v11;
  id v12;
  void *v13;
  HMMTRAccessoryServer *v14;
  NSObject *v15;
  void *v16;
  HMMTRDeviceTopology *v17;
  void *v18;
  HMMTRDeviceTopology *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  void *v39;
  HMMTRAccessoryServer *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  id v44;
  _QWORD v45[5];
  id v46;
  id v47;
  id v48;
  _QWORD v49[5];
  id v50;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  HMMTRAccessoryServer *v54;
  uint64_t v55;

  v7 = a5;
  v55 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a6;
  v13 = (void *)MEMORY[0x242656984]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v52 = v16;
    v53 = 2112;
    v54 = v14;
    _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, "%{public}@announceOtaProvider for %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  v17 = [HMMTRDeviceTopology alloc];
  -[HMMTRAccessoryServer nodeID](v14, "nodeID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = -[HMMTRDeviceTopology initWithNodeId:server:](v17, "initWithNodeId:server:", v18, v14);

  -[HMMTRDeviceTopology getEnabledOTARequestorEndpoint](v19, "getEnabledOTARequestorEndpoint");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {

LABEL_9:
    v28 = (void *)MEMORY[0x24BDDB678];
    -[HMMTRAccessoryServer nodeID](v14, "nodeID");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "unsignedLongLongValue");
    -[HMMTRAccessoryServer deviceController](v14, "deviceController");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "deviceWithNodeID:deviceController:", v30, v31);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = objc_alloc(MEMORY[0x24BDDB618]);
    -[HAPAccessoryServer clientQueue](v14, "clientQueue");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_msgSend(v32, "initWithDevice:endpoint:queue:", v27, 0, v33);

    v35 = objc_alloc_init(MEMORY[0x24BDDB7E0]);
    objc_msgSend(v35, "setProviderNodeId:", v10);
    objc_msgSend(v35, "setEndpoint:", v11);
    objc_msgSend(v35, "setVendorId:", &unk_250F3FE88);
    v36 = objc_msgSend(v35, "setAnnouncementReason:", &unk_250F3FE28);
    if (v34)
    {
      v37 = v7;
      v38 = MEMORY[0x24BDAC760];
      if (v37)
      {
        v49[0] = MEMORY[0x24BDAC760];
        v49[1] = 3221225472;
        v49[2] = __101__HMMTRAccessoryServer_announceOtaProvider_providerEndpoint_immediateAnnouncement_completionHandler___block_invoke;
        v49[3] = &unk_250F23CD0;
        v49[4] = v14;
        v50 = v12;
        objc_msgSend(v34, "announceOtaProviderWithParams:expectedValues:expectedValueInterval:completionHandler:", v35, 0, 0, v49);

      }
      v45[0] = v38;
      v45[1] = 3221225472;
      v45[2] = __101__HMMTRAccessoryServer_announceOtaProvider_providerEndpoint_immediateAnnouncement_completionHandler___block_invoke_684;
      v45[3] = &unk_250F229B0;
      v45[4] = v14;
      v46 = v34;
      v47 = v35;
      v48 = v12;
      -[HMMTRAccessoryServer updateDefaultOtaProvider:providerEndpoint:completionHandler:](v14, "updateDefaultOtaProvider:providerEndpoint:completionHandler:", v10, v11, v45);

    }
    else
    {
      v44 = v10;
      v39 = (void *)MEMORY[0x242656984](v36);
      v40 = v14;
      HMFGetOSLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v52 = v42;
        _os_log_impl(&dword_23E95B000, v41, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to announce OTA provider", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v39);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v12 + 2))(v12, v43);

      v10 = v44;
    }

    goto LABEL_17;
  }
  -[HMMTRDeviceTopology getVersionForKey:](v19, "getVersionForKey:", CFSTR("EnumeratedProtocolMap"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "intValue");

  if (v22 < 101)
    goto LABEL_9;
  v23 = (void *)MEMORY[0x242656984]();
  v24 = v14;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v52 = v26;
    _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_INFO, "%{public}@Ignoring OTA announcement, OTA requestor cluster not supported on this accessory", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v23);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 5, 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void *))v12 + 2))(v12, v27);
LABEL_17:

}

- (void)fetchAndNotifyCharacteristics:(id)a3 timeout:(double)a4 completionQueue:(id)a5 completionHandler:(id)a6
{
  -[HMMTRAccessoryServer _readCharacteristicValues:timeout:skipCache:sendNotification:completionQueue:completionHandler:](self, "_readCharacteristicValues:timeout:skipCache:sendNotification:completionQueue:completionHandler:", a3, 1, 1, a5, a6, a4);
}

- (BOOL)doesPeriodicSessionChecks
{
  return 1;
}

- (unint64_t)sessionCheckInterval
{
  return 0;
}

- (unint64_t)numActiveSessionClients
{
  return 1;
}

- (id)accessoryVendorID
{
  void *v2;
  void *v3;

  -[HMMTRAccessoryServer vendorID](self, "vendorID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  return v3;
}

- (id)accessoryProductID
{
  void *v2;
  void *v3;

  -[HMMTRAccessoryServer productID](self, "productID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  return v3;
}

- (void)handleFirmwareUpdateStatusChange:(int64_t)a3
{
  void *v5;
  id v6;

  -[HMMTRAccessoryServer browser](self, "browser");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "threadSoftwareUpdateController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleFirmwareUpdateStatusChangeForAccessoryServer:state:", self, a3);

}

- (id)createDoorLockClusterObjectWithFlow:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD block[5];
  id v13;
  id v14;
  id v15;
  id v16;

  v4 = a3;
  v16 = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v16);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke;
  block[3] = &unk_250F224A8;
  block[4] = self;
  v13 = v4;
  v14 = v16;
  v7 = v5;
  v15 = v7;
  v8 = v4;
  dispatch_async(v6, block);

  v9 = v15;
  v10 = v7;

  return v10;
}

- (BOOL)doesMatchDiscriminator:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  unsigned int v8;
  int v9;
  int v11;

  v4 = a3;
  v5 = -[HMMTRAccessoryServer discriminatorIsOriginatedFromShort](self, "discriminatorIsOriginatedFromShort");
  -[HMMTRAccessoryServer discriminator](self, "discriminator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5)
  {
    v8 = objc_msgSend(v6, "unsignedShortValue");

    v9 = objc_msgSend(v4, "unsignedShortValue");
    return (v9 ^ v8) < 0x100;
  }
  else
  {
    v11 = objc_msgSend(v6, "isEqual:", v4);

    return v11;
  }
}

- (void)fetchColorControlClusterForHapAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __82__HMMTRAccessoryServer_fetchColorControlClusterForHapAccessory_completionHandler___block_invoke;
  block[3] = &unk_250F240D8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_queryBridgedAccessoryAndUnreachablePerCacheForCharacteristic:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(id, _QWORD);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char v27;
  HMMTRAccessoryServer *v28;
  id v29;
  void *v30;
  void *v31;
  HMMTRAccessoryServer *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  HMMTRDeviceReader *v37;
  void *v38;
  void *v39;
  void *v40;
  HMMTRDeviceReader *v41;
  void *v42;
  void *v43;
  id v44;
  HMMTRAccessoryServer *v45;
  void *v46;
  void *v47;
  _QWORD v48[5];
  id v49;
  void (**v50)(id, _QWORD);
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  id v60;
  __int16 v61;
  void *v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (void (**)(id, _QWORD))a4;
  -[HAPAccessoryServer category](self, "category");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v8, "isEqual:", &unk_250F3FDE0) & 1) == 0)
  {

LABEL_17:
    v7[2](v7, 0);
    goto LABEL_18;
  }
  objc_msgSend(v6, "service");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "accessory");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "category");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isEqual:", &unk_250F3FDE0);

  if (v12)
    goto LABEL_17;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
    goto LABEL_17;
  +[HMMTRHAPService chipPluginServiceForCharacteristic:](HMMTRHAPService, "chipPluginServiceForCharacteristic:", v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14 && (objc_msgSend(v14, "endpoint"), v16 = (void *)objc_claimAutoreleasedReturnValue(), v16, v16))
  {
    v47 = v15;
    v44 = v6;
    v45 = self;
    objc_msgSend(v6, "service");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "accessory");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v46 = v18;
    objc_msgSend(v18, "services");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v52;
      v23 = *MEMORY[0x24BE1B780];
LABEL_8:
      v24 = 0;
      while (1)
      {
        if (*(_QWORD *)v52 != v22)
          objc_enumerationMutation(v19);
        v25 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v24);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v25, "type");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = objc_msgSend(v26, "isEqualToString:", v23);

          if ((v27 & 1) != 0)
            break;
        }
        if (v21 == ++v24)
        {
          v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
          if (v21)
            goto LABEL_8;
          goto LABEL_15;
        }
      }
      v29 = v25;

      v30 = v29;
      v6 = v44;
      v28 = v45;
      if (v29)
        goto LABEL_24;
    }
    else
    {
LABEL_15:

      v6 = v44;
      v28 = v45;
    }
    v31 = (void *)MEMORY[0x242656984]();
    v32 = v28;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "endpoint");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v56 = v34;
      v57 = 2112;
      v58 = v35;
      v59 = 2112;
      v60 = v6;
      v61 = 2112;
      v62 = v46;
      v28 = v45;
      _os_log_impl(&dword_23E95B000, v33, OS_LOG_TYPE_INFO, "%{public}@Unable to locate Accessory Information Service on accessory %@, defaulting to service endpoint %@ for characteristic: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v31);
    v30 = 0;
    v29 = v47;
LABEL_24:
    objc_msgSend(v29, "endpoint");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = [HMMTRDeviceReader alloc];
    -[HAPAccessoryServer clientQueue](v28, "clientQueue");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer reportDistributor](v28, "reportDistributor");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer matterDevice](v28, "matterDevice");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = -[HMMTRDeviceReader initWithClientQueue:distributor:device:endpointID:clusterID:attributeID:](v37, "initWithClientQueue:distributor:device:endpointID:clusterID:attributeID:", v38, v39, v40, v36, &unk_250F3FCC0, &unk_250F3FEB8);

    -[HMMTRAccessoryServer bridgedAccessoryReachabilityReaderTimeoutNSecs](v28, "bridgedAccessoryReachabilityReaderTimeoutNSecs");
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    if (v42)
    {
      -[HMMTRAccessoryServer bridgedAccessoryReachabilityReaderTimeoutNSecs](v28, "bridgedAccessoryReachabilityReaderTimeoutNSecs");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRDeviceReader setReportTimeoutNSecs:](v41, "setReportTimeoutNSecs:", objc_msgSend(v43, "longLongValue"));

    }
    v48[0] = MEMORY[0x24BDAC760];
    v48[1] = 3221225472;
    v48[2] = __97__HMMTRAccessoryServer__queryBridgedAccessoryAndUnreachablePerCacheForCharacteristic_completion___block_invoke;
    v48[3] = &unk_250F23490;
    v50 = v7;
    v48[4] = v28;
    v15 = v47;
    v49 = v47;
    -[HMMTRDeviceReader readAttributeWithCompletion:](v41, "readAttributeWithCompletion:", v48);

  }
  else
  {
    v7[2](v7, 0);
  }

LABEL_18:
}

- (void)_checkDeviceIfAccessoryIsBridgedAndUnreachableForCharacteristic:(id)a3 device:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, _QWORD);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  _QWORD v24[5];
  id v25;
  void (**v26)(id, _QWORD);

  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, _QWORD))a5;
  -[HAPAccessoryServer category](self, "category");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v11, "isEqual:", &unk_250F3FDE0) & 1) == 0)
  {

    goto LABEL_7;
  }
  objc_msgSend(v8, "service");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "accessory");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "category");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isEqual:", &unk_250F3FDE0);

  if (v15)
  {
LABEL_7:
    v10[2](v10, 0);
    goto LABEL_10;
  }
  +[HMMTRHAPService chipPluginServiceForCharacteristic:](HMMTRHAPService, "chipPluginServiceForCharacteristic:", v8);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (v16 && (objc_msgSend(v16, "endpoint"), v18 = (void *)objc_claimAutoreleasedReturnValue(), v18, v18))
  {
    objc_msgSend(v17, "endpoint");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_alloc(MEMORY[0x24BDDB560]);
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)objc_msgSend(v20, "initWithDevice:endpointID:queue:", v9, v19, v21);

    v24[0] = MEMORY[0x24BDAC760];
    v24[1] = 3221225472;
    v24[2] = __106__HMMTRAccessoryServer__checkDeviceIfAccessoryIsBridgedAndUnreachableForCharacteristic_device_completion___block_invoke;
    v24[3] = &unk_250F24150;
    v24[4] = self;
    v25 = v19;
    v26 = v10;
    v23 = v19;
    objc_msgSend(v22, "readAttributeReachableWithCompletion:", v24);

  }
  else
  {
    v10[2](v10, 0);
  }

LABEL_10:
}

- (void)controller:(id)a3 commissioningSessionEstablishmentDone:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMMTRAccessoryServer *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  HMMTRAccessoryServer *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  HMMTRAccessoryServer *v20;
  NSObject *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMMTRAccessoryServer pairingProgress](self, "pairingProgress") != 1)
  {
    v14 = MEMORY[0x242656984]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543362;
      v27 = v17;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Ignoring unexpected call to pairing complete", (uint8_t *)&v26, 0xCu);

    }
    v13 = (void *)v14;
    goto LABEL_9;
  }
  v8 = (void *)MEMORY[0x242656984]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543618;
      v27 = v12;
      v28 = 2112;
      v29 = v7;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory pairing failed before network provisioning: %@", (uint8_t *)&v26, 0x16u);

    }
    v13 = v8;
LABEL_9:
    objc_autoreleasePoolPop(v13);
    goto LABEL_10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 138543362;
    v27 = v18;
    _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@CHIP Accessory ready for network provisioning", (uint8_t *)&v26, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  -[HMMTRAccessoryServer setCommissioningSessionEstablished:](v9, "setCommissioningSessionEstablished:", 1);
  if (-[HMMTRAccessoryServer hasPriorSuccessfulPairing](v9, "hasPriorSuccessfulPairing"))
  {
    v19 = (void *)MEMORY[0x242656984]();
    v20 = v9;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543362;
      v27 = v22;
      _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_INFO, "%{public}@not reading thread network prerequisites", (uint8_t *)&v26, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    v23 = objc_alloc_init(MEMORY[0x24BDDB668]);
    -[HMMTRAccessoryServer browser](v20, "browser");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "attestationStatus");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "populateDelegate:", v23);

    -[HMMTRAccessoryServer _commissionWithParams:](v20, "_commissionWithParams:", v23);
  }
  else
  {
    -[HMMTRAccessoryServer _continueNetworkProvisioning](v9, "_continueNetworkProvisioning");
  }
LABEL_10:

}

- (void)_controller:(id)a3 commissioningComplete:(id)a4 nodeID:(id)a5 abstractMetrics:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  HMMTRAccessoryServer *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMMTRAccessoryServer *v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  __CFString *v23;
  id v24;
  NSObject *v25;
  id v26;
  __CFString *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  int64_t linkLayerType;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  HMMTRAccessoryServer *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  _BYTE v44[24];
  void *v45;
  id v46;
  __CFString *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = (void *)MEMORY[0x242656984]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v44 = 138543618;
    *(_QWORD *)&v44[4] = v17;
    *(_WORD *)&v44[12] = 2112;
    *(_QWORD *)&v44[14] = v11;
    _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Accessory commissioning complete. %@", v44, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  v18 = (void *)MEMORY[0x242656984]();
  v19 = v15;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v13)
  {
    if (v21)
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v44 = 138543618;
      *(_QWORD *)&v44[4] = v22;
      *(_WORD *)&v44[12] = 2112;
      *(_QWORD *)&v44[14] = CFSTR("com.apple.matter.pairing-event");
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@Submitting Matter metric after commissioning complete: %@", v44, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    v23 = CFSTR("com.apple.matter.pairing-event");
    v24 = v13;
    if (submitMatterMetrics_onceToken != -1)
      dispatch_once(&submitMatterMetrics_onceToken, &__block_literal_global_5762);
    v25 = submitMatterMetrics_metricsQueue;
    *(_QWORD *)v44 = MEMORY[0x24BDAC760];
    *(_QWORD *)&v44[8] = 3221225472;
    *(_QWORD *)&v44[16] = __submitMatterMetrics_block_invoke_2;
    v45 = &unk_250F22458;
    v26 = v24;
    v46 = v26;
    v27 = CFSTR("com.apple.matter.pairing-event");
    v47 = CFSTR("com.apple.matter.pairing-event");
    dispatch_async(v25, v44);

    dictionaryFromMatterMetrics(v26);
    v28 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v21)
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v44 = 138543362;
      *(_QWORD *)&v44[4] = v29;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@Notifying delegate with empty mtr metrics", v44, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionary");
    v28 = objc_claimAutoreleasedReturnValue();
  }
  v30 = (void *)v28;
  -[HMMTRAccessoryServer _notifyDelegateOfMTRMetrics:](v19, "_notifyDelegateOfMTRMetrics:", v28);

  if (!v11)
  {
    -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](v19, "_notifyDelegateOfPairingProgress:", 28);
    -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](v19, "_notifyDelegateOfPairingStep:", 7);
    -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](v19, "_notifyDelegateOfPairingProgress:", 33);
    -[HMMTRAccessoryServer deviceController](v19, "deviceController");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31)
    {
      -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](v19, "_notifyDelegateOfPairingProgress:", 34);
      -[HMMTRAccessoryServer setCommissioningCompleted:](v19, "setCommissioningCompleted:", 1);
      -[HMMTRAccessoryServer _pairingComplete:context:](v19, "_pairingComplete:context:", 0, 0);
      v11 = 0;
    }
    else
    {
      v39 = (void *)MEMORY[0x242656984]();
      v40 = v19;
      HMFGetOSLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v44 = 138543362;
        *(_QWORD *)&v44[4] = v42;
        _os_log_impl(&dword_23E95B000, v41, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to handle commissioning completion", v44, 0xCu);

      }
      objc_autoreleasePoolPop(v39);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:error:](v40, "_notifyDelegateOfPairingProgress:error:", 29, v11);
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 7, v11);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer _pairingComplete:context:](v40, "_pairingComplete:context:", v11, v43);

    }
    goto LABEL_26;
  }
  if (-[HMMTRAccessoryServer commissioningSessionEstablished](v19, "commissioningSessionEstablished"))
  {
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 6, v11);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer commissioningFailureOverridingError](v19, "commissioningFailureOverridingError");
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      -[HMMTRAccessoryServer commissioningFailureOverridingError](v19, "commissioningFailureOverridingError");
      v33 = objc_claimAutoreleasedReturnValue();

      v11 = (id)v33;
    }
    -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:error:](v19, "_notifyDelegateOfPairingProgress:error:", 29, v11);
    v34 = (os_unfair_lock_s *)((char *)v19 + (int)*MEMORY[0x24BE1BC68]);
    os_unfair_lock_lock_with_options();
    linkLayerType = v19->_linkLayerType;
    os_unfair_lock_unlock(v34);
    if (objc_msgSend(v11, "code") == 9 && linkLayerType == 1)
    {
      v36 = (void *)MEMORY[0x24BDD1540];
      objc_msgSend(v11, "localizedFailureReason");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "hapErrorWithCode:description:reason:suggestion:underlyingError:", 25, CFSTR("WiFi Commissioning failed with error"), v37, 0, v11);
      v38 = objc_claimAutoreleasedReturnValue();

      v11 = (id)v38;
    }
    -[HMMTRAccessoryServer _pairingComplete:context:](v19, "_pairingComplete:context:", v11, v31);
LABEL_26:

    goto LABEL_27;
  }
  -[HMMTRAccessoryServer _retryPairing](v19, "_retryPairing");
LABEL_27:

}

- (void)_continueNetworkProvisioning
{
  _QWORD v3[5];

  -[HMMTRAccessoryServer _notifyDelegateOfPairingStep:](self, "_notifyDelegateOfPairingStep:", 3);
  -[HMMTRAccessoryServer _startCurrentMetricTimeWithName:](self, "_startCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNameNetworkScan"));
  -[HMMTRAccessoryServer _notifyDelegateOfPairingProgress:](self, "_notifyDelegateOfPairingProgress:", 17);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __52__HMMTRAccessoryServer__continueNetworkProvisioning__block_invoke;
  v3[3] = &unk_250F234B8;
  v3[4] = self;
  -[HMMTRAccessoryServer _requestAccessoryNetworkScanWithCompletionHandler:](self, "_requestAccessoryNetworkScanWithCompletionHandler:", v3);
}

- (void)refreshThreadCapabilitiesWithCompletion:(id)a3
{
  void (**v4)(id, _QWORD);
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  void (**v20)(id, _QWORD);
  _QWORD *v21;
  _BYTE *v22;
  _QWORD v23[3];
  BOOL v24;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, _QWORD))a3;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled() && self->_linkLayerType == 4)
  {
    if (-[HMMTRAccessoryServer isWEDDevice](self, "isWEDDevice"))
    {
      v5 = (void *)MEMORY[0x242656984]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMMTRAccessoryServer nodeID](v6, "nodeID");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v8;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v9;
        _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Accessory is already WED capable, will not try to refresh information for accessory with nodeID %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v5);
      v4[2](v4, 0);
    }
    else
    {
      -[HMMTRAccessoryServer storage](self, "storage");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "fabricDataSource");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer nodeID](self, "nodeID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "storageDataSourceForDeviceWithNodeID:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v23[0] = 0;
      v23[1] = v23;
      v23[2] = 0x2020000000;
      v24 = 0;
      v24 = -[HMMTRAccessoryServer isWEDDevice](self, "isWEDDevice");
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__7961;
      v27 = __Block_byref_object_dispose__7962;
      -[HMMTRAccessoryServer eMACAddress](self, "eMACAddress");
      v28 = (id)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer deviceController](self, "deviceController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
      {
        -[HMMTRAccessoryServer nodeID](self, "nodeID");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "unsignedLongLongValue");
        -[HAPAccessoryServer clientQueue](self, "clientQueue");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18[0] = MEMORY[0x24BDAC760];
        v18[1] = 3221225472;
        v18[2] = __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke;
        v18[3] = &unk_250F23508;
        v18[4] = self;
        v20 = v4;
        v21 = v23;
        v19 = v13;
        v22 = buf;
        objc_msgSend(v14, "getBaseDevice:queue:completionHandler:", v16, v17, v18);

      }
      else
      {
        v4[2](v4, 0);
      }

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(v23, 8);

    }
  }
  else
  {
    v4[2](v4, 0);
  }

}

- (void)_fetchAdditionalThreadNetworkInformationWithCompletion:(id)a3
{
  void (**v4)(id, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = (void (**)(id, _QWORD))a3;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled() && self->_linkLayerType == 4)
  {
    -[HMMTRAccessoryServer deviceController](self, "deviceController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](self, "nodeID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 0;
    objc_msgSend(v5, "getDeviceBeingCommissioned:error:", objc_msgSend(v6, "unsignedLongLongValue"), &v8);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
      -[HMMTRAccessoryServer _fetchAdditionalThreadNetworkInformationFromDevice:completion:](self, "_fetchAdditionalThreadNetworkInformationFromDevice:completion:", v7, v4);
    else
      v4[2](v4, 0);

  }
  else
  {
    v4[2](v4, 0);
  }

}

- (void)handleThreadDirectConnectionSleepyTypeChange:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  _BOOL8 v10;
  void *v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  _QWORD block[5];
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v3 = a3;
  v34 = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer browser](self, "browser");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer fabricID](self, "fabricID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "appleHomeFabricWithID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMMTRAccessoryServer browser](self, "browser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isCurrentDeviceMobileAndResidentReachableAndThreadCapableForFabric:", v7);

  v10 = v3 && (v9 & 1) == 0 && !-[HMMTRAccessoryServer isWEDDevice](self, "isWEDDevice");
  v11 = (void *)MEMORY[0x242656984](-[HMMTRAccessoryServer setRequiresThreadRouter:](self, "setRequiresThreadRouter:", v10));
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer requiresThreadRouter](v12, "requiresThreadRouter");
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer nodeID](v12, "nodeID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer isWEDDevice](v12, "isWEDDevice");
    HMFBooleanToString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544642;
    v23 = v14;
    v24 = 2112;
    v25 = v15;
    v26 = 2112;
    v27 = v16;
    v28 = 2112;
    v29 = v17;
    v30 = 2112;
    v31 = v18;
    v32 = 2112;
    v33 = v19;
    _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@handleThreadDirectConnectionSleepyTypeChange - requiresThreadRouter = %@ for accessory with nodeID %@ (isWED = %@, isSleepyLink = %@, primaryReachableAndThreadCapable = %@)", buf, 0x3Eu);

  }
  objc_autoreleasePoolPop(v11);
  -[HAPAccessoryServer delegateQueue](v12, "delegateQueue");
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __69__HMMTRAccessoryServer_handleThreadDirectConnectionSleepyTypeChange___block_invoke;
  block[3] = &unk_250F23DF0;
  block[4] = v12;
  dispatch_async(v20, block);

}

- (void)_handleThreadRadioStateChanged
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  int v13;
  void *v14;
  char v15;
  _BOOL8 v16;
  void *v17;
  HMMTRAccessoryServer *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMMTRAccessoryServer *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  _QWORD block[5];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  -[HMMTRAccessoryServer browser](self, "browser");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer fabricID](self, "fabricID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appleHomeFabricWithID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMMTRAccessoryServer browser](self, "browser");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isCurrentDeviceMobileAndResidentReachableAndThreadCapableForFabric:", v5);

  -[HMMTRAccessoryServer browser](self, "browser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "threadRadioManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isReadyToEstablishWEDConnection");

  -[HMMTRAccessoryServer browser](self, "browser");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "connectionRequestSuspended");

  if (-[HMMTRAccessoryServer pairedState](self, "pairedState")
    && !-[HMMTRAccessoryServer isDisabled](self, "isDisabled"))
  {
    v13 = !-[HMMTRAccessoryServer removalInProgress](self, "removalInProgress");
  }
  else
  {
    v13 = 0;
  }
  -[HMMTRAccessoryServer supportedLinkLayerTypes](self, "supportedLinkLayerTypes");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "unsignedIntValue");

  if (((v12 | v13 ^ 1) & 1) != 0 || (v15 & 0x10) == 0)
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v39 = v20;
      v40 = 2112;
      v41 = v21;
      v42 = 2112;
      v43 = v22;
      v44 = 2112;
      v45 = v23;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_DEBUG, "%{public}@_handleThreadRadioStateChanged: ignoring thread radio state change - isBrowserInPairingState = %@, isAccessoryServerValid = %@, isAccessoryServerThreadCapable = %@ ", buf, 0x2Au);

    }
    goto LABEL_20;
  }
  v16 = ((v10 ^ 1 | v7) & 1) == 0 && !-[HMMTRAccessoryServer isWEDDevice](self, "isWEDDevice");
  v24 = (void *)MEMORY[0x242656984](-[HMMTRAccessoryServer setRequiresThreadRouter:](self, "setRequiresThreadRouter:", v16));
  v25 = self;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer requiresThreadRouter](v25, "requiresThreadRouter");
    HMFBooleanToString();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMTRAccessoryServer isWEDDevice](v25, "isWEDDevice");
    HMFBooleanToString();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v39 = v27;
    v40 = 2112;
    v41 = v28;
    v42 = 2112;
    v43 = v29;
    v44 = 2112;
    v45 = v30;
    v46 = 2112;
    v47 = v31;
    _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_INFO, "%{public}@_handleThreadRadioStateChanged - requiresThreadRouter = %@ (isWED = %@, isControllerInSleepyRouterState = %@, primaryReachableAndThreadCapable = %@)", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v24);
  -[HMMTRAccessoryServer chipDelegate](v25, "chipDelegate");
  v32 = objc_claimAutoreleasedReturnValue();
  if (!v32
    || (v33 = (void *)v32,
        -[HAPAccessoryServer delegateQueue](v25, "delegateQueue"),
        v34 = (void *)objc_claimAutoreleasedReturnValue(),
        v34,
        v33,
        !v34))
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = v25;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v36;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@_handleThreadRadioStateChanged - chipDelegate not available", buf, 0xCu);

    }
LABEL_20:

    objc_autoreleasePoolPop(v17);
    goto LABEL_21;
  }
  -[HAPAccessoryServer delegateQueue](v25, "delegateQueue");
  v35 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __54__HMMTRAccessoryServer__handleThreadRadioStateChanged__block_invoke;
  block[3] = &unk_250F23DF0;
  block[4] = v25;
  dispatch_async(v35, block);

LABEL_21:
}

- (void)handleThreadNetworkStateChangedNotification:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  HMMTRAccessoryServer *v8;
  NSObject *v9;
  void *v10;
  _QWORD block[5];
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[HAPAccessoryServer clientQueue](self, "clientQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __68__HMMTRAccessoryServer_handleThreadNetworkStateChangedNotification___block_invoke;
    block[3] = &unk_250F23DF0;
    block[4] = self;
    dispatch_async(v6, block);

  }
  else
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v13 = v10;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@handleThreadNetworkStateChangedNotification - clientQueue not available", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (void)handleWEDDisconnectedWhileNotPairing
{
  void *v3;
  HMMTRAccessoryServer *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x242656984](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@WED disconnected while not pairing", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  if (!-[HMMTRAccessoryServer servicesEnumerated](v4, "servicesEnumerated")
    && !-[HMMTRAccessoryServer serviceEnumerationFailed](v4, "serviceEnumerationFailed"))
  {
    -[HMMTRAccessoryServer disable](v4, "disable");
    -[HMMTRAccessoryServer browser](v4, "browser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmmtrErrorWithCode:", 15);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "invalidateAccessoryServer:reason:", v4, v8);

  }
}

- (void)_fetchAdditionalThreadNetworkInformationFromDevice:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  _QWORD block[4];
  id v14;
  _QWORD v15[5];
  NSObject *v16;
  _QWORD v17[5];
  NSObject *v18;

  v6 = a3;
  v7 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v8 = dispatch_group_create();
    dispatch_group_enter(v8);
    v9 = MEMORY[0x24BDAC760];
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __86__HMMTRAccessoryServer__fetchAdditionalThreadNetworkInformationFromDevice_completion___block_invoke;
    v17[3] = &unk_250F22F08;
    v17[4] = self;
    v10 = v8;
    v18 = v10;
    -[HMMTRAccessoryServer fetchWEDSupportInformationFromDevice:completion:](self, "fetchWEDSupportInformationFromDevice:completion:", v6, v17);
    dispatch_group_enter(v10);
    v15[0] = v9;
    v15[1] = 3221225472;
    v15[2] = __86__HMMTRAccessoryServer__fetchAdditionalThreadNetworkInformationFromDevice_completion___block_invoke_708;
    v15[3] = &unk_250F22F08;
    v15[4] = self;
    v16 = v10;
    v11 = v10;
    -[HMMTRAccessoryServer fetchExtendedMACAddressFromDevice:completion:](self, "fetchExtendedMACAddressFromDevice:completion:", v6, v15);
    -[HAPAccessoryServer delegateQueue](self, "delegateQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = v9;
    block[1] = 3221225472;
    block[2] = __86__HMMTRAccessoryServer__fetchAdditionalThreadNetworkInformationFromDevice_completion___block_invoke_709;
    block[3] = &unk_250F22988;
    v14 = v7;
    dispatch_group_notify(v11, v12, block);

  }
  else
  {
    (*((void (**)(id, _QWORD))v7 + 2))(v7, 0);
  }

}

- (id)dumpState:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v15;

  v4 = a3;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", 12);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x24BDD17C8];
  -[HAPAccessoryServer name](self, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer fabricID](self, "fabricID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer category](self, "category");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer objectID](self, "objectID");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v4)
    objc_msgSend(v6, "stringWithFormat:", CFSTR("Name: %@, NodeID: %@, FabricID: %@, Category: %@, ObjectID: %@, State capture information: %@"), v7, v8, v9, v10, v11, v4);
  else
    objc_msgSend(v6, "stringWithFormat:", CFSTR("Name: %@, NodeID: %@, FabricID: %@, Category %@, ObjectID: %@, No state capture information available."), v7, v8, v9, v10, v11, v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setObject:forKeyedSubscript:", v13, *MEMORY[0x24BE3EB68]);
  return v5;
}

- (os_state_data_s)createStateData:(id)a3 data:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  size_t v8;
  os_state_data_s *v9;

  v5 = a3;
  objc_msgSend(MEMORY[0x24BDD1770], "dataWithPropertyList:format:options:error:", a4, 200, 0, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, "length");
    v9 = (os_state_data_s *)malloc_type_calloc(1uLL, v8 + 200, 0x73F52D55uLL);
    v9->var0 = 1;
    v9->var1.var1 = v8;
    objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    __strlcpy_chk();
    memcpy(v9->var4, (const void *)objc_msgSend(objc_retainAutorelease(v7), "bytes"), v8);
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)_registerStateCaptureHandler:(unint64_t)a3 stateCaptureInformation:(id)a4
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id location;

  v5 = a4;
  objc_initWeak(&location, self);
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_copyWeak(&v9, &location);
  v8 = v5;
  v7 = v5;
  os_state_add_handler();

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

- (void)_deregisterPartsListStateCaptureHandler
{
  if (-[HMMTRAccessoryServer partsListStateCaptureHandle](self, "partsListStateCaptureHandle"))
  {
    -[HMMTRAccessoryServer partsListStateCaptureHandle](self, "partsListStateCaptureHandle");
    os_state_remove_handler();
    -[HMMTRAccessoryServer setPartsListStateCaptureHandle:](self, "setPartsListStateCaptureHandle:", 0);
  }
}

- (void)_deregisterDeviceConnectedStateCaptureHandler
{
  if (-[HMMTRAccessoryServer deviceConnectedStateHandle](self, "deviceConnectedStateHandle"))
  {
    -[HMMTRAccessoryServer deviceConnectedStateHandle](self, "deviceConnectedStateHandle");
    os_state_remove_handler();
    -[HMMTRAccessoryServer setDeviceConnectedStateHandle:](self, "setDeviceConnectedStateHandle:", 0);
  }
}

- (void)_deregisterStateCaptureHandlers
{
  -[HMMTRAccessoryServer _deregisterPartsListStateCaptureHandler](self, "_deregisterPartsListStateCaptureHandler");
  -[HMMTRAccessoryServer _deregisterDeviceConnectedStateCaptureHandler](self, "_deregisterDeviceConnectedStateCaptureHandler");
}

- (void)device:(id)a3 stateChanged:(unint64_t)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMMTRAccessoryServer *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMMTRAccessoryServer *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  _QWORD v36[5];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if (v7 != v6)
    goto LABEL_24;
  v8 = -[HMMTRAccessoryServer setMtrDeviceStateReported:](self, "setMtrDeviceStateReported:", 1);
  switch(a4)
  {
    case 0uLL:
      objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:description:reason:suggestion:underlyingError:", 19, CFSTR("MTRDevice state changed to MTRDeviceStateUnknown"), 0, 0, 0);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = (void *)MEMORY[0x242656984]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v32;
        _os_log_impl(&dword_23E95B000, v31, OS_LOG_TYPE_ERROR, "%{public}@Matter device state unknown", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v29);
      goto LABEL_22;
    case 2uLL:
      v33 = (void *)MEMORY[0x242656984](v8);
      v30 = self;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v35;
        _os_log_impl(&dword_23E95B000, v34, OS_LOG_TYPE_ERROR, "%{public}@Matter device unreachable & disconnected", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v33);
      objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:description:reason:suggestion:underlyingError:", 19, CFSTR("MTRDevice state changed to MTRDeviceStateUnreachable"), 0, 0, 0);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_22:
      -[HMMTRAccessoryServer _handleUnreachableStateWithError:](v30, "_handleUnreachableStateWithError:", v28);

      break;
    case 1uLL:
      v9 = (void *)MEMORY[0x242656984](v8);
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v12;
        _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@Matter device reachable & connected", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      -[HMMTRAccessoryServer didUpdateReachability:](v10, "didUpdateReachability:", 1);
      -[HMMTRAccessoryServer setMtrDeviceConnected:](v10, "setMtrDeviceConnected:", 1);
      if (!-[HMMTRAccessoryServer serviceEnumerationFailed](v10, "serviceEnumerationFailed"))
        -[HMMTRAccessoryServer _updateDelegateOfConnectionStatus:withError:](v10, "_updateDelegateOfConnectionStatus:withError:", 1, 0);
      -[HMMTRAccessoryServer browser](v10, "browser");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "isCurrentDevicePrimaryResident");

      if (v14)
      {
        v36[0] = MEMORY[0x24BDAC760];
        v36[1] = 3221225472;
        v36[2] = __44__HMMTRAccessoryServer_device_stateChanged___block_invoke;
        v36[3] = &unk_250F223C0;
        v36[4] = v10;
        -[HMMTRAccessoryServer enumerateHAPServices:](v10, "enumerateHAPServices:", v36);
      }
      -[HMMTRAccessoryServer browser](v10, "browser");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "isCurrentDevicePrimaryResident");

      if (v16)
      {
        -[HMMTRAccessoryServer stateCaptureDeviceConnectedTimer](v10, "stateCaptureDeviceConnectedTimer");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v17)
        {
          v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, 600.0);
          -[HMMTRAccessoryServer setStateCaptureDeviceConnectedTimer:](v10, "setStateCaptureDeviceConnectedTimer:", v18);

          -[HAPAccessoryServer clientQueue](v10, "clientQueue");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMMTRAccessoryServer stateCaptureDeviceConnectedTimer](v10, "stateCaptureDeviceConnectedTimer");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setDelegateQueue:", v19);

          -[HMMTRAccessoryServer stateCaptureDeviceConnectedTimer](v10, "stateCaptureDeviceConnectedTimer");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "setDelegate:", v10);

          -[HMMTRAccessoryServer stateCaptureDeviceConnectedTimer](v10, "stateCaptureDeviceConnectedTimer");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "resume");

          v23 = (void *)MEMORY[0x242656984]();
          v24 = v10;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            -[HAPAccessoryServer name](v24, "name");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v38 = v26;
            v39 = 2112;
            v40 = v27;
            v41 = 2112;
            v42 = &unk_250F3FED0;
            _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_INFO, "%{public}@State Capture: Setting timer to capture state information for %@ due to matter device reachable notification, timeout is %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v23);
        }
      }
      break;
    default:
      -[HMMTRAccessoryServer setMtrDeviceStateReported:](self, "setMtrDeviceStateReported:", 0);
      break;
  }
LABEL_24:

}

- (BOOL)isReadyToReadFromMTRDevice
{
  void *v3;
  char v4;
  void *v5;
  char v6;

  if (!isFeatureMatteriPhoneOnlyPairingControlEnabled())
    return 1;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) == 0)
    return 1;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "_deviceHasActiveSubscription");

  return v6;
}

- (void)_deviceInternalStateChanged:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMMTRAccessoryServer matterDevice](self, "matterDevice");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v4 && -[HMMTRAccessoryServer isReadyToReadFromMTRDevice](self, "isReadyToReadFromMTRDevice"))
  {
    -[HMMTRAccessoryServer pendingMTRDeviceReadReadyHandlers](self, "pendingMTRDeviceReadReadyHandlers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "allValues");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMMTRAccessoryServer pendingMTRDeviceReadReadyHandlers](self, "pendingMTRDeviceReadReadyHandlers");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "removeAllObjects");

    if ((objc_msgSend(v7, "hmf_isEmpty") & 1) == 0)
    {
      v9 = (void *)MEMORY[0x242656984]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v24 = v12;
        _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@MTRDevice is ready to read from. Triggering pending MTRDevice read-ready handlers", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
    }
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v13 = v7;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v19;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v19 != v16)
            objc_enumerationMutation(v13);
          (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v17) + 16))(*(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v17));
          ++v17;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v15);
    }

  }
}

- (void)_updateDelegateOfConnectionStatus:(BOOL)a3 withError:(id)a4
{
  id v6;
  NSObject *v7;
  _QWORD block[5];
  id v9;
  BOOL v10;

  v6 = a4;
  if (-[HMMTRAccessoryServer _delegateRespondsToSelector:](self, "_delegateRespondsToSelector:", sel_accessoryServer_didUpdateConnectionState_linkLayerType_withError_))
  {
    -[HAPAccessoryServer delegateQueue](self, "delegateQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __68__HMMTRAccessoryServer__updateDelegateOfConnectionStatus_withError___block_invoke;
    block[3] = &unk_250F23558;
    v10 = a3;
    block[4] = self;
    v9 = v6;
    dispatch_async(v7, block);

  }
}

- (BOOL)_ignoreAttributeReport:(id)a3
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  BOOL v10;
  BOOL v11;
  void *v12;
  void *v13;
  char v14;

  v3 = *MEMORY[0x24BDDB460];
  v4 = a3;
  objc_msgSend(v4, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMTRUtilities mtrBaseClusterValueFromMTRClusterReportValue:](HMMTRUtilities, "mtrBaseClusterValueFromMTRClusterReportValue:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "cluster");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v7, "isEqualToNumber:", &unk_250F3FCD8) & 1) != 0)
  {
    objc_msgSend(v5, "attribute");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqualToNumber:", &unk_250F3FC00);

    if (v9)
      v10 = v6 == 0;
    else
      v10 = 0;
    if (v10)
    {
      v11 = 1;
      goto LABEL_16;
    }
  }
  else
  {

  }
  objc_msgSend(v5, "cluster");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "isEqualToNumber:", &unk_250F3FEE8))
  {
    objc_msgSend(v5, "attribute");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isEqualToNumber:", &unk_250F3FC00);
    if (v6)
      v11 = 0;
    else
      v11 = v14;

  }
  else
  {
    v11 = 0;
  }

LABEL_16:
  return v11;
}

- (void)device:(id)a3 receivedAttributeReport:(id)a4
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  HMMTRAccessoryServer *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  HMMTRAccessoryServer *v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  HMMTRAccessoryServer *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMMTRAccessoryServer *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  HMMTRAccessoryServer *v43;
  NSObject *v44;
  void *v45;
  NSObject *v46;
  void (**v47)(_QWORD, _QWORD);
  void *v48;
  id v49;
  id obj;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  _QWORD block[6];
  _QWORD v58[6];
  NSObject *v59;
  _QWORD *v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[5];
  id v67;
  uint8_t buf[4];
  id v69;
  __int16 v70;
  void *v71;
  __int16 v72;
  id v73;
  _BYTE v74[128];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v49 = a3;
  v5 = a4;
  v6 = dispatch_group_create();
  v66[0] = 0;
  v66[1] = v66;
  v66[2] = 0x3032000000;
  v66[3] = __Block_byref_object_copy__7961;
  v66[4] = __Block_byref_object_dispose__7962;
  v67 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v74, 16);
  if (v7)
  {
    v53 = *(_QWORD *)v63;
    v56 = *MEMORY[0x24BDDB460];
    v51 = *MEMORY[0x24BDDB478];
    do
    {
      v55 = v7;
      for (i = 0; i != v55; ++i)
      {
        if (*(_QWORD *)v63 != v53)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * i);
        dispatch_group_enter(v6);
        v10 = (void *)MEMORY[0x242656984]();
        v11 = self;
        HMFGetOSLogHandle();
        v12 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v69 = v13;
          v70 = 2112;
          v71 = v9;
          _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_DEBUG, "%{public}@Handling Attribute Report: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v10);
        objc_msgSend(v9, "objectForKeyedSubscript:", v56);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (v14)
        {
          objc_msgSend(v9, "objectForKeyedSubscript:", v51);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v15 == 0;

          if (!v16)
          {
            -[HMMTRAccessoryServer reportDistributor](v11, "reportDistributor");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "distributeAttributeReport:", v9);

            v18 = objc_alloc(MEMORY[0x24BDDB540]);
            v61 = 0;
            v19 = (void *)objc_msgSend(v18, "initWithResponseValue:error:", v9, &v61);
            v52 = v61;
            if (!v19)
            {
              v20 = (void *)MEMORY[0x242656984]();
              v21 = v11;
              HMFGetOSLogHandle();
              v22 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v23 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v9, "objectForKeyedSubscript:", v56);
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v69 = v23;
                v70 = 2112;
                v71 = v24;
                v72 = 2112;
                v73 = v52;
                _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_INFO, "%{public}@Attribute report %@ is not parsed into a known struct: %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v20);
            }
            objc_msgSend(v9, "objectForKeyedSubscript:", v56);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v26 = v25;
            else
              v26 = 0;
            v27 = v26;

            objc_msgSend(v27, "cluster");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v28, "isEqualToNumber:", &unk_250F3FF00) & 1) != 0)
            {
              objc_msgSend(v27, "attribute");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = objc_msgSend(v29, "isEqualToNumber:", &unk_250F3FF18);

              if (v30)
              {
                v31 = (void *)MEMORY[0x242656984](-[HMMTRAccessoryServer _updateAttributeTimer:report:timeout:server:](v11, "_updateAttributeTimer:report:timeout:server:", v27, v9, v11, 1.5));
                v32 = v11;
                HMFGetOSLogHandle();
                v33 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                {
                  HMFGetLogIdentifier();
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v69 = v34;
                  v70 = 2112;
                  v71 = v9;
                  _os_log_impl(&dword_23E95B000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Skip handling of report: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v31);
                dispatch_group_leave(v6);
                goto LABEL_34;
              }
            }
            else
            {

            }
            objc_msgSend(v27, "endpoint");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMMTRAccessoryServer _hapAccessoryAtEndpoint:](v11, "_hapAccessoryAtEndpoint:", v39);
            v40 = (void *)objc_claimAutoreleasedReturnValue();

            -[HMMTRAccessoryServer hmdHAPAccessoryDelegate](v11, "hmdHAPAccessoryDelegate");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "handleAttributeReport:dictionary:hapAccessory:", v19, v9, v40);

            if (-[HMMTRAccessoryServer _handleUnmappedAttributeReport:](v11, "_handleUnmappedAttributeReport:", v9))
            {
LABEL_31:
              dispatch_group_leave(v6);
            }
            else
            {
              if (-[HMMTRAccessoryServer _ignoreAttributeReport:](v11, "_ignoreAttributeReport:", v9))
              {
                v42 = (void *)MEMORY[0x242656984]();
                v43 = v11;
                HMFGetOSLogHandle();
                v44 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v45 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v69 = v45;
                  v70 = 2112;
                  v71 = v9;
                  _os_log_impl(&dword_23E95B000, v44, OS_LOG_TYPE_INFO, "%{public}@Ignoring report: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v42);
                goto LABEL_31;
              }
              v58[0] = MEMORY[0x24BDAC760];
              v58[1] = 3221225472;
              v58[2] = __55__HMMTRAccessoryServer_device_receivedAttributeReport___block_invoke;
              v58[3] = &unk_250F23580;
              v58[4] = v9;
              v58[5] = v11;
              v60 = v66;
              v59 = v6;
              -[HMMTRAccessoryServer _updatedCharacteristicsForAttributeReport:completionHandler:](v11, "_updatedCharacteristicsForAttributeReport:completionHandler:", v9, v58);

            }
LABEL_34:

            continue;
          }
        }
        v35 = (void *)MEMORY[0x242656984]();
        v36 = v11;
        HMFGetOSLogHandle();
        v37 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v69 = v38;
          v70 = 2112;
          v71 = v9;
          _os_log_impl(&dword_23E95B000, v37, OS_LOG_TYPE_ERROR, "%{public}@Malformed attribute report. Ignoring report: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v35);
        dispatch_group_leave(v6);
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v74, 16);
    }
    while (v7);
  }

  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v46 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __55__HMMTRAccessoryServer_device_receivedAttributeReport___block_invoke_733;
  block[3] = &unk_250F235A8;
  block[4] = self;
  block[5] = v66;
  dispatch_group_notify(v6, v46, block);

  -[HMMTRAccessoryServer chipReportHandler](self, "chipReportHandler");
  v47 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  if (v47)
  {
    objc_msgSend(obj, "encodedCHIPReports");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v47)[2](v47, v48);

  }
  _Block_object_dispose(v66, 8);

}

- (void)processAttributeReport:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMMTRAccessoryServer *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  void *v13;
  HMMTRAccessoryServer *v14;
  NSObject *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  void (**v29)(_QWORD, _QWORD);
  void *v30;
  void *v31;
  _QWORD block[6];
  _QWORD v33[4];
  id v34;
  HMMTRAccessoryServer *v35;
  NSObject *v36;
  _QWORD *v37;
  id v38;
  _QWORD v39[5];
  id v40;
  id v41;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = dispatch_group_create();
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x3032000000;
  v39[3] = __Block_byref_object_copy__7961;
  v39[4] = __Block_byref_object_dispose__7962;
  v40 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  dispatch_group_enter(v5);
  v6 = (void *)MEMORY[0x242656984]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v43 = v9;
    v44 = 2112;
    v45 = v4;
    _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Processing Attribute Report: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  v38 = 0;
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDB540]), "initWithResponseValue:error:", v4, &v38);
  v11 = v38;
  v12 = (_QWORD *)MEMORY[0x24BDDB460];
  if (!v10)
  {
    v13 = (void *)MEMORY[0x242656984]();
    v14 = v7;
    HMFGetOSLogHandle();
    v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v31 = v13;
      HMFGetLogIdentifier();
      v16 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "objectForKeyedSubscript:", *v12);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v43 = v16;
      v44 = 2112;
      v45 = v17;
      v46 = 2112;
      v47 = v11;
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, "%{public}@Attribute report %@ is not parsed into a known struct: %@", buf, 0x20u);

      v13 = v31;
    }

    objc_autoreleasePoolPop(v13);
  }
  objc_msgSend(v4, "objectForKeyedSubscript:", *v12);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v19 = v18;
  else
    v19 = 0;
  v20 = v19;

  objc_msgSend(v20, "endpoint");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer _hapAccessoryAtEndpoint:](v7, "_hapAccessoryAtEndpoint:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMMTRAccessoryServer hmdHAPAccessoryDelegate](v7, "hmdHAPAccessoryDelegate");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "handleAttributeReport:dictionary:hapAccessory:", v10, v4, v22);

  v24 = MEMORY[0x24BDAC760];
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 3221225472;
  v33[2] = __47__HMMTRAccessoryServer_processAttributeReport___block_invoke;
  v33[3] = &unk_250F23580;
  v25 = v4;
  v34 = v25;
  v35 = v7;
  v37 = v39;
  v26 = v5;
  v36 = v26;
  -[HMMTRAccessoryServer _updatedCharacteristicsForAttributeReport:completionHandler:](v7, "_updatedCharacteristicsForAttributeReport:completionHandler:", v25, v33);
  -[HAPAccessoryServer clientQueue](v7, "clientQueue");
  v27 = objc_claimAutoreleasedReturnValue();
  block[0] = v24;
  block[1] = 3221225472;
  block[2] = __47__HMMTRAccessoryServer_processAttributeReport___block_invoke_734;
  block[3] = &unk_250F235A8;
  block[4] = v7;
  block[5] = v39;
  dispatch_group_notify(v26, v27, block);

  v41 = v25;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v41, 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer chipReportHandler](v7, "chipReportHandler");
  v29 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  if (v29)
  {
    objc_msgSend(v28, "encodedCHIPReports");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v29)[2](v29, v30);

  }
  _Block_object_dispose(v39, 8);

}

- (void)device:(id)a3 receivedEventReport:(id)a4
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  HMMTRAccessoryServer *v12;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id obj;
  uint64_t v26;
  uint64_t v27;
  void *context;
  NSObject *group;
  _QWORD block[5];
  id v32;
  _QWORD *v33;
  _QWORD v34[5];
  id v35;
  NSObject *v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[5];
  id v43;
  uint8_t buf[4];
  id v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v22 = a3;
  v5 = a4;
  group = dispatch_group_create();
  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x3032000000;
  v42[3] = __Block_byref_object_copy__7961;
  v42[4] = __Block_byref_object_dispose__7962;
  v43 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v54, 16);
  if (v6)
  {
    v27 = *(_QWORD *)v39;
    v26 = *MEMORY[0x24BDDB4B0];
    v23 = *MEMORY[0x24BDDB478];
    do
    {
      v7 = 0;
      v24 = v6;
      do
      {
        if (*(_QWORD *)v39 != v27)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v7);
        objc_msgSend(v8, "objectForKeyedSubscript:", v26);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        dispatch_group_enter(group);
        context = (void *)MEMORY[0x242656984]();
        v12 = self;
        HMFGetOSLogHandle();
        v13 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v14 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "endpoint");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "cluster");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "event");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "objectForKeyedSubscript:", v23);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544386;
          v45 = v14;
          v46 = 2112;
          v47 = v15;
          v48 = 2112;
          v49 = v16;
          v50 = 2112;
          v51 = v17;
          v52 = 2112;
          v53 = v18;
          _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Handling Event Report: endpoint:%@ cluster:%@ event:%@ value:%@", buf, 0x34u);

          v6 = v24;
        }

        objc_autoreleasePoolPop(context);
        v34[0] = MEMORY[0x24BDAC760];
        v34[1] = 3221225472;
        v34[2] = __51__HMMTRAccessoryServer_device_receivedEventReport___block_invoke;
        v34[3] = &unk_250F23580;
        v34[4] = v12;
        v19 = v11;
        v35 = v19;
        v37 = v42;
        v36 = group;
        -[HMMTRAccessoryServer _updatedCharacteristicsForEventReport:completionHandler:](v12, "_updatedCharacteristicsForEventReport:completionHandler:", v8, v34);
        -[HMMTRAccessoryServer _handleDiagnosticsEvent:](v12, "_handleDiagnosticsEvent:", v8);

        ++v7;
      }
      while (v6 != v7);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v54, 16);
    }
    while (v6);
  }

  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __51__HMMTRAccessoryServer_device_receivedEventReport___block_invoke_735;
  block[3] = &unk_250F235D0;
  v33 = v42;
  block[4] = self;
  v32 = obj;
  v21 = obj;
  dispatch_group_notify(group, v20, block);

  _Block_object_dispose(v42, 8);
}

- (void)handleEventReportForNotification:(id)a3
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  HMMTRAccessoryServer *v16;
  NSObject *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMMTRAccessoryServer *v30;
  NSObject *v31;
  void *v32;
  HMMTRAccessoryServer *v33;
  void *v34;
  void *v35;
  void *v36;
  HMMTRAccessoryServer *v37;
  NSObject *v38;
  void *v39;
  __int128 v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id obj;
  void *v47;
  id v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = a3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v51;
    v8 = *MEMORY[0x24BDDB4A0];
    v42 = *MEMORY[0x24BDDB4B0];
    *(_QWORD *)&v5 = 138543874;
    v40 = v5;
    v43 = *(_QWORD *)v51;
    v44 = *MEMORY[0x24BDDB4A0];
    do
    {
      v9 = 0;
      v45 = v6;
      do
      {
        if (*(_QWORD *)v51 != v7)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v9);
        objc_msgSend(v10, "objectForKeyedSubscript:", v8, v40);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        v14 = objc_msgSend(v13, "isEqual:", MEMORY[0x24BDBD1C8]);
        if (v14)
        {
          v15 = (void *)MEMORY[0x242656984]();
          v16 = self;
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v55 = v18;
            v56 = 2112;
            v57 = v10;
            _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@HMMTRAccessoryServer handleEventReportForNotification: Ignoring event report, this is an outdated report. event report=%@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v15);
        }
        else
        {
          v19 = objc_alloc(MEMORY[0x24BDDB750]);
          v49 = 0;
          v20 = (void *)objc_msgSend(v19, "initWithResponseValue:error:", v10, &v49);
          v21 = v49;
          v22 = v21;
          if (v20)
          {
            v48 = v21;
            objc_msgSend(v10, "objectForKeyedSubscript:", v42);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v24 = v23;
            else
              v24 = 0;
            v25 = v24;

            v47 = v25;
            objc_msgSend(v25, "endpoint");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMMTRAccessoryServer _hapAccessoryAtEndpoint:](self, "_hapAccessoryAtEndpoint:", v26);
            v27 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = (void *)MEMORY[0x242656984]();
            v30 = self;
            HMFGetOSLogHandle();
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v41 = v29;
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v28, "UUID");
              v33 = self;
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v40;
              v55 = v32;
              v56 = 2112;
              v57 = v34;
              v58 = 2112;
              v59 = v10;
              _os_log_impl(&dword_23E95B000, v31, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] HMMTRAccessoryServer Handling parsed event report=%@", buf, 0x20u);

              self = v33;
              v29 = v41;
            }

            objc_autoreleasePoolPop(v29);
            -[HMMTRAccessoryServer hmdHAPAccessoryDelegate](v30, "hmdHAPAccessoryDelegate");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "handleEventReport:dictionary:flow:hapAccessory:", v20, v10, v28, v27);

            v7 = v43;
            v8 = v44;
            v22 = v48;
          }
          else
          {
            v36 = (void *)MEMORY[0x242656984]();
            v37 = self;
            HMFGetOSLogHandle();
            v38 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v40;
              v55 = v39;
              v56 = 2112;
              v57 = v10;
              v58 = 2112;
              v59 = v22;
              _os_log_impl(&dword_23E95B000, v38, OS_LOG_TYPE_INFO, "%{public}@Received event %@ is not parsed: %@", buf, 0x20u);

              v8 = v44;
            }

            objc_autoreleasePoolPop(v36);
          }

          v6 = v45;
        }
        ++v9;
      }
      while (v6 != v9);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
    }
    while (v6);
  }

}

- (void)deviceCachePrimed:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  HMMTRAccessoryServer *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v8;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@MTRDevice cache primed", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMMTRAccessoryServer reportDistributor](v6, "reportDistributor");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "allAttributesReady");

  if (!-[HMMTRAccessoryServer serviceEnumerationInProgress](v6, "serviceEnumerationInProgress")
    && -[HMMTRAccessoryServer fullServiceEnumerationPendingCachePrimedEvent](v6, "fullServiceEnumerationPendingCachePrimedEvent"))
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = v6;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v13;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_INFO, "%{public}@Triggering service enumeration upon cache primed event", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    -[HMMTRAccessoryServer setFullServiceEnumerationPendingCachePrimedEvent:](v11, "setFullServiceEnumerationPendingCachePrimedEvent:", 0);
    -[HMMTRAccessoryServer _rebuildHAPServicesFromCHIPWithCompletionHandler:](v11, "_rebuildHAPServicesFromCHIPWithCompletionHandler:", 0);
  }

}

- (void)deviceConfigurationChanged:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  HMMTRAccessoryServer *v10;
  NSObject *v11;
  void *v12;
  _BOOL4 v13;
  const char *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char *v23;
  _QWORD v24[5];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v26 = v8;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@MTRDevice configuration changed", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  if (!-[HMMTRAccessoryServer isPaired](v6, "isPaired")
    || -[HMMTRAccessoryServer isKnownToSystemCommissioner](v6, "isKnownToSystemCommissioner"))
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = v6;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
LABEL_10:

      objc_autoreleasePoolPop(v9);
      goto LABEL_11;
    }
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMMTRAccessoryServer isPaired](v10, "isPaired");
    v14 = "is not paired yet";
    if (v13)
      v14 = "is for system commissioner";
    *(_DWORD *)buf = 138543618;
    v26 = v12;
    v27 = 2080;
    v28 = v14;
    _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@No enumeration because server %s", buf, 0x16u);
LABEL_9:

    goto LABEL_10;
  }
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __51__HMMTRAccessoryServer_deviceConfigurationChanged___block_invoke;
  v24[3] = &unk_250F223C0;
  v24[4] = v6;
  -[HMMTRAccessoryServer enumerateHAPServices:](v6, "enumerateHAPServices:", v24);
  -[HMMTRAccessoryServer browser](v6, "browser");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isCurrentDevicePrimaryResident");

  if (v16)
  {
    -[HMMTRAccessoryServer stateCaptureConfigChangeTimer](v6, "stateCaptureConfigChangeTimer");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
    {
      v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, 600.0);
      -[HMMTRAccessoryServer setStateCaptureConfigChangeTimer:](v6, "setStateCaptureConfigChangeTimer:", v18);

      -[HAPAccessoryServer clientQueue](v6, "clientQueue");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer stateCaptureConfigChangeTimer](v6, "stateCaptureConfigChangeTimer");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setDelegateQueue:", v19);

      -[HMMTRAccessoryServer stateCaptureConfigChangeTimer](v6, "stateCaptureConfigChangeTimer");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setDelegate:", v6);

      -[HMMTRAccessoryServer stateCaptureConfigChangeTimer](v6, "stateCaptureConfigChangeTimer");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "resume");

      v9 = (void *)MEMORY[0x242656984]();
      v10 = v6;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HAPAccessoryServer name](v10, "name");
      v23 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v26 = v12;
      v27 = 2112;
      v28 = v23;
      v29 = 2112;
      v30 = &unk_250F3FED0;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@State Capture: Setting timer to capture state information due to configuration change for accessory %@, timeout is %@", buf, 0x20u);

      goto LABEL_9;
    }
  }
LABEL_11:

}

- (void)_notifyDelegateOfPairingStep:(unint64_t)a3
{
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x242656984](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HMMTRAccessoryPairingStepAsString(a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Notifying matter metric pairing step %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HAPAccessoryServer delegate](v6, "delegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "conformsToProtocol:", &unk_256DFDB20))
    v11 = v10;
  else
    v11 = 0;
  v12 = v11;

  objc_msgSend(v12, "notifyMatterAccessoryPairingStep:", a3);
}

- (void)_notifyDelegateOfMTRMetrics:(id)a3
{
  id v4;
  void *v5;
  HMMTRAccessoryServer *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x242656984]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v8;
    v14 = 2048;
    v15 = v4;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Notifying delegate of mtr metrics %p", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HAPAccessoryServer delegate](v6, "delegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "conformsToProtocol:", &unk_256DFDB20))
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  objc_msgSend(v11, "notifyMTRMetrics:", v4);
}

- (void)dispatchAfter:(unint64_t)a3 block:(id)a4
{
  id v6;
  NSObject *v7;

  v6 = a4;
  -[HAPAccessoryServer clientQueue](self, "clientQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_after(a3, v7, v6);

}

- (id)logIdentifier
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)MEMORY[0x24BDD17C8];
  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer fabricID](self, "fabricID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMMTRAccessoryServer objectID](self, "objectID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/%@(%@)"), v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)privateDescription
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend((id)objc_opt_class(), "shortDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HAPAccessoryServer identifier](self, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@ %@"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)attributeDescriptions
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  v3 = objc_alloc(MEMORY[0x24BE3F140]);
  -[HAPAccessoryServer name](self, "name");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = (void *)objc_msgSend(v3, "initWithName:value:", CFSTR("Name"), v30);
  v31[0] = v29;
  v4 = objc_alloc(MEMORY[0x24BE3F140]);
  -[HAPAccessoryServer identifier](self, "identifier");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)objc_msgSend(v4, "initWithName:value:", CFSTR("Identifier"), v28);
  v31[1] = v27;
  v5 = objc_alloc(MEMORY[0x24BE3F140]);
  v6 = (void *)MEMORY[0x24BDD16E0];
  -[HMMTRAccessoryServer rootPublicKey](self, "rootPublicKey");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "numberWithUnsignedInteger:", objc_msgSend(v26, "hash"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend(v5, "initWithName:value:", CFSTR("Root Public Key Hash"), v25);
  v31[2] = v24;
  v7 = objc_alloc(MEMORY[0x24BE3F140]);
  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v7, "initWithName:value:", CFSTR("NodeID"), v23);
  v31[3] = v8;
  v9 = objc_alloc(MEMORY[0x24BE3F140]);
  -[HAPAccessoryServer category](self, "category");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v9, "initWithName:value:", CFSTR("Category"), v10);
  v31[4] = v11;
  v12 = objc_alloc(MEMORY[0x24BE3F140]);
  -[HMMTRAccessoryServer vendorID](self, "vendorID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend(v12, "initWithName:value:", CFSTR("VID"), v13);
  v31[5] = v14;
  v15 = objc_alloc(MEMORY[0x24BE3F140]);
  -[HMMTRAccessoryServer productID](self, "productID");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v15, "initWithName:value:", CFSTR("PID"), v16);
  v31[6] = v17;
  v18 = objc_alloc(MEMORY[0x24BE3F140]);
  -[HMMTRAccessoryServer controllerWrapper](self, "controllerWrapper");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v18, "initWithName:value:", CFSTR("Controller"), v19);
  v31[7] = v20;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v31, 8);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

- (BOOL)isEqual:(id)a3
{
  HMMTRAccessoryServer *v4;
  HMMTRAccessoryServer *v5;
  HMMTRAccessoryServer *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  char v12;

  v4 = (HMMTRAccessoryServer *)a3;
  v5 = v4;
  if (!v4)
    goto LABEL_6;
  if (self == v4)
  {
    v12 = 1;
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = v5;
    -[HAPAccessoryServer identifier](v6, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HAPAccessoryServer identifier](self, "identifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v7, "isEqual:", v8);

    if (v9)
    {
      -[HMMTRAccessoryServer nodeID](v6, "nodeID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMMTRAccessoryServer nodeID](self, "nodeID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "isEqual:", v11);

    }
    else
    {
      v12 = 0;
    }

  }
  else
  {
LABEL_6:
    v12 = 0;
  }
LABEL_10:

  return v12;
}

- (unint64_t)hash
{
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;

  -[HAPAccessoryServer identifier](self, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hash");

  -[HMMTRAccessoryServer nodeID](self, "nodeID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "hash") ^ v4;

  return v6;
}

- (BOOL)locallyDiscovered
{
  return self->_locallyDiscovered;
}

- (void)setLocallyDiscovered:(BOOL)a3
{
  self->_locallyDiscovered = a3;
}

- (BOOL)discoveredOverBLE
{
  return self->_discoveredOverBLE;
}

- (void)setDiscoveredOverBLE:(BOOL)a3
{
  self->_discoveredOverBLE = a3;
}

- (BOOL)bleScanPending
{
  return self->_bleScanPending;
}

- (void)setBleScanPending:(BOOL)a3
{
  self->_bleScanPending = a3;
}

- (BOOL)knownToSystemCommissioner
{
  return self->_knownToSystemCommissioner;
}

- (void)setKnownToSystemCommissioner:(BOOL)a3
{
  self->_knownToSystemCommissioner = a3;
}

- (NSUUID)commissioningID
{
  return self->_commissioningID;
}

- (void)setCommissioningID:(id)a3
{
  objc_storeStrong((id *)&self->_commissioningID, a3);
}

- (NSNumber)vendorID
{
  return self->_vendorID;
}

- (void)setVendorID:(id)a3
{
  objc_storeStrong((id *)&self->_vendorID, a3);
}

- (NSNumber)productID
{
  return self->_productID;
}

- (void)setProductID:(id)a3
{
  objc_storeStrong((id *)&self->_productID, a3);
}

- (NSNumber)nodeID
{
  return self->_nodeID;
}

- (void)setNodeID:(id)a3
{
  objc_storeStrong((id *)&self->_nodeID, a3);
}

- (BOOL)requiresThreadRouter
{
  return self->_requiresThreadRouter;
}

- (void)setRequiresThreadRouter:(BOOL)a3
{
  self->_requiresThreadRouter = a3;
}

- (HMFActivity)activity
{
  return self->_activity;
}

- (HMMTRDuration)maxMetricDuration
{
  return self->_maxMetricDuration;
}

- (void)setMaxMetricDuration:(id)a3
{
  objc_storeStrong((id *)&self->_maxMetricDuration, a3);
}

- (NSString)partsListStateCaptureInformation
{
  return self->_partsListStateCaptureInformation;
}

- (void)setPartsListStateCaptureInformation:(id)a3
{
  objc_storeStrong((id *)&self->_partsListStateCaptureInformation, a3);
}

- (NSString)deviceConnectedStateCaptureInformation
{
  return self->_deviceConnectedStateCaptureInformation;
}

- (void)setDeviceConnectedStateCaptureInformation:(id)a3
{
  objc_storeStrong((id *)&self->_deviceConnectedStateCaptureInformation, a3);
}

- (HMMTRAccessoryServerDelegate)chipDelegate
{
  return (HMMTRAccessoryServerDelegate *)objc_loadWeakRetained((id *)&self->_chipDelegate);
}

- (void)setChipDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_chipDelegate, a3);
}

- (HMMTRHMDHAPAccessoryDelegate)hmdHAPAccessoryDelegate
{
  return (HMMTRHMDHAPAccessoryDelegate *)objc_loadWeakRetained((id *)&self->_hmdHAPAccessoryDelegate);
}

- (void)setHmdHAPAccessoryDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_hmdHAPAccessoryDelegate, a3);
}

- (NSNumber)fabricID
{
  return self->_fabricID;
}

- (void)setFabricID:(id)a3
{
  objc_storeStrong((id *)&self->_fabricID, a3);
}

- (NSUUID)pairingTargetHomeUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 512, 1);
}

- (void)setPairingTargetHomeUUID:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 512);
}

- (HMMTRFabric)pairingTargetFabric
{
  return (HMMTRFabric *)objc_getProperty(self, a2, 520, 1);
}

- (void)setPairingTargetFabric:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 520);
}

- (void)setSoftwareVersionNumber:(id)a3
{
  objc_storeStrong((id *)&self->_softwareVersionNumber, a3);
}

- (void)setSoftwareVersionString:(id)a3
{
  objc_storeStrong((id *)&self->_softwareVersionString, a3);
}

- (void)setClusterIDCharacteristicMap:(id)a3
{
  objc_storeStrong((id *)&self->_clusterIDCharacteristicMap, a3);
}

- (NSString)vendorNameFromDcl
{
  return self->_vendorNameFromDcl;
}

- (void)setVendorNameFromDcl:(id)a3
{
  objc_storeStrong((id *)&self->_vendorNameFromDcl, a3);
}

- (NSString)productNameFromDcl
{
  return self->_productNameFromDcl;
}

- (void)setProductNameFromDcl:(id)a3
{
  objc_storeStrong((id *)&self->_productNameFromDcl, a3);
}

- (BOOL)isCertified
{
  return self->_certified;
}

- (void)setCertified:(BOOL)a3
{
  self->_certified = a3;
}

- (BOOL)isWEDDevice
{
  return self->_wedDevice;
}

- (void)setWedDevice:(BOOL)a3
{
  self->_wedDevice = a3;
}

- (NSString)eMACAddress
{
  return self->_eMACAddress;
}

- (void)setEMACAddress:(id)a3
{
  objc_storeStrong((id *)&self->_eMACAddress, a3);
}

- (NSNumber)supportedLinkLayerTypes
{
  return self->_supportedLinkLayerTypes;
}

- (void)setSupportedLinkLayerTypes:(id)a3
{
  objc_storeStrong((id *)&self->_supportedLinkLayerTypes, a3);
}

- (HMMTRControllerWrapper)controllerWrapper
{
  return (HMMTRControllerWrapper *)objc_getProperty(self, a2, 584, 1);
}

- (void)setControllerWrapper:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 584);
}

- (NSMutableDictionary)attributeTimers
{
  return self->_attributeTimers;
}

- (void)setAttributeTimers:(id)a3
{
  objc_storeStrong((id *)&self->_attributeTimers, a3);
}

- (HMMTRAccessoryServerBrowser)browser
{
  return (HMMTRAccessoryServerBrowser *)objc_loadWeakRetained((id *)&self->_browser);
}

- (void)setBrowser:(id)a3
{
  objc_storeWeak((id *)&self->_browser, a3);
}

- (HMMTRStorage)storage
{
  return (HMMTRStorage *)objc_loadWeakRetained((id *)&self->_storage);
}

- (void)setStorage:(id)a3
{
  objc_storeWeak((id *)&self->_storage, a3);
}

- (HMMTRAccessoryReachabilityManager)reachabilityManager
{
  return self->_reachabilityManager;
}

- (void)setReachabilityManager:(id)a3
{
  objc_storeStrong((id *)&self->_reachabilityManager, a3);
}

- (id)stageDeviceCredentialHandler
{
  return self->_stageDeviceCredentialHandler;
}

- (void)setStageDeviceCredentialHandler:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 624);
}

- (id)stageWiFiScanResultsHandler
{
  return self->_stageWiFiScanResultsHandler;
}

- (void)setStageWiFiScanResultsHandler:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 632);
}

- (id)stageThreadScanResultsHandler
{
  return self->_stageThreadScanResultsHandler;
}

- (void)setStageThreadScanResultsHandler:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 640);
}

- (id)stageProgressUpdateHandler
{
  return self->_stageProgressUpdateHandler;
}

- (void)setStageProgressUpdateHandler:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 648);
}

- (BOOL)stageNetworkScanRequested
{
  return self->_stageNetworkScanRequested;
}

- (void)setStageNetworkScanRequested:(BOOL)a3
{
  self->_stageNetworkScanRequested = a3;
}

- (id)stageCompletion
{
  return self->_stageCompletion;
}

- (void)setStageCompletion:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 656);
}

- (HMFTimer)pairingTimer
{
  return self->_pairingTimer;
}

- (void)setPairingTimer:(id)a3
{
  objc_storeStrong((id *)&self->_pairingTimer, a3);
}

- (HMFTimer)stateCaptureConfigChangeTimer
{
  return self->_stateCaptureConfigChangeTimer;
}

- (void)setStateCaptureConfigChangeTimer:(id)a3
{
  objc_storeStrong((id *)&self->_stateCaptureConfigChangeTimer, a3);
}

- (HMFTimer)stateCaptureDeviceConnectedTimer
{
  return self->_stateCaptureDeviceConnectedTimer;
}

- (void)setStateCaptureDeviceConnectedTimer:(id)a3
{
  objc_storeStrong((id *)&self->_stateCaptureDeviceConnectedTimer, a3);
}

- (BOOL)commissioningSessionEstablished
{
  return self->_commissioningSessionEstablished;
}

- (void)setCommissioningSessionEstablished:(BOOL)a3
{
  self->_commissioningSessionEstablished = a3;
}

- (BOOL)commissioningCompleted
{
  return self->_commissioningCompleted;
}

- (void)setCommissioningCompleted:(BOOL)a3
{
  self->_commissioningCompleted = a3;
}

- (unsigned)networkProvisioningFailures
{
  return self->_networkProvisioningFailures;
}

- (void)setNetworkProvisioningFailures:(unsigned int)a3
{
  self->_networkProvisioningFailures = a3;
}

- (HMMTRPairing)currentPairingInfo
{
  return self->_currentPairingInfo;
}

- (void)setCurrentPairingInfo:(id)a3
{
  objc_storeStrong((id *)&self->_currentPairingInfo, a3);
}

- (unint64_t)partsListStateCaptureHandle
{
  return self->_partsListStateCaptureHandle;
}

- (void)setPartsListStateCaptureHandle:(unint64_t)a3
{
  self->_partsListStateCaptureHandle = a3;
}

- (unint64_t)deviceConnectedStateHandle
{
  return self->_deviceConnectedStateHandle;
}

- (void)setDeviceConnectedStateHandle:(unint64_t)a3
{
  self->_deviceConnectedStateHandle = a3;
}

- (BOOL)pairingUsingMatterSupport
{
  return self->_pairingUsingMatterSupport;
}

- (void)setPairingUsingMatterSupport:(BOOL)a3
{
  self->_pairingUsingMatterSupport = a3;
}

- (NSData)originalPairingAttemptRootCert
{
  return self->_originalPairingAttemptRootCert;
}

- (void)setOriginalPairingAttemptRootCert:(id)a3
{
  objc_storeStrong((id *)&self->_originalPairingAttemptRootCert, a3);
}

- (NSData)originalPairingAttemptOperationalCert
{
  return self->_originalPairingAttemptOperationalCert;
}

- (void)setOriginalPairingAttemptOperationalCert:(id)a3
{
  objc_storeStrong((id *)&self->_originalPairingAttemptOperationalCert, a3);
}

- (BOOL)shouldPairWithoutResident
{
  return self->_shouldPairWithoutResident;
}

- (void)setShouldPairWithoutResident:(BOOL)a3
{
  self->_shouldPairWithoutResident = a3;
}

- (unint64_t)operationDisabledReason
{
  return self->_operationDisabledReason;
}

- (void)setOperationDisabledReason:(unint64_t)a3
{
  self->_operationDisabledReason = a3;
}

- (NSArray)lastPendingFabricLabel
{
  return self->_lastPendingFabricLabel;
}

- (void)setLastPendingFabricLabel:(id)a3
{
  objc_storeStrong((id *)&self->_lastPendingFabricLabel, a3);
}

- (NSError)lastFabricLabelUpdateError
{
  return self->_lastFabricLabelUpdateError;
}

- (void)setLastFabricLabelUpdateError:(id)a3
{
  objc_storeStrong((id *)&self->_lastFabricLabelUpdateError, a3);
}

- (NSData)defaultThreadOperationalDataset
{
  return self->_defaultThreadOperationalDataset;
}

- (void)setDefaultThreadOperationalDataset:(id)a3
{
  objc_storeStrong((id *)&self->_defaultThreadOperationalDataset, a3);
}

- (BOOL)defaultThreadOperationalDatasetRetrieved
{
  return self->_defaultThreadOperationalDatasetRetrieved;
}

- (void)setDefaultThreadOperationalDatasetRetrieved:(BOOL)a3
{
  self->_defaultThreadOperationalDatasetRetrieved = a3;
}

- (id)defaultThreadOperationalDatasetReceiveBlock
{
  return self->_defaultThreadOperationalDatasetReceiveBlock;
}

- (void)setDefaultThreadOperationalDatasetReceiveBlock:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 760);
}

- (HMMTRMetricBundle)currentMetricBundle
{
  return self->_currentMetricBundle;
}

- (void)setCurrentMetricBundle:(id)a3
{
  objc_storeStrong((id *)&self->_currentMetricBundle, a3);
}

- (NSMutableDictionary)pairingDurationDictionary
{
  return self->_pairingDurationDictionary;
}

- (void)setPairingDurationDictionary:(id)a3
{
  objc_storeStrong((id *)&self->_pairingDurationDictionary, a3);
}

- (HMMTRHAPEnumerator)hapEnumerator
{
  return self->_hapEnumerator;
}

- (BOOL)servicesEnumerated
{
  return self->_servicesEnumerated;
}

- (void)setServicesEnumerated:(BOOL)a3
{
  self->_servicesEnumerated = a3;
}

- (BOOL)serviceEnumerationInProgress
{
  return self->_serviceEnumerationInProgress;
}

- (void)setServiceEnumerationInProgress:(BOOL)a3
{
  self->_serviceEnumerationInProgress = a3;
}

- (NSMutableArray)serviceEnumerationFromDeviceCompletionHandlers
{
  return (NSMutableArray *)objc_getProperty(self, a2, 792, 1);
}

- (BOOL)fullServiceEnumerationPendingCachePrimedEvent
{
  return self->_fullServiceEnumerationPendingCachePrimedEvent;
}

- (void)setFullServiceEnumerationPendingCachePrimedEvent:(BOOL)a3
{
  self->_fullServiceEnumerationPendingCachePrimedEvent = a3;
}

- (HMMTRSyncClusterDoorLock)doorLockCluster
{
  return (HMMTRSyncClusterDoorLock *)objc_getProperty(self, a2, 800, 1);
}

- (void)setDoorLockCluster:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 800);
}

- (HMFFuture)doorLockClusterFuture
{
  return (HMFFuture *)objc_getProperty(self, a2, 808, 1);
}

- (void)setDoorLockClusterFuture:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 808);
}

- (NSUUID)initialMTRDeviceStateTimeoutId
{
  return (NSUUID *)objc_getProperty(self, a2, 816, 1);
}

- (void)setInitialMTRDeviceStateTimeoutId:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 816);
}

- (BOOL)controllerRevokeHandlerRegistered
{
  return self->_controllerRevokeHandlerRegistered;
}

- (void)setControllerRevokeHandlerRegistered:(BOOL)a3
{
  self->_controllerRevokeHandlerRegistered = a3;
}

- (NSNumber)commissioneeNetworkCommissioningClusterEndpoint
{
  return self->_commissioneeNetworkCommissioningClusterEndpoint;
}

- (void)setCommissioneeNetworkCommissioningClusterEndpoint:(id)a3
{
  objc_storeStrong((id *)&self->_commissioneeNetworkCommissioningClusterEndpoint, a3);
}

- (NSArray)commissioneeNetworks
{
  return self->_commissioneeNetworks;
}

- (void)setCommissioneeNetworks:(id)a3
{
  objc_storeStrong((id *)&self->_commissioneeNetworks, a3);
}

- (BOOL)commissioneeHasActiveNetwork
{
  return self->_commissioneeHasActiveNetwork;
}

- (void)setCommissioneeHasActiveNetwork:(BOOL)a3
{
  self->_commissioneeHasActiveNetwork = a3;
}

- (NSNumber)objectID
{
  return self->_objectID;
}

- (NSMutableDictionary)pendingMTRDeviceReadReadyHandlers
{
  return self->_pendingMTRDeviceReadReadyHandlers;
}

- (NSNumber)discriminator
{
  return self->_discriminator;
}

- (void)setDiscriminator:(id)a3
{
  objc_storeStrong((id *)&self->_discriminator, a3);
}

- (BOOL)discriminatorIsOriginatedFromShort
{
  return self->_discriminatorIsOriginatedFromShort;
}

- (void)setDiscriminatorIsOriginatedFromShort:(BOOL)a3
{
  self->_discriminatorIsOriginatedFromShort = a3;
}

- (NSNumber)setUpPINCode
{
  return self->_setUpPINCode;
}

- (void)setSetUpPINCode:(id)a3
{
  objc_storeStrong((id *)&self->_setUpPINCode, a3);
}

- (NSString)setupPayloadString
{
  return self->_setupPayloadString;
}

- (void)setSetupPayloadString:(id)a3
{
  objc_storeStrong((id *)&self->_setupPayloadString, a3);
}

- (NSString)onboardingSetupPayloadString
{
  return self->_onboardingSetupPayloadString;
}

- (void)setOnboardingSetupPayloadString:(id)a3
{
  objc_storeStrong((id *)&self->_onboardingSetupPayloadString, a3);
}

- (NSData)topology
{
  return self->_topology;
}

- (void)setTopology:(id)a3
{
  objc_storeStrong((id *)&self->_topology, a3);
}

- (NSData)otaUpdateToken
{
  return (NSData *)objc_getProperty(self, a2, 896, 1);
}

- (void)setOtaUpdateToken:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 896);
}

- (NSFileHandle)otaFileHandle
{
  return (NSFileHandle *)objc_getProperty(self, a2, 904, 1);
}

- (void)setOtaFileHandle:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 904);
}

- (NSNumber)otaFileOffset
{
  return (NSNumber *)objc_getProperty(self, a2, 912, 1);
}

- (void)setOtaFileOffset:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 912);
}

- (HMMTROTAApplyUpdateTimer)otaUpdateTimer
{
  return self->_otaUpdateTimer;
}

- (void)setOtaUpdateTimer:(id)a3
{
  objc_storeStrong((id *)&self->_otaUpdateTimer, a3);
}

- (HMMTROTAAnnounceTimer)otaAnnounceTimer
{
  return self->_otaAnnounceTimer;
}

- (void)setOtaAnnounceTimer:(id)a3
{
  objc_storeStrong((id *)&self->_otaAnnounceTimer, a3);
}

- (HMMTROTAApplyUpdateRequestTimer)otaApplyUpdateRequestTimer
{
  return self->_otaApplyUpdateRequestTimer;
}

- (void)setOtaApplyUpdateRequestTimer:(id)a3
{
  objc_storeStrong((id *)&self->_otaApplyUpdateRequestTimer, a3);
}

- (HMMTRFirmwareUpdateStatus)matterFirmwareUpdateStatus
{
  return self->_matterFirmwareUpdateStatus;
}

- (void)setMatterFirmwareUpdateStatus:(id)a3
{
  objc_storeStrong((id *)&self->_matterFirmwareUpdateStatus, a3);
}

- (BOOL)storageUpdatePending
{
  return self->_storageUpdatePending;
}

- (void)setStorageUpdatePending:(BOOL)a3
{
  self->_storageUpdatePending = a3;
}

- (BOOL)hasPriorSuccessfulPairing
{
  return self->_hasPriorSuccessfulPairing;
}

- (void)setHasPriorSuccessfulPairing:(BOOL)a3
{
  self->_hasPriorSuccessfulPairing = a3;
}

- (BOOL)serviceEnumerationFailed
{
  return self->_serviceEnumerationFailed;
}

- (void)setServiceEnumerationFailed:(BOOL)a3
{
  self->_serviceEnumerationFailed = a3;
}

- (HMMTRAccessoryServerDiagnosticsEventDelegate)diagnosticsEventDelegate
{
  return (HMMTRAccessoryServerDiagnosticsEventDelegate *)objc_loadWeakRetained((id *)&self->_diagnosticsEventDelegate);
}

- (void)setDiagnosticsEventDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_diagnosticsEventDelegate, a3);
}

- (BOOL)delayDiscovery
{
  return self->_delayDiscovery;
}

- (void)setDelayDiscovery:(BOOL)a3
{
  self->_delayDiscovery = a3;
}

- (MTRDevice)matterDevice
{
  return (MTRDevice *)objc_getProperty(self, a2, 960, 1);
}

- (void)setMatterDevice:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 960);
}

- (id)chipReportHandler
{
  return objc_getProperty(self, a2, 968, 1);
}

- (void)setChipReportHandler:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 968);
}

- (BOOL)removalInProgress
{
  return self->_removalInProgress;
}

- (void)setRemovalInProgress:(BOOL)a3
{
  self->_removalInProgress = a3;
}

- (BOOL)blockInvalidation
{
  return self->_blockInvalidation;
}

- (void)setBlockInvalidation:(BOOL)a3
{
  self->_blockInvalidation = a3;
}

- (NSMutableDictionary)characteristicProtocolMappingStates
{
  return self->_characteristicProtocolMappingStates;
}

- (NSError)commissioningFailureOverridingError
{
  return self->_commissioningFailureOverridingError;
}

- (void)setCommissioningFailureOverridingError:(id)a3
{
  objc_storeStrong((id *)&self->_commissioningFailureOverridingError, a3);
}

- (HMFTimer)residentReachabilityUpdateWaitTimer
{
  return self->_residentReachabilityUpdateWaitTimer;
}

- (void)setResidentReachabilityUpdateWaitTimer:(id)a3
{
  objc_storeStrong((id *)&self->_residentReachabilityUpdateWaitTimer, a3);
}

- (BOOL)mtrDeviceStateReported
{
  return self->_mtrDeviceStateReported;
}

- (void)setMtrDeviceStateReported:(BOOL)a3
{
  self->_mtrDeviceStateReported = a3;
}

- (BOOL)mtrDeviceConnected
{
  return self->_mtrDeviceConnected;
}

- (void)setMtrDeviceConnected:(BOOL)a3
{
  self->_mtrDeviceConnected = a3;
}

- (NSNumber)bridgedAccessoryReachabilityReaderTimeoutNSecs
{
  return self->_bridgedAccessoryReachabilityReaderTimeoutNSecs;
}

- (void)setBridgedAccessoryReachabilityReaderTimeoutNSecs:(id)a3
{
  objc_storeStrong((id *)&self->_bridgedAccessoryReachabilityReaderTimeoutNSecs, a3);
}

- (HMMTRAttributeReportDistributor)reportDistributor
{
  return self->_reportDistributor;
}

- (id)descriptorClusterManager
{
  return objc_getProperty(self, a2, 1016, 1);
}

- (void)setDescriptorClusterManager:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 1016);
}

- (BOOL)operationDisabled
{
  return self->_operationDisabled;
}

- (void)setOperationDisabled:(BOOL)a3
{
  self->_operationDisabled = a3;
}

- (void).cxx_destruct
{
  objc_storeStrong(&self->_descriptorClusterManager, 0);
  objc_storeStrong((id *)&self->_reportDistributor, 0);
  objc_storeStrong((id *)&self->_bridgedAccessoryReachabilityReaderTimeoutNSecs, 0);
  objc_storeStrong((id *)&self->_residentReachabilityUpdateWaitTimer, 0);
  objc_storeStrong((id *)&self->_commissioningFailureOverridingError, 0);
  objc_storeStrong((id *)&self->_characteristicProtocolMappingStates, 0);
  objc_storeStrong(&self->_chipReportHandler, 0);
  objc_storeStrong((id *)&self->_matterDevice, 0);
  objc_destroyWeak((id *)&self->_diagnosticsEventDelegate);
  objc_storeStrong((id *)&self->_matterFirmwareUpdateStatus, 0);
  objc_storeStrong((id *)&self->_otaApplyUpdateRequestTimer, 0);
  objc_storeStrong((id *)&self->_otaAnnounceTimer, 0);
  objc_storeStrong((id *)&self->_otaUpdateTimer, 0);
  objc_storeStrong((id *)&self->_otaFileOffset, 0);
  objc_storeStrong((id *)&self->_otaFileHandle, 0);
  objc_storeStrong((id *)&self->_otaUpdateToken, 0);
  objc_storeStrong((id *)&self->_topology, 0);
  objc_storeStrong((id *)&self->_onboardingSetupPayloadString, 0);
  objc_storeStrong((id *)&self->_setupPayloadString, 0);
  objc_storeStrong((id *)&self->_setUpPINCode, 0);
  objc_storeStrong((id *)&self->_discriminator, 0);
  objc_storeStrong((id *)&self->_pendingMTRDeviceReadReadyHandlers, 0);
  objc_storeStrong((id *)&self->_objectID, 0);
  objc_storeStrong((id *)&self->_commissioneeNetworks, 0);
  objc_storeStrong((id *)&self->_commissioneeNetworkCommissioningClusterEndpoint, 0);
  objc_storeStrong((id *)&self->_initialMTRDeviceStateTimeoutId, 0);
  objc_storeStrong((id *)&self->_doorLockClusterFuture, 0);
  objc_storeStrong((id *)&self->_doorLockCluster, 0);
  objc_storeStrong((id *)&self->_serviceEnumerationFromDeviceCompletionHandlers, 0);
  objc_storeStrong((id *)&self->_hapEnumerator, 0);
  objc_storeStrong((id *)&self->_pairingDurationDictionary, 0);
  objc_storeStrong((id *)&self->_currentMetricBundle, 0);
  objc_storeStrong(&self->_defaultThreadOperationalDatasetReceiveBlock, 0);
  objc_storeStrong((id *)&self->_defaultThreadOperationalDataset, 0);
  objc_storeStrong((id *)&self->_lastFabricLabelUpdateError, 0);
  objc_storeStrong((id *)&self->_lastPendingFabricLabel, 0);
  objc_storeStrong((id *)&self->_originalPairingAttemptOperationalCert, 0);
  objc_storeStrong((id *)&self->_originalPairingAttemptRootCert, 0);
  objc_storeStrong((id *)&self->_currentPairingInfo, 0);
  objc_storeStrong((id *)&self->_stateCaptureDeviceConnectedTimer, 0);
  objc_storeStrong((id *)&self->_stateCaptureConfigChangeTimer, 0);
  objc_storeStrong((id *)&self->_pairingTimer, 0);
  objc_storeStrong(&self->_stageCompletion, 0);
  objc_storeStrong(&self->_stageProgressUpdateHandler, 0);
  objc_storeStrong(&self->_stageThreadScanResultsHandler, 0);
  objc_storeStrong(&self->_stageWiFiScanResultsHandler, 0);
  objc_storeStrong(&self->_stageDeviceCredentialHandler, 0);
  objc_storeStrong((id *)&self->_reachabilityManager, 0);
  objc_destroyWeak((id *)&self->_storage);
  objc_destroyWeak((id *)&self->_browser);
  objc_storeStrong((id *)&self->_attributeTimers, 0);
  objc_storeStrong((id *)&self->_controllerWrapper, 0);
  objc_storeStrong((id *)&self->_supportedLinkLayerTypes, 0);
  objc_storeStrong((id *)&self->_eMACAddress, 0);
  objc_storeStrong((id *)&self->_productNameFromDcl, 0);
  objc_storeStrong((id *)&self->_vendorNameFromDcl, 0);
  objc_storeStrong((id *)&self->_clusterIDCharacteristicMap, 0);
  objc_storeStrong((id *)&self->_softwareVersionString, 0);
  objc_storeStrong((id *)&self->_softwareVersionNumber, 0);
  objc_storeStrong((id *)&self->_pairingTargetFabric, 0);
  objc_storeStrong((id *)&self->_pairingTargetHomeUUID, 0);
  objc_storeStrong((id *)&self->_fabricID, 0);
  objc_destroyWeak((id *)&self->_hmdHAPAccessoryDelegate);
  objc_destroyWeak((id *)&self->_chipDelegate);
  objc_storeStrong((id *)&self->_deviceConnectedStateCaptureInformation, 0);
  objc_storeStrong((id *)&self->_partsListStateCaptureInformation, 0);
  objc_storeStrong((id *)&self->_maxMetricDuration, 0);
  objc_storeStrong((id *)&self->_activity, 0);
  objc_storeStrong((id *)&self->_nodeID, 0);
  objc_storeStrong((id *)&self->_productID, 0);
  objc_storeStrong((id *)&self->_vendorID, 0);
  objc_storeStrong((id *)&self->_commissioningID, 0);
  objc_storeStrong((id *)&self->_primaryAccessory, 0);
  objc_storeStrong((id *)&self->_pairingEndContextWhenRemove, 0);
  objc_storeStrong((id *)&self->_removeReason, 0);
}

void __51__HMMTRAccessoryServer_deviceConfigurationChanged___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v7;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Enumeration per configuration change complete", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v4);

}

void __51__HMMTRAccessoryServer_device_receivedEventReport___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (!objc_msgSend(v3, "count"))
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "endpoint");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "cluster");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic found for event report: endpoint:%@ cluster:%@", (uint8_t *)&v10, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObjectsFromArray:", v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

uint64_t __51__HMMTRAccessoryServer_device_receivedEventReport___block_invoke_735(uint64_t a1)
{
  void *v2;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 0, 0);

  if ((_os_feature_enabled_impl() & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "handleEventReportForNotification:", *(_QWORD *)(a1 + 40));
  if ((_os_feature_enabled_impl() & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "handleEventReportForNotification:", *(_QWORD *)(a1 + 40));
  result = CFPreferencesGetAppBooleanValue(CFSTR("MatterTTU"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0);
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "handleEventReportForNotification:", *(_QWORD *)(a1 + 40));
  return result;
}

void __47__HMMTRAccessoryServer_processAttributeReport___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (!objc_msgSend(v3, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *MEMORY[0x24BDDB460]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "endpoint");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "cluster");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543874;
      v12 = v8;
      v13 = 2112;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic found for attribute report: endpoint:%@ cluster:%@", (uint8_t *)&v11, 0x20u);

    }
    objc_autoreleasePoolPop(v5);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObjectsFromArray:", v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __47__HMMTRAccessoryServer_processAttributeReport___block_invoke_734(uint64_t a1)
{
  id v2;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "hmf_isEmpty") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0, 0);

  }
}

void __55__HMMTRAccessoryServer_device_receivedAttributeReport___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (!objc_msgSend(v3, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *MEMORY[0x24BDDB460]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "endpoint");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "cluster");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543874;
      v12 = v8;
      v13 = 2112;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic found for attribute report: endpoint:%@ cluster:%@", (uint8_t *)&v11, 0x20u);

    }
    objc_autoreleasePoolPop(v5);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObjectsFromArray:", v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __55__HMMTRAccessoryServer_device_receivedAttributeReport___block_invoke_733(uint64_t a1)
{
  id v2;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "hmf_isEmpty") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0, 0);

  }
}

void __68__HMMTRAccessoryServer__updateDelegateOfConnectionStatus_withError___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "linkLayerType");
    objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setLinkLayerType:", v2);

    v4 = *(void **)(a1 + 32);
    objc_msgSend(v4, "primaryAccessory");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_getSupportedLinkLayerTypesForAccessory:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setSupportedLinkLayerTypes:", v6);

  }
  else
  {
    v2 = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "accessoryServer:didUpdateConnectionState:linkLayerType:withError:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), v2, *(_QWORD *)(a1 + 40));

}

void __44__HMMTRAccessoryServer_device_stateChanged___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v7;
    v15 = 2112;
    v16 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Enumeration per reachable device complete: %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  if (!v3)
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "clusterIDCharacteristicMap");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v12;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@clusterIDCharacteristicMap : %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

uint64_t __77__HMMTRAccessoryServer__registerStateCaptureHandler_stateCaptureInformation___block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 16) != 3)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("os-state-HMMTRAccessoryServer"));
    objc_msgSend(WeakRetained, "dumpState:", *(_QWORD *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(WeakRetained, "nodeID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "fabricID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "objectID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("HMMTRAccessoryServer State for %@/%@(%@)"), v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = objc_msgSend(WeakRetained, "createStateData:data:", v10, v5);
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void __86__HMMTRAccessoryServer__fetchAdditionalThreadNetworkInformationFromDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch software version string of CHIP Accessory with error %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __86__HMMTRAccessoryServer__fetchAdditionalThreadNetworkInformationFromDevice_completion___block_invoke_708(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch eMAC address of CHIP Accessory with error %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t __86__HMMTRAccessoryServer__fetchAdditionalThreadNetworkInformationFromDevice_completion___block_invoke_709(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __68__HMMTRAccessoryServer_handleThreadNetworkStateChangedNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleThreadRadioStateChanged");
}

void __54__HMMTRAccessoryServer__handleThreadRadioStateChanged__block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "chipDelegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "didUpdateRequiresThreadRouterForAccessoryServer:", *(_QWORD *)(a1 + 32));

}

void __69__HMMTRAccessoryServer_handleThreadDirectConnectionSleepyTypeChange___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "chipDelegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "didUpdateRequiresThreadRouterForAccessoryServer:", *(_QWORD *)(a1 + 32));

}

void __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v17[5];
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "nodeID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v23 = v10;
      v24 = 2112;
      v25 = v11;
      v26 = 2112;
      v27 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to get additional thread information from accessory after firmware update for nodeID %@, error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v12 = *(void **)(a1 + 32);
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke_704;
    v17[3] = &unk_250F234E0;
    v17[4] = v12;
    v13 = *(id *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    v19 = v13;
    v20 = v14;
    v15 = *(id *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 64);
    v18 = v15;
    v21 = v16;
    objc_msgSend(v12, "_fetchAdditionalThreadNetworkInformationFromDevice:completion:", v5, v17);

  }
}

void __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke_704(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void (*v10)(void);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  char v24;
  void *v25;
  void *v26;
  NSObject *v27;
  _QWORD block[4];
  id v29;
  _QWORD v30[5];
  NSObject *v31;
  _QWORD v32[5];
  NSObject *v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "nodeID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v35 = v8;
      v36 = 2112;
      v37 = v9;
      v38 = 2112;
      v39 = v3;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to refresh thread capabilities from accessory nodeID %@, error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    v10 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_15;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "softwareVersionNumber");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "isWEDDevice");
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "eMACAddress");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v35 = v11;
    v36 = 2112;
    v37 = v12;
    v38 = 2112;
    v39 = v13;
    v40 = 2112;
    v41 = v14;
    v42 = 2112;
    v43 = v15;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Refreshed thread capabilities for accessory with nodeID: %@, firmwareVersion = %@ WED: %@ eMAC: %@", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v4);
  if (!objc_msgSend(*(id *)(a1 + 32), "isWEDDevice")
    || (objc_msgSend(*(id *)(a1 + 32), "eMACAddress"),
        v16 = (void *)objc_claimAutoreleasedReturnValue(),
        v16,
        !v16))
  {
    v10 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_15:
    v10();
    goto LABEL_16;
  }
  v17 = dispatch_group_create();
  v18 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v19 = objc_msgSend(*(id *)(a1 + 32), "isWEDDevice");
  v20 = MEMORY[0x24BDAC760];
  if (v18 != v19)
  {
    dispatch_group_enter(v17);
    v21 = *(void **)(a1 + 40);
    v22 = objc_msgSend(*(id *)(a1 + 32), "isWEDDevice");
    v32[0] = v20;
    v32[1] = 3221225472;
    v32[2] = __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke_705;
    v32[3] = &unk_250F23E18;
    v32[4] = *(_QWORD *)(a1 + 32);
    v33 = v17;
    objc_msgSend(v21, "updateWedSupport:completion:", v22, v32);

  }
  objc_msgSend(*(id *)(a1 + 32), "eMACAddress");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = HMFEqualObjects();

  if ((v24 & 1) == 0)
  {
    dispatch_group_enter(v17);
    v25 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "eMACAddress");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v30[0] = v20;
    v30[1] = 3221225472;
    v30[2] = __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke_706;
    v30[3] = &unk_250F23E18;
    v30[4] = *(_QWORD *)(a1 + 32);
    v31 = v17;
    objc_msgSend(v25, "updateExtendedMACAddress:completion:", v26, v30);

  }
  objc_msgSend(*(id *)(a1 + 32), "delegateQueue");
  v27 = objc_claimAutoreleasedReturnValue();
  block[0] = v20;
  block[1] = 3221225472;
  block[2] = __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke_707;
  block[3] = &unk_250F22988;
  v29 = *(id *)(a1 + 48);
  dispatch_group_notify(v17, v27, block);

LABEL_16:
}

void __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke_705(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to WED support version after firmware update error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke_706(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to Wed support version after firmware update error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t __64__HMMTRAccessoryServer_refreshThreadCapabilitiesWithCompletion___block_invoke_707(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __52__HMMTRAccessoryServer__continueNetworkProvisioning__block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 32);
  if (!v7 || v8)
  {
    objc_msgSend(v10, "_notifyDelegateOfPairingProgress:error:", 19, v8);
    objc_msgSend(*(id *)(a1 + 32), "_pairingComplete:context:", v8, v9);
  }
  else
  {
    v11 = (void *)MEMORY[0x242656984](objc_msgSend(v10, "_notifyDelegateOfPairingProgress:", 18));
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v7;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Scanned networks: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(*(id *)(a1 + 32), "stageWiFiScanResultsHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "stageThreadScanResultsHandler");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v16)
      {
        objc_msgSend(*(id *)(a1 + 32), "_collectNetworkCredentials:", v7);
        goto LABEL_10;
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "_onNetworkScanResults:", v7);
  }
LABEL_10:

}

void __106__HMMTRAccessoryServer__checkDeviceIfAccessoryIsBridgedAndUnreachableForCharacteristic_device_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    if (objc_msgSend(v5, "isEqual:", MEMORY[0x24BDBD1C0]))
    {
      v7 = (void *)MEMORY[0x242656984]();
      v8 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = *(_QWORD *)(a1 + 40);
        v19 = 138543618;
        v20 = v10;
        v21 = 2112;
        v22 = v11;
        _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Bridge accessory for endpoint %@ is unreachable", (uint8_t *)&v19, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
    }
    v12 = *(_QWORD *)(a1 + 48);
    v13 = objc_msgSend(v5, "isEqual:", MEMORY[0x24BDBD1C0]);
  }
  else
  {
    v14 = (void *)MEMORY[0x242656984]();
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 40);
      v19 = 138543618;
      v20 = v17;
      v21 = 2112;
      v22 = v18;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_ERROR, "%{public}@Bridge is unreachable while determining bridge accessory (%@) reachability", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v12 = *(_QWORD *)(a1 + 48);
    v13 = 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, v13);

}

void __97__HMMTRAccessoryServer__queryBridgedAccessoryAndUnreachablePerCacheForCharacteristic_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (v3
    && (objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x24BDDB500]),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isEqual:", *MEMORY[0x24BDDB468]),
        v5,
        (v6 & 1) != 0))
  {
    objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (objc_msgSend(v9, "isEqual:", MEMORY[0x24BDBD1C0]))
    {
      v10 = (void *)MEMORY[0x242656984]();
      v11 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "endpoint");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543618;
        v16 = v13;
        v17 = 2112;
        v18 = v14;
        _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_ERROR, "%{public}@Bridged accessory for endpoint %@ is unreachable", (uint8_t *)&v15, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void __82__HMMTRAccessoryServer_fetchColorControlClusterForHapAccessory_completionHandler___block_invoke(id *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  id v13;
  void (**v14)(id, _QWORD, void *);
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1[4], "deviceController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(a1[4], "nodeID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "unsignedLongLongValue");
    objc_msgSend(a1[4], "clientQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __82__HMMTRAccessoryServer_fetchColorControlClusterForHapAccessory_completionHandler___block_invoke_694;
    v15[3] = &unk_250F22740;
    v6 = a1[5];
    v7 = a1[4];
    v16 = v6;
    v17 = v7;
    v18 = a1[6];
    objc_msgSend(v2, "getBaseDevice:queue:completionHandler:", v4, v5, v15);

    v8 = v16;
  }
  else
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = a1[4];
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = a1[5];
      *(_DWORD *)buf = 138543618;
      v20 = v12;
      v21 = 2112;
      v22 = v13;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to fetch color control cluster, hapAccessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = (void (**)(id, _QWORD, void *))a1[6];
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14[2](v14, 0, v8);
  }

}

void __82__HMMTRAccessoryServer_fetchColorControlClusterForHapAccessory_completionHandler___block_invoke_694(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void (**v13)(id, _QWORD, void *);
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  id v21;
  void (**v22)(id, _QWORD, void *);
  void *v23;
  _QWORD v24[5];
  id v25;
  id v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = a1[5];
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v12;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_ERROR, "%{public}@No Matter device available to fetch color control cluster", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    v13 = (void (**)(id, _QWORD, void *))a1[6];
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v13[2](v13, 0, v14);
    goto LABEL_12;
  }
  if (!objc_msgSend(a1[4], "isPrimary"))
  {
    objc_msgSend(a1[5], "endPointForHapAccessory:", a1[4]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "clientQueue");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = MEMORY[0x24BDAC760];
      v24[1] = 3221225472;
      v24[2] = __82__HMMTRAccessoryServer_fetchColorControlClusterForHapAccessory_completionHandler___block_invoke_696;
      v24[3] = &unk_250F23468;
      v24[4] = a1[5];
      v25 = v14;
      v26 = v5;
      v27 = a1[6];
      objc_msgSend(v15, "queryEndpointForClusterID:endpoint:device:callbackQueue:completionHandler:", &unk_250F3FD20, v25, v26, v16, v24);

    }
    else
    {
      v17 = (void *)MEMORY[0x242656984]();
      v18 = a1[5];
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = a1[4];
        *(_DWORD *)buf = 138543618;
        v32 = v20;
        v33 = 2112;
        v34 = v21;
        _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil endpoint to fetch color control cluster for hapAccessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
      v22 = (void (**)(id, _QWORD, void *))a1[6];
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 4, 0);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v22[2](v22, 0, v23);

    }
LABEL_12:

    goto LABEL_13;
  }
  +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "clientQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = __82__HMMTRAccessoryServer_fetchColorControlClusterForHapAccessory_completionHandler___block_invoke_2;
  v28[3] = &unk_250F24150;
  v28[4] = a1[5];
  v29 = v5;
  v30 = a1[6];
  objc_msgSend(v7, "endpointForClusterID:device:callbackQueue:completionHandler:", &unk_250F3FD20, v29, v8, v28);

LABEL_13:
}

void __82__HMMTRAccessoryServer_fetchColorControlClusterForHapAccessory_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  HMMTRColorControl *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  HMMTRColorControl *v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v10;
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Primary: Found color control cluster at endpoint: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v11 = [HMMTRColorControl alloc];
    v12 = *(_QWORD *)(a1 + 40);
    v13 = objc_msgSend(v5, "unsignedShortValue");
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[MTRBaseClusterColorControl initWithDevice:endpoint:queue:](v11, "initWithDevice:endpoint:queue:", v12, v13, v14);

    (*(void (**)(_QWORD, HMMTRColorControl *, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v15, 0);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v15 = (HMMTRColorControl *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, HMMTRColorControl *))(v16 + 16))(v16, 0, v15);
  }

}

void __82__HMMTRAccessoryServer_fetchColorControlClusterForHapAccessory_completionHandler___block_invoke_696(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  HMMTRColorControl *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  HMMTRColorControl *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = (void *)MEMORY[0x242656984]();
  v7 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (a2)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v20 = 138543618;
      v21 = v10;
      v22 = 2112;
      v23 = v11;
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Found color control cluster at endpoint: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v12 = [HMMTRColorControl alloc];
    v13 = *(_QWORD *)(a1 + 48);
    v14 = objc_msgSend(*(id *)(a1 + 40), "unsignedShortValue");
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[MTRBaseClusterColorControl initWithDevice:endpoint:queue:](v12, "initWithDevice:endpoint:queue:", v13, v14, v15);

    (*(void (**)(_QWORD, HMMTRColorControl *, _QWORD))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v16, 0);
  }
  else
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 40);
      v20 = 138543618;
      v21 = v17;
      v22 = 2112;
      v23 = v18;
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Did not find color control cluster at endpoint: %@ ", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v19 = *(_QWORD *)(a1 + 56);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v16 = (HMMTRColorControl *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, HMMTRColorControl *))(v19 + 16))(v19, 0, v16);
  }

}

void __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  _QWORD v44[5];
  id v45;
  id v46;
  _QWORD v47[5];
  id v48;
  id v49;
  _QWORD v50[5];
  id v51;
  id v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "UUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v54 = v5;
    v55 = 2112;
    v56 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Getting door lock cluster object", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "doorLockCluster");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v54 = v11;
      v55 = 2112;
      v56 = v12;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found existing door lock cluster object", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v13 = *(void **)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 32), "doorLockCluster");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "fulfillWithValue:", v14);
    goto LABEL_16;
  }
  objc_msgSend(*(id *)(a1 + 32), "doorLockClusterFuture");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    v16 = (void *)MEMORY[0x242656984]();
    v17 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v54 = v19;
      v55 = 2112;
      v56 = v20;
      _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Creation is already in progress", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v21 = objc_alloc(MEMORY[0x24BE3F168]);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v21, "initWithQueue:", v22);

    objc_msgSend(*(id *)(a1 + 32), "doorLockClusterFuture");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = MEMORY[0x24BDAC760];
    v50[0] = MEMORY[0x24BDAC760];
    v50[1] = 3221225472;
    v50[2] = __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke_687;
    v50[3] = &unk_250F233C8;
    v25 = *(void **)(a1 + 40);
    v50[4] = *(_QWORD *)(a1 + 32);
    v51 = v25;
    v52 = *(id *)(a1 + 48);
    v47[0] = v24;
    v47[1] = 3221225472;
    v47[2] = __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke_689;
    v47[3] = &unk_250F233F0;
    v26 = *(void **)(a1 + 40);
    v47[4] = *(_QWORD *)(a1 + 32);
    v48 = v26;
    v49 = *(id *)(a1 + 48);
    v27 = (id)objc_msgSend(v23, "inContext:then:orRecover:", v14, v50, v47);

    v28 = v51;
LABEL_15:

    goto LABEL_16;
  }
  objc_msgSend(*(id *)(a1 + 32), "setDoorLockClusterFuture:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "deviceController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = (void *)MEMORY[0x242656984]();
  v30 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v31 = objc_claimAutoreleasedReturnValue();
  v32 = v31;
  if (v14)
  {
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "nodeID");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v54 = v33;
      v55 = 2112;
      v56 = v34;
      v57 = 2112;
      v58 = v35;
      _os_log_impl(&dword_23E95B000, v32, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Getting base device with nodeID: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v36, "unsignedLongLongValue");
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v44[0] = MEMORY[0x24BDAC760];
    v44[1] = 3221225472;
    v44[2] = __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke_691;
    v44[3] = &unk_250F23440;
    v39 = *(void **)(a1 + 40);
    v44[4] = *(_QWORD *)(a1 + 32);
    v45 = v39;
    v46 = *(id *)(a1 + 48);
    objc_msgSend(v14, "getBaseDevice:queue:completionHandler:", v37, v38, v44);

    v28 = v45;
    goto LABEL_15;
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "UUID");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v54 = v40;
    v55 = 2112;
    v56 = v41;
    _os_log_impl(&dword_23E95B000, v32, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] No Matter device controller available", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v29);
  v42 = *(void **)(a1 + 48);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "rejectWithError:", v43);

  v14 = 0;
LABEL_16:

}

uint64_t __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke_687(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "UUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543874;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Returning doorLockCluster: %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[6], "fulfillWithValue:", v3);

  return 1;
}

uint64_t __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke_689(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "UUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = a1[4];
    v11 = 138543874;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    v15 = 2048;
    v16 = v9;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to create door lock cluster object. Removing door lock cluster future from accessory server: %p", (uint8_t *)&v11, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[4], "setDoorLockClusterFuture:", 0);
  objc_msgSend(a1[6], "rejectWithError:", v3);

  return 1;
}

void __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke_691(id *a1, void *a2, void *a3)
{
  unint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "matterDevice");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v5 | v7;

  v9 = (void *)MEMORY[0x242656984]();
  v10 = a1[4];
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "UUID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "matterDevice");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v34 = v17;
      v35 = 2112;
      v36 = v18;
      v37 = 2112;
      v38 = (void *)v5;
      v39 = 2112;
      v40 = (unint64_t)v19;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found base device: %@. matterDevice: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v9);
    v20 = (void *)MEMORY[0x242656984]();
    v21 = a1[4];
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "UUID");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v34 = v23;
      v35 = 2112;
      v36 = v24;
      v37 = 2112;
      v38 = &unk_250F3FC18;
      v39 = 2112;
      v40 = v5;
      _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Looking up endpoint for clusterID: %@, device: %@, ", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v20);
    +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "clientQueue");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v29[0] = MEMORY[0x24BDAC760];
    v29[1] = 3221225472;
    v29[2] = __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke_692;
    v29[3] = &unk_250F23418;
    v27 = a1[5];
    v29[4] = a1[4];
    v30 = v27;
    v31 = a1[6];
    v32 = (id)v5;
    objc_msgSend(v25, "endpointForClusterID:device:callbackQueue:completionHandler:", &unk_250F3FC18, v32, v26, v29);

  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "UUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "matterDevice");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v34 = v13;
      v35 = 2112;
      v36 = v14;
      v37 = 2112;
      v38 = v15;
      v39 = 2112;
      v40 = 0;
      v41 = 2112;
      v42 = v6;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to get base device. matter device: %@, base device: %@, getBaseDeviceError: %@", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v9);
    if (v6)
    {
      v16 = v6;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v16 = (id)objc_claimAutoreleasedReturnValue();
    }
    v28 = v16;
    objc_msgSend(a1[6], "rejectWithError:", v16);

  }
}

void __60__HMMTRAccessoryServer_createDoorLockClusterObjectWithFlow___block_invoke_692(uint64_t a1, void *a2, void *a3)
{
  id v5;
  HMMTRSyncClusterDoorLock *v6;
  NSObject *v7;
  HMMTRSyncClusterDoorLock *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  HMMTRSyncClusterDoorLock *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMMTRSyncClusterDoorLock *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  HMMTRSyncClusterDoorLock *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  if (v5)
  {
    v8 = [HMMTRSyncClusterDoorLock alloc];
    objc_msgSend(*(id *)(a1 + 32), "matterDevice");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 56);
    v11 = objc_msgSend(v5, "unsignedShortValue");
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMMTRSyncClusterDoorLock initWithDevice:baseDevice:endpoint:queue:accessoryServer:](v8, "initWithDevice:baseDevice:endpoint:queue:accessoryServer:", v9, v10, v11, v12, *(_QWORD *)(a1 + 32));

    v14 = (void *)MEMORY[0x242656984](objc_msgSend(*(id *)(a1 + 32), "setDoorLockCluster:", v13));
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543874;
      v26 = v17;
      v27 = 2112;
      v28 = v18;
      v29 = 2112;
      v30 = v13;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Created door lock cluster object: %@", (uint8_t *)&v25, 0x20u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(*(id *)(a1 + 48), "fulfillWithValue:", v13);
  }
  else
  {
    v19 = (void *)MEMORY[0x242656984]();
    v20 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543874;
      v26 = v22;
      v27 = 2112;
      v28 = v23;
      v29 = 2112;
      v30 = v6;
      _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Did not find endpoint for door lock with error: %@", (uint8_t *)&v25, 0x20u);

    }
    objc_autoreleasePoolPop(v19);
    if (v6)
    {
      v24 = v6;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v24 = (HMMTRSyncClusterDoorLock *)objc_claimAutoreleasedReturnValue();
    }
    v13 = v24;
    objc_msgSend(*(id *)(a1 + 48), "rejectWithError:", v24);
  }

}

void __101__HMMTRAccessoryServer_announceOtaProvider_providerEndpoint_immediateAnnouncement_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 32);
      v17 = 138543874;
      v18 = v8;
      v19 = 2112;
      v20 = v9;
      v21 = 2112;
      v22 = v3;
      v10 = "%{public}@Failed to announce ota provider to %@ with error %@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_23E95B000, v11, v12, v10, (uint8_t *)&v17, v13);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 32);
    v17 = 138543618;
    v18 = v8;
    v19 = 2112;
    v20 = v14;
    v10 = "%{public}@Successfully announced ota provider to %@";
    v11 = v7;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
  (*(void (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v3, v15, v16);

}

void __101__HMMTRAccessoryServer_announceOtaProvider_providerEndpoint_immediateAnnouncement_completionHandler___block_invoke_684(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  double v8;
  id v9;
  void *v10;
  double v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  dispatch_time_t v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  _QWORD block[4];
  id v33;
  id v34;
  uint64_t v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  double v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(double *)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    v37 = v7;
    v38 = 2112;
    v39 = v8;
    v40 = 2112;
    v41 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Update default OTA provider completed for server:%@ with error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  v9 = objc_alloc_init(MEMORY[0x24BDDB7F0]);
  objc_msgSend(*(id *)(a1 + 40), "readAttributeUpdateStateWithParams:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0.0;
  if (!v10)
  {
    v12 = (void *)MEMORY[0x242656984]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v37 = v15;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_ERROR, "%{public}@An error occurred while trying to read the OTA requestor update state", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    v11 = 120.0;
  }
  objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = COERCE_DOUBLE(v17);

  v19 = (void *)MEMORY[0x242656984]();
  v20 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v22;
    v38 = 2112;
    v39 = v18;
    _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_INFO, "%{public}@OTA Requestor update state:%@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  if (!objc_msgSend(*(id *)&v18, "isEqualToNumber:", &unk_250F3FEA0))
    v11 = 120.0;
  v23 = (void *)MEMORY[0x242656984]();
  v24 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    v37 = v26;
    v38 = 2048;
    v39 = v11;
    v40 = 2112;
    v41 = v27;
    _os_log_impl(&dword_23E95B000, v25, OS_LOG_TYPE_INFO, "%{public}@Sending announcement after %f secs for %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v23);
  v28 = dispatch_time(0, (uint64_t)(v11 * 1000000000.0));
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v29 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __101__HMMTRAccessoryServer_announceOtaProvider_providerEndpoint_immediateAnnouncement_completionHandler___block_invoke_686;
  block[3] = &unk_250F224F8;
  v33 = *(id *)(a1 + 40);
  v30 = *(id *)(a1 + 48);
  v31 = *(_QWORD *)(a1 + 32);
  v34 = v30;
  v35 = v31;
  dispatch_after(v28, v29, block);

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t __101__HMMTRAccessoryServer_announceOtaProvider_providerEndpoint_immediateAnnouncement_completionHandler___block_invoke_686(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v2 = (void *)a1[4];
  v1 = a1[5];
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __101__HMMTRAccessoryServer_announceOtaProvider_providerEndpoint_immediateAnnouncement_completionHandler___block_invoke_2;
  v4[3] = &unk_250F223C0;
  v4[4] = a1[6];
  return objc_msgSend(v2, "announceOtaProviderWithParams:expectedValues:expectedValueInterval:completionHandler:", v1, 0, 0, v4);
}

void __101__HMMTRAccessoryServer_announceOtaProvider_providerEndpoint_immediateAnnouncement_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 32);
      v15 = 138543874;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v3;
      v10 = "%{public}@Failed to announce ota provider to %@ with error %@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_23E95B000, v11, v12, v10, (uint8_t *)&v15, v13);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 32);
    v15 = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v14;
    v10 = "%{public}@Successfully announced ota provider to %@";
    v11 = v7;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
}

void __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_674(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 138543618;
    v21 = v5;
    v22 = 2048;
    v23 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: update default ota provider job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_675;
  block[3] = &unk_250F23378;
  v10 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v16 = v10;
  v19 = *(id *)(a1 + 56);
  v17 = *(id *)(a1 + 48);
  v18 = v7;
  v11 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v9;
  v14[1] = 3221225472;
  v14[2] = __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_680;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 64);
  v14[4] = *(_QWORD *)(a1 + 32);
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

uint64_t __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_681(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_675(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  HMMTRDeviceTopology *v10;
  void *v11;
  HMMTRDeviceTopology *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v24 = v5;
    v25 = 2112;
    v26 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Request to update default ota provider to %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = MEMORY[0x24BDAC760];
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 3221225472;
  v21[2] = __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_676;
  v21[3] = &unk_250F23F80;
  v22 = *(id *)(a1 + 64);
  v8 = (void *)MEMORY[0x242656B10](v21);
  v9 = *(void **)(a1 + 32);
  v10 = [HMMTRDeviceTopology alloc];
  objc_msgSend(*(id *)(a1 + 32), "nodeID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HMMTRDeviceTopology initWithNodeId:server:](v10, "initWithNodeId:server:", v11, *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v7;
  v17[1] = 3221225472;
  v17[2] = __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_2;
  v17[3] = &unk_250F24240;
  v15 = *(void **)(a1 + 40);
  v17[4] = *(_QWORD *)(a1 + 32);
  v20 = v8;
  v18 = v15;
  v19 = *(id *)(a1 + 48);
  v16 = v8;
  objc_msgSend(v9, "_endpointForOTARequestorWithTopology:mtrDevice:callbackQueue:completionHandler:", v12, v13, v14, v17);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_680(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: update default ota provider job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

uint64_t __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_676(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  id v40;
  id v41;
  _QWORD block[4];
  id v43;
  _QWORD v44[2];
  _QWORD v45[2];
  uint64_t v46;
  void *v47;
  void *v48;
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  id v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v61 = v10;
      v62 = 2112;
      v63 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to query endpoints for ota requestor cluster : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = objc_alloc(MEMORY[0x24BDDB618]);
    objc_msgSend(*(id *)(a1 + 32), "matterDevice");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = (void *)objc_msgSend(v12, "initWithDevice:endpointID:queue:", v13, v5, v14);

    v15 = *MEMORY[0x24BDDB470];
    v58[0] = &unk_250F3FC48;
    v41 = v5;
    v16 = *MEMORY[0x24BDDB478];
    v57[0] = v15;
    v57[1] = v16;
    v40 = v6;
    v18 = *MEMORY[0x24BDDB510];
    v19 = *MEMORY[0x24BDDB518];
    v55[0] = *MEMORY[0x24BDDB500];
    v17 = v55[0];
    v55[1] = v19;
    v20 = *(_QWORD *)(a1 + 40);
    v56[0] = v18;
    v56[1] = v20;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v56, v55, 2);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v58[1] = v21;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v58, v57, 2);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v59[0] = v22;
    v53[1] = v16;
    v54[0] = &unk_250F3FE70;
    v51[0] = v17;
    v51[1] = v19;
    v23 = *(_QWORD *)(a1 + 48);
    v52[0] = v18;
    v52[1] = v23;
    v53[0] = v15;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v52, v51, 2);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v54[1] = v24;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v54, v53, 2);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v59[1] = v25;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v59, 2);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = *MEMORY[0x24BDDB458];
    v49[1] = v19;
    v50[0] = v27;
    v49[0] = v17;
    v46 = v16;
    v28 = *MEMORY[0x24BDDB4F8];
    v44[0] = v17;
    v44[1] = v19;
    v6 = v40;
    v5 = v41;
    v29 = v39;
    v45[0] = v28;
    v45[1] = v26;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v45, v44, 2);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = v30;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v31;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v48, 1);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v50[1] = v32;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v50, v49, 2);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v39, "writeAttributeDefaultOTAProvidersWithValue:expectedValueInterval:", v33, &unk_250F3FDB0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
  else
  {
    v34 = (void *)MEMORY[0x242656984]();
    v35 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v61 = v37;
      _os_log_impl(&dword_23E95B000, v36, OS_LOG_TYPE_ERROR, "%{public}@No Matter device available to update default OTA provider", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v34);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v38 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_677;
    block[3] = &unk_250F22988;
    v43 = *(id *)(a1 + 56);
    dispatch_async(v38, block);

    v29 = v43;
  }

}

void __84__HMMTRAccessoryServer_updateDefaultOtaProvider_providerEndpoint_completionHandler___block_invoke_677(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_665(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD block[5];
  NSObject *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v22 = v5;
    v23 = 2048;
    v24 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: generate state capture information job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_666;
  block[3] = &unk_250F233A0;
  block[4] = *(_QWORD *)(a1 + 32);
  v10 = *(id *)(a1 + 48);
  v17 = v7;
  v11 = *(_QWORD *)(a1 + 56);
  v19 = v10;
  v20 = v11;
  v18 = *(id *)(a1 + 40);
  v12 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  v15[0] = v9;
  v15[1] = 3221225472;
  v15[2] = __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_672;
  v15[3] = &unk_250F226B0;
  v14 = *(_QWORD *)(a1 + 56);
  v15[4] = *(_QWORD *)(a1 + 32);
  v15[5] = v14;
  dispatch_group_notify(v12, v13, v15);

}

uint64_t __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_673(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_666(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  void (**v35)(_QWORD, _QWORD, _QWORD);
  _QWORD v36[4];
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v39 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Request to generate state capture information", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = MEMORY[0x24BDAC760];
  v36[0] = MEMORY[0x24BDAC760];
  v36[1] = 3221225472;
  v36[2] = __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_667;
  v36[3] = &unk_250F23328;
  v37 = *(id *)(a1 + 56);
  v7 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x242656B10](v36);
  objc_msgSend(*(id *)(a1 + 32), "deviceController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8 && (objc_msgSend(v8, "isRunning") & 1) != 0)
  {
    v10 = (void *)MEMORY[0x24BDDB678];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "unsignedLongLongValue");
    objc_msgSend(*(id *)(a1 + 32), "deviceController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "deviceWithNodeID:deviceController:", v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCE60], "now");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(a1 + 32);
    objc_msgSend(v18, "clientQueue");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = v6;
    v31[1] = 3221225472;
    v31[2] = __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_668;
    v31[3] = &unk_250F23350;
    v32 = *(id *)(a1 + 48);
    v33 = v15;
    v34 = *(_QWORD *)(a1 + 32);
    v35 = v7;
    v20 = v15;
    objc_msgSend(v16, "fetchStateCaptureInformationForDevice:nodeId:server:callbackQueue:completionHandler:", v14, v17, v18, v19, v31);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    v21 = (void *)MEMORY[0x242656984]();
    v22 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v24;
      _os_log_impl(&dword_23E95B000, v23, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to generate state capture information", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v25);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    v26 = (void *)MEMORY[0x242656984]();
    v27 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138543618;
      v39 = v29;
      v40 = 2048;
      v41 = v30;
      _os_log_impl(&dword_23E95B000, v28, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: generate state capture information job(%lu) complete.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
  }

}

void __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_672(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: generate state capture information job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

uint64_t __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_667(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __83__HMMTRAccessoryServer_generateStateCaptureInformationForReason_completionHandler___block_invoke_668(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Reason: %@, Time: %@, Data: %@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x242656984]();
  v6 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138544130;
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    v17 = 2112;
    v18 = v4;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_DEBUG, "%{public}@State Capture: Information generated for %@, triggered by reason %@ : %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void __45__HMMTRAccessoryServer__onThreadScanResults___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __45__HMMTRAccessoryServer__onThreadScanResults___block_invoke_2;
  v7[3] = &unk_250F22458;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

void __45__HMMTRAccessoryServer__onThreadScanResults___block_invoke_2(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(id *, void *, void *);
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id location;
  unint64_t v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc_init(MEMORY[0x24BDDB668]);
    objc_msgSend(*(id *)(a1 + 40), "browser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "attestationStatus");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "populateDelegate:", v2);

    if (objc_msgSend(*(id *)(a1 + 40), "_populateCommissioningParameterCountryCode:", v2))
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDF6068]), "initWithKeychainAccessGroup:", CFSTR("com.apple.thread.network"));
      objc_msgSend(*(id *)(a1 + 32), "extendedPANID");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = bswap64(objc_msgSend(v6, "unsignedLongLongValue"));

      v31 = v7;
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", &v31, 8);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_initWeak(&location, *(id *)(a1 + 40));
      v22 = MEMORY[0x24BDAC760];
      v23 = 3221225472;
      v24 = __45__HMMTRAccessoryServer__onThreadScanResults___block_invoke_661;
      v25 = &unk_250F232D8;
      objc_copyWeak(&v29, &location);
      v26 = v2;
      v27 = *(id *)(a1 + 32);
      v9 = v5;
      v28 = v9;
      v10 = (void *)MEMORY[0x242656B10](&v22);
      v14 = (void *)MEMORY[0x242656984](v10, v11, v12, v13);
      v15 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v16 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v33 = v17;
        v34 = 2112;
        v35 = v8;
        _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Retrieving Thread credentials for extended PANID: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(v9, "retrieveActiveDataSetRecordInternallyForExtendedPANID:completion:", v8, v10, v22, v23, v24, v25);

      objc_destroyWeak(&v29);
      objc_destroyWeak(&location);

    }
  }
  else
  {
    v18 = (void *)MEMORY[0x242656984]();
    v19 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v21;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@No network selection from Thread scan result. Falling back to default network credentials collection.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(*(id *)(a1 + 40), "_collectNetworkCredentials:", 0);
  }
}

void __45__HMMTRAccessoryServer__onThreadScanResults___block_invoke_661(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v8 = (void *)MEMORY[0x242656984]();
  v9 = WeakRetained;
  if (v5 && !v6 && WeakRetained)
  {
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v38 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Populating Thread credentials from extended PAN ID", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(v5, "activeOperationalDataSet");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "setThreadOperationalDataset:", v12);

    v13 = (void *)MEMORY[0x242656984]();
    v14 = v9;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "threadOperationalDataset");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v16;
      v39 = 2112;
      v40 = v17;
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Using activeOperationalDataset buffer %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v18 = (void *)MEMORY[0x242656984]();
    v19 = v14;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "nodeID");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "extendedPANID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v38 = v21;
      v39 = 2112;
      v40 = v22;
      v41 = 2112;
      v42 = v23;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@Requesting to commission device(%@) with selected network:%@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(v19, "deviceController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v24)
    {
      objc_msgSend(v19, "nodeID");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "unsignedLongLongValue");
      v27 = a1[4];
      v36 = 0;
      objc_msgSend(v24, "commissionDevice:commissioningParams:error:", v26, v27, &v36);
      v6 = v36;

      +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 6, v6);
      v28 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 6, v6);
      v28 = objc_claimAutoreleasedReturnValue();
    }
    v31 = (void *)v28;
    if (v6)
    {
      v32 = (void *)MEMORY[0x242656984]();
      v33 = v19;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v38 = v35;
        v39 = 2112;
        v40 = v6;
        _os_log_impl(&dword_23E95B000, v34, OS_LOG_TYPE_ERROR, "%{public}@Commissioning failed: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v32);
      objc_msgSend(v33, "_pairingComplete:context:", v6, v31);
    }

  }
  else
  {
    HMFGetOSLogHandle();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v30;
      v39 = 2112;
      v40 = v6;
      _os_log_impl(&dword_23E95B000, v29, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory Server failed to obtain Thread credentials for selected extended PAN ID... Error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    +[HMMTRAccessoryPairingEndContext otherContextWithStep:error:](HMMTRAccessoryPairingEndContext, "otherContextWithStep:error:", 4, v6);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_pairingComplete:context:", v6, v31);
  }

  objc_msgSend(a1[6], "invalidate");
}

void __43__HMMTRAccessoryServer__onWiFiScanResults___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __43__HMMTRAccessoryServer__onWiFiScanResults___block_invoke_2;
  v7[3] = &unk_250F22458;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

void __43__HMMTRAccessoryServer__onWiFiScanResults___block_invoke_2(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc_init(MEMORY[0x24BDDB668]);
    objc_msgSend(*(id *)(a1 + 40), "browser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "attestationStatus");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "populateDelegate:", v2);

    if (!objc_msgSend(*(id *)(a1 + 40), "_populateCommissioningParameterCountryCode:", v2))
    {
LABEL_18:

      return;
    }
    objc_msgSend(*(id *)(a1 + 32), "ssid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setWifiSSID:", v5);

    objc_msgSend(*(id *)(a1 + 32), "credentials");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setWifiCredentials:", v6);

    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "nodeID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "ssid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v32 = v10;
      v33 = 2112;
      v34 = v11;
      v35 = 2112;
      v36 = v12;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Requesting to commission device(%@) with selected network:%@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "deviceController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      objc_msgSend(*(id *)(a1 + 40), "nodeID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 0;
      objc_msgSend(v13, "commissionDevice:commissioningParams:error:", objc_msgSend(v14, "unsignedLongLongValue"), v2, &v30);
      v15 = v30;

      if (!v15)
      {
LABEL_17:

        goto LABEL_18;
      }
      v16 = (void *)MEMORY[0x242656984]();
      v17 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v32 = v19;
        v33 = 2112;
        v34 = v15;
        _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_ERROR, "%{public}@Commissioning failed: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 6, v15);
      v20 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v25 = (void *)MEMORY[0x242656984]();
      v26 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v32 = v28;
        _os_log_impl(&dword_23E95B000, v27, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to commission", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v25);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
      v15 = (id)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 5, v15);
      v20 = objc_claimAutoreleasedReturnValue();
    }
    v29 = (void *)v20;
    objc_msgSend(*(id *)(a1 + 40), "_pairingComplete:context:", v15, v20);

    goto LABEL_17;
  }
  v21 = (void *)MEMORY[0x242656984]();
  v22 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v32 = v24;
    _os_log_impl(&dword_23E95B000, v23, OS_LOG_TYPE_INFO, "%{public}@No network selection from WiFi scan result. Falling back to default network credentials collection.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
  objc_msgSend(*(id *)(a1 + 40), "_collectNetworkCredentials:", 0);
}

void __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc(MEMORY[0x24BDDB588]);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = objc_msgSend(v5, "unsignedShortValue");
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v7, "initWithDevice:endpoint:queue:", v8, v9, v10);

    if (v11)
    {
      v23[0] = MEMORY[0x24BDAC760];
      v23[1] = 3221225472;
      v23[2] = __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_647;
      v23[3] = &unk_250F24150;
      v23[4] = *(_QWORD *)(a1 + 32);
      v25 = *(id *)(a1 + 48);
      v12 = v11;
      v24 = v12;
      objc_msgSend(v12, "readAttributeFeatureMapWithCompletionHandler:", v23);

    }
    else
    {
      v17 = (void *)MEMORY[0x242656984]();
      v18 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v27 = v20;
        _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@Network commissioning cluster init failed for scanning", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 11, 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 3, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

      v12 = 0;
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x242656984]();
    v14 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v16;
      v28 = 2112;
      v29 = v6;
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_INFO, "%{public}@Network commissioning cluster not found for scanning: %@. Returning empty scan results.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v12 = objc_alloc_init(MEMORY[0x24BDDB798]);
    objc_msgSend(v12, "setWiFiScanResults:", MEMORY[0x24BDBD1A8]);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_647(id *a1, void *a2, void *a3)
{
  id v5;
  char *v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void (*v20)(void);
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  void (**v39)(_QWORD);
  void *v40;
  void *v41;
  void *v42;
  id v43;
  NSObject *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  void *v48;
  id v49;
  id v50;
  _QWORD v51[5];
  id v52;
  void (**v53)(_QWORD);
  char v54;
  _QWORD v55[4];
  id v56;
  id v57;
  id v58;
  uint8_t buf[4];
  uint64_t v60;
  __int16 v61;
  const char *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v15 = (void *)MEMORY[0x242656984]();
    v16 = a1[4];
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v60 = (uint64_t)v18;
      v61 = 2112;
      v62 = v6;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@Couldn't get network commissioning cluster features for scanning: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 3, v6);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void (*)(void))*((_QWORD *)a1[6] + 2);
    goto LABEL_35;
  }
  v7 = objc_msgSend(v5, "unsignedIntegerValue");
  v8 = v7 & 1;
  v9 = objc_msgSend(v5, "unsignedIntegerValue");
  v10 = v9;
  if ((v7 & 1) == 0 || (v9 & 2) != 0)
  {
    if ((v9 & 2) != 0)
    {
      v21 = (void *)MEMORY[0x242656984]();
      v22 = a1[4];
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v60 = (uint64_t)v24;
        _os_log_impl(&dword_23E95B000, v23, OS_LOG_TYPE_INFO, "%{public}@Setting linkLayerType to Thread", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
      objc_msgSend(a1[4], "setLinkLayerType:", 4);
      objc_msgSend(a1[4], "browser");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "fabricID");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "nodeID");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "handlePairingForThreadAccessoryWithFabricID:nodeID:", v26, v27);

    }
    if (!v8)
      goto LABEL_17;
  }
  else
  {
    v11 = (void *)MEMORY[0x242656984]();
    v12 = a1[4];
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v60 = (uint64_t)v14;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Setting linkLayerType to WiFi", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(a1[4], "setLinkLayerType:", 1);
  }
  objc_msgSend(a1[4], "stageWiFiScanResultsHandler");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28 || !objc_msgSend(a1[4], "_controllerIsOnWiFiNetworkWhichSupportsBothBands"))
  {

    goto LABEL_23;
  }
LABEL_17:
  objc_msgSend(a1[4], "stageThreadScanResultsHandler");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v29 || (v10 & 2) == 0)
  {
    v30 = (void *)MEMORY[0x242656984]();
    v31 = a1[4];
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v60 = (uint64_t)v33;
      v61 = 2112;
      v62 = (const char *)v5;
      _os_log_impl(&dword_23E95B000, v32, OS_LOG_TYPE_INFO, "%{public}@Network commissioning cluster feature (featureMap: %@) doesn't require scanning for current request. Returning empty scan results.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v30);
    v34 = objc_alloc_init(MEMORY[0x24BDDB798]);
    v19 = v34;
    v35 = MEMORY[0x24BDBD1A8];
LABEL_33:
    objc_msgSend(v34, "setWiFiScanResults:", v35);
    goto LABEL_34;
  }
LABEL_23:
  if (objc_msgSend(a1[4], "stageNetworkScanRequested"))
  {
    v36 = MEMORY[0x24BDAC760];
    v55[0] = MEMORY[0x24BDAC760];
    v55[1] = 3221225472;
    v55[2] = __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_648;
    v55[3] = &unk_250F240D8;
    v37 = a1[5];
    v38 = a1[4];
    v56 = v37;
    v57 = v38;
    v58 = a1[6];
    v39 = (void (**)(_QWORD))MEMORY[0x242656B10](v55);
    objc_msgSend(a1[4], "stageWiFiScanResultsHandler");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v40;
    if (v40 && v8)
    {

    }
    else
    {
      objc_msgSend(a1[4], "stageThreadScanResultsHandler");
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v48 || (v10 & 2) == 0)
      {
        v49 = a1[4];
        v50 = a1[5];
        v51[0] = v36;
        v51[1] = 3221225472;
        v51[2] = __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_2_653;
        v51[3] = &unk_250F23288;
        v51[4] = v49;
        v54 = v8;
        v52 = a1[6];
        v53 = v39;
        objc_msgSend(v49, "_getCommissioneeHasActiveNetworkWithNetworkCommissioningCluster:completion:", v50, v51);

        goto LABEL_40;
      }
    }
    v39[2](v39);
LABEL_40:

    v19 = v56;
    goto LABEL_41;
  }
  v42 = (void *)MEMORY[0x242656984]();
  v43 = a1[4];
  HMFGetOSLogHandle();
  v44 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = (void *)v45;
    v47 = "WiFi";
    if (!v8)
      v47 = "Thread";
    *(_DWORD *)buf = 138543618;
    v60 = v45;
    v61 = 2080;
    v62 = v47;
    _os_log_impl(&dword_23E95B000, v44, OS_LOG_TYPE_INFO, "%{public}@Network scanning was not requested by upper layer. Returning empty scan results for %s.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v42);
  v34 = objc_alloc_init(MEMORY[0x24BDDB798]);
  v19 = v34;
  v35 = MEMORY[0x24BDBD1A8];
  if (v8)
    goto LABEL_33;
  objc_msgSend(v34, "setThreadScanResults:", MEMORY[0x24BDBD1A8]);
LABEL_34:
  v20 = (void (*)(void))*((_QWORD *)a1[6] + 2);
LABEL_35:
  v20();
LABEL_41:

}

void __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_648(uint64_t a1)
{
  id v2;
  int8x16_t v3;
  _QWORD v4[4];
  int8x16_t v5;
  id v6;

  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_2;
  v4[3] = &unk_250F24150;
  v3 = *(int8x16_t *)(a1 + 32);
  v2 = (id)v3.i64[0];
  v5 = vextq_s8(v3, v3, 8uLL);
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v2, "readAttributeScanMaxTimeSecondsWithCompletionHandler:", v4);

}

void __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_2_653(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (v5 || !a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v6 = (void *)MEMORY[0x242656984]();
    v7 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v9;
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_INFO, "%{public}@Commissionee already has a commissioned network. Skip network scanning.", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v10 = objc_alloc_init(MEMORY[0x24BDDB798]);
    v11 = v10;
    if (*(_BYTE *)(a1 + 56))
      objc_msgSend(v10, "setWiFiScanResults:", MEMORY[0x24BDBD1A8]);
    else
      objc_msgSend(v10, "setThreadScanResults:", MEMORY[0x24BDBD1A8]);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v11;
      v22 = 2112;
      v23 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@Couldn't get scan max time from device: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v7 = &unk_250F3FE58;
  }
  v12 = objc_alloc_init(MEMORY[0x24BDDB790]);
  v13 = (void *)MEMORY[0x242656984](objc_msgSend(v12, "setServerSideProcessingTimeout:", v7));
  v14 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v21 = v16;
    v22 = 2112;
    v23 = v7;
    _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Sending scan network command with timeout: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_651;
  v18[3] = &unk_250F23260;
  v17 = *(void **)(a1 + 40);
  v19 = *(id *)(a1 + 48);
  objc_msgSend(v17, "scanNetworksWithParams:completionHandler:", v12, v18);
  objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:", 17);

}

void __74__HMMTRAccessoryServer__requestAccessoryNetworkScanWithCompletionHandler___block_invoke_651(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a3;
  v6 = a2;
  +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 3, v5);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __62__HMMTRAccessoryServer__populateThreadCredentials_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)MEMORY[0x242656984]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v11;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Populating Thread credentials", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "setThreadOperationalDataset:", v5);
  if (v6)
  {
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 4, v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = 0;
  }
  if (v5)
    v13 = *(_QWORD *)(a1 + 32);
  else
    v13 = 0;
  (*(void (**)(_QWORD, uint64_t, id, void *))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v13, v6, v12);

}

void __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  void *v18;
  id v19;
  NSObject *v20;
  _QWORD v21[5];
  id v22;
  _QWORD block[5];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (v5 && !v6 && WeakRetained)
  {
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
      && (objc_msgSend(v5, "activeOperationalDataSet"),
          v9 = (void *)objc_claimAutoreleasedReturnValue(),
          v9,
          v9))
    {
      objc_msgSend(v5, "activeOperationalDataSet");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = (void *)MEMORY[0x242656984]();
      v12 = v8;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "hmf_hexadecimalRepresentation");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v14;
        v26 = 2112;
        v27 = v15;
        v16 = "%{public}@Retrieved Thread operational dataset (unpaired,activeOperationalDataSet): %@";
LABEL_12:
        _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, v16, buf, 0x16u);

      }
    }
    else
    {
      objc_msgSend(v8, "_convertFetchedCredentials:", v5);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "data");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v11 = (void *)MEMORY[0x242656984]();
      v19 = v8;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "hmf_hexadecimalRepresentation");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v14;
        v26 = 2112;
        v27 = v15;
        v16 = "%{public}@Retrieved Thread operational dataset (unpaired,HAPThreadNetworkMetadata): %@";
        goto LABEL_12;
      }
    }

    objc_autoreleasePoolPop(v11);
    objc_msgSend(v8, "clientQueue");
    v20 = objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_638;
    v21[3] = &unk_250F22458;
    v21[4] = v8;
    v22 = v10;
    v17 = v10;
    dispatch_async(v20, v21);

    goto LABEL_14;
  }
  objc_msgSend(WeakRetained, "_notifyDelegateOfPairingProgress:error:", 32, v6);
  if (v8)
  {
    objc_msgSend(v8, "clientQueue");
    v17 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_2;
    block[3] = &unk_250F23DF0;
    block[4] = v8;
    dispatch_async(v17, block);
LABEL_14:

  }
}

void __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_2_641(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  id v21;
  _QWORD block[5];
  id v23;
  _QWORD v24[5];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = WeakRetained;
  if (v7 && !v9 && WeakRetained)
  {
    objc_msgSend(WeakRetained, "_matterCredentialsFromTHCredentials:", v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "data");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (void *)MEMORY[0x242656984]();
    v15 = v11;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = v8;
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "hmf_hexadecimalRepresentation");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v17;
      v27 = 2112;
      v28 = v18;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Retrieved Thread operational dataset (staging): %@", buf, 0x16u);

      v8 = v21;
    }

    objc_autoreleasePoolPop(v14);
    objc_msgSend(v15, "clientQueue");
    v19 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_642;
    block[3] = &unk_250F22458;
    block[4] = v15;
    v23 = v13;
    v20 = v13;
    dispatch_async(v19, block);

    goto LABEL_9;
  }
  objc_msgSend(WeakRetained, "_notifyDelegateOfPairingProgress:error:", 32, v9);
  if (v11)
  {
    objc_msgSend(v11, "clientQueue");
    v20 = objc_claimAutoreleasedReturnValue();
    v24[0] = MEMORY[0x24BDAC760];
    v24[1] = 3221225472;
    v24[2] = __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_3;
    v24[3] = &unk_250F23DF0;
    v24[4] = v11;
    dispatch_async(v20, v24);
LABEL_9:

  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  void (**v4)(id, _QWORD, void *);

  objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDataset:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDatasetRetrieved:", 1);
  objc_msgSend(*(id *)(a1 + 32), "defaultThreadOperationalDatasetReceiveBlock");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "defaultThreadOperationalDatasetReceiveBlock");
    v4 = (void (**)(id, _QWORD, void *))objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDatasetReceiveBlock:", 0);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 30, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, 0, v3);

  }
}

void __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_642(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:", 31);
  objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDataset:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDatasetRetrieved:", 1);
  objc_msgSend(*(id *)(a1 + 32), "defaultThreadOperationalDatasetReceiveBlock");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "defaultThreadOperationalDatasetReceiveBlock");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDatasetReceiveBlock:", 0);
    (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, *(_QWORD *)(a1 + 40), 0);

  }
}

void __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void (**v4)(id, _QWORD, void *);

  objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDataset:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDatasetRetrieved:", 1);
  objc_msgSend(*(id *)(a1 + 32), "defaultThreadOperationalDatasetReceiveBlock");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "defaultThreadOperationalDatasetReceiveBlock");
    v4 = (void (**)(id, _QWORD, void *))objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDatasetReceiveBlock:", 0);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 30, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, 0, v3);

  }
}

void __49__HMMTRAccessoryServer__prepareThreadCredentials__block_invoke_638(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:", 31);
  objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDataset:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDatasetRetrieved:", 1);
  objc_msgSend(*(id *)(a1 + 32), "defaultThreadOperationalDatasetReceiveBlock");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "defaultThreadOperationalDatasetReceiveBlock");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setDefaultThreadOperationalDatasetReceiveBlock:", 0);
    (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, *(_QWORD *)(a1 + 40), 0);

  }
}

uint64_t __80__HMMTRAccessoryServer__removeSharedAdminControllerNodeIDFromACLWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __83__HMMTRAccessoryServer_updateAccessoryControlToRemoveAdministratorNode_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD v25[5];
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v11;
      v30 = 2112;
      v31 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to read ACL. Error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v12;
      v30 = 2112;
      v31 = v5;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Successfully read ACL as %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    +[HMMTRUtilities printAccessControlList:](HMMTRUtilities, "printAccessControlList:", v5);
    v13 = v5;
    objc_msgSend(*(id *)(a1 + 32), "removeNode:withPrivilge:fromExistingAclEntries:", *(_QWORD *)(a1 + 40), 5, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x242656984]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v18;
      v30 = 2112;
      v31 = v14;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@New ACL entries %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    if (!objc_msgSend(v14, "count"))
    {
      v19 = (void *)MEMORY[0x242656984]();
      v20 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v29 = v22;
        _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_INFO, "%{public}@Unexpected ACL remove operation", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    v25[0] = MEMORY[0x24BDAC760];
    v25[1] = 3221225472;
    v25[2] = __83__HMMTRAccessoryServer_updateAccessoryControlToRemoveAdministratorNode_completion___block_invoke_621;
    v25[3] = &unk_250F228C0;
    v25[4] = *(_QWORD *)(a1 + 32);
    v26 = v14;
    v23 = *(void **)(a1 + 48);
    v27 = *(id *)(a1 + 56);
    v24 = v14;
    objc_msgSend(v23, "writeAttributeACLWithValue:completion:", v24, v25);

  }
}

void __83__HMMTRAccessoryServer_updateAccessoryControlToRemoveAdministratorNode_completion___block_invoke_621(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to update ACL. Error: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v9;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully updated ACL to", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    +[HMMTRUtilities printAccessControlList:](HMMTRUtilities, "printAccessControlList:", *(_QWORD *)(a1 + 40));
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void __101__HMMTRAccessoryServer_updateAccessoryControlToIncludeAdministratorNodes_sharedUserNodes_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  _QWORD v21[5];
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v11;
      v26 = 2112;
      v27 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to read ACL. Error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v12;
      v26 = 2112;
      v27 = v5;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Successfully read ACL as %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    +[HMMTRUtilities printAccessControlList:](HMMTRUtilities, "printAccessControlList:", v5);
    v13 = v5;
    objc_msgSend(*(id *)(a1 + 32), "mergeExistingAclEntries:withAdminNodes:regularUserNodes:", v13, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x242656984]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v18;
      v26 = 2112;
      v27 = v14;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@New ACL entries %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __101__HMMTRAccessoryServer_updateAccessoryControlToIncludeAdministratorNodes_sharedUserNodes_completion___block_invoke_620;
    v21[3] = &unk_250F228C0;
    v21[4] = *(_QWORD *)(a1 + 32);
    v22 = v14;
    v19 = *(void **)(a1 + 56);
    v23 = *(id *)(a1 + 64);
    v20 = v14;
    objc_msgSend(v19, "writeAttributeACLWithValue:completion:", v20, v21);

  }
}

void __101__HMMTRAccessoryServer_updateAccessoryControlToIncludeAdministratorNodes_sharedUserNodes_completion___block_invoke_620(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to update ACL. Error: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v9;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully updated ACL to", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    +[HMMTRUtilities printAccessControlList:](HMMTRUtilities, "printAccessControlList:", *(_QWORD *)(a1 + 40));
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void __94__HMMTRAccessoryServer_updateAccessoryControlToAdministratorNodes_sharedUserNodes_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  id v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v17 = v8;
    v18 = 2112;
    v19 = v3;
    v9 = "%{public}@Failed to update ACL. Error: %@";
    v10 = v7;
    v11 = OS_LOG_TYPE_ERROR;
    v12 = 22;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v17 = v8;
    v9 = "%{public}@Successfully updated ACL";
    v10 = v7;
    v11 = OS_LOG_TYPE_INFO;
    v12 = 12;
  }
  _os_log_impl(&dword_23E95B000, v10, v11, v9, buf, v12);

LABEL_7:
  objc_autoreleasePoolPop(v4);
  if (HAPIsInternalBuild())
  {
    v13 = objc_alloc_init(MEMORY[0x24BDDB7F0]);
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __94__HMMTRAccessoryServer_updateAccessoryControlToAdministratorNodes_sharedUserNodes_completion___block_invoke_619;
    v15[3] = &unk_250F23198;
    v14 = *(void **)(a1 + 40);
    v15[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v14, "readAttributeACLWithParams:completion:", v13, v15);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void __94__HMMTRAccessoryServer_updateAccessoryControlToAdministratorNodes_sharedUserNodes_completion___block_invoke_619(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to read ACL. Error: %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v12;
      v15 = 2112;
      v16 = v5;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Successfully read ACL as %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    +[HMMTRUtilities printAccessControlList:](HMMTRUtilities, "printAccessControlList:", v5);
  }

}

void __99__HMMTRAccessoryServer__getCommissioneeHasActiveNetworkWithNetworkCommissioningCluster_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v10;
      v26 = 2112;
      v27 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to read networks attribute from commissionee: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  objc_msgSend(*(id *)(a1 + 32), "setCommissioneeNetworks:", v5);
  objc_msgSend(*(id *)(a1 + 32), "setCommissioneeHasActiveNetwork:", 0);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v11 = v5;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v20;
    v15 = MEMORY[0x24BDBD1C8];
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * v16), "connected", (_QWORD)v19);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "isEqual:", v15);

        if (v18)
          objc_msgSend(*(id *)(a1 + 32), "setCommissioneeHasActiveNetwork:", 1);
        ++v16;
      }
      while (v13 != v16);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v13);
  }

  (*(void (**)(_QWORD, uint64_t, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "commissioneeHasActiveNetwork"), v6);
}

void __97__HMMTRAccessoryServer__getCommissioneeNetworkCommissioningClusterEndpointWithDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "setCommissioneeNetworkCommissioningClusterEndpoint:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v8)
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v13;
      v21 = 2112;
      v22 = v8;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to collect required credentials for accessory. Error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v14 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stopDevicePairing:error:", objc_msgSend(v15, "unsignedLongLongValue"), 0);

    objc_msgSend(*(id *)(a1 + 32), "_pairingComplete:context:", v8, v9);
  }
  else
  {
    v16 = *(void **)(a1 + 32);
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke_605;
    v17[3] = &unk_250F23E18;
    v17[4] = v16;
    v18 = v7;
    objc_msgSend(v16, "_fetchAdditionalThreadNetworkInformationWithCompletion:", v17);

  }
}

void __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  id v19;
  uint64_t v20;
  unsigned __int16 v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  _QWORD v27[5];
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  char v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v10;
      v36 = 2112;
      v37 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to query endpoints for network commissioning cluster : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 3, v6);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "_pairingComplete:context:", v6, v11);
  }
  else
  {
    v11 = objc_alloc_init(MEMORY[0x24BDDB668]);
    objc_msgSend(*(id *)(a1 + 32), "browser");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "attestationStatus");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "populateDelegate:", v11);

    if (objc_msgSend(*(id *)(a1 + 32), "_populateCommissioningParameterCountryCode:", v11))
    {
      v14 = (void *)MEMORY[0x242656984]();
      v15 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v5)
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v35 = v18;
          v36 = 2112;
          v37 = v5;
          _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Found network commissioning cluster at endpoint: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v14);
        v19 = objc_alloc(MEMORY[0x24BDDB588]);
        v20 = *(_QWORD *)(a1 + 40);
        v21 = objc_msgSend(v5, "unsignedIntValue");
        objc_msgSend(*(id *)(a1 + 32), "clientQueue");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = (void *)objc_msgSend(v19, "initWithDevice:endpoint:queue:", v20, v21, v22);

        objc_initWeak((id *)buf, *(id *)(a1 + 32));
        v24 = *(void **)(a1 + 32);
        v27[0] = MEMORY[0x24BDAC760];
        v27[1] = 3221225472;
        v27[2] = __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke_609;
        v27[3] = &unk_250F23148;
        v27[4] = v24;
        v33 = *(_BYTE *)(a1 + 64);
        v25 = v23;
        v28 = v25;
        objc_copyWeak(&v32, (id *)buf);
        v31 = *(id *)(a1 + 56);
        v11 = v11;
        v29 = v11;
        v30 = *(id *)(a1 + 48);
        objc_msgSend(v24, "_getCommissioneeHasActiveNetworkWithNetworkCommissioningCluster:completion:", v25, v27);

        objc_destroyWeak(&v32);
        objc_destroyWeak((id *)buf);

      }
      else
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v35 = v26;
          _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_INFO, "%{public}@Network commissioning cluster not found. Proceeding with on-network commissioning", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v14);
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }
    }
  }

}

void __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke_609(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  _BYTE *v21;
  id v22;
  uint8_t v23[4];
  void *v24;
  _BYTE buf[24];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = (void *)MEMORY[0x242656984]();
  v7 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2112;
    v26 = v11;
    _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_INFO, "%{public}@Commissionee over BLE: %@, has active network: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v26) = 0;
  if (!v5 && a2 && !*(_BYTE *)(a1 + 80))
  {
    v12 = (void *)MEMORY[0x242656984]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v23 = 138543362;
      v24 = v15;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_INFO, "%{public}@Commissionee was already network commissioned. Skip network commissioning parameters.", v23, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    *(_BYTE *)(*(_QWORD *)&buf[8] + 24) = 1;
  }
  v16 = *(void **)(a1 + 40);
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke_610;
  v17[3] = &unk_250F23120;
  objc_copyWeak(&v22, (id *)(a1 + 72));
  v21 = buf;
  v20 = *(id *)(a1 + 64);
  v18 = *(id *)(a1 + 48);
  v19 = *(id *)(a1 + 56);
  objc_msgSend(v16, "readAttributeFeatureMapWithCompletionHandler:", v17);

  objc_destroyWeak(&v22);
  _Block_object_dispose(buf, 8);

}

void __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke_610(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  int v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  void *v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v8 = WeakRetained;
  if (!v6)
  {
    objc_msgSend(WeakRetained, "getSupportedLinkLayerTypesFromNetworkCommissioningClusterFeatureMap:", v5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setSupportedLinkLayerTypes:", v15);

    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    {
LABEL_7:
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      goto LABEL_36;
    }
    v18 = objc_msgSend(v5, "integerValue");
    if ((v18 & 1) == 0)
    {
      if ((v18 & 2) != 0)
      {
        objc_msgSend(v8, "setLinkLayerType:", 4);
        if ((isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled() & 1) != 0
          || !objc_msgSend(v8, "shouldPairWithoutResident"))
        {
          objc_msgSend(v8, "_populateThreadCredentials:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          goto LABEL_36;
        }
        objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 30);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 4, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      }
      else
      {
        if ((v18 & 4) != 0)
        {
          objc_msgSend(v8, "setLinkLayerType:", 2);
          goto LABEL_7;
        }
        v19 = (void *)MEMORY[0x242656984]();
        v20 = v8;
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v36 = v22;
          v37 = 2112;
          v38 = v5;
          _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_ERROR, "%{public}@Accessory NetworkCommissioning cluster feature map has unsupported value: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v19);
        objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 15);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 3, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "_pairingComplete:context:", v23, v24);
      }
      goto LABEL_27;
    }
    objc_msgSend(v8, "setLinkLayerType:", 1);
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      objc_msgSend(v8, "browser");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "currentFabricID");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "pairingTargetHomeUUID");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (v27)
      {
        objc_msgSend(v8, "storage");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "dataSource");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "pairingTargetHomeUUID");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "appleHomeFabricWithUUID:", v30);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:

        if (v23)
        {
          if ((isFeatureMatteriPhoneOnlyPairingControlForIPEnabled() & 1) == 0)
          {
            objc_msgSend(v23, "delegate");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v32 = objc_msgSend(v31, "requiresRemoteFabricDataUpdate");

            if ((v32 & 1) == 0)
            {
              objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 35);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 5, v24);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

LABEL_27:
LABEL_35:

              goto LABEL_36;
            }
          }
        }
LABEL_34:
        objc_msgSend(v8, "_populateWifiCredentials:scanResults:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
        goto LABEL_35;
      }
      if (v26 && (objc_msgSend(v26, "isEqual:", &unk_250F3FC00) & 1) == 0)
      {
        objc_msgSend(v8, "storage");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "dataSource");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "browser");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "currentFabricID");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "appleHomeFabricWithID:", v34);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_20;
      }

    }
    v23 = 0;
    goto LABEL_34;
  }
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v10 = (void *)MEMORY[0x242656984]();
  v11 = v8;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v14;
      v37 = 2112;
      v38 = v6;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to check supported network technologies for server, but commissionee was already network commissioned. Ignoring error and continuing with pairing. Error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    goto LABEL_7;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v36 = v16;
    v37 = 2112;
    v38 = v6;
    _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to check supported network technologies for server. Error: %@...", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 3, v6);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "_pairingComplete:context:", v6, v17);

LABEL_36:
}

uint64_t __51__HMMTRAccessoryServer__collectNetworkCredentials___block_invoke_605(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_commissionWithParams:", *(_QWORD *)(a1 + 40));
}

void __52__HMMTRAccessoryServer__setSupportedLinkLayerTypes___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "supportedLinkLayerTypes");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543874;
      v10 = v7;
      v11 = 2112;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to update supported link layer types in storage to %@ with error: %@", (uint8_t *)&v9, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __63__HMMTRAccessoryServer__handlePairingFailureWithError_context___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_256DFDB20))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    objc_msgSend(v4, "accessoryServer:didStopPairingWithError:matterPairingEndContext:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Unable to find delegate confirming to HAPAccessoryServerMTRDelegatePrivate", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __63__HMMTRAccessoryServer__handlePairingFailureWithError_context___block_invoke_603(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Thread StopAccessoryPairing completed, error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __63__HMMTRAccessoryServer__handlePairingFailureWithError_context___block_invoke_604(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(void **)(a1 + 32);
    objc_msgSend(v8, "eMACAddress");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138544130;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v9;
    v16 = 2112;
    v17 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Disconnect from WED accessory %@ with emac %@ completed, error %@", (uint8_t *)&v10, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);

}

void __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  id v22;
  _QWORD block[6];
  _QWORD v24[5];
  void *v25;
  _QWORD v26[5];
  void *v27;
  uint64_t v28;
  _QWORD v29[4];
  NSObject *v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v33 = v5;
    v34 = 2048;
    v35 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Category build job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  v8 = MEMORY[0x24BDAC760];
  v29[0] = MEMORY[0x24BDAC760];
  v29[1] = 3221225472;
  v29[2] = __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_598;
  v29[3] = &unk_250F23CD0;
  v31 = *(id *)(a1 + 40);
  v9 = v7;
  v30 = v9;
  v10 = (void *)MEMORY[0x242656B10](v29);
  objc_msgSend(*(id *)(a1 + 32), "deviceController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isRunning");
  v13 = *(void **)(a1 + 32);
  if ((v12 & 1) != 0)
  {
    objc_msgSend(v13, "nodeID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "unsignedLongLongValue");
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = v8;
    v24[1] = 3221225472;
    v24[2] = __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_599;
    v24[3] = &unk_250F22A78;
    v24[4] = *(_QWORD *)(a1 + 32);
    v25 = v10;
    v17 = v10;
    objc_msgSend(v11, "getBaseDevice:queue:completionHandler:", v15, v16, v24);

    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v8;
    block[1] = 3221225472;
    block[2] = __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_601;
    block[3] = &unk_250F226B0;
    v19 = *(_QWORD *)(a1 + 48);
    block[4] = *(_QWORD *)(a1 + 32);
    block[5] = v19;
    dispatch_group_notify(v9, v18, block);

    v20 = v25;
  }
  else
  {
    objc_msgSend(v13, "clientQueue");
    v21 = objc_claimAutoreleasedReturnValue();
    v26[0] = v8;
    v26[1] = 3221225472;
    v26[2] = __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_2;
    v26[3] = &unk_250F230D0;
    v26[4] = *(_QWORD *)(a1 + 32);
    v27 = v10;
    v28 = *(_QWORD *)(a1 + 48);
    v22 = v10;
    dispatch_async(v21, v26);

    v20 = v27;
  }

}

uint64_t __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_602(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_598(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 48);
    v9 = 138543618;
    v10 = v7;
    v11 = 2048;
    v12 = v8;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Category build job(%lu) complete.", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
}

void __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_599(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(void);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "descriptorClusterManager");
    v7 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    v7[2]();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(void **)(a1 + 32);
    objc_msgSend(v10, "clientQueue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_2_600;
    v19[3] = &unk_250F24178;
    v12 = *(void **)(a1 + 40);
    v19[4] = *(_QWORD *)(a1 + 32);
    v20 = v12;
    objc_msgSend(v8, "fetchHAPCategoryForCHIPDevice:nodeId:server:callbackQueue:completionHandler:", v5, v9, v10, v11, v19);

  }
  else
  {
    v13 = (void *)MEMORY[0x242656984]();
    v14 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v16;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_23E95B000, v15, OS_LOG_TYPE_ERROR, "%{public}@Could not retrieve hap category: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v17 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("HMMTRProtocolOperationErrorDomain"), 0, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v18);

  }
}

void __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_601(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Category build job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __73__HMMTRAccessoryServer__buildHAPCategoriesFromCHIPWithCompletionHandler___block_invoke_2_600(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "_setCategoryForPrimaryAccessory:", a2);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t v27[128];
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (!v3)
  {
    objc_msgSend(v4, "setServicesEnumerated:", 1);
    goto LABEL_5;
  }
  if ((objc_msgSend(v4, "servicesEnumerated") & 1) == 0)
LABEL_5:
    objc_msgSend(*(id *)(a1 + 32), "setServiceEnumerationFailed:", v3 != 0);
  v5 = (void *)MEMORY[0x242656984](objc_msgSend(*(id *)(a1 + 32), "setFullServiceEnumerationPendingCachePrimedEvent:", 0));
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v29 = v8;
    v30 = 2112;
    v31 = v3;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Completed rebuilding HAP services from MTRDevice cache with error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(*(id *)(a1 + 32), "serviceEnumerationFromDeviceCompletionHandlers");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "copy");

  objc_msgSend(*(id *)(a1 + 32), "serviceEnumerationFromDeviceCompletionHandlers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeAllObjects");

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v24;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v24 != v15)
          objc_enumerationMutation(v12);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v16++) + 16))();
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v14);
  }

  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_586;
  v19[3] = &unk_250F228C0;
  v17 = *(void **)(a1 + 40);
  v20 = *(id *)(a1 + 32);
  v21 = v3;
  v22 = v17;
  v18 = v3;
  objc_msgSend(v20, "updateAllCharacteristicValuesPostHAPServiceEnumeration:", v19);

}

void __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_587(uint64_t a1, void *a2, int a3, void *a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  HMMTRDeviceTopology *v48;
  void *v49;
  HMMTRDeviceTopology *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t k;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t m;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  id obj;
  id v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  id v88;
  void *v89;
  void *v90;
  uint64_t v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  void *v96;
  HMMTRDeviceTopology *v97;
  _QWORD v98[5];
  id v99;
  id v100;
  _QWORD v101[5];
  id v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _BYTE v123[128];
  _BYTE v124[128];
  void *v125;
  _BYTE v126[128];
  uint8_t v127[128];
  uint8_t buf[4];
  void *v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v81 = a4;
  v80 = a5;
  v88 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  v84 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  v9 = (void *)MEMORY[0x24BDBCEB8];
  objc_msgSend(v8, "accessoryInfoDictionary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "allKeys");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "arrayWithArray:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "sortUsingComparator:", &__block_literal_global_588);
  v94 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  obj = v12;
  v92 = v8;
  v86 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v119, v134, 16);
  if (v86)
  {
    v85 = *(_QWORD *)v120;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v120 != v85)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * v13);
        v15 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v14, "integerValue"));
        v16 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "partsListForEndpoint:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "nameForEndpoint:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v18;
        v91 = v13;
        if (v18 && !objc_msgSend(v18, "isEqual:", &stru_250F24B08)
          || (objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@,%@"), CFSTR("Matter Accessory"), v14),
              v20 = objc_claimAutoreleasedReturnValue(),
              v19,
              (v19 = (void *)v20) != 0))
        {
          objc_msgSend(v84, "setObject:forKey:", v19, v14);

        }
        v87 = v14;
        objc_msgSend(v8, "serviceDescriptionsForEndpoint:", v16);
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = (void *)MEMORY[0x242656984]();
        v23 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v129 = v25;
          v130 = 2112;
          v131 = v21;
          v132 = 2112;
          v133 = v16;
          _os_log_impl(&dword_23E95B000, v24, OS_LOG_TYPE_INFO, "%{public}@Retrieved service description @%@ at endpoint %@", buf, 0x20u);

        }
        v90 = (void *)v16;

        objc_autoreleasePoolPop(v22);
        if (v21)
          objc_msgSend(v15, "addObjectsFromArray:", v21);
        v89 = (void *)v21;
        v96 = v15;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v93 = v17;
        v26 = objc_msgSend(v93, "countByEnumeratingWithState:objects:count:", &v115, v127, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v116;
          do
          {
            for (i = 0; i != v27; ++i)
            {
              if (*(_QWORD *)v116 != v28)
                objc_enumerationMutation(v93);
              v30 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * i);
              objc_msgSend(v8, "serviceDescriptionsForEndpoint:", v30);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v32 = (void *)MEMORY[0x242656984]();
              v33 = a1;
              v34 = *(id *)(a1 + 32);
              HMFGetOSLogHandle();
              v35 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v129 = v36;
                v130 = 2112;
                v131 = (uint64_t)v31;
                v132 = 2112;
                v133 = (uint64_t)v30;
                _os_log_impl(&dword_23E95B000, v35, OS_LOG_TYPE_INFO, "%{public}@Retrieved service description @%@ at endpoint %@", buf, 0x20u);

                v8 = v92;
              }

              objc_autoreleasePoolPop(v32);
              if (v31)
              {
                objc_msgSend(v96, "addObjectsFromArray:", v31);
                objc_msgSend(v30, "stringValue");
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v94, "addObject:", v37);

              }
              a1 = v33;
            }
            v27 = objc_msgSend(v93, "countByEnumeratingWithState:objects:count:", &v115, v127, 16);
          }
          while (v27);
        }

        if (v96)
          objc_msgSend(v88, "setObject:forKey:", v96, v87);

        v13 = v91 + 1;
      }
      while (v91 + 1 != v86);
      v86 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v119, v134, 16);
    }
    while (v86);
  }

  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v38 = v94;
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v111, v126, 16);
  if (v39)
  {
    v40 = v39;
    v41 = *(_QWORD *)v112;
    do
    {
      for (j = 0; j != v40; ++j)
      {
        if (*(_QWORD *)v112 != v41)
          objc_enumerationMutation(v38);
        objc_msgSend(v88, "removeObjectForKey:", *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * j));
      }
      v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v111, v126, 16);
    }
    while (v40);
  }

  if (objc_msgSend(v88, "count") || a3)
  {
    v48 = [HMMTRDeviceTopology alloc];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = -[HMMTRDeviceTopology initWithNodeId:server:](v48, "initWithNodeId:server:", v49, *(_QWORD *)(a1 + 32));

    v51 = *(void **)(a1 + 32);
    if (a3)
    {
      objc_msgSend(v51, "hapEnumerator");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v125 = v53;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v125, 1);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "enumerateBridgedAccessoriesFromAccessories:serviceDescriptionsDictionary:namesDictionary:topology:server:legacyInstanceIDAssignment:", v54, v88, v84, v50, *(_QWORD *)(a1 + 32), 0);
      v55 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 32), "setAccessories:", v55);
      objc_msgSend(*(id *)(a1 + 32), "_distinctEndpointsHavingHapServicesForTopology:", v50);
      v56 = (id)objc_claimAutoreleasedReturnValue();
      v107 = 0u;
      v108 = 0u;
      v109 = 0u;
      v110 = 0u;
      v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v107, v124, 16);
      if (v57)
      {
        v58 = v57;
        v59 = *(_QWORD *)v108;
        v60 = &unk_250F3FDE0;
        v8 = v92;
        do
        {
          for (k = 0; k != v58; ++k)
          {
            if (*(_QWORD *)v108 != v59)
              objc_enumerationMutation(v56);
            objc_msgSend(*(id *)(a1 + 32), "_updateDefaultEntriesForBridgedClusterIDCharacteristicMap:", *(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * k));
          }
          v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v107, v124, 16);
        }
        while (v58);
      }
      else
      {
        v60 = &unk_250F3FDE0;
        v8 = v92;
      }
    }
    else
    {
      objc_msgSend(v51, "_initAccessoriesForServer");
      objc_msgSend(*(id *)(a1 + 32), "hapEnumerator");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "services");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "nodeID");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "enumerateServicesFromServices:serviceDescriptionsDictionary:topology:nodeID:primaryAccessory:legacyInstanceIDAssignment:", v64, v88, v50, v65, v66, 0);
      v55 = (void *)objc_claimAutoreleasedReturnValue();

      if (v55)
      {
        objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "setServices:", v55);

      }
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v56 = obj;
      v68 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v103, v123, 16);
      v8 = v92;
      if (v68)
      {
        v69 = v68;
        v95 = v55;
        v97 = v50;
        v70 = a1;
        v71 = 0;
        v72 = *(_QWORD *)v104;
        while (2)
        {
          for (m = 0; m != v69; ++m)
          {
            if (*(_QWORD *)v104 != v72)
              objc_enumerationMutation(v56);
            v74 = *(void **)(v70 + 32);
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*(id *)(*((_QWORD *)&v103 + 1) + 8 * m), "integerValue"));
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v74, "_categoryFromAccessoryInfo:endpoint:", v92, v75);
            v76 = (void *)objc_claimAutoreleasedReturnValue();

            if (v76)
            {
              v60 = v76;

              if ((objc_msgSend(v60, "isEqual:", &unk_250F3FC48) & 1) == 0)
              {

                v8 = v92;
                goto LABEL_62;
              }
              v71 = v60;
            }
            v8 = v92;

          }
          v69 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v103, v123, 16);
          if (v69)
            continue;
          break;
        }
        v60 = v71;
LABEL_62:
        a1 = v70;
        v55 = v95;
        v50 = v97;
      }
      else
      {
        v60 = 0;
      }
    }

    objc_msgSend(*(id *)(a1 + 32), "_setCategoryForPrimaryAccessory:", v60);
    v77 = *(void **)(a1 + 32);
    objc_msgSend(v77, "matterDevice");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v101[0] = MEMORY[0x24BDAC760];
    v101[1] = 3221225472;
    v101[2] = __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_593;
    v101[3] = &unk_250F23CD0;
    v79 = *(void **)(a1 + 40);
    v101[4] = *(_QWORD *)(a1 + 32);
    v102 = v79;
    objc_msgSend(v77, "_createFirmwareUpdateServiceWithInstanceID:device:completionHandler:", 10, v78, v101);

    v46 = v80;
    v47 = v81;
  }
  else
  {
    v43 = *(void **)(a1 + 32);
    objc_msgSend(v43, "matterDevice");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v98[0] = MEMORY[0x24BDAC760];
    v98[1] = 3221225472;
    v98[2] = __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_594;
    v98[3] = &unk_250F228C0;
    v45 = *(void **)(a1 + 40);
    v98[4] = *(_QWORD *)(a1 + 32);
    v100 = v45;
    v46 = v80;
    v99 = v80;
    objc_msgSend(v43, "_createFirmwareUpdateServiceWithInstanceID:device:completionHandler:", 10, v44, v98);

    v47 = v81;
  }
  objc_msgSend(*(id *)(a1 + 32), "setServiceEnumerationInProgress:", 0);

}

void __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_596(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Queued accessory operation for MTRDevice caching for deferred full service enumeration is executed", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
}

void __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_597(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Accessory operation for MTRDevice caching for deferred full service enumeration completes with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_593(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Firmware update service not created: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_594(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Firmware update service not created: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v4 = (void *)MEMORY[0x24BDD16E0];
  v5 = a3;
  objc_msgSend(v4, "numberWithInteger:", objc_msgSend(a2, "integerValue"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x24BDD16E0];
  v8 = objc_msgSend(v5, "integerValue");

  objc_msgSend(v7, "numberWithInteger:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v6, "compare:", v9);

  return v10;
}

void __73__HMMTRAccessoryServer__rebuildHAPServicesFromCHIPWithCompletionHandler___block_invoke_586(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Characteristic values updated, error: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, _QWORD))(v8 + 16))(v8, *(_QWORD *)(a1 + 40));

}

void __79__HMMTRAccessoryServer_updateAllCharacteristicValuesPostHAPServiceEnumeration___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "error");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      v15 = (void *)MEMORY[0x242656984]();
      v16 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "type");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "value");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543874;
        v22 = v18;
        v23 = 2112;
        v24 = v19;
        v25 = 2112;
        v26 = v20;
        _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Updated value for characteristic type: %@, value: %@", (uint8_t *)&v21, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(v4, "value");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "setValue:", v14);
      goto LABEL_11;
    }
  }
  v6 = (void *)MEMORY[0x242656984]();
  v7 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "type");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v9;
    v23 = 2112;
    v24 = v10;
    _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Value update failed for characteristic type: %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (v4)
  {
    objc_msgSend(v4, "error");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      objc_msgSend(v4, "error");
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;
LABEL_11:

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

uint64_t __79__HMMTRAccessoryServer_updateAllCharacteristicValuesPostHAPServiceEnumeration___block_invoke_585(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void __45__HMMTRAccessoryServer_enumerateHAPServices___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "fullServiceEnumerationPendingCachePrimedEvent");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "serviceEnumerationFromDeviceCompletionHandlers");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v4 = (void *)MEMORY[0x242656B10](*(_QWORD *)(a1 + 40));
    objc_msgSend(v5, "addObject:", v4);

  }
  else
  {
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __45__HMMTRAccessoryServer_enumerateHAPServices___block_invoke_2;
    v6[3] = &unk_250F23CD0;
    v6[4] = v3;
    v7 = *(id *)(a1 + 40);
    objc_msgSend(v3, "_rebuildHAPServicesFromCHIPWithCompletionHandler:", v6);

  }
}

void __45__HMMTRAccessoryServer_enumerateHAPServices___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v8;
      v17 = 2112;
      v18 = v3;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to rebuild HAP services of CHIP Accessory with error %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v9;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Triggering a discovery for Accessory server after enumerating...", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v10 = (void *)MEMORY[0x242656984]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "clusterIDCharacteristicMap");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v13;
      v17 = 2112;
      v18 = v14;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_INFO, "%{public}@clusterIDCharacteristicMap : %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 32), "discoverAccessories");
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t __71__HMMTRAccessoryServer__distinctEndpointsHavingHapServicesForTopology___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v4 = (void *)MEMORY[0x24BDD16E0];
  v5 = a3;
  objc_msgSend(v4, "numberWithInteger:", objc_msgSend(a2, "integerValue"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x24BDD16E0];
  v8 = objc_msgSend(v5, "integerValue");

  objc_msgSend(v7, "numberWithInteger:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v6, "compare:", v9);

  return v10;
}

void __92__HMMTRAccessoryServer__createFirmwareUpdateServiceWithInstanceID_device_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  id v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else if (v5)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138543874;
      v64 = v10;
      v65 = 2048;
      v66 = v11;
      v67 = 2112;
      v68 = v5;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Create firmware update service using instanceID: %lu for endpoint: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BE1BB20], "getSharedInstance");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "getDefaultCharacteristicMetadata:", CFSTR("00000234-0000-1000-8000-0026BB765291"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "getDefaultCharacteristicProperties:", CFSTR("00000234-0000-1000-8000-0026BB765291"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "integerValue");

    v53 = *(_QWORD *)(a1 + 56);
    v57 = objc_alloc_init(MEMORY[0x24BE1BAE0]);
    v62 = 0;
    objc_msgSend(v57, "serializeWithError:", &v62);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = v5;
    v16 = v62;
    v17 = objc_alloc(MEMORY[0x24BE1BA00]);
    v18 = (void *)MEMORY[0x24BDD16E0];
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    objc_msgSend(v18, "numberWithInteger:");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = (void *)objc_msgSend(v17, "initWithType:instanceID:value:stateNumber:properties:eventNotificationsEnabled:metadata:", CFSTR("00000234-0000-1000-8000-0026BB765291"), v19, v55, 0, v15, 1, v13);

    v58 = v12;
    objc_msgSend(v12, "getDefaultCharacteristicMetadata:", CFSTR("00000235-0000-1000-8000-0026BB765291"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "getDefaultCharacteristicProperties:", CFSTR("00000235-0000-1000-8000-0026BB765291"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "integerValue");

    v54 = objc_alloc_init(MEMORY[0x24BE1BAE8]);
    v61 = v16;
    objc_msgSend(v54, "serializeWithError:", &v61);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v61;

    v24 = objc_alloc(MEMORY[0x24BE1BA00]);
    v25 = (void *)MEMORY[0x24BDD16E0];
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    objc_msgSend(v25, "numberWithInteger:");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)objc_msgSend(v24, "initWithType:instanceID:value:stateNumber:properties:eventNotificationsEnabled:metadata:", CFSTR("00000235-0000-1000-8000-0026BB765291"), v26, v52, 0, v22, 1, v20);

    objc_msgSend(v58, "getDefaultCharacteristicMetadata:", CFSTR("0000026E-0000-1000-8000-0026BB765291"));
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v58, "getDefaultCharacteristicProperties:", CFSTR("0000026E-0000-1000-8000-0026BB765291"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "integerValue");

    v51 = objc_alloc_init(MEMORY[0x24BE1BB18]);
    v60 = v23;
    objc_msgSend(v51, "serializeWithError:", &v60);
    v30 = objc_claimAutoreleasedReturnValue();
    v49 = v60;

    v31 = objc_alloc(MEMORY[0x24BE1BA00]);
    v32 = (void *)MEMORY[0x24BDD16E0];
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    objc_msgSend(v32, "numberWithInteger:");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)v30;
    v35 = (void *)objc_msgSend(v31, "initWithType:instanceID:value:stateNumber:properties:eventNotificationsEnabled:metadata:", CFSTR("0000026E-0000-1000-8000-0026BB765291"), v33, v30, 0, v29, 1, v50);

    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", v59, v27, v35, 0);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "getDefaultServiceProperties:", CFSTR("00000236-0000-1000-8000-0026BB765291"));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend(v37, "integerValue");

    v39 = objc_alloc(MEMORY[0x24BE1BBD0]);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v53);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = (void *)objc_msgSend(v39, "initWithType:instanceID:parsedCharacteristics:serviceProperties:linkedServices:", CFSTR("00000236-0000-1000-8000-0026BB765291"), v40, v36, v38, 0);

    objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "setAccessory:", v42);

    objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "services");
    v44 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithObject:", v41);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "addObjectsFromArray:", v44);
    objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setServices:", v45);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v5 = v56;

  }
  else
  {
    v47 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v47 + 16))(v47, v48);

  }
}

uint64_t __103__HMMTRAccessoryServer__endpointForOTARequestorWithTopology_mtrDevice_callbackQueue_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __44__HMMTRAccessoryServer_disconnectWithError___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_disconnectWithError:", *(_QWORD *)(a1 + 40));
}

void __37__HMMTRAccessoryServer_finishPairing__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Finishing pairing now", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "_persistAccessoryServerData");
  objc_msgSend(*(id *)(a1 + 32), "_disconnectWithError:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_finishMaximumDurationCollection");
  if (objc_msgSend(*(id *)(a1 + 32), "shouldPairWithoutResident"))
  {
    objc_msgSend(*(id *)(a1 + 32), "storage");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fabricDataSource");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "storageDataSourceForDeviceWithNodeID:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "vendorID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "productID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __37__HMMTRAccessoryServer_finishPairing__block_invoke_572;
    v13[3] = &unk_250F223C0;
    v13[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v9, "updateVendorID:productID:completion:", v10, v11, v13);

  }
  objc_msgSend(*(id *)(a1 + 32), "setDelayDiscovery:", 0);
  objc_msgSend(*(id *)(a1 + 32), "browser");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "didFinishPairingAccessoryServer:operationDisabled:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "operationDisabled"));

}

void __37__HMMTRAccessoryServer_finishPairing__block_invoke_572(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "vendorID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "productID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138544386;
      v11 = v7;
      v12 = 2080;
      v13 = "-[HMMTRAccessoryServer finishPairing]_block_invoke";
      v14 = 2112;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      v18 = 2112;
      v19 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@%s: Failed to update vendorID to %@ and productID to %@ with error: %@", (uint8_t *)&v10, 0x34u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __46__HMMTRAccessoryServer__reportPairingComplete__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_256DFDB20))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    objc_msgSend(v4, "accessoryServer:didStopPairingWithError:matterPairingEndContext:", *(_QWORD *)(a1 + 32), 0, 0);
  }
  else
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Unable to find delegate confirming to HMMTRHAPAccessoryServerPairingDelegate", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }

}

uint64_t __40__HMMTRAccessoryServer__finalizePairing__block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setStorageUpdatePending:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setPairedState:", 3);
  return objc_msgSend(*(id *)(a1 + 32), "setSecuritySessionOpen:", 1);
}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch serial number of CHIP Accessory with error %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_465(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  dispatch_time_t v24;
  NSObject *v25;
  id v26;
  void *v27;
  _QWORD v28[5];
  id v29;
  _BYTE *v30;
  _QWORD v31[5];
  id v32;
  _BYTE *v33;
  __int128 v34;
  _QWORD v35[5];
  id v36;
  _QWORD v37[5];
  id v38;
  _BYTE buf[24];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to update Access control List on device %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    if (objc_msgSend(v3, "hmmtr_isMatterError"))
      +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 9, v3);
    else
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 9, v3);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  v11 = *(void **)(a1 + 32);
  v12 = MEMORY[0x24BDAC760];
  v37[0] = MEMORY[0x24BDAC760];
  v37[1] = 3221225472;
  v37[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_466;
  v37[3] = &unk_250F22EE0;
  v37[4] = v11;
  v38 = *(id *)(a1 + 40);
  objc_msgSend(v11, "_fetchCurrentPairingWithCompletionHandler:", v37);
  v13 = objc_msgSend(*(id *)(a1 + 32), "knownToSystemCommissioner");
  v14 = *(void **)(a1 + 32);
  if (v13)
  {
    objc_msgSend(v14, "category");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15 == 0;

    if (v16)
    {
      objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingStep:", 11);
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
      v27 = *(void **)(a1 + 32);
      v35[0] = v12;
      v35[1] = 3221225472;
      v35[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_467;
      v35[3] = &unk_250F23E18;
      v35[4] = v27;
      v36 = *(id *)(a1 + 40);
      objc_msgSend(v27, "_buildHAPCategoriesFromCHIPWithCompletionHandler:", v35);

    }
    else
    {
      v17 = (void *)MEMORY[0x242656984]();
      v18 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "category");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v21;
        _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_INFO, "%{public}@Inherited accessory category: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
    }
  }
  else
  {
    objc_msgSend(v14, "_notifyDelegateOfPairingStep:", 12);
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v40 = 0;
    v31[0] = v12;
    v31[1] = 3221225472;
    v31[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_468;
    v31[3] = &unk_250F22F30;
    v22 = *(_QWORD *)(a1 + 32);
    v33 = buf;
    v31[4] = v22;
    v32 = *(id *)(a1 + 40);
    v34 = *(_OWORD *)(a1 + 48);
    v23 = (void *)MEMORY[0x242656B10](v31);
    objc_msgSend(*(id *)(a1 + 32), "_rebuildHAPServicesFromCHIPWithCompletionHandler:", v23);
    v24 = dispatch_time(0, 180000000000);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v25 = objc_claimAutoreleasedReturnValue();
    v28[0] = v12;
    v28[1] = 3221225472;
    v28[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_471;
    v28[3] = &unk_250F22F58;
    v29 = v23;
    v30 = buf;
    v28[4] = *(_QWORD *)(a1 + 32);
    v26 = v23;
    dispatch_after(v24, v25, v28);

    _Block_object_dispose(buf, 8);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_472(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[5];
  id v20;
  id v21;
  _QWORD block[5];
  id v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "setBlockInvalidation:", 0);
  if (objc_msgSend(*(id *)(a1 + 32), "pairingProgress") && objc_msgSend(*(id *)(a1 + 32), "pairingProgress") != 3)
  {
    v6 = *(void **)(a1 + 32);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 11);
      v18 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "_handlePairingFailureWithError:context:");

      return;
    }
    v7 = objc_msgSend(*(id *)(a1 + 32), "knownToSystemCommissioner");
    v8 = *(void **)(a1 + 32);
    if (v7)
    {
      objc_msgSend(v8, "clientQueue");
      v9 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_473;
      block[3] = &unk_250F22768;
      v10 = *(id *)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v23 = v10;
      dispatch_async(v9, block);

      return;
    }
    objc_msgSend(v8, "browser");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "isSystemCommissionerFeatureEnabled"))
    {
      objc_msgSend(*(id *)(a1 + 32), "browser");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "isCurrentDevicePrimaryResident");

      if ((v13 & 1) != 0)
      {
        v14 = 0;
LABEL_16:
        objc_msgSend(*(id *)(a1 + 32), "clientQueue");
        v15 = objc_claimAutoreleasedReturnValue();
        v19[0] = MEMORY[0x24BDAC760];
        v19[1] = 3221225472;
        v19[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_2_474;
        v19[3] = &unk_250F240D8;
        v16 = *(id *)(a1 + 40);
        v20 = v14;
        v21 = v16;
        v19[4] = *(_QWORD *)(a1 + 32);
        v17 = v14;
        dispatch_async(v15, v19);

        return;
      }
      objc_msgSend(*(id *)(a1 + 32), "browser");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "systemCommissionerFabricRootPublicKey");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v14 = 0;
    }

    goto LABEL_16;
  }
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Pairing already failed or stopped when accessory information collection completed", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_473(uint64_t a1)
{
  void *v2;
  id v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_msgSend(*(id *)(a1 + 32), "setPairingProgress:", 4);
  objc_msgSend(*(id *)(a1 + 32), "_finishMaximumDurationCollection");
  objc_msgSend(*(id *)(a1 + 32), "_persistAccessoryServerData");
  objc_msgSend(*(id *)(a1 + 32), "stageCompletion");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "stageCompletion");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, uint64_t, _QWORD, _QWORD))v3 + 2))(v3, 1, *(_QWORD *)(a1 + 32), 0);

  }
}

uint64_t __40__HMMTRAccessoryServer__finalizePairing__block_invoke_2_474(uint64_t a1)
{
  void *v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  if ((objc_msgSend(*(id *)(a1 + 32), "isKnownToSystemCommissioner") & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "_reportPairingComplete");
  v3 = *(void **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    return objc_msgSend(v3, "_pairOnSystemCommissionerFabricUnlessAlreadyPairedWithRootPublicKey:");
  else
    return objc_msgSend(v3, "_pairOnSystemCommissionerFabric");
}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_466(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  HMMTRPairing *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMMTRPairing *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7 && !v8 && objc_msgSend(v7, "count"))
  {
    v28 = v9;
    objc_msgSend(v7, "firstObject");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = [HMMTRPairing alloc];
    objc_msgSend(v10, "nodeID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "fabricID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "fabricLabel");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "rootPublicKey");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "vendorID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "vendorName");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[HMMTRPairing initWithNodeID:fabricID:fabricLabel:rootPublicKey:vendorID:vendorName:](v11, "initWithNodeID:fabricID:fabricLabel:rootPublicKey:vendorID:vendorName:", v12, v13, v14, v15, v16, v17);
    objc_msgSend(*(id *)(a1 + 32), "setCurrentPairingInfo:", v18);

    v19 = (void *)MEMORY[0x242656984]();
    v20 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "currentPairingInfo");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v22;
      v31 = 2112;
      v32 = v23;
      _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_INFO, "%{public}@Obtained current pairing info %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

    v9 = v28;
    v8 = 0;
  }
  else
  {
    v24 = (void *)MEMORY[0x242656984]();
    v25 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v27;
      v31 = 2112;
      v32 = v8;
      _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch current pairing information %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_467(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to build HAP categories of CHIP accessory with error %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 32), "_setCategoryForPrimaryAccessory:", &unk_250F3FC48);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_468(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, void *, void *);
  void *v27;
  id v28;
  id v29;
  _QWORD v30[4];
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (*(_BYTE *)(v4 + 24))
    goto LABEL_13;
  *(_BYTE *)(v4 + 24) = 1;
  objc_msgSend(*(id *)(a1 + 32), "browser");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCurrentDevicePrimaryResident");
  v7 = MEMORY[0x24BDAC760];
  if (v6)
  {

LABEL_5:
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v30[0] = v7;
    v30[1] = 3221225472;
    v30[2] = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_2_469;
    v30[3] = &unk_250F22F08;
    v10 = *(void **)(a1 + 40);
    v31 = *(id *)(a1 + 32);
    v32 = v10;
    objc_msgSend(v31, "fetchSoftwareVersion:completionHandler:", 1, v30);

    goto LABEL_6;
  }
  objc_msgSend(*(id *)(a1 + 32), "browser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isCurrentDeviceAllowedAccessoryControlDespiteReachableResident");

  if (v9)
    goto LABEL_5;
LABEL_6:
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  v24 = v7;
  v25 = 3221225472;
  v26 = __40__HMMTRAccessoryServer__finalizePairing__block_invoke_470;
  v27 = &unk_250F22F08;
  v11 = *(void **)(a1 + 40);
  v28 = *(id *)(a1 + 32);
  v29 = v11;
  objc_msgSend(v28, "fetchSoftwareVersion:completionHandler:", 0, &v24);

  if (v3)
  {
    v17 = (void *)MEMORY[0x242656984](v12, v13, v14, v15, v16);
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v20;
      v35 = 2112;
      v36 = v3;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to rebuild HAP services of CHIP Accessory with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 12, v3, v24, v25, v26, v27, v28);
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v23 = *(void **)(v22 + 40);
    *(_QWORD *)(v22 + 40) = v21;

  }
  else if (objc_msgSend(*(id *)(a1 + 32), "pairedState", v24, v25, v26, v27, v28) == 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPairedState:", 3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
LABEL_13:

}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_471(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v5;
      _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_ERROR, "%{public}@Enumerating HAPServices timed out", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
  }
  v6 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_2_469(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch software version number of CHIP Accessory with error %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else if (objc_msgSend(*(id *)(a1 + 32), "pairingProgress") && objc_msgSend(*(id *)(a1 + 32), "pairingProgress") != 3)
  {
    v11 = v5;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v12 = v11;
    else
      v12 = 0;
    v13 = v12;

    if (v13)
      objc_msgSend(*(id *)(a1 + 32), "updateSoftwareVersion:", v13);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __40__HMMTRAccessoryServer__finalizePairing__block_invoke_470(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v10;
      v15 = 2112;
      v16 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch software version string of CHIP Accessory with error %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v5;
    else
      v11 = 0;
    v12 = v11;
    objc_msgSend(*(id *)(a1 + 32), "setSoftwareVersionString:", v12);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

id __52__HMMTRAccessoryServer_populateACLEntriesForPairing__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543874;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    v14 = 2048;
    v15 = objc_msgSend(v3, "integerValue");
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@ACL: adding admin CAT %@ (0x%lX) from NOC", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", objc_msgSend(v3, "integerValue") | 0xFFFFFFFD00000000);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id __52__HMMTRAccessoryServer_populateACLEntriesForPairing__block_invoke_463(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543874;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    v14 = 2048;
    v15 = objc_msgSend(v3, "integerValue");
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@ACL: adding operate CAT %@ (0x%lX) from NOC", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", objc_msgSend(v3, "integerValue") | 0xFFFFFFFD00000000);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void __63__HMMTRAccessoryServer__notifyDelegateOfPairingProgress_error___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accessoryServer:updatePairingProgress:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void __47__HMMTRAccessoryServer_identifyWithCompletion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 3);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void __84__HMMTRAccessoryServer_enableEvents_forCharacteristics_withCompletionHandler_queue___block_invoke(uint64_t a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD);
  id v2;

  v1 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x242656B10](*(_QWORD *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    v1[2](v1, 0, 0);
    v1 = (void (**)(_QWORD, _QWORD, _QWORD))v2;
  }

}

void __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_398(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)MEMORY[0x242656984]();
  v4 = WeakRetained;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 138543618;
    v22 = v6;
    v23 = 2048;
    v24 = v7;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Write characteristics job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  objc_msgSend(v4, "clientQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_399;
  block[3] = &unk_250F22E68;
  block[4] = v4;
  v20 = *(_QWORD *)(a1 + 72);
  v19 = *(id *)(a1 + 48);
  v16 = v8;
  v17 = *(id *)(a1 + 32);
  v18 = *(id *)(a1 + 40);
  v11 = v8;
  dispatch_async(v9, block);

  objc_msgSend(v4, "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  v14[1] = 3221225472;
  v14[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_4;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 64);
  v14[4] = v4;
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

uint64_t __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_403(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_399(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  dispatch_time_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  _QWORD block[4];
  id v26;
  _QWORD v27[5];
  id v28;
  id v29;
  id v30;
  _QWORD v31[5];
  id v32;
  id v33;
  id v34;
  _BYTE *v35;
  _QWORD v36[4];
  id v37;
  _BYTE buf[24];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a1 + 72));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Request to send write requests with time out %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "deviceController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v39 = 0;
    v8 = MEMORY[0x24BDAC760];
    v31[0] = MEMORY[0x24BDAC760];
    v31[1] = 3221225472;
    v31[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_2;
    v31[3] = &unk_250F22E40;
    v9 = *(_QWORD *)(a1 + 32);
    v35 = buf;
    v31[4] = v9;
    v32 = *(id *)(a1 + 48);
    v34 = *(id *)(a1 + 64);
    v33 = *(id *)(a1 + 40);
    v10 = (void *)MEMORY[0x242656B10](v31);
    objc_msgSend(*(id *)(a1 + 32), "_populateHandlingForCharacteristics:", *(_QWORD *)(a1 + 56));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "unsignedLongLongValue");
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = v8;
    v27[1] = 3221225472;
    v27[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_2_402;
    v27[3] = &unk_250F22C30;
    v27[4] = *(_QWORD *)(a1 + 32);
    v15 = v11;
    v28 = v15;
    v29 = *(id *)(a1 + 48);
    v16 = v10;
    v30 = v16;
    objc_msgSend(v7, "getBaseDevice:queue:completionHandler:", v13, v14, v27);

    v17 = dispatch_time(0, 60000000000);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v8;
    block[1] = 3221225472;
    block[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_3;
    block[3] = &unk_250F22988;
    v26 = v16;
    v19 = v16;
    dispatch_after(v17, v18, block);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    v20 = (void *)MEMORY[0x242656984]();
    v21 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to write characteristics", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v24 = objc_claimAutoreleasedReturnValue();
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 3221225472;
    v36[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_400;
    v36[3] = &unk_250F22988;
    v37 = *(id *)(a1 + 64);
    dispatch_async(v24, v36);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_4(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Write characteristics job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_400(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id obj;
  _QWORD block[4];
  id v37;
  id v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (!*(_BYTE *)(v7 + 24))
  {
    *(_BYTE *)(v7 + 24) = 1;
    v8 = (void *)MEMORY[0x242656984]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v45 = v11;
      v46 = 2112;
      v47 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Write completion error: %@", buf, 0x16u);

    }
    v31 = v6;

    objc_autoreleasePoolPop(v8);
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v32 = v5;
    obj = v5;
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v52, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v41;
      v33 = a1;
      v34 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v41 != v14)
            objc_enumerationMutation(obj);
          v16 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
          v17 = (void *)MEMORY[0x242656984]();
          v18 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "characteristic");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "instanceID");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "value");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "error");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v45 = v20;
            v46 = 2112;
            v47 = v22;
            v48 = 2112;
            v49 = v23;
            v50 = 2112;
            v51 = v24;
            _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_INFO, "%{public}@Write completion contains tuple for characteristic %@ with value:%@ Error: %@", buf, 0x2Au);

            a1 = v33;
            v14 = v34;
          }

          objc_autoreleasePoolPop(v17);
        }
        v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v52, 16);
      }
      while (v13);
    }

    v25 = *(NSObject **)(a1 + 40);
    v6 = v31;
    if (v25)
    {
      v26 = *(void **)(a1 + 56);
      if (v26)
      {
        if (v31)
        {
          v27 = (void *)MEMORY[0x24BDD1540];
          objc_msgSend(v31, "domain");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "errorWithDomain:code:userInfo:", v28, objc_msgSend(v31, "code"), 0);
          v29 = (void *)objc_claimAutoreleasedReturnValue();

          v25 = *(NSObject **)(a1 + 40);
          v26 = *(void **)(a1 + 56);
        }
        else
        {
          v29 = 0;
        }
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 3221225472;
        block[2] = __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_401;
        block[3] = &unk_250F240D8;
        v39 = v26;
        v37 = obj;
        v38 = v29;
        v30 = v29;
        dispatch_async(v25, block);

      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    v5 = v32;
  }

}

void __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_2_402(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = (void *)a1[4];
  if (v5)
  {
    objc_msgSend(v6, "matterDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      (*(void (**)(void))(a1[7] + 16))();
      goto LABEL_7;
    }
    v6 = (void *)a1[4];
    v8 = a1[5];
    v9 = a1[6];
    v10 = a1[7];
    v11 = 0;
  }
  else
  {
    v8 = a1[5];
    v9 = a1[6];
    v10 = a1[7];
    v11 = v12;
  }
  objc_msgSend(v6, "_writeCharacteristicValues:device:responseTuples:completionQueue:completionHandler:", v8, v11, 0, v9, v10);
LABEL_7:

}

void __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("HMMTRProtocolOperationErrorDomain"), 3, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

uint64_t __92__HMMTRAccessoryServer_writeCharacteristicValues_timeout_completionQueue_completionHandler___block_invoke_401(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void __107__HMMTRAccessoryServer__writeCharacteristicValues_device_responseTuples_completionQueue_completionHandler___block_invoke(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[5];
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _QWORD block[5];
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;

  if (a2)
  {
    v3 = (void *)MEMORY[0x24BE1BA20];
    objc_msgSend(*(id *)(a1 + 32), "primary");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "characteristic");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], -70402, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "responseTupleForCharacteristic:error:", v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);
    objc_msgSend(*(id *)(a1 + 48), "clientQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __107__HMMTRAccessoryServer__writeCharacteristicValues_device_responseTuples_completionQueue_completionHandler___block_invoke_2;
    block[3] = &unk_250F23FD0;
    v9 = *(void **)(a1 + 56);
    block[4] = *(_QWORD *)(a1 + 48);
    v28 = v9;
    v29 = *(id *)(a1 + 64);
    v30 = *(id *)(a1 + 40);
    v31 = *(id *)(a1 + 72);
    v32 = *(id *)(a1 + 96);
    dispatch_async(v8, block);

  }
  else
  {
    v10 = *(void **)(a1 + 80);
    v11 = *(_QWORD *)(a1 + 88);
    v12 = *(void **)(a1 + 48);
    objc_msgSend(v12, "clientQueue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "reportDistributor");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = MEMORY[0x24BDAC760];
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __107__HMMTRAccessoryServer__writeCharacteristicValues_device_responseTuples_completionQueue_completionHandler___block_invoke_3;
    v20[3] = &unk_250F22DC8;
    v16 = *(id *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(void **)(a1 + 56);
    v21 = v16;
    v22 = v17;
    v23 = v18;
    v24 = *(id *)(a1 + 64);
    v25 = *(id *)(a1 + 72);
    v26 = *(id *)(a1 + 96);
    v19[0] = v15;
    v19[1] = 3221225472;
    v19[2] = __107__HMMTRAccessoryServer__writeCharacteristicValues_device_responseTuples_completionQueue_completionHandler___block_invoke_4;
    v19[3] = &unk_250F22DF0;
    v19[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend(v10, "registerOperation:accessoryServer:clientQueue:reportDistributor:operationResponseHandler:updatedAttributesHandler:", v11, v12, v13, v14, v20, v19);

    v7 = v21;
  }

}

uint64_t __107__HMMTRAccessoryServer__writeCharacteristicValues_device_responseTuples_completionQueue_completionHandler___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_writeCharacteristicValues:device:responseTuples:completionQueue:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t __107__HMMTRAccessoryServer__writeCharacteristicValues_device_responseTuples_completionQueue_completionHandler___block_invoke_3(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  return objc_msgSend(*(id *)(a1 + 40), "_writeCharacteristicValues:device:responseTuples:completionQueue:completionHandler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

void __107__HMMTRAccessoryServer__writeCharacteristicValues_device_responseTuples_completionQueue_completionHandler___block_invoke_4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "matterDevice");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device:receivedAttributeReport:", v4, v3);

}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_388(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD block[5];
  id v17;
  id v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 138543618;
    v26 = v5;
    v27 = 2048;
    v28 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Read characteristics job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_389;
  block[3] = &unk_250F22D78;
  v9 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v10 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  v21 = *(_QWORD *)(a1 + 72);
  v17 = v9;
  v23 = *(_BYTE *)(a1 + 80);
  v18 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 81);
  v19 = v7;
  v20 = v11;
  v22 = *(_QWORD *)(a1 + 64);
  v12 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  v15[0] = v10;
  v15[1] = 3221225472;
  v15[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_3_396;
  v15[3] = &unk_250F226B0;
  v14 = *(_QWORD *)(a1 + 64);
  v15[4] = *(_QWORD *)(a1 + 32);
  v15[5] = v14;
  dispatch_group_notify(v12, v13, v15);

}

uint64_t __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_397(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_389(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  dispatch_group_t v7;
  dispatch_group_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  void (**v16)(_QWORD);
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  dispatch_time_t v26;
  uint64_t v27;
  _QWORD v28[5];
  id v29;
  id v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[4];
  id v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  id v39;
  id v40;
  id v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD v50[3];
  char v51;
  _QWORD v52[3];
  char v53;
  _QWORD v54[3];
  char v55;
  _QWORD v56[5];
  id v57;
  uint8_t v58[4];
  void *v59;
  __int16 v60;
  uint64_t v61;
  _BYTE buf[24];
  uint64_t (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t);
  id v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a1 + 72));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Request to send read requests with time out %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v63 = __Block_byref_object_copy__7961;
  v64 = __Block_byref_object_dispose__7962;
  v65 = 0;
  v56[0] = 0;
  v56[1] = v56;
  v56[2] = 0x3032000000;
  v56[3] = __Block_byref_object_copy__7961;
  v56[4] = __Block_byref_object_dispose__7962;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v57 = (id)objc_claimAutoreleasedReturnValue();
  v7 = dispatch_group_create();
  v8 = dispatch_group_create();
  v54[0] = 0;
  v54[1] = v54;
  v54[2] = 0x2020000000;
  v55 = 0;
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x2020000000;
  v53 = 0;
  v50[0] = 0;
  v50[1] = v50;
  v50[2] = 0x2020000000;
  v51 = 0;
  v9 = MEMORY[0x24BDAC760];
  v34[0] = MEMORY[0x24BDAC760];
  v34[1] = 3221225472;
  v34[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_390;
  v34[3] = &unk_250F22D28;
  v42 = v50;
  v10 = *(id *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v35 = v10;
  v36 = v11;
  v43 = v56;
  v44 = v52;
  v48 = *(_BYTE *)(a1 + 88);
  v12 = v8;
  v37 = v12;
  v45 = v54;
  v13 = v7;
  v38 = v13;
  v46 = buf;
  v39 = *(id *)(a1 + 48);
  v41 = *(id *)(a1 + 64);
  v49 = *(_BYTE *)(a1 + 89);
  v14 = *(id *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 80);
  v40 = v14;
  v47 = v15;
  v16 = (void (**)(_QWORD))MEMORY[0x242656B10](v34);
  if ((objc_msgSend(*(id *)(a1 + 32), "isReadyToReadFromMTRDevice") & 1) != 0)
  {
    v16[2](v16);
  }
  else
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)v58 = 138543618;
      v59 = v20;
      v60 = 2048;
      v61 = v21;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_INFO, "%{public}@Read job(%lu) deferred till MTRDevice is ready to read from", v58, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v22 = (void *)MEMORY[0x242656B10](v16);
    objc_msgSend(*(id *)(a1 + 32), "pendingMTRDeviceReadReadyHandlers");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", *(_QWORD *)(a1 + 80));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v22, v24);

    v25 = *(void **)(a1 + 32);
    v26 = dispatch_time(0, 60000000000);
    v28[0] = v9;
    v28[1] = 3221225472;
    v28[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_394;
    v28[3] = &unk_250F22D50;
    v27 = *(_QWORD *)(a1 + 32);
    v32 = v50;
    v28[4] = v27;
    v33 = *(_QWORD *)(a1 + 80);
    v29 = *(id *)(a1 + 48);
    v31 = *(id *)(a1 + 64);
    v30 = *(id *)(a1 + 56);
    objc_msgSend(v25, "dispatchAfter:block:", v26, v28);

  }
  _Block_object_dispose(v50, 8);
  _Block_object_dispose(v52, 8);
  _Block_object_dispose(v54, 8);

  _Block_object_dispose(v56, 8);
  _Block_object_dispose(buf, 8);

}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_3_396(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: Read characteristics job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  dispatch_time_t v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  id v30;
  id obj;
  _QWORD v32[4];
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  id v37;
  uint64_t v38;
  _QWORD v39[4];
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  _QWORD *v44;
  char v45;
  _QWORD block[5];
  id v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  char v54;
  _QWORD v55[4];
  id v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    *(_BYTE *)(v1 + 24) = 1;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    obj = *(id *)(a1 + 32);
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v63, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v60;
      do
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v60 != v4)
            objc_enumerationMutation(obj);
          v6 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * i);
          objc_msgSend(*(id *)(a1 + 40), "_populateServiceForCharacteristic:", v6);
          objc_msgSend(*(id *)(a1 + 40), "_readFixedCharacteristicValue:", v6);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (v7)
          {
            objc_msgSend(MEMORY[0x24BE1BA20], "responseTupleForCharacteristic:error:", v6, 0);
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "addObject:", v8);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;
          }
          else
          {
            objc_msgSend(*(id *)(a1 + 40), "_readLocallyMaintainedCharacteristicValue:", v6);
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            if (v8)
            {
              objc_msgSend(MEMORY[0x24BE1BA20], "responseTupleForCharacteristic:error:", v6, 0);
              v9 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "addObject:", v9);
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;
            }
            else if (*(_BYTE *)(a1 + 136))
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 1;
              v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
              v11 = (void *)MEMORY[0x24BE1BA20];
              objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 11);
              v9 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "responseTupleForCharacteristic:error:", v6, v9);
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "addObject:", v12);

            }
            else
            {
              dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
              v55[0] = MEMORY[0x24BDAC760];
              v55[1] = 3221225472;
              v55[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_2;
              v55[3] = &unk_250F22C58;
              v57 = *(_OWORD *)(a1 + 104);
              v58 = *(_QWORD *)(a1 + 96);
              v13 = *(void **)(a1 + 40);
              v56 = *(id *)(a1 + 48);
              objc_msgSend(v13, "_readCharacteristicValueFromCacheWithCharacteristic:responseHandler:", v6, v55);
              v9 = v56;
            }

          }
        }
        v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v63, 16);
      }
      while (v3);
    }

    v53[0] = 0;
    v53[1] = v53;
    v53[2] = 0x2020000000;
    v54 = 0;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
    v14 = *(NSObject **)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 40), "clientQueue");
    v15 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_3;
    block[3] = &unk_250F22CA8;
    v16 = *(_QWORD *)(a1 + 40);
    v48 = *(_QWORD *)(a1 + 112);
    v49 = v53;
    block[4] = v16;
    v50 = *(_QWORD *)(a1 + 96);
    v17 = *(id *)(a1 + 56);
    v18 = *(_QWORD *)(a1 + 104);
    v47 = v17;
    v19 = *(_QWORD *)(a1 + 120);
    v51 = v18;
    v52 = v19;
    dispatch_group_notify(v14, v15, block);

    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 3221225472;
    v39[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_2_392;
    v39[3] = &unk_250F22CD0;
    v44 = v53;
    v40 = *(id *)(a1 + 64);
    v20 = *(id *)(a1 + 80);
    v45 = *(_BYTE *)(a1 + 137);
    v21 = *(_QWORD *)(a1 + 40);
    v43 = v20;
    v41 = v21;
    v42 = *(id *)(a1 + 72);
    v22 = (void *)MEMORY[0x242656B10](v39);
    v23 = dispatch_time(0, 60000000000);
    objc_msgSend(*(id *)(a1 + 40), "clientQueue");
    v24 = objc_claimAutoreleasedReturnValue();
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 3221225472;
    v36[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_4;
    v36[3] = &unk_250F230D0;
    v25 = *(_QWORD *)(a1 + 128);
    v36[4] = *(_QWORD *)(a1 + 40);
    v38 = v25;
    v26 = v22;
    v37 = v26;
    dispatch_after(v23, v24, v36);

    v27 = *(NSObject **)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 40), "clientQueue");
    v28 = objc_claimAutoreleasedReturnValue();
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 3221225472;
    v32[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_5;
    v32[3] = &unk_250F22D00;
    v29 = *(_QWORD *)(a1 + 96);
    v33 = v26;
    v34 = v29;
    v35 = *(_QWORD *)(a1 + 120);
    v30 = v26;
    dispatch_group_notify(v27, v28, v32);

    _Block_object_dispose(v53, 8);
  }
}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_394(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    *(_BYTE *)(v1 + 24) = 1;
    objc_msgSend(*(id *)(a1 + 32), "pendingMTRDeviceReadReadyHandlers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", *(_QWORD *)(a1 + 72));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", 0, v4);

    v5 = *(NSObject **)(a1 + 40);
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_2_395;
    v6[3] = &unk_250F22768;
    v8 = *(id *)(a1 + 56);
    v7 = *(id *)(a1 + 48);
    dispatch_async(v5, v6);

  }
}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_2_395(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("HMMTRProtocolOperationErrorDomain"), 3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(v3, "error");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = 48;
  if (!v4)
    v5 = 40;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + v5) + 8) + 24) = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObject:", v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[4];
  __int128 v10;
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v12 = v5;
      _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Cache read didn't succeed for all requests. Attempting to read from device...", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v7 = *(void **)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_391;
    v9[3] = &unk_250F22C80;
    v10 = *(_OWORD *)(a1 + 72);
    objc_msgSend(v7, "_readCharacteristicValuesForFailedResponses:dispatchGroup:errorHandler:", v6, v8, v9);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_2_392(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  id v23;
  id v24;
  _QWORD block[4];
  id v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (!*(_BYTE *)(v8 + 24))
  {
    *(_BYTE *)(v8 + 24) = 1;
    if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 56))
      goto LABEL_22;
    if (v6)
    {
      v9 = (void *)MEMORY[0x24BDD1540];
      objc_msgSend(v6, "domain");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "errorWithDomain:code:userInfo:", v10, objc_msgSend(v7, "code"), 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_21:
      v22 = *(NSObject **)(a1 + 32);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_3_393;
      block[3] = &unk_250F240D8;
      v28 = *(id *)(a1 + 56);
      v26 = v5;
      v27 = v11;
      v23 = v11;
      dispatch_async(v22, block);

LABEL_22:
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
      goto LABEL_23;
    }
    if (!*(_BYTE *)(a1 + 72))
    {
LABEL_20:
      v11 = 0;
      goto LABEL_21;
    }
    v12 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v13 = v5;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v14)
    {
      v15 = v14;
      v24 = v5;
      v16 = 0;
      v17 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v30 != v17)
            objc_enumerationMutation(v13);
          v19 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
          objc_msgSend(v19, "error", v24);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v20)
          {
            objc_msgSend(v19, "characteristic");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "addObject:", v21);

            v16 = 1;
          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v15);

      v5 = v24;
      if ((v16 & 1) == 0)
        goto LABEL_19;
      objc_msgSend(*(id *)(a1 + 40), "delegate");
      v13 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:", *(_QWORD *)(a1 + 40), v12, 0, 0);
    }

LABEL_19:
    goto LABEL_20;
  }
LABEL_23:

}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "pendingMTRDeviceReadReadyHandlers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", *(_QWORD *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", 0, v3);

  v4 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("HMMTRProtocolOperationErrorDomain"), 3, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

}

uint64_t __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_5(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
}

uint64_t __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_3_393(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void __119__HMMTRAccessoryServer__readCharacteristicValues_timeout_skipCache_sendNotification_completionQueue_completionHandler___block_invoke_391(uint64_t a1, void *a2)
{
  id v4;
  id v5;

  v4 = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v5 = v4;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v4 = v5;
  }

}

void __95__HMMTRAccessoryServer__readCharacteristicValuesForFailedResponses_dispatchGroup_errorHandler___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[4];
  id v27;

  v5 = a2;
  if (!a3)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(*(id *)(a1 + 32), "count");
    if (!v7)
    {
LABEL_13:
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 3221225472;
      v26[2] = __95__HMMTRAccessoryServer__readCharacteristicValuesForFailedResponses_dispatchGroup_errorHandler___block_invoke_2;
      v26[3] = &unk_250F23DF0;
      v24 = *(_QWORD *)(a1 + 32);
      v25 = *(void **)(a1 + 48);
      v27 = *(id *)(a1 + 40);
      objc_msgSend(v25, "_readCharacteristicValuesForFailedResponses:atIndexes:device:completionHandler:", v24, v6, v5, v26);

      goto LABEL_14;
    }
    v8 = v7;
    v9 = 0;
    v10 = *MEMORY[0x24BE1B690];
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "error");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend(v11, "error");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "domain");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqual:", v10);

        if (!v15)
          goto LABEL_10;
        objc_msgSend(v11, "error");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "code");

        if (v17 == 8)
        {
          v18 = (void *)MEMORY[0x24BE1BA20];
          objc_msgSend(v11, "characteristic");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 14);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "responseTupleForCharacteristic:error:", v19, v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", v21, v9);
LABEL_11:

          goto LABEL_12;
        }
        objc_msgSend(v11, "error");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v22, "code");

        if (v23 != -70402)
        {
LABEL_10:
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v9);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v21);
          goto LABEL_11;
        }
      }
LABEL_12:

      if (v8 == ++v9)
        goto LABEL_13;
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_14:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __95__HMMTRAccessoryServer__readCharacteristicValuesForFailedResponses_dispatchGroup_errorHandler___block_invoke_2(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __103__HMMTRAccessoryServer__readCharacteristicValuesForFailedResponses_atIndexes_device_completionHandler___block_invoke(uint64_t a1, int a2)
{
  void *v3;
  HMMTRProtocolOperation *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  HMMTRProtocolOperation *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19[2];
  _QWORD v20[4];
  int8x16_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;

  if (a2)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], -70402, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BE1BA20], "responseTupleForCharacteristic:error:", *(_QWORD *)(a1 + 40), v18);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", v3, *(_QWORD *)(a1 + 88));

    objc_msgSend(*(id *)(a1 + 48), "_readCharacteristicValuesForFailedResponses:atIndexes:device:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80));
  }
  else
  {
    v4 = [HMMTRProtocolOperation alloc];
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "clusterIDCharacteristicMap");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMMTRProtocolOperation initWithOperationOfType:characteristic:device:clusterIDCharacteristicMap:](v4, "initWithOperationOfType:characteristic:device:clusterIDCharacteristicMap:", 0, v6, v5, v7);

    if (v8)
    {
      v9 = *(void **)(a1 + 72);
      v10 = *(void **)(a1 + 48);
      objc_msgSend(v10, "clientQueue");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "reportDistributor");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x24BDAC760];
      v20[1] = 3221225472;
      v20[2] = __103__HMMTRAccessoryServer__readCharacteristicValuesForFailedResponses_atIndexes_device_completionHandler___block_invoke_2;
      v20[3] = &unk_250F22BE0;
      *(_OWORD *)v19 = *(_OWORD *)(a1 + 40);
      v13 = v19[0];
      v21 = vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
      v14 = *(id *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 88);
      v22 = v14;
      v26 = v15;
      v23 = *(id *)(a1 + 56);
      v24 = *(id *)(a1 + 64);
      v25 = *(id *)(a1 + 80);
      objc_msgSend(v9, "registerOperation:accessoryServer:clientQueue:reportDistributor:operationResponseHandler:updatedAttributesHandler:", v8, v10, v11, v12, v20, 0);

    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], 3, 0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BE1BA20], "responseTupleForCharacteristic:error:", *(_QWORD *)(a1 + 40), v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", v17, *(_QWORD *)(a1 + 88));

      objc_msgSend(*(id *)(a1 + 48), "_readCharacteristicValuesForFailedResponses:atIndexes:device:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80));
    }

  }
}

void __103__HMMTRAccessoryServer__readCharacteristicValuesForFailedResponses_atIndexes_device_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Received Read response for characteristic: %@, responseTuple %@", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 48), "setObject:atIndexedSubscript:", v3, *(_QWORD *)(a1 + 80));
  objc_msgSend(*(id *)(a1 + 32), "_readCharacteristicValuesForFailedResponses:atIndexes:device:completionHandler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));

}

void __92__HMMTRAccessoryServer__readCharacteristicValueFromCacheWithCharacteristic_responseHandler___block_invoke(uint64_t a1, int a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (void *)MEMORY[0x242656984]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 40);
      v14 = 138543618;
      v15 = v6;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_ERROR, "%{public}@Read cache operation aborted for characteristic since the bridged accessory is unreachable: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
    v8 = (void *)MEMORY[0x24BE1BA20];
    v11 = a1 + 40;
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(v11 + 8);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE1B690], -70402, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "responseTupleForCharacteristic:error:", v9, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v13);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_readCharacteristicValueFromCacheAfterConfirmingBridgedAccessroyReachabilityWithCharacteristic:responseHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
}

void __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_371(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  NSObject *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: remove all pairings job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_372;
  block[3] = &unk_250F240D8;
  v10 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v16 = v7;
  v17 = v10;
  v11 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v9;
  v14[1] = 3221225472;
  v14[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_376;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 48);
  v14[4] = *(_QWORD *)(a1 + 32);
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

uint64_t __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_377(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_372(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  id v19;
  _QWORD v20[5];
  void *v21;
  _QWORD block[4];
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = a1[4];
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing all pairings", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = MEMORY[0x24BDAC760];
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_373;
  v24[3] = &unk_250F23CD0;
  v26 = a1[6];
  v25 = a1[5];
  v7 = (void *)MEMORY[0x242656B10](v24);
  objc_msgSend(a1[4], "deviceController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(a1[4], "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "unsignedLongLongValue");
    objc_msgSend(a1[4], "clientQueue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = v6;
    v20[1] = 3221225472;
    v20[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_2;
    v20[3] = &unk_250F22A78;
    v20[4] = a1[4];
    v21 = v7;
    v12 = v7;
    objc_msgSend(v8, "getBaseDevice:queue:completionHandler:", v10, v11, v20);

    v13 = v21;
  }
  else
  {
    v14 = (void *)MEMORY[0x242656984]();
    v15 = a1[4];
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v17;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to remove all pairings", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(a1[4], "clientQueue");
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v6;
    block[1] = 3221225472;
    block[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_374;
    block[3] = &unk_250F22988;
    v23 = v7;
    v19 = v7;
    dispatch_async(v18, block);

    v13 = v23;
  }

}

void __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_376(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: remove all pairings job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_373(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_374(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  id v24;
  _BYTE buf[12];
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc(MEMORY[0x24BE3F168]);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v7, "initWithQueue:", v8);

    *(_QWORD *)buf = _HMFThreadLocalAsyncContextPush();
    +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "runBlockForAllEndpointsWithClusterID:device:callbackQueue:block:", &unk_250F3FC18, v5, v11, &__block_literal_global_375);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_4;
    v21[3] = &unk_250F22B90;
    v13 = v5;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v22 = v13;
    v23 = v14;
    v24 = v15;
    v16 = (id)objc_msgSend(v12, "finally:", v21);

    _HMFThreadLocalAsyncContextPop();
  }
  else
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v20;
      v26 = 2112;
      v27 = v6;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@Could not fetch pairings because no device paired: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[5];
  id v9;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "clientQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "browser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "vendorMetadataStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_5;
  v8[3] = &unk_250F23CD0;
  v6 = *(void **)(a1 + 48);
  v8[4] = *(_QWORD *)(a1 + 40);
  v9 = v6;
  objc_msgSend(v2, "removeAllPairingsForCallbackQueue:vendorMetadataStore:completionHandler:", v3, v5, v8);

  return 1;
}

void __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_5(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove all pairings: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v9;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully removed all pairings.", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 32), "setOperationDisabled:", 1);
    objc_msgSend(*(id *)(a1 + 32), "setOperationDisabledReason:", 2);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t __63__HMMTRAccessoryServer_removeAllPairingsWithCompletionHandler___block_invoke_3()
{
  return objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
}

void __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_362(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD block[5];
  NSObject *v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch eMAC address job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_363;
  block[3] = &unk_250F22B48;
  block[4] = *(_QWORD *)(a1 + 32);
  v17 = *(id *)(a1 + 48);
  v15 = v7;
  v16 = *(id *)(a1 + 40);
  v10 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v13[0] = v9;
  v13[1] = 3221225472;
  v13[2] = __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_369;
  v13[3] = &unk_250F226B0;
  v12 = *(_QWORD *)(a1 + 56);
  v13[4] = *(_QWORD *)(a1 + 32);
  v13[5] = v12;
  dispatch_group_notify(v10, v11, v13);

}

uint64_t __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_370(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_363(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v17 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Fetching eMAC address", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = MEMORY[0x24BDAC760];
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_364;
  v13[3] = &unk_250F22AF0;
  v15 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 40);
  v7 = (void *)MEMORY[0x242656B10](v13);
  v8 = *(void **)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v6;
  v11[1] = 3221225472;
  v11[2] = __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_366;
  v11[3] = &unk_250F22B20;
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v7;
  v10 = v7;
  objc_msgSend(v8, "readAttributesWithEndpointID:clusterID:attributeID:params:queue:completion:", &unk_250F3FC00, &unk_250F3FDC8, &unk_250F3FC00, 0, v9, v11);

}

void __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_369(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch eMAC address job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_364(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __69__HMMTRAccessoryServer_fetchExtendedMACAddressFromDevice_completion___block_invoke_366(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v11;
      v25 = 2112;
      v26 = v5;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory returned values as %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v12 = *(void **)(a1 + 32);
    objc_msgSend(v5, "firstObject");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x24BDDB478]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_getOperationalHardwareAddressFromReadValue:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v15, "stringByReplacingOccurrencesOfString:withString:", CFSTR(":"), &stru_250F24B08);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setEMACAddress:", v16);

    v17 = (void *)MEMORY[0x242656984]();
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v20;
      v25 = 2112;
      v26 = v15;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_INFO, "%{public}@Accessory returned eMAC address as %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    (*(void (**)(_QWORD, id, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v5, 0);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v21;
      v25 = 2112;
      v26 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to retrieve eMAC address: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v22 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v22 + 16))(v22, 0, v15);
  }

}

void __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_356(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD block[5];
  NSObject *v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch WED support information job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_357;
  block[3] = &unk_250F22B48;
  block[4] = *(_QWORD *)(a1 + 32);
  v17 = *(id *)(a1 + 48);
  v15 = v7;
  v16 = *(id *)(a1 + 40);
  v10 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v13[0] = v9;
  v13[1] = 3221225472;
  v13[2] = __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_360;
  v13[3] = &unk_250F226B0;
  v12 = *(_QWORD *)(a1 + 56);
  v13[4] = *(_QWORD *)(a1 + 32);
  v13[5] = v12;
  dispatch_group_notify(v10, v11, v13);

}

uint64_t __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_361(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_357(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v17 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Fetching WED support information", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = MEMORY[0x24BDAC760];
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_358;
  v13[3] = &unk_250F22AF0;
  v15 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 40);
  v7 = (void *)MEMORY[0x242656B10](v13);
  v8 = *(void **)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v6;
  v11[1] = 3221225472;
  v11[2] = __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_2;
  v11[3] = &unk_250F22B20;
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v7;
  v10 = v7;
  objc_msgSend(v8, "readAttributesWithEndpointID:clusterID:attributeID:params:queue:completion:", &unk_250F3FC00, &unk_250F3F0F0, &unk_250F3FC48, 0, v9, v11);

}

void __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_360(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch WED support information job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_358(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __72__HMMTRAccessoryServer_fetchWEDSupportInformationFromDevice_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v11;
      v25 = 2112;
      v26 = v5;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory returned WED support information as %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    if (objc_msgSend(v5, "count"))
    {
      objc_msgSend(v5, "firstObject");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRUtilities mtrBaseClusterValueFromMTRClusterReportValue:](HMMTRUtilities, "mtrBaseClusterValueFromMTRClusterReportValue:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 32), "setWedDevice:", v13 != 0);
    }
    else
    {
      v14 = objc_msgSend(*(id *)(a1 + 32), "setWedDevice:", 0);
    }
    v18 = (void *)MEMORY[0x242656984](v14);
    v19 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "isWEDDevice");
      HMFBooleanToString();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v21;
      v25 = 2112;
      v26 = v22;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@Setting WED support to %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v15;
      v25 = 2112;
      v26 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to retrieve WED support information: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v16 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v16 + 16))(v16, 0, v17);

  }
}

void __42__HMMTRAccessoryServer_setupThreadPairing__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  _QWORD v28[5];
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v8 = v3;
  if (!v3)
  {
    v3 = (id)objc_msgSend(*(id *)(a1 + 32), "isWEDDevice");
    if ((_DWORD)v3)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v9 = (void *)MEMORY[0x242656984]();
        v10 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v31 = v12;
          _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@Aborting operations to flush the non-WED device state", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v9);
        objc_msgSend(*(id *)(a1 + 32), "browser");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = *(_QWORD *)(a1 + 32);
        objc_msgSend(MEMORY[0x24BDD1540], "hmmtrErrorWithCode:", 9);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "abortOperationsForAccessoryServer:reason:", v14, v15);

        v16 = (void *)MEMORY[0x242656984]();
        v17 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = *(void **)(a1 + 32);
          *(_DWORD *)buf = 138543618;
          v31 = v19;
          v32 = 2112;
          v33 = v20;
          _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_INFO, "%{public}@Connecting to WED accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v16);
        objc_msgSend(*(id *)(a1 + 32), "browser");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "threadRadioManager");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v28[0] = MEMORY[0x24BDAC760];
        v28[1] = 3221225472;
        v28[2] = __42__HMMTRAccessoryServer_setupThreadPairing__block_invoke_355;
        v28[3] = &unk_250F23E18;
        v23 = *(void **)(a1 + 40);
        v28[4] = *(_QWORD *)(a1 + 32);
        v29 = v23;
        objc_msgSend(v22, "connectToAccessoryWithExtendedMACAddress:completion:", v29, v28);

      }
    }
  }
  v24 = (void *)MEMORY[0x242656984](v3, v4, v5, v6, v7);
  v25 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v27;
    v32 = 2112;
    v33 = v8;
    _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_INFO, "%{public}@startAccessoryPairingWithExtendedMACAddress completed, error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v24);

}

void __42__HMMTRAccessoryServer_setupThreadPairing__block_invoke_355(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = 138544130;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      v16 = 2112;
      v17 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to establish WED connection to accessory %@ with emac %@, error %@", (uint8_t *)&v10, 0x2Au);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __63__HMMTRAccessoryServer_fetchSoftwareVersion_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "matterDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = objc_alloc(MEMORY[0x24BDDB5C8]);
    objc_msgSend(*(id *)(a1 + 32), "matterDevice");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(v3, "initWithDevice:endpointID:queue:", v4, &unk_250F3FC00, v5);

    LODWORD(v4) = *(unsigned __int8 *)(a1 + 48);
    v7 = objc_alloc_init(MEMORY[0x24BDDB7F0]);
    if ((_DWORD)v4)
      objc_msgSend(v6, "readAttributeSoftwareVersionWithParams:", v7);
    else
      objc_msgSend(v6, "readAttributeSoftwareVersionStringWithParams:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (void *)MEMORY[0x242656984]();
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v17;
      v22 = 2112;
      v23 = v13;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Fetched software version data: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v18 = *(_QWORD *)(a1 + 40);
    if (v13)
    {
      objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x24BDDB518]);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v18 + 16))(v18, v19, 0);
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 8);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v18 + 16))(v18, 0, v19);
    }

  }
  else
  {
    v8 = (void *)MEMORY[0x242656984]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@No Matter device available to fetch software version", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    v12 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v12 + 16))(v12, 0, v6);
  }

}

void __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  NSObject *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch serial number job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_348;
  block[3] = &unk_250F240D8;
  v10 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v16 = v7;
  v17 = v10;
  v11 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v9;
  v14[1] = 3221225472;
  v14[2] = __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_351;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 48);
  v14[4] = *(_QWORD *)(a1 + 32);
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

uint64_t __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_352(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_348(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  id v19;
  _QWORD v20[5];
  void *v21;
  _QWORD block[4];
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = a1[4];
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Fetching serial number", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = MEMORY[0x24BDAC760];
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_349;
  v24[3] = &unk_250F23CD0;
  v26 = a1[6];
  v25 = a1[5];
  v7 = (void *)MEMORY[0x242656B10](v24);
  objc_msgSend(a1[4], "deviceController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(a1[4], "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "unsignedLongLongValue");
    objc_msgSend(a1[4], "clientQueue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = v6;
    v20[1] = 3221225472;
    v20[2] = __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_2;
    v20[3] = &unk_250F22A78;
    v20[4] = a1[4];
    v21 = v7;
    v12 = v7;
    objc_msgSend(v8, "getBaseDevice:queue:completionHandler:", v10, v11, v20);

    v13 = v21;
  }
  else
  {
    v14 = (void *)MEMORY[0x242656984]();
    v15 = a1[4];
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v17;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to fetch serial number", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(a1[4], "clientQueue");
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v6;
    block[1] = 3221225472;
    block[2] = __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_350;
    block[3] = &unk_250F22988;
    v23 = v7;
    v19 = v7;
    dispatch_async(v18, block);

    v13 = v23;
  }

}

void __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_351(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch serial number job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_349(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_350(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_3;
    v13[3] = &unk_250F22AA0;
    v8 = *(void **)(a1 + 40);
    v13[4] = *(_QWORD *)(a1 + 32);
    v14 = v8;
    objc_msgSend(v5, "fetchSerialNumberWithCallbackQueue:completionHandler:", v7, v13);

  }
  else
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v16 = v12;
      v17 = 2112;
      v18 = v6;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_ERROR, "%{public}@Could not fetch serial number because no device paired: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void __64__HMMTRAccessoryServer__fetchSerialNumberWithCompletionHandler___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v5;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Accessory returned Serial Number as %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "primaryAccessory");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setSerialNumber:", v5);

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v13;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to retrieve serial number: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v14 = *(_QWORD *)(a1 + 40);
    if (v6)
    {
      (*(void (**)(uint64_t, id))(v14 + 16))(v14, v6);
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);

    }
  }

}

void __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  NSObject *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch current pairing job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_343;
  block[3] = &unk_250F240D8;
  v10 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v16 = v7;
  v17 = v10;
  v11 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v9;
  v14[1] = 3221225472;
  v14[2] = __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_346;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 48);
  v14[4] = *(_QWORD *)(a1 + 32);
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

uint64_t __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_347(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_343(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  id v19;
  _QWORD v20[5];
  void *v21;
  _QWORD block[4];
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = a1[4];
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Fetching current pairing", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = MEMORY[0x24BDAC760];
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_344;
  v24[3] = &unk_250F22A50;
  v26 = a1[6];
  v25 = a1[5];
  v7 = (void *)MEMORY[0x242656B10](v24);
  objc_msgSend(a1[4], "deviceController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(a1[4], "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "unsignedLongLongValue");
    objc_msgSend(a1[4], "clientQueue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = v6;
    v20[1] = 3221225472;
    v20[2] = __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_2;
    v20[3] = &unk_250F22A78;
    v20[4] = a1[4];
    v21 = v7;
    v12 = v7;
    objc_msgSend(v8, "getBaseDevice:queue:completionHandler:", v10, v11, v20);

    v13 = v21;
  }
  else
  {
    v14 = (void *)MEMORY[0x242656984]();
    v15 = a1[4];
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v17;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to fetch current pairing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(a1[4], "clientQueue");
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v6;
    block[1] = 3221225472;
    block[2] = __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_345;
    block[3] = &unk_250F22988;
    v23 = v7;
    v19 = v7;
    dispatch_async(v18, block);

    v13 = v23;
  }

}

void __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_346(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch current pairing job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_344(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_345(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id, _QWORD))(v1 + 16))(v1, 0, v2, 0);

}

void __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[5];
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "browser");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "vendorMetadataStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_3;
    v15[3] = &unk_250F22A50;
    v10 = *(void **)(a1 + 40);
    v15[4] = *(_QWORD *)(a1 + 32);
    v16 = v10;
    objc_msgSend(v5, "fetchCurrentPairingWithCallbackQueue:vendorMetadataStore:completionHandler:", v7, v9, v15);

  }
  else
  {
    v11 = (void *)MEMORY[0x242656984]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_ERROR, "%{public}@Could not fetch current pairing because no device paired: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void __66__HMMTRAccessoryServer__fetchCurrentPairingWithCompletionHandler___block_invoke_3(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)MEMORY[0x242656984]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v7)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v14;
      v20 = 2112;
      v21 = v7;
      v15 = "%{public}@Successfully retrieved pairing: %@";
      v16 = v13;
      v17 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_23E95B000, v16, v17, v15, (uint8_t *)&v18, 0x16u);

    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v14;
    v20 = 2112;
    v21 = v8;
    v15 = "%{public}@Failed to retrieve pairing: %@";
    v16 = v13;
    v17 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v10);
  (*(void (**)(_QWORD, id, id, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v7, v8, 0);

}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 10, v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_336(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  NSObject *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch pairings job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_337;
  block[3] = &unk_250F240D8;
  v10 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v16 = v7;
  v17 = v10;
  v11 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v9;
  v14[1] = 3221225472;
  v14[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_341;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 48);
  v14[4] = *(_QWORD *)(a1 + 32);
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_342(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  if (a2)
  {
    v3 = a2;
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 10, v3);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_337(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  id v19;
  _QWORD v20[5];
  void *v21;
  _QWORD block[4];
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = a1[4];
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Fetching pairings", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = MEMORY[0x24BDAC760];
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_338;
  v24[3] = &unk_250F22A50;
  v26 = a1[6];
  v25 = a1[5];
  v7 = (void *)MEMORY[0x242656B10](v24);
  objc_msgSend(a1[4], "deviceController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(a1[4], "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "unsignedLongLongValue");
    objc_msgSend(a1[4], "clientQueue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = v6;
    v20[1] = 3221225472;
    v20[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_2;
    v20[3] = &unk_250F22A78;
    v20[4] = a1[4];
    v21 = v7;
    v12 = v7;
    objc_msgSend(v8, "getBaseDevice:queue:completionHandler:", v10, v11, v20);

    v13 = v21;
  }
  else
  {
    v14 = (void *)MEMORY[0x242656984]();
    v15 = a1[4];
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v17;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to fetch pairings", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(a1[4], "clientQueue");
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v6;
    block[1] = 3221225472;
    block[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_340;
    block[3] = &unk_250F22988;
    v23 = v7;
    v19 = v7;
    dispatch_async(v18, block);

    v13 = v23;
  }

}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_341(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: fetch pairings job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_338(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_340(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 10, v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "browser");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "vendorMetadataStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_3;
    v16[3] = &unk_250F22A50;
    v10 = *(void **)(a1 + 40);
    v16[4] = *(_QWORD *)(a1 + 32);
    v17 = v10;
    objc_msgSend(v5, "fetchPairingsWithCallbackQueue:vendorMetadataStore:completionHandler:", v7, v9, v16);

  }
  else
  {
    v11 = (void *)MEMORY[0x242656984]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v14;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_ERROR, "%{public}@Could not fetch pairings because no device paired: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    +[HMMTRAccessoryPairingEndContext mtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "mtrContextWithStep:error:", 10, v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void __59__HMMTRAccessoryServer_fetchPairingsWithCompletionHandler___block_invoke_3(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)MEMORY[0x242656984]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v7)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v14;
      v20 = 2112;
      v21 = v7;
      v15 = "%{public}@Successfully retrieved pairings: %@";
      v16 = v13;
      v17 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_23E95B000, v16, v17, v15, (uint8_t *)&v18, 0x16u);

    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v14;
    v20 = 2112;
    v21 = v8;
    v15 = "%{public}@Failed to retrieve pairings: %@";
    v16 = v13;
    v17 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v10);
  (*(void (**)(_QWORD, id, id, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v7, v8, v9);

}

void __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_330(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD block[5];
  id v21;
  NSObject *v22;
  id v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 138543618;
    v26 = v5;
    v27 = 2048;
    v28 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: update fabric label job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_331;
  block[3] = &unk_250F229D8;
  v10 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v21 = v10;
  v11 = *(id *)(a1 + 56);
  v22 = v7;
  v23 = v11;
  v24 = *(_BYTE *)(a1 + 72);
  v12 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  v16[0] = v9;
  v16[1] = 3221225472;
  v16[2] = __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_334;
  v16[3] = &unk_250F22A00;
  v14 = *(id *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = v14;
  v18 = v15;
  v19 = *(_QWORD *)(a1 + 64);
  dispatch_group_notify(v12, v13, v16);

}

uint64_t __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_335(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_331(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD);
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  void (**v27)(_QWORD, _QWORD);
  _QWORD v28[4];
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v32 = v5;
    v33 = 2112;
    v34 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Request to update fabric label to %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = MEMORY[0x24BDAC760];
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_332;
  v28[3] = &unk_250F23CD0;
  v30 = *(id *)(a1 + 56);
  v29 = *(id *)(a1 + 48);
  v8 = (void (**)(_QWORD, _QWORD))MEMORY[0x242656B10](v28);
  if (*(_BYTE *)(a1 + 64))
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v12;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_INFO, "%{public}@Update fabric label job is redundant - do nothing.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 32), "lastFabricLabelUpdateError");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v8)[2](v8, v13);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "deviceController");
    v14 = objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      v13 = (void *)v14;
      objc_msgSend(*(id *)(a1 + 32), "nodeID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "unsignedLongLongValue");
      objc_msgSend(*(id *)(a1 + 32), "clientQueue");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = v7;
      v25[1] = 3221225472;
      v25[2] = __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_333;
      v25[3] = &unk_250F22740;
      v18 = *(void **)(a1 + 40);
      v25[4] = *(_QWORD *)(a1 + 32);
      v26 = v18;
      v27 = v8;
      objc_msgSend(v13, "getBaseDevice:queue:completionHandler:", v16, v17, v25);

    }
    else
    {
      v19 = (void *)MEMORY[0x242656984]();
      v20 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v32 = v22;
        _os_log_impl(&dword_23E95B000, v21, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller to update fabric label job", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "setLastFabricLabelUpdateError:", v23);

      objc_msgSend(*(id *)(a1 + 32), "lastFabricLabelUpdateError");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v8)[2](v8, v24);

      v13 = 0;
    }
  }

}

void __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_334(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984](objc_msgSend(*(id *)(a1 + 32), "removeAllObjects"));
  v3 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: update fabric label job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_332(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_333(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(*(id *)(a1 + 32), "setLastFabricLabelUpdateError:", v6);
  if (v5)
  {
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_2;
    v16[3] = &unk_250F229B0;
    v10 = *(void **)(a1 + 40);
    v16[4] = *(_QWORD *)(a1 + 32);
    v17 = v10;
    v19 = *(id *)(a1 + 48);
    v18 = v6;
    objc_msgSend(v5, "updateFabricLabel:callbackQueue:completionHandler:", v8, v9, v16);

  }
  else
  {
    v11 = (void *)MEMORY[0x242656984](v7);
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      v21 = v14;
      v22 = 2112;
      v23 = v15;
      v24 = 2112;
      v25 = v6;
      _os_log_impl(&dword_23E95B000, v13, OS_LOG_TYPE_ERROR, "%{public}@Could not update fabric label to %@ because no device paired %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void __60__HMMTRAccessoryServer_updateFabricLabel_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v17 = 138543874;
      v18 = v8;
      v19 = 2112;
      v20 = v9;
      v21 = 2112;
      v22 = v3;
      v10 = "%{public}@Failed to update fabric label to %@ with error %@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_23E95B000, v11, v12, v10, (uint8_t *)&v17, v13);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 40);
    v17 = 138543618;
    v18 = v8;
    v19 = 2112;
    v20 = v14;
    v10 = "%{public}@Successfully updated fabric label %@";
    v11 = v7;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), v15, v16);

}

void __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_324(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD block[5];
  id v17;
  NSObject *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v21 = v5;
    v22 = 2048;
    v23 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: remove pairing job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_325;
  block[3] = &unk_250F22B48;
  v10 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v17 = v10;
  v11 = *(id *)(a1 + 48);
  v18 = v7;
  v19 = v11;
  v12 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  v15[0] = v9;
  v15[1] = 3221225472;
  v15[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_328;
  v15[3] = &unk_250F226B0;
  v14 = *(_QWORD *)(a1 + 56);
  v15[4] = *(_QWORD *)(a1 + 32);
  v15[5] = v14;
  dispatch_group_notify(v12, v13, v15);

}

uint64_t __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_329(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_325(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  id v22;
  _QWORD v23[4];
  _QWORD v24[2];
  id v25;
  _QWORD block[4];
  void *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = a1[4];
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = a1[5];
    *(_DWORD *)buf = 138543618;
    v32 = v5;
    v33 = 2112;
    v34 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing pairing: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = MEMORY[0x24BDAC760];
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_326;
  v28[3] = &unk_250F23CD0;
  v30 = a1[7];
  v29 = a1[6];
  v8 = (void *)MEMORY[0x242656B10](v28);
  objc_msgSend(a1[4], "deviceController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(a1[4], "nodeID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "unsignedLongLongValue");
    objc_msgSend(a1[4], "clientQueue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = v7;
    v23[1] = 3221225472;
    v23[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_2;
    v23[3] = &unk_250F22740;
    v13 = (id *)v24;
    v14 = a1[5];
    v15 = a1[4];
    v24[0] = v14;
    v24[1] = v15;
    v25 = v8;
    v16 = v8;
    objc_msgSend(v9, "getBaseDevice:queue:completionHandler:", v11, v12, v23);

  }
  else
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = a1[4];
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v20;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@No Matter device controller available to remove pairing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(a1[4], "clientQueue");
    v21 = objc_claimAutoreleasedReturnValue();
    block[0] = v7;
    block[1] = 3221225472;
    block[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_327;
    block[3] = &unk_250F22988;
    v13 = &v27;
    v27 = v8;
    v22 = v8;
    dispatch_async(v21, block);

  }
}

void __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_328(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: remove pairing job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_326(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_327(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  int8x16_t v17;
  _QWORD v18[4];
  int8x16_t v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "clientQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "browser");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "vendorMetadataStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_3;
    v18[3] = &unk_250F228C0;
    v17 = *(int8x16_t *)(a1 + 32);
    v11 = (id)v17.i64[0];
    v19 = vextq_s8(v17, v17, 8uLL);
    v20 = *(id *)(a1 + 48);
    objc_msgSend(v5, "removePairing:callbackQueue:vendorMetadataStore:completionHandler:", v7, v8, v10, v18);

  }
  else
  {
    v12 = (void *)MEMORY[0x242656984]();
    v13 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v22 = v15;
      v23 = 2112;
      v24 = v16;
      v25 = 2112;
      v26 = v6;
      _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_ERROR, "%{public}@Could not remove pairing %@ because no device paired: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void __56__HMMTRAccessoryServer_removePairing_completionHandler___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v17 = 138543874;
      v18 = v8;
      v19 = 2112;
      v20 = v9;
      v21 = 2112;
      v22 = v3;
      v10 = "%{public}@Failed to remove CHIP pairing %@: %@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_23E95B000, v11, v12, v10, (uint8_t *)&v17, v13);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 40);
    v17 = 138543618;
    v18 = v8;
    v19 = 2112;
    v20 = v14;
    v10 = "%{public}@Successfully removed CHIP pairing: %@";
    v11 = v7;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
  (*(void (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v3, v15, v16);

}

void __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v20 = v5;
    v21 = 2048;
    v22 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: read pairing window status job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke_316;
  block[3] = &unk_250F228E8;
  v10 = *(void **)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  block[4] = *(_QWORD *)(a1 + 32);
  v16 = v7;
  v17 = v10;
  v11 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v9;
  v14[1] = 3221225472;
  v14[2] = __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke_322;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 48);
  v14[4] = *(_QWORD *)(a1 + 32);
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

uint64_t __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke_323(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke_316(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "controllerWrapper");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "controller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x24BDDB598];
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "deviceWithNodeID:controller:", v5, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v7 = objc_alloc(MEMORY[0x24BDDB550]);
      objc_msgSend(*(id *)(a1 + 32), "clientQueue");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (void *)objc_msgSend(v7, "initWithDevice:endpointID:queue:", v6, &unk_250F3FC00, v8);

      if (!v9)
        _HMFPreconditionFailure();
      v22[0] = MEMORY[0x24BDAC760];
      v22[1] = 3221225472;
      v22[2] = __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke_321;
      v22[3] = &unk_250F24150;
      v22[4] = *(_QWORD *)(a1 + 32);
      v24 = *(id *)(a1 + 48);
      v23 = *(id *)(a1 + 40);
      objc_msgSend(v9, "readAttributeWindowStatusWithCompletion:", v22);

    }
    else
    {
      v15 = (void *)MEMORY[0x242656984]();
      v16 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "nodeID");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v26 = v18;
        v27 = 2112;
        v28 = v19;
        _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed get a device to read pairing window status for node %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      v20 = *(_QWORD *)(a1 + 48);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 1, 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v20 + 16))(v20, 0, v21);

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    }

  }
  else
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2048;
      v28 = v14;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_ERROR, "%{public}@No device controller to execute read pairing window status job(%lu)", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke_322(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: read pairing window status job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __69__HMMTRAccessoryServer_readPairingWindowStatusWithCompletionHandler___block_invoke_321(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Reading AdministratorCommissioning cluster window status attribute failed: %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v20 = v5;
    v21 = 2048;
    v22 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: open pairing window with PIN job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "_startCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNamePairingWindowWithPasscode"));
  objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:", 24);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[2] = __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_310;
  block[3] = &unk_250F228E8;
  v9 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v10 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  v18 = *(_QWORD *)(a1 + 56);
  v16 = v7;
  v17 = v9;
  v11 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  v14[1] = 3221225472;
  v14[2] = __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_314;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 48);
  v14[4] = *(_QWORD *)(a1 + 32);
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

uint64_t __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_315(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_310(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a1 + 56));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v5;
    v32 = 2112;
    v33 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Request to open the pairing window with PIN for a duration of %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(MEMORY[0x24BDDB810], "generateRandomSetupPasscode");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = +[HMMTRUtilities randomDiscriminator](HMMTRUtilities, "randomDiscriminator");
  v9 = (void *)MEMORY[0x24BDDB678];
  objc_msgSend(*(id *)(a1 + 32), "nodeID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "unsignedLongLongValue");
  objc_msgSend(*(id *)(a1 + 32), "deviceController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "deviceWithNodeID:deviceController:", v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = objc_alloc(MEMORY[0x24BDDB5B8]);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v14, "initWithDevice:endpointID:queue:", v13, &unk_250F3FC00, v15);

  if (v16)
  {
    v23[0] = MEMORY[0x24BDAC760];
    v23[1] = 3221225472;
    v23[2] = __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_311;
    v23[3] = &unk_250F22960;
    v23[4] = *(_QWORD *)(a1 + 32);
    v24 = v13;
    v25 = v7;
    v28 = v8;
    v29 = *(_QWORD *)(a1 + 56);
    v27 = *(id *)(a1 + 48);
    v26 = *(id *)(a1 + 40);
    objc_msgSend(v16, "revokeCommissioningWithExpectedValues:expectedValueInterval:completion:", MEMORY[0x24BDBD1A8], &unk_250F3FC00, v23);

  }
  else
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v20;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@No Matter device available to open pairing window", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    v21 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v22);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_314(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: open pairing window with PIN job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_311(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  id v15;
  uint64_t v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v18 = v7;
    v19 = 2112;
    v20 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Revoked commissioning with error (expected): %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = *(void **)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a1 + 80));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_312;
  v13[3] = &unk_250F22938;
  v13[4] = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 80);
  v15 = *(id *)(a1 + 64);
  v14 = *(id *)(a1 + 56);
  objc_msgSend(v8, "openCommissioningWindowWithSetupPasscode:discriminator:duration:queue:completion:", v9, v10, v11, v12, v13);

}

void __79__HMMTRAccessoryServer__openPairingWindowWithPINForDuration_completionHandler___block_invoke_312(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v24 = v10;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Successfully opened pairing window", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:", 25);
    objc_msgSend(*(id *)(a1 + 32), "vendorID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setVendorID:", v11);

    objc_msgSend(*(id *)(a1 + 32), "productID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setProductID:", v12);

    v22 = 0;
    objc_msgSend(v5, "qrCodeString:", &v22);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v22;
    v15 = (void *)MEMORY[0x242656984]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v13)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v19;
        v25 = 2112;
        v26 = v13;
        _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_INFO, "%{public}@Returning setup payload = %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(*(id *)(a1 + 32), "browser");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "registerPairingWindowWithSetupPayload:duration:accessoryServer:", v13, *(_QWORD *)(a1 + 32), *(double *)(a1 + 56));

    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v21;
        v25 = 2112;
        v26 = v14;
        _os_log_impl(&dword_23E95B000, v18, OS_LOG_TYPE_ERROR, "%{public}@QR code retrieval from setup payload failed: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      v14 = v14;

      v13 = 0;
      v6 = v14;
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:error:", 26, v6);
    v13 = 0;
    v14 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t __78__HMMTRAccessoryServer_openPairingWindowWithPINForDuration_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_openPairingWindowWithPINForDuration:completionHandler:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
}

void __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD block[5];
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v20 = v5;
    v21 = 2048;
    v22 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: open pairing window job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:", 21);
  objc_msgSend(*(id *)(a1 + 32), "_startCurrentMetricTimeWithName:", CFSTR("hmmtrAccessoryMetricNamePairingWindow"));
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[2] = __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke_303;
  block[3] = &unk_250F228E8;
  v9 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v10 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  v18 = *(_QWORD *)(a1 + 56);
  v16 = v7;
  v17 = v9;
  v11 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  v14[1] = 3221225472;
  v14[2] = __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke_308;
  v14[3] = &unk_250F226B0;
  v13 = *(_QWORD *)(a1 + 48);
  v14[4] = *(_QWORD *)(a1 + 32);
  v14[5] = v13;
  dispatch_group_notify(v11, v12, v14);

}

uint64_t __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke_309(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke_303(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[5];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a1 + 56));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v5;
    v29 = 2112;
    v30 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Request to open the pairing window for a duration of %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = (void *)MEMORY[0x24BDDB678];
  objc_msgSend(*(id *)(a1 + 32), "nodeID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "unsignedLongLongValue");
  objc_msgSend(*(id *)(a1 + 32), "deviceController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "deviceWithNodeID:deviceController:", v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = objc_alloc(MEMORY[0x24BDDB5B8]);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend(v12, "initWithDevice:endpoint:queue:", v11, 0, v13);

  v15 = objc_alloc_init(MEMORY[0x24BDDB530]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a1 + 56));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setCommissioningTimeout:", v16);

  v17 = objc_msgSend(v15, "setTimedInvokeTimeoutMs:", &unk_250F3FDB0);
  if (v14)
  {
    v24[0] = MEMORY[0x24BDAC760];
    v24[1] = 3221225472;
    v24[2] = __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke_307;
    v24[3] = &unk_250F228C0;
    v24[4] = *(_QWORD *)(a1 + 32);
    v26 = *(id *)(a1 + 48);
    v25 = *(id *)(a1 + 40);
    objc_msgSend(v14, "openBasicCommissioningWindowWithParams:expectedValues:expectedValueInterval:completionHandler:", v15, 0, 0, v24);

  }
  else
  {
    v18 = (void *)MEMORY[0x242656984](v17);
    v19 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v21;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_ERROR, "%{public}@No Matter device available to open pairing window", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    v22 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v23);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke_308(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: open pairing window job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __72__HMMTRAccessoryServer__openPairingWindowForDuration_completionHandler___block_invoke_307(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:error:", 23, v3);
  }
  else
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v7;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully opened pairing window", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfPairingProgress:", 22);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __51__HMMTRAccessoryServer_getTransportTypeWithNodeID___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to get transport type for connected device(%@)", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v5, "sessionTransportType");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

uint64_t __71__HMMTRAccessoryServer_openPairingWindowForDuration_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_openPairingWindowForDuration:completionHandler:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
}

uint64_t __80__HMMTRAccessoryServer__updatedCharacteristicsForEventReport_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "event");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToNumber:", v4);

  return v5;
}

void __84__HMMTRAccessoryServer__updatedCharacteristicsForAttributeReport_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  _QWORD v24[4];
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "error");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "error");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      v27 = v8;
      v28 = 2112;
      v29 = v9;
      v30 = 2112;
      v31 = v10;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@Error: %@. Failed to handle a report for characteristic: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    objc_msgSend(v3, "characteristic");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addObject:", v12);

    +[HMMTRProtocolMap protocolMap](HMMTRProtocolMap, "protocolMap");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "characteristic");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "endpoint");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "clusterIDCharacteristicMap");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "getUpdatedLinkedCharacteristics:endpointID:clusterIDCharacteristicMap:", v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "addObjectsFromArray:", v17);
  }
  v18 = *(void **)(a1 + 32);
  objc_msgSend(v3, "characteristic");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __84__HMMTRAccessoryServer__updatedCharacteristicsForAttributeReport_completionHandler___block_invoke_284;
  v24[3] = &unk_250F22820;
  v23 = *(_OWORD *)(a1 + 64);
  v22 = (id)v23;
  v25 = v23;
  objc_msgSend(v18, "_updateAdditionalCharacteristicsFromCharacteristicUpdate:service:path:completionHandler:", v19, v20, v21, v24);

}

void __84__HMMTRAccessoryServer__updatedCharacteristicsForAttributeReport_completionHandler___block_invoke_286(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObjectsFromArray:", a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __84__HMMTRAccessoryServer__updatedCharacteristicsForAttributeReport_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    objc_msgSend(*(id *)(a1 + 40), "endpoint");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "cluster");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "attribute");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138544386;
    v12 = v5;
    v13 = 2112;
    v14 = v6;
    v15 = 2112;
    v16 = v7;
    v17 = 2112;
    v18 = v8;
    v19 = 2112;
    v20 = v9;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Updated characteristics %@ for Report endpoint:%@ cluster:%@ attribute:%@", (uint8_t *)&v11, 0x34u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void __84__HMMTRAccessoryServer__updatedCharacteristicsForAttributeReport_completionHandler___block_invoke_284(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObjectsFromArray:", a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __112__HMMTRAccessoryServer__updateAdditionalCharacteristicsFromCharacteristicUpdate_service_path_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "error");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x242656984]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "error");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v17 = 138543874;
      v18 = v9;
      v19 = 2112;
      v20 = v10;
      v21 = 2112;
      v22 = v11;
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_ERROR, "%{public}@Error: %@. Failed to handle a report for characteristic: %@", (uint8_t *)&v17, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(void **)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 48);
      v17 = 138543874;
      v18 = v12;
      v19 = 2112;
      v20 = v13;
      v21 = 2112;
      v22 = v14;
      _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_INFO, "%{public}@Updated additional characteristic %@ based on characteristic %@", (uint8_t *)&v17, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    v15 = *(void **)(a1 + 56);
    objc_msgSend(v3, "characteristic");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "addObject:", v16);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void __55__HMMTRAccessoryServer__handleUnmappedAttributeReport___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "chipDelegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "didUpdatePairingsForAccessoryServer:", *(_QWORD *)(a1 + 32));

}

uint64_t __53__HMMTRAccessoryServer_isDiscoverableWithCompletion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  const char *v6;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (objc_msgSend(*(id *)(a1 + 32), "removalInProgress"))
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
LABEL_5:

      objc_autoreleasePoolPop(v2);
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
    }
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v5;
    v6 = "%{public}@Do not discover server - Removal in progress";
LABEL_4:
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v8, 0xCu);

    goto LABEL_5;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "mtrDeviceStateReported")
    && (objc_msgSend(*(id *)(a1 + 32), "mtrDeviceConnected") & 1) == 0
    && objc_msgSend(*(id *)(a1 + 32), "_shouldUpdateUnreachableState"))
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_5;
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v5;
    v6 = "%{public}@Do not discover server - MTRDevice state is not reachable";
    goto LABEL_4;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 1);
}

void __61__HMMTRAccessoryServer_triggerEstablishingMatterSubscription__block_invoke(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    objc_msgSend(*(id *)(a1 + 32), "matterDevice");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_opt_respondsToSelector();

    if ((v3 & 1) != 0)
    {
      v4 = (void *)MEMORY[0x242656984]();
      v5 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = 138543362;
        v10 = v7;
        _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Calling MTRDevice _deviceMayBeReachable", (uint8_t *)&v9, 0xCu);

      }
      objc_autoreleasePoolPop(v4);
      objc_msgSend(*(id *)(a1 + 32), "matterDevice");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_deviceMayBeReachable");

    }
  }
}

void __42__HMMTRAccessoryServer__setupMatterDevice__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _BOOL8 v22;
  void *v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  objc_msgSend(v2, "controllerWrapper");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)MEMORY[0x242656984]();
  v5 = v2;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Setting up MTRDevice", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v9 = (void *)MEMORY[0x24BDDB678];
    objc_msgSend(v5, "nodeID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "unsignedLongLongValue");
    objc_msgSend(v5, "deviceController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "deviceWithNodeID:deviceController:", v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setMatterDevice:", v13);

    objc_msgSend(v5, "matterDevice");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "clientQueue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setDelegate:queue:", v5, v15);

    objc_msgSend(v5, "matterDevice");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v15) = objc_msgSend(v16, "deviceCachePrimed");

    objc_msgSend(v5, "reportDistributor");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if ((_DWORD)v15)
      objc_msgSend(v17, "allAttributesReady");
    else
      objc_msgSend(v17, "allAttributesNotReady");

    objc_msgSend(v5, "matterDevice");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "state");
    v22 = v21 == 1;

    objc_msgSend(v5, "setMtrDeviceStateReported:", v22);
    objc_msgSend(v5, "setMtrDeviceConnected:", v22);
    if (v21 != 1)
    {
      objc_msgSend(MEMORY[0x24BDD1880], "UUID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setInitialMTRDeviceStateTimeoutId:", v23);
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = __42__HMMTRAccessoryServer__setupMatterDevice__block_invoke_245;
      v25[3] = &unk_250F22458;
      v26 = v5;
      v27 = v23;
      v24 = v23;
      objc_msgSend(v26, "_startInitialReachableStateTimerWithCompletion:", v25);

    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v19;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Not setting up MTRDevice for a disabled accessory server", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }

}

uint64_t __42__HMMTRAccessoryServer__setupMatterDevice__block_invoke_246(uint64_t a1, void *a2, char a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if ((a3 & 1) == 0)
  {
    objc_msgSend(WeakRetained, "reportDistributor");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "allAttributesNotReady");

    objc_msgSend(v7, "setMatterDevice:", 0);
    v14 = (void *)MEMORY[0x242656984](objc_msgSend(v7, "_flushMTRDeviceReadReadyHandlers"));
    v15 = v7;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543362;
      v20 = v17;
      _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_INFO, "%{public}@Device controller wrapper is disabled.", (uint8_t *)&v19, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    if (v7)
      goto LABEL_5;
LABEL_9:
    v12 = 0;
    goto LABEL_10;
  }
  v8 = (void *)MEMORY[0x242656984]();
  v9 = v7;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543362;
    v20 = v11;
    _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Device controller wrapper is revoked and back online. Setting up MTRDevice again.", (uint8_t *)&v19, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (!v7)
    goto LABEL_9;
LABEL_5:
  v12 = objc_msgSend(v7, "isDisabled") ^ 1;
LABEL_10:

  return v12;
}

void __42__HMMTRAccessoryServer__setupMatterDevice__block_invoke_245(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(*(id *)(a1 + 32), "mtrDeviceStateReported") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "matterDevice");
    v2 = objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = (void *)v2;
      objc_msgSend(*(id *)(a1 + 32), "initialMTRDeviceStateTimeoutId");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = *(void **)(a1 + 40);

      if (v4 == v5)
      {
        v6 = (void *)MEMORY[0x242656984]();
        v7 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = 138543618;
          v11 = v9;
          v12 = 1024;
          v13 = 60;
          _os_log_impl(&dword_23E95B000, v8, OS_LOG_TYPE_INFO, "%{public}@No MTRDevice state was reported for %d seconds. Reporting unreachable state.", (uint8_t *)&v10, 0x12u);

        }
        objc_autoreleasePoolPop(v6);
        objc_msgSend(*(id *)(a1 + 32), "didUpdateReachability:", 0);
        objc_msgSend(*(id *)(a1 + 32), "_updateDelegateOfConnectionStatus:withError:", 0, 0);
      }
    }
  }
}

uint64_t __38__HMMTRAccessoryServer_setupReporting__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setupMatterDevice");
}

uint64_t __31__HMMTRAccessoryServer_disable__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_flushMTRDeviceReadReadyHandlers");
}

void __43__HMMTRAccessoryServer_discoverAccessories__block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[5];
  _QWORD block[5];
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(*(id *)(a1 + 32), "servicesEnumerated");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    if (objc_msgSend(v3, "_delegateRespondsToSelector:", sel_accessoryServer_didDiscoverAccessories_transaction_error_))
    {
      v4 = (void *)MEMORY[0x242656984]();
      v5 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v13 = v7;
        _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Did discover accessories", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v4);
      objc_msgSend(*(id *)(a1 + 32), "delegateQueue");
      v8 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __43__HMMTRAccessoryServer_discoverAccessories__block_invoke_239;
      block[3] = &unk_250F23DF0;
      block[4] = *(_QWORD *)(a1 + 32);
      dispatch_async(v8, block);

    }
    if (objc_msgSend(*(id *)(a1 + 32), "mtrDeviceConnected"))
      objc_msgSend(*(id *)(a1 + 32), "_updateDelegateOfConnectionStatus:withError:", 1, 0);
  }
  else if (objc_msgSend(v3, "serviceEnumerationFailed")
         && objc_msgSend(*(id *)(a1 + 32), "_delegateRespondsToSelector:", sel_accessoryServer_didDiscoverAccessories_transaction_error_))
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = __43__HMMTRAccessoryServer_discoverAccessories__block_invoke_2;
    v10[3] = &unk_250F23DF0;
    v10[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(v9, v10);

  }
}

void __43__HMMTRAccessoryServer_discoverAccessories__block_invoke_239(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");
  objc_msgSend(v5, "accessoryServer:didDiscoverAccessories:transaction:error:", v2, v4, 0, 0);

}

void __43__HMMTRAccessoryServer_discoverAccessories__block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Did fail discovering accessories", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:description:reason:suggestion:underlyingError:", 19, CFSTR("Accessory enumeration failed"), 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "accessoryServer:didDiscoverAccessories:transaction:error:", v7, 0, 0, v8);

}

uint64_t __74__HMMTRAccessoryServer_listPairingsWithCompletionQueue_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@CHIP Accessory List Pairings a WIP", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void __43__HMMTRAccessoryServer_commitStagedPairing__block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(*(id *)(a1 + 32), "pairedState");
  v3 = (void *)MEMORY[0x242656984]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v2 == 2)
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v7;
      _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@Committing staged server by marking as paired and notifying the delegate", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "_finalizePairing");
  }
  else
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@Ignoring attempt to commit a server that is not staged", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
}

void __68__HMMTRAccessoryServer__onUnpairFinishedWithError_queue_completion___block_invoke(uint64_t a1)
{
  void (**v2)(_QWORD, _QWORD);
  id v3;

  v2 = (void (**)(_QWORD, _QWORD))MEMORY[0x242656B10](*(_QWORD *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    v2[2](v2, *(_QWORD *)(a1 + 32));
    v2 = (void (**)(_QWORD, _QWORD))v3;
  }

}

void __43__HMMTRAccessoryServer__unpair_completion___block_invoke(uint64_t a1)
{
  void *v2;
  void (**v3)(id, void *);

  objc_msgSend(*(id *)(a1 + 32), "setRemoveReason:pairingEndContextWhenRemove:", 0, 0);
  v3 = (void (**)(id, void *))MEMORY[0x242656B10](*(_QWORD *)(a1 + 40));
  if (v3)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3[2](v3, v2);

  }
}

void __43__HMMTRAccessoryServer__unpair_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  void (**v3)(id, void *);

  objc_msgSend(*(id *)(a1 + 32), "setRemoveReason:pairingEndContextWhenRemove:", 0, 0);
  v3 = (void (**)(id, void *))MEMORY[0x242656B10](*(_QWORD *)(a1 + 40));
  if (v3)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3[2](v3, v2);

  }
}

void __43__HMMTRAccessoryServer__unpair_completion___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  _BYTE buf[12];
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v10;
      v26 = 2112;
      v27 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Error: %@. Failed to establish a connection to the device for unpairing. The device will not be notified of removal", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "_onUnpairFinishedWithError:queue:completion:", v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    v11 = objc_alloc(MEMORY[0x24BE3F168]);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithQueue:", v12);

    *(_QWORD *)buf = _HMFThreadLocalAsyncContextPush();
    +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "runBlockForAllEndpointsWithClusterID:device:callbackQueue:block:", &unk_250F3FC18, v5, *(_QWORD *)(a1 + 40), &__block_literal_global_231_8317);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __43__HMMTRAccessoryServer__unpair_completion___block_invoke_2_233;
    v20[3] = &unk_250F22718;
    v16 = v5;
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(void **)(a1 + 40);
    v21 = v16;
    v22 = v17;
    v23 = v18;
    v24 = *(id *)(a1 + 48);
    v19 = (id)objc_msgSend(v15, "finally:", v20);

    _HMFThreadLocalAsyncContextPop();
  }

}

uint64_t __43__HMMTRAccessoryServer__unpair_completion___block_invoke_2_233(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];
  id v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "clientQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __43__HMMTRAccessoryServer__unpair_completion___block_invoke_3_234;
  v6[3] = &unk_250F228C0;
  v4 = *(void **)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v4;
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v2, "unpairDevice:completionHandler:", v3, v6);

  return 1;
}

void __43__HMMTRAccessoryServer__unpair_completion___block_invoke_3_234(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Unpair Status: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "_onUnpairFinishedWithError:queue:completion:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

uint64_t __43__HMMTRAccessoryServer__unpair_completion___block_invoke_229()
{
  return objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
}

void __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD1540], "hmmtrErrorWithCode:", 12);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "invalidateAccessoryServer:reason:", v3, v4);

  objc_msgSend(*(id *)(a1 + 40), "clientQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_2;
  block[3] = &unk_250F240D8;
  v6 = *(void **)(a1 + 48);
  block[4] = *(_QWORD *)(a1 + 40);
  v8 = v6;
  v9 = *(id *)(a1 + 56);
  dispatch_async(v5, block);

}

void __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_222(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD block[5];
  id v17;
  NSObject *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v21 = v5;
    v22 = 2048;
    v23 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: unpair job(%lu) started.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_223;
  block[3] = &unk_250F22B48;
  v10 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v17 = v10;
  v11 = *(id *)(a1 + 48);
  v18 = v7;
  v19 = v11;
  v12 = v7;
  dispatch_async(v8, block);

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  v15[0] = v9;
  v15[1] = 3221225472;
  v15[2] = __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_2_225;
  v15[3] = &unk_250F226B0;
  v14 = *(_QWORD *)(a1 + 56);
  v15[4] = *(_QWORD *)(a1 + 32);
  v15[5] = v14;
  dispatch_group_notify(v12, v13, v15);

}

uint64_t __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_226(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_223(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v12 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Request to remove pairing for current controller", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_224;
  v8[3] = &unk_250F23CD0;
  v10 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 48);
  objc_msgSend(v6, "_unpair:completion:", v7, v8);

}

void __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_2_225(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Characteristics Operation Queue: unpair job(%lu) complete.", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_224(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __76__HMMTRAccessoryServer_removePairingForCurrentControllerOnQueue_completion___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onUnpairFinishedWithError:queue:completion:", 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __72__HMMTRAccessoryServer_removePairing_completionQueue_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@CHIP Accessory Remove Pairing is a WIP. Removal requested for pairing identity %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t __69__HMMTRAccessoryServer_addPairing_completionQueue_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@CHIP Accessory Add Pairing is a WIP", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void __45__HMMTRAccessoryServer_stopPairingWithError___block_invoke(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)MEMORY[0x242656984]();
  v4 = (id *)WeakRetained;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v19 = v6;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_INFO, "%{public}@Attempting to stop pairing.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(v4, "setPairingProgress:", 0);
  objc_msgSend(v4, "setPairingTimer:", 0);
  objc_msgSend(v4, "deviceController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4[55], "unsignedLongLongValue");
  v17 = 0;
  objc_msgSend(v7, "stopDevicePairing:error:", v8, &v17);
  v9 = v17;

  if (v9)
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = v4;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v13;
      v20 = 2112;
      v21 = v9;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory failed to stop Pairing with Error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }
  objc_msgSend(v4, "clientQueue");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __45__HMMTRAccessoryServer_stopPairingWithError___block_invoke_219;
  v15[3] = &unk_250F22688;
  objc_copyWeak(&v16, v1);
  objc_msgSend(v4, "removePairingForCurrentControllerOnQueue:completion:", v14, v15);

  objc_destroyWeak(&v16);
}

void __45__HMMTRAccessoryServer_stopPairingWithError___block_invoke_219(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x242656984]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v8;
    v16 = 2112;
    v17 = v3;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Pairing stopped and accessory pairing removed with error: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v9 = (void *)MEMORY[0x242656984]();
    v10 = v6;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v12;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Resetting storage state after pairing error", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v10, "browser");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setupStorageStateAndRediscoverAccessoriesForHomeFabricID:", 0);

  }
}

void __78__HMMTRAccessoryServer_tryPairingPassword_onboardingSetupPayloadString_error___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(*(id *)(a1 + 40), "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), &stru_250F24B08);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "numberWithLongLong:", objc_msgSend(v3, "longLongValue"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setSetUpPINCode:", v4);

  v5 = (void *)MEMORY[0x242656984](objc_msgSend(*(id *)(a1 + 32), "setOnboardingSetupPayloadString:", *(_QWORD *)(a1 + 48)));
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "setUpPINCode");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138544130;
    v22 = v8;
    v23 = 2112;
    v24 = v9;
    v25 = 2112;
    v26 = v10;
    v27 = 2112;
    v28 = v11;
    _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Move forward with pairing a discovered accessory with password: %@, used PIN code: %@, onboarding setup payload: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  v12 = *(void **)(a1 + 32);
  v19 = 0;
  v20 = 0;
  objc_msgSend(v12, "_startPairingWithError:pairingEndContext:", &v20, &v19);
  v13 = v20;
  v14 = v19;
  if (v13)
  {
    v15 = (void *)MEMORY[0x242656984]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v18;
      v23 = 2112;
      v24 = v13;
      _os_log_impl(&dword_23E95B000, v17, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory pairing failed with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(*(id *)(a1 + 32), "setPairedState:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v13, v14);
  }

}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v9 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Prompting for setup code for discovered accessory", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "delegateQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_207;
  block[3] = &unk_250F23DF0;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v6, block);

}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_3;
  block[3] = &unk_250F23378;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v15 = v9;
  v16 = v5;
  v17 = *(id *)(a1 + 48);
  v10 = v5;
  v11 = v6;
  dispatch_async(v7, block);

}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_208(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD block[4];
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_2_209;
  block[3] = &unk_250F23378;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v9 = v3;
  v10 = v5;
  v11 = v6;
  v12 = *(id *)(a1 + 48);
  v13 = *(id *)(a1 + 56);
  v7 = v3;
  dispatch_async(v4, block);

}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_2_209(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _QWORD v37[4];
  id v38;
  uint64_t v39;
  id v40;
  _QWORD v41[4];
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v47 = v5;
      _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to create Matter Key Pairs for pairing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 11);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 1, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "_handlePairingFailureWithError:context:", v6, v7);
LABEL_5:

    goto LABEL_6;
  }
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v8 = *(void **)(a1 + 48);
    if (v8 && !objc_msgSend(v8, "isEqual:", &unk_250F3FC00))
    {
      objc_msgSend(*(id *)(a1 + 40), "browser");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "appleHomeFabricWithID:", *(_QWORD *)(a1 + 48));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "browser");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "pairingTargetHomeUUID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "appleHomeFabricWithUUID:", v10);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (v6)
    {
      v21 = objc_msgSend(*(id *)(a1 + 40), "shouldPairWithoutResident") ^ 1;
      objc_msgSend(*(id *)(a1 + 40), "pairingTargetHomeUUID");
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 40), "browser");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23;
      if (v22)
      {
        objc_msgSend(*(id *)(a1 + 40), "pairingTargetHomeUUID");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v24, "supportsCommissioningCertificateRetrievalForHomeUUID:", v25);

      }
      else
      {
        v26 = objc_msgSend(v23, "supportsCommissioningCertificateRetrievalForCurrentlyPairingAccessory");
      }

      v34 = objc_msgSend(*(id *)(a1 + 56), "isOwnerPairing") ^ 1 | v26 & v21;
      v41[0] = MEMORY[0x24BDAC760];
      v41[1] = 3221225472;
      v41[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_210;
      v41[3] = &unk_250F229B0;
      v45 = *(id *)(a1 + 64);
      v35 = *(id *)(a1 + 48);
      v36 = *(_QWORD *)(a1 + 40);
      v42 = v35;
      v43 = v36;
      v44 = v6;
      objc_msgSend(v44, "loadFabricAndControllerDataForPairing:fetchFromResident:completion:", 1, v34, v41);

      v7 = v45;
    }
    else
    {
      v27 = (void *)MEMORY[0x242656984]();
      v28 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = *(_QWORD *)(a1 + 48);
        objc_msgSend(*(id *)(a1 + 40), "pairingTargetHomeUUID");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v47 = v30;
        v48 = 2112;
        v49 = v31;
        v50 = 2112;
        v51 = v32;
        _os_log_impl(&dword_23E95B000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch Fabric object for target fabric ID %@ or Home UUID %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v27);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 1, v7);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "_handlePairingFailureWithError:context:", v7, v33);

    }
    goto LABEL_5;
  }
  objc_msgSend(*(id *)(a1 + 40), "pairingTargetHomeUUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "browser");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v11)
  {
    objc_msgSend(*(id *)(a1 + 40), "pairingTargetHomeUUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v13, "supportsCommissioningCertificateRetrievalForHomeUUID:", v14);

  }
  else
  {
    v15 = objc_msgSend(v12, "supportsCommissioningCertificateRetrievalForCurrentlyPairingAccessory");
  }

  objc_msgSend(*(id *)(a1 + 40), "storage");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = *(_QWORD *)(a1 + 48);
  v18 = objc_msgSend(*(id *)(a1 + 56), "isOwnerPairing");
  v37[0] = MEMORY[0x24BDAC760];
  v37[1] = 3221225472;
  v37[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_3_212;
  v37[3] = &unk_250F228C0;
  v40 = *(id *)(a1 + 64);
  v19 = *(id *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 40);
  v38 = v19;
  v39 = v20;
  objc_msgSend(v16, "fetchCertForFabricWithID:isOwner:forPairing:forceFetchFromResident:completion:", v17, v18, 1, v15, v37);

  v6 = v40;
LABEL_6:

}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_210(id *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;

  if (a2)
  {
    (*((void (**)(void))a1[7] + 2))();
  }
  else
  {
    objc_msgSend(a1[5], "browser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[6], "fabricID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_2_211;
    v5[3] = &unk_250F240D8;
    v8 = a1[7];
    v6 = a1[6];
    v7 = 0;
    objc_msgSend(v3, "setupStorageStateForHomeFabricID:completion:", v4, v5);

  }
}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_3_212(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "browser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 32);
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_4;
    v6[3] = &unk_250F22660;
    v5 = *(id *)(a1 + 48);
    v7 = 0;
    v8 = v5;
    objc_msgSend(v3, "setupStorageStateAfterCertFetchForHomeFabricID:completion:", v4, v6);

  }
}

uint64_t __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 32));
}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_2_211(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "fabricID");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(a1 + 40));

}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(void **)(a1 + 48);
      v7 = *(_QWORD *)(a1 + 32);
      v36 = 138543874;
      v37 = v5;
      v38 = 2112;
      v39 = v6;
      v40 = 2112;
      v41 = v7;
      _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Failed to fetch certificates required for pairing on fabricID %@ with error %@", (uint8_t *)&v36, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
    if (objc_msgSend(*(id *)(a1 + 32), "isHAPError") && objc_msgSend(*(id *)(a1 + 32), "code") == 36)
    {
      v8 = objc_msgSend(*(id *)(a1 + 32), "copy");
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 11, 0);
      v8 = objc_claimAutoreleasedReturnValue();
    }
    v9 = (void *)v8;
    v10 = *(void **)(a1 + 32);
    goto LABEL_25;
  }
  objc_msgSend(*(id *)(a1 + 40), "storage");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "fabricID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isEqual:", *(_QWORD *)(a1 + 56));

  if ((v13 & 1) != 0)
  {
    v14 = *(void **)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 40), "fabricID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v14, "isEqual:", v15) & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 40), "controllerWrapper");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
LABEL_20:
        objc_msgSend(*(id *)(a1 + 40), "browser");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "fabricID");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "addFabricWithActiveClientForFabricID:", v33);

        (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
        return;
      }
    }
    else
    {

    }
    v24 = (void *)MEMORY[0x242656984]();
    v25 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = *(void **)(a1 + 56);
      v36 = 138543618;
      v37 = v27;
      v38 = 2112;
      v39 = v28;
      _os_log_impl(&dword_23E95B000, v26, OS_LOG_TYPE_INFO, "%{public}@Pairing accessory requires retrieving controller wrapper with fabric ID: %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(*(id *)(a1 + 40), "browser");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "currentHomeFabricDeviceControllerWrapper");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setControllerWrapper:", v30);

    objc_msgSend(*(id *)(a1 + 40), "controllerWrapper");
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (v31)
    {
      objc_msgSend(*(id *)(a1 + 40), "setFabricID:", *(_QWORD *)(a1 + 56));
      goto LABEL_20;
    }
    v17 = (void *)MEMORY[0x242656984]();
    v18 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = *(void **)(a1 + 56);
      v36 = 138543618;
      v37 = v20;
      v38 = 2112;
      v39 = v34;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unable to get controller wrapper for fabric ID: %@", (uint8_t *)&v36, 0x16u);
      goto LABEL_23;
    }
  }
  else
  {
    v17 = (void *)MEMORY[0x242656984]();
    v18 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "storage");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "fabricID");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = *(_QWORD *)(a1 + 56);
      v36 = 138543874;
      v37 = v20;
      v38 = 2112;
      v39 = v22;
      v40 = 2112;
      v41 = v23;
      _os_log_impl(&dword_23E95B000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unexpected storage fabric ID %@ after generating cert for fabric ID %@", (uint8_t *)&v36, 0x20u);

LABEL_23:
    }
  }

  objc_autoreleasePoolPop(v17);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 11, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
LABEL_25:
  +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 1, v10);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "_handlePairingFailureWithError:context:", v9, v35);

}

void __90__HMMTRAccessoryServer__startLocallyDiscoveredAccessoryServerPairingWithRequest_fabricID___block_invoke_207(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accessoryServer:promptUserForPasswordWithType:", *(_QWORD *)(a1 + 32), 1);

}

void __48__HMMTRAccessoryServer_startPairingWithRequest___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v21 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Starting pairing", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "setOnboardingSetupPayloadString:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_setupPairingProperties");
  if (objc_msgSend(*(id *)(a1 + 32), "locallyDiscovered"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setupPayloadString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "_delegateRespondsToSelector:", sel_accessoryServer_promptUserForPasswordWithType_))
      {
        objc_msgSend(*(id *)(a1 + 40), "chipFabricID");
        v8 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "_startLocallyDiscoveredAccessoryServerPairingWithRequest:fabricID:", *(_QWORD *)(a1 + 40), v8);
        goto LABEL_11;
      }
      v14 = (void *)MEMORY[0x242656984]();
      v15 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v21 = v17;
        _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to dispatch setup code prompt request to delegate", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BE3EBB0], 11, 0);
      v8 = (id)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 1, v8);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "setStageNetworkScanRequested:", objc_msgSend(*(id *)(a1 + 40), "doNetworkScan"));
  v7 = *(void **)(a1 + 32);
  v18 = 0;
  v19 = 0;
  objc_msgSend(v7, "_startPairingWithError:pairingEndContext:", &v19, &v18);
  v8 = v19;
  v9 = v18;
  if (v8)
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v13;
      v22 = 2112;
      v23 = v8;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory pairing failed with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
LABEL_9:
    objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v8, v9);
  }

LABEL_11:
}

uint64_t __54__HMMTRAccessoryServer_abortStagingWithError_context___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Aborting staging", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "deviceController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "nodeID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stopDevicePairing:error:", objc_msgSend(v7, "unsignedLongLongValue"), 0);

  return objc_msgSend(*(id *)(a1 + 32), "_pairingComplete:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __71__HMMTRAccessoryServer_validateAttestationDeviceInfo_error_completion___block_invoke(id *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  _QWORD v13[5];
  id v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1[4], "stageDeviceCredentialHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = objc_alloc(MEMORY[0x24BDDB840]);
    objc_msgSend(a1[5], "certificateDeclaration");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "dacCertificate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "dacPAICertificate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v3, "initWithCertificationDeclaration:deviceAttestationCertificate:productAttestationIntermediateCertificate:", v4, v5, v6);

    v8 = (void *)MEMORY[0x242656984]();
    v9 = a1[4];
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v16 = v11;
      _os_log_impl(&dword_23E95B000, v10, OS_LOG_TYPE_INFO, "%{public}@Calling custom device credential validation handler", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(a1[4], "stageDeviceCredentialHandler");
    v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __71__HMMTRAccessoryServer_validateAttestationDeviceInfo_error_completion___block_invoke_204;
    v13[3] = &unk_250F23CD0;
    v13[4] = a1[4];
    v14 = a1[6];
    ((void (**)(_QWORD, void *, _QWORD *))v12)[2](v12, v7, v13);

  }
  else
  {
    (*((void (**)(id, _QWORD))a1[6] + 2))(a1[6], 0);
  }
}

void __71__HMMTRAccessoryServer_validateAttestationDeviceInfo_error_completion___block_invoke_204(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Completed custom device credential validation with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __189__HMMTRAccessoryServer_startStagedPairingWithDeviceCredentialHandler_wifiScanResultsHandler_threadScanResultsHandler_readyToCancelHandler_progressUpdateHandler_scanningNetworks_completion___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint8_t buf[4];
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "setPairedState:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setStageDeviceCredentialHandler:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setStageWiFiScanResultsHandler:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "setStageThreadScanResultsHandler:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "setStageProgressUpdateHandler:", *(_QWORD *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 32), "setStageNetworkScanRequested:", *(unsigned __int8 *)(a1 + 88));
  objc_msgSend(*(id *)(a1 + 32), "setStageCompletion:", *(_QWORD *)(a1 + 72));
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 80);
  v9 = 0;
  objc_msgSend(v2, "_startPairingWithReadyToCancelHandler:error:pairingEndContext:", v3, &v9, 0);
  v4 = v9;
  if (v4)
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v4;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory pairing failed with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    objc_msgSend(*(id *)(a1 + 32), "setPairedState:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setStageWiFiScanResultsHandler:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setStageThreadScanResultsHandler:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setStageProgressUpdateHandler:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setStageNetworkScanRequested:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setStageCompletion:", 0);
  }

}

void __57__HMMTRAccessoryServer_startStagedPairingWithCompletion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "setPairedState:", 1);
  v2 = *(void **)(a1 + 32);
  v12 = 0;
  objc_msgSend(v2, "_startPairingWithError:pairingEndContext:", &v12, 0);
  v3 = v12;
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v8;
      v15 = 2112;
      v16 = v4;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_ERROR, "%{public}@CHIP Accessory pairing failed with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "domain");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isEqualToString:", *MEMORY[0x24BDDB490]);

    if (v10)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 15);
      v11 = objc_claimAutoreleasedReturnValue();

      v4 = (void *)v11;
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    objc_msgSend(*(id *)(a1 + 32), "setPairedState:", 0);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setStageCompletion:", *(_QWORD *)(a1 + 40));
  }
}

void __37__HMMTRAccessoryServer_timerDidFire___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      v16 = 138543874;
      v17 = v10;
      v18 = 2112;
      v19 = v11;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@State Capture: completed for server:%@ with Error: %@.", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    v12 = (void *)objc_msgSend(v5, "copy");
    objc_msgSend(*(id *)(a1 + 32), "setPartsListStateCaptureInformation:", v12);

    if (objc_msgSend(*(id *)(a1 + 32), "partsListStateCaptureHandle"))
      objc_msgSend(*(id *)(a1 + 32), "_deregisterPartsListStateCaptureHandler");
    v13 = *(void **)(a1 + 32);
    v14 = objc_msgSend(v13, "partsListStateCaptureHandle");
    objc_msgSend(*(id *)(a1 + 32), "partsListStateCaptureInformation");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_registerStateCaptureHandler:stateCaptureInformation:", v14, v15);

  }
}

void __37__HMMTRAccessoryServer_timerDidFire___block_invoke_202(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      v16 = 138543874;
      v17 = v10;
      v18 = 2112;
      v19 = v11;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@State Capture: completed for server:%@ with Error: %@.", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    v12 = (void *)objc_msgSend(v5, "copy");
    objc_msgSend(*(id *)(a1 + 32), "setDeviceConnectedStateCaptureInformation:", v12);

    if (objc_msgSend(*(id *)(a1 + 32), "deviceConnectedStateHandle"))
      objc_msgSend(*(id *)(a1 + 32), "_deregisterDeviceConnectedStateCaptureHandler");
    v13 = *(void **)(a1 + 32);
    v14 = objc_msgSend(v13, "deviceConnectedStateHandle");
    objc_msgSend(*(id *)(a1 + 32), "deviceConnectedStateCaptureInformation");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_registerStateCaptureHandler:stateCaptureInformation:", v14, v15);

  }
}

void __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  _QWORD v26[4];
  uint64_t v27;
  id v28;
  id v29;
  _QWORD block[5];
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (objc_msgSend(*(id *)(a1 + 32), "isDisabled"))
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v5;
      _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_ERROR, "%{public}@Accessory server disabled by the time operation is executed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    v6 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "browser");
    v8 = objc_claimAutoreleasedReturnValue();
    if (v8
      && (v9 = (void *)v8,
          objc_msgSend(*(id *)(a1 + 32), "browser"),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          v11 = objc_opt_respondsToSelector(),
          v10,
          v9,
          (v11 & 1) != 0))
    {
      v12 = (void *)MEMORY[0x242656984]();
      v13 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v15;
        _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_INFO, "%{public}@Connecting to an accessory for an operation", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v12);
      objc_msgSend(*(id *)(a1 + 32), "browser");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = *(unsigned __int8 *)(a1 + 56);
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 3221225472;
      v26[2] = __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke_192;
      v26[3] = &unk_250F22598;
      v18 = *(void **)(a1 + 40);
      v27 = *(_QWORD *)(a1 + 32);
      v28 = v18;
      v29 = *(id *)(a1 + 48);
      objc_msgSend(v16, "connectToAccessoryWhenAllowed:highPriority:completion:", v27, v17, v26);

      v19 = v28;
    }
    else
    {
      v20 = (void *)MEMORY[0x242656984]();
      v21 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v23;
        _os_log_impl(&dword_23E95B000, v22, OS_LOG_TYPE_INFO, "%{public}@Executing an operation without connecting to the accessory", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(*(id *)(a1 + 32), "clientQueue");
      v24 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke_191;
      block[3] = &unk_250F22548;
      v25 = *(void **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v31 = v25;
      v32 = *(id *)(a1 + 48);
      dispatch_async(v24, block);

      v19 = v31;
    }

  }
}

uint64_t __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke_194(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke_191(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (objc_msgSend(*(id *)(a1 + 32), "isDisabled"))
  {
    v2 = (void *)MEMORY[0x242656984]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v5;
      _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_ERROR, "%{public}@Accessory server disabled by the time operation is executed", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    v6 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
  }
}

void __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke_192(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x242656984]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v17 = v7;
    v18 = 2112;
    v19 = v3;
    _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Connected to an accessory for an operation with error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[4], "clientQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke_193;
  v11[3] = &unk_250F22570;
  v12 = v3;
  v9 = a1[5];
  v13 = a1[4];
  v14 = v9;
  v15 = a1[6];
  v10 = v3;
  dispatch_async(v8, v11);

}

void __72__HMMTRAccessoryServer_queueAccessoryOperation_highPriority_completion___block_invoke_193(uint64_t a1)
{
  void (*v2)(void);
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_8:
    v2();
    return;
  }
  if (!objc_msgSend(*(id *)(a1 + 40), "isDisabled"))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    v2 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_8;
  }
  v3 = (void *)MEMORY[0x242656984]();
  v4 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v6;
    _os_log_impl(&dword_23E95B000, v5, OS_LOG_TYPE_ERROR, "%{public}@Accessory server disabled by the time operation is executed", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v7 = *(_QWORD *)(a1 + 48);
  objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

}

void __117__HMMTRAccessoryServer__findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "_pairingInProgressForMatterSupportFallback"))
  {
    if (v6)
    {
      v7 = (void *)MEMORY[0x242656984]();
      v8 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v19 = v10;
        v20 = 2112;
        v21 = v6;
        _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to read commissioning window status: %@. Moving on to next.", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
      objc_msgSend(*(id *)(a1 + 32), "findSystemCommissionerPairingMatchingSetupPayload:systemCommissionerPairings:pairingManager:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else if (objc_msgSend(v5, "isEqual:", &unk_250F3FC00))
    {
      objc_msgSend(*(id *)(a1 + 32), "clientQueue");
      v11 = objc_claimAutoreleasedReturnValue();
      v16[0] = MEMORY[0x24BDAC760];
      v16[1] = 3221225472;
      v16[2] = __117__HMMTRAccessoryServer__findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke_185;
      v16[3] = &unk_250F22458;
      v16[4] = *(_QWORD *)(a1 + 32);
      v17 = *(id *)(a1 + 64);
      dispatch_async(v11, v16);

    }
    else
    {
      v12 = (void *)MEMORY[0x242656984]();
      v13 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v19 = v15;
        v20 = 2112;
        v21 = v5;
        _os_log_impl(&dword_23E95B000, v14, OS_LOG_TYPE_ERROR, "%{public}@System commissioner pairing commissioning window is open (%@). This must not be used as staged accessory for next pairing to avoid disrupting other on-going pairing attempt.", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
      objc_msgSend(*(id *)(a1 + 32), "_retryPairing");
    }
  }

}

void __117__HMMTRAccessoryServer__findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke_185(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  id v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(*(id *)(a1 + 32), "_pairingInProgressForMatterSupportFallback") & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "browser");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      objc_msgSend(*(id *)(a1 + 40), "nodeID");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __117__HMMTRAccessoryServer__findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke_186;
      v15[3] = &unk_250F22520;
      v4 = *(void **)(a1 + 40);
      v15[4] = *(_QWORD *)(a1 + 32);
      v16 = v4;
      objc_msgSend(v2, "accessoryServerForSystemCommissionerDeviceWithNodeID:completionHandler:", v3, v15);

    }
    else
    {
      v9 = (void *)MEMORY[0x242656984]();
      v10 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v18 = v12;
        _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_ERROR, "%{public}@No accessory server browser. Aborting attempt to return system commissioner accessory as staged accessory.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(MEMORY[0x24BDD1540], "hapErrorWithCode:", 15);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMMTRAccessoryPairingEndContext hmmtrContextWithStep:error:](HMMTRAccessoryPairingEndContext, "hmmtrContextWithStep:error:", 2, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "_handlePairingFailureWithError:context:", v13, v14);

    }
  }
  else
  {
    v5 = (void *)MEMORY[0x242656984]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v18 = v8;
      _os_log_impl(&dword_23E95B000, v7, OS_LOG_TYPE_INFO, "%{public}@Pairing timed out already when matching system commissioner pairing was verified to be connected.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }
}

void __117__HMMTRAccessoryServer__findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke_186(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __117__HMMTRAccessoryServer__findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke_2;
  block[3] = &unk_250F224F8;
  v5 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, block);

}

void __117__HMMTRAccessoryServer__findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(*(id *)(a1 + 32), "_pairingInProgressForMatterSupportFallback") & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = (void *)MEMORY[0x242656984]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v2)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = *(void **)(a1 + 40);
        v16 = 138543618;
        v17 = v7;
        v18 = 2112;
        v19 = v8;
        _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_INFO, "%{public}@Returning system commissioner device as staged accessory server: %@", (uint8_t *)&v16, 0x16u);

      }
      objc_autoreleasePoolPop(v3);
      objc_msgSend(*(id *)(a1 + 32), "setPairedState:", 3);
      objc_msgSend(*(id *)(a1 + 32), "stageCompletion");
      v9 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v9[2](v9, 1, *(_QWORD *)(a1 + 40), 0);

      objc_msgSend(*(id *)(a1 + 32), "setStageCompletion:", 0);
    }
    else
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543618;
        v17 = v14;
        v18 = 2112;
        v19 = v15;
        _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Could not fetch accessory server for system commissioner pairing %@", (uint8_t *)&v16, 0x16u);

      }
      objc_autoreleasePoolPop(v3);
      objc_msgSend(*(id *)(a1 + 32), "_retryPairing");
    }
  }
  else
  {
    v10 = (void *)MEMORY[0x242656984]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v13;
      _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_INFO, "%{public}@Pairing timed out already when connected staged server was retrieved", (uint8_t *)&v16, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
  }
}

uint64_t __116__HMMTRAccessoryServer_findSystemCommissionerPairingMatchingSetupPayload_systemCommissionerPairings_pairingManager___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_findSystemCommissionerPairingMatchingSetupPayload:systemCommissionerPairings:pairingManager:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void __66__HMMTRAccessoryServer__returnMatterSupportPairingAsStagedPairing__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "findSystemCommissionerPairingMatchingSetupPayload:systemCommissionerPairings:pairingManager:", *(_QWORD *)(a1 + 40), v5, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch system commissioner pairings as fallback for staged pairing: %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "_retryPairing");
  }

}

void __99__HMMTRAccessoryServer__tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[5];
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)MEMORY[0x242656984]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v13;
    v28 = 2112;
    v29 = v9;
    _os_log_impl(&dword_23E95B000, v12, OS_LOG_TYPE_DEBUG, "%{public}@System commissioner open commissioning window completed with error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if ((objc_msgSend(*(id *)(a1 + 32), "_pairingInProgressForMatterSupportFallback") & 1) != 0)
  {
    if (v9)
    {
      v14 = (void *)MEMORY[0x242656984]();
      v15 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v17;
        v28 = 2112;
        v29 = v9;
        _os_log_impl(&dword_23E95B000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to open commissioning window using system commissioner pairing: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(*(id *)(a1 + 32), "tryPairingWithOnboardingPayload:systemCommissionerPairings:pairingManager:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "browser");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "fabricID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = MEMORY[0x24BDAC760];
      v24[1] = 3221225472;
      v24[2] = __99__HMMTRAccessoryServer__tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke_182;
      v24[3] = &unk_250F22458;
      v24[4] = *(_QWORD *)(a1 + 32);
      v25 = v7;
      objc_msgSend(v22, "setupStorageStateForHomeFabricID:completion:", v23, v24);

    }
  }
  else
  {
    v18 = (void *)MEMORY[0x242656984]();
    v19 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v21;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_INFO, "%{public}@Pairing timed out already. Discarding open commissioning window completion.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
  }

}

void __99__HMMTRAccessoryServer__tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke_182(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "clientQueue");
  v2 = objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = __99__HMMTRAccessoryServer__tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke_2;
  v5[3] = &unk_250F22458;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  dispatch_async(v2, v5);

}

void __99__HMMTRAccessoryServer__tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  _QWORD block[5];
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v25 = 0;
  objc_msgSend(MEMORY[0x24BDDB810], "setupPayloadWithOnboardingPayload:error:", v2, &v25);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v25;
  v5 = *(void **)(a1 + 40);
  objc_msgSend(v5, "browser");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setCommissioneeAccessoryServer:", v5);

  v7 = (void *)MEMORY[0x242656984]();
  v8 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    v27 = v10;
    v28 = 2112;
    v29 = v11;
    _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempting to pair using new setup code as fallback: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 40), "deviceController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v13 = *(void **)(a1 + 40);
    objc_msgSend(v13, "clientQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setDeviceControllerDelegate:queue:", v13, v14);

    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 440);
    v24 = v4;
    objc_msgSend(v12, "setupCommissioningSessionWithPayload:newNodeID:error:", v3, v15, &v24);
    v16 = v24;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDDB490], 6, 0);
    v16 = (id)objc_claimAutoreleasedReturnValue();
  }
  v17 = v16;

  if (v17)
  {
    v18 = (void *)MEMORY[0x242656984]();
    v19 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v21;
      v28 = 2112;
      v29 = v17;
      _os_log_impl(&dword_23E95B000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to setup commissioning session with MatterSupport ECM: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(*(id *)(a1 + 40), "clientQueue");
    v22 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __99__HMMTRAccessoryServer__tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke_183;
    block[3] = &unk_250F23DF0;
    block[4] = *(_QWORD *)(a1 + 40);
    dispatch_async(v22, block);

  }
}

uint64_t __99__HMMTRAccessoryServer__tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke_183(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_retryPairing");
}

uint64_t __98__HMMTRAccessoryServer_tryPairingWithOnboardingPayload_systemCommissionerPairings_pairingManager___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_tryPairingWithOnboardingPayload:systemCommissionerPairings:pairingManager:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void __53__HMMTRAccessoryServer__tryPairingUsingMatterSupport__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  _QWORD block[5];
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "tryPairingWithOnboardingPayload:systemCommissionerPairings:pairingManager:", *(_QWORD *)(a1 + 40), v5, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v7 = (void *)MEMORY[0x242656984]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v10;
      v15 = 2112;
      v16 = v6;
      _os_log_impl(&dword_23E95B000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch system commissioner pairings to try matching setup payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "clientQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __53__HMMTRAccessoryServer__tryPairingUsingMatterSupport__block_invoke_179;
    block[3] = &unk_250F23DF0;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(v11, block);

  }
}

uint64_t __53__HMMTRAccessoryServer__tryPairingUsingMatterSupport__block_invoke_179(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_retryPairing");
}

void __55__HMMTRAccessoryServer_startPairingMetricWithActivity___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  const __CFString *v35;
  NSObject *v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  const __CFString *v40;
  __int16 v41;
  const __CFString *v42;
  __int16 v43;
  const __CFString *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  const __CFString *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  const __CFString *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  const __CFString *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  const __CFString *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  const __CFString *v64;
  __int16 v65;
  void *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 448), *(id *)(a1 + 40));
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v2;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "communicationProtocol"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "category");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "vendorID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "productID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "discoveredOverBLE"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "knownToSystemCommissioner"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138546946;
    v38 = v5;
    v39 = 2114;
    v40 = CFSTR("stagedPairingAccessoryInfo");
    v41 = 2112;
    v42 = CFSTR("Accessory Info");
    v43 = 2114;
    v44 = CFSTR("communicationProtocol");
    v45 = 2112;
    v46 = v6;
    v47 = 2114;
    v48 = CFSTR("categoryNumber");
    v49 = 2112;
    v50 = v7;
    v51 = 2114;
    v52 = CFSTR("vendorNumber");
    v53 = 2112;
    v54 = v8;
    v55 = 2114;
    v56 = CFSTR("productID");
    v57 = 2112;
    v58 = v9;
    v59 = 2114;
    v60 = CFSTR("accessoryDiscoveredOverBLE");
    v61 = 2112;
    v62 = v10;
    v63 = 2114;
    v64 = CFSTR("accessoryKnownToSystemCommissioner");
    v65 = 2112;
    v66 = v11;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x98u);

    v2 = v33;
  }

  objc_autoreleasePoolPop(v2);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_alloc(MEMORY[0x24BE4F1D0]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "communicationProtocol"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "category");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "vendorID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "productID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "discoveredOverBLE"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "knownToSystemCommissioner"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(v12, "initWithTag:data:", CFSTR("stagedPairingAccessoryInfo"), v18, CFSTR("communicationProtocol"), v32, CFSTR("categoryNumber"), v13, CFSTR("vendorNumber"), v14, CFSTR("productID"), v15, CFSTR("accessoryDiscoveredOverBLE"), v16, CFSTR("accessoryKnownToSystemCommissioner"), v17);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 448), "tagProcessorList");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "submitTaggedEvent:processorList:", v19, v20);

  v21 = (void *)MEMORY[0x242656984]();
  v22 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "softwareVersionString");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v38 = v24;
    v39 = 2114;
    v40 = CFSTR("firmwareVersion");
    v41 = 2112;
    v42 = CFSTR("Firmware version");
    v43 = 2114;
    v44 = CFSTR("firmwareVersion");
    v45 = 2112;
    v46 = v25;
    _os_log_impl(&dword_23E95B000, v23, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v21);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_alloc(MEMORY[0x24BE4F1D0]);
  objc_msgSend(*(id *)(a1 + 32), "softwareVersionString");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    v35 = CFSTR("firmwareVersion");
    objc_msgSend(*(id *)(a1 + 32), "softwareVersionString");
    v23 = objc_claimAutoreleasedReturnValue();
    v36 = v23;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v29 = (void *)MEMORY[0x24BDBD1B8];
  }
  v30 = (void *)objc_msgSend(v27, "initWithTag:data:", CFSTR("firmwareVersion"), v29);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 448), "tagProcessorList");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "submitTaggedEvent:processorList:", v30, v31);

  if (v28)
  {

  }
}

uint64_t __86__HMMTRAccessoryServer__startPairingWithReadyToCancelHandler_error_pairingEndContext___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x242656984]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v10 = v5;
    _os_log_impl(&dword_23E95B000, v4, OS_LOG_TYPE_INFO, "%{public}@Staging is cancelled", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = *(void **)(a1 + 32);
  v8 = 0;
  return objc_msgSend(v6, "stopPairingWithError:", &v8);
}

void __79__HMMTRAccessoryServer_notifyMatterFirmwareRevisionNumberCharacteristicChanged__block_invoke(uint64_t a1)
{
  _QWORD *WeakRetained;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  uint64_t v40;
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  objc_msgSend(WeakRetained, "primaryAccessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "services");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v34;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v34 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v9, "type");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("0000003E-0000-1000-8000-0026BB765291"));

        if (v11)
        {
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          objc_msgSend(v9, "characteristics");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v30;
            v28 = v2;
            while (2)
            {
              for (j = 0; j != v14; ++j)
              {
                if (*(_QWORD *)v30 != v15)
                  objc_enumerationMutation(v12);
                v17 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * j);
                objc_msgSend(v17, "type");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("0000026D-0000-1000-8000-0026BB765291"));

                if (v19)
                {
                  v20 = (void *)objc_msgSend(v17, "copy");
                  objc_msgSend(v17, "service");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v20, "setService:", v21);

                  objc_msgSend(v20, "setValue:", WeakRetained[66]);
                  v2 = v28;
                  v22 = (void *)MEMORY[0x242656984](objc_msgSend(v28, "addObject:", v20));
                  v23 = WeakRetained;
                  HMFGetOSLogHandle();
                  v24 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v25 = (void *)objc_claimAutoreleasedReturnValue();
                    v26 = WeakRetained[66];
                    *(_DWORD *)buf = 138543618;
                    v38 = v25;
                    v39 = 2112;
                    v40 = v26;
                    _os_log_impl(&dword_23E95B000, v24, OS_LOG_TYPE_INFO, "%{public}@sending notification for software version = %@", buf, 0x16u);

                  }
                  objc_autoreleasePoolPop(v22);
                  objc_msgSend(v23, "delegate");
                  v27 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v27, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:", v23, v28, 0, 0);

                  goto LABEL_22;
                }
              }
              v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
              v2 = v28;
              if (v14)
                continue;
              break;
            }
          }
LABEL_22:

          goto LABEL_23;
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_23:

}

void __46__HMMTRAccessoryServer_updateSoftwareVersion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x242656984]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "softwareVersionNumber");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543874;
      v10 = v7;
      v11 = 2112;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_23E95B000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to update version number in storage to %@ with error: %@", (uint8_t *)&v9, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __39__HMMTRAccessoryServer_setPairedState___block_invoke(uint64_t a1)
{
  unint64_t v2;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  int v14;
  void *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 3)
  {
    if (v2 != 3)
      goto LABEL_8;
    v3 = (id *)(a1 + 32);
    v4 = 1;
    goto LABEL_7;
  }
  v3 = (id *)(a1 + 32);
  if ((objc_msgSend(*(id *)(a1 + 32), "isSecuritySessionOpen") & 1) != 0
    || objc_msgSend(*v3, "locallyDiscovered"))
  {
    v4 = 0;
LABEL_7:
    objc_msgSend(*v3, "setHasPairings:", v4);
  }
LABEL_8:
  v5 = objc_msgSend(*(id *)(a1 + 32), "isStaged");
  if (*(unsigned __int8 *)(a1 + 48) != (_DWORD)v5)
  {
    v6 = v5;
    objc_msgSend(*(id *)(a1 + 32), "storage");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "nodeID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setStaged:forNode:", v6, v8);

    v9 = (void *)MEMORY[0x242656984]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 32);
      v14 = 138543874;
      v15 = v12;
      v16 = 1024;
      v17 = v6;
      v18 = 2112;
      v19 = v13;
      _os_log_impl(&dword_23E95B000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Stored Staged State:%d for server:%@", (uint8_t *)&v14, 0x1Cu);

    }
    objc_autoreleasePoolPop(v9);
  }
}

id __49__HMMTRAccessoryServer_initWithKeystore_browser___block_invoke()
{
  return +[HMMTRDescriptorClusterManager sharedManager](HMMTRDescriptorClusterManager, "sharedManager");
}

+ (BOOL)certificateSubjectHasCATs:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  BOOL v7;

  objc_msgSend(MEMORY[0x24BDDB5B0], "convertX509Certificate:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDB5A8]), "initWithTLVBytes:", v3);
  objc_msgSend(v4, "subject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "caseAuthenticatedTags");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count") != 0;

  return v7;
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t594 != -1)
    dispatch_once(&logCategory__hmf_once_t594, &__block_literal_global_747);
  return (id)logCategory__hmf_once_v595;
}

+ (id)shortDescription
{
  objc_class *v2;

  v2 = (objc_class *)objc_opt_class();
  return NSStringFromClass(v2);
}

void __35__HMMTRAccessoryServer_logCategory__block_invoke()
{
  uint64_t v0;
  void *v1;

  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)logCategory__hmf_once_v595;
  logCategory__hmf_once_v595 = v0;

}

@end
