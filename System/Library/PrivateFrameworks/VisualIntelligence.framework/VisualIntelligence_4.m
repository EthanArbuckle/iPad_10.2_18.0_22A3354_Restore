uint64_t sub_1D48992D8(CGFloat *a1, uint64_t a2, CGFloat *a3, void *a4, char *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  CGFloat *v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  double v78;
  double v79;
  uint64_t v80;
  double v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  CGFloat MinX;
  uint64_t v91;
  unint64_t v92;
  CGFloat MinY;
  CGFloat Width;
  CGFloat Height;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char **v101;
  void *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  CGFloat *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  CGFloat v134;
  CGFloat v135;
  CGFloat v136;
  CGFloat v137;
  int v138;
  char v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;

  v127 = a5;
  v129 = a1;
  v128 = sub_1D4922370();
  v121 = *(_QWORD *)(v128 - 8);
  v11 = MEMORY[0x1E0C80A78](v128);
  v123 = (uint64_t)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v118 = (uint64_t)&v112 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v116 = (uint64_t)&v112 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v115 = (uint64_t)&v112 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v124 = (char *)&v112 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v122 = (uint64_t)&v112 - v22;
  MEMORY[0x1E0C80A78](v21);
  v117 = (uint64_t)&v112 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98CE10);
  MEMORY[0x1E0C80A78](v24);
  v126 = (char *)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v125 = COERCE_DOUBLE(type metadata accessor for Argos_Protos_Queryflow_RefineConfig(0));
  v130 = *(_QWORD *)(v125 - 8);
  MEMORY[0x1E0C80A78](v125);
  v131 = (char *)&v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *a3;
  v28 = a3[1];
  v29 = a3[2];
  v30 = a3[3];
  v119 = a4;
  v31 = (char *)objc_msgSend(a4, sel_preferredMetalDevice);
  v134 = v27;
  v135 = v28;
  v136 = v29;
  v137 = v30;
  v32 = *(_QWORD *)(v6 + 24);
  v113 = a2;
  v112 = v32;
  v33 = sub_1D48456DC(a2, &v134, v32, (uint64_t)v31, a6);
  v35 = v34;
  v37 = v36;
  v134 = v27;
  v135 = v28;
  v136 = v29;
  v137 = v30;
  v114 = a6;
  v120 = v6;
  v39 = sub_1D4846F58(v34, v36, v38, v33, (uint64_t *)&v134, v31, a6);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  sub_1D46DAD5C(v35, v37);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v46 = v39;
  v47 = v41;
  v132 = v43;
  v48 = v45;
  v49 = (uint64_t)v131;
  v50 = v128;
  v51 = v127;
  v52 = (uint64_t)v126;
  v53 = v125;
  v54 = *(_QWORD *)&v51[*(int *)(type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0) + 20)]
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__refineConfig;
  swift_beginAccess();
  sub_1D469C5EC(v54, v52, (uint64_t *)&unk_1ED98CE10);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v52, 1, v53);
  v128 = 0;
  if (v55 == 1)
  {
    *(_BYTE *)v49 = 0;
    *(_DWORD *)(v49 + 16) = 0;
    *(_QWORD *)(v49 + 4) = 0;
    *(_BYTE *)(v49 + 12) = 0;
    sub_1D4922010();
    v56 = v49 + *(int *)(v53 + 40);
    v57 = type metadata accessor for Argos_Protos_Queryflow_RefineConfig.CoarseClassificationThreshold(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 1, 1, v57);
    sub_1D46992EC(v52, (uint64_t *)&unk_1ED98CE10);
  }
  else
  {
    sub_1D469C630(v52, v49, type metadata accessor for Argos_Protos_Queryflow_RefineConfig);
  }
  v58 = (uint64_t)v124;
  v59 = (uint64_t)v46;
  if (*(_BYTE *)v49 == 1)
  {
    v130 = v48;
    v60 = v117;
    sub_1D470C76C(v117);
    sub_1D470C928(v122);
    v61 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
    v61(v60, v50);
    v62 = sub_1D4922358();
    v63 = sub_1D4922910();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = v47;
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      _os_log_impl(&dword_1D467C000, v62, v63, "Enable to refine region.", v65, 2u);
      v66 = v65;
      v47 = v64;
      MEMORY[0x1D82635B8](v66, -1, -1);
    }

    v61(v122, v50);
    type metadata accessor for TriggeringModelProcessor();
    v133 = *(_QWORD *)(v120 + 32);
    swift_bridgeObjectRetain();
    sub_1D48461E8(v47, v132, v130, &v133, v119, v49, &v134);
    swift_bridgeObjectRelease();
    if ((v139 & 1) != 0)
    {
      v67 = v115;
      sub_1D470C76C(v115);
      v68 = v116;
      sub_1D470C928(v116);
      v61(v67, v50);
      v69 = sub_1D4922358();
      v70 = sub_1D4922910();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v71 = 0;
        _os_log_impl(&dword_1D467C000, v69, v70, "No refined region, reuse triggering models results.", v71, 2u);
        MEMORY[0x1D82635B8](v71, -1, -1);
      }

      v61(v68, v50);
      v72 = v129;
    }
    else
    {
      v127 = (char *)v61;
      LODWORD(v126) = v138;
      v79 = v136;
      v78 = v137;
      *(double *)&v80 = v134;
      v81 = v135;
      sub_1D46DAD5C(v59, v47);
      swift_bridgeObjectRelease();
      sub_1D470C76C(v58);
      v82 = sub_1D4922358();
      v83 = sub_1D4922910();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = swift_slowAlloc();
        v85 = v50;
        v86 = swift_slowAlloc();
        v133 = v86;
        *(_DWORD *)v84 = 136315394;
        v125 = v80;
        v134 = *(double *)&v80;
        v135 = v81;
        v136 = v79;
        v137 = v78;
        v138 = (int)v126;
        v87 = sub_1D4922688();
        v134 = COERCE_DOUBLE(sub_1D47F0250(v87, v88, &v133));
        sub_1D4922A78();
        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 12) = 2080;
        v132 = v84 + 14;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D408);
        v89 = swift_allocObject();
        *(_OWORD *)(v89 + 16) = xmmword_1D4927560;
        v140.origin.x = v27;
        v140.origin.y = v28;
        v140.size.width = v29;
        v140.size.height = v30;
        MinX = CGRectGetMinX(v140);
        v91 = MEMORY[0x1E0DEF040];
        *(_QWORD *)(v89 + 56) = MEMORY[0x1E0DEF040];
        v92 = sub_1D46A492C();
        *(_QWORD *)(v89 + 64) = v92;
        *(CGFloat *)(v89 + 32) = MinX;
        v141.origin.x = v27;
        v141.origin.y = v28;
        v141.size.width = v29;
        v141.size.height = v30;
        MinY = CGRectGetMinY(v141);
        *(_QWORD *)(v89 + 96) = v91;
        *(_QWORD *)(v89 + 104) = v92;
        *(CGFloat *)(v89 + 72) = MinY;
        v142.origin.x = v27;
        v142.origin.y = v28;
        v142.size.width = v29;
        v142.size.height = v30;
        Width = CGRectGetWidth(v142);
        *(_QWORD *)(v89 + 136) = v91;
        *(_QWORD *)(v89 + 144) = v92;
        *(CGFloat *)(v89 + 112) = Width;
        v143.origin.x = v27;
        v143.origin.y = v28;
        v143.size.width = v29;
        v143.size.height = v30;
        Height = CGRectGetHeight(v143);
        *(_QWORD *)(v89 + 176) = v91;
        *(_QWORD *)(v89 + 184) = v92;
        v49 = (uint64_t)v131;
        *(CGFloat *)(v89 + 152) = Height;
        v96 = sub_1D4922640();
        v134 = COERCE_DOUBLE(sub_1D47F0250(v96, v97, &v133));
        sub_1D4922A78();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D467C000, v82, v83, "Refined region %s is different from input region %s, rerun triggering models.", (uint8_t *)v84, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D82635B8](v86, -1, -1);
        MEMORY[0x1D82635B8](v84, -1, -1);

        ((void (*)(uint64_t, uint64_t))v127)(v58, v85);
        v98 = v114;
        v99 = v113;
        v100 = v112;
        v101 = &selRef_getPort_description_;
        v102 = (void *)v128;
        v30 = v78;
        v29 = v79;
        v28 = v81;
        v27 = *(double *)&v125;
      }
      else
      {

        ((void (*)(uint64_t, uint64_t))v127)(v58, v50);
        v98 = v114;
        v99 = v113;
        v100 = v112;
        v101 = &selRef_getPort_description_;
        v102 = (void *)v128;
        v30 = v78;
        v29 = v79;
        v28 = v81;
        v27 = *(double *)&v80;
      }
      v103 = (char *)objc_msgSend(v119, v101[452]);
      v134 = v27;
      v135 = v28;
      v136 = v29;
      v137 = v30;
      v104 = sub_1D48456DC(v99, &v134, v100, (uint64_t)v103, v98);
      v59 = v105;
      v107 = v106;
      v134 = v27;
      v135 = v28;
      v136 = v29;
      v137 = v30;
      v109 = sub_1D4846F58(v105, v106, v108, v104, (uint64_t *)&v134, v103, v98);
      if (v102)
      {

        swift_unknownObjectRelease();
        v72 = v129;
      }
      else
      {
        v110 = v109;
        sub_1D46DAD5C(v59, v107);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v72 = v129;
        v59 = (uint64_t)v110;
      }
    }
  }
  else
  {
    v73 = v118;
    sub_1D470C76C(v118);
    sub_1D470C928(v123);
    v74 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
    v74(v73, v50);
    v75 = sub_1D4922358();
    v76 = sub_1D4922910();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v77 = 0;
      _os_log_impl(&dword_1D467C000, v75, v76, "Disable to refine region.", v77, 2u);
      MEMORY[0x1D82635B8](v77, -1, -1);
    }

    v74(v123, v50);
    v72 = v129;
  }
  sub_1D4697DE0(v49, type metadata accessor for Argos_Protos_Queryflow_RefineConfig);
  *v72 = v27;
  v72[1] = v28;
  v72[2] = v29;
  v72[3] = v30;
  return v59;
}

uint64_t sub_1D4899DF4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1D46992EC(v0 + 48, (uint64_t *)&unk_1ED98DBD0);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TriggeringModelProcessor()
{
  return objc_opt_self();
}

void sub_1D4899E60(CGFloat *a1)
{
  double *v1;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGRect v7;
  CGRect v8;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  *a1 = v3;
  a1[1] = v4;
  v7.origin.x = v3;
  v7.origin.y = v4;
  v7.size.width = v5;
  v7.size.height = v6;
  a1[2] = CGRectGetWidth(v7);
  v8.origin.x = v3;
  v8.origin.y = v4;
  v8.size.width = v5;
  v8.size.height = v6;
  a1[3] = CGRectGetHeight(v8);
}

uint64_t sub_1D4899ED0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D4899F18(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1D4922C4C();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1D4922C4C();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1D4747378(&qword_1EFEAC348, &qword_1EFEAC340);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC340);
          v12 = sub_1D489A544(v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for EspressoRequest(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D489A11C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1D4922C4C();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1D4922C4C();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1D4747378(&qword_1EFEAC338, &qword_1EFEAC330);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC330);
          v12 = sub_1D489A59C(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1D46F2DB4(0, (unint64_t *)&qword_1EFEAA8C8);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D489A330(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1D4922C4C();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1D4922C4C();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1D4747378(&qword_1EFEAC328, &qword_1EFEAC320);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC320);
          v12 = sub_1D489A5F0(v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1D46F2DB4(0, (unint64_t *)&qword_1ED98D260);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t (*sub_1D489A544(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1D489A670(v6, a2, a3);
  return sub_1D489A598;
}

uint64_t (*sub_1D489A59C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1D489A6E4(v6, a2, a3);
  return sub_1D489A598;
}

uint64_t (*sub_1D489A5F0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1D489A750(v6, a2, a3);
  return sub_1D489A598;
}

void sub_1D489A644(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1D489A670(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1D8261F20](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_1D489A6DC;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D489A6DC()
{
  return swift_release();
}

void (*sub_1D489A6E4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1D8261F20](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for PixelImage;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_1D489A750(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1D8261F20](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return j__s18VisualIntelligence10PixelImageVwxx;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D489A7BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E6F8);
  MEMORY[0x1E0C80A78](v5);
  v33 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.ObjectDetectorResults(0);
  v29 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResults(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E728);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v29 - v17;
  v30 = *a2;
  v19 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults(0);
  v20 = *(int *)(v19 + 20);
  v31 = a1;
  v21 = a1 + v20;
  sub_1D469C5EC(v21, (uint64_t)v18, &qword_1ED98E728);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v23 = v22(v18, 1, v9);
  sub_1D46992EC((uint64_t)v18, &qword_1ED98E728);
  v35 = 0;
  if (v23 != 1)
  {
    sub_1D469C5EC(v21, (uint64_t)v16, &qword_1ED98E728);
    if (v22(v16, 1, v9) == 1)
    {
      *v12 = 0;
      v12[1] = 0xE000000000000000;
      v12[2] = MEMORY[0x1E0DEE9D8];
      sub_1D4922010();
      sub_1D46992EC((uint64_t)v16, &qword_1ED98E728);
    }
    else
    {
      sub_1D469C630((uint64_t)v16, (uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResults);
    }
    v35 = sub_1D46B592C();
    sub_1D4697DE0((uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResults);
  }
  v24 = v33;
  sub_1D469C5EC(v31 + *(int *)(v19 + 24), v33, &qword_1ED98E6F8);
  v25 = v32;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v24, 1, v32) == 1)
  {
    *v8 = 0;
    v8[1] = 0xE000000000000000;
    v8[2] = MEMORY[0x1E0DEE9D8];
    sub_1D4922010();
    v26 = (char *)v8 + *(int *)(v25 + 28);
    v27 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.ObjectDetectorVersion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
    sub_1D46992EC(v24, &qword_1ED98E6F8);
  }
  else
  {
    sub_1D469C630(v24, (uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.ObjectDetectorResults);
  }
  v36 = v30;
  sub_1D46B6CB4(&v36, v34);
  sub_1D4697DE0((uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.ObjectDetectorResults);
  return v35;
}

uint64_t destroy for TriggeringModelProcessor.ModelResults(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TriggeringModelProcessor.ModelResults(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  if (v4)
  {
    *a1 = *a2;
    a1[1] = v4;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TriggeringModelProcessor.ModelResults(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D47959C4((uint64_t)a1);
      v5 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
  }
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TriggeringModelProcessor.ModelResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    sub_1D47959C4(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TriggeringModelProcessor.ModelResults(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TriggeringModelProcessor.ModelResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TriggeringModelProcessor.ModelResults()
{
  return &type metadata for TriggeringModelProcessor.ModelResults;
}

BOOL sub_1D489ADA0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    a1 = qword_1D493B268[a1];
  if ((a4 & 1) != 0)
    a3 = qword_1D493B268[a3];
  return a1 == a3;
}

BOOL sub_1D489ADC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

void sub_1D489ADD0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D489AE08(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1D489AE58 + 4 * byte_1D4939F84[a2]))(121);
}

uint64_t sub_1D489AE58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 121 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1D4922E38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1D489AEE8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6573726170;
    else
      v3 = 0x686372616573;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6573726170;
      else
        v6 = 0x686372616573;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE600000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x636972656E6567;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x636972656E6567)
  {
LABEL_21:
    v8 = sub_1D4922E38();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1D489AFF0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1D489B03C(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1D489B0A0 + 4 * byte_1D4939F8D[a2]))(a3 + 3);
}

uint64_t sub_1D489B0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 3 && v3 == 0x80000001D493EDC0)
    v4 = 1;
  else
    v4 = sub_1D4922E38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1D489B138(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6F73736572707365;
    else
      v3 = 13669;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE200000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6F73736572707365;
      else
        v6 = 13669;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE200000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x6E6F69736976;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x6E6F69736976)
  {
LABEL_21:
    v8 = sub_1D4922E38();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1D489B230(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D489B29C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1D489B34C + 4 * byte_1D4939F99[a2]))(0xD000000000000010);
}

uint64_t sub_1D489B34C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x80000001D493E970)
    v2 = 1;
  else
    v2 = sub_1D4922E38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1D489B458(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6567616D69;
  else
    v3 = 0x7463656A626FLL;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6567616D69;
  else
    v5 = 0x7463656A626FLL;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1D4922E38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

_QWORD *sub_1D489B4F4(void (*a1)(_QWORD *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v28[8];
  _OWORD v29[2];
  _BYTE v30[160];
  _BYTE v31[160];
  _QWORD v32[20];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[3];

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = *(_OWORD *)(a3 + 144);
  v48 = *(_OWORD *)(a3 + 128);
  v49 = v7;
  v50[0] = *(_OWORD *)(a3 + 160);
  *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)(a3 + 172);
  v8 = *(_OWORD *)(a3 + 80);
  v44 = *(_OWORD *)(a3 + 64);
  v45 = v8;
  v9 = *(_OWORD *)(a3 + 112);
  v46 = *(_OWORD *)(a3 + 96);
  v47 = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v42 = *(_OWORD *)(a3 + 32);
  v43 = v10;
  v39 = v48;
  v40 = v7;
  v41[0] = v50[0];
  *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)((char *)v50 + 12);
  v35 = v44;
  v36 = v8;
  v37 = v46;
  v38 = v47;
  v33 = v42;
  v34 = v10;
  sub_1D46A47CC((uint64_t)&v42);
  a1(v32, &v33);
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    sub_1D46A48AC((uint64_t)&v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    for (i = 192; ; i += 160)
    {
      sub_1D46A48AC((uint64_t)&v42);
      sub_1D46A4760((uint64_t)v32, (uint64_t)v30);
      sub_1D46A4760((uint64_t)v30, (uint64_t)v31);
      if (sub_1D46A47A8((uint64_t)v31) != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_1D48A84F8(0, v11[2] + 1, 1, v11);
        v14 = v11[2];
        v13 = v11[3];
        if (v14 >= v13 >> 1)
          v11 = sub_1D48A84F8((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
        sub_1D46A4760((uint64_t)v30, (uint64_t)v28);
        v11[2] = v14 + 1;
        v15 = &v11[20 * v14];
        v16 = v28[1];
        v15[2] = v28[0];
        v15[3] = v16;
        v17 = v28[5];
        v19 = v28[2];
        v18 = v28[3];
        v15[6] = v28[4];
        v15[7] = v17;
        v15[4] = v19;
        v15[5] = v18;
        v21 = v28[7];
        v20 = v29[0];
        v22 = v28[6];
        *(_OWORD *)((char *)v15 + 172) = *(_OWORD *)((char *)v29 + 12);
        v15[9] = v21;
        v15[10] = v20;
        v15[8] = v22;
      }
      if (!--v4)
        break;
      v23 = *(_OWORD *)(a3 + i + 112);
      v48 = *(_OWORD *)(a3 + i + 96);
      v49 = v23;
      v50[0] = *(_OWORD *)(a3 + i + 128);
      *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)(a3 + i + 140);
      v24 = *(_OWORD *)(a3 + i + 48);
      v44 = *(_OWORD *)(a3 + i + 32);
      v45 = v24;
      v25 = *(_OWORD *)(a3 + i + 80);
      v46 = *(_OWORD *)(a3 + i + 64);
      v47 = v25;
      v26 = *(_OWORD *)(a3 + i + 16);
      v42 = *(_OWORD *)(a3 + i);
      v43 = v26;
      v39 = v48;
      v40 = v23;
      v41[0] = v50[0];
      *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)((char *)v50 + 12);
      v35 = v44;
      v36 = v24;
      v37 = v46;
      v38 = v47;
      v33 = v42;
      v34 = v26;
      sub_1D46A47CC((uint64_t)&v42);
      a1(v32, &v33);
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

unint64_t sub_1D489B794(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D7C0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for VisualUnderstanding.ImageRegion();
  v9 = MEMORY[0x1E0C80A78](v28);
  v27 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v25 = (uint64_t)&v22 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return MEMORY[0x1E0DEE9D8];
  v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v22 = a3;
  v23 = v14;
  v15 = a3 + v14;
  v26 = v11;
  v16 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain();
  v17 = MEMORY[0x1E0DEE9D8];
  v24 = a1;
  do
  {
    a1(v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v8, 1, v28) == 1)
    {
      sub_1D46992EC((uint64_t)v8, &qword_1ED98D7C0);
    }
    else
    {
      v18 = v25;
      sub_1D469C630((uint64_t)v8, v25, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      sub_1D469C630(v18, v27, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = sub_1D48A8DAC(0, *(_QWORD *)(v17 + 16) + 1, 1, v17, &qword_1ED98D370, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      v20 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
      if (v20 >= v19 >> 1)
        v17 = sub_1D48A8DAC(v19 > 1, v20 + 1, 1, v17, &qword_1ED98D370, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      *(_QWORD *)(v17 + 16) = v20 + 1;
      sub_1D469C630(v27, v17 + v23 + v20 * v16, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      a1 = v24;
    }
    v15 += v16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

unint64_t sub_1D489BA08(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  void (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  uint64_t v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E7C8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult(0);
  v9 = *(_QWORD *)(v28 - 8);
  v10 = MEMORY[0x1E0C80A78](v28);
  v25 = (uint64_t)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v24 = (uint64_t)v22 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v22[1] = a3;
  v14 = (_DWORD *)(a3 + 48);
  v15 = MEMORY[0x1E0DEE9D8];
  v23 = a1;
  do
  {
    v16 = *v14;
    v17 = *((_QWORD *)v14 - 1);
    v26[0] = *((_QWORD *)v14 - 2);
    v26[1] = v17;
    v27 = v16;
    swift_bridgeObjectRetain();
    a1(v26);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v15;
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v28) == 1)
    {
      sub_1D46992EC((uint64_t)v8, &qword_1ED98E7C8);
    }
    else
    {
      v18 = v24;
      sub_1D469C630((uint64_t)v8, v24, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
      sub_1D469C630(v18, v25, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_1D48A8DAC(0, *(_QWORD *)(v15 + 16) + 1, 1, v15, &qword_1ED98EC78, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
      v20 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      if (v20 >= v19 >> 1)
        v15 = sub_1D48A8DAC(v19 > 1, v20 + 1, 1, v15, &qword_1ED98EC78, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
      *(_QWORD *)(v15 + 16) = v20 + 1;
      sub_1D469C630(v25, v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v20, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
      a1 = v23;
    }
    v14 += 6;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v15;
}

char *sub_1D489BC98(void (*a1)(_QWORD *__return_ptr, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  void (*v15)(_QWORD *__return_ptr, _QWORD);
  uint64_t v16;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (char *)MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(type metadata accessor for VisualUnderstanding.ImageRegion() - 8);
  v8 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v9 = *(_QWORD *)(v7 + 72);
  swift_bridgeObjectRetain();
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v15 = a1;
  do
  {
    a1(&v16, v8);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    if ((v16 & 0x100000000) == 0)
    {
      v11 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_1D48A9FC4(0, *((_QWORD *)v10 + 2) + 1, 1, v10, &qword_1EFEAC5F0);
      v13 = *((_QWORD *)v10 + 2);
      v12 = *((_QWORD *)v10 + 3);
      if (v13 >= v12 >> 1)
        v10 = sub_1D48A9FC4((char *)(v12 > 1), v13 + 1, 1, v10, &qword_1EFEAC5F0);
      *((_QWORD *)v10 + 2) = v13 + 1;
      *(_DWORD *)&v10[4 * v13 + 32] = v11;
      a1 = v15;
    }
    v8 += v9;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1D489BE08(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_1D489C20C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F070]);
}

char *sub_1D489BE24(void (*a1)(uint64_t *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void (*v23)(uint64_t *__return_ptr, __int128 *);
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  uint64_t v43;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (char *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v8 = *(_OWORD *)(a3 + 80);
  v36 = *(_OWORD *)(a3 + 64);
  v9 = *(_OWORD *)(a3 + 144);
  v40 = *(_OWORD *)(a3 + 128);
  v41 = v9;
  v42[0] = *(_OWORD *)(a3 + 160);
  *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)(a3 + 172);
  v10 = *(_OWORD *)(a3 + 96);
  v11 = *(_OWORD *)(a3 + 112);
  v37 = v8;
  v38 = v10;
  v39 = v11;
  v12 = *(_OWORD *)(a3 + 48);
  v34 = *(_OWORD *)(a3 + 32);
  v35 = v12;
  v31 = v40;
  v32 = v41;
  v33[0] = v42[0];
  *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)v42 + 12);
  v27 = v36;
  v28 = v8;
  v29 = v38;
  v30 = v11;
  v25 = v34;
  v26 = v12;
  sub_1D46A47CC((uint64_t)&v34);
  a1(&v24, &v25);
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    sub_1D46A48AC((uint64_t)&v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 192;
    v43 = a2;
    v23 = a1;
    while (1)
    {
      sub_1D46A48AC((uint64_t)&v34);
      if ((v24 & 0x100000000) == 0)
      {
        v15 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_1D48A9FC4(0, *((_QWORD *)v13 + 2) + 1, 1, v13, &qword_1EFEAC5F0);
        v17 = *((_QWORD *)v13 + 2);
        v16 = *((_QWORD *)v13 + 3);
        if (v17 >= v16 >> 1)
          v13 = sub_1D48A9FC4((char *)(v16 > 1), v17 + 1, 1, v13, &qword_1EFEAC5F0);
        *((_QWORD *)v13 + 2) = v17 + 1;
        *(_DWORD *)&v13[4 * v17 + 32] = v15;
        a1 = v23;
      }
      if (!--v4)
        break;
      v18 = *(_OWORD *)(a3 + v14 + 112);
      v40 = *(_OWORD *)(a3 + v14 + 96);
      v41 = v18;
      v42[0] = *(_OWORD *)(a3 + v14 + 128);
      *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)(a3 + v14 + 140);
      v19 = *(_OWORD *)(a3 + v14 + 48);
      v36 = *(_OWORD *)(a3 + v14 + 32);
      v37 = v19;
      v20 = *(_OWORD *)(a3 + v14 + 80);
      v38 = *(_OWORD *)(a3 + v14 + 64);
      v39 = v20;
      v21 = *(_OWORD *)(a3 + v14 + 16);
      v34 = *(_OWORD *)(a3 + v14);
      v35 = v21;
      v31 = v40;
      v32 = v18;
      v33[0] = v42[0];
      *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)v42 + 12);
      v27 = v36;
      v28 = v19;
      v29 = v38;
      v30 = v39;
      v25 = v34;
      v26 = v21;
      sub_1D46A47CC((uint64_t)&v34);
      a1(&v24, &v25);
      v14 += 160;
    }
    swift_bridgeObjectRelease();
  }
  return v13;
}

_QWORD *sub_1D489C084(void (*a1)(_QWORD *__return_ptr, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  void (*v14)(_QWORD *__return_ptr, _QWORD);
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = a1;
  do
  {
    v20 = *(_BYTE *)(a3 + v7 + 32);
    a1(&v17, &v20);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    v10 = v17;
    if (v17 != 26)
    {
      v15 = v19;
      v16 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1D48AA1E0(0, v8[2] + 1, 1, v8);
      v12 = v8[2];
      v11 = v8[3];
      if (v12 >= v11 >> 1)
        v8 = sub_1D48AA1E0((_QWORD *)(v11 > 1), v12 + 1, 1, v8);
      v8[2] = v12 + 1;
      v9 = &v8[5 * v12];
      *((_BYTE *)v9 + 32) = v10;
      *(_OWORD *)(v9 + 5) = v16;
      *(_OWORD *)(v9 + 7) = v15;
      a1 = v14;
    }
    ++v7;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1D489C1F0(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_1D489C20C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EB38]);
}

uint64_t sub_1D489C20C(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a3 + 16);
  result = MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v9 = *(_QWORD *)(a4(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v12 = a1(&v13, v10);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v13)
      {
        MEMORY[0x1D8261B78](v12);
        if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1D4922844();
        sub_1D492285C();
        sub_1D4922838();
      }
      v10 += v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v14;
  }
  return result;
}

_QWORD *sub_1D489C344(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = (int *)(a3 + 40);
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v10 = *((_QWORD *)v7 + 5);
    v11 = *v7;
    v33 = *((_QWORD *)v7 - 1);
    v34 = v11;
    v12 = *(_OWORD *)(v7 + 6);
    v35 = *(_OWORD *)(v7 + 2);
    v36 = v12;
    v37 = v10;
    a1(&v25, &v33);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    v13 = v29;
    if (v29)
    {
      v14 = v25;
      v21 = v27;
      v22 = v26;
      v15 = v28;
      v23 = v31;
      v24 = v30;
      v16 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1D48A8B64(0, v8[2] + 1, 1, v8);
      v18 = v8[2];
      v17 = v8[3];
      if (v18 >= v17 >> 1)
        v8 = sub_1D48A8B64((_QWORD *)(v17 > 1), v18 + 1, 1, v8);
      v8[2] = v18 + 1;
      v9 = &v8[10 * v18];
      v9[4] = v14;
      *(_OWORD *)(v9 + 5) = v22;
      *(_OWORD *)(v9 + 7) = v21;
      v9[9] = v15;
      v9[10] = v13;
      v9[11] = v24;
      v9[12] = v23;
      *((_DWORD *)v9 + 26) = v16;
    }
    v7 += 14;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

char *sub_1D489C4F4(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD v17[4];

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (char *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = (uint64_t *)(a3 + 56);
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v9 = *(v7 - 1);
    v10 = *v7;
    v11 = *(v7 - 2);
    v17[0] = *(v7 - 3);
    v17[1] = v11;
    v17[2] = v9;
    v17[3] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v16, v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 0x100000000) == 0)
    {
      v12 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1D48A882C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v14 = *((_QWORD *)v8 + 2);
      v13 = *((_QWORD *)v8 + 3);
      if (v14 >= v13 >> 1)
        v8 = sub_1D48A882C((char *)(v13 > 1), v14 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v14 + 1;
      *(_DWORD *)&v8[4 * v14 + 32] = v12;
    }
    v7 += 4;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1D489C674()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for VisualUnderstanding.ImageRegion();
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(*v0 + 16);
  if (v5)
  {
    v6 = *v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v7 = *(_QWORD *)(v2 + 72);
    v17 = *v0;
    v18 = v7;
    swift_bridgeObjectRetain_n();
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1D469C304(v6, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      v10 = v4[9];
      v11 = v4[10];
      v12 = v4[11];
      sub_1D46C1E20(v10, v11);
      sub_1D4697DE0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_1D48A933C(0, v8[2] + 1, 1, v8);
        v14 = v8[2];
        v13 = v8[3];
        if (v14 >= v13 >> 1)
          v8 = sub_1D48A933C((_QWORD *)(v13 > 1), v14 + 1, 1, v8);
        v8[2] = v14 + 1;
        v9 = &v8[3 * v14];
        v9[4] = v10;
        v9[5] = v11;
        v9[6] = v12;
      }
      v6 += v18;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n();
    if (v8[2])
      goto LABEL_11;
LABEL_13:
    v15 = 0;
    goto LABEL_14;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_13;
LABEL_11:
  v15 = v8[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_14:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t VisualUnderstanding.imageRegions.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t result;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[28];
  uint64_t v106;
  uint64_t v107;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D7C0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for VisualUnderstanding.ImageRegion();
  v96 = *(_QWORD *)(v88 - 8);
  v4 = MEMORY[0x1E0C80A78](v88);
  v87 = (uint64_t)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v95 = (uint64_t)&v84 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v84 = (uint64_t)&v84 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v94 = (uint64_t)&v84 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v89 = (uint64_t)&v84 - v13;
  MEMORY[0x1E0C80A78](v12);
  v93 = (unint64_t)&v84 - v14;
  v15 = *v0;
  v16 = MEMORY[0x1E0DEE9D8];
  v107 = MEMORY[0x1E0DEE9D8];
  v17 = *(_QWORD *)(v15 + 16);
  v18 = swift_bridgeObjectRetain();
  v90 = v3;
  v86 = v17;
  if (v17)
  {
    v19 = 0;
    v85 = v18;
    while (v19 < *(_QWORD *)(v18 + 16))
    {
      v20 = *(_QWORD *)(v96 + 72);
      v92 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
      v91 = v20;
      v21 = v93;
      sub_1D469C304(v18 + v92 + v20 * v19, v93, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      v22 = *(_QWORD *)(v21 + 40);
      v23 = *(_QWORD *)(v22 + 16);
      if (v23)
      {
        swift_bridgeObjectRetain();
        v24 = v23 - 1;
        v25 = 32;
        v26 = MEMORY[0x1E0DEE9D8];
        while (1)
        {
          v27 = *(_OWORD *)(v22 + v25);
          v98 = *(_OWORD *)(v22 + v25 + 16);
          v97 = v27;
          v28 = *(_OWORD *)(v22 + v25 + 32);
          v29 = *(_OWORD *)(v22 + v25 + 48);
          v30 = *(_OWORD *)(v22 + v25 + 80);
          v101 = *(_OWORD *)(v22 + v25 + 64);
          v102 = v30;
          v99 = v28;
          v100 = v29;
          v31 = *(_OWORD *)(v22 + v25 + 96);
          v32 = *(_OWORD *)(v22 + v25 + 112);
          v33 = *(_OWORD *)(v22 + v25 + 128);
          *(_OWORD *)&v105[12] = *(_OWORD *)(v22 + v25 + 140);
          *(_OWORD *)v105 = v33;
          v103 = v31;
          v104 = v32;
          if (BYTE13(v32) == 1)
          {
            sub_1D46A47CC((uint64_t)&v97);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v106 = v26;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1D48AB57C(0, *(_QWORD *)(v26 + 16) + 1, 1);
              v26 = v106;
            }
            v36 = *(_QWORD *)(v26 + 16);
            v35 = *(_QWORD *)(v26 + 24);
            if (v36 >= v35 >> 1)
            {
              sub_1D48AB57C(v35 > 1, v36 + 1, 1);
              v26 = v106;
            }
            *(_QWORD *)(v26 + 16) = v36 + 1;
            v37 = (_OWORD *)(v26 + 160 * v36);
            v38 = v98;
            v37[2] = v97;
            v37[3] = v38;
            v39 = v99;
            v40 = v100;
            v41 = v102;
            v37[6] = v101;
            v37[7] = v41;
            v37[4] = v39;
            v37[5] = v40;
            v42 = v103;
            v43 = v104;
            v44 = *(_OWORD *)v105;
            *(_OWORD *)((char *)v37 + 172) = *(_OWORD *)&v105[12];
            v37[9] = v43;
            v37[10] = v44;
            v37[8] = v42;
          }
          if (!v24)
            break;
          --v24;
          v25 += 160;
        }
        swift_bridgeObjectRelease();
        v3 = v90;
      }
      else
      {
        v26 = MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)&v97 = v26;
      swift_retain();
      sub_1D489D358((uint64_t *)&v97);
      swift_release();
      v45 = *(_QWORD *)(v97 + 16);
      swift_release();
      if (v45)
      {
        sub_1D469C630(v93, v89, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        v46 = v107;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1D48AB550(0, *(_QWORD *)(v46 + 16) + 1, 1);
          v46 = v107;
        }
        v48 = *(_QWORD *)(v46 + 16);
        v47 = *(_QWORD *)(v46 + 24);
        if (v48 >= v47 >> 1)
        {
          sub_1D48AB550(v47 > 1, v48 + 1, 1);
          v46 = v107;
        }
        *(_QWORD *)(v46 + 16) = v48 + 1;
        sub_1D469C630(v89, v46 + v92 + v48 * v91, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      }
      else
      {
        sub_1D4697DE0(v93, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      }
      ++v19;
      v18 = v85;
      if (v19 == v86)
      {
        v16 = v107;
        goto LABEL_25;
      }
    }
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v92 = *(_QWORD *)(v16 + 16);
    if (v92)
    {
      v86 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
      v91 = v16 + v86;
      v49 = *(_QWORD *)(v96 + 72);
      v85 = v16;
      swift_retain();
      v50 = 0;
      v93 = MEMORY[0x1E0DEE9D8];
      v89 = v49;
      do
      {
        v51 = v94;
        sub_1D469C304(v91 + v49 * v50, v94, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        sub_1D469C304(v51, v95, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        v52 = *(_QWORD *)(v51 + 40);
        v53 = *(_QWORD *)(v52 + 16);
        if (v53)
        {
          swift_bridgeObjectRetain();
          v54 = v53 - 1;
          v55 = 32;
          v56 = MEMORY[0x1E0DEE9D8];
          while (1)
          {
            v57 = *(_OWORD *)(v52 + v55);
            v98 = *(_OWORD *)(v52 + v55 + 16);
            v97 = v57;
            v58 = *(_OWORD *)(v52 + v55 + 32);
            v59 = *(_OWORD *)(v52 + v55 + 48);
            v60 = *(_OWORD *)(v52 + v55 + 80);
            v101 = *(_OWORD *)(v52 + v55 + 64);
            v102 = v60;
            v99 = v58;
            v100 = v59;
            v61 = *(_OWORD *)(v52 + v55 + 96);
            v62 = *(_OWORD *)(v52 + v55 + 112);
            v63 = *(_OWORD *)(v52 + v55 + 128);
            *(_OWORD *)&v105[12] = *(_OWORD *)(v52 + v55 + 140);
            *(_OWORD *)v105 = v63;
            v103 = v61;
            v104 = v62;
            if (BYTE13(v62) == 1)
            {
              sub_1D46A47CC((uint64_t)&v97);
              v64 = swift_isUniquelyReferenced_nonNull_native();
              v107 = v56;
              if ((v64 & 1) == 0)
              {
                sub_1D48AB57C(0, *(_QWORD *)(v56 + 16) + 1, 1);
                v56 = v107;
              }
              v66 = *(_QWORD *)(v56 + 16);
              v65 = *(_QWORD *)(v56 + 24);
              if (v66 >= v65 >> 1)
              {
                sub_1D48AB57C(v65 > 1, v66 + 1, 1);
                v56 = v107;
              }
              *(_QWORD *)(v56 + 16) = v66 + 1;
              v67 = (_OWORD *)(v56 + 160 * v66);
              v68 = v98;
              v67[2] = v97;
              v67[3] = v68;
              v69 = v99;
              v70 = v100;
              v71 = v102;
              v67[6] = v101;
              v67[7] = v71;
              v67[4] = v69;
              v67[5] = v70;
              v72 = v103;
              v73 = v104;
              v74 = *(_OWORD *)v105;
              *(_OWORD *)((char *)v67 + 172) = *(_OWORD *)&v105[12];
              v67[9] = v73;
              v67[10] = v74;
              v67[8] = v72;
            }
            if (!v54)
              break;
            --v54;
            v55 += 160;
          }
          swift_bridgeObjectRelease();
          v3 = v90;
          v49 = v89;
        }
        else
        {
          v56 = MEMORY[0x1E0DEE9D8];
        }
        *(_QWORD *)&v97 = v56;
        swift_retain();
        sub_1D489D358((uint64_t *)&v97);
        swift_release();
        v75 = v97;
        v76 = v95;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v76 + 40) = v75;
        sub_1D469C304(v76, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        v77 = v96;
        v78 = v88;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v3, 0, 1, v88);
        sub_1D4697DE0(v76, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        sub_1D4697DE0(v94, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v3, 1, v78) == 1)
        {
          sub_1D46992EC((uint64_t)v3, &qword_1ED98D7C0);
        }
        else
        {
          v79 = v84;
          sub_1D469C630((uint64_t)v3, v84, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
          sub_1D469C630(v79, v87, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v80 = v93;
          else
            v80 = sub_1D48A8DAC(0, *(_QWORD *)(v93 + 16) + 1, 1, v93, &qword_1ED98D370, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
          v82 = *(_QWORD *)(v80 + 16);
          v81 = *(_QWORD *)(v80 + 24);
          if (v82 >= v81 >> 1)
            v80 = sub_1D48A8DAC(v81 > 1, v82 + 1, 1, v80, &qword_1ED98D370, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
          *(_QWORD *)(v80 + 16) = v82 + 1;
          v93 = v80;
          sub_1D469C630(v87, v80 + v86 + v82 * v49, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        }
        ++v50;
      }
      while (v50 != v92);
      swift_release_n();
      return v93;
    }
    else
    {
      swift_release();
      return MEMORY[0x1E0DEE9D8];
    }
  }
  return result;
}

uint64_t VisualUnderstanding.ImageRegion.domainInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v2 - 1;
    v4 = MEMORY[0x1E0DEE9D8];
    for (i = 32; ; i += 160)
    {
      v6 = *(_OWORD *)(v1 + i + 16);
      v25 = *(_OWORD *)(v1 + i);
      v26 = v6;
      v7 = *(_OWORD *)(v1 + i + 32);
      v8 = *(_OWORD *)(v1 + i + 48);
      v9 = *(_OWORD *)(v1 + i + 80);
      v29 = *(_OWORD *)(v1 + i + 64);
      v30 = v9;
      v27 = v7;
      v28 = v8;
      v10 = *(_OWORD *)(v1 + i + 96);
      v11 = *(_OWORD *)(v1 + i + 112);
      v12 = *(_OWORD *)(v1 + i + 128);
      *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(v1 + i + 140);
      v33[0] = v12;
      v31 = v10;
      v32 = v11;
      if (BYTE13(v11) == 1)
      {
        sub_1D46A47CC((uint64_t)&v25);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v34 = v4;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1D48AB57C(0, *(_QWORD *)(v4 + 16) + 1, 1);
          v4 = v34;
        }
        v15 = *(_QWORD *)(v4 + 16);
        v14 = *(_QWORD *)(v4 + 24);
        if (v15 >= v14 >> 1)
        {
          sub_1D48AB57C(v14 > 1, v15 + 1, 1);
          v4 = v34;
        }
        *(_QWORD *)(v4 + 16) = v15 + 1;
        v16 = (_OWORD *)(v4 + 160 * v15);
        v17 = v26;
        v16[2] = v25;
        v16[3] = v17;
        v18 = v27;
        v19 = v28;
        v20 = v30;
        v16[6] = v29;
        v16[7] = v20;
        v16[4] = v18;
        v16[5] = v19;
        v21 = v31;
        v22 = v32;
        v23 = v33[0];
        *(_OWORD *)((char *)v16 + 172) = *(_OWORD *)((char *)v33 + 12);
        v16[9] = v22;
        v16[10] = v23;
        v16[8] = v21;
      }
      if (!v3)
        break;
      --v3;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v25 = v4;
  swift_retain();
  sub_1D489D358((uint64_t *)&v25);
  swift_release();
  return v25;
}

uint64_t type metadata accessor for VisualUnderstanding.ImageRegion()
{
  uint64_t result;

  result = qword_1ED98D7B0;
  if (!qword_1ED98D7B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t VisualUnderstanding.payload.getter()
{
  uint64_t v0;

  sub_1D4920D5C();
  swift_allocObject();
  sub_1D4920D50();
  sub_1D46F8B58();
  v0 = sub_1D4920D44();
  swift_release();
  return v0;
}

uint64_t sub_1D489D358(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1D46D7480(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1D48B0670(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1D489D3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;

  v15 = type metadata accessor for Argos_Protos_Queryflow_CoarseClassificationLabelThreshold(0);
  v4 = MEMORY[0x1E0C80A78](v15);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v14 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1D469C304(a1 + v11, (uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_CoarseClassificationLabelThreshold);
      sub_1D469C304(a2 + v11, (uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_CoarseClassificationLabelThreshold);
      v12 = *(_QWORD *)v9 == *(_QWORD *)v6 && *((_QWORD *)v9 + 1) == *((_QWORD *)v6 + 1);
      if (!v12 && (sub_1D4922E38() & 1) == 0)
        break;
      if (*((float *)v9 + 4) != *((float *)v6 + 4))
        break;
      if (v9[20] != v6[20])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      if ((sub_1D49225E0() & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_CoarseClassificationLabelThreshold);
      sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_CoarseClassificationLabelThreshold);
      v11 += v14;
      if (!--v10)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_CoarseClassificationLabelThreshold);
    sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_CoarseClassificationLabelThreshold);
  }
  return 0;
}

uint64_t sub_1D489D598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;

  v15 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
  v4 = MEMORY[0x1E0C80A78](v15);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v14 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1D469C304(a1 + v11, (uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
      sub_1D469C304(a2 + v11, (uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
      v12 = *(_QWORD *)v9 == *(_QWORD *)v6 && *((_QWORD *)v9 + 1) == *((_QWORD *)v6 + 1);
      if (!v12 && (sub_1D4922E38() & 1) == 0)
        break;
      if (*((float *)v9 + 4) != *((float *)v6 + 4))
        break;
      if (v9[20] != v6[20])
        break;
      if (v9[21] != v6[21])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      if ((sub_1D49225E0() & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
      sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
      v11 += v14;
      if (!--v10)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
    sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
  }
  return 0;
}

uint64_t sub_1D489D780(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1D4922E38(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_1D4922E38() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1D489D844(uint64_t a1, uint64_t a2)
{
  return sub_1D489F2B8(a1, a2, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.ObjectDetectorImageRegion.DetectedResult, (uint64_t (*)(char *, char *))sub_1D4771D2C);
}

uint64_t sub_1D489D858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult(0);
  v4 = *(_QWORD *)(v44 - 8);
  v5 = MEMORY[0x1E0C80A78](v44);
  v7 = (float *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v9 = (float *)((char *)&v33 - v8);
  v10 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (_DWORD *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v11);
  v17 = (_DWORD *)((char *)&v33 - v16);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 == *(_QWORD *)(a2 + 16))
  {
    if (!v18 || a1 == a2)
      return 1;
    v39 = v14;
    v34 = v4;
    v19 = 0;
    v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v21 = a1 + v20;
    v22 = a2 + v20;
    v23 = *(_QWORD *)(v15 + 72);
    v41 = (uint64_t)&v33 - v16;
    v42 = v13;
    v37 = v21;
    v38 = v18;
    v35 = v23;
    v36 = v22;
    while (1)
    {
      v40 = v19;
      v24 = v23 * v19;
      sub_1D469C304(v21 + v24, (uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult);
      sub_1D469C304(v22 + v24, (uint64_t)v13, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult);
      if (*v17 != *v13)
        break;
      v25 = *(_QWORD *)(v41 + 8);
      v26 = *((_QWORD *)v42 + 1);
      v27 = *(_QWORD *)(v25 + 16);
      if (v27 != *(_QWORD *)(v26 + 16))
        break;
      if (v27 && v25 != v26)
      {
        v28 = 0;
        v29 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
        v43 = *(_QWORD *)(v34 + 72);
        while (1)
        {
          sub_1D469C304(v25 + v29, (uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
          if (v28 >= *(_QWORD *)(v26 + 16))
          {
            __break(1u);
            JUMPOUT(0x1D489DCD8);
          }
          sub_1D469C304(v26 + v29, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
          v30 = *(_QWORD *)v7;
          if (*((_BYTE *)v7 + 8) == 1)
            __asm { BR              X10 }
          if (*(_QWORD *)v9 != v30 || v9[3] != v7[3])
            break;
          sub_1D492201C();
          sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v31 = sub_1D49225E0();
          sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
          sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
          if ((v31 & 1) == 0)
            goto LABEL_22;
          ++v28;
          v29 += v43;
          if (v27 == v28)
            goto LABEL_17;
        }
        sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
        sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
        break;
      }
LABEL_17:
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      if ((sub_1D49225E0() & 1) == 0)
        break;
      v19 = v40 + 1;
      v13 = v42;
      sub_1D4697DE0((uint64_t)v42, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult);
      v17 = (_DWORD *)v41;
      sub_1D4697DE0(v41, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult);
      result = 1;
      v21 = v37;
      v23 = v35;
      v22 = v36;
      if (v19 == v38)
        return result;
    }
LABEL_22:
    sub_1D4697DE0((uint64_t)v42, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult);
    sub_1D4697DE0(v41, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult);
  }
  return 0;
}

uint64_t sub_1D489DD40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  double *v31;
  uint64_t v32;
  double *v33;
  char v34;
  uint64_t v35;
  char v36;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.UpperLeftRect(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (double *)((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E798);
  MEMORY[0x1E0C80A78](v8);
  v10 = (double *)((char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAB4F8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainSignals(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v21 = (uint64_t *)((char *)&v42 - v20);
  v22 = *(_QWORD *)(a1 + 16);
  if (v22 != *(_QWORD *)(a2 + 16))
  {
LABEL_28:
    v36 = 0;
    return v36 & 1;
  }
  v51 = v18;
  if (v22 && a1 != a2)
  {
    v49 = v11;
    v50 = v5;
    v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v24 = *(_QWORD *)(v19 + 72);
    v42 = v7;
    v43 = v24;
    v25 = v22 - 1;
    v45 = a1;
    v46 = v4;
    v47 = v17;
    v48 = v13;
    v44 = a2;
    while (1)
    {
      sub_1D469C304(a1 + v23, (uint64_t)v21, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainSignals);
      sub_1D469C304(a2 + v23, (uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainSignals);
      if ((sub_1D489E910(*v21, *v17) & 1) == 0)
        break;
      v26 = *(int *)(v51 + 24);
      v27 = (uint64_t)v17 + v26;
      v28 = (uint64_t)&v13[*(int *)(v49 + 48)];
      sub_1D469C5EC((uint64_t)v21 + v26, (uint64_t)v13, &qword_1ED98E798);
      sub_1D469C5EC(v27, v28, &qword_1ED98E798);
      v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
      if (v29((uint64_t)v13, 1, v4) == 1)
      {
        if (v29(v28, 1, v4) != 1)
        {
          v39 = &qword_1EFEAB4F8;
          v17 = v47;
          v40 = (uint64_t)v48;
          goto LABEL_26;
        }
        v13 = v48;
        sub_1D46992EC((uint64_t)v48, &qword_1ED98E798);
        v17 = v47;
      }
      else
      {
        sub_1D469C5EC((uint64_t)v13, (uint64_t)v10, &qword_1ED98E798);
        if (v29(v28, 1, v4) == 1)
        {
          v39 = &qword_1EFEAB4F8;
LABEL_25:
          v17 = v47;
          v40 = (uint64_t)v48;
          sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.UpperLeftRect);
LABEL_26:
          sub_1D46992EC(v40, v39);
          break;
        }
        v30 = v28;
        v31 = v42;
        sub_1D469C630(v30, (uint64_t)v42, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.UpperLeftRect);
        if (*v10 != *v31 || v10[1] != v31[1] || v10[2] != v31[2] || v10[3] != v31[3])
        {
          sub_1D4697DE0((uint64_t)v31, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.UpperLeftRect);
          v39 = &qword_1ED98E798;
          goto LABEL_25;
        }
        sub_1D492201C();
        v32 = (uint64_t)v10;
        v33 = v31;
        sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v34 = sub_1D49225E0();
        v35 = (uint64_t)v33;
        v10 = (double *)v32;
        sub_1D4697DE0(v35, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.UpperLeftRect);
        sub_1D4697DE0(v32, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.UpperLeftRect);
        v13 = v48;
        sub_1D46992EC((uint64_t)v48, &qword_1ED98E798);
        v17 = v47;
        if ((v34 & 1) == 0)
          break;
      }
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v36 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainSignals);
      sub_1D4697DE0((uint64_t)v21, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainSignals);
      v38 = v25-- != 0;
      if ((v36 & 1) != 0)
      {
        a2 = v44;
        v23 += v43;
        a1 = v45;
        v4 = v46;
        if (v38)
          continue;
      }
      return v36 & 1;
    }
    sub_1D4697DE0((uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainSignals);
    sub_1D4697DE0((uint64_t)v21, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainSignals);
    goto LABEL_28;
  }
  v36 = 1;
  return v36 & 1;
}

uint64_t sub_1D489E1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v15 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult(0);
  v4 = MEMORY[0x1E0C80A78](v15);
  v6 = (float *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v9 = (float *)((char *)&v14 - v8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v10 && a1 != a2)
  {
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1D469C304(a1 + v11, (uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
      sub_1D469C304(a2 + v11, (uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
      v12 = *(_QWORD *)v6;
      if (*((_BYTE *)v6 + 8) == 1)
        __asm { BR              X10 }
      if (*(_QWORD *)v9 != v12)
        break;
      if (v9[3] != v6[3])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      if ((sub_1D49225E0() & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
      sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
      v11 += v14;
      if (!--v10)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
    sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
    return 0;
  }
  return 1;
}

uint64_t sub_1D489E460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode(0);
  v4 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v49 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E758);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAB518);
  MEMORY[0x1E0C80A78](v50);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (float *)((char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v17 = (float *)((char *)&v44 - v16);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 != *(_QWORD *)(a2 + 16))
    goto LABEL_32;
  if (!v18 || a1 == a2)
  {
    v41 = 1;
    return v41 & 1;
  }
  v19 = 0;
  v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v47 = a2 + v20;
  v48 = a1 + v20;
  v46 = *(_QWORD *)(v15 + 72);
  v44 = v18;
  v45 = v4;
  while (1)
  {
    v21 = v46 * v19;
    sub_1D469C304(v48 + v46 * v19, (uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
    sub_1D469C304(v47 + v21, (uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
    v22 = *(int *)(v11 + 24);
    v23 = (uint64_t)v14 + v22;
    v24 = (uint64_t)&v10[*(int *)(v50 + 48)];
    sub_1D469C5EC((uint64_t)v17 + v22, (uint64_t)v10, &qword_1ED98E758);
    sub_1D469C5EC(v23, v24, &qword_1ED98E758);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    v26 = v51;
    if (v25(v10, 1, v51) == 1)
      break;
    sub_1D469C5EC((uint64_t)v10, (uint64_t)v8, &qword_1ED98E758);
    if (v25((char *)v24, 1, v26) == 1)
    {
      v42 = &qword_1EFEAB518;
      goto LABEL_29;
    }
    v27 = v24;
    v28 = v49;
    sub_1D469C630(v27, (uint64_t)v49, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
    v29 = *v8;
    v30 = *v28;
    v31 = *(_QWORD *)(*v8 + 16);
    if (v31 != *(_QWORD *)(*v28 + 16))
      goto LABEL_28;
    if (v31 && v29 != v30)
    {
      if (*(_QWORD *)(v29 + 32) != *(_QWORD *)(v30 + 32))
        goto LABEL_28;
      v32 = (uint64_t *)(v29 + 40);
      v33 = (uint64_t *)(v30 + 40);
      v34 = v31 - 1;
      while (v34)
      {
        v36 = *v32++;
        v35 = v36;
        v37 = *v33++;
        --v34;
        if (v35 != v37)
          goto LABEL_28;
      }
    }
    v38 = v8[1] == v28[1] && v8[2] == v28[2];
    if (!v38 && (sub_1D4922E38() & 1) == 0)
    {
LABEL_28:
      sub_1D4697DE0((uint64_t)v28, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
      v42 = &qword_1ED98E758;
LABEL_29:
      sub_1D4697DE0((uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
      goto LABEL_30;
    }
    sub_1D492201C();
    v39 = (uint64_t)v28;
    sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v40 = sub_1D49225E0();
    sub_1D4697DE0(v39, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
    sub_1D4697DE0((uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
    sub_1D46992EC((uint64_t)v10, &qword_1ED98E758);
    if ((v40 & 1) == 0)
      goto LABEL_31;
LABEL_23:
    if (*v17 != *v14)
      goto LABEL_31;
    sub_1D492201C();
    sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v41 = sub_1D49225E0();
    sub_1D4697DE0((uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
    sub_1D4697DE0((uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
    if ((v41 & 1) != 0)
    {
      ++v19;
      v4 = v45;
      if (v19 != v44)
        continue;
    }
    return v41 & 1;
  }
  if (v25((char *)v24, 1, v26) == 1)
  {
    sub_1D46992EC((uint64_t)v10, &qword_1ED98E758);
    goto LABEL_23;
  }
  v42 = &qword_1EFEAB518;
LABEL_30:
  sub_1D46992EC((uint64_t)v10, v42);
LABEL_31:
  sub_1D4697DE0((uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
  sub_1D4697DE0((uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
LABEL_32:
  v41 = 0;
  return v41 & 1;
}

uint64_t sub_1D489E910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  char v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode(0);
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  MEMORY[0x1E0C80A78](v4);
  v74 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E758);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAB518);
  MEMORY[0x1E0C80A78](v71);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult(0);
  v11 = *(_QWORD *)(v75 - 8);
  v12 = MEMORY[0x1E0C80A78](v75);
  v14 = (float *)((char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v16 = (float *)((char *)&v57 - v15);
  v17 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult(0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (_DWORD *)((char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18);
  v23 = (_DWORD *)((char *)&v57 - v22);
  v24 = *(_QWORD *)(a1 + 16);
  if (v24 != *(_QWORD *)(a2 + 16))
  {
LABEL_45:
    v55 = 0;
    return v55 & 1;
  }
  if (!v24 || a1 == a2)
  {
    v55 = 1;
    return v55 & 1;
  }
  v57 = v11;
  v25 = 0;
  v26 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_QWORD *)(v21 + 72);
  v59 = v28;
  v60 = v27;
  v69 = (uint64_t)&v57 - v22;
  v70 = v20;
  v61 = v24;
  v62 = v17;
  v58 = v29;
  while (1)
  {
    v63 = v25;
    v30 = v29 * v25;
    sub_1D469C304(v27 + v29 * v25, (uint64_t)v23, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult);
    sub_1D469C304(v28 + v30, (uint64_t)v20, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult);
    if (*v23 != *v20
      || (v31 = *(_QWORD *)(v69 + 8),
          v32 = *((_QWORD *)v70 + 1),
          v33 = *(_QWORD *)(v31 + 16),
          v33 != *(_QWORD *)(v32 + 16)))
    {
LABEL_44:
      sub_1D4697DE0((uint64_t)v70, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult);
      sub_1D4697DE0(v69, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult);
      goto LABEL_45;
    }
    if (v33 && v31 != v32)
      break;
LABEL_36:
    v23 = (_DWORD *)v69;
    v20 = v70;
    sub_1D492201C();
    sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v55 = sub_1D49225E0();
    sub_1D4697DE0((uint64_t)v20, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult);
    sub_1D4697DE0((uint64_t)v23, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult);
    if ((v55 & 1) != 0)
    {
      v25 = v63 + 1;
      v27 = v60;
      v29 = v58;
      v28 = v59;
      if (v63 + 1 != v61)
        continue;
    }
    return v55 & 1;
  }
  v34 = 0;
  v35 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  v68 = v31 + v35;
  v65 = v32;
  v66 = v32 + v35;
  v67 = *(_QWORD *)(v57 + 72);
  v64 = v33;
  while (1)
  {
    v36 = v67 * v34;
    result = sub_1D469C304(v68 + v67 * v34, (uint64_t)v16, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
    if (v34 >= *(_QWORD *)(v32 + 16))
      break;
    sub_1D469C304(v66 + v36, (uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
    v38 = *(int *)(v75 + 24);
    v39 = (uint64_t)v14 + v38;
    v40 = (uint64_t)&v10[*(int *)(v71 + 48)];
    sub_1D469C5EC((uint64_t)v16 + v38, (uint64_t)v10, &qword_1ED98E758);
    sub_1D469C5EC(v39, v40, &qword_1ED98E758);
    v41 = v73;
    v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    if (v42((uint64_t)v10, 1, v73) == 1)
    {
      if (v42(v40, 1, v41) != 1)
      {
        v56 = &qword_1EFEAB518;
        goto LABEL_42;
      }
    }
    else
    {
      sub_1D469C5EC((uint64_t)v10, (uint64_t)v8, &qword_1ED98E758);
      if (v42(v40, 1, v41) == 1)
      {
        v56 = &qword_1EFEAB518;
LABEL_41:
        sub_1D4697DE0((uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
LABEL_42:
        sub_1D46992EC((uint64_t)v10, v56);
LABEL_43:
        sub_1D4697DE0((uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
        sub_1D4697DE0((uint64_t)v16, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
        goto LABEL_44;
      }
      v43 = v74;
      sub_1D469C630(v40, v74, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
      v44 = (_QWORD *)*v8;
      v45 = *(_QWORD **)v43;
      v46 = *(_QWORD *)(*v8 + 16);
      if (v46 != *(_QWORD *)(*(_QWORD *)v43 + 16))
        goto LABEL_40;
      if (v46 && v44 != v45)
      {
        if (v44[4] != v45[4])
          goto LABEL_40;
        if (v46 != 1)
        {
          if (v44[5] != v45[5])
            goto LABEL_40;
          v49 = v44 + 6;
          v50 = v45 + 6;
          v51 = v46 - 2;
          while (v51)
          {
            v53 = *v49++;
            v52 = v53;
            v54 = *v50++;
            --v51;
            if (v52 != v54)
              goto LABEL_40;
          }
        }
      }
      v47 = v8[1] == *(_QWORD *)(v74 + 8) && v8[2] == *(_QWORD *)(v74 + 16);
      if (!v47 && (sub_1D4922E38() & 1) == 0
        || (sub_1D492201C(),
            sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]),
            (sub_1D49225E0() & 1) == 0))
      {
LABEL_40:
        sub_1D4697DE0(v74, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
        v56 = &qword_1ED98E758;
        goto LABEL_41;
      }
      sub_1D4697DE0(v74, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
      sub_1D4697DE0((uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.OntologyNode);
    }
    sub_1D46992EC((uint64_t)v10, &qword_1ED98E758);
    if (*v16 != *v14)
      goto LABEL_43;
    sub_1D492201C();
    sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v48 = sub_1D49225E0();
    sub_1D4697DE0((uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
    sub_1D4697DE0((uint64_t)v16, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult.ClassificationResult);
    v32 = v65;
    if ((v48 & 1) == 0)
      goto LABEL_44;
    if (++v34 == v64)
      goto LABEL_36;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D489EF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  BOOL v18;
  uint64_t v20;
  float *v21;

  v4 = type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResult(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (float *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v10 = (float *)((char *)&v20 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v16 = 1;
      return v16 & 1;
    }
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v20 = *(_QWORD *)(v8 + 72);
    v13 = v11 - 1;
    v21 = (float *)((char *)&v20 - v9);
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResult);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResult);
      v14 = *(_QWORD *)v10;
      if (*((_BYTE *)v10 + 8) == 1)
        v14 = qword_1D493B268[v14];
      v15 = *(_QWORD *)v7;
      if (*((_BYTE *)v7 + 8))
        __asm { BR              X10 }
      if (v14 != v15 || v10[3] != v7[3])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v10 = v21;
      v16 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResult);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResult);
      v18 = v13-- != 0;
      if ((v16 & 1) != 0)
      {
        v12 += v20;
        if (v18)
          continue;
      }
      return v16 & 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResult);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResult);
  }
  v16 = 0;
  return v16 & 1;
}

uint64_t sub_1D489F2A4(uint64_t a1, uint64_t a2)
{
  return sub_1D489F2B8(a1, a2, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.ObjectDetectorImageRegion, (uint64_t (*)(char *, char *))sub_1D47714DC);
}

uint64_t sub_1D489F2B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        sub_1D469C304(a1 + v16, (uint64_t)v14, a3);
        sub_1D469C304(a2 + v16, (uint64_t)v11, a3);
        v19 = a4(v14, v11);
        sub_1D4697DE0((uint64_t)v11, a3);
        sub_1D4697DE0((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_1D489F3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Argos_Protos_Queryflow_Polygon(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v27 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v19 = 1;
      return v19 & 1;
    }
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v27 = a2 + v13;
    v28 = a1 + v13;
    v14 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1D469C304(v28 + v14 * v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_Polygon);
      sub_1D469C304(v27 + v14 * v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_Polygon);
      v15 = *(float **)v10;
      v16 = *(float **)v7;
      v17 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      if (v17 != *(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      if (v17)
        v18 = v15 == v16;
      else
        v18 = 1;
      if (!v18)
      {
        if (v15[8] != v16[8])
          break;
        if (v17 != 1)
        {
          if (v15[9] != v16[9])
            break;
          v20 = v15 + 10;
          v21 = v16 + 10;
          v22 = v17 - 2;
          while (v22)
          {
            v23 = *v20++;
            v24 = v23;
            v25 = *v21++;
            --v22;
            if (v24 != v25)
              goto LABEL_19;
          }
        }
      }
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v19 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_Polygon);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_Polygon);
      if ((v19 & 1) != 0 && ++v12 != v11)
        continue;
      return v19 & 1;
    }
LABEL_19:
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_Polygon);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_Polygon);
  }
  v19 = 0;
  return v19 & 1;
}

BOOL sub_1D489F620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_1D489F68C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v15;
  float *v16;

  v4 = type metadata accessor for Argos_Protos_Queryflow_BoxScoreDomainAssignmentRule.BoxScoreRange(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (float *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v10 = (float *)((char *)&v15 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = (float *)((char *)&v15 - v9);
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_BoxScoreDomainAssignmentRule.BoxScoreRange);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_BoxScoreDomainAssignmentRule.BoxScoreRange);
      if (*v10 != *v7)
        break;
      if (v10[1] != v7[1])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = sub_1D49225E0();
      v10 = v16;
      if ((v13 & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_BoxScoreDomainAssignmentRule.BoxScoreRange);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_BoxScoreDomainAssignmentRule.BoxScoreRange);
      v12 += v15;
      if (!--v11)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_BoxScoreDomainAssignmentRule.BoxScoreRange);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_BoxScoreDomainAssignmentRule.BoxScoreRange);
  }
  return 0;
}

uint64_t sub_1D489F870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v18 = type metadata accessor for Com_Apple_Visualintelligence_StorefrontPoi(0);
  v4 = MEMORY[0x1E0C80A78](v18);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1D469C304(a1 + v11, (uint64_t)v9, type metadata accessor for Com_Apple_Visualintelligence_StorefrontPoi);
      sub_1D469C304(a2 + v11, (uint64_t)v6, type metadata accessor for Com_Apple_Visualintelligence_StorefrontPoi);
      v12 = *(int *)(v18 + 20);
      v13 = *(_QWORD *)&v9[v12];
      v14 = *(_QWORD *)&v6[v12];
      if (v13 != v14)
      {
        swift_retain();
        swift_retain();
        v15 = sub_1D4759928(v13, v14);
        swift_release();
        swift_release();
        if ((v15 & 1) == 0)
          break;
      }
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      if ((sub_1D49225E0() & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v6, type metadata accessor for Com_Apple_Visualintelligence_StorefrontPoi);
      sub_1D4697DE0((uint64_t)v9, type metadata accessor for Com_Apple_Visualintelligence_StorefrontPoi);
      v11 += v17;
      if (!--v10)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v6, type metadata accessor for Com_Apple_Visualintelligence_StorefrontPoi);
    sub_1D4697DE0((uint64_t)v9, type metadata accessor for Com_Apple_Visualintelligence_StorefrontPoi);
  }
  return 0;
}

uint64_t sub_1D489FA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v15;
  char *v16;

  v4 = type metadata accessor for Argos_Protos_Queryflow_RichLabelThreshold(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (_DWORD *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v10 = (_DWORD *)((char *)&v15 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = (char *)&v15 - v9;
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RichLabelThreshold);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RichLabelThreshold);
      if (*v10 != *v7)
        break;
      if (v10[1] != v7[1])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = sub_1D49225E0();
      v10 = v16;
      if ((v13 & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RichLabelThreshold);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RichLabelThreshold);
      v12 += v15;
      if (!--v11)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RichLabelThreshold);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RichLabelThreshold);
  }
  return 0;
}

uint64_t sub_1D489FC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v16;
  char *v17;

  v4 = type metadata accessor for Argos_Protos_Queryflow_RichLabelKgMapper(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v16 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v16 = *(_QWORD *)(v8 + 72);
    v17 = (char *)&v16 - v9;
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RichLabelKgMapper);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RichLabelKgMapper);
      if (*(_DWORD *)v10 != *(_DWORD *)v7)
        break;
      v13 = *((_QWORD *)v10 + 1) == *((_QWORD *)v7 + 1) && *((_QWORD *)v10 + 2) == *((_QWORD *)v7 + 2);
      if (!v13 && (sub_1D4922E38() & 1) == 0)
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = sub_1D49225E0();
      v10 = v17;
      if ((v14 & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RichLabelKgMapper);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RichLabelKgMapper);
      v12 += v16;
      if (!--v11)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RichLabelKgMapper);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RichLabelKgMapper);
  }
  return 0;
}

uint64_t sub_1D489FE1C(uint64_t a1, uint64_t a2)
{
  return sub_1D489F2B8(a1, a2, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.DomainSuppressionRule, (uint64_t (*)(char *, char *))sub_1D4741918);
}

uint64_t sub_1D489FE30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.RegionSuppressionRule(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v17 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.RegionSuppressionRule);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.RegionSuppressionRule);
      v13 = *(_QWORD *)v10 == *(_QWORD *)v7 && *((_QWORD *)v10 + 1) == *((_QWORD *)v7 + 1);
      if (!v13 && (sub_1D4922E38() & 1) == 0)
        break;
      v14 = *((_QWORD *)v10 + 2) == *((_QWORD *)v7 + 2) && *((_QWORD *)v10 + 3) == *((_QWORD *)v7 + 3);
      if (!v14 && (sub_1D4922E38() & 1) == 0
        || (*((_QWORD *)v10 + 4) != *((_QWORD *)v7 + 4) || *((_QWORD *)v10 + 5) != *((_QWORD *)v7 + 5))
        && (sub_1D4922E38() & 1) == 0)
      {
        break;
      }
      if (*((float *)v10 + 12) != *((float *)v7 + 12))
        break;
      if (*((float *)v10 + 13) != *((float *)v7 + 13))
        break;
      v18 = v12;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v15 = v18;
      if ((sub_1D49225E0() & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.RegionSuppressionRule);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.RegionSuppressionRule);
      v12 = v15 + v17;
      if (!--v11)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.RegionSuppressionRule);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.RegionSuppressionRule);
  }
  return 0;
}

uint64_t sub_1D48A0070(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v16;
  char *v17;

  v4 = type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.PersonImageLevelSupressionRule(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v16 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v16 = *(_QWORD *)(v8 + 72);
    v17 = (char *)&v16 - v9;
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.PersonImageLevelSupressionRule);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.PersonImageLevelSupressionRule);
      v13 = *(_QWORD *)v10 == *(_QWORD *)v7 && *((_QWORD *)v10 + 1) == *((_QWORD *)v7 + 1);
      if (!v13 && (sub_1D4922E38() & 1) == 0)
        break;
      if (*((_DWORD *)v10 + 4) != *((_DWORD *)v7 + 4))
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = sub_1D49225E0();
      v10 = v17;
      if ((v14 & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.PersonImageLevelSupressionRule);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.PersonImageLevelSupressionRule);
      v12 += v16;
      if (!--v11)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.PersonImageLevelSupressionRule);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.PersonImageLevelSupressionRule);
  }
  return 0;
}

uint64_t sub_1D48A0264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;

  v18 = type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.DomainSuppressionRule.SuppressCondition(0);
  v4 = MEMORY[0x1E0C80A78](v18);
  v6 = (float *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v9 = (float *)((char *)&v17 - v8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 != *(_QWORD *)(a2 + 16))
  {
LABEL_14:
    v13 = 0;
    return v13 & 1;
  }
  if (v10 && a1 != a2)
  {
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = *(_QWORD *)(v7 + 72);
    v12 = v10 - 1;
    while (1)
    {
      sub_1D469C304(a1 + v11, (uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.DomainSuppressionRule.SuppressCondition);
      sub_1D469C304(a2 + v11, (uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.DomainSuppressionRule.SuppressCondition);
      if (*v9 != *v6)
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.DomainSuppressionRule.SuppressCondition);
      sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.DomainSuppressionRule.SuppressCondition);
      v15 = v12-- != 0;
      if ((v13 & 1) != 0)
      {
        v11 += v17;
        if (v15)
          continue;
      }
      return v13 & 1;
    }
    sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.DomainSuppressionRule.SuppressCondition);
    sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_RegionSelectionConfig.DomainSuppressionRule.SuppressCondition);
    goto LABEL_14;
  }
  v13 = 1;
  return v13 & 1;
}

uint64_t sub_1D48A0420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  BOOL v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;

  v4 = type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v79 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v64 - v8;
  v10 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v80 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v81 = (uint64_t)&v64 - v14;
  v82 = type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold(0);
  v77 = *(_QWORD *)(v82 - 8);
  v15 = MEMORY[0x1E0C80A78](v82);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v64 - v18;
  v20 = type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Prerequisite(0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (uint64_t *)((char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x1E0C80A78](v21);
  v84 = (uint64_t *)((char *)&v64 - v26);
  v27 = *(_QWORD *)(a1 + 16);
  if (v27 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v27 || a1 == a2)
    return 1;
  v70 = v24;
  v64 = v5;
  v65 = v11;
  v73 = v10;
  v74 = v4;
  v28 = 0;
  v29 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)(v25 + 72);
  v83 = v9;
  v76 = v23;
  v68 = v30;
  v69 = v27;
  v66 = v32;
  v67 = v31;
  while (1)
  {
    v71 = v28;
    v33 = v32 * v28;
    v34 = v30 + v32 * v28;
    v35 = v84;
    sub_1D469C304(v34, (uint64_t)v84, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Prerequisite);
    sub_1D469C304(v31 + v33, (uint64_t)v23, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Prerequisite);
    v36 = *v35;
    v37 = *v23;
    v78 = v36;
    v38 = *(_QWORD *)(v36 + 16);
    if (v38 != *(_QWORD *)(v37 + 16))
      goto LABEL_59;
    if (v38 && v78 != v37)
    {
      v39 = 0;
      v40 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
      v75 = *(_QWORD *)(v77 + 72);
      while (1)
      {
        result = sub_1D469C304(v78 + v40, (uint64_t)v19, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
        if (v39 >= *(_QWORD *)(v37 + 16))
        {
          __break(1u);
          goto LABEL_63;
        }
        sub_1D469C304(v37 + v40, (uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
        v42 = *(_QWORD *)v19 == *(_QWORD *)v17 && *((_QWORD *)v19 + 1) == *((_QWORD *)v17 + 1);
        if (!v42 && (sub_1D4922E38() & 1) == 0
          || (*((_QWORD *)v19 + 2) != *((_QWORD *)v17 + 2) || *((_QWORD *)v19 + 3) != *((_QWORD *)v17 + 3))
          && (sub_1D4922E38() & 1) == 0
          || *((float *)v19 + 8) != *((float *)v17 + 8)
          || v19[36] != v17[36])
        {
          break;
        }
        sub_1D492201C();
        sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v9 = v83;
        v43 = sub_1D49225E0();
        sub_1D4697DE0((uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
        sub_1D4697DE0((uint64_t)v19, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
        if ((v43 & 1) == 0)
          goto LABEL_59;
        ++v39;
        v40 += v75;
        if (v38 == v39)
          goto LABEL_22;
      }
      sub_1D4697DE0((uint64_t)v17, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
      v61 = (uint64_t)v19;
      v62 = type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold;
LABEL_58:
      sub_1D4697DE0(v61, v62);
LABEL_59:
      sub_1D4697DE0((uint64_t)v76, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Prerequisite);
      sub_1D4697DE0((uint64_t)v84, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Prerequisite);
      return 0;
    }
LABEL_22:
    v44 = v76[1];
    v75 = v84[1];
    v45 = *(_QWORD *)(v44 + 16);
    v78 = *(_QWORD *)(v75 + 16);
    if (v78 != v45)
      goto LABEL_59;
    if (v78 && v75 != v44)
      break;
LABEL_37:
    v53 = v76[2];
    v75 = v84[2];
    v54 = *(_QWORD *)(v53 + 16);
    v78 = *(_QWORD *)(v75 + 16);
    if (v78 != v54)
      goto LABEL_59;
    if (v78 && v75 != v53)
    {
      v55 = 0;
      v56 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
      v72 = *(_QWORD *)(v64 + 72);
      do
      {
        result = sub_1D469C304(v75 + v56, (uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
        if (v55 >= *(_QWORD *)(v53 + 16))
          goto LABEL_64;
        v57 = v79;
        sub_1D469C304(v53 + v56, v79, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
        v58 = *(_QWORD *)v9 == *(_QWORD *)v57 && *((_QWORD *)v9 + 1) == *(_QWORD *)(v57 + 8);
        if (!v58 && (sub_1D4922E38() & 1) == 0 || *((float *)v9 + 4) != *(float *)(v57 + 16))
        {
          v63 = type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold;
          sub_1D4697DE0(v57, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
          v61 = (uint64_t)v9;
          goto LABEL_57;
        }
        v59 = v57;
        sub_1D492201C();
        sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v9 = v83;
        v60 = sub_1D49225E0();
        sub_1D4697DE0(v59, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
        sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
        if ((v60 & 1) == 0)
          goto LABEL_59;
        ++v55;
        v56 += v72;
      }
      while (v78 != v55);
    }
    sub_1D492201C();
    sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v9 = v83;
    if ((sub_1D49225E0() & 1) == 0)
      goto LABEL_59;
    v28 = v71 + 1;
    v23 = v76;
    sub_1D4697DE0((uint64_t)v76, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Prerequisite);
    sub_1D4697DE0((uint64_t)v84, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Prerequisite);
    result = 1;
    v30 = v68;
    v32 = v66;
    v31 = v67;
    if (v28 == v69)
      return result;
  }
  v46 = 0;
  v47 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  v72 = *(_QWORD *)(v65 + 72);
  while (1)
  {
    v48 = v81;
    result = sub_1D469C304(v75 + v47, v81, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
    if (v46 >= *(_QWORD *)(v44 + 16))
      break;
    v49 = v80;
    sub_1D469C304(v44 + v47, v80, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
    v50 = *(_QWORD *)v48 == *(_QWORD *)v49 && *(_QWORD *)(v48 + 8) == *(_QWORD *)(v49 + 8);
    if (!v50 && (sub_1D4922E38() & 1) == 0
      || *(float *)(v48 + 16) != *(float *)(v49 + 16)
      || *(unsigned __int8 *)(v48 + 20) != *(unsigned __int8 *)(v49 + 20)
      || *(unsigned __int8 *)(v48 + 21) != *(unsigned __int8 *)(v49 + 21))
    {
      v63 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold;
      sub_1D4697DE0(v49, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
      v61 = v48;
LABEL_57:
      v62 = v63;
      goto LABEL_58;
    }
    v51 = v49;
    sub_1D492201C();
    sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v9 = v83;
    v52 = sub_1D49225E0();
    sub_1D4697DE0(v51, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
    sub_1D4697DE0(v48, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
    if ((v52 & 1) == 0)
      goto LABEL_59;
    ++v46;
    v47 += v72;
    if (v78 == v46)
      goto LABEL_37;
  }
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_1D48A0BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  v43 = type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold(0);
  v4 = *(_QWORD *)(v43 - 8);
  v5 = MEMORY[0x1E0C80A78](v43);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v33 - v8;
  v10 = type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Requirement(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v44 = (char *)&v33 - v16;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v17 || a1 == a2)
    return 1;
  v38 = v14;
  v33 = v4;
  v18 = 0;
  v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(v15 + 72);
  v41 = v13;
  v23 = (uint64_t)v44;
  v36 = v20;
  v37 = v17;
  v34 = v22;
  v35 = v21;
  while (1)
  {
    v39 = v18;
    v24 = v22 * v18;
    sub_1D469C304(v20 + v24, v23, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Requirement);
    sub_1D469C304(v21 + v24, (uint64_t)v13, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Requirement);
    v25 = *(_QWORD *)v23 == *(_QWORD *)v13 && *(_QWORD *)(v23 + 8) == *((_QWORD *)v13 + 1);
    if (!v25 && (sub_1D4922E38() & 1) == 0
      || (v26 = *((_QWORD *)v13 + 2),
          v42 = *(_QWORD *)(v23 + 16),
          v27 = *(_QWORD *)(v42 + 16),
          v27 != *(_QWORD *)(v26 + 16)))
    {
LABEL_40:
      sub_1D4697DE0((uint64_t)v13, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Requirement);
      sub_1D4697DE0(v23, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Requirement);
      return 0;
    }
    if (v27 && v42 != v26)
      break;
LABEL_27:
    if ((*(_QWORD *)(v23 + 24) != *((_QWORD *)v13 + 3) || *(_QWORD *)(v23 + 32) != *((_QWORD *)v13 + 4))
      && (sub_1D4922E38() & 1) == 0)
    {
      goto LABEL_40;
    }
    if (*(unsigned __int8 *)(v23 + 40) != v13[40]
      || (*(_QWORD *)(v23 + 48) != *((_QWORD *)v13 + 6) || *(_QWORD *)(v23 + 56) != *((_QWORD *)v13 + 7))
      && (sub_1D4922E38() & 1) == 0)
    {
      goto LABEL_40;
    }
    if (*(unsigned __int8 *)(v23 + 64) != v13[64])
      goto LABEL_40;
    sub_1D492201C();
    sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v23 = (uint64_t)v44;
    v13 = v41;
    if ((sub_1D49225E0() & 1) == 0)
      goto LABEL_40;
    v18 = v39 + 1;
    sub_1D4697DE0((uint64_t)v13, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Requirement);
    sub_1D4697DE0(v23, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.Requirement);
    result = 1;
    v20 = v36;
    v22 = v34;
    v21 = v35;
    if (v18 == v37)
      return result;
  }
  v28 = 0;
  v29 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v40 = *(_QWORD *)(v33 + 72);
  while (1)
  {
    result = sub_1D469C304(v42 + v29, (uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
    if (v28 >= *(_QWORD *)(v26 + 16))
      break;
    sub_1D469C304(v26 + v29, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
    v31 = *(_QWORD *)v9 == *(_QWORD *)v7 && *((_QWORD *)v9 + 1) == *((_QWORD *)v7 + 1);
    if (!v31 && (sub_1D4922E38() & 1) == 0
      || (*((_QWORD *)v9 + 2) != *((_QWORD *)v7 + 2) || *((_QWORD *)v9 + 3) != *((_QWORD *)v7 + 3))
      && (sub_1D4922E38() & 1) == 0
      || *((float *)v9 + 8) != *((float *)v7 + 8)
      || v9[36] != v7[36])
    {
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
      sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
      goto LABEL_40;
    }
    sub_1D492201C();
    sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v23 = (uint64_t)v44;
    v13 = v41;
    v32 = sub_1D49225E0();
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
    sub_1D4697DE0((uint64_t)v9, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
    if ((v32 & 1) == 0)
      goto LABEL_40;
    ++v28;
    v29 += v40;
    if (v27 == v28)
      goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48A1018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_25:
    v17 = 0;
    return v17 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v21 = *(_QWORD *)(v8 + 72);
    v13 = v11 - 1;
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
      v14 = *(_QWORD *)v10 == *(_QWORD *)v7 && *((_QWORD *)v10 + 1) == *((_QWORD *)v7 + 1);
      if (!v14 && (sub_1D4922E38() & 1) == 0)
        break;
      v15 = *((_QWORD *)v10 + 2) == *((_QWORD *)v7 + 2) && *((_QWORD *)v10 + 3) == *((_QWORD *)v7 + 3);
      if (!v15 && (sub_1D4922E38() & 1) == 0 || *((float *)v10 + 8) != *((float *)v7 + 8) || v10[36] != v7[36])
        break;
      v22 = v13;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v16 = v22;
      v17 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
      v18 = v16 != 0;
      v13 = v16 - 1;
      v19 = v18;
      if ((v17 & 1) != 0)
      {
        v12 += v21;
        if ((v19 & 1) != 0)
          continue;
      }
      return v17 & 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
    goto LABEL_25;
  }
  v17 = 1;
  return v17 & 1;
}

uint64_t sub_1D48A1238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_19:
    v16 = 0;
    return v16 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v20 = *(_QWORD *)(v8 + 72);
    v13 = v11 - 1;
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
      v14 = *(_QWORD *)v10 == *(_QWORD *)v7 && *((_QWORD *)v10 + 1) == *((_QWORD *)v7 + 1);
      if (!v14 && (sub_1D4922E38() & 1) == 0 || *((float *)v10 + 4) != *((float *)v7 + 4))
        break;
      v21 = v13;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v15 = v21;
      v16 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
      v17 = v15 != 0;
      v13 = v15 - 1;
      v18 = v17;
      if ((v16 & 1) != 0)
      {
        v12 += v20;
        if ((v18 & 1) != 0)
          continue;
      }
      return v16 & 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_DomainPredictionNetThreshold);
    goto LABEL_19;
  }
  v16 = 1;
  return v16 & 1;
}

uint64_t sub_1D48A1430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Argos_Protos_Queryflow_IncompatibleDomains.DomainSet(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v28 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v11 && a1 != a2)
  {
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v28 = a2 + v13;
    v29 = a1 + v13;
    v14 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1D469C304(v29 + v14 * v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_IncompatibleDomains.DomainSet);
      sub_1D469C304(v28 + v14 * v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_IncompatibleDomains.DomainSet);
      v15 = *(_QWORD **)v10;
      v16 = *(_QWORD **)v7;
      v17 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      if (v17 != *(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      if (v17)
        v18 = v15 == v16;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = v15[4] == v16[4] && v15[5] == v16[5];
        if (!v19 && (sub_1D4922E38() & 1) == 0)
          break;
        if (v17 != 1)
        {
          v20 = v15[6] == v16[6] && v15[7] == v16[7];
          if (!v20 && (sub_1D4922E38() & 1) == 0)
            break;
          v21 = v17 - 2;
          if (v21)
          {
            v24 = v16 + 9;
            v25 = v15 + 9;
            do
            {
              v26 = *(v25 - 1) == *(v24 - 1) && *v25 == *v24;
              if (!v26 && (sub_1D4922E38() & 1) == 0)
                goto LABEL_42;
              v24 += 2;
              v25 += 2;
            }
            while (--v21);
          }
        }
      }
      v22 = *((_QWORD *)v10 + 1);
      v23 = *((_QWORD *)v7 + 1);
      if (v10[16])
        v22 = v22 != 0;
      if (v7[16] == 1)
      {
        if (v23)
        {
          if (v22 != 1)
            break;
        }
        else if (v22)
        {
          break;
        }
      }
      else if (v22 != v23)
      {
        break;
      }
      if (*((float *)v10 + 5) != *((float *)v7 + 5))
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      if ((sub_1D49225E0() & 1) == 0)
        break;
      ++v12;
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_IncompatibleDomains.DomainSet);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_IncompatibleDomains.DomainSet);
      if (v12 == v11)
        return 1;
    }
LABEL_42:
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_IncompatibleDomains.DomainSet);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_IncompatibleDomains.DomainSet);
    return 0;
  }
  return 1;
}

uint64_t sub_1D48A16F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  char v15;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;

  v20 = type metadata accessor for Com_Apple_Visualintelligence_LocalizedName(0);
  v4 = MEMORY[0x1E0C80A78](v20);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v9 = (uint64_t *)((char *)&v19 - v8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 != *(_QWORD *)(a2 + 16))
  {
LABEL_26:
    v15 = 0;
    return v15 & 1;
  }
  if (v10 && a1 != a2)
  {
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v19 = *(_QWORD *)(v7 + 72);
    v12 = v10 - 1;
    while (1)
    {
      sub_1D469C304(a1 + v11, (uint64_t)v9, type metadata accessor for Com_Apple_Visualintelligence_LocalizedName);
      sub_1D469C304(a2 + v11, (uint64_t)v6, type metadata accessor for Com_Apple_Visualintelligence_LocalizedName);
      v13 = *v9 == *v6 && v9[1] == v6[1];
      if (!v13 && (sub_1D4922E38() & 1) == 0)
        break;
      v14 = v9[2] == v6[2] && v9[3] == v6[3];
      if (!v14 && (sub_1D4922E38() & 1) == 0 || (v9[4] != v6[4] || v9[5] != v6[5]) && (sub_1D4922E38() & 1) == 0)
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v15 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v6, type metadata accessor for Com_Apple_Visualintelligence_LocalizedName);
      sub_1D4697DE0((uint64_t)v9, type metadata accessor for Com_Apple_Visualintelligence_LocalizedName);
      v17 = v12-- != 0;
      if ((v15 & 1) != 0)
      {
        v11 += v19;
        if (v17)
          continue;
      }
      return v15 & 1;
    }
    sub_1D4697DE0((uint64_t)v6, type metadata accessor for Com_Apple_Visualintelligence_LocalizedName);
    sub_1D4697DE0((uint64_t)v9, type metadata accessor for Com_Apple_Visualintelligence_LocalizedName);
    goto LABEL_26;
  }
  v15 = 1;
  return v15 & 1;
}

uint64_t sub_1D48A1900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  BOOL v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig.OneOf_Config(0);
  v63 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E568);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAA998);
  MEMORY[0x1E0C80A78](v62);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig(0);
  v68 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v66 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98D520);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAA9B0);
  MEMORY[0x1E0C80A78](v67);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Argos_Protos_Queryflow_DomainSignalsCachingConfig.ModelConfig(0);
  v18 = MEMORY[0x1E0C80A78](v71);
  v20 = (uint64_t *)((char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18);
  v23 = (uint64_t *)((char *)&v56 - v22);
  v69 = a1;
  v70 = a2;
  v24 = *(_QWORD *)(a1 + 16);
  if (v24 != *(_QWORD *)(a2 + 16))
  {
LABEL_35:
    v50 = 0;
    return v50 & 1;
  }
  if (v24 && v69 != v70)
  {
    v64 = v15;
    v57 = v6;
    v58 = v9;
    v59 = v4;
    v25 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v61 = *(_QWORD *)(v21 + 72);
    v26 = v24 - 1;
    v27 = (uint64_t)v11;
    v28 = v65;
    while (1)
    {
      sub_1D469C304(v69 + v25, (uint64_t)v23, type metadata accessor for Argos_Protos_Queryflow_DomainSignalsCachingConfig.ModelConfig);
      sub_1D469C304(v70 + v25, (uint64_t)v20, type metadata accessor for Argos_Protos_Queryflow_DomainSignalsCachingConfig.ModelConfig);
      v29 = *v23 == *v20 && v23[1] == v20[1];
      if (!v29 && (sub_1D4922E38() & 1) == 0)
        break;
      v30 = *(int *)(v71 + 24);
      v31 = (uint64_t)v20 + v30;
      v32 = (uint64_t)&v17[*(int *)(v67 + 48)];
      sub_1D469C5EC((uint64_t)v23 + v30, (uint64_t)v17, (uint64_t *)&unk_1ED98D520);
      sub_1D469C5EC(v31, v32, (uint64_t *)&unk_1ED98D520);
      v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
      if (v33((uint64_t)v17, 1, v28) == 1)
      {
        if (v33(v32, 1, v28) != 1)
        {
          v53 = &qword_1EFEAA9B0;
          goto LABEL_33;
        }
        sub_1D46992EC((uint64_t)v17, (uint64_t *)&unk_1ED98D520);
      }
      else
      {
        v34 = (uint64_t)v64;
        sub_1D469C5EC((uint64_t)v17, (uint64_t)v64, (uint64_t *)&unk_1ED98D520);
        if (v33(v32, 1, v28) == 1)
        {
          v54 = v34;
          v53 = &qword_1EFEAA9B0;
          goto LABEL_32;
        }
        v35 = v66;
        sub_1D469C630(v32, v66, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig);
        v36 = v27 + *(int *)(v62 + 48);
        sub_1D469C5EC(v34, v27, &qword_1ED98E568);
        sub_1D469C5EC(v35, v36, &qword_1ED98E568);
        v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
        v38 = v59;
        if (v37(v27, 1, v59) == 1)
        {
          v39 = v37(v36, 1, v38);
          v40 = v66;
          if (v39 != 1)
            goto LABEL_30;
          sub_1D46992EC(v27, &qword_1ED98E568);
        }
        else
        {
          v41 = v27;
          v42 = v27;
          v43 = (uint64_t)v58;
          sub_1D469C5EC(v41, (uint64_t)v58, &qword_1ED98E568);
          if (v37(v36, 1, v38) == 1)
          {
            sub_1D4697DE0(v43, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig.OneOf_Config);
            v27 = v42;
            v40 = v66;
LABEL_30:
            sub_1D46992EC(v27, &qword_1EFEAA998);
LABEL_31:
            sub_1D4697DE0(v40, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig);
            v53 = (uint64_t *)&unk_1ED98D520;
            v54 = (uint64_t)v64;
LABEL_32:
            sub_1D4697DE0(v54, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig);
LABEL_33:
            sub_1D46992EC((uint64_t)v17, v53);
            break;
          }
          v44 = v36;
          v45 = (uint64_t)v57;
          sub_1D469C630(v44, (uint64_t)v57, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig.OneOf_Config);
          v46 = sub_1D4703168(v43, v45);
          sub_1D4697DE0(v45, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig.OneOf_Config);
          sub_1D4697DE0(v43, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig.OneOf_Config);
          sub_1D46992EC(v42, &qword_1ED98E568);
          v27 = v42;
          v40 = v66;
          if ((v46 & 1) == 0)
            goto LABEL_31;
        }
        v47 = (uint64_t)v64;
        sub_1D492201C();
        v60 = v26;
        sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v48 = sub_1D49225E0();
        v26 = v60;
        sub_1D4697DE0(v40, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig);
        v49 = v47;
        v28 = v65;
        sub_1D4697DE0(v49, type metadata accessor for Argos_Protos_Queryflow_LabelCachingConverterConfig);
        sub_1D46992EC((uint64_t)v17, (uint64_t *)&unk_1ED98D520);
        if ((v48 & 1) == 0)
          break;
      }
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v50 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v20, type metadata accessor for Argos_Protos_Queryflow_DomainSignalsCachingConfig.ModelConfig);
      sub_1D4697DE0((uint64_t)v23, type metadata accessor for Argos_Protos_Queryflow_DomainSignalsCachingConfig.ModelConfig);
      v52 = v26-- != 0;
      if ((v50 & 1) != 0)
      {
        v25 += v61;
        if (v52)
          continue;
      }
      return v50 & 1;
    }
    sub_1D4697DE0((uint64_t)v20, type metadata accessor for Argos_Protos_Queryflow_DomainSignalsCachingConfig.ModelConfig);
    sub_1D4697DE0((uint64_t)v23, type metadata accessor for Argos_Protos_Queryflow_DomainSignalsCachingConfig.ModelConfig);
    goto LABEL_35;
  }
  v50 = 1;
  return v50 & 1;
}

BOOL sub_1D48A1F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v3 = (int *)(a1 + 36);
  v4 = (int *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1D48A1FEC(uint64_t a1, uint64_t a2)
{
  return sub_1D489F2B8(a1, a2, type metadata accessor for Argos_Protos_MLModel_FeatureDescription, (uint64_t (*)(char *, char *))sub_1D480BD10);
}

BOOL sub_1D48A2000(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1D48A206C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Argos_Protos_MLModel_ArrayFeatureType.Shape(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v27 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v19 = 1;
      return v19 & 1;
    }
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v27 = a2 + v13;
    v28 = a1 + v13;
    v14 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1D469C304(v28 + v14 * v12, (uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_ArrayFeatureType.Shape);
      sub_1D469C304(v27 + v14 * v12, (uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_ArrayFeatureType.Shape);
      v15 = *(_QWORD **)v10;
      v16 = *(_QWORD **)v7;
      v17 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      if (v17 != *(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      if (v17)
        v18 = v15 == v16;
      else
        v18 = 1;
      if (!v18)
      {
        if (v15[4] != v16[4])
          break;
        if (v17 != 1)
        {
          if (v15[5] != v16[5])
            break;
          v20 = v15 + 6;
          v21 = v16 + 6;
          v22 = v17 - 2;
          while (v22)
          {
            v24 = *v20++;
            v23 = v24;
            v25 = *v21++;
            --v22;
            if (v23 != v25)
              goto LABEL_19;
          }
        }
      }
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v19 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_ArrayFeatureType.Shape);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_ArrayFeatureType.Shape);
      if ((v19 & 1) != 0 && ++v12 != v11)
        continue;
      return v19 & 1;
    }
LABEL_19:
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_ArrayFeatureType.Shape);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_ArrayFeatureType.Shape);
  }
  v19 = 0;
  return v19 & 1;
}

uint64_t sub_1D48A2294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v15;
  char *v16;

  v4 = type metadata accessor for Argos_Protos_MLModel_SizeRange(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v10 = (uint64_t *)((char *)&v15 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = (char *)&v15 - v9;
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_SizeRange);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_SizeRange);
      if (*v10 != *v7)
        break;
      if (v10[1] != v7[1])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = sub_1D49225E0();
      v10 = v16;
      if ((v13 & 1) == 0)
        break;
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_SizeRange);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_SizeRange);
      v12 += v15;
      if (!--v11)
        return 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_SizeRange);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_SizeRange);
  }
  return 0;
}

uint64_t sub_1D48A2478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for Argos_Protos_Queryflow_SafetyConfig.SafeRegionConfig(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (float *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v10 = (float *)((char *)&v26 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v11 && a1 != a2)
  {
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v26 = a2 + v13;
    v27 = a1 + v13;
    v14 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1D469C304(v27 + v14 * v12, (uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_SafetyConfig.SafeRegionConfig);
      sub_1D469C304(v26 + v14 * v12, (uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_SafetyConfig.SafeRegionConfig);
      v15 = *(_QWORD **)v10;
      v16 = *(_QWORD **)v7;
      v17 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      if (v17 != *(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      if (v17)
        v18 = v15 == v16;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = v15[4] == v16[4] && v15[5] == v16[5];
        if (!v19 && (sub_1D4922E38() & 1) == 0)
          break;
        if (v17 != 1)
        {
          v20 = v15[6] == v16[6] && v15[7] == v16[7];
          if (!v20 && (sub_1D4922E38() & 1) == 0)
            break;
          v21 = v17 - 2;
          if (v21)
          {
            v23 = v16 + 9;
            v24 = v15 + 9;
            do
            {
              v25 = *(v24 - 1) == *(v23 - 1) && *v24 == *v23;
              if (!v25 && (sub_1D4922E38() & 1) == 0)
                goto LABEL_36;
              v23 += 2;
              v24 += 2;
            }
            while (--v21);
          }
        }
      }
      if (v10[2] != v7[2])
        break;
      if (v10[3] != v7[3])
        break;
      if (v10[4] != v7[4])
        break;
      if (v10[5] != v7[5])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      if ((sub_1D49225E0() & 1) == 0)
        break;
      ++v12;
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_SafetyConfig.SafeRegionConfig);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_SafetyConfig.SafeRegionConfig);
      result = 1;
      if (v12 == v11)
        return result;
    }
LABEL_36:
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_Queryflow_SafetyConfig.SafeRegionConfig);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_Queryflow_SafetyConfig.SafeRegionConfig);
    return 0;
  }
  return 1;
}

uint64_t sub_1D48A2724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Argos_Protos_MLModel_ImageFeatureType.ImageSize(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v10 = (uint64_t *)((char *)&v18 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v14 = 0;
    return v14 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v19 = *(_QWORD *)(v8 + 72);
    v13 = v11 - 1;
    while (1)
    {
      sub_1D469C304(a1 + v12, (uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_ImageFeatureType.ImageSize);
      sub_1D469C304(a2 + v12, (uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_ImageFeatureType.ImageSize);
      if (*v10 != *v7 || v10[1] != v7[1])
        break;
      sub_1D492201C();
      sub_1D4696EA4(&qword_1EFEAA420, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = sub_1D49225E0();
      sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_ImageFeatureType.ImageSize);
      sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_ImageFeatureType.ImageSize);
      v16 = v13-- != 0;
      if ((v14 & 1) != 0)
      {
        v12 += v19;
        if (v16)
          continue;
      }
      return v14 & 1;
    }
    sub_1D4697DE0((uint64_t)v7, type metadata accessor for Argos_Protos_MLModel_ImageFeatureType.ImageSize);
    sub_1D4697DE0((uint64_t)v10, type metadata accessor for Argos_Protos_MLModel_ImageFeatureType.ImageSize);
    goto LABEL_15;
  }
  v14 = 1;
  return v14 & 1;
}

uint64_t sub_1D48A2904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v5;
  float v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  float *v11;
  float *i;
  float v13;
  float v14;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(float *)(a1 + 48);
  v6 = *(float *)(a2 + 48);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
  {
    if (v5 == v6)
      goto LABEL_12;
    return 0;
  }
  v8 = sub_1D4922E38();
  result = 0;
  if ((v8 & 1) != 0 && v5 == v6)
  {
LABEL_12:
    v10 = v2 - 1;
    if (v10)
    {
      v11 = (float *)(a2 + 72);
      for (i = (float *)(a1 + 72); ; i += 6)
      {
        v13 = *i;
        v14 = *v11;
        if (*((_QWORD *)i - 2) == *((_QWORD *)v11 - 2) && *((_QWORD *)i - 1) == *((_QWORD *)v11 - 1))
        {
          if (v13 != v14)
            return 0;
        }
        else
        {
          v16 = sub_1D4922E38();
          result = 0;
          if ((v16 & 1) == 0 || v13 != v14)
            return result;
        }
        v11 += 6;
        result = 1;
        if (!--v10)
          return result;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_1D48A2A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 48);
    for (i = (uint64_t *)(a2 + 48); ; i += 8)
    {
      v5 = *v3;
      v6 = v3[1];
      v7 = v3[2];
      v16 = v3[4];
      v17 = v3[3];
      v8 = *i;
      v9 = i[1];
      v10 = i[2];
      v11 = i[3];
      v14 = i[4];
      v15 = v3[5];
      v13 = i[5];
      if ((*(v3 - 2) != *(i - 2) || *(v3 - 1) != *(i - 1)) && (sub_1D4922E38() & 1) == 0)
        break;
      if ((v5 != v8 || v6 != v9) && (sub_1D4922E38() & 1) == 0
        || (v7 != v10 || v17 != v11) && (sub_1D4922E38() & 1) == 0
        || (v16 != v14 || v15 != v13) && (sub_1D4922E38() & 1) == 0)
      {
        break;
      }
      v3 += 8;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1D48A2B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float **v6;
  float *v7;
  float **v8;
  float *v9;
  uint64_t v10;
  BOOL v11;
  float *v12;
  float *v13;
  uint64_t i;
  float v15;
  float v16;
  float v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    while (1)
    {
      v6 = (float **)(v4 + 24 * v3);
      v7 = *v6;
      v8 = (float **)(v5 + 24 * v3);
      v9 = *v8;
      v10 = *((_QWORD *)*v6 + 2);
      if (v10 != *((_QWORD *)*v8 + 2))
        break;
      if (v10)
        v11 = v7 == v9;
      else
        v11 = 1;
      if (!v11)
      {
        if (v7[8] != v9[8])
          return 0;
        if (v10 != 1)
        {
          if (v7[9] != v9[9])
            return 0;
          v12 = v7 + 10;
          v13 = v9 + 10;
          for (i = v10 - 2; i; --i)
          {
            v15 = *v12++;
            v16 = v15;
            v17 = *v13++;
            if (v16 != v17)
              return 0;
          }
        }
      }
      if ((v6[1] != v8[1] || v6[2] != v8[2]) && (sub_1D4922E38() & 1) == 0)
        break;
      if (++v3 == v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1D48A2C74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  float v13;
  float v14;
  char v16;
  uint64_t result;
  uint64_t v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  char v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    while (1)
    {
      v6 = (_QWORD *)(v4 + 24 * v3);
      v7 = v6[2];
      v8 = (_QWORD *)(v5 + 24 * v3);
      v9 = v8[2];
      v10 = *v6 == *v8 && v6[1] == v8[1];
      if (!v10 && (sub_1D4922E38() & 1) == 0)
        break;
      v11 = *(_QWORD *)(v7 + 16);
      if (v11 != *(_QWORD *)(v9 + 16))
        break;
      if (v11)
        v12 = v7 == v9;
      else
        v12 = 1;
      if (!v12)
      {
        v13 = *(float *)(v7 + 48);
        v14 = *(float *)(v9 + 48);
        if (*(_QWORD *)(v7 + 32) == *(_QWORD *)(v9 + 32) && *(_QWORD *)(v7 + 40) == *(_QWORD *)(v9 + 40))
        {
          if (v13 != v14)
            return 0;
        }
        else
        {
          v16 = sub_1D4922E38();
          result = 0;
          if ((v16 & 1) == 0 || v13 != v14)
            return result;
        }
        v18 = v11 - 1;
        if (v18)
        {
          v19 = (float *)(v9 + 72);
          v20 = (float *)(v7 + 72);
          do
          {
            v21 = *v20;
            v22 = *v19;
            if (*((_QWORD *)v20 - 2) == *((_QWORD *)v19 - 2) && *((_QWORD *)v20 - 1) == *((_QWORD *)v19 - 1))
            {
              if (v21 != v22)
                return 0;
            }
            else
            {
              v24 = sub_1D4922E38();
              result = 0;
              if ((v24 & 1) == 0 || v21 != v22)
                return result;
            }
            v19 += 6;
            v20 += 6;
            --v18;
          }
          while (v18);
        }
      }
      if (++v3 == v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1D48A2DF8(uint64_t a1, uint64_t a2)
{
  return sub_1D489F2B8(a1, a2, type metadata accessor for Argos_Protos_Queryflow_DomainAssignmentRule, (uint64_t (*)(char *, char *))sub_1D4879DB4);
}

void __swiftcall VisualUnderstanding.Text.init(text:confidence:boundingBox:)(VisualIntelligence::VisualUnderstanding::Text *__return_ptr retstr, Swift::String text, Swift::Float confidence, VisualIntelligence::NormalizedRect boundingBox)
{
  uint64_t v4;
  CGSize v5;

  retstr->text = text;
  retstr->confidence = confidence;
  v5 = *(CGSize *)(v4 + 16);
  retstr->boundingBox.bottomLeftCGRect.origin = *(CGPoint *)v4;
  retstr->boundingBox.bottomLeftCGRect.size = v5;
}

uint64_t sub_1D48A2E24(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D48A2E64 + 4 * byte_1D4939FCF[a1]))(0x6567616D496C6C61, 0xEF736E6F69676552);
}

uint64_t sub_1D48A2E64()
{
  return 0x697461746F6E6E61;
}

uint64_t sub_1D48A2E80()
{
  return 0x5264656E69666572;
}

uint64_t sub_1D48A2EA4()
{
  return 0x7A69536567616D69;
}

uint64_t sub_1D48A2EC0()
{
  return 0x6D6D6F436C727563;
}

uint64_t sub_1D48A2EE0()
{
  return 0x44497972657571;
}

unint64_t sub_1D48A2EF8()
{
  return 0xD000000000000010;
}

uint64_t sub_1D48A2F14()
{
  return 0x6E6F697461727564;
}

uint64_t sub_1D48A2F38()
{
  unsigned __int8 *v0;

  return sub_1D48A2E24(*v0);
}

uint64_t sub_1D48A2F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B3224(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D48A2F64(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1D48A2F70()
{
  sub_1D48AB598();
  return sub_1D4922F64();
}

uint64_t sub_1D48A2F98()
{
  sub_1D48AB598();
  return sub_1D4922F70();
}

uint64_t VisualUnderstanding.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D330);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v40 = v1[2];
  v41 = v8;
  v10 = v1[3];
  v38 = v1[4];
  v39 = v10;
  v11 = v1[5];
  v36 = v1[6];
  v37 = v11;
  v12 = v1[7];
  v34 = v1[8];
  v35 = v12;
  v13 = v1[9];
  v14 = v1[10];
  v15 = v1[11];
  v16 = v1[12];
  v33 = v1[13];
  v32 = v1[14];
  v50 = *((unsigned __int8 *)v1 + 120);
  v30 = v1[16];
  v31 = v1[17];
  v29 = v1[18];
  v26 = v1[19];
  v27 = v1[20];
  v17 = v1[22];
  v28 = v1[21];
  v18 = a1[3];
  v19 = a1;
  v21 = v20;
  __swift_project_boxed_opaque_existential_1(v19, v18);
  sub_1D48AB598();
  sub_1D4922F58();
  v42 = v9;
  v51 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D160);
  sub_1D48AB70C(&qword_1ED98D168, &qword_1ED98CBA0, (uint64_t)&protocol conformance descriptor for VisualUnderstanding.ImageRegion, MEMORY[0x1E0DEAF10]);
  sub_1D4922DCC();
  if (!v2)
  {
    v22 = v32;
    v42 = v41;
    v43 = v40;
    v44 = v39;
    v45 = v38;
    v46 = v37;
    v47 = v36;
    v23 = v33;
    v48 = v35;
    v49 = v34;
    v51 = 1;
    sub_1D48AB5DC();
    sub_1D4922D78();
    v42 = v13;
    v43 = v14;
    v44 = v15;
    v45 = v16;
    v51 = 2;
    sub_1D47FAD68();
    sub_1D4922DCC();
    v42 = v23;
    v43 = v22;
    LOBYTE(v44) = v50;
    v51 = 3;
    type metadata accessor for CGSize(0);
    sub_1D4696EA4((unint64_t *)&unk_1ED98EAF8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9B9F0]);
    sub_1D4922D78();
    LOBYTE(v42) = 4;
    sub_1D4922D84();
    LOBYTE(v42) = 5;
    sub_1D4922DF0();
    v42 = v26;
    v43 = v27;
    v44 = v28;
    v51 = 6;
    sub_1D48AB620();
    sub_1D4922D78();
    v42 = v17;
    v51 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA78);
    sub_1D48AB664(&qword_1ED98EA80, &qword_1ED98EA78, (uint64_t (*)(void))sub_1D48AB6C8, MEMORY[0x1E0DEAF10]);
    sub_1D4922DCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v21);
}

uint64_t VisualUnderstanding.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _BYTE v75[7];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  _BYTE v85[7];
  char v86;
  uint64_t v87;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC350);
  v87 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED98CC88 != -1)
    swift_once();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48AB598();
  sub_1D4922F4C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_1D46B2C64(0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D160);
    LOBYTE(v47) = 0;
    sub_1D48AB70C(&qword_1EFEAC358, &qword_1EFEAC360, (uint64_t)&protocol conformance descriptor for VisualUnderstanding.ImageRegion, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    v8 = v59;
    LOBYTE(v47) = 1;
    sub_1D48AB790();
    swift_bridgeObjectRetain();
    sub_1D4922CDC();
    v39 = a2;
    v9 = v61;
    v10 = v62;
    LOBYTE(v47) = 2;
    v45 = v63;
    v46 = v59;
    v42 = v60;
    v43 = v65;
    v44 = v64;
    v41 = v66;
    sub_1D46B2ED8(v59);
    sub_1D47FADF0();
    sub_1D4922D30();
    v11 = v59;
    v12 = v60;
    v13 = v61;
    v14 = v62;
    type metadata accessor for CGSize(0);
    LOBYTE(v47) = 3;
    sub_1D4696EA4(&qword_1EFEAC370, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA08]);
    sub_1D4922CDC();
    v37 = v60;
    v38 = v59;
    v36 = v61;
    v86 = v61;
    LOBYTE(v59) = 4;
    v35 = sub_1D4922CE8();
    LOBYTE(v59) = 5;
    v40 = v15;
    swift_bridgeObjectRetain();
    v34 = sub_1D4922D54();
    LOBYTE(v47) = 6;
    sub_1D48AB7D4();
    sub_1D4922CDC();
    v32 = v8;
    v33 = v10;
    v31 = v9;
    v16 = v59;
    v17 = v60;
    v18 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA78);
    v83 = 7;
    sub_1D46B2F58(v16);
    sub_1D48AB664(&qword_1EFEAC380, &qword_1ED98EA78, (uint64_t (*)(void))sub_1D48AB818, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v7, v5);
    v19 = v84;
    v87 = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v47 = v32;
    *((_QWORD *)&v47 + 1) = v46;
    *(_QWORD *)&v48 = v42;
    *((_QWORD *)&v48 + 1) = v31;
    *(_QWORD *)&v49 = v33;
    *((_QWORD *)&v49 + 1) = v45;
    *(_QWORD *)&v50 = v44;
    *((_QWORD *)&v50 + 1) = v43;
    *(_QWORD *)&v51 = v41;
    *((_QWORD *)&v51 + 1) = v11;
    *(_QWORD *)&v52 = v12;
    *((_QWORD *)&v52 + 1) = v13;
    *(_QWORD *)&v53 = v14;
    *((_QWORD *)&v53 + 1) = v38;
    *(_QWORD *)&v54 = v37;
    BYTE8(v54) = v36;
    *(_QWORD *)&v55 = v35;
    *((_QWORD *)&v55 + 1) = v40;
    *(_QWORD *)&v56 = v34;
    *((_QWORD *)&v56 + 1) = v16;
    *(_QWORD *)&v57 = v17;
    *((_QWORD *)&v57 + 1) = v18;
    v58 = v19;
    sub_1D46B2E18((uint64_t)&v47);
    swift_bridgeObjectRelease();
    sub_1D46B2C64(v16);
    swift_bridgeObjectRelease();
    v20 = v42;
    v21 = v31;
    sub_1D46B3590(v46);
    v22 = v32;
    swift_bridgeObjectRelease();
    v23 = v56;
    v24 = v39;
    *(_OWORD *)(v39 + 128) = v55;
    *(_OWORD *)(v24 + 144) = v23;
    *(_OWORD *)(v24 + 160) = v57;
    *(_QWORD *)(v24 + 176) = v58;
    v25 = v52;
    *(_OWORD *)(v24 + 64) = v51;
    *(_OWORD *)(v24 + 80) = v25;
    v26 = v54;
    *(_OWORD *)(v24 + 96) = v53;
    *(_OWORD *)(v24 + 112) = v26;
    v27 = v48;
    *(_OWORD *)v24 = v47;
    *(_OWORD *)(v24 + 16) = v27;
    v28 = v50;
    *(_OWORD *)(v24 + 32) = v49;
    *(_OWORD *)(v24 + 48) = v28;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v59 = v22;
    v60 = v46;
    v61 = v20;
    v62 = v21;
    v63 = v33;
    v64 = v45;
    v65 = v44;
    v66 = v43;
    v67 = v41;
    v68 = v11;
    v69 = v12;
    v70 = v13;
    v71 = v14;
    v72 = v38;
    v73 = v37;
    v74 = v86;
    *(_DWORD *)&v75[3] = *(_DWORD *)&v85[3];
    *(_DWORD *)v75 = *(_DWORD *)v85;
    v76 = v35;
    v77 = v40;
    v78 = v34;
    v79 = v16;
    v80 = v17;
    v81 = v18;
    v82 = v87;
    return sub_1D46B34D0((uint64_t)&v59);
  }
}

uint64_t sub_1D48A3B44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VisualUnderstanding.init(from:)(a1, a2);
}

uint64_t sub_1D48A3B58(_QWORD *a1)
{
  return VisualUnderstanding.encode(to:)(a1);
}

uint64_t sub_1D48A3B6C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v11 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EBF8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B3600();
  sub_1D4922F58();
  v14 = 0;
  sub_1D4922D84();
  if (!v4)
  {
    v13 = 1;
    sub_1D4922D9C();
    v12 = 2;
    sub_1D4922DF0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1D48A3CCC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000016;
  if (*v0 != 1)
    v1 = 0x6D69547472617473;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_1D48A3D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B3644(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D48A3D54(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D48A3D60()
{
  sub_1D48B3600();
  return sub_1D4922F64();
}

uint64_t sub_1D48A3D88()
{
  sub_1D48B3600();
  return sub_1D4922F70();
}

void sub_1D48A3DB0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  v7 = sub_1D48B37A4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v6;
  }
}

uint64_t sub_1D48A3DE0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1D48A3B6C(a1, *v1, v1[1], v1[3]);
}

uint64_t VisualUnderstanding.Text.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

float VisualUnderstanding.Text.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

__n128 VisualUnderstanding.Text.boundingBox.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 24);
  v3 = *(_OWORD *)(v1 + 40);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1D48A3E44()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E656469666E6F63;
  if (*v0 != 1)
    v1 = 0x676E69646E756F62;
  if (*v0)
    return v1;
  else
    return 1954047348;
}

uint64_t sub_1D48A3EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B3964(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D48A3EC8()
{
  sub_1D48AB85C();
  return sub_1D4922F64();
}

uint64_t sub_1D48A3EF0()
{
  sub_1D48AB85C();
  return sub_1D4922F70();
}

uint64_t VisualUnderstanding.Text.encode(to:)(_QWORD *a1)
{
  return sub_1D48A3F70(a1, &qword_1EFEAC390, (void (*)(void))sub_1D48AB85C);
}

uint64_t VisualUnderstanding.Text.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D48A40F8(a1, &qword_1EFEAC3A0, (void (*)(void))sub_1D48AB85C, a2);
}

uint64_t sub_1D48A3F70(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v3;
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  v12 = v3[6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v16();
  sub_1D4922F58();
  LOBYTE(v19) = 0;
  v13 = v17;
  sub_1D4922D84();
  if (!v13)
  {
    LOBYTE(v19) = 1;
    sub_1D4922DA8();
    v19 = v9;
    v20 = v10;
    v21 = v11;
    v22 = v12;
    v18 = 2;
    sub_1D47FAD68();
    sub_1D4922DCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1D48A40F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;

  v22 = a4;
  v23 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_1D4922F4C();
  if (v4)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v10 = v7;
  v11 = v22;
  v12 = v23;
  LOBYTE(v25) = 0;
  v13 = sub_1D4922CE8();
  v15 = v14;
  LOBYTE(v25) = 1;
  swift_bridgeObjectRetain();
  sub_1D4922D0C();
  v17 = v16;
  v24 = 2;
  sub_1D47FADF0();
  sub_1D4922D30();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v12);
  v19 = v25;
  v20 = v26;
  *(_QWORD *)v11 = v13;
  *(_QWORD *)(v11 + 8) = v15;
  *(_DWORD *)(v11 + 16) = v17;
  *(_OWORD *)(v11 + 24) = v19;
  *(_OWORD *)(v11 + 40) = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D48A42D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC4F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B4564();
  sub_1D4922F58();
  v11 = a2;
  v10[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D170);
  sub_1D48AB664(&qword_1ED98D178, &qword_1ED98D170, (uint64_t (*)(void))sub_1D48AB8E4, MEMORY[0x1E0DEAF10]);
  sub_1D4922DCC();
  if (!v2)
  {
    v10[14] = 1;
    sub_1D4922DC0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1D48A4438(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v13[4];
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98AF48);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[3] = *(_DWORD *)(v1 + 20);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B5D50();
  sub_1D4922F58();
  LOBYTE(v16) = 0;
  v11 = v14;
  sub_1D4922D84();
  if (!v11)
  {
    LOBYTE(v16) = 1;
    sub_1D4922DA8();
    LOBYTE(v16) = 2;
    sub_1D4922DE4();
    v16 = v7;
    v17 = v8;
    v18 = v9;
    v19 = v10;
    v15 = 3;
    sub_1D47FAD68();
    sub_1D4922DCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1D48A45F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 v20;
  __int128 v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC698);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B5D50();
  sub_1D4922F4C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v20) = 0;
  v9 = sub_1D4922CE8();
  v11 = v10;
  LOBYTE(v20) = 1;
  swift_bridgeObjectRetain();
  sub_1D4922D0C();
  v13 = v12;
  LOBYTE(v20) = 2;
  v18 = sub_1D4922D48();
  v19 = 3;
  sub_1D47FADF0();
  sub_1D4922D30();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v20;
  v16 = v21;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a2 + 20) = v18;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D48A47FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98AF40);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B45A8();
  sub_1D4922F58();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98AF20);
  sub_1D48AB664(&qword_1ED98AF28, &qword_1ED98AF20, (uint64_t (*)(void))sub_1D48B45EC, MEMORY[0x1E0DEAF10]);
  sub_1D4922DCC();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1D48A4920(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D48A4960 + 4 * byte_1D4939FD7[a1]))(0x6F6E6E4165636166, 0xEF736E6F69746174);
}

unint64_t sub_1D48A4960()
{
  return 0xD000000000000010;
}

uint64_t sub_1D48A497C()
{
  return 0x6F6E6E417766736ELL;
}

unint64_t sub_1D48A499C()
{
  return 0xD000000000000012;
}

uint64_t sub_1D48A49EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VisualUnderstanding.Text.init(from:)(a1, a2);
}

uint64_t sub_1D48A4A00(_QWORD *a1)
{
  return VisualUnderstanding.Text.encode(to:)(a1);
}

uint64_t sub_1D48A4A14()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E656469666E6F63;
  if (*v0 != 1)
    v1 = 0x676E69646E756F62;
  if (*v0)
    return v1;
  else
    return 0x6C6562616CLL;
}

uint64_t sub_1D48A4A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B3ACC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D48A4A9C()
{
  sub_1D48B4520();
  return sub_1D4922F64();
}

uint64_t sub_1D48A4AC4()
{
  sub_1D48B4520();
  return sub_1D4922F70();
}

uint64_t sub_1D48A4AEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D48A40F8(a1, &qword_1EFEAC500, (void (*)(void))sub_1D48B4520, a2);
}

uint64_t sub_1D48A4B18(_QWORD *a1)
{
  return sub_1D48A3F70(a1, &qword_1ED98EBE8, (void (*)(void))sub_1D48B4520);
}

uint64_t sub_1D48A4B44()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F697369766572;
  else
    return 0x736E6F69676572;
}

uint64_t sub_1D48A4B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B3C3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D48A4BA4()
{
  sub_1D48B4564();
  return sub_1D4922F64();
}

uint64_t sub_1D48A4BCC()
{
  sub_1D48B4564();
  return sub_1D4922F70();
}

uint64_t sub_1D48A4BF4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1D48B3D2C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1D48A4C1C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1D48A42D8(a1, *v1);
}

uint64_t sub_1D48A4C34()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D48A4C60 + 4 * byte_1D4939FDE[*v0]))(0x6C6562616CLL, 0xE500000000000000);
}

uint64_t sub_1D48A4C60()
{
  return 0x6E656469666E6F63;
}

uint64_t sub_1D48A4C7C()
{
  return 0x6E756F4365636166;
}

uint64_t sub_1D48A4C98()
{
  return 0x676E69646E756F62;
}

uint64_t sub_1D48A4CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B3EE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D48A4CDC()
{
  sub_1D48B5D50();
  return sub_1D4922F64();
}

uint64_t sub_1D48A4D04()
{
  sub_1D48B5D50();
  return sub_1D4922F70();
}

uint64_t sub_1D48A4D2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D48A45F4(a1, a2);
}

uint64_t sub_1D48A4D40(_QWORD *a1)
{
  return sub_1D48A4438(a1);
}

uint64_t sub_1D48A4D5C()
{
  return 0x736E6F69676572;
}

uint64_t sub_1D48A4D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736E6F69676572 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D4922E38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D48A4E08()
{
  sub_1D48B45A8();
  return sub_1D4922F64();
}

uint64_t sub_1D48A4E30()
{
  sub_1D48B45A8();
  return sub_1D4922F70();
}

_QWORD *sub_1D48A4E58@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1D48B40C8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1D48A4E80(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1D48A47FC(a1, *v1);
}

uint64_t sub_1D48A4E98()
{
  unsigned __int8 *v0;

  return sub_1D48A4920(*v0);
}

uint64_t sub_1D48A4EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B4214(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D48A4EC4(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1D48A4ED0()
{
  sub_1D48AB8A0();
  return sub_1D4922F64();
}

uint64_t sub_1D48A4EF8()
{
  sub_1D48AB8A0();
  return sub_1D4922F70();
}

uint64_t VisualUnderstanding.Annotation.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D328);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v20 = v1[2];
  v21 = v8;
  v10 = v1[3];
  v18 = v1[4];
  v19 = v10;
  v11 = v1[5];
  v16 = v1[6];
  v17 = v11;
  v15 = v1[7];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48AB8A0();
  sub_1D4922F58();
  v22 = v9;
  v24 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D170);
  sub_1D48AB664(&qword_1ED98D178, &qword_1ED98D170, (uint64_t (*)(void))sub_1D48AB8E4, MEMORY[0x1E0DEAF10]);
  sub_1D4922D78();
  if (!v2)
  {
    v12 = v20;
    v22 = v21;
    v24 = 1;
    sub_1D4922D78();
    v22 = v12;
    v24 = 2;
    sub_1D4922D78();
    v22 = v19;
    v24 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D180);
    sub_1D48AB664(&qword_1ED98D188, &qword_1ED98D180, (uint64_t (*)(void))sub_1D48AB928, MEMORY[0x1E0DEAF10]);
    sub_1D4922D78();
    v22 = v18;
    v24 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D1B0);
    sub_1D48AB664(&qword_1ED98D1B8, &qword_1ED98D1B0, (uint64_t (*)(void))sub_1D48AB96C, MEMORY[0x1E0DEAF10]);
    sub_1D4922D78();
    v22 = v17;
    v23 = v16;
    v24 = 5;
    sub_1D48AB9B0();
    sub_1D4922D78();
    v22 = v15;
    v24 = 6;
    sub_1D48AB9F4();
    sub_1D4922D78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t VisualUnderstanding.Annotation.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC3A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48AB8A0();
  sub_1D4922F4C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v26 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D170);
  v29 = 0;
  sub_1D48AB664(&qword_1EFEAC3B0, &qword_1ED98D170, (uint64_t (*)(void))sub_1D48ABA38, MEMORY[0x1E0DEAF40]);
  sub_1D4922CDC();
  v9 = v27;
  v29 = 1;
  swift_bridgeObjectRetain();
  sub_1D4922CDC();
  v29 = 2;
  v25 = v27;
  swift_bridgeObjectRetain();
  sub_1D4922CDC();
  v11 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D180);
  v29 = 3;
  sub_1D48AB664(&qword_1EFEAC3C0, &qword_1ED98D180, (uint64_t (*)(void))sub_1D48ABA7C, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1D4922CDC();
  v23 = v11;
  v12 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D1B0);
  v29 = 4;
  sub_1D48AB664(&qword_1EFEAC3D0, &qword_1ED98D1B0, (uint64_t (*)(void))sub_1D48ABAC0, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  v21 = 0;
  sub_1D4922CDC();
  v22 = v12;
  v13 = v27;
  v29 = 5;
  sub_1D48ABB04();
  swift_bridgeObjectRetain();
  sub_1D4922CDC();
  v14 = v27;
  v20 = v28;
  v29 = 6;
  sub_1D48ABB48();
  v24 = v14;
  swift_bridgeObjectRetain();
  sub_1D4922CDC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v27;
  swift_bridgeObjectRetain();
  v17 = v25;
  v16 = v26;
  *v26 = v9;
  v16[1] = v17;
  v16[2] = v23;
  v16[3] = v12;
  v18 = v24;
  v16[4] = v13;
  v16[5] = v18;
  v16[6] = v20;
  v16[7] = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D48A5830@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return VisualUnderstanding.Annotation.init(from:)(a1, a2);
}

uint64_t sub_1D48A5844(_QWORD *a1)
{
  return VisualUnderstanding.Annotation.encode(to:)(a1);
}

__n128 VisualUnderstanding.ImageRegion.boundingBox.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D48A5864(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D48A58A0 + 4 * byte_1D4939FE2[a1]))(0x676E69646E756F62, 0xEB00000000786F42);
}

uint64_t sub_1D48A58A0()
{
  return 0x79676F6C6F746E6FLL;
}

uint64_t sub_1D48A58B8()
{
  return 0x69616D6F446C6C61;
}

uint64_t sub_1D48A58DC()
{
  return 0x726F746365746564;
}

unint64_t sub_1D48A5900()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1D48A591C()
{
  return 0x65726F6373;
}

uint64_t sub_1D48A5930()
{
  return 0x65726F6353786F62;
}

uint64_t sub_1D48A5948()
{
  return 0x6552657372616F63;
}

uint64_t sub_1D48A596C()
{
  return 0x49656C6F68577369;
}

uint64_t sub_1D48A598C()
{
  return 0x736C616E676973;
}

uint64_t sub_1D48A59A4()
{
  return 0x55676E6967676F6CLL;
}

uint64_t sub_1D48A59C4()
{
  return 0x6570756F72477369;
}

uint64_t sub_1D48A59E8()
{
  unsigned __int8 *v0;

  return sub_1D48A5864(*v0);
}

uint64_t sub_1D48A59F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B4674(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D48A5A14(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1D48A5A20()
{
  sub_1D48ABB8C();
  return sub_1D4922F64();
}

uint64_t sub_1D48A5A48()
{
  sub_1D48ABB8C();
  return sub_1D4922F70();
}

uint64_t VisualUnderstanding.ImageRegion.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D340);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48ABB8C();
  sub_1D4922F58();
  v9 = v3[1];
  v14 = *v3;
  v15 = v9;
  v13 = 0;
  sub_1D47FAD68();
  sub_1D4922DCC();
  if (!v2)
  {
    *(_QWORD *)&v14 = *((_QWORD *)v3 + 4);
    v13 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D190);
    sub_1D48AB664(&qword_1ED98D198, &qword_1ED98D190, (uint64_t (*)(void))sub_1D47FADAC, MEMORY[0x1E0DEAF10]);
    sub_1D4922DCC();
    *(_QWORD *)&v14 = *((_QWORD *)v3 + 5);
    v13 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D150);
    sub_1D48AB664(&qword_1ED98D158, &qword_1ED98D150, (uint64_t (*)(void))sub_1D48ABBD0, MEMORY[0x1E0DEAF10]);
    sub_1D4922DCC();
    *(_QWORD *)&v14 = *((_QWORD *)v3 + 6);
    v13 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D1A0);
    sub_1D48AB664(&qword_1ED98D1A8, &qword_1ED98D1A0, (uint64_t (*)(void))sub_1D48ABC14, MEMORY[0x1E0DEAF10]);
    sub_1D4922DCC();
    *(_QWORD *)&v14 = *((_QWORD *)v3 + 7);
    v13 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA98);
    sub_1D48AB664(&qword_1ED98EAA0, &qword_1ED98EA98, (uint64_t (*)(void))sub_1D48ABC58, MEMORY[0x1E0DEAF10]);
    sub_1D4922DCC();
    LOBYTE(v14) = 5;
    sub_1D4922DA8();
    LOBYTE(v14) = 6;
    sub_1D4922DA8();
    v10 = *((_QWORD *)v3 + 11);
    v14 = *(__int128 *)((char *)v3 + 72);
    *(_QWORD *)&v15 = v10;
    v13 = 7;
    sub_1D48ABC9C();
    sub_1D4922D78();
    LOBYTE(v14) = 8;
    sub_1D4922D90();
    *(_QWORD *)&v14 = *((_QWORD *)v3 + 13);
    v13 = 9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA58);
    sub_1D48AB664(&qword_1ED98EA60, &qword_1ED98EA58, (uint64_t (*)(void))sub_1D48ABCE0, MEMORY[0x1E0DEAF10]);
    sub_1D4922DCC();
    type metadata accessor for VisualUnderstanding.ImageRegion();
    LOBYTE(v14) = 10;
    sub_1D4920FD8();
    sub_1D4696EA4(&qword_1ED98D6E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_1D4922DCC();
    LOBYTE(v14) = 11;
    sub_1D4922D90();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t VisualUnderstanding.ImageRegion.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _DWORD *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char v36;

  v25 = a2;
  v3 = sub_1D4920FD8();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x1E0C80A78](v3);
  v26 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC3F0);
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for VisualUnderstanding.ImageRegion();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v11 + 4) = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v11 + 5) = v12;
  *((_OWORD *)v11 + 4) = 0u;
  *((_QWORD *)v11 + 6) = v12;
  *((_QWORD *)v11 + 7) = v12;
  *((_OWORD *)v11 + 5) = 0u;
  v11[96] = 0;
  *((_QWORD *)v11 + 13) = v12;
  v31 = &v11[*(int *)(v9 + 56)];
  sub_1D4920FCC();
  v13 = *(int *)(v8 + 60);
  v11[v13] = 0;
  v14 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_1D48ABB8C();
  v27 = v7;
  v15 = v29;
  sub_1D4922F4C();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1D46DAD5C(*((_QWORD *)v11 + 9), *((_QWORD *)v11 + 10));
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  }
  else
  {
    v29 = v11 + 64;
    v24 = v13;
    v16 = v26;
    v36 = 0;
    sub_1D47FADF0();
    sub_1D4922D30();
    v17 = v35;
    *(_OWORD *)v11 = v34;
    *((_OWORD *)v11 + 1) = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D190);
    v36 = 1;
    sub_1D48AB664(&qword_1EFEAC3F8, &qword_1ED98D190, (uint64_t (*)(void))sub_1D47FAE34, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    *((_QWORD *)v11 + 4) = v34;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D150);
    v36 = 2;
    sub_1D48AB664(&qword_1EFEAC400, &qword_1ED98D150, (uint64_t (*)(void))sub_1D48ABD24, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    *((_QWORD *)v11 + 5) = v34;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D1A0);
    v36 = 3;
    sub_1D48AB664(&qword_1EFEAC410, &qword_1ED98D1A0, (uint64_t (*)(void))sub_1D48ABD68, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    *((_QWORD *)v11 + 6) = v34;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA98);
    v36 = 4;
    sub_1D48AB664(&qword_1EFEAC420, &qword_1ED98EA98, (uint64_t (*)(void))sub_1D48ABDAC, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    *((_QWORD *)v11 + 7) = v34;
    LOBYTE(v34) = 5;
    sub_1D4922D0C();
    *v29 = v18;
    LOBYTE(v34) = 6;
    sub_1D4922D0C();
    *((_DWORD *)v11 + 17) = v19;
    v36 = 7;
    sub_1D48ABDF0();
    sub_1D4922CDC();
    v20 = v35;
    *(_OWORD *)(v11 + 72) = v34;
    *((_QWORD *)v11 + 11) = v20;
    LOBYTE(v34) = 8;
    v11[96] = sub_1D4922CF4() & 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA58);
    v36 = 9;
    sub_1D48AB664(&qword_1EFEAC438, &qword_1ED98EA58, (uint64_t (*)(void))sub_1D48ABE34, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    *((_QWORD *)v11 + 13) = v34;
    LOBYTE(v34) = 10;
    sub_1D4696EA4(&qword_1EFEAC448, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    sub_1D4922D30();
    (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v31, v16, v33);
    LOBYTE(v34) = 11;
    v21 = sub_1D4922CF4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v28);
    v22 = v25;
    v11[v24] = v21 & 1;
    sub_1D469C304((uint64_t)v11, v22, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return sub_1D4697DE0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
  }
}

uint64_t sub_1D48A64D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VisualUnderstanding.ImageRegion.init(from:)(a1, a2);
}

uint64_t sub_1D48A64E8(_QWORD *a1)
{
  return VisualUnderstanding.ImageRegion.encode(to:)(a1);
}

void VisualUnderstanding.DomainInfo.domain.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *VisualUnderstanding.DomainInfo.domain.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

void (*VisualUnderstanding.DomainInfo.domain.modify())(faiss::NormalizationTransform *__hidden this)
{
  return faiss::NormalizationTransform::~NormalizationTransform;
}

double VisualUnderstanding.DomainInfo.focalPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void VisualUnderstanding.DomainInfo.focalPoint.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

void (*VisualUnderstanding.DomainInfo.focalPoint.modify())(faiss::NormalizationTransform *__hidden this)
{
  return faiss::NormalizationTransform::~NormalizationTransform;
}

float VisualUnderstanding.DomainInfo.score.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 112);
}

void VisualUnderstanding.DomainInfo.score.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 112) = a1;
}

void (*VisualUnderstanding.DomainInfo.score.modify())(faiss::NormalizationTransform *__hidden this)
{
  return faiss::NormalizationTransform::~NormalizationTransform;
}

uint64_t VisualUnderstanding.DomainInfo.richLabelKnowledgeID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VisualUnderstanding.DomainInfo.richLabelKnowledgeID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return result;
}

void (*VisualUnderstanding.DomainInfo.richLabelKnowledgeID.modify())(faiss::NormalizationTransform *__hidden this)
{
  return faiss::NormalizationTransform::~NormalizationTransform;
}

float VisualUnderstanding.DomainInfo.richLabelKnowledgeIDScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 152);
}

void VisualUnderstanding.DomainInfo.richLabelKnowledgeIDScore.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 152) = a1;
}

void (*VisualUnderstanding.DomainInfo.richLabelKnowledgeIDScore.modify())(faiss::NormalizationTransform *__hidden this)
{
  return faiss::NormalizationTransform::~NormalizationTransform;
}

uint64_t sub_1D48A65F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D48A6624 + 4 * byte_1D4939FEE[a1]))(0x6E69616D6F64, 0xE600000000000000);
}

uint64_t sub_1D48A6624()
{
  return 0x696F506C61636F66;
}

uint64_t sub_1D48A6640()
{
  return 0x6D614E6870796C67;
}

unint64_t sub_1D48A665C()
{
  return 0xD000000000000016;
}

unint64_t sub_1D48A67D4()
{
  return 0xD000000000000014;
}

void sub_1D48A67EC()
{
  JUMPOUT(0x1D48A6800);
}

uint64_t sub_1D48A680C()
{
  unsigned __int8 *v0;

  return sub_1D48A65F4(*v0);
}

uint64_t sub_1D48A6814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B4C14(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D48A6838(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1D48A6844()
{
  sub_1D48ABE78();
  return sub_1D4922F64();
}

uint64_t sub_1D48A686C()
{
  sub_1D48ABE78();
  return sub_1D4922F70();
}

uint64_t VisualUnderstanding.DomainInfo.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D338);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_QWORD *)v1 + 1);
  v9 = *((_QWORD *)v1 + 2);
  v10 = *((_QWORD *)v1 + 3);
  v33 = *((_QWORD *)v1 + 4);
  v34 = v10;
  v40 = v1[40];
  v11 = *((_QWORD *)v1 + 7);
  v31 = *((_QWORD *)v1 + 6);
  v32 = v11;
  v12 = *((_QWORD *)v1 + 8);
  v29 = *((_QWORD *)v1 + 9);
  v30 = v12;
  v13 = *((_QWORD *)v1 + 11);
  v25 = *((_QWORD *)v1 + 10);
  v26 = v13;
  v14 = *((_QWORD *)v1 + 13);
  v27 = *((_QWORD *)v1 + 12);
  v28 = v14;
  v24 = v1[124];
  v23 = v1[125];
  v22 = v1[126];
  v21 = v1[127];
  v20 = v1[128];
  v19 = v1[129];
  v15 = *((_QWORD *)v1 + 18);
  v18 = *((_QWORD *)v1 + 17);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48ABE78();
  sub_1D4922F58();
  LOBYTE(v36) = v7;
  v41 = 0;
  sub_1D48ABEBC();
  v16 = v35;
  sub_1D4922DCC();
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v35 = v15;
  v36 = v8;
  v37 = v9;
  v41 = 1;
  type metadata accessor for CGPoint(0);
  sub_1D4696EA4(&qword_1ED98D288, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA20]);
  sub_1D4922DCC();
  LOBYTE(v36) = 2;
  sub_1D4922D60();
  LOBYTE(v36) = 3;
  sub_1D4922D90();
  LOBYTE(v36) = 4;
  sub_1D4922D60();
  LOBYTE(v36) = 5;
  sub_1D4922D60();
  v36 = v25;
  v37 = v26;
  v38 = v27;
  v39 = v28;
  v41 = 6;
  sub_1D47FADAC();
  sub_1D4922D78();
  LOBYTE(v36) = 7;
  sub_1D4922DA8();
  LOBYTE(v36) = 8;
  sub_1D4922DA8();
  LOBYTE(v36) = 9;
  sub_1D4922DA8();
  LOBYTE(v36) = 10;
  sub_1D4922D90();
  LOBYTE(v36) = 11;
  sub_1D4922D90();
  LOBYTE(v36) = 12;
  sub_1D4922D90();
  LOBYTE(v36) = 13;
  sub_1D4922D90();
  LOBYTE(v36) = 14;
  sub_1D4922D90();
  LOBYTE(v36) = 15;
  sub_1D4922D90();
  LOBYTE(v36) = 16;
  sub_1D4922D60();
  LOBYTE(v36) = 17;
  sub_1D4922DA8();
  return (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 8))(0, v3);
}

uint64_t VisualUnderstanding.DomainInfo.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  char v38;
  void (*v39)(_QWORD, _QWORD);
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _BYTE v84[7];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  int v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  char v107;
  int v108;
  __int16 v109;
  _BYTE v110[7];
  _DWORD v111[3];
  uint64_t v112;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC450);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v68 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1D48ABE78();
  sub_1D4922F4C();
  if (v2)
  {
    v112 = v2;
    v14 = 0;
    v15 = 0;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1D46A487C(v15, v14);
    return swift_bridgeObjectRelease();
  }
  LOBYTE(v69) = 0;
  sub_1D48ABF00();
  sub_1D4922D30();
  v10 = v78;
  type metadata accessor for CGPoint(0);
  LOBYTE(v69) = 1;
  sub_1D4696EA4(&qword_1EFEAA468, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA30]);
  sub_1D4922D30();
  v12 = v78;
  v11 = v79;
  LOBYTE(v78) = 2;
  v13 = sub_1D4922CAC();
  v18 = v17;
  v67 = v13;
  LOBYTE(v78) = 3;
  swift_bridgeObjectRetain();
  v19 = sub_1D4922CF4();
  v66 = v18;
  LOBYTE(v78) = 4;
  v20 = sub_1D4922CAC();
  v64 = v19;
  *(_QWORD *)&v65 = v20;
  *((_QWORD *)&v65 + 1) = v21;
  LOBYTE(v78) = 5;
  swift_bridgeObjectRetain();
  v22 = sub_1D4922CAC();
  v24 = v23;
  v62 = a2;
  *(_QWORD *)&v63 = v22;
  LOBYTE(v69) = 6;
  sub_1D47FAE34();
  *((_QWORD *)&v63 + 1) = v24;
  swift_bridgeObjectRetain();
  sub_1D4922CDC();
  v60 = v10;
  v15 = v78;
  v14 = v79;
  v25 = v80;
  LOBYTE(v78) = 7;
  v61 = v81;
  sub_1D46A484C(v15, v79);
  sub_1D4922D0C();
  v27 = v26;
  LOBYTE(v78) = 8;
  sub_1D4922D0C();
  v112 = 0;
  v29 = v28;
  LOBYTE(v78) = 9;
  sub_1D4922D0C();
  v112 = 0;
  v31 = v30;
  LOBYTE(v78) = 10;
  v59 = sub_1D4922CF4();
  v112 = 0;
  LOBYTE(v78) = 11;
  v58 = sub_1D4922CF4();
  v112 = 0;
  LOBYTE(v78) = 12;
  v57 = sub_1D4922CF4();
  v112 = 0;
  LOBYTE(v78) = 13;
  v56 = sub_1D4922CF4();
  v112 = 0;
  LOBYTE(v78) = 14;
  v55 = sub_1D4922CF4();
  v112 = 0;
  LOBYTE(v78) = 15;
  v54 = sub_1D4922CF4();
  v112 = 0;
  LOBYTE(v78) = 16;
  v53 = sub_1D4922CAC();
  v112 = 0;
  v33 = v32;
  v107 = 17;
  swift_bridgeObjectRetain();
  v34 = v112;
  sub_1D4922D0C();
  v112 = v34;
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1D46A487C(v15, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v36 = v35;
  v51 = v64 & 1;
  v52 = v59 & 1;
  v37 = v58 & 1;
  v64 = v57 & 1;
  v38 = v56 & 1;
  v58 = v55 & 1;
  v59 = v37;
  v39 = *(void (**)(_QWORD, _QWORD))(v6 + 8);
  v40 = v54 & 1;
  v56 &= 1u;
  v57 = v54 & 1;
  v39(v8, v5);
  LOBYTE(v69) = v60;
  *((_QWORD *)&v69 + 1) = v12;
  *(_QWORD *)&v70 = v11;
  v41 = v66;
  *((_QWORD *)&v70 + 1) = v67;
  *(_QWORD *)&v71 = v66;
  BYTE8(v71) = v51;
  v72 = v65;
  v73 = v63;
  *(_QWORD *)&v74 = v15;
  *((_QWORD *)&v74 + 1) = v14;
  v42 = v15;
  v43 = v61;
  *(_QWORD *)&v75 = v25;
  *((_QWORD *)&v75 + 1) = v61;
  *(_QWORD *)&v76 = __PAIR64__(v29, v27);
  DWORD2(v76) = v31;
  BYTE12(v76) = v52;
  BYTE13(v76) = v59;
  BYTE14(v76) = v64;
  HIBYTE(v76) = v38;
  LOBYTE(v77[0]) = v58;
  BYTE1(v77[0]) = v40;
  *((_QWORD *)&v77[0] + 1) = v53;
  *(_QWORD *)&v77[1] = v33;
  DWORD2(v77[1]) = v36;
  sub_1D46A47CC((uint64_t)&v69);
  swift_bridgeObjectRelease();
  sub_1D46A487C(v42, v14);
  swift_bridgeObjectRelease();
  v44 = *((_QWORD *)&v65 + 1);
  swift_bridgeObjectRelease();
  v45 = *((_QWORD *)&v63 + 1);
  swift_bridgeObjectRelease();
  v46 = v76;
  v47 = v62;
  v62[6] = v75;
  v47[7] = v46;
  v47[8] = v77[0];
  *(_OWORD *)((char *)v47 + 140) = *(_OWORD *)((char *)v77 + 12);
  v48 = v72;
  v47[2] = v71;
  v47[3] = v48;
  v49 = v74;
  v47[4] = v73;
  v47[5] = v49;
  v50 = v70;
  *v47 = v69;
  v47[1] = v50;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  LOBYTE(v78) = v60;
  *(_DWORD *)((char *)&v78 + 1) = v111[0];
  HIDWORD(v78) = *(_DWORD *)((char *)v111 + 3);
  v79 = v12;
  v80 = v11;
  v81 = v67;
  v82 = v41;
  v83 = v51;
  *(_DWORD *)v84 = *(_DWORD *)v110;
  *(_DWORD *)&v84[3] = *(_DWORD *)&v110[3];
  v85 = v65;
  v86 = v44;
  v87 = v63;
  v88 = v45;
  v89 = v42;
  v90 = v14;
  v91 = v25;
  v92 = v43;
  v93 = v27;
  v94 = v29;
  v95 = v31;
  v96 = v52;
  v97 = v59;
  v98 = v64;
  v99 = v56;
  v100 = v58;
  v101 = v57;
  v102 = v108;
  v103 = v109;
  v104 = v53;
  v105 = v33;
  v106 = v36;
  return sub_1D46A48AC((uint64_t)&v78);
}

uint64_t sub_1D48A7634@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return VisualUnderstanding.DomainInfo.init(from:)(a1, a2);
}

uint64_t sub_1D48A7648(_QWORD *a1)
{
  return VisualUnderstanding.DomainInfo.encode(to:)(a1);
}

uint64_t static VisualUnderstanding.Signal.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  if (CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2) && (sub_1D48A2B68(v3, v5) & 1) != 0)
    return sub_1D48A2C74(v2, v4);
  else
    return 0;
}

uint64_t sub_1D48A76C8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E69646465626D65;
  if (*v0 != 1)
    v1 = 0x6966697373616C63;
  if (*v0)
    return v1;
  else
    return 0x676E69646E756F62;
}

uint64_t sub_1D48A773C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48B53FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D48A7760()
{
  sub_1D48ABF44();
  return sub_1D4922F64();
}

uint64_t sub_1D48A7788()
{
  sub_1D48ABF44();
  return sub_1D4922F70();
}

uint64_t VisualUnderstanding.Signal.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EBF0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v8 = *((_QWORD *)v1 + 2);
  v9 = *((_QWORD *)v1 + 3);
  v10 = *((_QWORD *)v1 + 5);
  v13 = *((_QWORD *)v1 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48ABF44();
  sub_1D4922F58();
  v15 = v14;
  v16 = v8;
  v17 = v9;
  v18 = 0;
  sub_1D47FAD68();
  sub_1D4922DCC();
  if (!v2)
  {
    *(_QWORD *)&v15 = v13;
    v18 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA68);
    sub_1D48AB664(&qword_1ED98EA70, &qword_1ED98EA68, (uint64_t (*)(void))sub_1D48AB620, MEMORY[0x1E0DEAF10]);
    sub_1D4922DCC();
    *(_QWORD *)&v15 = v10;
    v18 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA88);
    sub_1D48AB664(&qword_1ED98EA90, &qword_1ED98EA88, (uint64_t (*)(void))sub_1D48ABC9C, MEMORY[0x1E0DEAF10]);
    sub_1D4922DCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t VisualUnderstanding.Signal.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC460);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48ABF44();
  sub_1D4922F4C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = 0;
  sub_1D47FADF0();
  sub_1D4922D30();
  v9 = v16[0];
  v10 = v16[1];
  v11 = v16[2];
  v12 = v16[3];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA68);
  v17 = 1;
  sub_1D48AB664(&qword_1EFEAC468, &qword_1ED98EA68, (uint64_t (*)(void))sub_1D48AB7D4, MEMORY[0x1E0DEAF40]);
  sub_1D4922D30();
  v13 = v16[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EA88);
  v17 = 2;
  sub_1D48AB664(&qword_1EFEAC470, &qword_1ED98EA88, (uint64_t (*)(void))sub_1D48ABDF0, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1D4922D30();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v16[0];
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v13;
  a2[5] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D48A7C1C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return VisualUnderstanding.Signal.init(from:)(a1, a2);
}

uint64_t sub_1D48A7C30(_QWORD *a1)
{
  return VisualUnderstanding.Signal.encode(to:)(a1);
}

uint64_t sub_1D48A7C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  if (CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2) && (sub_1D48A2B68(v3, v5) & 1) != 0)
    return sub_1D48A2C74(v2, v4);
  else
    return 0;
}

uint64_t VisualUnderstanding.ImageRegion.embeddings.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v25 = *(_QWORD *)(v1 + 16);
  if (!v25)
    return MEMORY[0x1E0DEE9D8];
  v24 = v1 + 32;
  swift_bridgeObjectRetain_n();
  v3 = 0;
  v4 = v2;
  while (1)
  {
    v5 = *(_QWORD *)(v24 + 48 * v3 + 32);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      sub_1D48AC368(0, v6, 0);
      v7 = v2;
      v8 = 32;
      do
      {
        v9 = *(_QWORD *)(v5 + v8);
        v10 = v7[2];
        v11 = v7[3];
        swift_bridgeObjectRetain();
        if (v10 >= v11 >> 1)
          sub_1D48AC368(v11 > 1, v10 + 1, 1);
        v7[2] = v10 + 1;
        v7[v10 + 4] = v9;
        v8 += 24;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v7 = v2;
    }
    v12 = v7[2];
    v13 = v4[2];
    v14 = v13 + v12;
    if (__OFADD__(v13, v12))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v14 <= v4[3] >> 1)
    {
      if (v7[2])
        goto LABEL_21;
    }
    else
    {
      if (v13 <= v14)
        v16 = v13 + v12;
      else
        v16 = v13;
      v4 = sub_1D48AB398((_QWORD *)isUniquelyReferenced_nonNull_native, v16, 1, v4);
      if (v7[2])
      {
LABEL_21:
        v17 = v4[2];
        if ((v4[3] >> 1) - v17 < v12)
          goto LABEL_35;
        v18 = (unint64_t)&v4[v17 + 4];
        if ((unint64_t)(v7 + 4) < v18 + 8 * v12 && v18 < (unint64_t)&v7[v12 + 4])
          goto LABEL_37;
        swift_arrayInitWithCopy();
        if (v12)
        {
          v20 = v4[2];
          v21 = __OFADD__(v20, v12);
          v22 = v20 + v12;
          if (v21)
            goto LABEL_36;
          v4[2] = v22;
        }
        goto LABEL_4;
      }
    }
    if (v12)
      goto LABEL_34;
LABEL_4:
    ++v3;
    swift_bridgeObjectRelease();
    if (v3 == v25)
    {
      swift_bridgeObjectRelease_n();
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t VisualUnderstanding.ImageRegion.Embedding.features.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static VisualUnderstanding.ImageRegion.Embedding.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1D489F620(*a1, *a2);
}

uint64_t sub_1D48A7F2C()
{
  return 0x7365727574616566;
}

uint64_t sub_1D48A7F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7365727574616566 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D4922E38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D48A7FD8()
{
  sub_1D48AC384();
  return sub_1D4922F64();
}

uint64_t sub_1D48A8000()
{
  sub_1D48AC384();
  return sub_1D4922F70();
}

uint64_t VisualUnderstanding.ImageRegion.Embedding.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC478);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48AC384();
  sub_1D4922F58();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EAA8);
  sub_1D47679E0(&qword_1ED98EAB0, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEAF10]);
  sub_1D4922DCC();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t VisualUnderstanding.ImageRegion.Embedding.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC488);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48AC384();
  sub_1D4922F4C();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EAA8);
    sub_1D47679E0(&qword_1EFEAB3A8, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1D48A8288@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return VisualUnderstanding.ImageRegion.Embedding.init(from:)(a1, a2);
}

uint64_t sub_1D48A829C(_QWORD *a1)
{
  return VisualUnderstanding.ImageRegion.Embedding.encode(to:)(a1);
}

BOOL sub_1D48A82B0(uint64_t *a1, uint64_t *a2)
{
  return sub_1D489F620(*a1, *a2);
}

_QWORD *sub_1D48A82BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D6D8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B146C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A83D8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EC48);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B137C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A84E4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A9ADC(a1, a2, a3, a4, &qword_1ED98D6E0, &qword_1ED98EA78);
}

_QWORD *sub_1D48A84F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D368);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4])
          memmove(v12, a4 + 4, 160 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B1288(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48A8614(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1ED98D370, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
}

char *sub_1D48A8628(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CB20);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B11A4(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A8720(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC5F8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1560(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1D48A882C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D3D0);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1668(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A8938(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48AAD6C(a1, a2, a3, a4, &qword_1ED98EC18);
}

_QWORD *sub_1D48A894C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EC58);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1B08(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A8A58(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D378);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1A18(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A8B64(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D388);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4])
          memmove(v12, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B183C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A8C80(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CAB0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1930(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A8D8C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A94F8(a1, a2, a3, a4, &qword_1ED98D3D8);
}

uint64_t sub_1D48A8D98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1ED98EC68, type metadata accessor for Argos_Protos_Queryflow_ClassificationLabelThreshold);
}

uint64_t sub_1D48A8DAC(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1D4922C28();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1D48B310C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_1D48A8FB8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D3C0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B0ECC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A90C4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A90EC(a1, a2, a3, a4, &qword_1ED98EC30, &qword_1ED98D928);
}

_QWORD *sub_1D48A90D8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A90EC(a1, a2, a3, a4, &qword_1ED98EC40, &qword_1ED98D960);
}

_QWORD *sub_1D48A90EC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v15 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2860(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A9218(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EC38);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B0FBC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A933C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EC50);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B10B0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48A9460(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1ED98ECA8, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.CoarseClassificationResult);
}

_QWORD *sub_1D48A9474(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48AB208(a1, a2, a3, a4, (uint64_t *)&unk_1ED98D398);
}

uint64_t sub_1D48A9488(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1ED98EC88, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult.DomainResult);
}

uint64_t sub_1D48A949C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1ED98EC98, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.ObjectDetectorImageRegion.DetectedResult);
}

uint64_t sub_1D48A94B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1ED98ECA0, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.ObjectDetectorImageRegion);
}

uint64_t sub_1D48A94C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1ED98EC80, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainModelResult);
}

uint64_t sub_1D48A94D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1ED98EC70, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainSignals);
}

_QWORD *sub_1D48A94EC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A94F8(a1, a2, a3, a4, &qword_1ED98ECE0);
}

_QWORD *sub_1D48A94F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1D00(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A9600(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A9E78(a1, a2, a3, a4, &qword_1ED98CB18);
}

_QWORD *sub_1D48A9614(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A94F8(a1, a2, a3, a4, &qword_1ED98D590);
}

uint64_t sub_1D48A9620(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAA580, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EAA8]);
}

uint64_t sub_1D48A9634(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC5D8, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E358]);
}

uint64_t sub_1D48A9648(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC5E0, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F640]);
}

uint64_t sub_1D48A965C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC2C8, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F2F8]);
}

_QWORD *sub_1D48A9670(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAB6B0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1BF8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A977C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC638);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1ED8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48A9888(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAA5F0, (uint64_t (*)(_QWORD))type metadata accessor for ObjectKnowledge);
}

_QWORD *sub_1D48A989C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC2D0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1FC8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48A99A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC560, type metadata accessor for Com_Apple_Visualintelligence_LandmarkSnippet);
}

_QWORD *sub_1D48A99BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D3C8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1D00(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A9AC8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A9ADC(a1, a2, a3, a4, (uint64_t *)&unk_1ED98ECC0, &qword_1EFEAC580);
}

_QWORD *sub_1D48A9ADC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B2A5C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A9BF4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A9ADC(a1, a2, a3, a4, &qword_1EFEAC570, &qword_1EFEAC578);
}

_QWORD *sub_1D48A9C08(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A9ADC(a1, a2, a3, a4, &qword_1EFEAC568, &qword_1ED98EAA8);
}

_QWORD *sub_1D48A9C1C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A9ADC(a1, a2, a3, a4, &qword_1EFEAC588, &qword_1ED98D200);
}

_QWORD *sub_1D48A9C30(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98AF50);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B21A8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A9D58(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC558);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B20B8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A9E64(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A9E78(a1, a2, a3, a4, &qword_1EFEAC550);
}

_QWORD *sub_1D48A9E78(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v9 + 4])
          memmove(v13, a4 + 4, 56 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B1DE8(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48A9FAC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48AA0D8(a1, a2, a3, a4, &qword_1ED98CA78);
}

char *sub_1D48A9FB8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1D48A9FC4(a1, a2, a3, a4, &qword_1EFEAC528);
}

char *sub_1D48A9FC4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
      v14 = v11 + 32;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32])
          memmove(v14, a4 + 32, 4 * v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1668(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AA0CC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48AA0D8(a1, a2, a3, a4, &qword_1ED98EC28);
}

_QWORD *sub_1D48AA0D8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B2758(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AA1E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EC60);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B1750(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AA300(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC660);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B2388(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AA40C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAB888);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B229C(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48AA530(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAB990, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8]);
}

_QWORD *sub_1D48AA544(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D390);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2564(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AA66C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC608);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B229C(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AA790(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D380);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B2650(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AA89C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAB958);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B1D00(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AA9A8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A9ADC(a1, a2, a3, a4, &qword_1EFEAB988, &qword_1ED98D218);
}

_QWORD *sub_1D48AA9BC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48AA0D8(a1, a2, a3, a4, &qword_1EFEAC5A0);
}

uint64_t sub_1D48AA9C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC5C0, (uint64_t (*)(_QWORD))MEMORY[0x1E0D70608]);
}

_QWORD *sub_1D48AA9DC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48A90EC(a1, a2, a3, a4, &qword_1ED98D3B0, &qword_1ED98CD38);
}

_QWORD *sub_1D48AA9F0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFEABA00);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2968(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AAB14(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC590);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2B60(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AAC34(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC598);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2470(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AAD58(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48AAD6C(a1, a2, a3, a4, &qword_1EFEAB968);
}

_QWORD *sub_1D48AAD6C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
          memmove(v13, a4 + 4, 48 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2C54(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AAE9C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC640);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B301C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AAFA8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC648);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2F28(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AB0CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC650);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2D44(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D48AB1F4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48AB208(a1, a2, a3, a4, &qword_1EFEAC658);
}

_QWORD *sub_1D48AB208(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4])
          memmove(v13, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D48B2E38(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48AB334(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC610, (uint64_t (*)(_QWORD))MEMORY[0x1E0D70388]);
}

uint64_t sub_1D48AB348(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC620, (uint64_t (*)(_QWORD))MEMORY[0x1E0D70290]);
}

uint64_t sub_1D48AB35C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC618, (uint64_t (*)(_QWORD))MEMORY[0x1E0D702B0]);
}

uint64_t sub_1D48AB370(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC628, (uint64_t (*)(_QWORD))MEMORY[0x1E0D70140]);
}

uint64_t sub_1D48AB384(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D48A8DAC(a1, a2, a3, a4, &qword_1EFEAC5A8, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E3A8]);
}

_QWORD *sub_1D48AB398(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC600);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D48B5598(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48AB4A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AE8B4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AB4C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AEA1C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AB4DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AEBA4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AB4F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AFD34(a1, a2, a3, *v3, (uint64_t *)&unk_1ED98D398);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AB524(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48AEE94(a1, a2, a3, (_QWORD *)*v3, &qword_1ED98EC40, &qword_1ED98D960);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AB550(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1ED98D370, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AB57C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AED20(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

unint64_t sub_1D48AB598()
{
  unint64_t result;

  result = qword_1ED98CB58;
  if (!qword_1ED98CB58)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AC6C, &type metadata for VisualUnderstanding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB58);
  }
  return result;
}

unint64_t sub_1D48AB5DC()
{
  unint64_t result;

  result = qword_1ED98CB50;
  if (!qword_1ED98CB50)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualUnderstanding.Annotation, &type metadata for VisualUnderstanding.Annotation);
    atomic_store(result, (unint64_t *)&qword_1ED98CB50);
  }
  return result;
}

unint64_t sub_1D48AB620()
{
  unint64_t result;

  result = qword_1ED98D958;
  if (!qword_1ED98D958)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BCC8, &type metadata for EmbeddingInfo);
    atomic_store(result, (unint64_t *)&qword_1ED98D958);
  }
  return result;
}

uint64_t sub_1D48AB664(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1D82634E0](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D48AB6C8()
{
  unint64_t result;

  result = qword_1ED98D9A8;
  if (!qword_1ED98D9A8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AC44, &type metadata for DurationMetric);
    atomic_store(result, (unint64_t *)&qword_1ED98D9A8);
  }
  return result;
}

uint64_t sub_1D48AB70C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED98D160);
    v10 = sub_1D4696EA4(a2, (uint64_t (*)(uint64_t))type metadata accessor for VisualUnderstanding.ImageRegion, a3);
    result = MEMORY[0x1D82634E0](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D48AB790()
{
  unint64_t result;

  result = qword_1EFEAC368;
  if (!qword_1EFEAC368)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualUnderstanding.Annotation, &type metadata for VisualUnderstanding.Annotation);
    atomic_store(result, (unint64_t *)&qword_1EFEAC368);
  }
  return result;
}

unint64_t sub_1D48AB7D4()
{
  unint64_t result;

  result = qword_1EFEAC378;
  if (!qword_1EFEAC378)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BCA0, &type metadata for EmbeddingInfo);
    atomic_store(result, (unint64_t *)&qword_1EFEAC378);
  }
  return result;
}

unint64_t sub_1D48AB818()
{
  unint64_t result;

  result = qword_1EFEAC388;
  if (!qword_1EFEAC388)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AC1C, &type metadata for DurationMetric);
    atomic_store(result, (unint64_t *)&qword_1EFEAC388);
  }
  return result;
}

unint64_t sub_1D48AB85C()
{
  unint64_t result;

  result = qword_1EFEAC398;
  if (!qword_1EFEAC398)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493ABCC, &type metadata for VisualUnderstanding.Text.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC398);
  }
  return result;
}

unint64_t sub_1D48AB8A0()
{
  unint64_t result;

  result = qword_1ED98CB38;
  if (!qword_1ED98CB38)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AB7C, &type metadata for VisualUnderstanding.Annotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB38);
  }
  return result;
}

unint64_t sub_1D48AB8E4()
{
  unint64_t result;

  result = qword_1ED98CBA8;
  if (!qword_1ED98CBA8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AB54, &type metadata for VisualUnderstanding.RegionalAnnotation);
    atomic_store(result, (unint64_t *)&qword_1ED98CBA8);
  }
  return result;
}

unint64_t sub_1D48AB928()
{
  unint64_t result;

  result = qword_1ED98CBB0;
  if (!qword_1ED98CBB0)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualUnderstanding.Text, &type metadata for VisualUnderstanding.Text);
    atomic_store(result, (unint64_t *)&qword_1ED98CBB0);
  }
  return result;
}

unint64_t sub_1D48AB96C()
{
  unint64_t result;

  result = qword_1ED98CCD8;
  if (!qword_1ED98CCD8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D4935AD8, &type metadata for DetectedBarcode);
    atomic_store(result, (unint64_t *)&qword_1ED98CCD8);
  }
  return result;
}

unint64_t sub_1D48AB9B0()
{
  unint64_t result;

  result = qword_1ED98D7E0;
  if (!qword_1ED98D7E0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AB2C, &type metadata for VisualUnderstanding.ScenenetAnnotations);
    atomic_store(result, (unint64_t *)&qword_1ED98D7E0);
  }
  return result;
}

unint64_t sub_1D48AB9F4()
{
  unint64_t result;

  result = qword_1ED98D410;
  if (!qword_1ED98D410)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AB04, &type metadata for VisualUnderstanding.ReducePersonOverTriggerAnnotation);
    atomic_store(result, (unint64_t *)&qword_1ED98D410);
  }
  return result;
}

unint64_t sub_1D48ABA38()
{
  unint64_t result;

  result = qword_1EFEAC3B8;
  if (!qword_1EFEAC3B8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AADC, &type metadata for VisualUnderstanding.RegionalAnnotation);
    atomic_store(result, (unint64_t *)&qword_1EFEAC3B8);
  }
  return result;
}

unint64_t sub_1D48ABA7C()
{
  unint64_t result;

  result = qword_1EFEAC3C8;
  if (!qword_1EFEAC3C8)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualUnderstanding.Text, &type metadata for VisualUnderstanding.Text);
    atomic_store(result, (unint64_t *)&qword_1EFEAC3C8);
  }
  return result;
}

unint64_t sub_1D48ABAC0()
{
  unint64_t result;

  result = qword_1EFEAC3D8;
  if (!qword_1EFEAC3D8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D4935AB0, &type metadata for DetectedBarcode);
    atomic_store(result, (unint64_t *)&qword_1EFEAC3D8);
  }
  return result;
}

unint64_t sub_1D48ABB04()
{
  unint64_t result;

  result = qword_1EFEAC3E0;
  if (!qword_1EFEAC3E0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AAB4, &type metadata for VisualUnderstanding.ScenenetAnnotations);
    atomic_store(result, (unint64_t *)&qword_1EFEAC3E0);
  }
  return result;
}

unint64_t sub_1D48ABB48()
{
  unint64_t result;

  result = qword_1EFEAC3E8;
  if (!qword_1EFEAC3E8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AA8C, &type metadata for VisualUnderstanding.ReducePersonOverTriggerAnnotation);
    atomic_store(result, (unint64_t *)&qword_1EFEAC3E8);
  }
  return result;
}

unint64_t sub_1D48ABB8C()
{
  unint64_t result;

  result = qword_1ED98CB88;
  if (!qword_1ED98CB88)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AA3C, &type metadata for VisualUnderstanding.ImageRegion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB88);
  }
  return result;
}

unint64_t sub_1D48ABBD0()
{
  unint64_t result;

  result = qword_1ED98CB80;
  if (!qword_1ED98CB80)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualUnderstanding.DomainInfo, &type metadata for VisualUnderstanding.DomainInfo);
    atomic_store(result, (unint64_t *)&qword_1ED98CB80);
  }
  return result;
}

unint64_t sub_1D48ABC14()
{
  unint64_t result;

  result = qword_1ED98CCD0;
  if (!qword_1ED98CCD0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D4933EC8, &_s14DetectedResultVN);
    atomic_store(result, (unint64_t *)&qword_1ED98CCD0);
  }
  return result;
}

unint64_t sub_1D48ABC58()
{
  unint64_t result;

  result = qword_1ED98DA60;
  if (!qword_1ED98DA60)
  {
    result = MEMORY[0x1D82634E0](&unk_1D4928394, &type metadata for DomainPredictionNet.PredictionResult);
    atomic_store(result, (unint64_t *)&qword_1ED98DA60);
  }
  return result;
}

unint64_t sub_1D48ABC9C()
{
  unint64_t result;

  result = qword_1ED98CD10;
  if (!qword_1ED98CD10)
  {
    result = MEMORY[0x1D82634E0](&unk_1D4928804, &type metadata for ClassificationInfo);
    atomic_store(result, (unint64_t *)&qword_1ED98CD10);
  }
  return result;
}

unint64_t sub_1D48ABCE0()
{
  unint64_t result;

  result = qword_1ED98D800;
  if (!qword_1ED98D800)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualUnderstanding.Signal, &type metadata for VisualUnderstanding.Signal);
    atomic_store(result, (unint64_t *)&qword_1ED98D800);
  }
  return result;
}

unint64_t sub_1D48ABD24()
{
  unint64_t result;

  result = qword_1EFEAC408;
  if (!qword_1EFEAC408)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualUnderstanding.DomainInfo, &type metadata for VisualUnderstanding.DomainInfo);
    atomic_store(result, (unint64_t *)&qword_1EFEAC408);
  }
  return result;
}

unint64_t sub_1D48ABD68()
{
  unint64_t result;

  result = qword_1EFEAC418;
  if (!qword_1EFEAC418)
  {
    result = MEMORY[0x1D82634E0](&unk_1D4933EA0, &_s14DetectedResultVN);
    atomic_store(result, (unint64_t *)&qword_1EFEAC418);
  }
  return result;
}

unint64_t sub_1D48ABDAC()
{
  unint64_t result;

  result = qword_1EFEAC428;
  if (!qword_1EFEAC428)
  {
    result = MEMORY[0x1D82634E0](&unk_1D492836C, &type metadata for DomainPredictionNet.PredictionResult);
    atomic_store(result, (unint64_t *)&qword_1EFEAC428);
  }
  return result;
}

unint64_t sub_1D48ABDF0()
{
  unint64_t result;

  result = qword_1EFEAC430;
  if (!qword_1EFEAC430)
  {
    result = MEMORY[0x1D82634E0](&unk_1D49287DC, &type metadata for ClassificationInfo);
    atomic_store(result, (unint64_t *)&qword_1EFEAC430);
  }
  return result;
}

unint64_t sub_1D48ABE34()
{
  unint64_t result;

  result = qword_1EFEAC440;
  if (!qword_1EFEAC440)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualUnderstanding.Signal, &type metadata for VisualUnderstanding.Signal);
    atomic_store(result, (unint64_t *)&qword_1EFEAC440);
  }
  return result;
}

unint64_t sub_1D48ABE78()
{
  unint64_t result;

  result = qword_1ED98CB70;
  if (!qword_1ED98CB70)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A9EC, &type metadata for VisualUnderstanding.DomainInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB70);
  }
  return result;
}

unint64_t sub_1D48ABEBC()
{
  unint64_t result;

  result = qword_1ED98CBC0;
  if (!qword_1ED98CBC0)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualDomain, &type metadata for VisualDomain);
    atomic_store(result, (unint64_t *)&qword_1ED98CBC0);
  }
  return result;
}

unint64_t sub_1D48ABF00()
{
  unint64_t result;

  result = qword_1EFEAC458;
  if (!qword_1EFEAC458)
  {
    result = MEMORY[0x1D82634E0](&protocol conformance descriptor for VisualDomain, &type metadata for VisualDomain);
    atomic_store(result, (unint64_t *)&qword_1EFEAC458);
  }
  return result;
}

unint64_t sub_1D48ABF44()
{
  unint64_t result;

  result = qword_1ED98D7E8;
  if (!qword_1ED98D7E8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A99C, &type metadata for VisualUnderstanding.Signal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D7E8);
  }
  return result;
}

uint64_t sub_1D48ABF88(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48AEE94(a1, a2, a3, (_QWORD *)*v3, &qword_1ED98EC30, &qword_1ED98D928);
  *v3 = result;
  return result;
}

uint64_t sub_1D48ABFB4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AF338(a1, a2, a3, *v3, &qword_1ED98ECE0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48ABFD8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1ED98EC90, type metadata accessor for Argos_Protos_Queryflow_ParseFlowIntermediateResults.DomainPredictionNetResult);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC004(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AF1D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AC020(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC2C8, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F2F8]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC04C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC5E0, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F640]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC078(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC5E8, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F618]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC0A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC5D0, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F330]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC0D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAA580, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EAA8]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC0FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AF338(a1, a2, a3, *v3, &qword_1ED98D3D8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AC120(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC560, type metadata accessor for Com_Apple_Visualintelligence_LandmarkSnippet);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC14C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48B019C(a1, a2, a3, *v3, &qword_1ED98CB18);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AC178(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AF758(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AC194(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48AF8B4(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC568, &qword_1ED98EAA8);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC1C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48AF8B4(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC530, &qword_1EFEAC538);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC1EC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48AF8B4(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC540, &qword_1EFEAC548);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC218(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AFD34(a1, a2, a3, *v3, &qword_1ED98D588);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AC244(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48AFEB0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AC260(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC5C8, (uint64_t (*)(_QWORD))MEMORY[0x1E0D705D8]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC28C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAB970, type metadata accessor for RegionSearchResult.ResultItem);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC2B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC630, (uint64_t (*)(_QWORD))MEMORY[0x1E0D70238]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC2E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48B019C(a1, a2, a3, *v3, &qword_1EFEAC550);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D48AC310(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC5B0, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EEE0]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC33C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D48B0328(a1, a2, a3, (_QWORD *)*v3, &qword_1EFEAC5B8, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E5F0]);
  *v3 = result;
  return result;
}

uint64_t sub_1D48AC368(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D48B0508(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

unint64_t sub_1D48AC384()
{
  unint64_t result;

  result = qword_1EFEAC480;
  if (!qword_1EFEAC480)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A94C, &type metadata for VisualUnderstanding.ImageRegion.Embedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC480);
  }
  return result;
}

uint64_t destroy for VisualUnderstanding(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 152))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VisualUnderstanding(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    v7 = v6[1];
    *v4 = *v6;
    *(_OWORD *)(a1 + 24) = v7;
    v8 = v6[3];
    *(_OWORD *)(a1 + 40) = v6[2];
    *(_OWORD *)(a1 + 56) = v8;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v9;
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    v14 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v14;
    v15 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v16 = *(_QWORD *)(a2 + 152);
  v17 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  if (v16)
  {
    v19 = *(_QWORD *)(a2 + 160);
    v20 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 152) = v16;
    *(_QWORD *)(a1 + 160) = v19;
    *(_QWORD *)(a1 + 168) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VisualUnderstanding(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 8);
  v6 = (__int128 *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    if (v5 == 1)
    {
      v7 = *v6;
      v8 = *(_OWORD *)(a2 + 24);
      v9 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v9;
      *v4 = v7;
      *(_OWORD *)(a1 + 24) = v8;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v5 == 1)
  {
    sub_1D46D2220(a1 + 8);
    v10 = *(_OWORD *)(a2 + 56);
    v12 = *v6;
    v11 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
    *v4 = v12;
    *(_OWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v13 = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = (_OWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v17 = (_OWORD *)(a2 + 152);
  v16 = *(_QWORD *)(a2 + 152);
  if (v15)
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 152) = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D46E5F84(a1 + 152);
      v18 = *(_QWORD *)(a2 + 168);
      *v14 = *v17;
      *(_QWORD *)(a1 + 168) = v18;
    }
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 152) = v16;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *v17;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *v14 = v19;
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy184_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for VisualUnderstanding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == 1)
    goto LABEL_4;
  if (v4 == 1)
  {
    sub_1D46D2220(a1 + 8);
LABEL_4:
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
    v6 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v6;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 152);
  v10 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  if (!v10)
  {
LABEL_10:
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    goto LABEL_11;
  }
  if (!v9)
  {
    sub_1D46E5F84(a1 + 152);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 152) = v9;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v11;
  swift_bridgeObjectRelease();
LABEL_11:
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VisualUnderstanding(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding()
{
  return &type metadata for VisualUnderstanding;
}

uint64_t type metadata accessor for MetricsBucket()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for VisualUnderstanding.Text()
{
  return &type metadata for VisualUnderstanding.Text;
}

uint64_t destroy for VisualUnderstanding.Annotation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for VisualUnderstanding.Annotation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for VisualUnderstanding.Annotation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VisualUnderstanding.Annotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VisualUnderstanding.Annotation(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.Annotation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.Annotation()
{
  return &type metadata for VisualUnderstanding.Annotation;
}

uint64_t initializeBufferWithCopyOfBuffer for VisualUnderstanding.ImageRegion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = a2[8];
    v10 = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10)
    {
      *(_QWORD *)(v4 + 72) = a2[9];
      *(_QWORD *)(v4 + 80) = v10;
      *(_QWORD *)(v4 + 88) = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 9);
      *(_QWORD *)(v4 + 88) = a2[11];
    }
    *(_BYTE *)(v4 + 96) = *((_BYTE *)a2 + 96);
    *(_QWORD *)(v4 + 104) = a2[13];
    v12 = *(int *)(a3 + 56);
    v13 = v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = sub_1D4920FD8();
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    *(_BYTE *)(v4 + *(int *)(a3 + 60)) = *((_BYTE *)a2 + *(int *)(a3 + 60));
  }
  return v4;
}

uint64_t destroy for VisualUnderstanding.ImageRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 80))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 56);
  v5 = sub_1D4920FD8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for VisualUnderstanding.ImageRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v10 = *(int *)(a3 + 56);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1D4920FD8();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  *(_BYTE *)(a1 + *(int *)(a3 + 60)) = *(_BYTE *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t assignWithCopy for VisualUnderstanding.ImageRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  v6 = (_OWORD *)(a1 + 72);
  v7 = (_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D47959C4(a1 + 72);
      v9 = *(_QWORD *)(a2 + 88);
      *v6 = *v7;
      *(_QWORD *)(a1 + 88) = v9;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v7;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *v6 = v10;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 56);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1D4920FD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_BYTE *)(a1 + *(int *)(a3 + 60)) = *(_BYTE *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t initializeWithTake for VisualUnderstanding.ImageRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v9 = *(int *)(a3 + 56);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 72) = v8;
  v12 = sub_1D4920FD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_BYTE *)(a1 + *(int *)(a3 + 60)) = *(_BYTE *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t assignWithTake for VisualUnderstanding.ImageRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 80);
  if (!v7)
  {
    sub_1D47959C4(a1 + 72);
LABEL_5:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 56);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1D4920FD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_BYTE *)(a1 + *(int *)(a3 + 60)) = *(_BYTE *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t getEnumTagSinglePayload for VisualUnderstanding.ImageRegion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D48AD4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1D4920FD8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 56), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.ImageRegion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D48AD528(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = sub_1D4920FD8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 56), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1D48AD59C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D4920FD8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for VisualUnderstanding.DomainInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 88))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VisualUnderstanding.DomainInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v7;
    v8 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VisualUnderstanding.DomainInfo(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 80);
  v5 = (_OWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D46E796C(a1 + 80);
      v7 = *(_OWORD *)(a2 + 96);
      *v4 = *v5;
      *(_OWORD *)(a1 + 96) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 96);
    *v4 = *v5;
    *(_OWORD *)(a1 + 96) = v8;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_BYTE *)(a1 + 125) = *(_BYTE *)(a2 + 125);
  *(_BYTE *)(a1 + 126) = *(_BYTE *)(a2 + 126);
  *(_BYTE *)(a1 + 127) = *(_BYTE *)(a2 + 127);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  return a1;
}

__n128 __swift_memcpy156_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for VisualUnderstanding.DomainInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 88))
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 88);
  if (!v7)
  {
    sub_1D46E796C(a1 + 80);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_BYTE *)(a1 + 125) = *(_BYTE *)(a2 + 125);
  *(_BYTE *)(a1 + 126) = *(_BYTE *)(a2 + 126);
  *(_BYTE *)(a1 + 127) = *(_BYTE *)(a2 + 127);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for VisualUnderstanding.DomainInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 156))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.DomainInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 156) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 156) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.DomainInfo()
{
  return &type metadata for VisualUnderstanding.DomainInfo;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.Signal()
{
  return &type metadata for VisualUnderstanding.Signal;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ImageRegion.Embedding()
{
  return &type metadata for VisualUnderstanding.ImageRegion.Embedding;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ImageRegion.Embedding.CodingKeys()
{
  return &type metadata for VisualUnderstanding.ImageRegion.Embedding.CodingKeys;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.Signal.CodingKeys()
{
  return &type metadata for VisualUnderstanding.Signal.CodingKeys;
}

uint64_t getEnumTagSinglePayload for VisualUnderstanding.DomainInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.DomainInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1D48ADCA0 + 4 * byte_1D493A005[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1D48ADCD4 + 4 * byte_1D493A000[v4]))();
}

uint64_t sub_1D48ADCD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48ADCDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48ADCE4);
  return result;
}

uint64_t sub_1D48ADCF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48ADCF8);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1D48ADCFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48ADD04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.DomainInfo.CodingKeys()
{
  return &type metadata for VisualUnderstanding.DomainInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for VisualUnderstanding.ImageRegion.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.ImageRegion.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1D48ADDFC + 4 * byte_1D493A00F[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1D48ADE30 + 4 * byte_1D493A00A[v4]))();
}

uint64_t sub_1D48ADE30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48ADE38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48ADE40);
  return result;
}

uint64_t sub_1D48ADE4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48ADE54);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1D48ADE58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48ADE60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ImageRegion.CodingKeys()
{
  return &type metadata for VisualUnderstanding.ImageRegion.CodingKeys;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ReducePersonOverTriggerAnnotation()
{
  return &type metadata for VisualUnderstanding.ReducePersonOverTriggerAnnotation;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ScenenetAnnotations()
{
  return &type metadata for VisualUnderstanding.ScenenetAnnotations;
}

uint64_t _s18VisualIntelligence19VisualUnderstandingV18RegionalAnnotationVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s18VisualIntelligence19VisualUnderstandingV18RegionalAnnotationVwca_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t _s18VisualIntelligence19VisualUnderstandingV18RegionalAnnotationVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.RegionalAnnotation()
{
  return &type metadata for VisualUnderstanding.RegionalAnnotation;
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.Annotation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1D48ADFFC + 4 * byte_1D493A019[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1D48AE030 + 4 * byte_1D493A014[v4]))();
}

uint64_t sub_1D48AE030(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48AE038(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48AE040);
  return result;
}

uint64_t sub_1D48AE04C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48AE054);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1D48AE058(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48AE060(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.Annotation.CodingKeys()
{
  return &type metadata for VisualUnderstanding.Annotation.CodingKeys;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.Text.CodingKeys()
{
  return &type metadata for VisualUnderstanding.Text.CodingKeys;
}

uint64_t initializeWithCopy for DurationMetric(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DurationMetric(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_QWORD *assignWithTake for DurationMetric(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for DurationMetric()
{
  return &type metadata for DurationMetric;
}

uint64_t getEnumTagSinglePayload for VisualUnderstanding.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1D48AE24C + 4 * byte_1D493A023[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1D48AE280 + 4 * byte_1D493A01E[v4]))();
}

uint64_t sub_1D48AE280(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48AE288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48AE290);
  return result;
}

uint64_t sub_1D48AE29C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48AE2A4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1D48AE2A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48AE2B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.CodingKeys()
{
  return &type metadata for VisualUnderstanding.CodingKeys;
}

unint64_t sub_1D48AE2D0()
{
  unint64_t result;

  result = qword_1EFEAC490;
  if (!qword_1EFEAC490)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A4D4, &type metadata for VisualUnderstanding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC490);
  }
  return result;
}

unint64_t sub_1D48AE318()
{
  unint64_t result;

  result = qword_1EFEAC498;
  if (!qword_1EFEAC498)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A58C, &type metadata for VisualUnderstanding.Text.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC498);
  }
  return result;
}

unint64_t sub_1D48AE360()
{
  unint64_t result;

  result = qword_1EFEAC4A0;
  if (!qword_1EFEAC4A0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A644, &type metadata for VisualUnderstanding.Annotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4A0);
  }
  return result;
}

unint64_t sub_1D48AE3A8()
{
  unint64_t result;

  result = qword_1EFEAC4A8;
  if (!qword_1EFEAC4A8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A6FC, &type metadata for VisualUnderstanding.ImageRegion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4A8);
  }
  return result;
}

unint64_t sub_1D48AE3F0()
{
  unint64_t result;

  result = qword_1EFEAC4B0;
  if (!qword_1EFEAC4B0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A7B4, &type metadata for VisualUnderstanding.DomainInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4B0);
  }
  return result;
}

unint64_t sub_1D48AE438()
{
  unint64_t result;

  result = qword_1EFEAC4B8;
  if (!qword_1EFEAC4B8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A86C, &type metadata for VisualUnderstanding.Signal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4B8);
  }
  return result;
}

unint64_t sub_1D48AE480()
{
  unint64_t result;

  result = qword_1EFEAC4C0;
  if (!qword_1EFEAC4C0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A924, &type metadata for VisualUnderstanding.ImageRegion.Embedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4C0);
  }
  return result;
}

unint64_t sub_1D48AE4C8()
{
  unint64_t result;

  result = qword_1EFEAC4C8;
  if (!qword_1EFEAC4C8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A894, &type metadata for VisualUnderstanding.ImageRegion.Embedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4C8);
  }
  return result;
}

unint64_t sub_1D48AE510()
{
  unint64_t result;

  result = qword_1EFEAC4D0;
  if (!qword_1EFEAC4D0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A8BC, &type metadata for VisualUnderstanding.ImageRegion.Embedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4D0);
  }
  return result;
}

unint64_t sub_1D48AE558()
{
  unint64_t result;

  result = qword_1ED98D7F8;
  if (!qword_1ED98D7F8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A7DC, &type metadata for VisualUnderstanding.Signal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D7F8);
  }
  return result;
}

unint64_t sub_1D48AE5A0()
{
  unint64_t result;

  result = qword_1ED98D7F0;
  if (!qword_1ED98D7F0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A804, &type metadata for VisualUnderstanding.Signal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D7F0);
  }
  return result;
}

unint64_t sub_1D48AE5E8()
{
  unint64_t result;

  result = qword_1ED98CAF8;
  if (!qword_1ED98CAF8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A724, &type metadata for VisualUnderstanding.DomainInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CAF8);
  }
  return result;
}

unint64_t sub_1D48AE630()
{
  unint64_t result;

  result = qword_1ED98CB78;
  if (!qword_1ED98CB78)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A74C, &type metadata for VisualUnderstanding.DomainInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB78);
  }
  return result;
}

unint64_t sub_1D48AE678()
{
  unint64_t result;

  result = qword_1ED98CB98;
  if (!qword_1ED98CB98)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A66C, &type metadata for VisualUnderstanding.ImageRegion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB98);
  }
  return result;
}

unint64_t sub_1D48AE6C0()
{
  unint64_t result;

  result = qword_1ED98CB90;
  if (!qword_1ED98CB90)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A694, &type metadata for VisualUnderstanding.ImageRegion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB90);
  }
  return result;
}

unint64_t sub_1D48AE708()
{
  unint64_t result;

  result = qword_1ED98CB48;
  if (!qword_1ED98CB48)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A5B4, &type metadata for VisualUnderstanding.Annotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB48);
  }
  return result;
}

unint64_t sub_1D48AE750()
{
  unint64_t result;

  result = qword_1ED98CB40;
  if (!qword_1ED98CB40)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A5DC, &type metadata for VisualUnderstanding.Annotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB40);
  }
  return result;
}

unint64_t sub_1D48AE798()
{
  unint64_t result;

  result = qword_1EFEAC4D8;
  if (!qword_1EFEAC4D8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A4FC, &type metadata for VisualUnderstanding.Text.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4D8);
  }
  return result;
}

unint64_t sub_1D48AE7E0()
{
  unint64_t result;

  result = qword_1EFEAC4E0;
  if (!qword_1EFEAC4E0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A524, &type metadata for VisualUnderstanding.Text.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4E0);
  }
  return result;
}

unint64_t sub_1D48AE828()
{
  unint64_t result;

  result = qword_1ED98CB68;
  if (!qword_1ED98CB68)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A444, &type metadata for VisualUnderstanding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB68);
  }
  return result;
}

unint64_t sub_1D48AE870()
{
  unint64_t result;

  result = qword_1ED98CB60;
  if (!qword_1ED98CB60)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493A46C, &type metadata for VisualUnderstanding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CB60);
  }
  return result;
}

uint64_t sub_1D48AE8B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D3C0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AEA1C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D388);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 80 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AEB90(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1D48B0328(a1, a2, a3, a4, &qword_1ED98D370, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
}

uint64_t sub_1D48AEBA4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D378);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AED0C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1D48AFD34(a1, a2, a3, a4, (uint64_t *)&unk_1ED98D398);
}

uint64_t sub_1D48AED20(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D368);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 160 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AEE94(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11)
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AF038(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98ECB0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 3 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAA4D0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AF1D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D3D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AF32C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1D48AF338(a1, a2, a3, a4, &qword_1ED98D3D8);
}

uint64_t sub_1D48AF338(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AF490(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEABA50);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AF5E8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D3C8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AF744(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1D48B019C(a1, a2, a3, a4, &qword_1ED98CB18);
}

uint64_t sub_1D48AF758(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CAB0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AF8B4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AFA40(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC608);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AFBB8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D390);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    memcpy(v12, v13, 56 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AFD34(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 24 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48AFEB0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC2D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B0018(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC648);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B019C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9])
      memmove(v13, v14, 56 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[56 * v9] || v13 >= &v14[56 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B0328(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B0508(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC600);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B0670(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 *v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t i;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float *v109;
  char *v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _BYTE v136[28];
  _BYTE v137[28];
  _BYTE v138[28];

  v3 = a1[1];
  result = sub_1D4922E08();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if ((unint64_t)v3 >= 2)
    {
      v81 = *a1;
      v82 = *a1 + 160;
      v83 = -1;
      for (i = 1; i != v3; ++i)
      {
        v85 = v83;
        v86 = v82;
        do
        {
          if (*(float *)(v86 - 48) >= *(float *)(v86 + 112))
            break;
          if (!v81)
            goto LABEL_143;
          v87 = (_OWORD *)(v86 - 160);
          v132 = *(_OWORD *)(v86 + 96);
          v135 = *(_OWORD *)(v86 + 112);
          *(_OWORD *)v138 = *(_OWORD *)(v86 + 128);
          *(_OWORD *)&v138[12] = *(_OWORD *)(v86 + 140);
          v120 = *(_OWORD *)(v86 + 32);
          v123 = *(_OWORD *)(v86 + 48);
          v126 = *(_OWORD *)(v86 + 64);
          v129 = *(_OWORD *)(v86 + 80);
          v114 = *(_OWORD *)v86;
          v117 = *(_OWORD *)(v86 + 16);
          v88 = *(_OWORD *)(v86 - 48);
          *(_OWORD *)(v86 + 96) = *(_OWORD *)(v86 - 64);
          *(_OWORD *)(v86 + 112) = v88;
          v89 = *(_OWORD *)(v86 - 16);
          *(_OWORD *)(v86 + 128) = *(_OWORD *)(v86 - 32);
          *(_OWORD *)(v86 + 144) = v89;
          v90 = *(_OWORD *)(v86 - 112);
          *(_OWORD *)(v86 + 32) = *(_OWORD *)(v86 - 128);
          *(_OWORD *)(v86 + 48) = v90;
          v91 = *(_OWORD *)(v86 - 80);
          *(_OWORD *)(v86 + 64) = *(_OWORD *)(v86 - 96);
          *(_OWORD *)(v86 + 80) = v91;
          v92 = *(_OWORD *)(v86 - 144);
          *(_OWORD *)v86 = *(_OWORD *)(v86 - 160);
          *(_OWORD *)(v86 + 16) = v92;
          v87[6] = v132;
          v87[7] = v135;
          v87[8] = *(_OWORD *)v138;
          *(_OWORD *)((char *)v87 + 140) = *(_OWORD *)&v138[12];
          v87[2] = v120;
          v87[3] = v123;
          v87[4] = v126;
          v87[5] = v129;
          v86 -= 160;
          *v87 = v114;
          v87[1] = v117;
        }
        while (!__CFADD__(v85++, 1));
        v82 += 160;
        --v83;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_148;
  v107 = result;
  v103 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    v109 = (float *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v94 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_105:
      v106 = v8;
      if (v11 >= 2)
      {
        v95 = *v103;
        do
        {
          v96 = v11 - 2;
          if (v11 < 2)
            goto LABEL_134;
          if (!v95)
            goto LABEL_147;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v11 + 24];
          sub_1D482BFB0((float *)(v95 + 160 * v98), (float *)(v95 + 160 * *(_QWORD *)&v94[16 * v11 + 16]), v95 + 160 * v99, v109);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_1D46D5B88((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_136;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v11 > v101)
            goto LABEL_137;
          memmove(&v97[16 * v11 + 16], &v97[16 * v11 + 32], 16 * (v101 - v11));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v11 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v106 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1D4922850();
    *(_QWORD *)(v7 + 16) = v6;
    v106 = v7;
    v109 = (float *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v104 = *a1 + 272;
  v105 = *a1 + 112;
  v102 = *a1 - 160;
  v110 = (char *)MEMORY[0x1E0DEE9D8];
  v111 = *a1;
  v108 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(float *)(v105 + 160 * v9);
      v14 = *(float *)(v105 + 160 * v12);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (float *)(v104 + 160 * v12);
        while (v14 < v13 != *v15 >= v15[40])
        {
          ++v9;
          v15 += 40;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v13)
      {
        if (v9 < v12)
          goto LABEL_140;
        if (v12 < v9)
        {
          v16 = (_OWORD *)(v102 + 160 * v9);
          v17 = v9;
          v18 = v12;
          v19 = (__int128 *)(v10 + 160 * v12);
          do
          {
            if (v18 != --v17)
            {
              if (!v10)
                goto LABEL_146;
              v130 = v19[6];
              v133 = v19[7];
              *(_OWORD *)v136 = v19[8];
              *(_OWORD *)&v136[12] = *(__int128 *)((char *)v19 + 140);
              v118 = v19[2];
              v121 = v19[3];
              v124 = v19[4];
              v127 = v19[5];
              v112 = *v19;
              v115 = v19[1];
              memmove(v19, v16, 0xA0uLL);
              v16[6] = v130;
              v16[7] = v133;
              v16[8] = *(_OWORD *)v136;
              *(_OWORD *)((char *)v16 + 140) = *(_OWORD *)&v136[12];
              v16[2] = v118;
              v16[3] = v121;
              v16[4] = v124;
              v16[5] = v127;
              *v16 = v112;
              v16[1] = v115;
              v10 = v111;
            }
            ++v18;
            v16 -= 10;
            v19 += 10;
          }
          while (v18 < v17);
          v3 = v108;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_138;
    if (v9 - v12 >= v107)
      goto LABEL_39;
    v20 = v12 + v107;
    if (__OFADD__(v12, v107))
      goto LABEL_141;
    if (v20 >= v3)
      v20 = v3;
    if (v20 < v12)
      break;
    if (v9 != v20)
    {
      v71 = (__int128 *)(v10 + 160 * v9);
      v21 = v110;
      do
      {
        v72 = v12;
        v73 = v71;
        do
        {
          if (*((float *)v73 - 12) >= *((float *)v73 + 28))
            break;
          if (!v10)
            goto LABEL_144;
          v74 = v73 - 10;
          v131 = v73[6];
          v134 = v73[7];
          *(_OWORD *)v137 = v73[8];
          *(_OWORD *)&v137[12] = *(__int128 *)((char *)v73 + 140);
          v119 = v73[2];
          v122 = v73[3];
          v125 = v73[4];
          v128 = v73[5];
          v113 = *v73;
          v116 = v73[1];
          v75 = *(v73 - 3);
          v73[6] = *(v73 - 4);
          v73[7] = v75;
          v76 = *(v73 - 1);
          v73[8] = *(v73 - 2);
          v73[9] = v76;
          v77 = *(v73 - 7);
          v73[2] = *(v73 - 8);
          v73[3] = v77;
          v78 = *(v73 - 5);
          v73[4] = *(v73 - 6);
          v73[5] = v78;
          v79 = *(v73 - 9);
          *v73 = *(v73 - 10);
          v73[1] = v79;
          v74[6] = v131;
          v74[7] = v134;
          v74[8] = *(_OWORD *)v137;
          *(__int128 *)((char *)v74 + 140) = *(_OWORD *)&v137[12];
          v74[2] = v119;
          v74[3] = v122;
          v74[4] = v125;
          v74[5] = v128;
          ++v72;
          v73 -= 10;
          *v74 = v113;
          v74[1] = v116;
        }
        while (v9 != v72);
        ++v9;
        v71 += 10;
      }
      while (v9 != v20);
      v9 = v20;
      if (v20 < v12)
        goto LABEL_133;
      goto LABEL_40;
    }
LABEL_39:
    v21 = v110;
    if (v9 < v12)
      goto LABEL_133;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = sub_1D46D5278(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
    v23 = *((_QWORD *)v21 + 2);
    v22 = *((_QWORD *)v21 + 3);
    v11 = v23 + 1;
    v10 = v111;
    if (v23 >= v22 >> 1)
    {
      v80 = sub_1D46D5278((char *)(v22 > 1), v23 + 1, 1, v21);
      v10 = v111;
      v21 = v80;
    }
    *((_QWORD *)v21 + 2) = v11;
    v24 = v21 + 32;
    v25 = &v21[16 * v23 + 32];
    *(_QWORD *)v25 = v12;
    *((_QWORD *)v25 + 1) = v9;
    v110 = v21;
    if (v23)
    {
      while (1)
      {
        v26 = v11 - 1;
        if (v11 >= 4)
        {
          v31 = &v24[16 * v11];
          v32 = *((_QWORD *)v31 - 8);
          v33 = *((_QWORD *)v31 - 7);
          v37 = __OFSUB__(v33, v32);
          v34 = v33 - v32;
          if (v37)
            goto LABEL_122;
          v36 = *((_QWORD *)v31 - 6);
          v35 = *((_QWORD *)v31 - 5);
          v37 = __OFSUB__(v35, v36);
          v29 = v35 - v36;
          v30 = v37;
          if (v37)
            goto LABEL_123;
          v38 = v11 - 2;
          v39 = &v24[16 * v11 - 32];
          v41 = *(_QWORD *)v39;
          v40 = *((_QWORD *)v39 + 1);
          v37 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          if (v37)
            goto LABEL_125;
          v37 = __OFADD__(v29, v42);
          v43 = v29 + v42;
          if (v37)
            goto LABEL_128;
          if (v43 >= v34)
          {
            v61 = &v24[16 * v26];
            v63 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            v37 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v37)
              goto LABEL_132;
            v54 = v29 < v64;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v55 = *((_QWORD *)v21 + 4);
            v56 = *((_QWORD *)v21 + 5);
            v37 = __OFSUB__(v56, v55);
            v48 = v56 - v55;
            v49 = v37;
            goto LABEL_70;
          }
          v28 = *((_QWORD *)v21 + 4);
          v27 = *((_QWORD *)v21 + 5);
          v37 = __OFSUB__(v27, v28);
          v29 = v27 - v28;
          v30 = v37;
        }
        if ((v30 & 1) != 0)
          goto LABEL_124;
        v38 = v11 - 2;
        v44 = &v24[16 * v11 - 32];
        v46 = *(_QWORD *)v44;
        v45 = *((_QWORD *)v44 + 1);
        v47 = __OFSUB__(v45, v46);
        v48 = v45 - v46;
        v49 = v47;
        if (v47)
          goto LABEL_127;
        v50 = &v24[16 * v26];
        v52 = *(_QWORD *)v50;
        v51 = *((_QWORD *)v50 + 1);
        v37 = __OFSUB__(v51, v52);
        v53 = v51 - v52;
        if (v37)
          goto LABEL_130;
        if (__OFADD__(v48, v53))
          goto LABEL_131;
        if (v48 + v53 >= v29)
        {
          v54 = v29 < v53;
LABEL_76:
          if (v54)
            v26 = v38;
          goto LABEL_78;
        }
LABEL_70:
        if ((v49 & 1) != 0)
          goto LABEL_126;
        v57 = &v24[16 * v26];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v37 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v37)
          goto LABEL_129;
        if (v60 < v48)
          goto LABEL_15;
LABEL_78:
        v65 = v26 - 1;
        if (v26 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10)
          goto LABEL_145;
        v66 = &v24[16 * v65];
        v67 = *(_QWORD *)v66;
        v68 = &v24[16 * v26];
        v69 = *((_QWORD *)v68 + 1);
        sub_1D482BFB0((float *)(v10 + 160 * *(_QWORD *)v66), (float *)(v10 + 160 * *(_QWORD *)v68), v10 + 160 * v69, v109);
        if (v1)
          goto LABEL_95;
        if (v69 < v67)
          goto LABEL_119;
        if (v26 > *((_QWORD *)v110 + 2))
          goto LABEL_120;
        *(_QWORD *)v66 = v67;
        *(_QWORD *)&v24[16 * v65 + 8] = v69;
        v70 = *((_QWORD *)v110 + 2);
        if (v26 >= v70)
          goto LABEL_121;
        v21 = v110;
        v11 = v70 - 1;
        memmove(&v24[16 * v26], v68 + 16, 16 * (v70 - 1 - v26));
        *((_QWORD *)v110 + 2) = v70 - 1;
        v10 = v111;
        if (v70 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v108;
    if (v9 >= v108)
    {
      v8 = v106;
      v94 = v110;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = sub_1D4922C28();
  __break(1u);
  return result;
}

uint64_t sub_1D48B0ECC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B0FBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B10B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

char *sub_1D48B11A4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B1288(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 160 * a1 + 32;
    v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B137C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B146C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B1560(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98AEC8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

char *sub_1D48B1668(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D4922C88();
  __break(1u);
  return result;
}

char *sub_1D48B1750(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 40 * a1 + 32);
    v6 = 40 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B183C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 80 * a1 + 32;
    v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

char *sub_1D48B1930(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B1A18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B1B08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B1BF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98ECF0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

char *sub_1D48B1D00(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B1DE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B1ED8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B1FC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B20B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B21A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

char *sub_1D48B229C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D4922C88();
  __break(1u);
  return result;
}

char *sub_1D48B2388(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2470(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

char *sub_1D48B2564(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 56 * a1 + 32);
    v6 = 56 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2650(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CC30);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2758(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98ED38);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2860(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2968(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2A5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2B60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2C54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2D44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2E38(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B2F28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B301C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B310C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48B3224(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6567616D496C6C61 && a2 == 0xEF736E6F69676552;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697461746F6E6E61 && a2 == 0xEA00000000006E6FLL || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5264656E69666572 && a2 == 0xED00006E6F696765 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7A69536567616D69 && a2 == 0xE900000000000065 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D6D6F436C727563 && a2 == 0xEB00000000646E61 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x44497972657571 && a2 == 0xE700000000000000 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D49400E0 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xEF7363697274654DLL)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_1D48B3600()
{
  unint64_t result;

  result = qword_1ED98D990;
  if (!qword_1ED98D990)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B10C, &type metadata for DurationMetric.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D990);
  }
  return result;
}

uint64_t sub_1D48B3644(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001D4947D40 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D69547472617473 && a2 == 0xEE00706D61745365)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

double sub_1D48B37A4(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC4E8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B3600();
  sub_1D4922F4C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v13 = 0;
    sub_1D4922CE8();
    v12 = 1;
    swift_bridgeObjectRetain();
    sub_1D4922D00();
    v2 = v9;
    v11 = 2;
    sub_1D4922D54();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_1D48B3964(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E69646E756F62 && a2 == 0xEB00000000786F42)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D48B3ACC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E69646E756F62 && a2 == 0xEB00000000786F42)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D48B3C3C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736E6F69676572 && a2 == 0xE700000000000000;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D48B3D2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC508);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_1D48B4564();
  sub_1D4922F4C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D170);
    v9[7] = 0;
    sub_1D48AB664(&qword_1EFEAC3B0, &qword_1ED98D170, (uint64_t (*)(void))sub_1D48ABA38, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    sub_1D4922D24();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1D48B3EE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E756F4365636166 && a2 == 0xE900000000000074 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x676E69646E756F62 && a2 == 0xEB00000000786F42)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

_QWORD *sub_1D48B40C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC510);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B45A8();
  sub_1D4922F4C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98AF20);
    sub_1D48AB664(&qword_1EFEAC518, &qword_1ED98AF20, (uint64_t (*)(void))sub_1D48B4630, MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1D48B4214(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F6E6E4165636166 && a2 == 0xEF736E6F69746174;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001D4947B90 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F6E6E417766736ELL && a2 == 0xEF736E6F69746174 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F6E6E4174786574 && a2 == 0xEF736E6F69746174 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001D4947BB0 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001D4947BD0 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001D4947BF0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_1D48B4520()
{
  unint64_t result;

  result = qword_1ED98D7C8;
  if (!qword_1ED98D7C8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B0BC, &type metadata for VisualUnderstanding.RegionalAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D7C8);
  }
  return result;
}

unint64_t sub_1D48B4564()
{
  unint64_t result;

  result = qword_1EFEAC4F8;
  if (!qword_1EFEAC4F8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B06C, &type metadata for VisualUnderstanding.ScenenetAnnotations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC4F8);
  }
  return result;
}

unint64_t sub_1D48B45A8()
{
  unint64_t result;

  result = qword_1ED98AEE8;
  if (!qword_1ED98AEE8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B01C, &type metadata for VisualUnderstanding.ReducePersonOverTriggerAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AEE8);
  }
  return result;
}

unint64_t sub_1D48B45EC()
{
  unint64_t result;

  result = qword_1ED98AF18;
  if (!qword_1ED98AF18)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AFF4, &type metadata for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation);
    atomic_store(result, (unint64_t *)&qword_1ED98AF18);
  }
  return result;
}

unint64_t sub_1D48B4630()
{
  unint64_t result;

  result = qword_1EFEAC520;
  if (!qword_1EFEAC520)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AFCC, &type metadata for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation);
    atomic_store(result, (unint64_t *)&qword_1EFEAC520);
  }
  return result;
}

uint64_t sub_1D48B4674(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E69646E756F62 && a2 == 0xEB00000000786F42;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79676F6C6F746E6FLL && a2 == 0xE800000000000000 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69616D6F446C6C61 && a2 == 0xED00006F666E496ELL || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726F746365746564 && a2 == 0xEF73746C75736552 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001D4947C20 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65726F6353786F62 && a2 == 0xE800000000000000 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6552657372616F63 && a2 == 0xED000073746C7573 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x49656C6F68577369 && a2 == 0xEC0000006567616DLL || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x736C616E676973 && a2 == 0xE700000000000000 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x55676E6967676F6CLL && a2 == 0xEB00000000444955 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6570756F72477369 && a2 == 0xEF6E6F6967655264)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_1D48B4C14(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696F506C61636F66 && a2 == 0xEA0000000000746ELL || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D614E6870796C67 && a2 == 0xE900000000000065 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001D4947C40 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4C79616C70736964 && a2 == 0xEC0000006C656261 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4D79616C70736964 && a2 == 0xEE00656761737365 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x79676F6C6F746E6FLL && a2 == 0xE800000000000000 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x726F746365746564 && a2 == 0xED000065726F6353 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6353657372616F63 && a2 == 0xEB0000000065726FLL || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7463656C65537369 && a2 == 0xEA00000000006465 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6863726165537369 && a2 == 0xEC000000656C6261 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x72656E726F437369 && a2 == 0xED00006870796C47 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x5374736575716572 && a2 == 0xED00006863726165 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001D4947C60 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001D4947C80 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001D4947CA0 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001D4947CC0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t sub_1D48B53FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E69646E756F62 && a2 == 0xEB00000000786F42;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69646465626D65 && a2 == 0xE900000000000067 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6966697373616C63 && a2 == 0xEE006E6F69746163)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1D48B5598(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t _s18VisualIntelligence19VisualUnderstandingV11ImageRegionV9EmbeddingV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D48B56C8 + 4 * byte_1D493A028[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D48B56E8 + 4 * byte_1D493A02D[v4]))();
}

_BYTE *sub_1D48B56C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D48B56E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D48B56F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D48B56F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D48B5700(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D48B5708(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ReducePersonOverTriggerAnnotation.CodingKeys()
{
  return &type metadata for VisualUnderstanding.ReducePersonOverTriggerAnnotation.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.ScenenetAnnotations.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D48B5770 + 4 * byte_1D493A037[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D48B57A4 + 4 * byte_1D493A032[v4]))();
}

uint64_t sub_1D48B57A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B57AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48B57B4);
  return result;
}

uint64_t sub_1D48B57C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48B57C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D48B57CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B57D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ScenenetAnnotations.CodingKeys()
{
  return &type metadata for VisualUnderstanding.ScenenetAnnotations.CodingKeys;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.RegionalAnnotation.CodingKeys()
{
  return &type metadata for VisualUnderstanding.RegionalAnnotation.CodingKeys;
}

uint64_t _s18VisualIntelligence19VisualUnderstandingV6SignalV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D48B584C + 4 * byte_1D493A041[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D48B5880 + 4 * byte_1D493A03C[v4]))();
}

uint64_t sub_1D48B5880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B5888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48B5890);
  return result;
}

uint64_t sub_1D48B589C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48B58A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D48B58A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B58B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DurationMetric.CodingKeys()
{
  return &type metadata for DurationMetric.CodingKeys;
}

uint64_t initializeWithCopy for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation()
{
  return &type metadata for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation;
}

unint64_t sub_1D48B59F4()
{
  unint64_t result;

  result = qword_1EFEAC668;
  if (!qword_1EFEAC668)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AD7C, &type metadata for DurationMetric.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC668);
  }
  return result;
}

unint64_t sub_1D48B5A3C()
{
  unint64_t result;

  result = qword_1EFEAC670;
  if (!qword_1EFEAC670)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AE34, &type metadata for VisualUnderstanding.RegionalAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC670);
  }
  return result;
}

unint64_t sub_1D48B5A84()
{
  unint64_t result;

  result = qword_1EFEAC678;
  if (!qword_1EFEAC678)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AEEC, &type metadata for VisualUnderstanding.ScenenetAnnotations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC678);
  }
  return result;
}

unint64_t sub_1D48B5ACC()
{
  unint64_t result;

  result = qword_1EFEAC680;
  if (!qword_1EFEAC680)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AFA4, &type metadata for VisualUnderstanding.ReducePersonOverTriggerAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC680);
  }
  return result;
}

unint64_t sub_1D48B5B14()
{
  unint64_t result;

  result = qword_1ED98AEF8;
  if (!qword_1ED98AEF8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AF14, &type metadata for VisualUnderstanding.ReducePersonOverTriggerAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AEF8);
  }
  return result;
}

unint64_t sub_1D48B5B5C()
{
  unint64_t result;

  result = qword_1ED98AEF0;
  if (!qword_1ED98AEF0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AF3C, &type metadata for VisualUnderstanding.ReducePersonOverTriggerAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AEF0);
  }
  return result;
}

unint64_t sub_1D48B5BA4()
{
  unint64_t result;

  result = qword_1EFEAC688;
  if (!qword_1EFEAC688)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AE5C, &type metadata for VisualUnderstanding.ScenenetAnnotations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC688);
  }
  return result;
}

unint64_t sub_1D48B5BEC()
{
  unint64_t result;

  result = qword_1EFEAC690;
  if (!qword_1EFEAC690)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AE84, &type metadata for VisualUnderstanding.ScenenetAnnotations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC690);
  }
  return result;
}

unint64_t sub_1D48B5C34()
{
  unint64_t result;

  result = qword_1ED98D7D8;
  if (!qword_1ED98D7D8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493ADA4, &type metadata for VisualUnderstanding.RegionalAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D7D8);
  }
  return result;
}

unint64_t sub_1D48B5C7C()
{
  unint64_t result;

  result = qword_1ED98D7D0;
  if (!qword_1ED98D7D0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493ADCC, &type metadata for VisualUnderstanding.RegionalAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D7D0);
  }
  return result;
}

unint64_t sub_1D48B5CC4()
{
  unint64_t result;

  result = qword_1ED98D9A0;
  if (!qword_1ED98D9A0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493ACEC, &type metadata for DurationMetric.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D9A0);
  }
  return result;
}

unint64_t sub_1D48B5D0C()
{
  unint64_t result;

  result = qword_1ED98D998;
  if (!qword_1ED98D998)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493AD14, &type metadata for DurationMetric.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98D998);
  }
  return result;
}

unint64_t sub_1D48B5D50()
{
  unint64_t result;

  result = qword_1ED98AF00;
  if (!qword_1ED98AF00)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B214, &type metadata for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AF00);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D48B5DE0 + 4 * byte_1D493A04B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D48B5E14 + 4 * byte_1D493A046[v4]))();
}

uint64_t sub_1D48B5E14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B5E1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48B5E24);
  return result;
}

uint64_t sub_1D48B5E30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48B5E38);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D48B5E3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B5E44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation.CodingKeys()
{
  return &type metadata for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation.CodingKeys;
}

unint64_t sub_1D48B5E64()
{
  unint64_t result;

  result = qword_1EFEAC6A0;
  if (!qword_1EFEAC6A0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B1EC, &type metadata for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC6A0);
  }
  return result;
}

unint64_t sub_1D48B5EAC()
{
  unint64_t result;

  result = qword_1ED98AF10;
  if (!qword_1ED98AF10)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B15C, &type metadata for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AF10);
  }
  return result;
}

unint64_t sub_1D48B5EF4()
{
  unint64_t result;

  result = qword_1ED98AF08;
  if (!qword_1ED98AF08)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B184, &type metadata for VisualUnderstanding.ReducePersonOverTriggerRegionalAnnotation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AF08);
  }
  return result;
}

uint64_t sub_1D48B5F44(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
    v9 = *(int *)(v8 + 24);
    v10 = v7 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = sub_1D492201C();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(v8 + 28);
    v15 = (_QWORD *)(v7 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D010);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = v16[1];
      *v15 = *v16;
      v15[1] = v20;
      *((_DWORD *)v15 + 4) = *((_DWORD *)v16 + 4);
      *((_WORD *)v15 + 10) = *((_WORD *)v16 + 10);
      v21 = *(int *)(v17 + 32);
      v22 = (char *)v15 + v21;
      v23 = (char *)v16 + v21;
      swift_bridgeObjectRetain();
      v13((uint64_t)v22, (uint64_t)v23, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v24 = a3[6];
    *(_BYTE *)(v7 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v25 = v7 + v24;
    v26 = (uint64_t)a2 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
    *(_QWORD *)(v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1D48B60E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v2 = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
  v3 = a1 + *(int *)(v2 + 24);
  v4 = sub_1D492201C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = a1 + *(int *)(v2 + 28);
  v7 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 32), v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D48B61A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
  v7 = *(int *)(v6 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1D492201C();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(v6 + 28);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D010);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    *((_DWORD *)v13 + 4) = *((_DWORD *)v14 + 4);
    *((_WORD *)v13 + 10) = *((_WORD *)v14 + 10);
    v19 = *(int *)(v15 + 32);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v22 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D48B6318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
  v6 = *(int *)(v5 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1D492201C();
  v29 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 24);
  v10(v7, v8, v9);
  v11 = *(int *)(v5 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
      *(_BYTE *)(v12 + 20) = *(_BYTE *)(v13 + 20);
      *(_BYTE *)(v12 + 21) = *(_BYTE *)(v13 + 21);
      v10(v12 + *(int *)(v14 + 32), v13 + *(int *)(v14 + 32), v9);
      goto LABEL_7;
    }
    sub_1D4697DE0(v12, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D010);
    memcpy((void *)v12, (const void *)v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
  *(_BYTE *)(v12 + 20) = *(_BYTE *)(v13 + 20);
  *(_BYTE *)(v12 + 21) = *(_BYTE *)(v13 + 21);
  v19 = *(int *)(v14 + 32);
  v20 = v12 + v19;
  v21 = v13 + v19;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v24 = a3[6];
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  *(_BYTE *)(v25 + 8) = *((_BYTE *)v26 + 8);
  *(_QWORD *)v25 = v27;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D48B654C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
  v7 = *(int *)(v6 + 24);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = sub_1D492201C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(v6 + 28);
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D010);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_DWORD *)v13 + 4) = *((_DWORD *)v14 + 4);
    *((_WORD *)v13 + 10) = *((_WORD *)v14 + 10);
    v11((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1D48B66AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
  v6 = *(int *)(v5 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1D492201C();
  v25 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  v10(v7, v8, v9);
  v11 = *(int *)(v5 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v24 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_QWORD *)(v12 + 8) = v24;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
      *(_BYTE *)(v12 + 20) = *(_BYTE *)(v13 + 20);
      *(_BYTE *)(v12 + 21) = *(_BYTE *)(v13 + 21);
      v10(v12 + *(int *)(v14 + 32), v13 + *(int *)(v14 + 32), v9);
      goto LABEL_7;
    }
    sub_1D4697DE0(v12, type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D010);
    memcpy((void *)v12, (const void *)v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
  *(_WORD *)(v12 + 20) = *(_WORD *)(v13 + 20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v12 + *(int *)(v14 + 32), v13 + *(int *)(v14 + 32), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D48B68A0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D48B68AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1D48B6928()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D48B6934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FusionDomainAssignmentRule()
{
  uint64_t result;

  result = qword_1ED98CDB8;
  if (!qword_1ED98CDB8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D48B69E8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1D48B6A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t);
  _BYTE *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  uint64_t v66;
  CGFloat MinX;
  uint64_t v68;
  unint64_t v69;
  CGFloat MinY;
  CGFloat Width;
  CGFloat Height;
  uint64_t v73;
  unint64_t v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  uint64_t v88;
  CGFloat v89;
  uint64_t v90;
  unint64_t v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unsigned __int8 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  _BYTE v114[4];
  int v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  double *v123;
  double *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD v131[8];
  _OWORD v132[2];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _OWORD v141[2];
  _OWORD v142[8];
  _OWORD v143[2];
  _OWORD v144[3];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _OWORD v150[2];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _OWORD v159[2];
  _BYTE v160[176];
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;

  v125 = a3;
  v129 = a4;
  v130 = a2;
  v128 = a1;
  v4 = type metadata accessor for VisualUnderstanding.ImageRegion();
  v5 = MEMORY[0x1E0C80A78](v4);
  v123 = (double *)&v114[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v124 = (double *)&v114[-v7];
  v127 = type metadata accessor for FusionDomainAssignmentRule();
  v8 = MEMORY[0x1E0C80A78](v127);
  v10 = &v114[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v114[-v11];
  v13 = sub_1D4922370();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v114[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = &v114[-v19];
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = &v114[-v22];
  MEMORY[0x1E0C80A78](v21);
  v25 = &v114[-v24];
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D010);
  MEMORY[0x1E0C80A78](v26);
  v28 = &v114[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D46A4760(v128, (uint64_t)v160);
  if (*(_BYTE *)(v130 + 96) == 1)
  {
LABEL_8:
    sub_1D46A4760((uint64_t)v160, v129);
    return sub_1D46C6AE4((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_1D46C6A64);
  }
  v120 = v25;
  v121 = v28;
  v117 = v10;
  v118 = v12;
  v119 = v23;
  v122 = v14;
  v128 = v13;
  v29 = (uint64_t)v126;
  v30 = v127;
  sub_1D46A86A4(*v126);
  if (!v31)
  {
    sub_1D470C76C((uint64_t)v20);
    sub_1D470C928((uint64_t)v17);
    v41 = *(void (**)(_BYTE *, uint64_t))(v122 + 8);
    v42 = v20;
    v43 = v128;
    v41(v42, v128);
    v44 = sub_1D4922358();
    v45 = sub_1D4922910();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_1D467C000, v44, v45, "No satisified coarse label.", v46, 2u);
      MEMORY[0x1D82635B8](v46, -1, -1);
    }

    v41(v17, v43);
    goto LABEL_8;
  }
  v33 = v32;
  v125 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D3B8);
  v34 = type metadata accessor for Argos_Protos_Queryflow_ObjectDetectionLabelThreshold(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1D49273C0;
  v38 = v37 + v36;
  v39 = type metadata accessor for Argos_Protos_Queryflow_FusionDomainAssignmentRule(0);
  v40 = (uint64_t)v121;
  sub_1D4824EA4(v29 + *(int *)(v39 + 28), (uint64_t)v121);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v40, 1, v34) == 1)
  {
    *(_QWORD *)v38 = 0;
    *(_QWORD *)(v38 + 8) = 0xE000000000000000;
    *(_DWORD *)(v38 + 16) = 0;
    *(_WORD *)(v38 + 20) = 0;
    sub_1D4922010();
    sub_1D4824EEC(v40);
  }
  else
  {
    sub_1D4824F2C(v40, v38);
  }
  v48 = v129;
  *(_QWORD *)&v144[0] = *(_QWORD *)(v29 + *(int *)(v30 + 28));
  swift_bridgeObjectRetain();
  sub_1D4720740(v37, (uint64_t *)v144, (uint64_t)&v151);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((_QWORD)v154)
  {
    v49 = *((_QWORD *)&v153 + 1);
    if (*(_BYTE *)(v29 + 8) == 1)
    {
      v121 = (_BYTE *)*((_QWORD *)&v151 + 1);
      v123 = (double *)v151;
      v50 = v152;
      v51 = v153;
      v52 = v154;
      swift_bridgeObjectRelease();
      sub_1D46A4970((uint64_t)v123, (uint64_t)v121, v50, *((uint64_t *)&v50 + 1), v51, v49, v52);
      v53 = (uint64_t)v120;
      sub_1D470C76C((uint64_t)v120);
      v54 = (uint64_t)v118;
      sub_1D469C304(v29, (uint64_t)v118, (uint64_t (*)(_QWORD))type metadata accessor for FusionDomainAssignmentRule);
      v55 = v124;
      sub_1D469C304(v130, (uint64_t)v124, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      v56 = sub_1D4922358();
      v57 = sub_1D4922910();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = swift_slowAlloc();
        v59 = swift_slowAlloc();
        *(_QWORD *)&v151 = v59;
        *(_DWORD *)v58 = 136315394;
        v60 = sub_1D46F8BC8(*(_BYTE *)(v54 + *(int *)(v127 + 20)));
        *(_QWORD *)&v144[0] = sub_1D47F0250(v60, v61, (uint64_t *)&v151);
        sub_1D4922A78();
        swift_bridgeObjectRelease();
        sub_1D4697DE0(v54, (uint64_t (*)(_QWORD))type metadata accessor for FusionDomainAssignmentRule);
        *(_WORD *)(v58 + 12) = 2080;
        v130 = v58 + 14;
        v62 = *v55;
        v63 = v55[1];
        v64 = v55[2];
        v65 = v55[3];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D408);
        v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_1D4927560;
        v161.origin.x = v62;
        v161.origin.y = v63;
        v161.size.width = v64;
        v161.size.height = v65;
        MinX = CGRectGetMinX(v161);
        v68 = MEMORY[0x1E0DEF040];
        *(_QWORD *)(v66 + 56) = MEMORY[0x1E0DEF040];
        v69 = sub_1D46A492C();
        *(_QWORD *)(v66 + 64) = v69;
        *(CGFloat *)(v66 + 32) = MinX;
        v162.origin.x = v62;
        v162.origin.y = v63;
        v162.size.width = v64;
        v162.size.height = v65;
        MinY = CGRectGetMinY(v162);
        *(_QWORD *)(v66 + 96) = v68;
        *(_QWORD *)(v66 + 104) = v69;
        *(CGFloat *)(v66 + 72) = MinY;
        v163.origin.x = v62;
        v163.origin.y = v63;
        v163.size.width = v64;
        v163.size.height = v65;
        Width = CGRectGetWidth(v163);
        *(_QWORD *)(v66 + 136) = v68;
        *(_QWORD *)(v66 + 144) = v69;
        *(CGFloat *)(v66 + 112) = Width;
        v164.origin.x = v62;
        v164.origin.y = v63;
        v164.size.width = v64;
        v164.size.height = v65;
        Height = CGRectGetHeight(v164);
        *(_QWORD *)(v66 + 176) = v68;
        *(_QWORD *)(v66 + 184) = v69;
        *(CGFloat *)(v66 + 152) = Height;
        v73 = sub_1D4922640();
        *(_QWORD *)&v144[0] = sub_1D47F0250(v73, v74, (uint64_t *)&v151);
        v48 = v129;
        sub_1D4922A78();
        swift_bridgeObjectRelease();
        sub_1D4697DE0((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        _os_log_impl(&dword_1D467C000, v56, v57, "Reject %s for region: %s", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D82635B8](v59, -1, -1);
        MEMORY[0x1D82635B8](v58, -1, -1);

        (*(void (**)(_BYTE *, uint64_t))(v122 + 8))(v120, v128);
      }
      else
      {
        sub_1D4697DE0(v54, (uint64_t (*)(_QWORD))type metadata accessor for FusionDomainAssignmentRule);
        sub_1D4697DE0((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);

        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v53, v128);
        v48 = v129;
      }
      sub_1D46C6BD0((uint64_t)&v151);
      v75 = &v151;
      goto LABEL_19;
    }
    v115 = DWORD2(v155);
    v116 = v155;
    v118 = (_BYTE *)*((_QWORD *)&v153 + 1);
    v120 = (_BYTE *)*((_QWORD *)&v154 + 1);
    v121 = (_BYTE *)v154;
    LODWORD(v124) = v33;
    sub_1D46C6AE4((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_1D46C6A64);
    v76 = (uint64_t)v119;
    sub_1D470C76C((uint64_t)v119);
    v77 = (uint64_t)v117;
    sub_1D469C304(v29, (uint64_t)v117, (uint64_t (*)(_QWORD))type metadata accessor for FusionDomainAssignmentRule);
    v78 = v123;
    sub_1D469C304(v130, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
    v79 = sub_1D4922358();
    v80 = sub_1D4922910();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = swift_slowAlloc();
      v130 = swift_slowAlloc();
      *(_QWORD *)&v151 = v130;
      *(_DWORD *)v81 = 136315394;
      v82 = sub_1D46F8BC8(*(_BYTE *)(v77 + *(int *)(v127 + 20)));
      *(_QWORD *)&v144[0] = sub_1D47F0250(v82, v83, (uint64_t *)&v151);
      sub_1D4922A78();
      swift_bridgeObjectRelease();
      sub_1D4697DE0(v77, (uint64_t (*)(_QWORD))type metadata accessor for FusionDomainAssignmentRule);
      *(_WORD *)(v81 + 12) = 2080;
      v117 = (_BYTE *)(v81 + 14);
      v84 = *v78;
      v85 = v78[1];
      v86 = v78[2];
      v87 = v78[3];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D408);
      v88 = swift_allocObject();
      *(_OWORD *)(v88 + 16) = xmmword_1D4927560;
      v165.origin.x = v84;
      v165.origin.y = v85;
      v165.size.width = v86;
      v165.size.height = v87;
      v89 = CGRectGetMinX(v165);
      v90 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v88 + 56) = MEMORY[0x1E0DEF040];
      v91 = sub_1D46A492C();
      *(_QWORD *)(v88 + 64) = v91;
      *(CGFloat *)(v88 + 32) = v89;
      v166.origin.x = v84;
      v166.origin.y = v85;
      v166.size.width = v86;
      v166.size.height = v87;
      v92 = CGRectGetMinY(v166);
      *(_QWORD *)(v88 + 96) = v90;
      *(_QWORD *)(v88 + 104) = v91;
      *(CGFloat *)(v88 + 72) = v92;
      v167.origin.x = v84;
      v167.origin.y = v85;
      v167.size.width = v86;
      v167.size.height = v87;
      v93 = CGRectGetWidth(v167);
      *(_QWORD *)(v88 + 136) = v90;
      *(_QWORD *)(v88 + 144) = v91;
      *(CGFloat *)(v88 + 112) = v93;
      v168.origin.x = v84;
      v168.origin.y = v85;
      v168.size.width = v86;
      v168.size.height = v87;
      v94 = CGRectGetHeight(v168);
      *(_QWORD *)(v88 + 176) = v90;
      *(_QWORD *)(v88 + 184) = v91;
      v95 = v129;
      *(CGFloat *)(v88 + 152) = v94;
      v96 = sub_1D4922640();
      *(_QWORD *)&v144[0] = sub_1D47F0250(v96, v97, (uint64_t *)&v151);
      sub_1D4922A78();
      swift_bridgeObjectRelease();
      sub_1D4697DE0((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      _os_log_impl(&dword_1D467C000, v79, v80, "Assign %s to region: %s", (uint8_t *)v81, 0x16u);
      v98 = v130;
      swift_arrayDestroy();
      MEMORY[0x1D82635B8](v98, -1, -1);
      v99 = v81;
      v29 = (uint64_t)v126;
      MEMORY[0x1D82635B8](v99, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v122 + 8))(v119, v128);
      swift_bridgeObjectRelease();
      v101 = (uint64_t)v120;
      v100 = (uint64_t)v121;
      v102 = (uint64_t)v118;
      v103 = v116;
      v104 = v115;
    }
    else
    {
      sub_1D4697DE0(v77, (uint64_t (*)(_QWORD))type metadata accessor for FusionDomainAssignmentRule);
      sub_1D4697DE0((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);

      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v76, v128);
      swift_bridgeObjectRelease();
      v101 = (uint64_t)v120;
      v100 = (uint64_t)v121;
      v95 = v129;
      v102 = (uint64_t)v118;
      v103 = v116;
      v104 = v115;
      v30 = v127;
    }
    v106 = *(_BYTE *)(v29 + *(int *)(v30 + 20));
    LOBYTE(v144[0]) = v106;
    *(_OWORD *)((char *)v144 + 8) = 0u;
    *(_OWORD *)((char *)&v144[1] + 8) = 0u;
    BYTE8(v144[2]) = 0;
    v145 = 0u;
    v146 = 0u;
    *(_QWORD *)&v147 = v102;
    *((_QWORD *)&v147 + 1) = v100;
    *(_QWORD *)&v148 = v101;
    *((_QWORD *)&v148 + 1) = v103;
    LODWORD(v149) = 0;
    DWORD1(v149) = v104;
    *((_QWORD *)&v149 + 1) = v124;
    LOWORD(v150[0]) = 0;
    DWORD2(v150[1]) = 0;
    *((_QWORD *)&v150[0] + 1) = 0;
    *(_QWORD *)&v150[1] = 0;
    sub_1D46A4760((uint64_t)v160, (uint64_t)&v151);
    if (sub_1D46A47A8((uint64_t)&v151) == 1)
      goto LABEL_22;
    v109 = sub_1D46F8BC8(v151);
    v111 = v110;
    if (v109 == sub_1D46F8BC8(v106) && v111 == v112)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v113 = sub_1D4922E38();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v113 & 1) == 0)
      {
        sub_1D46C6AE4((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_1D46C6B50);
LABEL_22:
        v139 = v148;
        v140 = v149;
        v141[0] = v150[0];
        *(_OWORD *)((char *)v141 + 12) = *(_OWORD *)((char *)v150 + 12);
        v135 = v144[2];
        v136 = v145;
        v137 = v146;
        v138 = v147;
        v107 = v144[0];
        v108 = v144[1];
LABEL_28:
        v133 = v107;
        v134 = v108;
        faiss::NormalizationTransform::~NormalizationTransform((faiss::NormalizationTransform *)&v133);
        sub_1D46A4760((uint64_t)&v133, (uint64_t)v142);
        v75 = v142;
        v105 = v95;
        return sub_1D46A4760((uint64_t)v75, v105);
      }
    }
    v142[6] = v157;
    v142[7] = v158;
    v143[0] = v159[0];
    *(_OWORD *)((char *)v143 + 12) = *(_OWORD *)((char *)v159 + 12);
    v142[2] = v153;
    v142[3] = v154;
    v142[4] = v155;
    v142[5] = v156;
    v142[0] = v151;
    v142[1] = v152;
    v139 = v148;
    v140 = v149;
    v141[0] = v150[0];
    *(_OWORD *)((char *)v141 + 12) = *(_OWORD *)((char *)v150 + 12);
    v135 = v144[2];
    v136 = v145;
    v137 = v146;
    v138 = v147;
    v133 = v144[0];
    v134 = v144[1];
    sub_1D482947C((uint64_t)v142, &v133, (uint64_t)v131);
    sub_1D46C6AE4((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_1D46C6B50);
    sub_1D46A48AC((uint64_t)v144);
    v139 = v131[6];
    v140 = v131[7];
    v141[0] = v132[0];
    *(_OWORD *)((char *)v141 + 12) = *(_OWORD *)((char *)v132 + 12);
    v135 = v131[2];
    v136 = v131[3];
    v137 = v131[4];
    v138 = v131[5];
    v107 = v131[0];
    v108 = v131[1];
    goto LABEL_28;
  }
  sub_1D46C6AE4((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_1D46C6A64);
  swift_bridgeObjectRelease();
  v75 = (__int128 *)v160;
LABEL_19:
  v105 = v48;
  return sub_1D46A4760((uint64_t)v75, v105);
}

uint64_t sub_1D48B7710(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC6B8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B90AC();
  sub_1D4922F58();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D0F0);
  sub_1D48B90F0(&qword_1EFEAC6C0, &qword_1EFEAC6C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  sub_1D4922DCC();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1D48B7834()
{
  return 0x614D6E69616D6F64;
}

uint64_t sub_1D48B7850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x614D6E69616D6F64 && a2 == 0xE900000000000070)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1D4922E38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1D48B78F0()
{
  sub_1D48B90AC();
  return sub_1D4922F64();
}

uint64_t sub_1D48B7918()
{
  sub_1D48B90AC();
  return sub_1D4922F70();
}

_QWORD *sub_1D48B7940@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1D48B8F60(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1D48B7968(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1D48B7710(a1, *v1);
}

uint64_t sub_1D48B7980(char *a1, char *a2)
{
  return sub_1D489B458(*a1, *a2);
}

uint64_t sub_1D48B798C()
{
  sub_1D4922EF8();
  sub_1D49226D0();
  swift_bridgeObjectRelease();
  return sub_1D4922F34();
}

uint64_t sub_1D48B7A04()
{
  sub_1D49226D0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D48B7A58()
{
  sub_1D4922EF8();
  sub_1D49226D0();
  swift_bridgeObjectRelease();
  return sub_1D4922F34();
}

uint64_t sub_1D48B7ACC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1D4922CA0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1D48B7B28(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7463656A626FLL;
  if (*v1)
    v2 = 0x6567616D69;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1D48B7B60()
{
  sub_1D48B94A8();
  return sub_1D49227FC();
}

uint64_t sub_1D48B7BBC()
{
  sub_1D48B94A8();
  return sub_1D49227F0();
}

void sub_1D48B7C08(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E97FB760;
}

uint64_t sub_1D48B7C18(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = sub_1D4922370();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1D4920F18();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D4920E4C();
  swift_allocObject();
  sub_1D4920E40();
  v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v14 = a1 & 0xFFFFFFFFFFFFLL;
  v24 = v6;
  if (v14)
  {
    v23 = v2;
    sub_1D4920EA0();
    swift_bridgeObjectRelease();
    v15 = sub_1D4920F24();
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    sub_1D48B801C();
    sub_1D4920E34();
    v22 = sub_1D48B8A24(v25);
    sub_1D4696F10(v15, v17);
    v3 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1D470C76C((uint64_t)v9);
    v18 = sub_1D4922358();
    v19 = sub_1D492291C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1D467C000, v18, v19, "Error loading glyph config file", v20, 2u);
      MEMORY[0x1D82635B8](v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
    v22 = sub_1D47C58CC(MEMORY[0x1E0DEE9D8]);
  }
  swift_release();
  *(_QWORD *)(v3 + 16) = v22;
  return v3;
}

uint64_t type metadata accessor for VisualDomainGlyphManager()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for VisualDomainGlyphConfig()
{
  return &type metadata for VisualDomainGlyphConfig;
}

uint64_t sub_1D48B7EDC(uint64_t a1, uint64_t a2)
{
  uint64_t ObjCClassFromMetadata;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  type metadata accessor for VisualIntelligenceService(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v5 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v6 = sub_1D4920E28();
  v8 = v7;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D408);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1D4927B00;
  v10 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
  v11 = sub_1D46FBE30();
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 96) = v10;
  *(_QWORD *)(v9 + 104) = v11;
  *(_QWORD *)(v9 + 64) = v11;
  *(_QWORD *)(v9 + 72) = a1;
  *(_QWORD *)(v9 + 80) = a2;
  swift_bridgeObjectRetain();
  return sub_1D4922640();
}

unint64_t sub_1D48B801C()
{
  unint64_t result;

  result = qword_1ED98CCF8;
  if (!qword_1ED98CCF8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B500, &type metadata for WeakGlyphConfig);
    atomic_store(result, (unint64_t *)&qword_1ED98CCF8);
  }
  return result;
}

uint64_t sub_1D48B8060@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  BOOL v34;
  BOOL v35;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  _BYTE *v50;
  _BYTE *v51;
  os_log_type_t v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;

  v67 = a2;
  v5 = sub_1D4922370();
  v71 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v65 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v66 = (char *)&v63 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v63 = (uint64_t)&v63 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v64 = (char *)&v63 - v13;
  MEMORY[0x1E0C80A78](v12);
  v69 = 0;
  v70 = (char *)&v63 - v14;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v75 = a1;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v73 = 0;
  v74 = (unint64_t)(v21 + 63) >> 6;
  v68 = 2;
  while (v23)
  {
    v24 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    v25 = v24 | (v17 << 6);
LABEL_20:
    v29 = 16 * v25;
    v30 = (uint64_t *)(*(_QWORD *)(v75 + 48) + v29);
    v31 = *v30;
    v32 = v30[1];
    v33 = (uint64_t *)(*(_QWORD *)(v75 + 56) + v29);
    v2 = *v33;
    v3 = v33[1];
    v34 = *v30 == 1701667182 && v32 == 0xE400000000000000;
    if (v34 || (sub_1D4922E38() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v38 = (uint64_t)v70;
        goto LABEL_48;
      }
      swift_bridgeObjectRelease();
      v15 = v2;
      v16 = v3;
    }
    else
    {
      v35 = v31 == 0x50746C7561666564 && v32 == 0xEF6E6F697469736FLL;
      if (v35 || (sub_1D4922E38() & 1) != 0)
      {
        if (v68 != 2)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v38 = (uint64_t)v64;
LABEL_48:
          sub_1D470C76C(v38);
          swift_bridgeObjectRetain();
          v39 = sub_1D4922358();
          v40 = sub_1D492291C();
          if (os_log_type_enabled(v39, v40))
          {
            v41 = (uint8_t *)swift_slowAlloc();
            v42 = swift_slowAlloc();
            v76 = v42;
            *(_DWORD *)v41 = 136315138;
            swift_bridgeObjectRetain();
            v78 = sub_1D47F0250(v31, v32, &v76);
            sub_1D4922A78();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1D467C000, v39, v40, "Duplicate entry for %s.", v41, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1D82635B8](v42, -1, -1);
            MEMORY[0x1D82635B8](v41, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v38, v72);
          sub_1D48B8CE4();
          swift_allocError();
          *v50 = 0;
LABEL_60:
          swift_willThrow();
          return swift_release();
        }
        swift_bridgeObjectRetain_n();
        v37 = sub_1D4922CA0();
        swift_bridgeObjectRelease();
        if (v37)
        {
          if (v37 != 1)
            goto LABEL_72;
          v68 = 1;
        }
        else
        {
          v68 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v31 == 0x614E6E69616D6F64 && v32 == 0xEA0000000000656DLL)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          LODWORD(v69) = sub_1D4922E38();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if ((v69 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v17 = v65;
            sub_1D470C76C(v65);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v16 = sub_1D4922358();
            v52 = sub_1D492291C();
            if (os_log_type_enabled(v16, v52))
            {
              v54 = swift_slowAlloc();
              v74 = swift_slowAlloc();
              v76 = v74;
              *(_DWORD *)v54 = 136315394;
              swift_bridgeObjectRetain();
              v78 = sub_1D47F0250(v31, v32, &v76);
              sub_1D4922A78();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v54 + 12) = 2080;
              swift_bridgeObjectRetain();
              v78 = sub_1D47F0250(v2, v3, &v76);
              sub_1D4922A78();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1D467C000, v16, v52, "Invalid glyph config: %s: %s", (uint8_t *)v54, 0x16u);
              v55 = v74;
              swift_arrayDestroy();
              MEMORY[0x1D82635B8](v55, -1, -1);
              MEMORY[0x1D82635B8](v54, -1, -1);

              goto LABEL_68;
            }
LABEL_67:

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
LABEL_68:
            (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v17, v72);
            sub_1D48B8CE4();
            swift_allocError();
            v57 = 2;
LABEL_69:
            *v56 = v57;
            goto LABEL_60;
          }
        }
        if (v73)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v38 = (uint64_t)v66;
          goto LABEL_48;
        }
        swift_bridgeObjectRelease();
        v69 = v2;
        v73 = v3;
      }
    }
  }
  v26 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_67;
  }
  if (v26 >= v74)
    goto LABEL_50;
  v27 = *(_QWORD *)(v19 + 8 * v26);
  ++v17;
  if (v27)
    goto LABEL_19;
  v17 = v26 + 1;
  if (v26 + 1 >= v74)
    goto LABEL_50;
  v27 = *(_QWORD *)(v19 + 8 * v17);
  if (v27)
    goto LABEL_19;
  v17 = v26 + 2;
  if (v26 + 2 >= v74)
    goto LABEL_50;
  v27 = *(_QWORD *)(v19 + 8 * v17);
  if (v27)
  {
LABEL_19:
    v23 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v17 << 6);
    goto LABEL_20;
  }
  v28 = v26 + 3;
  if (v28 < v74)
  {
    v27 = *(_QWORD *)(v19 + 8 * v28);
    if (!v27)
    {
      while (1)
      {
        v17 = v28 + 1;
        if (__OFADD__(v28, 1))
          break;
        if (v17 >= v74)
          goto LABEL_50;
        v27 = *(_QWORD *)(v19 + 8 * v17);
        ++v28;
        if (v27)
          goto LABEL_19;
      }
      __break(1u);
LABEL_72:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = v63;
      sub_1D470C76C(v63);
      swift_bridgeObjectRetain();
      v59 = sub_1D4922358();
      v60 = sub_1D492291C();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc();
        v62 = swift_slowAlloc();
        v76 = v62;
        *(_DWORD *)v61 = 136315138;
        swift_bridgeObjectRetain();
        v78 = sub_1D47F0250(v2, v3, &v76);
        sub_1D4922A78();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D467C000, v59, v60, "Failed to parse default position %s.", v61, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D82635B8](v62, -1, -1);
        MEMORY[0x1D82635B8](v61, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v63, v72);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v58, v72);
      }
      sub_1D48B8CE4();
      swift_allocError();
      v57 = 1;
      goto LABEL_69;
    }
    v17 = v28;
    goto LABEL_19;
  }
LABEL_50:
  swift_release();
  if (v16)
    v43 = (unint64_t)v16;
  else
    v43 = 0xE000000000000000;
  if (v73)
  {
    if (v16)
      v44 = v15;
    else
      v44 = 0;
    v76 = v69;
    v77 = v73;
    swift_bridgeObjectRetain();
    sub_1D492270C();
    result = swift_bridgeObjectRelease();
    v46 = v76;
    v47 = v77;
    v48 = v68 & 1;
    v49 = v67;
    *v67 = v44;
    v49[1] = v43;
    v49[2] = v46;
    v49[3] = v47;
    *((_BYTE *)v49 + 32) = v48;
  }
  else
  {
    sub_1D48B8CE4();
    swift_allocError();
    *v51 = 3;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D48B8A24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  uint64_t result;
  char v32;
  _OWORD v33[2];
  char v34;
  _QWORD *v35;

  v2 = v1;
  v4 = (_QWORD *)sub_1D47C58CC(MEMORY[0x1E0DEE9D8]);
  v5 = 0;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  if (!v9)
    goto LABEL_7;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = sub_1D46F9314();
    if (v14 == 26)
    {
      swift_bridgeObjectRelease();
      if (v9)
        goto LABEL_4;
    }
    else
    {
      v18 = v14;
      sub_1D48B8060(v13, (uint64_t *)v33);
      if (v2)
      {
        swift_bridgeObjectRelease();
LABEL_35:
        swift_release();
        return (uint64_t)v4;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v35 = v4;
      v21 = sub_1D47CA6C8(v18);
      v22 = v4[2];
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
        goto LABEL_38;
      if (v4[3] >= v24)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v30 = v20;
          sub_1D47B01E8();
          v20 = v30;
        }
      }
      else
      {
        v32 = v20;
        sub_1D47A87A8(v24, isUniquelyReferenced_nonNull_native);
        v25 = sub_1D47CA6C8(v18);
        v27 = v26 & 1;
        v20 = v32;
        if ((v32 & 1) != v27)
          goto LABEL_39;
        v21 = v25;
      }
      v2 = 0;
      v4 = v35;
      if ((v20 & 1) != 0)
      {
        v28 = v35[7] + 40 * v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = v33[1];
        *(_OWORD *)v28 = v33[0];
        *(_OWORD *)(v28 + 16) = v29;
        *(_BYTE *)(v28 + 32) = v34;
      }
      else
      {
        sub_1D47ACBE8(v21, v18, (uint64_t)v33, v35);
      }
      swift_bridgeObjectRelease();
      if (v9)
        goto LABEL_4;
    }
LABEL_7:
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v5 >= v10)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    if (!v16)
      break;
LABEL_17:
    v9 = (v16 - 1) & v16;
  }
  v17 = v5 + 1;
  if (v5 + 1 >= v10)
    goto LABEL_35;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v5 + 2;
  if (v5 + 2 >= v10)
    goto LABEL_35;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v5 + 3;
  if (v5 + 3 >= v10)
    goto LABEL_35;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    v5 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_17;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = sub_1D4922E8C();
  __break(1u);
  return result;
}

unint64_t sub_1D48B8CE4()
{
  unint64_t result;

  result = qword_1EFEAC6A8;
  if (!qword_1EFEAC6A8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B4C0, &type metadata for GlyphConfig.ConfigError);
    atomic_store(result, (unint64_t *)&qword_1EFEAC6A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GlyphConfig.ConfigError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D48B8D74 + 4 * byte_1D493B3A5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D48B8DA8 + 4 * byte_1D493B3A0[v4]))();
}

uint64_t sub_1D48B8DA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B8DB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48B8DB8);
  return result;
}

uint64_t sub_1D48B8DC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48B8DCCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D48B8DD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B8DD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GlyphConfig.ConfigError()
{
  return &type metadata for GlyphConfig.ConfigError;
}

ValueMetadata *type metadata accessor for WeakGlyphConfig()
{
  return &type metadata for WeakGlyphConfig;
}

uint64_t initializeWithCopy for GlyphConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GlyphConfig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for GlyphConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for GlyphConfig()
{
  return &type metadata for GlyphConfig;
}

unint64_t sub_1D48B8F1C()
{
  unint64_t result;

  result = qword_1EFEAC6B0;
  if (!qword_1EFEAC6B0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B498, &type metadata for GlyphConfig.ConfigError);
    atomic_store(result, (unint64_t *)&qword_1EFEAC6B0);
  }
  return result;
}

_QWORD *sub_1D48B8F60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D310);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48B90AC();
  sub_1D4922F4C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D0F0);
    sub_1D48B90F0(&qword_1ED98D0F8, &qword_1ED98D0E8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    sub_1D4922D30();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1D48B90AC()
{
  unint64_t result;

  result = qword_1ED98CCE0;
  if (!qword_1ED98CCE0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B71C, &type metadata for WeakGlyphConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CCE0);
  }
  return result;
}

uint64_t sub_1D48B90F0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED98D0F0);
    v10[0] = a3;
    v10[1] = sub_1D48B9170(a2, a3, a4);
    result = MEMORY[0x1D82634E0](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D48B9170(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED98D0E0);
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x1D82634E0](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WeakGlyphConfig.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D48B9210 + 4 * byte_1D493B3AA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D48B9230 + 4 * byte_1D493B3AF[v4]))();
}

_BYTE *sub_1D48B9210(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D48B9230(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D48B9238(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D48B9240(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D48B9248(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D48B9250(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WeakGlyphConfig.CodingKeys()
{
  return &type metadata for WeakGlyphConfig.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for GlyphConfig.Position(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D48B92B8 + 4 * byte_1D493B3B9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D48B92EC + 4 * byte_1D493B3B4[v4]))();
}

uint64_t sub_1D48B92EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B92F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48B92FCLL);
  return result;
}

uint64_t sub_1D48B9308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48B9310);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D48B9314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48B931C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GlyphConfig.Position()
{
  return &type metadata for GlyphConfig.Position;
}

unint64_t sub_1D48B933C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFEAC6D0;
  if (!qword_1EFEAC6D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFEAC6D8);
    result = MEMORY[0x1D82634E0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EFEAC6D0);
  }
  return result;
}

unint64_t sub_1D48B938C()
{
  unint64_t result;

  result = qword_1EFEAC6E0;
  if (!qword_1EFEAC6E0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B63C, &type metadata for GlyphConfig.Position);
    atomic_store(result, (unint64_t *)&qword_1EFEAC6E0);
  }
  return result;
}

unint64_t sub_1D48B93D4()
{
  unint64_t result;

  result = qword_1EFEAC6E8;
  if (!qword_1EFEAC6E8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B6F4, &type metadata for WeakGlyphConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC6E8);
  }
  return result;
}

unint64_t sub_1D48B941C()
{
  unint64_t result;

  result = qword_1ED98CCF0;
  if (!qword_1ED98CCF0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B664, &type metadata for WeakGlyphConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CCF0);
  }
  return result;
}

unint64_t sub_1D48B9464()
{
  unint64_t result;

  result = qword_1ED98CCE8;
  if (!qword_1ED98CCE8)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B68C, &type metadata for WeakGlyphConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98CCE8);
  }
  return result;
}

unint64_t sub_1D48B94A8()
{
  unint64_t result;

  result = qword_1EFEAC6F0;
  if (!qword_1EFEAC6F0)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B5C4, &type metadata for GlyphConfig.Position);
    atomic_store(result, (unint64_t *)&qword_1EFEAC6F0);
  }
  return result;
}

uint64_t sub_1D48B94EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v5 = 0;
  v6 = *(_QWORD *)(result + 16);
  v7 = result + 72;
  v21 = result + 72;
  v22 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  if (v5 <= v6)
    v8 = v6;
  else
    v8 = v5;
  v9 = v8 + 1;
  v10 = (_OWORD *)(v7 + 56 * v5);
  while (1)
  {
    if (v6 == v5)
      return v22;
    v11 = v5++;
    if (v9 == v5)
      break;
    v12 = *((_QWORD *)v10 - 5);
    v13 = *((_QWORD *)v10 - 4);
    v14 = *((_DWORD *)v10 - 6);
    v23 = *v10;
    v24 = *(v10 - 1);
    if (v12 == a2 && v13 == a3)
    {
      v12 = a2;
      v13 = a3;
LABEL_15:
      swift_bridgeObjectRetain();
      v16 = v22;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_1D48AC14C(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v16 = v22;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        result = sub_1D48AC14C(v17 > 1, v18 + 1, 1);
        v19 = v18 + 1;
        v16 = v22;
      }
      v5 = v11 + 1;
      *(_QWORD *)(v16 + 16) = v19;
      v22 = v16;
      v20 = v16 + 56 * v18;
      *(_QWORD *)(v20 + 32) = v12;
      *(_QWORD *)(v20 + 40) = v13;
      *(_DWORD *)(v20 + 48) = v14;
      *(_OWORD *)(v20 + 56) = v24;
      *(_OWORD *)(v20 + 72) = v23;
      v7 = v21;
      goto LABEL_2;
    }
    v10 = (_OWORD *)((char *)v10 + 56);
    result = sub_1D4922E38();
    if ((result & 1) != 0)
      goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48B9680(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(uint64_t *, _QWORD);
  void (*v22)(uint64_t *, _QWORD);
  char *v23;
  void (*v24)(uint64_t *, _QWORD);
  void (*v25)(uint64_t *, _QWORD);
  void (*v26)(uint64_t *, _QWORD);
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD *, _QWORD);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  void (*v36)(uint64_t *, _QWORD);
  void (*v37)(_QWORD *, _QWORD);
  uint64_t v38;
  void (*v39)(uint64_t *, _QWORD);
  void (*v40)(_QWORD *, _QWORD);
  void (*v41)(char *, uint64_t);
  void (*v42)(uint64_t *, _QWORD);
  void (*v43)(_QWORD *, _QWORD);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t *, _QWORD);
  void (*v47)(_QWORD *, _QWORD);
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t *, _QWORD);
  void (*v52)(_QWORD *, _QWORD);
  char v53;
  void (*v54)(uint64_t *, _QWORD);
  void (*v55)(_QWORD *, _QWORD);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[3];
  uint64_t v106;
  unint64_t v107;

  v83 = sub_1D4922370();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v84 = (uint64_t)v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1D4921398();
  MEMORY[0x1E0C80A78](v3);
  v81[1] = (char *)v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1D492153C();
  v89 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v90 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1D49211B8();
  MEMORY[0x1E0C80A78](v6);
  v81[0] = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1D49216A4();
  MEMORY[0x1E0C80A78](v8);
  v88 = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1D4921758();
  v87 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v86 = (char *)v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1D4921950();
  v99 = *(_QWORD *)(v11 - 8);
  v100 = v11;
  MEMORY[0x1E0C80A78](v11);
  v85 = (char *)v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1D4921098();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_1D4921AA0();
  v93 = *(_QWORD *)(v95 - 8);
  v17 = MEMORY[0x1E0C80A78](v95);
  v91 = (char *)v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v98 = (char *)v81 - v19;
  sub_1D4921A94();
  sub_1D4921A34();
  sub_1D4921014();
  v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v16, v13);
  v21 = (void (*)(uint64_t *, _QWORD))sub_1D4921A28();
  sub_1D4921020();
  v21(&v106, 0);
  sub_1D4921A34();
  sub_1D4921044();
  v20(v16, v13);
  v22 = (void (*)(uint64_t *, _QWORD))sub_1D4921A28();
  sub_1D4921050();
  v22(&v106, 0);
  sub_1D4921A34();
  sub_1D492105C();
  v23 = v86;
  v20(v16, v13);
  v24 = (void (*)(uint64_t *, _QWORD))sub_1D4921A28();
  sub_1D4921068();
  v24(&v106, 0);
  sub_1D4921A34();
  sub_1D492102C();
  v20(v16, v13);
  v25 = (void (*)(uint64_t *, _QWORD))sub_1D4921A28();
  sub_1D4921038();
  v25(&v106, 0);
  v97 = a1;
  sub_1D4921A34();
  sub_1D4921074();
  v20(v16, v13);
  v26 = (void (*)(uint64_t *, _QWORD))sub_1D4921A28();
  sub_1D4921080();
  v26(&v106, 0);
  v27 = v85;
  sub_1D4921A58();
  sub_1D4921938();
  v28 = v100;
  v99 = *(_QWORD *)(v99 + 8);
  v29 = v27;
  ((void (*)(char *, uint64_t))v99)(v27, v100);
  sub_1D4921734();
  v87 = *(_QWORD *)(v87 + 8);
  v30 = v96;
  ((void (*)(char *, uint64_t))v87)(v23, v96);
  v31 = sub_1D4921A4C();
  v32 = (void (*)(_QWORD *, _QWORD))sub_1D492192C();
  sub_1D4921740();
  v32(v105, 0);
  ((void (*)(uint64_t *, _QWORD))v31)(&v106, 0);
  sub_1D4921A58();
  sub_1D4921938();
  ((void (*)(char *, uint64_t))v99)(v29, v28);
  sub_1D492171C();
  v33 = v30;
  v34 = (void (*)(char *, uint64_t))v87;
  ((void (*)(char *, uint64_t))v87)(v23, v33);
  v35 = v29;
  v36 = (void (*)(uint64_t *, _QWORD))sub_1D4921A4C();
  v37 = (void (*)(_QWORD *, _QWORD))sub_1D492192C();
  sub_1D4921728();
  v37(v105, 0);
  v36(&v106, 0);
  sub_1D4921A58();
  sub_1D4921938();
  ((void (*)(char *, uint64_t))v99)(v29, v100);
  sub_1D49216B0();
  v38 = v96;
  v34(v23, v96);
  v39 = (void (*)(uint64_t *, _QWORD))sub_1D4921A4C();
  v40 = (void (*)(_QWORD *, _QWORD))sub_1D492192C();
  sub_1D49216BC();
  v40(v105, 0);
  v39(&v106, 0);
  sub_1D4921A58();
  sub_1D4921938();
  ((void (*)(char *, uint64_t))v99)(v29, v100);
  LOBYTE(v31) = sub_1D4921698();
  v41 = v34;
  v34(v23, v38);
  if ((v31 & 1) != 0)
  {
    sub_1D4921A58();
    sub_1D4921938();
    ((void (*)(char *, uint64_t))v99)(v35, v100);
    sub_1D49216C8();
    v34(v23, v96);
    v42 = (void (*)(uint64_t *, _QWORD))sub_1D4921A4C();
    v43 = (void (*)(_QWORD *, _QWORD))sub_1D492192C();
    sub_1D49216D4();
    v43(v105, 0);
    v42(&v106, 0);
  }
  sub_1D4921A58();
  sub_1D4921938();
  v44 = (void (*)(char *, uint64_t))v99;
  v45 = v100;
  ((void (*)(char *, uint64_t))v99)(v35, v100);
  sub_1D49214A0();
  v41(v23, v96);
  v46 = (void (*)(uint64_t *, _QWORD))sub_1D4921A4C();
  v47 = (void (*)(_QWORD *, _QWORD))sub_1D492192C();
  sub_1D492138C();
  v47(v105, 0);
  v46(&v106, 0);
  sub_1D4921A58();
  v48 = v90;
  sub_1D4921914();
  v44(v35, v45);
  sub_1D49214A0();
  v49 = *(void (**)(char *, uint64_t))(v89 + 8);
  v50 = v92;
  v49(v48, v92);
  v51 = (void (*)(uint64_t *, _QWORD))sub_1D4921A4C();
  v52 = (void (*)(_QWORD *, _QWORD))sub_1D4921908();
  sub_1D492138C();
  v52(v105, 0);
  v51(&v106, 0);
  sub_1D4921A58();
  sub_1D4921914();
  ((void (*)(char *, uint64_t))v99)(v35, v100);
  v53 = sub_1D4921500();
  v49(v48, v50);
  if ((v53 & 1) != 0)
  {
    sub_1D4921A58();
    sub_1D4921914();
    ((void (*)(char *, uint64_t))v99)(v35, v100);
    sub_1D4921524();
    v49(v48, v50);
    v54 = (void (*)(uint64_t *, _QWORD))sub_1D4921A4C();
    v55 = (void (*)(_QWORD *, _QWORD))sub_1D4921908();
    sub_1D4921530();
    v55(v105, 0);
    v54(&v106, 0);
  }
  v56 = v93;
  v57 = v91;
  v58 = v98;
  v59 = v95;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v91, v98, v95);
  sub_1D4696EA4(&qword_1EFEAC708, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6FDC0], MEMORY[0x1E0D6FDA0]);
  v60 = v94;
  v62 = sub_1D49221CC();
  if (v60)
  {
    v100 = v61;
    v63 = *(void (**)(char *, uint64_t))(v56 + 8);
    v63(v57, v59);
    v64 = v84;
    sub_1D470C76C(v84);
    v65 = v60;
    v66 = v60;
    v67 = sub_1D4922358();
    v68 = sub_1D492291C();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc();
      v70 = swift_slowAlloc();
      v99 = v62;
      v71 = v70;
      v106 = v70;
      *(_DWORD *)v69 = 136315138;
      swift_getErrorValue();
      v72 = sub_1D4715AA0(v101, v102);
      v105[0] = sub_1D47F0250(v72, v73, &v106);
      sub_1D4922A78();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1D467C000, v67, v68, "UserFeedbackOnDevicePayload.serializedData(): userFeedbackSearchRequest.serializedData, %s", v69, 0xCu);
      swift_arrayDestroy();
      v74 = v71;
      v62 = v99;
      MEMORY[0x1D82635B8](v74, -1, -1);
      v75 = v69;
      v59 = v95;
      MEMORY[0x1D82635B8](v75, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v84, v83);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v64, v83);
    }
    v106 = 0;
    v107 = 0xE000000000000000;
    sub_1D4922B80();
    sub_1D492270C();
    swift_getErrorValue();
    sub_1D4715AA0(v103, v104);
    sub_1D492270C();
    swift_bridgeObjectRelease();
    v77 = v106;
    v78 = v107;
    sub_1D48BAAA0();
    swift_allocError();
    *v79 = v77;
    v79[1] = v78;
    swift_willThrow();

    v63(v98, v59);
  }
  else
  {
    v76 = *(void (**)(char *, uint64_t))(v56 + 8);
    v76(v57, v59);
    v76(v58, v59);
  }
  return v62;
}

uint64_t sub_1D48BA2A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v1 = sub_1D4922370();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D4921D1C();
  sub_1D4696EA4(&qword_1EFEAC6F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D703A0], MEMORY[0x1E0D70110]);
  v6 = sub_1D49221CC();
  if (v0)
  {
    v21 = v1;
    v22 = v5;
    sub_1D470C76C((uint64_t)v4);
    v7 = v0;
    v8 = v0;
    v9 = sub_1D4922358();
    v10 = sub_1D492291C();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v28 = v12;
      v20 = v6;
      *(_DWORD *)v11 = 136315138;
      v19 = v11 + 4;
      swift_getErrorValue();
      v13 = sub_1D4715AA0(v24, v25);
      v23 = sub_1D47F0250(v13, v14, &v28);
      v6 = v20;
      sub_1D4922A78();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1D467C000, v9, v10, "UserFeedbackOnDevicePayload.serializedData(): userFeedbackIntermediateResults.serializedData, %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D82635B8](v12, -1, -1);
      MEMORY[0x1D82635B8](v11, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v21);
    v28 = 0;
    v29 = 0xE000000000000000;
    sub_1D4922B80();
    sub_1D492270C();
    swift_getErrorValue();
    sub_1D4715AA0(v26, v27);
    sub_1D492270C();
    swift_bridgeObjectRelease();
    v15 = v28;
    v16 = v29;
    sub_1D48BAAA0();
    swift_allocError();
    *v17 = v15;
    v17[1] = v16;
    swift_willThrow();

  }
  return v6;
}

uint64_t sub_1D48BA584()
{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  v0 = (void *)sub_1D49225F8();
  v1 = MGCopyAnswer();

  if (v1 && swift_dynamicCast())
    return v3;
  else
    return 0;
}

uint64_t sub_1D48BA618()
{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  v0 = (void *)sub_1D49225F8();
  v1 = MGCopyAnswer();

  if (v1 && swift_dynamicCast())
    return v3;
  else
    return 0;
}

uint64_t sub_1D48BA690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v7 = type metadata accessor for Argos_Protos_Userfeedback_UserFeedbackOnDeviceSignals();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = sub_1D48B9680(a2);
  if (!v3)
  {
    v14 = v12;
    v15 = v13;
    v16 = sub_1D48BA2A8();
    v18 = v17;
    *((_DWORD *)v9 + 8) = 0;
    sub_1D4922010();
    *(_QWORD *)v9 = v14;
    *((_QWORD *)v9 + 1) = v15;
    *((_QWORD *)v9 + 2) = v16;
    *((_QWORD *)v9 + 3) = v18;
    v19 = sub_1D492261C();
    if (v10 == 1)
    {
      sub_1D46A5708(v14, v15);
      v21 = v16;
      v22 = v18;
      v23 = v18;
    }
    else
    {
      v24 = v20;
      v38 = v18;
      v41 = v16;
      if (v11)
      {
        v25 = v19;
        sub_1D46A5708(v14, v15);
        sub_1D46A5708(v41, v38);
        v26 = swift_bridgeObjectRetain();
        v27 = sub_1D48B94EC(v26, v25, v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28 = *(_QWORD *)(v27 + 16);
        if (v28)
        {
          v29 = *(float *)(v27 + 48);
          v30 = v28 - 1;
          if (v28 == 1)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v32 = (float *)(v27 + 104);
            do
            {
              v33 = *v32;
              if (v29 < *v32)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v29 = v33;
              }
              v32 += 14;
              --v30;
            }
            while (v30);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
          }
          *((float *)v9 + 8) = v29;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v31 = v41;
        v22 = v38;
        goto LABEL_18;
      }
      sub_1D46A5708(v14, v15);
      v16 = v41;
      v21 = v41;
      v22 = v38;
      v23 = v38;
    }
    sub_1D46A5708(v21, v23);
    v31 = v16;
    swift_bridgeObjectRelease();
LABEL_18:
    v39 = sub_1D48BA618();
    v40 = v34;
    sub_1D492270C();
    sub_1D48BA618();
    sub_1D492270C();
    swift_bridgeObjectRelease();
    sub_1D492270C();
    sub_1D48BA584();
    sub_1D492270C();
    swift_bridgeObjectRelease();
    sub_1D492270C();
    sub_1D48BA618();
    sub_1D492270C();
    swift_bridgeObjectRelease();
    sub_1D492270C();
    sub_1D48BA618();
    sub_1D492270C();
    swift_bridgeObjectRelease();
    v35 = v40;
    *((_QWORD *)v9 + 5) = v39;
    *((_QWORD *)v9 + 6) = v35;
    sub_1D4696EA4(&qword_1EFEAA708, (uint64_t (*)(uint64_t))type metadata accessor for Argos_Protos_Userfeedback_UserFeedbackOnDeviceSignals, (uint64_t)&unk_1D4928C4C);
    a3 = sub_1D49221CC();
    sub_1D4696F10(v14, v15);
    sub_1D4696F10(v31, v22);
    sub_1D48BAA64((uint64_t)v9);
  }
  return a3;
}

uint64_t sub_1D48BAA64(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Argos_Protos_Userfeedback_UserFeedbackOnDeviceSignals();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D48BAAA0()
{
  unint64_t result;

  result = qword_1EFEAC700;
  if (!qword_1EFEAC700)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B784, &type metadata for SerializationError);
    atomic_store(result, (unint64_t *)&qword_1EFEAC700);
  }
  return result;
}

ValueMetadata *type metadata accessor for SerializationError()
{
  return &type metadata for SerializationError;
}

uint64_t sub_1D48BAAF4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1D4782070(v0 + OBJC_IVAR____TtC18VisualIntelligence19DomainModelRegistry_domainModelConfig);
  return swift_deallocClassInstance();
}

uint64_t sub_1D48BAB2C()
{
  return type metadata accessor for DomainModelRegistry();
}

uint64_t type metadata accessor for DomainModelRegistry()
{
  uint64_t result;

  result = qword_1ED98D5E8;
  if (!qword_1ED98D5E8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D48BAB70()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Argos_Protos_Queryflow_DomainModelMappingConfig(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

char *sub_1D48BABEC@<X0>(char **a1@<X8>)
{
  uint64_t v1;
  char *result;

  result = sub_1D48BCA24();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_1D48BAC14@<X0>(uint64_t a1@<X8>)
{
  return sub_1D48BAC28(a1);
}

uint64_t sub_1D48BAC28@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;

  v38[2] = a1;
  v2 = sub_1D4922370();
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v39 = (uint64_t)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v38[0] = (uint64_t)v38 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v38 - v7;
  v9 = sub_1D492204C();
  MEMORY[0x1E0C80A78](v9);
  v38[1] = (uint64_t)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1D4920F18();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1D48BEE58(16, 0, 25200, 0xE200000000000000);
  v17 = v16;
  sub_1D4920EA0();
  v18 = sub_1D4920F24();
  if (v1)
  {
    v20 = v15;

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v21 = v39;
    sub_1D470C76C(v39);
    swift_bridgeObjectRetain();
    v22 = sub_1D4922358();
    v23 = sub_1D492291C();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      *(_QWORD *)&v42[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain();
      v44 = sub_1D47F0250(v20, v17, (uint64_t *)v42);
      sub_1D4922A78();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D467C000, v22, v23, "Failed to load storefront geofence config at path %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D82635B8](v25, -1, -1);
      MEMORY[0x1D82635B8](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v21, v41);
    sub_1D48BC904();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    v26 = v18;
    v27 = v19;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
    v43 = 0;
    memset(v42, 0, sizeof(v42));
    sub_1D46A5708(v26, v27);
    sub_1D4922040();
    sub_1D4696EA4(&qword_1ED98E6B0, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule, (uint64_t)&unk_1D4937F04);
    sub_1D49221C0();
    v28 = v27;
    v29 = v26;
    v31 = v8;
    sub_1D470C76C((uint64_t)v8);
    v32 = v38[0];
    sub_1D470C928(v38[0]);
    v33 = v41;
    v34 = *(void (**)(char *, uint64_t))(v40 + 8);
    v34(v31, v41);
    v35 = sub_1D4922358();
    v36 = sub_1D4922910();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1D467C000, v35, v36, "Loaded countries", v37, 2u);
      MEMORY[0x1D82635B8](v37, -1, -1);

      sub_1D4696F10(v29, v28);
    }
    else
    {
      sub_1D4696F10(v29, v28);

    }
    return ((uint64_t (*)(uint64_t, uint64_t))v34)(v32, v33);
  }
}

uint64_t *sub_1D48BB09C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void (*v65)(_QWORD, _QWORD, _QWORD);
  void (*v66)(char *, uint64_t);
  double *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  uint64_t v78;
  CGFloat MinX;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  CGFloat MinY;
  CGFloat Width;
  CGFloat Height;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  unsigned int v90;
  int v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t *v110;
  void *v111;
  void *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  void (*v116)(char *, uint64_t);
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  NSObject *v147;
  os_log_type_t v148;
  uint8_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double *v160;
  char *v161;
  id v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t);
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  double *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174[20];
  uint64_t v175[21];
  CGRect v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;

  v5 = v4;
  v162 = a2;
  v158 = a4;
  v8 = type metadata accessor for VisualUnderstanding.ImageRegion();
  MEMORY[0x1E0C80A78](v8);
  v170 = (double *)((char *)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v163 = type metadata accessor for GeoFenceDomainAssignmentRule();
  MEMORY[0x1E0C80A78](v163);
  v164 = (void (*)(char *, uint64_t))((char *)&v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_1D4922664();
  v166 = *(_QWORD *)(v11 - 8);
  v167 = v11;
  MEMORY[0x1E0C80A78](v11);
  v165 = (char *)&v150 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1D4922370();
  v172 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v161 = (char *)&v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v150 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v150 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v160 = (double *)((char *)&v150 - v23);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v150 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v171 = (uint64_t *)((char *)&v150 - v28);
  v29 = MEMORY[0x1E0C80A78](v27);
  v157 = (uint64_t)&v150 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v154 = (uint64_t)&v150 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v153 = (uint64_t)&v150 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v152 = (uint64_t)&v150 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v169 = (char *)&v150 - v38;
  MEMORY[0x1E0C80A78](v37);
  v168 = (char *)&v150 - v39;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CD70);
  MEMORY[0x1E0C80A78](v40);
  v42 = (char *)&v150 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D46A4760(a1, (uint64_t)v175);
  if (*(_BYTE *)(v4 + 16) == 1)
  {
    v159 = v13;
    sub_1D46A4760((uint64_t)v175, (uint64_t)v174);
    if (sub_1D46A47A8((uint64_t)v174) == 1)
    {
LABEL_3:
      sub_1D470C76C((uint64_t)v21);
      sub_1D470C928((uint64_t)v18);
      v43 = *(void (**)(char *, uint64_t))(v172 + 8);
      v44 = v21;
      v45 = v159;
      v43(v44, v159);
      v46 = sub_1D4922358();
      v47 = sub_1D4922910();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_1D467C000, v46, v47, "Skip GeoFenceDomainAssignmentRule due to no prerequisite domain", v48, 2u);
        MEMORY[0x1D82635B8](v48, -1, -1);
      }

      v43(v18, v45);
      goto LABEL_64;
    }
    v49 = v174[0];
    v50 = sub_1D46F8BC8(*(_BYTE *)(v4 + *(int *)(v163 + 20)));
    v52 = v51;
    if (v50 == sub_1D46F8BC8(v49) && v52 == v53)
    {
      swift_bridgeObjectRelease_n();
      v13 = v159;
      v5 = v4;
    }
    else
    {
      v54 = sub_1D4922E38();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v54 & 1) == 0)
        goto LABEL_3;
      v5 = v4;
      v13 = v159;
    }
  }
  v55 = type metadata accessor for DomainAssignmentSignals(0);
  sub_1D469C5EC(a3 + *(int *)(v55 + 24), (uint64_t)v42, &qword_1ED98CD70);
  v56 = type metadata accessor for DomainAssignmentSignals.ImageMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v42, 1, v56) == 1)
  {
    sub_1D46992EC((uint64_t)v42, &qword_1ED98CD70);
LABEL_17:
    if (*(_BYTE *)v5 == 1)
    {
      v65 = (void (*)(_QWORD, _QWORD, _QWORD))v171;
      sub_1D470C76C((uint64_t)v171);
      v66 = v164;
      sub_1D469C304(v5, (uint64_t)v164, (uint64_t (*)(_QWORD))type metadata accessor for GeoFenceDomainAssignmentRule);
      v67 = v170;
      sub_1D469C304((uint64_t)v162, (uint64_t)v170, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      v68 = sub_1D4922358();
      v69 = sub_1D4922910();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = swift_slowAlloc();
        v71 = swift_slowAlloc();
        v174[0] = v71;
        *(_DWORD *)v70 = 136315394;
        v72 = sub_1D46F8BC8(*((_BYTE *)v66 + *(int *)(v163 + 20)));
        v159 = v13;
        v173 = sub_1D47F0250(v72, v73, v174);
        sub_1D4922A78();
        swift_bridgeObjectRelease();
        sub_1D4697DE0((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for GeoFenceDomainAssignmentRule);
        *(_WORD *)(v70 + 12) = 2080;
        v169 = (char *)(v70 + 14);
        v74 = *v67;
        v75 = v67[1];
        v76 = v67[2];
        v77 = v67[3];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D408);
        v78 = swift_allocObject();
        *(_OWORD *)(v78 + 16) = xmmword_1D4927560;
        v176.origin.x = v74;
        v176.origin.y = v75;
        v176.size.width = v76;
        v176.size.height = v77;
        MinX = CGRectGetMinX(v176);
        v80 = (uint64_t)v67;
        v81 = MEMORY[0x1E0DEF040];
        *(_QWORD *)(v78 + 56) = MEMORY[0x1E0DEF040];
        v82 = sub_1D46A492C();
        *(_QWORD *)(v78 + 64) = v82;
        *(CGFloat *)(v78 + 32) = MinX;
        v177.origin.x = v74;
        v177.origin.y = v75;
        v177.size.width = v76;
        v177.size.height = v77;
        MinY = CGRectGetMinY(v177);
        *(_QWORD *)(v78 + 96) = v81;
        *(_QWORD *)(v78 + 104) = v82;
        *(CGFloat *)(v78 + 72) = MinY;
        v178.origin.x = v74;
        v178.origin.y = v75;
        v178.size.width = v76;
        v178.size.height = v77;
        Width = CGRectGetWidth(v178);
        *(_QWORD *)(v78 + 136) = v81;
        *(_QWORD *)(v78 + 144) = v82;
        *(CGFloat *)(v78 + 112) = Width;
        v179.origin.x = v74;
        v179.origin.y = v75;
        v179.size.width = v76;
        v179.size.height = v77;
        Height = CGRectGetHeight(v179);
        *(_QWORD *)(v78 + 176) = v81;
        *(_QWORD *)(v78 + 184) = v82;
        *(CGFloat *)(v78 + 152) = Height;
        v86 = sub_1D4922640();
        v173 = sub_1D47F0250(v86, v87, v174);
        sub_1D4922A78();
        swift_bridgeObjectRelease();
        sub_1D4697DE0(v80, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
        _os_log_impl(&dword_1D467C000, v68, v69, "Missing location signals: Reject %s for region %s", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D82635B8](v71, -1, -1);
        MEMORY[0x1D82635B8](v70, -1, -1);

        (*(void (**)(_QWORD *, uint64_t))(v172 + 8))(v171, v159);
      }
      else
      {
        sub_1D4697DE0((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for GeoFenceDomainAssignmentRule);
        sub_1D4697DE0((uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);

        (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v172 + 8))(v65, v13);
      }
      goto LABEL_75;
    }
    sub_1D470C76C((uint64_t)v26);
    v130 = (uint64_t)v160;
    sub_1D470C928((uint64_t)v160);
    v131 = *(void (**)(char *, uint64_t))(v172 + 8);
    v131(v26, v13);
    v132 = sub_1D4922358();
    v133 = sub_1D4922910();
    if (os_log_type_enabled(v132, v133))
    {
      v134 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v134 = 0;
      _os_log_impl(&dword_1D467C000, v132, v133, "Missing location signals", v134, 2u);
      MEMORY[0x1D82635B8](v134, -1, -1);
    }

    v131((char *)v130, v13);
    goto LABEL_64;
  }
  v57 = *(void **)&v42[*(int *)(v56 + 24)];
  v58 = v57;
  sub_1D4697DE0((uint64_t)v42, type metadata accessor for DomainAssignmentSignals.ImageMetadata);
  if (!v57)
    goto LABEL_17;
  v59 = *(_QWORD *)(v5 + 8);
  v160 = *(double **)(v59 + 16);
  if (v160)
  {
    v162 = v58;
    v155 = v5;
    v60 = qword_1ED98F398;
    swift_bridgeObjectRetain();
    if (v60 != -1)
LABEL_80:
      swift_once();
    v62 = 0;
    v157 = (uint64_t)"neric";
    v151 = 0x80000001D493F830;
    *(_QWORD *)&v61 = 67109120;
    v156 = v61;
    v64 = v168;
    v63 = v169;
    v159 = v59;
    while (1)
    {
      if (__OFADD__(v62, 1))
      {
        __break(1u);
        goto LABEL_80;
      }
      v170 = (double *)(v62 + 1);
      v91 = *(_DWORD *)(v59 + 4 * v62 + 32);
      if (byte_1ED98F388 != 1)
        goto LABEL_38;
      v92 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
      v93 = objc_msgSend(v92, sel_bundleIdentifier);

      if (v93)
      {
        v94 = sub_1D492261C();
        v96 = v95;

        if (v94 == 0xD00000000000002BLL && v96 == v151)
        {
          swift_bridgeObjectRelease();
LABEL_30:
          v98 = &qword_1EFEAA908;
          if (qword_1EFEA9C20 != -1)
          {
            swift_once();
            v98 = &qword_1EFEAA908;
          }
          goto LABEL_34;
        }
        v97 = sub_1D4922E38();
        swift_bridgeObjectRelease();
        if ((v97 & 1) != 0)
          goto LABEL_30;
      }
      v98 = (uint64_t *)&off_1ED98F3F0;
      if (qword_1ED98F3A8 != -1)
      {
        swift_once();
        v98 = (uint64_t *)&off_1ED98F3F0;
      }
LABEL_34:
      v99 = *(void **)(*v98 + 32);
      swift_retain();
      v100 = (void *)sub_1D49225F8();
      LODWORD(v99) = objc_msgSend(v99, sel_BOOLForKey_, v100);
      swift_release();

      if ((_DWORD)v99)
      {
        if (qword_1EFEA9C78 != -1)
          swift_once();
        v101 = v13;
        v102 = qword_1EFEAAA30;
        goto LABEL_41;
      }
LABEL_38:
      if (qword_1ED98F3D0 != -1)
        swift_once();
      v101 = v13;
      v102 = qword_1ED98F3B0;
LABEL_41:
      v103 = __swift_project_value_buffer(v101, (uint64_t)v102);
      v171 = *(_QWORD **)(v172 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v171)(v64, v103, v13);
      if ((byte_1ED98F388 & 1) == 0)
        goto LABEL_53;
      v104 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
      v105 = objc_msgSend(v104, sel_bundleIdentifier);

      if (v105)
      {
        v106 = sub_1D492261C();
        v108 = v107;

        if (v106 == 0xD00000000000002BLL && v108 == (v157 | 0x8000000000000000))
        {
          swift_bridgeObjectRelease();
LABEL_47:
          v110 = &qword_1EFEAA908;
          if (qword_1EFEA9C20 != -1)
          {
            swift_once();
            v110 = &qword_1EFEAA908;
          }
          goto LABEL_51;
        }
        v109 = sub_1D4922E38();
        swift_bridgeObjectRelease();
        if ((v109 & 1) != 0)
          goto LABEL_47;
      }
      v110 = (uint64_t *)&off_1ED98F3F0;
      if (qword_1ED98F3A8 != -1)
      {
        swift_once();
        v110 = (uint64_t *)&off_1ED98F3F0;
      }
LABEL_51:
      v111 = *(void **)(*v110 + 32);
      swift_retain();
      v112 = (void *)sub_1D49225F8();
      LODWORD(v111) = objc_msgSend(v111, sel_BOOLForKey_, v112);
      swift_release();

      if ((_DWORD)v111)
      {
        v113 = v63;
        v114 = (uint64_t)v64;
        goto LABEL_56;
      }
LABEL_53:
      if (qword_1ED98F3D0 != -1)
        swift_once();
      v114 = __swift_project_value_buffer(v13, (uint64_t)qword_1ED98F3B0);
      v113 = v63;
LABEL_56:
      ((void (*)(char *, uint64_t, uint64_t))v171)(v113, v114, v13);
      v115 = v64;
      v116 = *(void (**)(char *, uint64_t))(v172 + 8);
      v116(v115, v13);
      v117 = sub_1D4922358();
      v118 = sub_1D4922910();
      if (os_log_type_enabled(v117, v118))
      {
        v119 = swift_slowAlloc();
        *(_DWORD *)v119 = v156;
        *(_DWORD *)(v119 + 4) = v91;
        _os_log_impl(&dword_1D467C000, v117, v118, "Check for cell level %d", (uint8_t *)v119, 8u);
        MEMORY[0x1D82635B8](v119, -1, -1);
      }

      v120 = v63;
      v121 = v13;
      v116(v120, v13);
      v122 = sub_1D471AF64(v91);
      if ((v123 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v136 = v154;
        sub_1D470C76C(v154);
        v137 = sub_1D4922358();
        v138 = sub_1D4922910();
        if (os_log_type_enabled(v137, v138))
        {
          v139 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v139 = 0;
          _os_log_impl(&dword_1D467C000, v137, v138, "Failed to find s2 cell id for the location. Region any domains.", v139, 2u);
          MEMORY[0x1D82635B8](v139, -1, -1);
        }

        v116((char *)v136, v13);
        goto LABEL_75;
      }
      v124 = v122;
      v164 = v116;
      v174[0] = v122;
      sub_1D4922E14();
      v125 = v165;
      sub_1D492264C();
      v126 = sub_1D4922628();
      v128 = v127;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v166 + 8))(v125, v167);
      if (v128 >> 60 != 15)
      {
        sub_1D48C53F0();
        v88 = v129;
        v89 = (void *)sub_1D4920F60();
        v90 = objc_msgSend(v88, sel_containsItem_, v89);

        if (v90)
        {
          swift_bridgeObjectRelease();
          v144 = v152;
          sub_1D470C76C(v152);
          v145 = v153;
          sub_1D470C928(v153);
          v146 = (void (*)(uint64_t, uint64_t))v164;
          v164((char *)v144, v121);
          v147 = sub_1D4922358();
          v148 = sub_1D4922910();
          if (os_log_type_enabled(v147, v148))
          {
            v149 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v149 = 134217984;
            v146 = (void (*)(uint64_t, uint64_t))v164;
            v174[0] = v124;
            sub_1D4922A78();
            _os_log_impl(&dword_1D467C000, v147, v148, "Contains cellID %llu.", v149, 0xCu);
            MEMORY[0x1D82635B8](v149, -1, -1);
          }
          sub_1D46AA1F0(v126, v128);

          v146(v145, v121);
          goto LABEL_64;
        }
        sub_1D46AA1F0(v126, v128);
      }
      v13 = v121;
      v64 = v168;
      v63 = v169;
      v59 = v159;
      ++v62;
      if (v170 == v160)
      {

        swift_bridgeObjectRelease();
        goto LABEL_75;
      }
    }
  }
  if ((sub_1D48BC464(v58) & 1) != 0)
  {

LABEL_64:
    sub_1D46A4760((uint64_t)v175, v158);
    return sub_1D470F8E4(v175);
  }
  v140 = v157;
  sub_1D470C76C(v157);
  v141 = sub_1D4922358();
  v142 = sub_1D4922910();
  if (os_log_type_enabled(v141, v142))
  {
    v143 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v143 = 0;
    _os_log_impl(&dword_1D467C000, v141, v142, "Image location is not within desired country polygons. Reject any domains.", v143, 2u);
    MEMORY[0x1D82635B8](v143, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v140, v13);
LABEL_75:
  sub_1D46C6BD0((uint64_t)v174);
  return (uint64_t *)sub_1D46A4760((uint64_t)v174, v158);
}

uint64_t sub_1D48BC464(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  _QWORD v37[2];
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v40 = sub_1D4922370();
  v37[1] = *(_QWORD *)(v40 - 8);
  v2 = MEMORY[0x1E0C80A78](v40);
  v39 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v4 = type metadata accessor for Argos_Protos_Queryflow_Polygon(0);
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E698);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[0] = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig(0);
  v10 = *(_QWORD *)(v37[0] - 8);
  MEMORY[0x1E0C80A78](v37[0]);
  v12 = (_QWORD *)((char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GeoFenceDomainAssignmentRule();
  sub_1D48C5048((uint64_t)v15);
  sub_1D469C5EC((uint64_t)&v15[*(int *)(v13 + 40)], (uint64_t)v9, &qword_1ED98E698);
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD))(v10 + 48))(v9, 1, v37[0]) == 1)
  {
    *v12 = MEMORY[0x1E0DEE9D8];
    sub_1D4922010();
    sub_1D46992EC((uint64_t)v9, &qword_1ED98E698);
  }
  else
  {
    sub_1D48BDFF4((uint64_t)v9, (uint64_t)v12);
  }
  sub_1D4697DE0((uint64_t)v15, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule);
  v16 = *v12;
  swift_bridgeObjectRetain();
  result = sub_1D4697DE0((uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig);
  v40 = *(_QWORD *)(v16 + 16);
  if (v40)
  {
    v18 = 0;
    v19 = v38;
    v39 = (char *)(v16 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)));
    while (1)
    {
      if (v18 >= *(_QWORD *)(v16 + 16))
      {
LABEL_25:
        __break(1u);
        return result;
      }
      sub_1D469C304((uint64_t)&v39[*(_QWORD *)(v19 + 72) * v18], (uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_Polygon);
      v21 = *(_QWORD *)v6;
      v22 = *(_QWORD *)(*(_QWORD *)v6 + 16);
      if (v22)
        break;
      result = sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_Polygon);
LABEL_7:
      if (++v18 == v40)
        goto LABEL_20;
    }
    v23 = 0;
    v24 = 0;
    v25 = v21 + 32;
    do
    {
      objc_msgSend(a1, sel_coordinate);
      v27 = v26;
      result = (uint64_t)objc_msgSend(a1, sel_coordinate);
      v29 = *(_QWORD *)(v21 + 16);
      if (v24 + 1 >= v29)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v30 = v24 + 2;
      v31 = (v24 + 2) % v22;
      if (v31 + 1 >= v29)
        goto LABEL_23;
      v32 = v28;
      v33 = *(float *)(v21 + 4 * v24 + 36);
      v34 = *(float *)(v25 + 4 * (v31 + 1));
      if (v33 <= v32 == v34 > v32)
      {
        v35 = v27;
        if ((float)(*(float *)(v21 + 4 * v24 + 32)
                   + (float)((float)((float)(v32 - v33)
                                   * (float)(*(float *)(v25 + 4 * v31) - *(float *)(v21 + 4 * v24 + 32)))
                           / (float)(v34 - v33))) > v35
          && __OFADD__(v23++, 1))
        {
          goto LABEL_24;
        }
      }
      v24 += 2;
    }
    while (v30 < v22);
    result = sub_1D4697DE0((uint64_t)v6, type metadata accessor for Argos_Protos_Queryflow_Polygon);
    v20 = (v23 & 0x8000000000000001) == 1;
    v19 = v38;
    if (!v20)
      goto LABEL_7;
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
}

unint64_t sub_1D48BC904()
{
  unint64_t result;

  result = qword_1EFEAC710;
  if (!qword_1EFEAC710)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B8F8, &type metadata for GeoFenceDomainAssignmentRule.GeoFenceDomainAssignmentRuleError);
    atomic_store(result, (unint64_t *)&qword_1EFEAC710);
  }
  return result;
}

id sub_1D48BC948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v9 = (void *)sub_1D4920F60();
  v14[0] = 0;
  v10 = objc_msgSend(v5, sel_initWithData_numberOfHashes_numberOfBits_seed_error_, v9, a3, a4, a5, v14);

  if (v10)
  {
    v11 = v14[0];
  }
  else
  {
    v12 = v14[0];
    sub_1D4920E64();

    swift_willThrow();
  }
  return v10;
}

char *sub_1D48BCA24()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;

  v1 = sub_1D4922370();
  v44 = *(_QWORD *)(v1 - 8);
  v45 = v1;
  v2 = MEMORY[0x1E0C80A78](v1);
  v46 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v41 - v5;
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v41 - v7;
  v9 = sub_1D492204C();
  MEMORY[0x1E0C80A78](v9);
  v43 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig(0);
  MEMORY[0x1E0C80A78](v42);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1D4920F18();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1D48BEE58(15, 0, 25200, 0xE200000000000000);
  v19 = v18;
  v41 = v17;
  sub_1D4920EA0();
  v20 = sub_1D4920F24();
  if (v0)
  {

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    sub_1D470C76C((uint64_t)v46);
    swift_bridgeObjectRetain();
    v22 = sub_1D4922358();
    v23 = sub_1D492291C();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      *(_QWORD *)&v47[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain();
      v49 = sub_1D47F0250(v41, v19, (uint64_t *)v47);
      sub_1D4922A78();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D467C000, v22, v23, "Failed to load geofence config at path %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D82635B8](v25, -1, -1);
      MEMORY[0x1D82635B8](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v45);
    sub_1D48BC904();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    v26 = v21;
    v46 = v6;
    v27 = v20;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v48 = 0;
    memset(v47, 0, sizeof(v47));
    sub_1D46A5708(v27, v26);
    sub_1D4922040();
    sub_1D4696EA4(&qword_1ED98E648, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig, (uint64_t)&unk_1D4937D9C);
    v28 = v26;
    sub_1D49221C0();
    v43 = v27;
    v30 = v8;
    sub_1D470C76C((uint64_t)v8);
    v31 = (uint64_t)v46;
    sub_1D470C928((uint64_t)v46);
    v32 = v45;
    v33 = *(void (**)(char *, uint64_t))(v44 + 8);
    v33(v30, v45);
    v34 = sub_1D4922358();
    v35 = sub_1D4922910();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1D467C000, v34, v35, "Created bloom filter", v36, 2u);
      MEMORY[0x1D82635B8](v36, -1, -1);
    }

    v33((char *)v31, v32);
    v37 = *(_QWORD *)v12;
    v38 = *((_QWORD *)v12 + 1);
    v39 = *((unsigned int *)v12 + 4);
    v40 = *((unsigned int *)v12 + 6);
    objc_allocWithZone((Class)VIBloomFilter);
    sub_1D46A5708(v37, v38);
    v6 = (char *)sub_1D48BC948(v37, v38, v39, v40, v40);
    sub_1D4696F10(v37, v38);
    sub_1D4697DE0((uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig);
    sub_1D4696F10(v43, v28);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GeoFenceDomainAssignmentRule.GeoFenceDomainAssignmentRuleError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D48BCF58 + 4 * asc_1D493B800[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D48BCF78 + 4 * byte_1D493B805[v4]))();
}

_BYTE *sub_1D48BCF58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D48BCF78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D48BCF80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D48BCF88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D48BCF90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D48BCF98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GeoFenceDomainAssignmentRule.GeoFenceDomainAssignmentRuleError()
{
  return &type metadata for GeoFenceDomainAssignmentRule.GeoFenceDomainAssignmentRuleError;
}

uint64_t sub_1D48BCFB4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v19 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = (int *)type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
    v8 = v7[8];
    v9 = v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = sub_1D492201C();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = v7[9];
    v14 = (_QWORD *)(v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E668);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v36 = v12;
      v37 = v11;
      v20 = *v15;
      v21 = v15[1];
      sub_1D46A5708(*v15, v21);
      *v14 = v20;
      v14[1] = v21;
      v12 = v36;
      v11 = v37;
      v14[2] = v15[2];
      *((_DWORD *)v14 + 6) = *((_DWORD *)v15 + 6);
      v36((uint64_t)v14 + *(int *)(v16 + 32), (uint64_t)v15 + *(int *)(v16 + 32), v37);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v22 = v7[10];
    v23 = (_QWORD *)(v4 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E698);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      *v23 = *v24;
      v28 = *(int *)(v25 + 20);
      v29 = (char *)v23 + v28;
      v30 = (char *)v24 + v28;
      swift_bridgeObjectRetain();
      v12((uint64_t)v29, (uint64_t)v30, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v31 = a3[6];
    *(_BYTE *)(v4 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v32 = v4 + v31;
    v33 = (uint64_t)a2 + v31;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
    v34 = a3[8];
    *(_QWORD *)(v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(_QWORD *)(v4 + v34) = *(uint64_t *)((char *)a2 + v34);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1D48BD21C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  v3 = a1 + v2[8];
  v4 = sub_1D492201C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = a1 + v2[9];
  v7 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_1D4696F10(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    v5(v6 + *(int *)(v7 + 32), v4);
  }
  v8 = a1 + v2[10];
  v9 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    v5(v8 + *(int *)(v9 + 20), v4);
  }
  swift_release();
  return swift_release();
}

uint64_t sub_1D48BD334(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  int *v35;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (int *)type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  v7 = v6[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1D492201C();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = v6[9];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E668);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v34 = v11;
    v35 = a3;
    v18 = *v14;
    v19 = v14[1];
    sub_1D46A5708(*v14, v19);
    *v13 = v18;
    v13[1] = v19;
    v11 = v34;
    a3 = v35;
    v13[2] = v14[2];
    *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
    v34((uint64_t)v13 + *(int *)(v15 + 32), (uint64_t)v14 + *(int *)(v15 + 32), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v20 = v6[10];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E698);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v21 = *v22;
    v26 = *(int *)(v23 + 20);
    v27 = (char *)v21 + v26;
    v28 = (char *)v22 + v26;
    swift_bridgeObjectRetain();
    v11((uint64_t)v27, (uint64_t)v28, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v29 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  v32 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1D48BD574(uint64_t a1, uint64_t a2, int *a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (int *)type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  v6 = v5[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1D492201C();
  v44 = *(_QWORD *)(v9 - 8);
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 24);
  v43(v7, v8, v9);
  v10 = v5[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      v18 = *(_QWORD *)v12;
      v19 = *(_QWORD *)(v12 + 8);
      sub_1D46A5708(*(_QWORD *)v12, v19);
      *(_QWORD *)v11 = v18;
      *(_QWORD *)(v11 + 8) = v19;
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(v12 + 16);
      *(_DWORD *)(v11 + 20) = *(_DWORD *)(v12 + 20);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v11 + *(int *)(v13 + 32), v12 + *(int *)(v13 + 32), v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_1D4697DE0(v11, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E668);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v39 = *(_QWORD *)v12;
  v40 = *(_QWORD *)(v12 + 8);
  sub_1D46A5708(*(_QWORD *)v12, v40);
  v41 = *(_QWORD *)v11;
  v42 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)v11 = v39;
  *(_QWORD *)(v11 + 8) = v40;
  sub_1D4696F10(v41, v42);
  *(_DWORD *)(v11 + 16) = *(_DWORD *)(v12 + 16);
  *(_DWORD *)(v11 + 20) = *(_DWORD *)(v12 + 20);
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
  v43(v11 + *(int *)(v13 + 32), v12 + *(int *)(v13 + 32), v9);
LABEL_7:
  v21 = v5[10];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      *v22 = *v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v43((uint64_t)v22 + *(int *)(v24 + 20), (uint64_t)v23 + *(int *)(v24 + 20), v9);
      goto LABEL_13;
    }
    sub_1D4697DE0((uint64_t)v22, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E698);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  *v22 = *v23;
  v29 = *(int *)(v24 + 20);
  v30 = (char *)v22 + v29;
  v31 = (char *)v23 + v29;
  v32 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  swift_bridgeObjectRetain();
  v32(v30, v31, v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_13:
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v34 = a3[6];
  v35 = a1 + v34;
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  *(_BYTE *)(v35 + 8) = *((_BYTE *)v36 + 8);
  *(_QWORD *)v35 = v37;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1D48BD8D0(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (int *)type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  v7 = v6[8];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = sub_1D492201C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = v6[9];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E668);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
    v11((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = v6[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E698);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v19 = *v20;
    v11((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  return a1;
}

uint64_t sub_1D48BDAD4(uint64_t a1, uint64_t a2, int *a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (int *)type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  v6 = v5[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1D492201C();
  v35 = *(_QWORD *)(v9 - 8);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40);
  v34(v7, v8, v9);
  v10 = v5[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v11 + *(int *)(v13 + 32), v12 + *(int *)(v13 + 32), v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_1D4697DE0(v11, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCellConfig);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E668);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v32 = *(_QWORD *)v11;
  v33 = *(_QWORD *)(v11 + 8);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  sub_1D4696F10(v32, v33);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
  v34(v11 + *(int *)(v13 + 32), v12 + *(int *)(v13 + 32), v9);
LABEL_7:
  v19 = v5[10];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      swift_bridgeObjectRelease();
      v34((uint64_t)v20 + *(int *)(v22 + 20), (uint64_t)v21 + *(int *)(v22 + 20), v9);
      goto LABEL_13;
    }
    sub_1D4697DE0((uint64_t)v20, type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E698);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  *v20 = *v21;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  v28 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_release();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t sub_1D48BDDD8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D48BDDE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1D48BDE60()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D48BDE6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for GeoFenceDomainAssignmentRule()
{
  uint64_t result;

  result = qword_1ED98DCB0;
  if (!qword_1ED98DCB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D48BDF20()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1D48BDFB0()
{
  unint64_t result;

  result = qword_1EFEAC718;
  if (!qword_1EFEAC718)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493B8D0, &type metadata for GeoFenceDomainAssignmentRule.GeoFenceDomainAssignmentRuleError);
    atomic_store(result, (unint64_t *)&qword_1EFEAC718);
  }
  return result;
}

uint64_t sub_1D48BDFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule.GeoFenceCountryConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1D48BE038(char a1)
{
  sub_1D4922EF8();
  __asm { BR              X10 }
}

uint64_t sub_1D48BE090()
{
  sub_1D49226D0();
  swift_bridgeObjectRelease();
  return sub_1D4922F34();
}

void sub_1D48BE108(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1D48BE14C()
{
  sub_1D49226D0();
  return swift_bridgeObjectRelease();
}

void sub_1D48BE1A8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1D48BE1F4()
{
  sub_1D49226D0();
  return swift_bridgeObjectRelease();
}

void sub_1D48BE2A0(uint64_t a1, char a2)
{
  sub_1D4922EF8();
  __asm { BR              X10 }
}

uint64_t sub_1D48BE2F4()
{
  sub_1D49226D0();
  swift_bridgeObjectRelease();
  return sub_1D4922F34();
}

void sub_1D48BE36C(uint64_t a1, char a2)
{
  sub_1D4922EF8();
  __asm { BR              X10 }
}

uint64_t sub_1D48BE3C4()
{
  sub_1D49226D0();
  swift_bridgeObjectRelease();
  return sub_1D4922F34();
}

uint64_t sub_1D48BE484(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D48BE4BC + 4 * byte_1D493B96D[a1]))(0xD000000000000017, 0x80000001D493EDA0);
}

uint64_t sub_1D48BE4BC(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_1D48BE504(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D48BE540 + 4 * word_1D493B972[a1]))(0xD000000000000013, 0x80000001D493EF90);
}

uint64_t sub_1D48BE540()
{
  uint64_t v0;

  return v0 - 1;
}

void sub_1D48BE9D0(char *a1)
{
  sub_1D489AFF0(*a1);
}

void sub_1D48BE9DC()
{
  char *v0;

  sub_1D48BE038(*v0);
}

void sub_1D48BE9E4(uint64_t a1)
{
  char *v1;

  sub_1D48BE108(a1, *v1);
}

void sub_1D48BE9EC(uint64_t a1)
{
  char *v1;

  sub_1D48BE2A0(a1, *v1);
}

uint64_t sub_1D48BE9F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D48C318C();
  *a1 = result;
  return result;
}

uint64_t sub_1D48BEA20@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1D48BE484(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1D48BEA48(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1D48BE504(*a1);
  v5 = v4;
  if (v3 == sub_1D48BE504(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1D4922E38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1D48BEAD0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1D4922EF8();
  sub_1D48BE504(v1);
  sub_1D49226D0();
  swift_bridgeObjectRelease();
  return sub_1D4922F34();
}

uint64_t sub_1D48BEB30()
{
  unsigned __int8 *v0;

  sub_1D48BE504(*v0);
  sub_1D49226D0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D48BEB70()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1D4922EF8();
  sub_1D48BE504(v1);
  sub_1D49226D0();
  swift_bridgeObjectRelease();
  return sub_1D4922F34();
}

uint64_t sub_1D48BEBCC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D48C32B8();
  *a1 = result;
  return result;
}

uint64_t sub_1D48BEBF8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1D48BE504(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1D48BEC20()
{
  uint64_t v0;

  sub_1D47C3290((uint64_t)&unk_1E97FBFB8);
  qword_1EFEC3438 = v0;
}

uint64_t sub_1D48BEC44(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v2 = a1 & 1;
  sub_1D4922934();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78]();
  sub_1D4922484();
  MEMORY[0x1E0C80A78]();
  v4 = sub_1D492294C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D46F2DB4(0, (unint64_t *)&qword_1ED98F350);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF8D8], v4);
  sub_1D4922478();
  v8 = MEMORY[0x1E0DEE9D8];
  v13[1] = MEMORY[0x1E0DEE9D8];
  sub_1D4696EA4(&qword_1ED98F348, v3, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98F330);
  sub_1D47203C0();
  sub_1D4922AFC();
  *(_QWORD *)(v1 + 16) = sub_1D4922970();
  *(_QWORD *)(v1 + 24) = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 244);
  sub_1D47C317C(v8);
  *(_QWORD *)(v1 + 32) = v9;
  sub_1D47C3188(v8);
  *(_QWORD *)(v1 + 40) = v10;
  sub_1D47C317C(v8);
  *(_QWORD *)(v1 + 48) = v11;
  *(_BYTE *)(v1 + 56) = v2;
  return v1;
}

uint64_t sub_1D48BEE58(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  NSObject *v22;
  int v23;
  _DWORD *v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = sub_1D4922370();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v26 - v15;
  v17 = *(_BYTE *)(v4 + 56);
  v33 = a3;
  v32 = a1;
  if ((v17 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](v14);
    *(&v26 - 2) = v4;
    *((_BYTE *)&v26 - 8) = a2;
    *((_BYTE *)&v26 - 7) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D140);
    sub_1D4922958();
    v19 = v35;
    v18 = v36;
  }
  else
  {
    v19 = sub_1D48C07E4(a1, a2, a3, a4);
    v18 = v20;
  }
  sub_1D470C76C((uint64_t)v16);
  sub_1D470C928((uint64_t)v13);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v16, v9);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22 = sub_1D4922358();
  v23 = sub_1D4922910();
  if (os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    v28 = v23;
    v30 = v19;
    v24 = (_DWORD *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v34 = v27;
    *v24 = 136315906;
    v29 = v21;
    v31 = v9;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  v21(v13, v9);
  if (v18)
    return v19;
  else
    return 0;
}

uint64_t sub_1D48BF2A8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  sub_1D48BF580(a2);
  result = swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  sub_1D47CA5D8(a2);
  if ((v11 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_7:
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v12 + 16) && (v13 = sub_1D47CABA8(a3), (v14 & 1) != 0))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 16 * v13);
    v17 = *v15;
    v16 = v15[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a4 = v17;
  a4[1] = v16;
  return result;
}

uint64_t sub_1D48BF398@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;

  sub_1D48BF580(a2);
  result = swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1D47CA5D8(a2);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v12 + 16) && (v13 = sub_1D47CABA8(a3), (v14 & 1) != 0))
      {
        v15 = 0;
        v16 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
      }
      else
      {
        v16 = 0;
        v15 = 1;
      }
    }
    else
    {
      v16 = 0;
      v15 = 1;
    }
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
    v15 = 1;
  }
  *(_QWORD *)a4 = v16;
  *(_BYTE *)(a4 + 8) = v15;
  return result;
}

uint64_t sub_1D48BF490@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  sub_1D48BF580(a2);
  result = swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 48);
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  sub_1D47CA5D8(a2);
  if ((v11 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_7:
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v12 + 16) && (v13 = sub_1D47CABA8(a3), (v14 & 1) != 0))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 16 * v13);
    v17 = *v15;
    v16 = v15[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a4 = v17;
  a4[1] = v16;
  return result;
}

void sub_1D48BF580(char a1)
{
  _QWORD *v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  swift_beginAccess();
  if (!*(_QWORD *)(v1[5] + 16)
    || (swift_bridgeObjectRetain(), sub_1D47CA5D8(a1), v4 = v3, swift_bridgeObjectRelease(), (v4 & 1) == 0))
  {
    swift_beginAccess();
    if (!*(_QWORD *)(v1[4] + 16)
      || (swift_bridgeObjectRetain(), sub_1D47CA5D8(a1), v6 = v5, swift_bridgeObjectRelease(), (v6 & 1) == 0))
    {
      swift_beginAccess();
      if (!*(_QWORD *)(v1[6] + 16)
        || (swift_bridgeObjectRetain(), sub_1D47CA5D8(a1), v8 = v7, swift_bridgeObjectRelease(), (v8 & 1) == 0))
      {
        sub_1D48BF67C(a1);
      }
    }
  }
}

void sub_1D48BF67C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[34];

  v2 = sub_1D4922370();
  v3 = MEMORY[0x1E0C80A78](v2);
  v7[10] = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v5);
  v7[28] = (char *)v7 - v6;
  v7[18] = "reportAnIssueEnvironment";
  v7[19] = 0xD000000000000017;
  __asm { BR              X10 }
}

uint64_t sub_1D48BF764()
{
  void *v0;
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(NSObject *, uint64_t, uint64_t);
  id v13;
  __int128 v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  _DWORD *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  int v49;
  id v50;
  void *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char v65;
  id v66;
  void *v67;
  id v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char isUniquelyReferenced_nonNull_native;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  char v81;
  char v82;
  uint64_t *v83;
  void *v84;
  uint64_t *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  id v89;
  unsigned int v90;
  char v91;
  char v92;
  char v93;

  v7 = (void *)sub_1D49225F8();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v0, sel_factorLevelsWithNamespaceName_, v7);

  sub_1D46F2DB4(0, &qword_1ED98F340);
  v9 = sub_1D4922820();

  v10 = MEMORY[0x1E0DEE9D8];
  v11 = sub_1D47C5D54(MEMORY[0x1E0DEE9D8]);
  v12 = (void (*)(NSObject *, uint64_t, uint64_t))sub_1D47C5E88(v10);
  v13 = (id)sub_1D47C5D54(v10);
  if (v9 >> 62)
  {
LABEL_97:
    swift_bridgeObjectRetain();
    v15 = sub_1D4922C4C();
    swift_bridgeObjectRelease();
    if (v15)
      goto LABEL_3;
  }
  else
  {
    v15 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15)
    {
LABEL_3:
      *(_QWORD *)(v6 - 248) = v11;
      *(_QWORD *)(v6 - 264) = v12;
      *(_QWORD *)(v6 - 280) = v13;
      *(_QWORD *)(v6 - 344) = v1;
      *(_QWORD *)(v6 - 152) = v9 & 0xC000000000000001;
      v11 = 4;
      *(_QWORD *)(v6 - 184) = "neric";
      *(_QWORD *)(v6 - 256) = 0x80000001D493F830;
      *(_QWORD *)&v14 = 136315394;
      *(_OWORD *)(v6 - 224) = v14;
      *(_QWORD *)(v6 - 352) = v2;
      *(_QWORD *)(v6 - 232) = v2;
      *(_QWORD *)(v6 - 240) = MEMORY[0x1E0DEE9B8] + 8;
      *(_QWORD *)(v6 - 288) = "VISUAL_INTELLIGENCE_POC";
      *(_QWORD *)(v6 - 296) = "VISUAL_INTELLIGENCE_NATURE";
      *(_QWORD *)(v6 - 304) = "VISUAL_INTELLIGENCE_PETS";
      *(_QWORD *)&v14 = 67109120;
      *(_OWORD *)(v6 - 336) = v14;
      *(_QWORD *)(v6 - 312) = "VISUAL_INTELLIGENCE_VICTORIA";
      *(_QWORD *)(v6 - 192) = v3;
      *(_QWORD *)(v6 - 144) = v4;
      *(_QWORD *)(v6 - 168) = v9;
      *(_QWORD *)(v6 - 160) = v5;
      *(_QWORD *)(v6 - 176) = v15;
      while (1)
      {
        if (*(_QWORD *)(v6 - 152))
          v16 = (id)MEMORY[0x1D8261F20](v11 - 4, v9);
        else
          v16 = *(id *)(v9 + 8 * v11);
        v9 = (unint64_t)v16;
        if (__OFADD__(v11 - 4, 1))
        {
          __break(1u);
          goto LABEL_97;
        }
        *(_QWORD *)(v6 - 136) = v11 - 3;
        if (qword_1ED98F398 != -1)
          swift_once();
        if (byte_1ED98F388 != 1)
          goto LABEL_24;
        v17 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
        v18 = objc_msgSend(v17, sel_bundleIdentifier);

        if (v18)
        {
          v19 = sub_1D492261C();
          v21 = v20;

          if (v19 == 0xD00000000000002BLL && v21 == *(_QWORD *)(v6 - 256))
          {
            swift_bridgeObjectRelease();
LABEL_16:
            v23 = &qword_1EFEAA908;
            if (qword_1EFEA9C20 != -1)
            {
              swift_once();
              v23 = &qword_1EFEAA908;
            }
            goto LABEL_20;
          }
          v22 = sub_1D4922E38();
          swift_bridgeObjectRelease();
          if ((v22 & 1) != 0)
            goto LABEL_16;
        }
        v23 = (uint64_t *)&off_1ED98F3F0;
        if (qword_1ED98F3A8 != -1)
        {
          swift_once();
          v23 = (uint64_t *)&off_1ED98F3F0;
        }
LABEL_20:
        v24 = *(void **)(*v23 + 32);
        swift_retain();
        v2 = (_DWORD *)sub_1D49225F8();
        LODWORD(v24) = objc_msgSend(v24, sel_BOOLForKey_, v2);
        swift_release();

        if ((_DWORD)v24)
        {
          if (qword_1EFEA9C78 != -1)
            swift_once();
          v25 = v3;
          v26 = qword_1EFEAAA30;
          goto LABEL_27;
        }
LABEL_24:
        if (qword_1ED98F3D0 != -1)
          swift_once();
        v25 = v3;
        v26 = qword_1ED98F3B0;
LABEL_27:
        v27 = __swift_project_value_buffer(v25, (uint64_t)v26);
        v12 = *(void (**)(NSObject *, uint64_t, uint64_t))(v5 + 16);
        v12(*(NSObject **)(v6 - 128), v27, v3);
        if ((byte_1ED98F388 & 1) == 0)
          goto LABEL_39;
        v28 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
        v29 = objc_msgSend(v28, sel_bundleIdentifier);

        if (v29)
        {
          v30 = sub_1D492261C();
          v32 = v31;

          if (v30 == 0xD00000000000002BLL && v32 == (*(_QWORD *)(v6 - 184) | 0x8000000000000000))
          {
            swift_bridgeObjectRelease();
LABEL_33:
            v34 = &qword_1EFEAA908;
            if (qword_1EFEA9C20 != -1)
            {
              swift_once();
              v34 = &qword_1EFEAA908;
            }
            goto LABEL_37;
          }
          v33 = sub_1D4922E38();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
            goto LABEL_33;
        }
        v34 = (uint64_t *)&off_1ED98F3F0;
        if (qword_1ED98F3A8 != -1)
        {
          swift_once();
          v34 = (uint64_t *)&off_1ED98F3F0;
        }
LABEL_37:
        v35 = *(void **)(*v34 + 32);
        swift_retain();
        v2 = (_DWORD *)sub_1D49225F8();
        LODWORD(v35) = objc_msgSend(v35, sel_BOOLForKey_, v2);
        swift_release();

        if ((_DWORD)v35)
        {
          v36 = v4;
          v37 = *(_QWORD *)(v6 - 128);
          goto LABEL_42;
        }
LABEL_39:
        if (qword_1ED98F3D0 != -1)
          swift_once();
        v37 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED98F3B0);
        v36 = v4;
LABEL_42:
        v12(v36, v37, v3);
        v1 = *(_QWORD *)(v5 + 8);
        ((void (*)(_QWORD, uint64_t))v1)(*(_QWORD *)(v6 - 128), v3);
        v38 = (id)v9;
        v39 = sub_1D4922358();
        v40 = sub_1D4922910();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = (_DWORD *)swift_slowAlloc();
          swift_slowAlloc();
          *(_QWORD *)(v6 - 112) = swift_slowAlloc();
          *v41 = *(_OWORD *)(v6 - 224);
          __asm { BR              X8 }
        }

        ((void (*)(NSObject *, uint64_t))v1)(v4, v3);
        v42 = objc_msgSend(v38, sel_factor);
        if (!v42)
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:

          __break(1u);
          JUMPOUT(0x1D48C07BCLL);
        }
        v43 = v42;
        v44 = objc_msgSend(v42, sel_name);

        if (!v44)
          goto LABEL_101;
        sub_1D492261C();
        v13 = v45;

        v46 = sub_1D48C32B8();
        if (v46 != 63)
        {
          v4 = v46;
          v47 = objc_msgSend(v38, sel_factor);
          if (!v47)
            goto LABEL_102;
          v48 = v47;
          v49 = objc_msgSend(v47, sel_type);

          if (v49 > 99)
          {
            if (v49 == 101)
            {
              v66 = objc_msgSend(v38, sel_level);
              if (!v66)
                goto LABEL_107;
              v67 = v66;
              v58 = objc_msgSend(v66, sel_directoryValue);

              if (!v58)
                goto LABEL_108;
            }
            else
            {
              if (v49 != 100)
              {
LABEL_72:
                if (byte_1ED98F388 != 1)
                  goto LABEL_89;
                v73 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
                v74 = objc_msgSend(v73, sel_bundleIdentifier);

                if (v74)
                {
                  v75 = sub_1D492261C();
                  v77 = v76;

                  if (v75 == 0xD00000000000002BLL && v77 == (*(_QWORD *)(v6 - 184) | 0x8000000000000000))
                  {
                    swift_bridgeObjectRelease();
LABEL_82:
                    v83 = &qword_1EFEAA908;
                    if (qword_1EFEA9C20 != -1)
                    {
                      swift_once();
                      v83 = &qword_1EFEAA908;
                    }
LABEL_86:
                    v84 = *(void **)(*v83 + 32);
                    swift_retain();
                    v13 = (id)sub_1D49225F8();
                    LODWORD(v84) = objc_msgSend(v84, sel_BOOLForKey_, v13);
                    swift_release();

                    if ((_DWORD)v84)
                    {
                      v85 = qword_1EFEAAA30;
                      if (qword_1EFEA9C78 != -1)
                      {
                        swift_once();
                        v85 = qword_1EFEAAA30;
                      }
LABEL_91:
                      v86 = __swift_project_value_buffer(v3, (uint64_t)v85);
                      v12(*(NSObject **)(v6 - 272), v86, v3);
                      v4 = v38;
                      v87 = sub_1D4922358();
                      v88 = sub_1D492291C();
                      if (os_log_type_enabled(v87, v88))
                      {
                        v2 = (_DWORD *)swift_slowAlloc();
                        *v2 = *(_OWORD *)(v6 - 336);
                        v89 = -[NSObject factor](v4, sel_factor);
                        v5 = *(_QWORD *)(v6 - 160);
                        if (!v89)
                          goto LABEL_109;
                        v13 = v89;
                        v90 = objc_msgSend(v89, sel_type);

                        v2[1] = v90;
                        _os_log_impl(&dword_1D467C000, v87, v88, "TrialWrapper: unsupported factor type %d", (uint8_t *)v2, 8u);
                        MEMORY[0x1D82635B8](v2, -1, -1);
                        v3 = *(_QWORD *)(v6 - 192);
                      }
                      else
                      {

                        v87 = v4;
                        v5 = *(_QWORD *)(v6 - 160);
                      }

                      ((void (*)(_QWORD, uint64_t))v1)(*(_QWORD *)(v6 - 272), v3);
                      goto LABEL_69;
                    }
LABEL_89:
                    v85 = qword_1ED98F3B0;
                    if (qword_1ED98F3D0 != -1)
                    {
                      swift_once();
                      v85 = qword_1ED98F3B0;
                    }
                    goto LABEL_91;
                  }
                  v82 = sub_1D4922E38();
                  swift_bridgeObjectRelease();
                  if ((v82 & 1) != 0)
                    goto LABEL_82;
                }
                v83 = (uint64_t *)&off_1ED98F3F0;
                if (qword_1ED98F3A8 != -1)
                {
                  swift_once();
                  v83 = (uint64_t *)&off_1ED98F3F0;
                }
                goto LABEL_86;
              }
              v56 = objc_msgSend(v38, sel_level);
              if (!v56)
                goto LABEL_104;
              v57 = v56;
              v58 = objc_msgSend(v56, sel_fileValue);

              if (!v58)
                goto LABEL_105;
            }
            v68 = objc_msgSend(v58, sel_path);

            if (v68)
            {
              v69 = sub_1D492261C();
              v13 = v70;

              v71 = *(_QWORD *)(v6 - 248);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v6 - 112) = v71;
              sub_1D47AC074(v69, (uint64_t)v13, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
              *(_QWORD *)(v6 - 248) = *(_QWORD *)(v6 - 112);
              goto LABEL_67;
            }
          }
          else
          {
            if (v49 != 11)
            {
              if (v49 != 13)
                goto LABEL_72;
              v50 = objc_msgSend(v38, sel_level);
              if (!v50)
                goto LABEL_103;
              v51 = v50;
              v13 = objc_msgSend(v50, sel_longValue);

              v52 = *(_QWORD *)(v6 - 264);
              v53 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v6 - 112) = v52;
              sub_1D47ABF4C((uint64_t)v13, (uint64_t)v4, v53);
              v54 = *(_QWORD *)(v6 - 112);
              v55 = v6 - 8;
              goto LABEL_62;
            }
            v59 = objc_msgSend(v38, sel_level);
            if (!v59)
              goto LABEL_106;
            v60 = v59;
            v61 = objc_msgSend(v59, sel_stringValue);

            if (v61)
            {
              v62 = sub_1D492261C();
              v13 = v63;

              v64 = *(_QWORD *)(v6 - 280);
              v65 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v6 - 112) = v64;
              sub_1D47AC074(v62, (uint64_t)v13, (uint64_t)v4, v65);
              v54 = *(_QWORD *)(v6 - 112);
              v55 = v6 - 24;
LABEL_62:
              *(_QWORD *)(v55 - 256) = v54;
LABEL_67:

              swift_bridgeObjectRelease();
              goto LABEL_68;
            }
            v13 = *(id *)(v6 - 280);
            swift_bridgeObjectRetain();
            v78 = sub_1D47CABA8((uint64_t)v4);
            v80 = v79;
            swift_bridgeObjectRelease();
            if ((v80 & 1) != 0)
            {
              v81 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v6 - 112) = v13;
              v4 = *(NSObject **)(v6 - 144);
              if ((v81 & 1) == 0)
              {
                sub_1D47B0EFC();
                v13 = *(id *)(v6 - 112);
              }
              *(_QWORD *)(v6 - 280) = v13;
              sub_1D48C2DBC(v78, (uint64_t)v13);

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v5 = *(_QWORD *)(v6 - 160);
              goto LABEL_70;
            }
          }
        }

LABEL_68:
        v5 = *(_QWORD *)(v6 - 160);
LABEL_69:
        v4 = *(NSObject **)(v6 - 144);
LABEL_70:
        v9 = *(_QWORD *)(v6 - 168);
        ++v11;
        if (*(_QWORD *)(v6 - 136) == *(_QWORD *)(v6 - 176))
        {
          swift_bridgeObjectRelease();
          v1 = *(_QWORD *)(v6 - 344);
          v2 = *(_DWORD **)(v6 - 352);
          v13 = *(id *)(v6 - 280);
          v12 = *(void (**)(NSObject *, uint64_t, uint64_t))(v6 - 264);
          v11 = *(_QWORD *)(v6 - 248);
          goto LABEL_99;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_99:
  swift_beginAccess();
  v91 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0x8000000000000000;
  sub_1D47ABE00(v11, (char)v2, v91);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v6 - 120);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v92 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0x8000000000000000;
  sub_1D47ABDF4((uint64_t)v12, (char)v2, v92);
  *(_QWORD *)(v1 + 40) = *(_QWORD *)(v6 - 120);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v93 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0x8000000000000000;
  sub_1D47ABE00((uint64_t)v13, (char)v2, v93);
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(v6 - 120);
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1D48C07E4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t ObjCClassFromMetadata;
  id v21;
  id v22;
  char v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  os_log_type_t v53;
  _DWORD *v54;
  uint64_t v55;
  id v57;
  void *v58;
  NSObject *v59;
  os_log_type_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  NSObject *v71;
  int v72;
  _DWORD *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  id v82;
  void (**v83)(_QWORD, _QWORD);
  uint64_t v84;
  char *v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  int v89;
  id v90[2];

  v87 = a3;
  v88 = a4;
  v89 = a1;
  v90[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = sub_1D4922370();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v78 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v78 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v78 - v17;
  MEMORY[0x1E0C80A78](v16);
  v86 = (void (*)(uint64_t, uint64_t))((char *)&v78 - v19);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v21 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v22 = objc_msgSend(v21, sel_resourcePath);

  if (!v22)
    goto LABEL_26;
  v85 = v15;
  if (qword_1EFEAA058 != -1)
    swift_once();
  if (!*(_QWORD *)(qword_1EFEC3438 + 16) || (sub_1D47CA5D8(a2), (v23 & 1) == 0))
  {

LABEL_26:
    sub_1D470C76C((uint64_t)v9);
    v52 = sub_1D4922358();
    v53 = sub_1D492291C();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (_DWORD *)swift_slowAlloc();
      v90[0] = (id)swift_slowAlloc();
      *v54 = 136315138;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return 0;
  }
  swift_bridgeObjectRetain();
  v24 = (void *)sub_1D49225F8();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v22, sel_stringByAppendingPathComponent_, v24);

  v26 = v25;
  v27 = v25;
  if (!v25)
  {
    sub_1D492261C();
    v27 = (void *)sub_1D49225F8();
    swift_bridgeObjectRelease();
    sub_1D492261C();
    v26 = (void *)sub_1D49225F8();
    swift_bridgeObjectRelease();
  }
  v28 = (void *)objc_opt_self();
  v29 = v25;
  v30 = objc_msgSend(v28, sel_defaultManager);
  v90[0] = 0;
  v31 = objc_msgSend(v30, sel_contentsOfDirectoryAtPath_error_, v27, v90);

  v32 = v90[0];
  if (!v31)
  {
    v57 = v90[0];

    v58 = (void *)sub_1D4920E64();
    swift_willThrow();

    sub_1D470C76C((uint64_t)v12);
    v59 = sub_1D4922358();
    v60 = sub_1D492291C();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (_DWORD *)swift_slowAlloc();
      v90[0] = (id)swift_slowAlloc();
      *v61 = 136315138;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    return 0;
  }
  v82 = v26;
  v83 = (void (**)(_QWORD, _QWORD))v6;
  v79 = a2;
  v80 = v18;
  v84 = v5;
  v33 = sub_1D4922820();
  v34 = v32;

  v35 = *(_QWORD *)(v33 + 16);
  v81 = v33;
  if (v35)
  {
    v36 = (uint64_t *)(v33 + 40);
    v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v38 = *(v36 - 1);
      v39 = *v36;
      swift_bridgeObjectRetain();
      v40 = (void *)sub_1D49225F8();
      v41 = objc_msgSend(v40, sel_stringByDeletingPathExtension);

      v42 = sub_1D492261C();
      v44 = v43;

      if (v42 == sub_1D48BE504(v89) && v44 == v45)
        break;
      v47 = sub_1D4922E38();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v47 & 1) != 0)
        goto LABEL_20;
      swift_bridgeObjectRelease();
LABEL_12:
      v36 += 2;
      if (!--v35)
        goto LABEL_34;
    }
    swift_bridgeObjectRelease_n();
LABEL_20:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v90[0] = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1D48AB4A4(0, v37[2] + 1, 1);
      v37 = v90[0];
    }
    v50 = v37[2];
    v49 = v37[3];
    if (v50 >= v49 >> 1)
    {
      sub_1D48AB4A4(v49 > 1, v50 + 1, 1);
      v37 = v90[0];
    }
    v37[2] = v50 + 1;
    v51 = &v37[2 * v50];
    v51[4] = v38;
    v51[5] = v39;
    goto LABEL_12;
  }
  v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_34:
  swift_bridgeObjectRelease();
  v62 = v88;
  swift_bridgeObjectRetain();
  v63 = sub_1D48C2F90((uint64_t)v37, v87, v62);
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v63 + 16) != 1)
  {
    swift_bridgeObjectRelease();

    v74 = (uint64_t)v85;
    sub_1D470C76C((uint64_t)v85);
    v75 = sub_1D4922358();
    v76 = sub_1D492291C();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (_DWORD *)swift_slowAlloc();
      v90[0] = (id)swift_slowAlloc();
      *v77 = 136315394;
      __asm { BR              X10 }
    }

    v83[1](v74, v84);
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64 = (void *)sub_1D49225F8();
  swift_bridgeObjectRelease();
  v65 = v82;
  v66 = objc_msgSend(v82, sel_stringByAppendingPathComponent_, v64);

  v55 = sub_1D492261C();
  v67 = (uint64_t)v86;
  sub_1D470C76C((uint64_t)v86);
  v68 = (uint64_t)v80;
  sub_1D470C928((uint64_t)v80);
  v69 = v84;
  v70 = v83[1];
  v70(v67, v84);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v71 = sub_1D4922358();
  v72 = sub_1D4922910();
  if (os_log_type_enabled(v71, (os_log_type_t)v72))
  {
    LODWORD(v85) = v72;
    v73 = (_DWORD *)swift_slowAlloc();
    v83 = (void (**)(_QWORD, _QWORD))swift_slowAlloc();
    v90[0] = v83;
    *v73 = 136315906;
    v86 = v70;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  v70(v68, v69);
  return v55;
}

uint64_t sub_1D48C152C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TrialWrapper()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for TrialWrapper.ConfigSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D48C15DC + 4 * byte_1D493B9FA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D48C1610 + 4 * byte_1D493B9F5[v4]))();
}

uint64_t sub_1D48C1610(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48C1618(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48C1620);
  return result;
}

uint64_t sub_1D48C162C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48C1634);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D48C1638(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48C1640(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrialWrapper.ConfigSource()
{
  return &type metadata for TrialWrapper.ConfigSource;
}

uint64_t getEnumTagSinglePayload for TrialWrapper.FactorName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xC2)
    goto LABEL_17;
  if (a2 + 62 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 62) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 62;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 62;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 62;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x3F;
  v8 = v6 - 63;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TrialWrapper.FactorName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 62 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 62) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xC1)
    return ((uint64_t (*)(void))((char *)&loc_1D48C1738 + 4 * byte_1D493BA04[v4]))();
  *a1 = a2 + 62;
  return ((uint64_t (*)(void))((char *)sub_1D48C176C + 4 * byte_1D493B9FF[v4]))();
}

uint64_t sub_1D48C176C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48C1774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48C177CLL);
  return result;
}

uint64_t sub_1D48C1788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48C1790);
  *(_BYTE *)result = a2 + 62;
  return result;
}

uint64_t sub_1D48C1794(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48C179C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrialWrapper.FactorName()
{
  return &type metadata for TrialWrapper.FactorName;
}

uint64_t storeEnumTagSinglePayload for TrialWrapper.NamespaceName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1D48C1804 + 4 * byte_1D493BA0E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1D48C1838 + 4 * byte_1D493BA09[v4]))();
}

uint64_t sub_1D48C1838(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48C1840(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48C1848);
  return result;
}

uint64_t sub_1D48C1854(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48C185CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1D48C1860(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48C1868(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrialWrapper.NamespaceName()
{
  return &type metadata for TrialWrapper.NamespaceName;
}

unint64_t sub_1D48C1888()
{
  unint64_t result;

  result = qword_1ED98F328;
  if (!qword_1ED98F328)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BB00, &type metadata for TrialWrapper.NamespaceName);
    atomic_store(result, (unint64_t *)&qword_1ED98F328);
  }
  return result;
}

unint64_t sub_1D48C18D0()
{
  unint64_t result;

  result = qword_1ED98F320;
  if (!qword_1ED98F320)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BBA0, &type metadata for TrialWrapper.FactorName);
    atomic_store(result, (unint64_t *)&qword_1ED98F320);
  }
  return result;
}

unint64_t sub_1D48C1918()
{
  unint64_t result;

  result = qword_1EFEAC720;
  if (!qword_1EFEAC720)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BC08, &type metadata for TrialWrapper.ConfigSource);
    atomic_store(result, (unint64_t *)&qword_1EFEAC720);
  }
  return result;
}

unint64_t sub_1D48C195C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1D4922EF8();
        swift_bridgeObjectRetain();
        sub_1D49226D0();
        v9 = sub_1D4922F34();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D48C1B30(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(_QWORD *)(a2 + 48) + 32 * v6;
        v10 = *(double *)v9;
        v11 = *(double *)(v9 + 8);
        v12 = *(double *)(v9 + 16);
        v13 = *(double *)(v9 + 24);
        sub_1D4922EF8();
        v31.origin.x = v10;
        v31.origin.y = v11;
        v31.size.width = v12;
        v31.size.height = v13;
        CGRectGetMinX(v31);
        sub_1D4922F28();
        v32.origin.x = v10;
        v32.origin.y = v11;
        v32.size.width = v12;
        v32.size.height = v13;
        CGRectGetMaxX(v32);
        sub_1D4922F28();
        v33.origin.x = v10;
        v33.origin.y = v11;
        v33.size.width = v12;
        v33.size.height = v13;
        CGRectGetMinY(v33);
        sub_1D4922F28();
        v34.origin.x = v10;
        v34.origin.y = v11;
        v34.size.width = v12;
        v34.size.height = v13;
        CGRectGetMaxY(v34);
        sub_1D4922F28();
        result = sub_1D4922F34();
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v14 < v8)
          goto LABEL_11;
LABEL_12:
        v15 = *(_QWORD *)(a2 + 48);
        v16 = (_OWORD *)(v15 + 32 * v3);
        v17 = (_OWORD *)(v15 + 32 * v6);
        if (v3 != v6 || v16 >= v17 + 2)
        {
          v18 = v17[1];
          *v16 = *v17;
          v16[1] = v18;
        }
        v19 = *(_QWORD *)(a2 + 56);
        v20 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for VisualUnderstanding.ImageRegion() - 8) + 72);
        v21 = v20 * v3;
        result = v19 + v20 * v3;
        v22 = v20 * v6;
        v23 = v19 + v20 * v6 + v20;
        if (v21 < v22 || result >= v23)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v21 == v22)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v14 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v14)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D48C1DBC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1D4922EF8();
        swift_bridgeObjectRetain();
        sub_1D49226D0();
        v9 = sub_1D4922F34();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_DWORD *)(v14 + 4 * v3);
          v16 = (_DWORD *)(v14 + 4 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D48C1F90(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_1D4922EF8();
        swift_bridgeObjectRetain();
        sub_1D49226D0();
        v9 = sub_1D4922F34();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for LandmarkSignals(0) - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D48C218C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_1D4922EEC();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for StorefrontSignals(0) - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D48C2348(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v3 = result;
  v4 = a2 + 64;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(a2 + 32));
  if (((1 << v5) & *(_QWORD *)(a2 + 64 + 8 * (v5 >> 6))) != 0)
  {
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v5);
      sub_1D4922EF8();
      __asm { BR              X8 }
    }
    v7 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v8 = *v7;
    v9 = (-1 << v3) - 1;
  }
  else
  {
    v7 = (uint64_t *)(v4 + 8 * (result >> 6));
    v9 = *v7;
    v8 = (-1 << result) - 1;
  }
  *v7 = v9 & v8;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x1D48C2678);
  }
  *(_QWORD *)(a2 + 16) = v12;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1D48C26A4(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_1D4920FD8();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1D4696EA4(&qword_1EFEAB770, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_1D49225A4();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D48C2948(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_1D4920FD8();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1D4696EA4(&qword_1EFEAB770, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_1D49225A4();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 16 * a1);
            v25 = (_OWORD *)(v23 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D48C2BE8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1D4922EF8();
        swift_bridgeObjectRetain();
        sub_1D49226D0();
        v9 = sub_1D4922F34();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_BYTE *)(v14 + v3);
          v16 = (_BYTE *)(v14 + v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D48C2DBC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D4922B08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
        sub_1D4922EF8();
        sub_1D48BE504(v9);
        sub_1D49226D0();
        swift_bridgeObjectRelease();
        result = sub_1D4922F34();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1D48C2F90(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v5 = 0;
  v6 = result + 40;
  v28 = -(uint64_t)v3;
  v7 = MEMORY[0x1E0DEE9D8];
  v24 = result + 40;
  v25 = *(_QWORD *)(result + 16);
  do
  {
    v26 = v7;
    if (v5 <= v3)
      v8 = v3;
    else
      v8 = v5;
    v9 = -(uint64_t)v8;
    for (i = (uint64_t *)(v6 + 16 * v5++); ; i += 2)
    {
      if (v9 + v5 == 1)
      {
        __break(1u);
        return result;
      }
      v13 = *(i - 1);
      v12 = *i;
      swift_bridgeObjectRetain();
      v14 = (void *)sub_1D49225F8();
      v15 = objc_msgSend(v14, sel_pathExtension);

      v16 = sub_1D492261C();
      v18 = v17;

      if (a3)
        break;
      swift_bridgeObjectRelease();
      v11 = HIBYTE(v18) & 0xF;
      if ((v18 & 0x2000000000000000) == 0)
        v11 = v16 & 0xFFFFFFFFFFFFLL;
      if (!v11)
        goto LABEL_20;
LABEL_10:
      result = swift_bridgeObjectRelease();
      ++v5;
      if (v28 + v5 == 1)
        return v26;
    }
    if (v16 != a2 || v18 != a3)
    {
      v20 = sub_1D4922E38();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        goto LABEL_20;
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
LABEL_20:
    v7 = v26;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1D48AB4A4(0, *(_QWORD *)(v26 + 16) + 1, 1);
      v7 = v26;
    }
    v22 = *(_QWORD *)(v7 + 16);
    v21 = *(_QWORD *)(v7 + 24);
    if (v22 >= v21 >> 1)
    {
      result = sub_1D48AB4A4(v21 > 1, v22 + 1, 1);
      v7 = v26;
    }
    *(_QWORD *)(v7 + 16) = v22 + 1;
    v23 = v7 + 16 * v22;
    *(_QWORD *)(v23 + 32) = v13;
    *(_QWORD *)(v23 + 40) = v12;
    v6 = v24;
    v3 = v25;
  }
  while (v28 + v5);
  return v7;
}

uint64_t sub_1D48C318C()
{
  unint64_t v0;

  v0 = sub_1D4922CA0();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1D48C31D4()
{
  if ((sub_1D4922778() & 1) != 0)
    return 27;
  if ((sub_1D4922778() & 1) != 0)
    return 28;
  if ((sub_1D4922778() & 1) != 0)
    return 29;
  if ((sub_1D4922778() & 1) != 0)
    return 30;
  if ((sub_1D4922778() & 1) != 0)
    return 31;
  if ((sub_1D4922778() & 1) != 0)
    return 32;
  return 63;
}

uint64_t sub_1D48C32B8()
{
  unint64_t v0;

  v0 = sub_1D4922E68();
  swift_bridgeObjectRelease();
  if (v0 >= 0x3F)
    return 63;
  else
    return v0;
}

uint64_t sub_1D48C3308@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1D48BF2A8(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(unsigned __int8 *)(v1 + 25), a1);
}

uint64_t sub_1D48C332C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrialIdentifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for TrialIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrialIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrialIdentifier()
{
  return &type metadata for TrialIdentifier;
}

uint64_t sub_1D48C3488(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_1D4922C28();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98AEC8);
      v4 = (_QWORD *)sub_1D4922850();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9D8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1D48C3578(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_1D4922C28();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1D4922850();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_1D48C3668(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_1D4922C28();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1D4922850();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_1D48C3750(unint64_t a1, double a2)
{
  uint64_t result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_1D4922C28();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1D4922850();
  *(_QWORD *)(result + 16) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_1D48C3840(uint64_t a1, uint64_t a2)
{
  return sub_1D48C3864(a1, a2, &qword_1EFEAC580);
}

uint64_t sub_1D48C384C(uint64_t a1, uint64_t a2)
{
  return sub_1D48C3864(a1, a2, &qword_1ED98EAA8);
}

uint64_t sub_1D48C3858(uint64_t a1, uint64_t a2)
{
  return sub_1D48C3864(a1, a2, &qword_1ED98D218);
}

uint64_t sub_1D48C3864(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_1D4922C28();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(a3);
      v5 = (_QWORD *)sub_1D4922850();
      v6 = v5;
      v5[2] = a2;
      v5[4] = a1;
      if (a2 != 1)
      {
        v5[5] = a1;
        v7 = a2 - 2;
        if (v7)
        {
          v8 = v5 + 6;
          do
          {
            *v8++ = a1;
            swift_bridgeObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9D8];
    }
    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_1D48C3950(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v12 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98AF78);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D48C3DE4();
  sub_1D4922F58();
  v15 = a2;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EAA8);
  sub_1D47679E0(&qword_1ED98EAB0, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEAF10]);
  sub_1D4922DCC();
  if (!v4)
  {
    v13 = 1;
    sub_1D4922D84();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1D48C3AB0()
{
  _BYTE *v0;

  if (*v0)
    return 0x4E52556C65646F6DLL;
  else
    return 0x7365727574616566;
}

uint64_t sub_1D48C3AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1D48C43B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D48C3B08()
{
  sub_1D48C3DE4();
  return sub_1D4922F64();
}

uint64_t sub_1D48C3B30()
{
  sub_1D48C3DE4();
  return sub_1D4922F70();
}

uint64_t sub_1D48C3B58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if (!sub_1D489F620(*a1, *a2))
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return sub_1D4922E38();
}

uint64_t sub_1D48C3BD4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1D48C44A0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1D48C3C00(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1D48C3950(a1, *v1, v1[1], v1[2]);
}

uint64_t type metadata accessor for EmbeddingPostProcessor()
{
  return objc_opt_self();
}

uint64_t destroy for EmbeddingInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s18VisualIntelligence13EmbeddingInfoVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EmbeddingInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for EmbeddingInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmbeddingInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmbeddingInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmbeddingInfo()
{
  return &type metadata for EmbeddingInfo;
}

unint64_t sub_1D48C3DE4()
{
  unint64_t result;

  result = qword_1ED98AF58;
  if (!qword_1ED98AF58)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BDB4, &type metadata for EmbeddingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AF58);
  }
  return result;
}

id sub_1D48C3E28(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  sub_1D46C2548();
  v4 = (void *)sub_1D4922814();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, v4, a2, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    sub_1D4920E64();

    swift_willThrow();
  }
  return v5;
}

unint64_t sub_1D48C3F10(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  id v13;
  float v14;
  float v15;
  id v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  float v24;
  float v25;
  id v26;
  double v27;
  id v28;

  v3 = objc_msgSend(a1, sel_shape);
  sub_1D46C2548();
  v4 = sub_1D4922820();

  v5 = objc_msgSend(a1, sel_dataType);
  v6 = objc_allocWithZone(MEMORY[0x1E0C9E970]);
  v7 = sub_1D48C3E28(v4, (uint64_t)v5);
  if (v1)
    return (unint64_t)v7;
  result = (unint64_t)objc_msgSend(a1, sel_count);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    if (result)
    {
      v10 = 0;
      v11 = 0.0;
      do
      {
        v12 = v10 + 1;
        v13 = objc_msgSend(a1, sel_objectAtIndexedSubscript_, v10);
        objc_msgSend(v13, sel_floatValue);
        v15 = v14;

        v16 = objc_msgSend(a1, sel_objectAtIndexedSubscript_, v10);
        objc_msgSend(v16, sel_floatValue);
        v18 = v17;

        v11 = v11 + (float)(v15 * v18);
        v10 = v12;
      }
      while (v9 != v12);
    }
    else
    {
      v11 = 0.0;
    }
    v19 = sqrtf(v11);
    if (v19 > 1.0e-12)
      v20 = v19;
    else
      v20 = 1.0e-12;
    result = (unint64_t)objc_msgSend(v7, sel_count);
    if ((result & 0x8000000000000000) == 0)
    {
      v21 = result;
      if (result)
      {
        v22 = 0;
        do
        {
          v23 = objc_msgSend(a1, sel_objectAtIndexedSubscript_, v22);
          objc_msgSend(v23, sel_floatValue);
          v25 = v24;

          v26 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
          *(float *)&v27 = v25 / v20;
          v28 = objc_msgSend(v26, sel_initWithFloat_, v27);
          objc_msgSend(v7, sel_setObject_atIndexedSubscript_, v28, v22);

          ++v22;
        }
        while (v21 != v22);
      }
      return (unint64_t)v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D48C4144(void *a1)
{
  id v2;
  int32x2_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  id v7;
  int v8;
  int v9;

  v2 = objc_msgSend(a1, sel_count);
  v3.i32[0] = 0;
  result = sub_1D48C3578((unint64_t)v2, v3);
  if (__OFSUB__(v2, 1))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((((unint64_t)v2 - 1) & 0x8000000000000000) == 0)
  {
    v5 = result;
    v6 = 0;
    while (1)
    {
      v7 = objc_msgSend(a1, sel_objectAtIndexedSubscript_, v6);
      objc_msgSend(v7, sel_floatValue);
      v9 = v8;

      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1D47DFAC0(v5);
        v5 = result;
      }
      if (v6 >= *(_QWORD *)(v5 + 16))
        break;
      *(_DWORD *)(v5 + 4 * v6++ + 32) = v9;
      if (v2 == (id)v6)
        return v5;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D48C4230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v13;

  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v7 = sub_1D47CA4DC(a2, a3);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    sub_1D4922B80();
    swift_bridgeObjectRelease();
    sub_1D492270C();
    sub_1D46AAFD4();
    swift_allocError();
    *(_QWORD *)v11 = 0xD000000000000016;
    *(_QWORD *)(v11 + 8) = 0x80000001D4945060;
    *(_BYTE *)(v11 + 16) = 4;
    swift_willThrow();
    return a2;
  }
  v9 = *(id *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_bridgeObjectRelease();
  v10 = (void *)sub_1D48C3F10(v9);
  if (v3)
  {

  }
  else
  {
    v13 = v10;
    a2 = sub_1D48C4144(v10);
    type metadata accessor for MLModelInfo(0);
    swift_bridgeObjectRetain();
    sub_1D492270C();

  }
  return a2;
}

uint64_t sub_1D48C43B0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7365727574616566 && a2 == 0xE800000000000000;
  if (v2 || (sub_1D4922E38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E52556C65646F6DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1D4922E38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1D48C44A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC728);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_1D48C3DE4();
  sub_1D4922F4C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EAA8);
    v9[7] = 0;
    sub_1D47679E0(&qword_1EFEAB3A8, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEAF40]);
    sub_1D4922D30();
    v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    sub_1D4922CE8();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for EmbeddingInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D48C46C8 + 4 * byte_1D493BC45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D48C46FC + 4 * asc_1D493BC40[v4]))();
}

uint64_t sub_1D48C46FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48C4704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D48C470CLL);
  return result;
}

uint64_t sub_1D48C4718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D48C4720);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D48C4724(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D48C472C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmbeddingInfo.CodingKeys()
{
  return &type metadata for EmbeddingInfo.CodingKeys;
}

unint64_t sub_1D48C474C()
{
  unint64_t result;

  result = qword_1EFEAC730;
  if (!qword_1EFEAC730)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BD8C, &type metadata for EmbeddingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFEAC730);
  }
  return result;
}

unint64_t sub_1D48C4794()
{
  unint64_t result;

  result = qword_1ED98AF68;
  if (!qword_1ED98AF68)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BCFC, &type metadata for EmbeddingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AF68);
  }
  return result;
}

unint64_t sub_1D48C47DC()
{
  unint64_t result;

  result = qword_1ED98AF60;
  if (!qword_1ED98AF60)
  {
    result = MEMORY[0x1D82634E0](&unk_1D493BD24, &type metadata for EmbeddingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED98AF60);
  }
  return result;
}

void sub_1D48C4820(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  os_unfair_lock_t v29;

  v26 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98DFC8);
  MEMORY[0x1E0C80A78](v2);
  v25 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98ED20);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v24 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98ED18);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v24 - v15;
  v29 = (os_unfair_lock_t)(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184)) + 16);
  os_unfair_lock_lock(v29);
  v17 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 152);
  swift_beginAccess();
  sub_1D469C5EC(v17, (uint64_t)v9, &qword_1ED98ED20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1D46992EC((uint64_t)v9, &qword_1ED98ED20);
    v18 = *(void (**)(uint64_t))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160));
    if (v18)
    {
      v19 = swift_retain();
      v20 = (uint64_t)v25;
      v21 = v27;
      v18(v19);
      if (v21)
      {
        *v7 = v21;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
        swift_beginAccess();
        v22 = v21;
        sub_1D474A5D0((uint64_t)v7, v17, &qword_1ED98ED20);
        swift_endAccess();
        swift_willThrow();
        sub_1D46A56B4((uint64_t)v18);
      }
      else
      {
        sub_1D46A56B4((uint64_t)v18);
        sub_1D469C5EC(v20, (uint64_t)v7, &qword_1ED98DFC8);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
        swift_beginAccess();
        sub_1D474A5D0((uint64_t)v7, v17, &qword_1ED98ED20);
        swift_endAccess();
        sub_1D46B3464(v20, v26, &qword_1ED98DFC8);
      }
    }
    else
    {
      sub_1D46C5874();
      swift_allocError();
      *v23 = 0;
      swift_willThrow();
    }
  }
  else
  {
    sub_1D46B3464((uint64_t)v9, (uint64_t)v16, &qword_1ED98ED18);
    sub_1D469C5EC((uint64_t)v16, (uint64_t)v14, &qword_1ED98ED18);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v28 = *v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98ECF0);
      swift_willThrowTypedImpl();
    }
    else
    {
      sub_1D46B3464((uint64_t)v14, v26, &qword_1ED98DFC8);
    }
    sub_1D46992EC((uint64_t)v16, &qword_1ED98ED18);
  }
  os_unfair_lock_unlock(v29);
}

_QWORD *sub_1D48C4BE4()
{
  return sub_1D48C4E98((void (*)(_QWORD, _QWORD *))sub_1D46A56B4, (void (*)(uint64_t, uint64_t))sub_1D48C6430);
}

void sub_1D48C4C08(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  void (*v6)(__int128 *__return_ptr, uint64_t);
  uint64_t v7;
  id v8;
  _BYTE *v9;
  __int128 v10[2];
  unsigned __int8 v11;
  _QWORD v12[5];
  char v13;

  v4 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 112) + 16);
  os_unfair_lock_lock(v4);
  v5 = v1 + 24;
  swift_beginAccess();
  sub_1D469C5EC(v1 + 24, (uint64_t)v10, (uint64_t *)&unk_1ED98D5A0);
  if (v11 == 255)
  {
    sub_1D46992EC((uint64_t)v10, (uint64_t *)&unk_1ED98D5A0);
    v6 = *(void (**)(__int128 *__return_ptr, uint64_t))(v1 + 72);
    if (v6)
    {
      v7 = swift_retain();
      v6(v10, v7);
      if (v2)
      {
        v12[0] = v2;
        v13 = 1;
        swift_beginAccess();
        v8 = v2;
        sub_1D474A5D0((uint64_t)v12, v5, (uint64_t *)&unk_1ED98D5A0);
        swift_endAccess();
        swift_willThrow();
        sub_1D46A56B4((uint64_t)v6);
      }
      else
      {
        sub_1D46A56B4((uint64_t)v6);
        sub_1D46AAF28((uint64_t)v10, (uint64_t)v12);
        v13 = 0;
        swift_beginAccess();
        sub_1D474A5D0((uint64_t)v12, v5, (uint64_t *)&unk_1ED98D5A0);
        swift_endAccess();
        sub_1D46B2A10(v10, a1);
      }
    }
    else
    {
      sub_1D46C5874();
      swift_allocError();
      *v9 = 0;
      swift_willThrow();
    }
  }
  else
  {
    sub_1D46B3464((uint64_t)v10, (uint64_t)v12, &qword_1ED98D598);
    sub_1D469C5EC((uint64_t)v12, (uint64_t)v10, &qword_1ED98D598);
    if ((v11 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98ECF0);
      swift_willThrowTypedImpl();
    }
    else
    {
      sub_1D46B2A10(v10, a1);
    }
    sub_1D46992EC((uint64_t)v12, &qword_1ED98D598);
  }
  os_unfair_lock_unlock(v4);
}

_QWORD *sub_1D48C4E2C()
{
  return sub_1D48C4E98((void (*)(_QWORD, _QWORD *))sub_1D46A56B4, (void (*)(uint64_t, uint64_t))sub_1D46E3BF4);
}

_QWORD *sub_1D48C4E50()
{
  return sub_1D48C4E98((void (*)(_QWORD, _QWORD *))sub_1D48C6438, (void (*)(uint64_t, uint64_t))sub_1D48C62D8);
}

_QWORD *sub_1D48C4E74()
{
  return sub_1D48C57D0((void (*)(_QWORD, _QWORD *))sub_1D46A56B4, (void (*)(uint64_t, uint64_t))sub_1D48C6340);
}

_QWORD *sub_1D48C4E98(void (*a1)(_QWORD, _QWORD *), void (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  int v9;
  void (*v10)(_QWORD **__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;

  v6 = v2;
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 80) + 16);
  os_unfair_lock_lock(v7);
  v8 = (_QWORD *)(v2 + 24);
  swift_beginAccess();
  v9 = *(unsigned __int8 *)(v6 + 32);
  if (v9 == 255)
  {
    v10 = *(void (**)(_QWORD **__return_ptr, uint64_t))(v6 + 40);
    if (v10)
    {
      v8 = *(_QWORD **)(v6 + 48);
      v11 = swift_retain();
      v10(&v20, v11);
      if (v3)
      {
        v12 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = v3;
        v13 = *(unsigned __int8 *)(v6 + 32);
        *(_BYTE *)(v6 + 32) = 1;
        v14 = v3;
        a2(v12, v13);
        swift_willThrow();
        a1(v10, v8);
      }
      else
      {
        a1(v10, v8);
        v8 = v20;
        v17 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = v20;
        v18 = *(unsigned __int8 *)(v6 + 32);
        *(_BYTE *)(v6 + 32) = 0;
        swift_bridgeObjectRetain();
        a2(v17, v18);
      }
    }
    else
    {
      sub_1D46C5874();
      swift_allocError();
      *v16 = 0;
      swift_willThrow();
    }
  }
  else
  {
    v8 = (_QWORD *)*v8;
    if ((v9 & 1) != 0)
    {
      v20 = v8;
      v15 = v8;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98ECF0);
      swift_willThrowTypedImpl();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
  }
  os_unfair_lock_unlock(v7);
  return v8;
}

void sub_1D48C5048(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  os_unfair_lock_t v29;

  v26 = a1;
  v2 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  MEMORY[0x1E0C80A78](v2);
  v25 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98ED30);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v24 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98ED28);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v24 - v15;
  v29 = (os_unfair_lock_t)(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184)) + 16);
  os_unfair_lock_lock(v29);
  v17 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 152);
  swift_beginAccess();
  sub_1D469C5EC(v17, (uint64_t)v9, &qword_1ED98ED30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1D46992EC((uint64_t)v9, &qword_1ED98ED30);
    v18 = *(void (**)(uint64_t))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160));
    if (v18)
    {
      v19 = swift_retain();
      v20 = (uint64_t)v25;
      v21 = v27;
      v18(v19);
      if (v21)
      {
        *v7 = v21;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
        swift_beginAccess();
        v22 = v21;
        sub_1D474A5D0((uint64_t)v7, v17, &qword_1ED98ED30);
        swift_endAccess();
        swift_willThrow();
        sub_1D46A56B4((uint64_t)v18);
      }
      else
      {
        sub_1D46A56B4((uint64_t)v18);
        sub_1D48C63A8(v20, (uint64_t)v7);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
        swift_beginAccess();
        sub_1D474A5D0((uint64_t)v7, v17, &qword_1ED98ED30);
        swift_endAccess();
        sub_1D48C63EC(v20, v26);
      }
    }
    else
    {
      sub_1D46C5874();
      swift_allocError();
      *v23 = 0;
      swift_willThrow();
    }
  }
  else
  {
    sub_1D46B3464((uint64_t)v9, (uint64_t)v16, &qword_1ED98ED28);
    sub_1D469C5EC((uint64_t)v16, (uint64_t)v14, &qword_1ED98ED28);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v28 = *v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98ECF0);
      swift_willThrowTypedImpl();
    }
    else
    {
      sub_1D48C63EC((uint64_t)v14, v26);
    }
    sub_1D46992EC((uint64_t)v16, &qword_1ED98ED28);
  }
  os_unfair_lock_unlock(v29);
}

void sub_1D48C53F0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  void **v4;
  int v5;
  void (*v6)(void **__return_ptr, uint64_t);
  uint64_t v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  void *v11;
  id v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  void *v17;

  v2 = v0;
  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 80) + 16);
  os_unfair_lock_lock(v3);
  v4 = (void **)(v0 + 24);
  swift_beginAccess();
  v5 = *(unsigned __int8 *)(v2 + 32);
  if (v5 != 255)
  {
    v11 = *v4;
    if ((v5 & 1) == 0)
    {
      v11;
      os_unfair_lock_unlock(v3);
      return;
    }
    v17 = v11;
    v12 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98ECF0);
    swift_willThrowTypedImpl();
    goto LABEL_9;
  }
  v6 = *(void (**)(void **__return_ptr, uint64_t))(v2 + 40);
  if (!v6)
  {
    sub_1D46C5874();
    swift_allocError();
    *v13 = 0;
    swift_willThrow();
    goto LABEL_9;
  }
  v7 = swift_retain();
  v6(&v17, v7);
  if (v1)
  {
    v8 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v1;
    v9 = *(_BYTE *)(v2 + 32);
    *(_BYTE *)(v2 + 32) = 1;
    v10 = v1;
    sub_1D46C58B8(v8, v9);
    swift_willThrow();
    sub_1D46A56B4((uint64_t)v6);
LABEL_9:
    os_unfair_lock_unlock(v3);
    return;
  }
  sub_1D46A56B4((uint64_t)v6);
  v14 = v17;
  v15 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = v17;
  v16 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v2 + 32) = 0;
  v14;
  sub_1D46C58B8(v15, v16);
  os_unfair_lock_unlock(v3);
}

_QWORD *sub_1D48C55A0()
{
  return sub_1D48C57D0((void (*)(_QWORD, _QWORD *))sub_1D46A56B4, (void (*)(uint64_t, uint64_t))sub_1D48C6434);
}

_QWORD *sub_1D48C55C4()
{
  return sub_1D48C560C((void (*)(_QWORD, _QWORD *))sub_1D48C6438, (void (*)(uint64_t, uint64_t, uint64_t))sub_1D48C6378);
}

_QWORD *sub_1D48C55E8()
{
  return sub_1D48C560C((void (*)(_QWORD, _QWORD *))sub_1D48C6438, (void (*)(uint64_t, uint64_t, uint64_t))sub_1D48C6440);
}

_QWORD *sub_1D48C560C(void (*a1)(_QWORD, _QWORD *), void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  int v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;

  v6 = v2;
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 88) + 16);
  os_unfair_lock_lock(v7);
  v8 = (_QWORD *)(v2 + 24);
  swift_beginAccess();
  v9 = *(unsigned __int8 *)(v6 + 40);
  if (v9 == 255)
  {
    v10 = *(void (**)(_QWORD *__return_ptr, uint64_t))(v6 + 48);
    if (v10)
    {
      v8 = *(_QWORD **)(v6 + 56);
      v11 = swift_retain();
      v10(v22, v11);
      if (v3)
      {
        v12 = *(_QWORD *)(v6 + 32);
        v23 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = v3;
        *(_QWORD *)(v6 + 32) = 0;
        v13 = *(unsigned __int8 *)(v6 + 40);
        *(_BYTE *)(v6 + 40) = 1;
        v14 = v3;
        a2(v23, v12, v13);
        swift_willThrow();
        a1(v10, v8);
      }
      else
      {
        a1(v10, v8);
        v8 = (_QWORD *)v22[0];
        v17 = v22[1];
        v18 = *(_QWORD *)(v6 + 24);
        v19 = *(_QWORD *)(v6 + 32);
        *(_QWORD *)(v6 + 24) = v22[0];
        *(_QWORD *)(v6 + 32) = v17;
        v20 = *(unsigned __int8 *)(v6 + 40);
        *(_BYTE *)(v6 + 40) = 0;
        swift_unknownObjectRetain();
        a2(v18, v19, v20);
      }
    }
    else
    {
      sub_1D46C5874();
      swift_allocError();
      *v16 = 0;
      swift_willThrow();
    }
  }
  else
  {
    v8 = (_QWORD *)*v8;
    if ((v9 & 1) != 0)
    {
      v22[0] = v8;
      v15 = v8;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98ECF0);
      swift_willThrowTypedImpl();
    }
    else
    {
      swift_unknownObjectRetain();
    }
  }
  os_unfair_lock_unlock(v7);
  return v8;
}

_QWORD *sub_1D48C57D0(void (*a1)(_QWORD, _QWORD *), void (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  int v9;
  void (*v10)(_QWORD **__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;

  v6 = v2;
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 80) + 16);
  os_unfair_lock_lock(v7);
  v8 = (_QWORD *)(v2 + 24);
  swift_beginAccess();
  v9 = *(unsigned __int8 *)(v6 + 32);
  if (v9 == 255)
  {
    v10 = *(void (**)(_QWORD **__return_ptr, uint64_t))(v6 + 40);
    if (v10)
    {
      v8 = *(_QWORD **)(v6 + 48);
      v11 = swift_retain();
      v10(&v20, v11);
      if (v3)
      {
        v12 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = v3;
        v13 = *(unsigned __int8 *)(v6 + 32);
        *(_BYTE *)(v6 + 32) = 1;
        v14 = v3;
        a2(v12, v13);
        swift_willThrow();
        a1(v10, v8);
      }
      else
      {
        a1(v10, v8);
        v8 = v20;
        v17 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = v20;
        v18 = *(unsigned __int8 *)(v6 + 32);
        *(_BYTE *)(v6 + 32) = 0;
        swift_retain();
        a2(v17, v18);
      }
    }
    else
    {
      sub_1D46C5874();
      swift_allocError();
      *v16 = 0;
      swift_willThrow();
    }
  }
  else
  {
    v8 = (_QWORD *)*v8;
    if ((v9 & 1) != 0)
    {
      v20 = v8;
      v15 = v8;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98ECF0);
      swift_willThrowTypedImpl();
    }
    else
    {
      swift_retain();
    }
  }
  os_unfair_lock_unlock(v7);
  return v8;
}

id VITextLookupFlowCompatible.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id VITextLookupFlowCompatible.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  objc_super v5;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98E4A0);
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = -1;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EB70);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 40) = sub_1D48C5A78;
  *(_QWORD *)(v1 + 48) = 0;
  v3 = v0;
  swift_retain();
  sub_1D46A56B4(0);
  *(_QWORD *)(v1 + 72) = 0;
  swift_release();
  *(_QWORD *)&v3[OBJC_IVAR____TtC18VisualIntelligence26VITextLookupFlowCompatible_flow] = sub_1D4835CD8();

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for VITextLookupFlowCompatible();
  return objc_msgSendSuper2(&v5, sel_init);
}

_QWORD *sub_1D48C5A78@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;

  result = sub_1D479D220();
  if (!v1)
    *a1 = result;
  return result;
}

id sub_1D48C5B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v9[22];

  v5 = sub_1D4922370();
  MEMORY[0x1E0C80A78](v5);
  sub_1D48C57D0((void (*)(_QWORD, _QWORD *))sub_1D48C6438, (void (*)(uint64_t, uint64_t))sub_1D48C6434);
  sub_1D46D2684(v9);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  swift_retain();
  v7 = sub_1D479B94C((uint64_t)v9, (uint64_t)sub_1D48C5FFC, v6);
  swift_release();
  swift_release();
  sub_1D48C6008((uint64_t)v9);
  return v7;
}

void sub_1D48C5D08(void *a1, char a2, void (*a3)(id, void *))
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void (*v12)(id);
  id v13;

  v6 = objc_allocWithZone((Class)VITextLookupResult);
  if ((a2 & 1) != 0)
  {
    v8 = a1;
    sub_1D48C6304();
    v9 = (void *)sub_1D4922814();
    v10 = objc_msgSend(v6, sel_initWithSections_, v9);

    v11 = a1;
    a3(v10, a1);
    v12 = (void (*)(id))MEMORY[0x1E0DEEB08];
    sub_1D48C636C(a1, 1, (void (*)(id))MEMORY[0x1E0DEEB08]);

    sub_1D48C636C(a1, 1, v12);
  }
  else
  {
    sub_1D48C6304();
    swift_bridgeObjectRetain();
    v7 = (void *)sub_1D4922814();
    sub_1D48C636C(a1, 0, (void (*)(id))MEMORY[0x1E0DEEB08]);
    v13 = objc_msgSend(v6, sel_initWithSections_, v7);

    a3(v13, 0);
  }
}

id VITextLookupFlowCompatible.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VITextLookupFlowCompatible();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D48C5F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98E4A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = -1;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EB70);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v6 + 80) = v7;
  *(_QWORD *)(v6 + 40) = a2;
  *(_QWORD *)(v6 + 48) = a3;
  swift_retain();
  swift_retain();
  sub_1D46A56B4(0);
  *(_QWORD *)(v6 + 72) = a1;
  swift_release();
  return sub_1D4835CD8();
}

uint64_t type metadata accessor for VITextLookupFlowCompatible()
{
  return objc_opt_self();
}

uint64_t sub_1D48C5FD8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1D48C5FFC(void *a1, char a2)
{
  uint64_t v2;

  sub_1D48C5D08(a1, a2 & 1, *(void (**)(id, void *))(v2 + 16));
}

uint64_t sub_1D48C6008(uint64_t a1)
{
  destroy for TextLookupQuery(a1);
  return a1;
}

uint64_t method lookup function for VITextLookupFlowCompatible()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VITextLookupFlowCompatible.lookupText(query:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

id sub_1D48C6064(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v9[22];

  v4 = sub_1D4922370();
  MEMORY[0x1E0C80A78](v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a3;
  _Block_copy(a3);
  sub_1D48C57D0((void (*)(_QWORD, _QWORD *))sub_1D48C6438, (void (*)(uint64_t, uint64_t))sub_1D48C6434);
  sub_1D46D2684(v9);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_1D48C62D0;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  v7 = sub_1D479B94C((uint64_t)v9, (uint64_t)sub_1D48C6444, v6);
  swift_release();
  swift_release();
  sub_1D48C6008((uint64_t)v9);
  swift_release();
  return v7;
}

uint64_t sub_1D48C62AC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1D48C62D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1D487DD50(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_1D48C62D8(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_1D48C636C(a1, a2 & 1, (void (*)(id))MEMORY[0x1E0DEEB08]);
}

unint64_t sub_1D48C6304()
{
  unint64_t result;

  result = qword_1EFEAA8C8;
  if (!qword_1EFEAA8C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EFEAA8C8);
  }
  return result;
}

void sub_1D48C6340(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_1D48C636C(a1, a2 & 1, (void (*)(id))MEMORY[0x1E0DEEE30]);
}

void sub_1D48C636C(id a1, char a2, void (*a3)(id))
{
  if ((a2 & 1) != 0)

  else
    a3(a1);
}

void sub_1D48C6378(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    sub_1D48C639C(a1, a2, a3 & 1);
}

void sub_1D48C639C(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_unknownObjectRelease();
}

uint64_t sub_1D48C63A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D48C63EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Argos_Protos_Queryflow_GeoFenceDomainAssignmentRule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1D48C6448(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[6];
  _BYTE v32[40];
  void *v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v14 = type metadata accessor for MLModelInfo(0);
  sub_1D469A2F4(*(_BYTE *)(a3 + *(int *)(v14 + 32)));
  v15 = *((_QWORD *)a1 + 18);
  type metadata accessor for DurationMeasurement();
  swift_allocObject();
  swift_retain();
  v16 = sub_1D47C12D0((uint64_t)v32, v15);
  swift_release();
  sub_1D46AAF28(a2, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98D830);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v30 = a7;
    v17 = v33;
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = v16;
    v18[3] = a5;
    v18[4] = a6;
    v19 = objc_allocWithZone(MEMORY[0x1E0CEDE18]);
    aBlock[4] = sub_1D48C7E88;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1D48C6E08;
    aBlock[3] = &block_descriptor_15;
    v20 = _Block_copy(aBlock);
    v21 = a4;
    v22 = v17;
    swift_retain();
    swift_retain();
    swift_release();
    v23 = objc_msgSend(v19, sel_initWithModel_completionHandler_, v22, v20);

    _Block_release(v20);
    objc_msgSend(v23, sel_setImageCropAndScaleOption_, v21);
    v24 = a1[5];
    v25 = a1[6];
    v26 = a1[7];
    v27 = a1[8];
    v28 = v23;
    v36.origin.x = 0.0;
    v36.origin.y = 0.0;
    v36.size.width = 1.0;
    v36.size.height = 1.0;
    v34.origin.x = v24;
    v34.origin.y = v25;
    v34.size.width = v26;
    v34.size.height = v27;
    v35 = CGRectIntersection(v34, v36);
    objc_msgSend(v28, sel_setRegionOfInterest_, v35.origin.x, v35.origin.y, v35.size.width, v35.size.height);

    v30[3] = &type metadata for VisionModelRequest;
    v30[4] = &off_1E9802030;
    swift_release();

    *v30 = v28;
  }
  else
  {
    sub_1D46AAFD4();
    swift_allocError();
    *(_QWORD *)v29 = 0xD00000000000001BLL;
    *(_QWORD *)(v29 + 8) = 0x80000001D49407D0;
    *(_BYTE *)(v29 + 16) = 3;
    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_1D48C66F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t (**v30)(uint64_t, void *);
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  char v39[40];
  CGRect v40;

  *(_QWORD *)&v36 = a5;
  v37 = a3;
  v38 = a7;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D968);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for EspressoModel(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v36 - v19;
  sub_1D46AAF28(a2, (uint64_t)v39);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98D830);
  v21 = swift_dynamicCast();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v21)
  {
    v22(v13, 0, 1, v14);
    sub_1D47818DC((uint64_t)v13, (uint64_t)v20);
    sub_1D469C304((uint64_t)v20, (uint64_t)v18, type metadata accessor for EspressoModel);
    v23 = *(_QWORD *)(a1 + 144);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v36;
    *(_QWORD *)(v24 + 24) = a6;
    v25 = qword_1ED98CC88;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v26 = a4;
    if (v25 != -1)
      swift_once();
    v36 = xmmword_1ED98CC60;
    v27 = xmmword_1ED98CC70;
    type metadata accessor for EspressoRequest(0);
    v28 = swift_allocObject();
    sub_1D469C304((uint64_t)v18, v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_model, type metadata accessor for EspressoModel);
    *(_QWORD *)(v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_features) = 0;
    *(_QWORD *)(v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_vnScalingMode) = v37;
    v29 = (__int128 *)(v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_regionOfInterest);
    *v29 = v36;
    v29[1] = v27;
    *(_QWORD *)(v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_outputs) = v26;
    v30 = (uint64_t (**)(uint64_t, void *))(v28
                                                   + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_completionHandler);
    *v30 = sub_1D48C7ED0;
    v30[1] = (uint64_t (*)(uint64_t, void *))v24;
    v31 = qword_1ED98D918;
    swift_retain();
    if (v31 != -1)
      swift_once();
    v32 = qword_1ED9A4A78;
    swift_retain();
    swift_release();
    sub_1D4697DE0((uint64_t)v18, type metadata accessor for EspressoModel);
    *(_QWORD *)(v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_engineResult) = v32;
    *(_BYTE *)(v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_usesCPUOnly) = 0;
    *(_QWORD *)(v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_metricsBucket) = v23;
    v40.origin.x = 0.0;
    v40.origin.y = 0.0;
    v40.size.width = 1.0;
    v40.size.height = 1.0;
    *(CGRect *)(v28 + OBJC_IVAR____TtC18VisualIntelligence15EspressoRequest_regionOfInterest) = CGRectIntersection(*(CGRect *)(a1 + 40), v40);
    v33 = v38;
    v38[3] = (uint64_t)&type metadata for EspressoModelRequest;
    v33[4] = (uint64_t)&off_1E98024E0;
    *v33 = v28;
    return sub_1D4697DE0((uint64_t)v20, type metadata accessor for EspressoModel);
  }
  else
  {
    v22(v13, 1, 1, v14);
    sub_1D46992EC((uint64_t)v13, &qword_1ED98D968);
    sub_1D46AAFD4();
    swift_allocError();
    *(_QWORD *)v35 = 0xD00000000000001BLL;
    *(_QWORD *)(v35 + 8) = 0x80000001D49407D0;
    *(_BYTE *)(v35 + 16) = 3;
    return swift_willThrow();
  }
}

uint64_t sub_1D48C6AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[40];
  CGRect v18;

  sub_1D46AAF28(a2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED98D830);
  type metadata accessor for E5Model();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 144);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a4;
    *(_QWORD *)(v12 + 24) = a5;
    type metadata accessor for E5Request();
    swift_allocObject();
    swift_retain();
    swift_retain();
    v13 = swift_retain();
    v14 = sub_1D471FEB4(v13, a3, 0, v11, (uint64_t)sub_1D48C7EF8, v12);
    swift_release();
    swift_release();
    v18.origin.x = 0.0;
    v18.origin.y = 0.0;
    v18.size.width = 1.0;
    v18.size.height = 1.0;
    *(CGRect *)(v14 + 56) = CGRectIntersection(*(CGRect *)(a1 + 40), v18);
    a6[3] = (uint64_t)&type metadata for E5ModelRequest;
    a6[4] = (uint64_t)&off_1E9800718;
    result = swift_release();
    *a6 = v14;
  }
  else
  {
    sub_1D46AAFD4();
    swift_allocError();
    *(_QWORD *)v16 = 0xD00000000000001BLL;
    *(_QWORD *)(v16 + 8) = 0x80000001D49407D0;
    *(_BYTE *)(v16 + 16) = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D48C6C8C(void *a1, void *a2, uint64_t a3, void (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD v12[5];
  char v13;

  sub_1D47C0B30();
  if (a2)
  {
    sub_1D46AAFD4();
    v7 = swift_allocError();
    *(_QWORD *)v8 = a2;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 1;
    v12[0] = v7;
    v13 = 1;
    v9 = a2;
  }
  else
  {
    v12[3] = sub_1D46AAE80();
    v12[4] = &off_1E9804848;
    v12[0] = a1;
    v13 = 0;
    v10 = a1;
  }
  a4(v12);
  return sub_1D46992EC((uint64_t)v12, &qword_1ED98ED08);
}

uint64_t sub_1D48C6D50(uint64_t a1, void *a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v14[5];
  char v15;

  if (a2)
  {
    sub_1D46AAFD4();
    v8 = swift_allocError();
    *(_QWORD *)v9 = a2;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 1;
    v14[0] = v8;
    v15 = 1;
    v10 = a2;
  }
  else
  {
    v14[3] = a5(0);
    v14[4] = a6;
    v14[0] = a1;
    v15 = 0;
    swift_retain();
  }
  a3(v14);
  return sub_1D46992EC((uint64_t)v14, &qword_1ED98ED08);
}

void sub_1D48C6E08(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

_QWORD *sub_1D48C6E7C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;

  if ((a1 & 2) != 0)
  {
    v19 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for MLModelInfo(0) + 40));
    if (v19 && *(_QWORD *)(v19 + 16))
    {
      swift_bridgeObjectRetain();
      v20 = sub_1D47CA4DC(a5, a6);
      if ((v21 & 1) != 0)
      {
        v11 = *(_QWORD **)(*(_QWORD *)(v19 + 56) + 8 * v20);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((a1 & 1) == 0)
          return v11;
LABEL_3:
        v12 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for MLModelInfo(0) + 40));
        if (v12 && *(_QWORD *)(v12 + 16))
        {
          swift_bridgeObjectRetain();
          v13 = sub_1D47CA4DC(a3, a4);
          if ((v14 & 1) != 0)
          {
            v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v11)
            {
              swift_bridgeObjectRetain();
              v16 = sub_1D4893020(v15, v11);
              if (v6)
              {
                swift_bridgeObjectRelease_n();
LABEL_18:
                swift_bridgeObjectRelease();
                return v11;
              }
              v25 = v16;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              return (_QWORD *)v25;
            }
            return (_QWORD *)v15;
          }
          swift_bridgeObjectRelease();
        }
        sub_1D4922B80();
        swift_bridgeObjectRelease();
        sub_1D492270C();
        sub_1D47B1E50();
        swift_allocError();
        *v23 = 0xD000000000000017;
        v23[1] = 0x80000001D49480A0;
        swift_willThrow();
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
    }
    sub_1D4922B80();
    swift_bridgeObjectRelease();
    sub_1D492270C();
    v11 = (_QWORD *)0x80000001D49480A0;
    sub_1D47B1E50();
    swift_allocError();
    *v22 = 0xD000000000000017;
    v22[1] = 0x80000001D49480A0;
    swift_willThrow();
  }
  else
  {
    v11 = 0;
    if ((a1 & 1) != 0)
      goto LABEL_3;
  }
  return v11;
}

uint64_t sub_1D48C70EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  void *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t result;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;

  v7 = sub_1D4922370();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    goto LABEL_115;
  v11 = sub_1D48C6E7C(a2, a3, 0x6972656767697274, 0xEA0000000000676ELL, 0x74696E676F636572, 0xEB000000006E6F69);
  if (v3)
    return v12 & 1;
  v13 = v11;
  v101 = a3;
  if (!v11)
  {
LABEL_115:
    v12 = 0;
    return v12 & 1;
  }
  v103 = v10;
  v104 = v8;
  v14 = swift_bridgeObjectRetain();
  v15 = sub_1D488FC04(v14);
  swift_bridgeObjectRelease();
  v108 = *(_QWORD *)(v15 + 16);
  if (!v108)
  {
LABEL_112:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = 1;
    return v12 & 1;
  }
  v17 = 0;
  v107 = v15 + 32;
  v98 = "neric";
  v96 = 0;
  v97 = 0x80000001D493F830;
  *(_QWORD *)&v16 = 136315138;
  v100 = v16;
  v99 = MEMORY[0x1E0DEE9B8] + 8;
  v102 = v13;
  v105 = v7;
  v106 = v15;
  v18 = v15;
  while (1)
  {
    if (v17 >= *(_QWORD *)(v18 + 16))
    {
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
    v19 = (uint64_t *)(v107 + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = v13[2];
    swift_bridgeObjectRetain();
    if (v22)
      break;
LABEL_34:
    if (qword_1ED98F398 != -1)
      swift_once();
    v110 = v20;
    v113 = v17;
    if (byte_1ED98F388 != 1)
    {
LABEL_78:
      v67 = v13;
      v68 = v18;
      v69 = qword_1ED98F3B0;
      if (qword_1ED98F3D0 != -1)
      {
        swift_once();
        v69 = qword_1ED98F3B0;
      }
      goto LABEL_80;
    }
    v44 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v45 = objc_msgSend(v44, sel_bundleIdentifier);

    if (v45)
    {
      v46 = sub_1D492261C();
      v48 = v47;

      if (v46 == 0xD00000000000002BLL && v48 == v97)
      {
        swift_bridgeObjectRelease();
LABEL_71:
        v64 = &qword_1EFEAA908;
        if (qword_1EFEA9C20 != -1)
        {
          swift_once();
          v64 = &qword_1EFEAA908;
        }
        goto LABEL_75;
      }
      v63 = sub_1D4922E38();
      swift_bridgeObjectRelease();
      if ((v63 & 1) != 0)
        goto LABEL_71;
    }
    v64 = (uint64_t *)&off_1ED98F3F0;
    if (qword_1ED98F3A8 != -1)
    {
      swift_once();
      v64 = (uint64_t *)&off_1ED98F3F0;
    }
LABEL_75:
    v65 = *(void **)(*v64 + 32);
    swift_retain();
    v66 = (void *)sub_1D49225F8();
    LODWORD(v65) = objc_msgSend(v65, sel_BOOLForKey_, v66);
    swift_release();

    v7 = v105;
    v18 = v106;
    if (!(_DWORD)v65)
      goto LABEL_78;
    v67 = v13;
    v68 = v106;
    v69 = qword_1EFEAAA30;
    if (qword_1EFEA9C78 != -1)
    {
      swift_once();
      v69 = qword_1EFEAAA30;
    }
LABEL_80:
    v70 = __swift_project_value_buffer(v7, (uint64_t)v69);
    v71 = v103;
    v72 = v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v103, v70, v7);
    swift_bridgeObjectRetain();
    v73 = sub_1D4922358();
    v74 = sub_1D4922910();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = swift_slowAlloc();
      v76 = swift_slowAlloc();
      v111 = v76;
      *(_DWORD *)v75 = v100;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v75 + 4) = sub_1D47F0250(v110, v21, &v111);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D467C000, v73, v74, "No model urn suffix for %s", (uint8_t *)v75, 0xCu);
      swift_arrayDestroy();
      v77 = v76;
      v13 = v102;
      MEMORY[0x1D82635B8](v77, -1, -1);
      v78 = v75;
      v7 = v105;
      v79 = v106;
      MEMORY[0x1D82635B8](v78, -1, -1);

      v80 = v71;
      v18 = v79;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v80, v7);
      v17 = v113;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v7);
      v17 = v113;
      v18 = v68;
      v13 = v67;
    }
LABEL_7:
    if (++v17 == v108)
      goto LABEL_112;
  }
  swift_bridgeObjectRetain();
  sub_1D47CA4DC(v20, v21);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  v24 = (uint64_t *)(v101 + *(int *)(type metadata accessor for MLModelInfo(0) + 24));
  v25 = v24[1];
  v111 = *v24;
  v112 = v25;
  swift_bridgeObjectRetain();
  sub_1D492270C();
  swift_bridgeObjectRelease();
  v26 = v111;
  v27 = v112;
  v28 = *(_QWORD *)(a1 + 16);
  v109 = v111;
  v110 = v112;
  if (!v28)
  {
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v49 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v49)
      goto LABEL_48;
LABEL_44:
    if (v31[5] == v26 && v31[6] == v27 || (sub_1D4922E38() & 1) != 0)
    {
LABEL_99:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v49 == 1)
        goto LABEL_48;
      v81 = v17;
      v82 = v31 + 9;
      v83 = 1;
      v84 = v110;
      while (1)
      {
        v85 = v83 + 1;
        if (__OFADD__(v83, 1))
          goto LABEL_128;
        v86 = *(v82 - 1) == v109 && *v82 == v84;
        if (v86 || (sub_1D4922E38() & 1) != 0)
          break;
        v82 += 3;
        ++v83;
        v84 = v110;
        if (v85 == v49)
        {
          swift_bridgeObjectRelease();
          v13 = v102;
          v7 = v105;
          v18 = v106;
          v17 = v81;
          if (!v28)
            goto LABEL_92;
LABEL_49:
          swift_bridgeObjectRetain();
          v50 = 72;
          v51 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          while (2)
          {
            v52 = *(_QWORD *)(a1 + v50);
            v53 = *(_QWORD *)(v52 + 16);
            v54 = v51[2];
            v55 = v54 + v53;
            if (__OFADD__(v54, v53))
              goto LABEL_120;
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
            if ((_DWORD)isUniquelyReferenced_nonNull_native && v55 <= v51[3] >> 1)
            {
              if (!*(_QWORD *)(v52 + 16))
              {
LABEL_50:
                if (v53)
                  goto LABEL_121;
LABEL_51:
                swift_bridgeObjectRelease();
                v50 += 48;
                if (!--v28)
                {
                  swift_bridgeObjectRelease();
                  v13 = v102;
                  v7 = v105;
                  v18 = v106;
                  goto LABEL_93;
                }
                continue;
              }
            }
            else
            {
              if (v54 <= v55)
                v57 = v54 + v53;
              else
                v57 = v54;
              v51 = sub_1D48A933C(isUniquelyReferenced_nonNull_native, v57, 1, v51);
              if (!*(_QWORD *)(v52 + 16))
                goto LABEL_50;
            }
            break;
          }
          v58 = v51[2];
          if ((v51[3] >> 1) - v58 < v53)
          {
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }
          v59 = (unint64_t)&v51[3 * v58 + 4];
          if (v52 + 32 < v59 + 24 * v53 && v59 < v52 + 32 + 24 * v53)
            goto LABEL_129;
          swift_arrayInitWithCopy();
          if (v53)
          {
            v61 = v51[2];
            v42 = __OFADD__(v61, v53);
            v62 = v61 + v53;
            if (v42)
              goto LABEL_125;
            v51[2] = v62;
          }
          goto LABEL_51;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v102;
      v7 = v105;
      v18 = v106;
      v17 = v81;
    }
    goto LABEL_7;
  }
  v113 = v17;
  swift_bridgeObjectRetain();
  v29 = 64;
  v30 = v28;
  v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v32 = *(_QWORD *)(a1 + v29);
    v33 = *(_QWORD *)(v32 + 16);
    v34 = v31[2];
    v35 = v34 + v33;
    if (__OFADD__(v34, v33))
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_114;
    }
    swift_bridgeObjectRetain();
    v36 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)v36 && v35 <= v31[3] >> 1)
    {
      if (!*(_QWORD *)(v32 + 16))
        goto LABEL_13;
    }
    else
    {
      if (v34 <= v35)
        v37 = v34 + v33;
      else
        v37 = v34;
      v31 = sub_1D48A9218(v36, v37, 1, v31);
      if (!*(_QWORD *)(v32 + 16))
      {
LABEL_13:
        if (v33)
          goto LABEL_118;
        goto LABEL_14;
      }
    }
    v38 = v31[2];
    if ((v31[3] >> 1) - v38 < v33)
      goto LABEL_119;
    v39 = (unint64_t)&v31[3 * v38 + 4];
    if (v32 + 32 < v39 + 24 * v33 && v39 < v32 + 32 + 24 * v33)
      goto LABEL_129;
    swift_arrayInitWithCopy();
    if (v33)
    {
      v41 = v31[2];
      v42 = __OFADD__(v41, v33);
      v43 = v41 + v33;
      if (v42)
        goto LABEL_122;
      v31[2] = v43;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    v29 += 48;
    --v30;
  }
  while (v30);
  swift_bridgeObjectRelease();
  v13 = v102;
  v7 = v105;
  v18 = v106;
  v17 = v113;
  v26 = v109;
  v27 = v110;
  v49 = v31[2];
  if (v49)
    goto LABEL_44;
LABEL_48:
  swift_bridgeObjectRelease();
  if (v28)
    goto LABEL_49;
LABEL_92:
  v51 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_93:
  v87 = v51[2];
  if (!v87)
    goto LABEL_114;
  v88 = v51[4] == v109 && v51[5] == v110;
  if (v88 || (sub_1D4922E38() & 1) != 0)
    goto LABEL_99;
  if (v87 == 1)
  {
LABEL_114:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_115;
  }
  v89 = v17;
  v90 = v51 + 8;
  v91 = 1;
  v92 = v110;
  while (1)
  {
    v93 = v91 + 1;
    if (__OFADD__(v91, 1))
      break;
    v94 = *(v90 - 1) == v109 && *v90 == v92;
    if (v94 || (sub_1D4922E38() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v102;
      v17 = v89;
      goto LABEL_7;
    }
    v90 += 3;
    ++v91;
    v92 = v110;
    if (v93 == v87)
      goto LABEL_114;
  }
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  result = sub_1D4922C88();
  __break(1u);
  return result;
}

uint64_t sub_1D48C7B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  BOOL v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for MLModelInfo(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return 0;
  if ((a2 & 1) != 0)
  {
    v9 = (uint64_t *)(a3 + *(int *)(v6 + 24));
    v10 = *v9;
    v11 = v9[1];
    v12 = MEMORY[0x1E0DEE9D8];
    v41 = MEMORY[0x1E0DEE9D8];
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      v14 = 72;
      do
      {
        v15 = swift_bridgeObjectRetain();
        sub_1D48957C4(v15);
        v14 += 48;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
      v12 = v41;
    }
    v16 = *(_QWORD *)(v12 + 16);
    if (!v16)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return 0;
    }
    v17 = (_QWORD *)(v12 + 40);
    while (1)
    {
      v18 = *(v17 - 1) == v10 && *v17 == v11;
      if (v18 || (sub_1D4922E38() & 1) != 0)
        break;
      v17 += 3;
      if (!--v16)
        goto LABEL_15;
    }
    swift_bridgeObjectRelease();
  }
  if ((a2 & 2) == 0)
    return 1;
  v20 = (uint64_t *)(a3 + *(int *)(v6 + 24));
  v21 = *v20;
  v22 = v20[1];
  v23 = MEMORY[0x1E0DEE9D8];
  v41 = MEMORY[0x1E0DEE9D8];
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    swift_bridgeObjectRetain();
    v25 = 64;
    v26 = v24;
    do
    {
      v27 = swift_bridgeObjectRetain();
      sub_1D489566C(v27);
      v25 += 48;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    v23 = v41;
  }
  v28 = *(_QWORD *)(v23 + 16);
  if (!v28)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    sub_1D469C304(a3, (uint64_t)v8, type metadata accessor for MLModelInfo);
LABEL_45:
    sub_1D4697DE0((uint64_t)v8, type metadata accessor for MLModelInfo);
    return 0;
  }
  v29 = (_QWORD *)(v23 + 48);
  while (1)
  {
    v30 = *(v29 - 1) == v21 && *v29 == v22;
    if (v30 || (sub_1D4922E38() & 1) != 0)
      break;
    v29 += 3;
    if (!--v28)
      goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  sub_1D469C304(a3, (uint64_t)v8, type metadata accessor for MLModelInfo);
  v31 = &v8[*(int *)(v6 + 24)];
  v32 = *(_QWORD *)v31;
  v33 = *((_QWORD *)v31 + 1);
  v34 = MEMORY[0x1E0DEE9D8];
  v41 = MEMORY[0x1E0DEE9D8];
  if (v24)
  {
    swift_bridgeObjectRetain();
    v35 = 72;
    do
    {
      v36 = swift_bridgeObjectRetain();
      sub_1D48957C4(v36);
      v35 += 48;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v34 = v41;
  }
  v37 = *(_QWORD *)(v34 + 16);
  if (!v37)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  v38 = (_QWORD *)(v34 + 40);
  while (1)
  {
    v39 = *(v38 - 1) == v32 && *v38 == v33;
    if (v39 || (sub_1D4922E38() & 1) != 0)
      break;
    v38 += 3;
    if (!--v37)
      goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  sub_1D4697DE0((uint64_t)v8, type metadata accessor for MLModelInfo);
  return 1;
}

uint64_t sub_1D48C7E5C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D48C7E88(void *a1, void *a2)
{
  uint64_t v2;

  return sub_1D48C6C8C(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24));
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t sub_1D48C7EAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D48C7ED0(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1D48C6D50(a1, a2, *(void (**)(_QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), type metadata accessor for EspressoRequest, (uint64_t)&off_1E9800FE8);
}

uint64_t sub_1D48C7EF8(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1D48C6D50(a1, a2, *(void (**)(_QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD))type metadata accessor for E5Request, (uint64_t)&off_1E9804280);
}

uint64_t sub_1D48C7F24(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int *v39;
  uint64_t result;
  int v41;
  uint64_t v42;
  int *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v43 = (int *)((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v7);
  v44 = (int *)((char *)&v42 - v10);
  MEMORY[0x1E0C80A78](v9);
  v12 = (int *)((char *)&v42 - v11);
  v13 = type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CEE8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v42 = (uint64_t)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v45 = (uint64_t)&v42 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v42 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v42 - v24;
  v46 = *(int *)(v13 + 20);
  v26 = *(_QWORD *)(v2 + v46)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  sub_1D469C5EC(v26, (uint64_t)v25, &qword_1ED98CEE8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v26) = v27(v25, 1, v5);
  v28 = v2;
  sub_1D46992EC((uint64_t)v25, &qword_1ED98CEE8);
  sub_1D469C304(v2, (uint64_t)v15, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  if ((_DWORD)v26 == 1)
  {
    sub_1D4697DE0((uint64_t)v15, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
LABEL_15:
    *(double *)&result = 0.0;
    return result;
  }
  v29 = *(_QWORD *)&v15[*(int *)(v13 + 20)]
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  sub_1D469C5EC(v29, (uint64_t)v23, &qword_1ED98CEE8);
  if (v27(v23, 1, v5) == 1)
  {
    *v12 = 0;
    sub_1D4922010();
    sub_1D46992EC((uint64_t)v23, &qword_1ED98CEE8);
  }
  else
  {
    sub_1D469C630((uint64_t)v23, (uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  sub_1D4697DE0((uint64_t)v15, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  v30 = *v12;
  sub_1D4697DE0((uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  if (v30 < 1)
    goto LABEL_15;
  if (a2 >= a1)
    a2 = a1;
  v31 = v46;
  v32 = *(_QWORD *)(v28 + v46)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  v33 = v45;
  sub_1D469C5EC(v32, v45, &qword_1ED98CEE8);
  if (v27((char *)v33, 1, v5) == 1)
  {
    v34 = v44;
    *v44 = 0;
    sub_1D4922010();
    sub_1D46992EC(v33, &qword_1ED98CEE8);
  }
  else
  {
    v34 = v44;
    sub_1D469C630(v33, (uint64_t)v44, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  v35 = *v34;
  sub_1D4697DE0((uint64_t)v34, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  if (a2 <= (double)v35)
    goto LABEL_15;
  v36 = *(_QWORD *)(v28 + v31)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  v37 = v42;
  sub_1D469C5EC(v36, v42, &qword_1ED98CEE8);
  v38 = v27((char *)v37, 1, v5);
  v39 = v43;
  if (v38 == 1)
  {
    *v43 = 0;
    sub_1D4922010();
    sub_1D46992EC(v37, &qword_1ED98CEE8);
  }
  else
  {
    sub_1D469C630(v37, (uint64_t)v43, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  v41 = *v39;
  sub_1D4697DE0((uint64_t)v39, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  *(double *)&result = (double)v41;
  return result;
}

uint64_t sub_1D48C8384(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t i;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE *v39;
  char v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE v73[4];
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  _BYTE *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[28];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98E290);
  MEMORY[0x1E0C80A78](v5);
  v86 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v85 = type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig(0);
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v8 = &v73[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D130);
  v9 = MEMORY[0x1E0C80A78](v83);
  v82 = &v73[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A78](v9);
  v87 = &v73[-v12];
  MEMORY[0x1E0C80A78](v11);
  v81 = &v73[-v13];
  v14 = type metadata accessor for VisualUnderstanding.ImageRegion();
  MEMORY[0x1E0C80A78](v14);
  v17 = &v73[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = *a1;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
  {
    v74 = v18;
    v75 = v2;
    v20 = a2 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v21 = *(_QWORD *)(v15 + 72);
    v79 = a2;
    swift_bridgeObjectRetain();
    v22 = 0;
    v78 = v19;
    v77 = v20;
    v76 = v21;
    do
    {
      v80 = v22;
      sub_1D469C304(v20 + v21 * v22, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
      v23 = *((_QWORD *)v17 + 5);
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
      {
        swift_bridgeObjectRetain_n();
        v25 = *(_OWORD *)(v23 + 144);
        v94 = *(_OWORD *)(v23 + 128);
        v95 = v25;
        *(_OWORD *)v96 = *(_OWORD *)(v23 + 160);
        *(_OWORD *)&v96[12] = *(_OWORD *)(v23 + 172);
        v26 = *(_OWORD *)(v23 + 80);
        v90 = *(_OWORD *)(v23 + 64);
        v91 = v26;
        v27 = *(_OWORD *)(v23 + 112);
        v92 = *(_OWORD *)(v23 + 96);
        v93 = v27;
        v28 = *(_OWORD *)(v23 + 48);
        v88 = *(_OWORD *)(v23 + 32);
        v89 = v28;
        v29 = v24 - 1;
        for (i = 192; ; i += 160)
        {
          if (BYTE12(v95) == 1)
            __asm { BR              X8 }
          if (!v29)
            break;
          v31 = *(_OWORD *)(v23 + i + 16);
          v88 = *(_OWORD *)(v23 + i);
          v89 = v31;
          v32 = *(_OWORD *)(v23 + i + 32);
          v33 = *(_OWORD *)(v23 + i + 48);
          v34 = *(_OWORD *)(v23 + i + 80);
          v92 = *(_OWORD *)(v23 + i + 64);
          v93 = v34;
          v90 = v32;
          v91 = v33;
          v35 = *(_OWORD *)(v23 + i + 96);
          v36 = *(_OWORD *)(v23 + i + 112);
          v37 = *(_OWORD *)(v23 + i + 128);
          *(_OWORD *)&v96[12] = *(_OWORD *)(v23 + i + 140);
          v95 = v36;
          *(_OWORD *)v96 = v37;
          v94 = v35;
          --v29;
        }
        swift_bridgeObjectRelease_n();
        v19 = v78;
        v20 = v77;
        v21 = v76;
      }
      v22 = v80 + 1;
      sub_1D4697DE0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for VisualUnderstanding.ImageRegion);
    }
    while (v22 != v19);
    swift_bridgeObjectRelease();
    v2 = v75;
    v18 = v74;
  }
  v38 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0) + 20));
  v39 = (_BYTE *)(v38
                + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__enableDomainSelectionOnlyForE5);
  swift_beginAccess();
  if (*v39 != 1)
    goto LABEL_17;
  if (v18 > 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v40 = sub_1D4922E38();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v40 & 1) != 0)
  {
LABEL_17:
    swift_beginAccess();
    v42 = *(_QWORD *)(v38 + 16);
    v43 = *(_QWORD *)(v42 + 64);
    v79 = v42 + 64;
    v44 = 1 << *(_BYTE *)(v42 + 32);
    v45 = -1;
    if (v44 < 64)
      v45 = ~(-1 << v44);
    v46 = v45 & v43;
    v80 = (unint64_t)(v44 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v47 = 0;
    while (1)
    {
      if (v46)
      {
        v52 = __clz(__rbit64(v46));
        v46 &= v46 - 1;
        v53 = v52 | (v47 << 6);
      }
      else
      {
        v54 = v47 + 1;
        if (__OFADD__(v47, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        if (v54 >= v80)
          goto LABEL_45;
        v55 = *(_QWORD *)(v79 + 8 * v54);
        ++v47;
        if (!v55)
        {
          v47 = v54 + 1;
          if (v54 + 1 >= v80)
            goto LABEL_45;
          v55 = *(_QWORD *)(v79 + 8 * v47);
          if (!v55)
          {
            v47 = v54 + 2;
            if (v54 + 2 >= v80)
              goto LABEL_45;
            v55 = *(_QWORD *)(v79 + 8 * v47);
            if (!v55)
            {
              v47 = v54 + 3;
              if (v54 + 3 >= v80)
                goto LABEL_45;
              v55 = *(_QWORD *)(v79 + 8 * v47);
              if (!v55)
              {
                v47 = v54 + 4;
                if (v54 + 4 >= v80)
                  goto LABEL_45;
                v55 = *(_QWORD *)(v79 + 8 * v47);
                if (!v55)
                {
                  v56 = v54 + 5;
                  if (v56 >= v80)
                  {
LABEL_45:
                    swift_release();
                    swift_bridgeObjectRelease();
                    return 0;
                  }
                  v55 = *(_QWORD *)(v79 + 8 * v56);
                  if (!v55)
                  {
                    while (1)
                    {
                      v47 = v56 + 1;
                      if (__OFADD__(v56, 1))
                        break;
                      if (v47 >= v80)
                        goto LABEL_45;
                      v55 = *(_QWORD *)(v79 + 8 * v47);
                      ++v56;
                      if (v55)
                        goto LABEL_41;
                    }
LABEL_47:
                    __break(1u);
                    JUMPOUT(0x1D48C9080);
                  }
                  v47 = v56;
                }
              }
            }
          }
        }
LABEL_41:
        v46 = (v55 - 1) & v55;
        v53 = __clz(__rbit64(v55)) + (v47 << 6);
      }
      v57 = *(_QWORD *)(v42 + 56);
      v58 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * v53);
      v60 = *v58;
      v59 = v58[1];
      v61 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
      v62 = v57 + *(_QWORD *)(*(_QWORD *)(v61 - 8) + 72) * v53;
      v63 = v83;
      v64 = v81;
      sub_1D469C304(v62, (uint64_t)&v81[*(int *)(v83 + 48)], type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      *v64 = v60;
      v64[1] = v59;
      v65 = v87;
      sub_1D48C9150((uint64_t)v64, (uint64_t)v87);
      v66 = *(int *)(v63 + 48);
      v67 = v82;
      v68 = (uint64_t)v82 + v66;
      v69 = v65[1];
      *v82 = *v65;
      v67[1] = v69;
      sub_1D469C304((uint64_t)v65 + v66, v68, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      v70 = *(_QWORD *)(v68 + *(int *)(v61 + 20))
          + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__domainSelectionConfig;
      swift_beginAccess();
      v71 = v86;
      sub_1D469C5EC(v70, (uint64_t)v86, &qword_1ED98E290);
      v72 = v85;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v84 + 48))(v71, 1, v85) == 1)
      {
        *v8 = 0;
        v48 = MEMORY[0x1E0DEE9D8];
        *((_QWORD *)v8 + 1) = MEMORY[0x1E0DEE9D8];
        *((_QWORD *)v8 + 2) = v48;
        *((_DWORD *)v8 + 6) = 0;
        *((_QWORD *)v8 + 4) = 0;
        v8[40] = 1;
        swift_bridgeObjectRetain();
        sub_1D4922010();
        v49 = &v8[*(int *)(v72 + 40)];
        v50 = type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.RichLabelConfig(0);
        (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
        sub_1D46992EC((uint64_t)v71, &qword_1ED98E290);
      }
      else
      {
        sub_1D469C630((uint64_t)v71, (uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig);
        swift_bridgeObjectRetain();
      }
      sub_1D4697DE0(v68, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      v51 = *v8;
      sub_1D4697DE0((uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig);
      sub_1D46992EC((uint64_t)v87, &qword_1ED98D130);
      if (v51 == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1D48C9150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98D130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D48C9198(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int *v53;
  uint64_t result;
  int v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int *v60;
  uint64_t v61;
  int *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;

  v3 = v2;
  v6 = type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v59 = (int *)((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x1E0C80A78](v8);
  v60 = (int *)((char *)&v57 - v11);
  v12 = MEMORY[0x1E0C80A78](v10);
  v62 = (int *)((char *)&v57 - v13);
  MEMORY[0x1E0C80A78](v12);
  v66 = (int *)((char *)&v57 - v14);
  v15 = type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v63 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v57 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CEE8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v58 = (uint64_t)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v61 = (uint64_t)&v57 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v64 = (uint64_t)&v57 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v57 - v28;
  MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v57 - v30;
  v65 = *(int *)(v15 + 20);
  v32 = *(_QWORD *)(v3 + v65)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  sub_1D469C5EC(v32, (uint64_t)v31, &qword_1ED98CEE8);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v32) = v33(v31, 1, v6);
  sub_1D46992EC((uint64_t)v31, &qword_1ED98CEE8);
  sub_1D469C304(v3, (uint64_t)v19, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  if ((_DWORD)v32 == 1)
  {
    sub_1D4697DE0((uint64_t)v19, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
LABEL_18:
    *(double *)&result = 0.0;
    return result;
  }
  v34 = *(_QWORD *)&v19[*(int *)(v15 + 20)]
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  sub_1D469C5EC(v34, (uint64_t)v29, &qword_1ED98CEE8);
  v35 = v33(v29, 1, v6);
  v36 = v6;
  v37 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v33;
  v38 = v66;
  if (v35 == 1)
  {
    *v66 = 0;
    sub_1D4922010();
    sub_1D46992EC((uint64_t)v29, &qword_1ED98CEE8);
  }
  else
  {
    sub_1D469C630((uint64_t)v29, (uint64_t)v66, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  sub_1D4697DE0((uint64_t)v19, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  v39 = *v38;
  sub_1D4697DE0((uint64_t)v38, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  if (v39 < 1)
    goto LABEL_18;
  v40 = v65;
  v41 = *(_QWORD *)(v3 + v65)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  v42 = v64;
  sub_1D469C5EC(v41, v64, &qword_1ED98CEE8);
  if (v37(v42, 1, v36) == 1)
  {
    v43 = v62;
    *v62 = 0;
    sub_1D4922010();
    sub_1D46992EC(v42, &qword_1ED98CEE8);
  }
  else
  {
    v43 = v62;
    sub_1D469C630(v42, (uint64_t)v62, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  v44 = (uint64_t)v63;
  v45 = *v43;
  sub_1D4697DE0((uint64_t)v43, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  sub_1D469C304(v3, v44, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  if ((double)v45 >= a1)
  {
    sub_1D4697DE0(v44, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
    goto LABEL_18;
  }
  v46 = *(_QWORD *)(v44 + *(int *)(v15 + 20))
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  v47 = v61;
  sub_1D469C5EC(v46, v61, &qword_1ED98CEE8);
  if (v37(v47, 1, v36) == 1)
  {
    v48 = v60;
    *v60 = 0;
    sub_1D4922010();
    sub_1D46992EC(v47, &qword_1ED98CEE8);
  }
  else
  {
    v48 = v60;
    sub_1D469C630(v47, (uint64_t)v60, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  v49 = *v48;
  sub_1D4697DE0((uint64_t)v48, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  sub_1D4697DE0(v44, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  if ((double)v49 >= a2)
    goto LABEL_18;
  v50 = *(_QWORD *)(v3 + v40)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  v51 = v58;
  sub_1D469C5EC(v50, v58, &qword_1ED98CEE8);
  v52 = v37(v51, 1, v36);
  v53 = v59;
  if (v52 == 1)
  {
    *v59 = 0;
    sub_1D4922010();
    sub_1D46992EC(v51, &qword_1ED98CEE8);
  }
  else
  {
    sub_1D469C630(v51, (uint64_t)v59, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  v55 = *v53;
  sub_1D4697DE0((uint64_t)v53, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  if (a2 >= a1)
    v56 = a1;
  else
    v56 = a2;
  *(double *)&result = (double)v55 / v56 * a1;
  return result;
}

BOOL sub_1D48C97C4(unsigned __int8 *a1, double *a2, double *a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  float *v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unsigned __int8 *v53;
  double v54;
  char *v56;
  double v57;
  double v58;
  double v59;
  CGRect v60;
  CGRect v61;

  v6 = v5;
  v59 = a5;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CE90);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v56 - v15;
  v17 = *a1;
  v18 = *a2;
  v19 = a2[1];
  v20 = a2[2];
  v21 = a2[3];
  v22 = *a3;
  v23 = a3[1];
  v58 = a3[2];
  v57 = a3[3];
  v24 = *(int *)(type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0) + 20);
  v25 = *(_QWORD *)(v6 + v24);
  swift_beginAccess();
  v26 = *(_QWORD *)(v25 + 16);
  v27 = sub_1D46F8BC8(v17);
  v29 = v28;
  if (*(_QWORD *)(v26 + 16))
  {
    v30 = v27;
    swift_bridgeObjectRetain();
    v31 = sub_1D47CA4DC(v30, v29);
    if ((v32 & 1) != 0)
    {
      v33 = v31;
      v34 = *(_QWORD *)(v26 + 56);
      v35 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
      v56 = v14;
      v36 = v24;
      v37 = v6;
      v38 = v17;
      v39 = *(_QWORD *)(v35 - 8);
      sub_1D469C304(v34 + *(_QWORD *)(v39 + 72) * v33, (uint64_t)v16, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      v40 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56);
      v17 = v38;
      v6 = v37;
      v24 = v36;
      v14 = v56;
      v40(v16, 0, 1, v35);
    }
    else
    {
      v35 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v16, 1, 1, v35);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v16, 1, 1, v35);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
  v41 = *(_QWORD *)(v35 - 8);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  if (v42(v16, 1, v35) == 1)
  {
    sub_1D46992EC((uint64_t)v16, &qword_1ED98CE90);
  }
  else
  {
    v43 = (float *)(*(_QWORD *)&v16[*(int *)(v35 + 20)]
                  + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__minimumObjectSize);
    swift_beginAccess();
    v44 = *v43;
    sub_1D4697DE0((uint64_t)v16, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
    if (v44 > 0.0)
    {
      v45 = *(_QWORD *)(v6 + v24);
      goto LABEL_12;
    }
  }
  v45 = *(_QWORD *)(v6 + v24);
  swift_beginAccess();
  v44 = *(float *)(v45 + 28);
LABEL_12:
  swift_beginAccess();
  v46 = *(_QWORD *)(v45 + 16);
  v47 = sub_1D46F8BC8(v17);
  v49 = v48;
  if (*(_QWORD *)(v46 + 16))
  {
    v50 = v47;
    swift_bridgeObjectRetain();
    v51 = sub_1D47CA4DC(v50, v49);
    if ((v52 & 1) != 0)
    {
      sub_1D469C304(*(_QWORD *)(v46 + 56) + *(_QWORD *)(v41 + 72) * v51, (uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v14, 0, 1, v35);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v14, 1, 1, v35);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v14, 1, 1, v35);
  }
  swift_bridgeObjectRelease();
  if (v42(v14, 1, v35) == 1)
  {
    sub_1D46992EC((uint64_t)v14, &qword_1ED98CE90);
  }
  else
  {
    v53 = (unsigned __int8 *)(*(_QWORD *)&v14[*(int *)(v35 + 20)]
                            + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__useRefinedRegionAsObjectRegion);
    swift_beginAccess();
    LODWORD(v53) = *v53;
    sub_1D4697DE0((uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
    if ((_DWORD)v53)
    {
      v18 = v22;
      v19 = v23;
      v20 = v58;
      v21 = v57;
    }
  }
  v60.origin.x = v18;
  v60.origin.y = v19;
  v60.size.width = v20;
  v60.size.height = v21;
  v54 = v44;
  if (CGRectGetWidth(v60) * a4 < v54)
    return 0;
  v61.origin.x = v18;
  v61.origin.y = v19;
  v61.size.width = v20;
  v61.size.height = v21;
  return CGRectGetHeight(v61) * v59 >= v54;
}

float sub_1D48C9C24(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  float *v28;
  uint64_t v29;
  _QWORD v31[4];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CE90);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = *(int *)(type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0) + 20);
  v15 = *(_QWORD *)(v3 + v14);
  swift_beginAccess();
  v16 = *(_QWORD *)(v15 + 16);
  v17 = sub_1D46F8BC8(v13);
  v19 = v18;
  if (*(_QWORD *)(v16 + 16))
  {
    v20 = v17;
    swift_bridgeObjectRetain();
    v21 = sub_1D47CA4DC(v20, v19);
    if ((v22 & 1) != 0)
    {
      sub_1D469C304(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v10 + 72) * v21, (uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1D46992EC((uint64_t)v8, &qword_1ED98CE90);
    v23 = *(_QWORD *)(v3 + v14);
    swift_beginAccess();
    return *(float *)(v23 + 24);
  }
  else
  {
    v25 = sub_1D469C630((uint64_t)v8, (uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
    MEMORY[0x1E0C80A78](v25);
    v31[-2] = v12;
    v26 = sub_1D489C4F4((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1D48CA010, (uint64_t)&v31[-4], a2);
    v27 = sub_1D48C9FB8((uint64_t)v26);
    swift_bridgeObjectRelease();
    if ((v27 & 0x100000000) != 0 || (v24 = *(float *)&v27, *(float *)&v27 <= 0.0))
    {
      v28 = (float *)(*(_QWORD *)&v12[*(int *)(v9 + 20)]
                    + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__boxScoreThreshold);
      swift_beginAccess();
      v24 = *v28;
      if (*v28 <= 0.0)
      {
        v29 = *(_QWORD *)(v3 + v14);
        swift_beginAccess();
        v24 = *(float *)(v29 + 24);
      }
    }
    sub_1D4697DE0((uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
  }
  return v24;
}

uint64_t sub_1D48C9EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  char v12;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = (uint64_t *)(*(_QWORD *)(a2
                             + *(int *)(type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0) + 20))
                 + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__ontologyBoxScoreThresholds);
  result = swift_beginAccess();
  v8 = *v6;
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_1D47CA4DC(v5, v4);
    if ((v10 & 1) != 0)
      v11 = *(_DWORD *)(*(_QWORD *)(v8 + 56) + 4 * v9);
    else
      v11 = 0;
    v12 = v10 ^ 1;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  *(_DWORD *)a3 = v11;
  *(_BYTE *)(a3 + 4) = v12 & 1;
  return result;
}

unint64_t sub_1D48C9FB8(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v5 < v2)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t sub_1D48CA010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1D48C9EDC(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_1D48CA028(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  _QWORD v12[2];

  v3 = sub_1D4920F18();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  sub_1D48CA3C0((uint64_t)v12 - v8);
  sub_1D483F1AC();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v10 = sub_1D483F1E8((uint64_t)v7, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

  }
  else
  {
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for OCRTitleModel();
    *(_QWORD *)(swift_allocObject() + 16) = v11;
  }
}

uint64_t type metadata accessor for OCRTitleModelInput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for OCRTitleModelOutput()
{
  return objc_opt_self();
}

uint64_t sub_1D48CA3C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_1D4920F18();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CAF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v11 = (void *)sub_1D49225F8();
  v12 = (void *)sub_1D49225F8();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1D4920EF4();

    v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if ((_DWORD)result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OCRTitleModel()
{
  return objc_opt_self();
}

void sub_1D48CA5C8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  _QWORD v12[2];

  v3 = sub_1D4920F18();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  sub_1D48CAA6C((uint64_t)v12 - v8);
  sub_1D483F1AC();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v10 = sub_1D483F1E8((uint64_t)v7, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

  }
  else
  {
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for EncryptedSearchLTR();
    *(_QWORD *)(swift_allocObject() + 16) = v11;
  }
}

id sub_1D48CA748(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  BOOL v3;
  _QWORD *v6;

  v3 = a1 == 3235704 && a2 == 0xE300000000000000;
  if (v3 || (sub_1D4922E38() & 1) != 0)
  {
    v6 = v2 + 2;
    return objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, *v6);
  }
  if (a1 == 0x745F6E69616D6F64 && a2 == 0xEA00000000006761 || (sub_1D4922E38() & 1) != 0)
  {
    v6 = v2 + 3;
    return objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, *v6);
  }
  if (a1 == 1802723693 && a2 == 0xE400000000000000 || (sub_1D4922E38() & 1) != 0)
  {
    v6 = v2 + 4;
    return objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, *v6);
  }
  return 0;
}

uint64_t sub_1D48CA8D4()
{
  id *v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EncryptedSearchLTRInput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for EncryptedSearchLTROutput()
{
  return objc_opt_self();
}

uint64_t sub_1D48CAA6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_1D4920F18();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CAF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v11 = (void *)sub_1D49225F8();
  v12 = (void *)sub_1D49225F8();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1D4920EF4();

    v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if ((_DWORD)result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for EncryptedSearchLTR()
{
  return objc_opt_self();
}

void sub_1D48CAC68(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  _QWORD v12[2];

  v3 = sub_1D4920F18();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  sub_1D48CB000((uint64_t)v12 - v8);
  sub_1D483F1AC();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v10 = sub_1D483F1E8((uint64_t)v7, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

  }
  else
  {
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for TitleClassificationModel();
    *(_QWORD *)(swift_allocObject() + 16) = v11;
  }
}

uint64_t type metadata accessor for TitleClassificationModelInput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TitleClassificationModelOutput()
{
  return objc_opt_self();
}

uint64_t sub_1D48CB000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_1D4920F18();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CAF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v11 = (void *)sub_1D49225F8();
  v12 = (void *)sub_1D49225F8();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1D4920EF4();

    v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if ((_DWORD)result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TitleClassificationModel()
{
  return objc_opt_self();
}

void sub_1D48CB1FC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  _QWORD v12[2];

  v3 = sub_1D4920F18();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  sub_1D48CB594((uint64_t)v12 - v8);
  sub_1D483F1AC();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v10 = sub_1D483F1E8((uint64_t)v7, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

  }
  else
  {
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for OCRAddressModel();
    *(_QWORD *)(swift_allocObject() + 16) = v11;
  }
}

uint64_t type metadata accessor for OCRAddressModelInput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for OCRAddressModelOutput()
{
  return objc_opt_self();
}

uint64_t sub_1D48CB594@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_1D4920F18();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CAF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v11 = (void *)sub_1D49225F8();
  v12 = (void *)sub_1D49225F8();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1D4920EF4();

    v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if ((_DWORD)result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OCRAddressModel()
{
  return objc_opt_self();
}

void sub_1D48CB798(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  _QWORD v12[2];

  v3 = sub_1D4920F18();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  sub_1D48CBB30((uint64_t)v12 - v8);
  sub_1D483F1AC();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v10 = sub_1D483F1E8((uint64_t)v7, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

  }
  else
  {
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for CategoryClassificationModel();
    *(_QWORD *)(swift_allocObject() + 16) = v11;
  }
}

uint64_t type metadata accessor for CategoryClassificationModelInput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CategoryClassificationModelOutput()
{
  return objc_opt_self();
}

uint64_t sub_1D48CBB30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_1D4920F18();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98CAF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v11 = (void *)sub_1D49225F8();
  v12 = (void *)sub_1D49225F8();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1D4920EF4();

    v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if ((_DWORD)result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CategoryClassificationModel()
{
  return objc_opt_self();
}

uint64_t sub_1D48CBD2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFEAC740);
  v3 = sub_1D4922B5C();
  v4 = 0;
  v5 = v3 + 56;
  v17 = v1;
  v18 = a1 + 32;
  do
  {
    v6 = *(_BYTE *)(v18 + v4);
    sub_1D4922EF8();
    sub_1D472E71C(v6);
    sub_1D49226D0();
    swift_bridgeObjectRelease();
    v7 = sub_1D4922F34();
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    v9 = v7 & v8;
    v10 = (v7 & (unint64_t)v8) >> 6;
    v11 = *(_QWORD *)(v5 + 8 * v10);
    v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
      __asm { BR              X9 }
    *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v9) = v6;
    v13 = *(_QWORD *)(v3 + 16);
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
    {
      __break(1u);
      JUMPOUT(0x1D48CC5D0);
    }
    *(_QWORD *)(v3 + 16) = v15;
    ++v4;
  }
  while (v4 != v17);
  return v3;
}

uint64_t sub_1D48CC6F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EB20);
    v3 = sub_1D4922B5C();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = (uint64_t *)(v6 + 16 * v4);
      v8 = *v7;
      v9 = *((unsigned __int8 *)v7 + 8);
      sub_1D4922EF8();
      sub_1D474F7E8();
      sub_1D49225B0();
      result = sub_1D4922F34();
      v11 = ~(-1 << *(_BYTE *)(v3 + 32));
      v12 = result & v11;
      v13 = (result & (unint64_t)v11) >> 6;
      v14 = *(_QWORD *)(v5 + 8 * v13);
      v15 = 1 << (result & v11);
      v16 = *(_QWORD *)(v3 + 48);
      if ((v15 & v14) != 0)
      {
        do
        {
          v21 = (uint64_t *)(v16 + 16 * v12);
          if (*((_BYTE *)v21 + 8))
            v22 = *v21 != 0;
          else
            v22 = *v21;
          if (v9)
          {
            if (v8)
            {
              if (v22 == 1)
                goto LABEL_3;
            }
            else if (!v22)
            {
              goto LABEL_3;
            }
          }
          else if (v22 == v8)
          {
            goto LABEL_3;
          }
          v12 = (v12 + 1) & v11;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
          v15 = 1 << v12;
        }
        while ((v14 & (1 << v12)) != 0);
      }
      *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
      v17 = v16 + 16 * v12;
      *(_QWORD *)v17 = v8;
      *(_BYTE *)(v17 + 8) = v9;
      v18 = *(_QWORD *)(v3 + 16);
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
        break;
      *(_QWORD *)(v3 + 16) = v20;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t sub_1D48CC87C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED98EB28);
    v3 = sub_1D4922B5C();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_1D4922EF8();
      swift_bridgeObjectRetain();
      sub_1D49226D0();
      result = sub_1D4922F34();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_1D4922E38(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_1D4922E38();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

float faiss::fvec_norms_L2(faiss *this, faiss *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  float result;

  if (a4)
  {
    v4 = a4;
    v8 = 4 * a3;
    do
    {
      result = sqrtf(faiss::fvec_norm_L2sqr(a2, a3));
      *(float *)this = result;
      this = (faiss *)((char *)this + 4);
      a2 = (faiss *)((char *)a2 + v8);
      --v4;
    }
    while (v4);
  }
  return result;
}

void faiss::fvec_norms_L2sqr(faiss *this, faiss *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;

  if (a4)
  {
    v4 = a4;
    v8 = 4 * a3;
    do
    {
      *(float *)this = faiss::fvec_norm_L2sqr(a2, a3);
      this = (faiss *)((char *)this + 4);
      a2 = (faiss *)((char *)a2 + v8);
      --v4;
    }
    while (v4);
  }
}

void faiss::fvec_renorm_L2(unint64_t this, uint64_t a2, float *a3, float *a4)
{
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  unint64_t v13;

  if (a2)
  {
    v7 = 0;
    v8 = 4 * this;
    v9 = a3;
    do
    {
      v10 = faiss::fvec_norm_L2sqr((faiss *)&a3[v7 * this], this);
      if (v10 > 0.0 && this)
      {
        v11 = 1.0 / sqrtf(v10);
        v12 = v9;
        v13 = this;
        do
        {
          *v12 = v11 * *v12;
          ++v12;
          --v13;
        }
        while (v13);
      }
      ++v7;
      v9 = (float *)((char *)v9 + v8);
    }
    while (v7 != a2);
  }
}

void faiss::knn_inner_product(uint64_t a1, float *a2, unint64_t a3, unint64_t a4, unint64_t a5, int8x16_t *a6)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  const float *v21;
  float v22;
  uint64_t i;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const float *v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float *c__;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  float *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  faiss::InterruptCallback *v53;
  unint64_t v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  float *v62;
  float *v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  faiss::InterruptCallback *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v78;
  unint64_t v79;
  float *b;
  float *ba;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v86;
  int8x16_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void *v91[2];
  void *v92[2];
  __int128 v93;
  __int128 __p;
  uint64_t v95;
  uint64_t *alpha;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102[5];
  int v103;
  uint64_t v104;
  int lda;
  int n;
  int m[4];

  v7 = a4;
  v8 = a3;
  v9 = a6->u64[1];
  if (v9 >= faiss::distance_compute_min_k_reservoir)
  {
    LODWORD(v86) = a6->i64[0];
    v87 = vextq_s8(a6[1], a6[1], 8uLL);
    *(_OWORD *)v91 = 0u;
    *(_OWORD *)v92 = 0u;
    v93 = 0u;
    __p = 0u;
    v95 = 0;
    v88 = v9;
    v89 = (2 * v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (faiss::distance_compute_blas_threshold <= a4)
    {
      if (a4 && a5)
      {
        v54 = faiss::distance_compute_blas_database_bs;
        v74 = faiss::distance_compute_blas_query_bs;
        v55 = (float *)operator new[]();
        v56 = v8;
        v57 = 0;
        ba = (float *)(4 * v56 * v54);
        while (v57 < v7)
        {
          v79 = v57 + v74;
          if (v57 + v74 >= v7)
            v58 = v7;
          else
            v58 = v57 + v74;
          faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::begin_multiple(&v86, v57, v58);
          v59 = 0;
          v60 = 0;
          v84 = v58 - v57;
          v61 = v57 * a3;
          v62 = a2;
          v63 = (float *)(a1 + 4 * v61);
          v64 = v54;
          while (1)
          {
            v65 = a5 >= v64 ? v64 : a5;
            if (v60 >= a5)
              break;
            LODWORD(alpha) = 1065353216;
            *(_QWORD *)m = (v59 + v65);
            if (v60 + v54 >= a5)
              v66 = a5;
            else
              v66 = v60 + v54;
            lda = a3;
            n = v84;
            sgemm_("Transpose", "Not transpose", m, &n, &lda, (float *)&alpha, v62, &lda, v63, &lda, (float *)&m[1], v55, m);
            v62 = (float *)((char *)ba + (_QWORD)v62);
            v59 -= v54;
            v64 += v54;
            faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::add_results(&v86, v60, v66, (uint64_t)v55);
            v60 += v54;
          }
          v67 = (faiss::InterruptCallback *)faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::end_multiple(&v86);
          v7 = a4;
          faiss::InterruptCallback::check(v67);
          v57 = v79;
        }
        MEMORY[0x1D826288C](v55, 0x1000C8052888210);
      }
    }
    else
    {
      faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::SingleResultHandler(&alpha, (uint64_t)&v86);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v24 = alpha;
          v25 = alpha[3];
          v26 = alpha[4];
          if (v25 >= v26)
            __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
          v102[0] = v97;
          v102[1] = (uint64_t)v100;
          v102[2] = 0;
          v102[3] = v25;
          v102[4] = v26;
          v103 = -8388609;
          v104 = i;
          if (a5)
          {
            v27 = 0;
            v28 = a2;
            do
            {
              v29 = faiss::fvec_inner_product((faiss *)(a1 + 4 * i * v8), v28, v8);
              faiss::ReservoirTopN<faiss::CMin<float,long long>>::add((uint64_t)v102, v27++, v29);
              v28 += v8;
            }
            while (a5 != v27);
            v24 = alpha;
            v30 = v104;
            v25 = alpha[3];
          }
          else
          {
            v30 = i;
          }
          faiss::ReservoirTopN<faiss::CMin<float,long long>>::to_result(v102, (float *)(v24[1] + 4 * v30 * v25), (uint64_t *)(v24[2] + 8 * v30 * v25));
        }
      }
      if (v100)
      {
        v101 = v100;
        operator delete(v100);
      }
      if (v97)
      {
        v98 = v97;
        operator delete((void *)v97);
      }
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v92[1])
    {
      *(void **)&v93 = v92[1];
      operator delete(v92[1]);
    }
    if (v91[0])
    {
      v91[1] = v91[0];
      operator delete(v91[0]);
    }
  }
  else
  {
    LODWORD(v86) = a6->i64[0];
    v87 = vextq_s8(a6[1], a6[1], 8uLL);
    v88 = v9;
    if (faiss::distance_compute_blas_threshold <= a4)
    {
      if (a4 && a5)
      {
        v31 = faiss::distance_compute_blas_query_bs;
        v32 = faiss::distance_compute_blas_database_bs;
        c__ = (float *)operator new[]();
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v69 = 8 * v31;
        v70 = v31;
        v68 = 4 * v31;
        v78 = 4 * v8 * v32;
        while (1)
        {
          v37 = a4;
          if (v36 >= a4)
            break;
          v71 = v36 + v70;
          if (v36 + v70 < a4)
            v37 = v36 + v70;
          v89 = v36;
          v90 = v37;
          if (v37 > v36)
          {
            v38 = v87;
            v39 = v34;
            v40 = v35;
            v41 = v36;
            do
            {
              v42 = v88;
              if (v88)
              {
                v43 = (_QWORD *)(v38.i64[1] + v88 * v40);
                v44 = (_DWORD *)(v38.i64[0] + v88 * v39);
                do
                {
                  *v44++ = -8388609;
                  *v43++ = -1;
                  --v42;
                }
                while (v42);
              }
              ++v41;
              v40 += 8;
              v39 += 4;
            }
            while (v41 != v37);
          }
          v72 = v35;
          v73 = v34;
          v45 = 0;
          v46 = 0;
          v83 = v37 - v36;
          v47 = v36 * v8;
          v48 = a2;
          b = (float *)(a1 + 4 * v47);
          v49 = v32;
          do
          {
            v50 = v46 + v32;
            LODWORD(alpha) = 1065353216;
            if (a5 >= v49)
              v51 = v49;
            else
              v51 = a5;
            *(_QWORD *)m = (v45 + v51);
            if (v50 >= a5)
              v52 = a5;
            else
              v52 = v46 + v32;
            lda = a3;
            n = v83;
            sgemm_("Transpose", "Not transpose", m, &n, &lda, (float *)&alpha, v48, &lda, b, &lda, (float *)&m[1], c__, m);
            faiss::HeapResultHandler<faiss::CMin<float,long long>>::add_results(&v86, v46, v52, (uint64_t)c__);
            v48 = (float *)((char *)v48 + v78);
            v45 -= v32;
            v49 += v32;
            v46 += v32;
          }
          while (v50 < a5);
          v53 = (faiss::InterruptCallback *)faiss::HeapResultHandler<faiss::CMin<float,long long>>::end_multiple(&v86);
          v8 = a3;
          v35 = v72 + v69;
          v34 = v73 + v68;
          faiss::InterruptCallback::check(v53);
          v36 = v71;
        }
        MEMORY[0x1D826288C](c__, 0x1000C8052888210);
      }
    }
    else
    {
      alpha = &v86;
      v97 = v9;
      if (a4)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 4 * a3;
        do
        {
          v14 = v97;
          v15 = alpha[1];
          v16 = (_DWORD *)(v15 + 4 * v97 * v12);
          v98 = (uint64_t)v16;
          v17 = alpha[2];
          v99 = v17 + 8 * v97 * v12;
          if (v97)
          {
            v18 = (_QWORD *)(v17 + v97 * v11);
            v19 = (_DWORD *)(v15 + v97 * v10);
            do
            {
              *v19++ = -8388609;
              *v18++ = -1;
              --v14;
            }
            while (v14);
          }
          v82 = v10;
          LODWORD(v100) = *v16;
          if (a5)
          {
            v20 = 0;
            v21 = a2;
            do
            {
              v22 = faiss::fvec_inner_product((faiss *)(a1 + 4 * v12 * a3), v21, a3);
              faiss::HeapResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::add_result((uint64_t)&alpha, v20++, v22);
              v21 = (const float *)((char *)v21 + v13);
            }
            while (a5 != v20);
          }
          faiss::HeapResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::end(&alpha);
          ++v12;
          v11 += 8;
          v10 = v82 + 4;
        }
        while (v12 != a4);
      }
    }
  }
}

void sub_1D48CD1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::~ReservoirResultHandler(&a28);
  _Unwind_Resume(a1);
}

_QWORD *faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::~ReservoirResultHandler(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::knn_L2sqr(faiss *a1, faiss *a2, unint64_t a3, unint64_t a4, unint64_t a5, int8x16_t *a6, uint64_t a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  const float *v22;
  float v23;
  uint64_t i;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const float *v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  faiss *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  faiss *v39;
  uint64_t v40;
  faiss *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int8x16_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float *c__;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  float *v65;
  uint64_t v66;
  float v67;
  float v68;
  BOOL v69;
  faiss::InterruptCallback *v70;
  uint64_t v71;
  uint64_t v72;
  faiss *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  float *v80;
  uint64_t v81;
  unint64_t v82;
  float *v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  faiss::InterruptCallback *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  float *b;
  float *ba;
  int v104;
  int v105;
  float *v106;
  float *v107;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  uint64_t v114;
  int8x16_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 __p;
  uint64_t v123;
  uint64_t *alpha;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130[5];
  int v131;
  uint64_t v132;
  int lda;
  int n;
  int m;
  float beta[3];

  v8 = a4;
  v9 = a3;
  v10 = a6->u64[1];
  if (v10 >= faiss::distance_compute_min_k_reservoir)
  {
    LODWORD(v114) = a6->i64[0];
    v115 = vextq_s8(a6[1], a6[1], 8uLL);
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    __p = 0u;
    v123 = 0;
    v116 = v10;
    v117 = (2 * v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (faiss::distance_compute_blas_threshold <= a4)
    {
      if (a4 && a5)
      {
        v94 = faiss::distance_compute_blas_query_bs;
        v107 = (float *)faiss::distance_compute_blas_database_bs;
        v113 = (float *)operator new[]();
        v36 = operator new[]();
        v37 = 0;
        v38 = 4 * v9;
        v39 = a1;
        do
        {
          *(float *)(v36 + 4 * v37++) = faiss::fvec_norm_L2sqr(v39, v9);
          v39 = (faiss *)((char *)v39 + v38);
        }
        while (v8 != v37);
        if (a7)
        {
          v92 = 0;
        }
        else
        {
          v71 = operator new[]();
          v72 = 0;
          v73 = a2;
          do
          {
            *(float *)(v71 + 4 * v72++) = faiss::fvec_norm_L2sqr(v73, v9);
            v73 = (faiss *)((char *)v73 + v38);
          }
          while (a5 != v72);
          v92 = v71;
          a7 = v71;
        }
        v74 = 0;
        v75 = a5;
        while (v74 < v8)
        {
          v100 = v74 + v94;
          if (v74 + v94 >= v8)
            v76 = v8;
          else
            v76 = v74 + v94;
          faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::begin_multiple(&v114, v74, v76);
          v77 = 0;
          v78 = 0;
          v105 = v76 - v74;
          v79 = v74;
          ba = (float *)((char *)a1 + 4 * v74 * v9);
          v80 = v107;
          v81 = a7;
          while (1)
          {
            v82 = v75;
            if (v75 >= (unint64_t)v80)
              v75 = (unint64_t)v80;
            if (v78 >= v82)
              break;
            if ((unint64_t)v107 + v78 < v82)
              v82 = (unint64_t)v107 + v78;
            LODWORD(alpha) = 1065353216;
            m = v82 - v78;
            beta[0] = 0.0;
            lda = a3;
            n = v105;
            sgemm_("Transpose", "Not transpose", &m, &n, &lda, (float *)&alpha, (float *)a2 + v78 * a3, &lda, ba, &lda, beta, v113, &m);
            if (v76 > v79)
            {
              v83 = v113;
              v84 = v79;
              do
              {
                if (v82 > v78)
                {
                  v85 = 0;
                  v86 = *(float *)(v36 + 4 * v84);
                  do
                  {
                    v87 = (float)(v86 + *(float *)(v81 + 4 * v85)) + (float)(v83[v85] * -2.0);
                    if (v87 < 0.0)
                      v87 = 0.0;
                    v83[v85++] = v87;
                  }
                  while (v78 + v85 < v82);
                }
                ++v84;
                v83 += v75 + v77;
              }
              while (v84 < v76);
            }
            v81 += 4 * (_QWORD)v107;
            v80 = (float *)((char *)v107 + (_QWORD)v80);
            v77 -= (uint64_t)v107;
            faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::add_results(&v114, v78, v82, (uint64_t)v113);
            v78 += (unint64_t)v107;
            v75 = a5;
          }
          v88 = (faiss::InterruptCallback *)faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::end_multiple(&v114);
          v8 = a4;
          v9 = a3;
          v75 = v82;
          faiss::InterruptCallback::check(v88);
          v74 = v100;
        }
        if (v92)
          MEMORY[0x1D826288C](v92, 0x1000C8052888210);
        MEMORY[0x1D826288C](v36, 0x1000C8052888210);
        MEMORY[0x1D826288C](v113, 0x1000C8052888210);
      }
    }
    else
    {
      faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::SingleResultHandler(&alpha, (uint64_t)&v114);
      if (v8)
      {
        for (i = 0; i != v8; ++i)
        {
          v25 = alpha;
          v26 = alpha[3];
          v27 = alpha[4];
          if (v26 >= v27)
            __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
          v130[0] = v125;
          v130[1] = (uint64_t)v128;
          v130[2] = 0;
          v130[3] = v26;
          v130[4] = v27;
          v131 = 2139095039;
          v132 = i;
          if (a5)
          {
            v28 = 0;
            v29 = (const float *)a2;
            do
            {
              v30 = faiss::fvec_L2sqr((faiss *)((char *)a1 + 4 * i * v9), v29, v9);
              faiss::ReservoirTopN<faiss::CMax<float,long long>>::add((uint64_t)v130, v28++, v30);
              v29 += v9;
            }
            while (a5 != v28);
            v25 = alpha;
            v31 = v132;
            v26 = alpha[3];
          }
          else
          {
            v31 = i;
          }
          faiss::ReservoirTopN<faiss::CMax<float,long long>>::to_result(v130, (float *)(v25[1] + 4 * v31 * v26), (uint64_t *)(v25[2] + 8 * v31 * v26));
        }
      }
      if (v128)
      {
        v129 = v128;
        operator delete(v128);
      }
      if (v125)
      {
        v126 = v125;
        operator delete((void *)v125);
      }
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (*((_QWORD *)&v120 + 1))
    {
      *(_QWORD *)&v121 = *((_QWORD *)&v120 + 1);
      operator delete(*((void **)&v120 + 1));
    }
    if ((_QWORD)v119)
    {
      *((_QWORD *)&v119 + 1) = v119;
      operator delete((void *)v119);
    }
  }
  else
  {
    LODWORD(v114) = a6->i64[0];
    v115 = vextq_s8(a6[1], a6[1], 8uLL);
    v116 = v10;
    if (faiss::distance_compute_blas_threshold <= a4)
    {
      if (a4 && a5)
      {
        v32 = faiss::distance_compute_blas_database_bs;
        v90 = faiss::distance_compute_blas_query_bs;
        v106 = (float *)operator new[]();
        v112 = operator new[]();
        v33 = 0;
        v34 = 4 * v9;
        v35 = a1;
        do
        {
          *(float *)(v112 + 4 * v33++) = faiss::fvec_norm_L2sqr(v35, v9);
          v35 = (faiss *)((char *)v35 + v34);
        }
        while (v8 != v33);
        if (a7)
        {
          v89 = 0;
        }
        else
        {
          v89 = operator new[]();
          v40 = 0;
          v41 = a2;
          do
          {
            *(float *)(v89 + 4 * v40++) = faiss::fvec_norm_L2sqr(v41, v9);
            v41 = (faiss *)((char *)v41 + v34);
          }
          while (a5 != v40);
          a7 = v89;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v99 = 4 * v32;
        v45 = a5;
        while (v44 < a4)
        {
          v91 = v44 + v90;
          if (v44 + v90 >= a4)
            v46 = a4;
          else
            v46 = v44 + v90;
          v117 = v44;
          v118 = v46;
          if (v46 > v44)
          {
            v47 = v115;
            v48 = v42;
            v49 = v43;
            v50 = v44;
            do
            {
              v51 = v116;
              if (v116)
              {
                v52 = (_QWORD *)(v47.i64[1] + v116 * v49);
                v53 = (_DWORD *)(v47.i64[0] + v116 * v48);
                do
                {
                  *v53++ = 2139095039;
                  *v52++ = -1;
                  --v51;
                }
                while (v51);
              }
              ++v50;
              v49 += 8;
              v48 += 4;
            }
            while (v50 != v46);
          }
          v93 = v43;
          v95 = v42;
          v54 = 0;
          v55 = 0;
          v104 = v46 - v44;
          v101 = v44;
          b = (float *)((char *)a1 + 4 * v44 * a3);
          v56 = v32;
          v57 = a7;
          c__ = v106;
          do
          {
            if (v45 >= v56)
              v59 = v56;
            else
              v59 = v45;
            v60 = v45;
            v61 = v32;
            v62 = v55 + v32;
            if (v55 + v32 >= v60)
              v63 = v60;
            else
              v63 = v55 + v32;
            LODWORD(alpha) = 1065353216;
            m = v63 - v55;
            beta[0] = 0.0;
            lda = a3;
            n = v104;
            sgemm_("Transpose", "Not transpose", &m, &n, &lda, (float *)&alpha, (float *)a2 + v55 * a3, &lda, b, &lda, beta, c__, &m);
            v64 = v101;
            c__ = v106;
            if (v46 > v101)
            {
              v65 = v106;
              do
              {
                if (v63 > v55)
                {
                  v66 = 0;
                  v67 = *(float *)(v112 + 4 * v64);
                  do
                  {
                    v68 = (float)(v67 + *(float *)(v57 + 4 * v66)) + (float)(v65[v66] * -2.0);
                    if (v68 < 0.0)
                      v68 = 0.0;
                    v65[v66++] = v68;
                  }
                  while (v55 + v66 < v63);
                }
                ++v64;
                v65 += v59 + v54;
              }
              while (v64 < v46);
            }
            faiss::HeapResultHandler<faiss::CMax<float,long long>>::add_results(&v114, v55, v63, (uint64_t)v106);
            v57 += v99;
            v32 = v61;
            v56 += v61;
            v54 -= v61;
            v55 = v62;
            v69 = v62 >= a5;
            v45 = a5;
          }
          while (!v69);
          v70 = (faiss::InterruptCallback *)faiss::HeapResultHandler<faiss::CMax<float,long long>>::end_multiple(&v114);
          v43 = v93 + 8 * v90;
          v42 = v95 + 4 * v90;
          faiss::InterruptCallback::check(v70);
          v44 = v91;
        }
        if (v89)
          MEMORY[0x1D826288C](v89, 0x1000C8052888210);
        MEMORY[0x1D826288C](v112, 0x1000C8052888210);
        MEMORY[0x1D826288C](v106, 0x1000C8052888210);
      }
    }
    else
    {
      alpha = &v114;
      v125 = v10;
      if (a4)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 4 * a3;
        do
        {
          v15 = v125;
          v16 = alpha[1];
          v17 = (_DWORD *)(v16 + 4 * v125 * v13);
          v126 = (uint64_t)v17;
          v18 = alpha[2];
          v127 = v18 + 8 * v125 * v13;
          if (v125)
          {
            v19 = (_QWORD *)(v18 + v125 * v12);
            v20 = (_DWORD *)(v16 + v125 * v11);
            do
            {
              *v20++ = 2139095039;
              *v19++ = -1;
              --v15;
            }
            while (v15);
          }
          v111 = v11;
          LODWORD(v128) = *v17;
          if (a5)
          {
            v21 = 0;
            v22 = (const float *)a2;
            do
            {
              v23 = faiss::fvec_L2sqr((faiss *)((char *)a1 + 4 * v13 * a3), v22, a3);
              faiss::HeapResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::add_result((uint64_t)&alpha, v21++, v23);
              v22 = (const float *)((char *)v22 + v14);
            }
            while (a5 != v21);
          }
          faiss::HeapResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::end(&alpha);
          ++v13;
          v12 += 8;
          v11 = v111 + 4;
        }
        while (v13 != a4);
      }
    }
  }
}

void sub_1D48CDC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  MEMORY[0x1D826288C](v34, 0x1000C8052888210);
  MEMORY[0x1D826288C](a33, 0x1000C8052888210);
  faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::~ReservoirResultHandler(&a34);
  _Unwind_Resume(a1);
}

uint64_t faiss::range_search_L2sqr(faiss *this, faiss *a2, unint64_t a3, unint64_t a4, unint64_t a5, faiss::RangeSearchResult *a6, float a7, faiss::RangeSearchResult *a8)
{
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  const float *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  faiss *v17;
  uint64_t v18;
  uint64_t v19;
  faiss *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  float *b;
  int v42;
  unint64_t v43;
  unint64_t v45;
  float *v46;
  faiss::RangeSearchResult *v47;
  float v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  _QWORD alpha[9];
  float v56;
  faiss::RangeQueryResult *v57;
  int lda;
  int n;
  int m;
  float beta[3];

  v9 = a4;
  v47 = a6;
  v48 = a7;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0;
  if (faiss::distance_compute_blas_threshold <= a4)
  {
    if (a4 && a5)
    {
      v36 = faiss::distance_compute_blas_query_bs;
      v45 = faiss::distance_compute_blas_database_bs;
      v46 = (float *)operator new[]();
      v14 = operator new[]();
      v15 = 0;
      v16 = 4 * a3;
      v17 = this;
      do
      {
        *(float *)(v14 + 4 * v15++) = faiss::fvec_norm_L2sqr(v17, a3);
        v17 = (faiss *)((char *)v17 + v16);
      }
      while (v9 != v15);
      v18 = operator new[]();
      v19 = 0;
      v20 = a2;
      v37 = v18;
      do
      {
        *(float *)(v18 + 4 * v19++) = faiss::fvec_norm_L2sqr(v20, a3);
        v20 = (faiss *)((char *)v20 + v16);
      }
      while (a5 != v19);
      v22 = 0;
      v35 = v9;
      while (v22 < v9)
      {
        v23 = 0;
        v24 = 0;
        v39 = v22 + v36;
        if (v22 + v36 < v9)
          v9 = v22 + v36;
        v49 = v22;
        v50 = v9;
        v42 = v9 - v22;
        v25 = v45;
        v43 = v22;
        b = (float *)((char *)this + 4 * v22 * a3);
        v26 = v18;
        while (1)
        {
          v27 = a5 >= v25 ? v25 : a5;
          if (v24 >= a5)
            break;
          if (v24 + v45 >= a5)
            v28 = a5;
          else
            v28 = v24 + v45;
          LODWORD(alpha[0]) = 1065353216;
          m = v28 - v24;
          beta[0] = 0.0;
          lda = a3;
          n = v42;
          sgemm_("Transpose", "Not transpose", &m, &n, &lda, (float *)alpha, (float *)a2 + v24 * a3, &lda, b, &lda, beta, v46, &m);
          if (v9 > v43)
          {
            v29 = v46;
            v30 = v43;
            do
            {
              if (v28 > v24)
              {
                v31 = 0;
                v32 = *(float *)(v14 + 4 * v30);
                do
                {
                  v33 = (float)(v32 + *(float *)(v26 + 4 * v31)) + (float)(v29[v31] * -2.0);
                  if (v33 < 0.0)
                    v33 = 0.0;
                  v29[v31++] = v33;
                }
                while (v24 + v31 < v28);
              }
              ++v30;
              v29 += v27 + v23;
            }
            while (v30 < v9);
          }
          v26 += 4 * v45;
          v25 += v45;
          v23 -= v45;
          faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::add_results((uint64_t)&v47, v24, v28, (uint64_t)v46);
          v24 += v45;
        }
        v18 = v37;
        v21 = faiss::InterruptCallback::check((faiss::InterruptCallback *)v21);
        v22 = v39;
        v9 = v35;
      }
      MEMORY[0x1D826288C](v18, 0x1000C8052888210);
      MEMORY[0x1D826288C](v14, 0x1000C8052888210);
      MEMORY[0x1D826288C](v46, 0x1000C8052888210);
    }
  }
  else
  {
    faiss::RangeSearchPartialResult::RangeSearchPartialResult(alpha, a6);
    v56 = v48;
    v57 = 0;
    if (v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v57 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)alpha, i);
        if (a5)
        {
          v11 = 0;
          v12 = (const float *)a2;
          do
          {
            v13 = faiss::fvec_L2sqr((faiss *)((char *)this + 4 * i * a3), v12, a3);
            if (v56 > v13)
              faiss::RangeQueryResult::add(v57, v13, v11);
            ++v11;
            v12 += a3;
          }
          while (a5 != v11);
        }
      }
    }
    faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::~SingleResultHandler((faiss::RangeSearchPartialResult *)alpha);
  }
  return faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler((uint64_t)&v47);
}

void sub_1D48CE1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  MEMORY[0x1D826288C](v28, 0x1000C8052888210);
  MEMORY[0x1D826288C](a27, 0x1000C8052888210);
  faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t faiss::range_search_inner_product(faiss *this, float *a2, unint64_t a3, unint64_t a4, unint64_t a5, faiss::RangeSearchResult *a6, float a7, faiss::RangeSearchResult *a8)
{
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  const float *v12;
  float v13;
  unint64_t v14;
  faiss::InterruptCallback *v15;
  float *c__;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  float *v21;
  float *b;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v31;
  int v32;
  faiss::RangeSearchResult *v34;
  float v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  _QWORD alpha[9];
  float v43;
  faiss::RangeQueryResult *v44;
  int lda;
  int n;
  int m[4];

  v9 = a4;
  v34 = a6;
  v35 = a7;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  if (faiss::distance_compute_blas_threshold <= a4)
  {
    if (a4 && a5)
    {
      v14 = faiss::distance_compute_blas_database_bs;
      v28 = faiss::distance_compute_blas_query_bs;
      v15 = (faiss::InterruptCallback *)operator new[]();
      c__ = (float *)v15;
      v17 = 0;
      v27 = v9;
      while (v17 < v9)
      {
        v18 = 0;
        v19 = 0;
        v20 = v17 + v28;
        v31 = v17 + v28;
        if (v17 + v28 >= v9)
          v20 = v9;
        v36 = v17;
        v37 = v20;
        v32 = v20 - v17;
        v21 = a2;
        b = (float *)((char *)this + 4 * v17 * a3);
        v23 = v14;
        while (1)
        {
          v24 = a5 >= v23 ? v23 : a5;
          if (v19 >= a5)
            break;
          LODWORD(alpha[0]) = 1065353216;
          *(_QWORD *)m = (v18 + v24);
          if (v19 + v14 >= a5)
            v25 = a5;
          else
            v25 = v19 + v14;
          lda = a3;
          n = v32;
          sgemm_("Transpose", "Not transpose", m, &n, &lda, (float *)alpha, v21, &lda, b, &lda, (float *)&m[1], c__, m);
          v21 += a3 * v14;
          v18 -= v14;
          v23 += v14;
          faiss::RangeSearchResultHandler<faiss::CMin<float,long long>>::add_results((uint64_t)&v34, v19, v25, (uint64_t)c__);
          v19 += v14;
        }
        v15 = (faiss::InterruptCallback *)faiss::InterruptCallback::check(v15);
        v17 = v31;
        v9 = v27;
      }
      MEMORY[0x1D826288C](c__, 0x1000C8052888210);
    }
  }
  else
  {
    faiss::RangeSearchPartialResult::RangeSearchPartialResult(alpha, a6);
    v43 = v35;
    v44 = 0;
    if (v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v44 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)alpha, i);
        if (a5)
        {
          v11 = 0;
          v12 = a2;
          do
          {
            v13 = faiss::fvec_inner_product((faiss *)((char *)this + 4 * i * a3), v12, a3);
            if (v43 < v13)
              faiss::RangeQueryResult::add(v44, v13, v11);
            ++v11;
            v12 += a3;
          }
          while (a5 != v11);
        }
      }
    }
    faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::~SingleResultHandler((faiss::RangeSearchPartialResult *)alpha);
  }
  return faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler((uint64_t)&v34);
}

void sub_1D48CE500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler((uint64_t)va);
  _Unwind_Resume(a1);
}

void faiss::fvec_inner_products_by_idx(faiss *this, float *a2, const float *a3, const float *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  const float *v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  if (a6)
  {
    v12 = 0;
    v19 = 8 * a7;
    v20 = 4 * a7;
    do
    {
      if (a7)
      {
        v13 = a4;
        v14 = a7;
        v15 = (float *)this;
        do
        {
          v17 = *(_QWORD *)v13;
          v13 += 2;
          v16 = v17;
          if ((v17 & 0x8000000000000000) == 0)
            *v15 = faiss::fvec_inner_product((faiss *)&a2[v12 * a5], &a3[v16 * a5], a5);
          ++v15;
          --v14;
        }
        while (v14);
      }
      ++v12;
      this = (faiss *)((char *)this + v20);
      a4 = (const float *)((char *)a4 + v19);
    }
    while (v12 != a6);
  }
}

void faiss::fvec_L2sqr_by_idx(faiss *this, float *a2, const float *a3, const float *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  const float *v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  if (a6)
  {
    v12 = 0;
    v19 = 8 * a7;
    v20 = 4 * a7;
    do
    {
      if (a7)
      {
        v13 = a4;
        v14 = a7;
        v15 = (float *)this;
        do
        {
          v17 = *(_QWORD *)v13;
          v13 += 2;
          v16 = v17;
          if ((v17 & 0x8000000000000000) == 0)
            *v15 = faiss::fvec_L2sqr((faiss *)&a2[v12 * a5], &a3[v16 * a5], a5);
          ++v15;
          --v14;
        }
        while (v14);
      }
      ++v12;
      this = (faiss *)((char *)this + v20);
      a4 = (const float *)((char *)a4 + v19);
    }
    while (v12 != a6);
  }
}

void faiss::pairwise_indexed_L2sqr(unint64_t this, uint64_t a2, uint64_t a3, const float *a4, const float *a5, const float *a6, uint64_t *a7, float *a8)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v13 = a2;
    do
    {
      v16 = *(_QWORD *)a4;
      a4 += 2;
      v15 = v16;
      if ((v16 & 0x8000000000000000) == 0 && (*(_QWORD *)a6 & 0x8000000000000000) == 0)
        *(float *)a7 = faiss::fvec_L2sqr((faiss *)(a3 + 4 * v15 * this), &a5[*(_QWORD *)a6 * this], this);
      a7 = (uint64_t *)((char *)a7 + 4);
      a6 += 2;
      --v13;
    }
    while (v13);
  }
}

void faiss::pairwise_indexed_inner_product(unint64_t this, uint64_t a2, uint64_t a3, const float *a4, const float *a5, const float *a6, uint64_t *a7, float *a8)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v13 = a2;
    do
    {
      v16 = *(_QWORD *)a4;
      a4 += 2;
      v15 = v16;
      if ((v16 & 0x8000000000000000) == 0 && (*(_QWORD *)a6 & 0x8000000000000000) == 0)
        *(float *)a7 = faiss::fvec_inner_product((faiss *)(a3 + 4 * v15 * this), &a5[*(_QWORD *)a6 * this], this);
      a7 = (uint64_t *)((char *)a7 + 4);
      a6 += 2;
      --v13;
    }
    while (v13);
  }
}

char *faiss::knn_inner_products_by_idx(char *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  float *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  float *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v54 = result;
  if (!a5)
    return result;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = a7[1];
  do
  {
    v13 = a7[2];
    v12 = a7[3];
    v14 = a7[1];
    if (v11)
    {
      v15 = (_QWORD *)(v13 + v14 * v9);
      v16 = v11;
      v17 = (_DWORD *)(v12 + v14 * v8);
      do
      {
        *v17++ = -8388609;
        *v15++ = -1;
        --v16;
      }
      while (v16);
    }
    v61 = v9;
    v62 = v8;
    v63 = v10;
    v59 = v14;
    v60 = v12;
    v18 = (float *)(v12 + 4 * v14 * v10);
    v58 = v13;
    v19 = (uint64_t *)(v13 + 8 * v14 * v10);
    if (!a6)
      goto LABEL_23;
    v20 = 0;
    v21 = a3 + 8 * v63 * a6;
    v22 = v18 - 1;
    v23 = v19 - 1;
    do
    {
      v24 = *(_QWORD *)(v21 + 8 * v20);
      if (v24 < 0)
        break;
      v25 = faiss::fvec_inner_product((faiss *)&v54[4 * v63 * a4], (const float *)(a2 + 4 * v24 * a4), a4);
      if (v25 <= *v18)
        goto LABEL_22;
      v26 = *(_QWORD *)(v21 + 8 * v20);
      if (v11 < 2)
      {
        v27 = 1;
        goto LABEL_21;
      }
      v28 = 3;
      v29 = 2;
      v30 = 1;
      while (1)
      {
        v31 = v22[v29];
        if (v28 != v11 + 1)
        {
          v32 = v22[v28];
          if (v31 >= v32)
            break;
        }
        if (v31 > v25)
          goto LABEL_20;
LABEL_18:
        v27 = v29;
        v22[v30] = v31;
        v23[v30] = v23[v29];
        v29 *= 2;
        v28 = (2 * v27) | 1;
        v30 = v27;
        if (v29 > v11)
          goto LABEL_21;
      }
      v31 = v22[v28];
      v29 = v28;
      if (v32 <= v25)
        goto LABEL_18;
LABEL_20:
      v27 = v30;
LABEL_21:
      v22[v27] = v25;
      v23[v27] = v26;
LABEL_22:
      ++v20;
    }
    while (v20 != a6);
LABEL_23:
    if (!v11)
    {
      v34 = 0;
      v38 = v61;
      v37 = v62;
      v39 = v63;
      goto LABEL_42;
    }
    v33 = 0;
    v34 = 0;
    v35 = v18 - 1;
    v36 = v19 - 1;
    v38 = v61;
    v37 = v62;
    v39 = v63;
    while (2)
    {
      v40 = *v18;
      v41 = *v19;
      v42 = v11 - v33;
      v43 = v35[v11 - v33];
      if (v11 - v33 < 2)
      {
        v44 = 1;
        goto LABEL_37;
      }
      v45 = 3;
      v46 = 2;
      v47 = 1;
      while (2)
      {
        v48 = v35[v46];
        if (v45 == v42 + 1 || (v49 = v35[v45], v48 < v49))
        {
          if (v43 < v48)
            break;
          goto LABEL_33;
        }
        v48 = v35[v45];
        v46 = v45;
        if (v43 >= v49)
        {
LABEL_33:
          v44 = v46;
          v35[v47] = v48;
          v36[v47] = v36[v46];
          v46 *= 2;
          v45 = (2 * v44) | 1;
          v47 = v44;
          if (v46 > v42)
            goto LABEL_36;
          continue;
        }
        break;
      }
      v44 = v47;
LABEL_36:
      v43 = v35[v42];
LABEL_37:
      v35[v44] = v43;
      v36[v44] = v36[v42];
      v50 = v11 + ~v34;
      v18[v50] = v40;
      v19[v50] = v41;
      if (v41 != -1)
        ++v34;
      if (++v33 != v11)
        continue;
      break;
    }
LABEL_42:
    memmove(v18, &v18[v11 - v34], 4 * v34);
    result = (char *)memmove(v19, &v19[v11 - v34], 8 * v34);
    v51 = v11 - v34;
    if (v11 > v34)
    {
      v52 = (_QWORD *)(v58 + v59 * v38 + 8 * v34);
      v53 = (_DWORD *)(v60 + v59 * v37 + 4 * v34);
      do
      {
        *v53++ = -8388609;
        *v52++ = -1;
        --v51;
      }
      while (v51);
    }
    v10 = v39 + 1;
    v9 = v38 + 8;
    v8 = v37 + 4;
  }
  while (v10 != a5);
  return result;
}

char *faiss::knn_L2sqr_by_idx(char *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  float *v19;
  uint64_t *v20;
  uint64_t v21;
  faiss *v22;
  uint64_t v23;
  float *v24;
  uint64_t *v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  float *v36;
  uint64_t *v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _DWORD *v51;
  char *v53;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v53 = result;
  if (!a5)
    return result;
  v7 = a7;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a7[1];
  do
  {
    v14 = v7[2];
    v13 = v7[3];
    v15 = v7[1];
    if (v15)
    {
      v16 = (_QWORD *)(v14 + v15 * v10);
      v17 = v7[1];
      v18 = (_DWORD *)(v13 + v15 * v9);
      do
      {
        *v18++ = 2139095039;
        *v16++ = -1;
        --v17;
      }
      while (v17);
    }
    v59 = v15;
    v60 = v13;
    v19 = (float *)(v13 + 4 * v15 * v11);
    v58 = v14;
    v20 = (uint64_t *)(v14 + 8 * v15 * v11);
    v61 = v11;
    if (a6)
    {
      v56 = v10;
      v57 = v9;
      v21 = 0;
      v22 = (faiss *)&v53[4 * v11 * a4];
      v23 = a3 + 8 * v11 * a6;
      v24 = v19 - 1;
      v25 = v20 - 1;
      while (1)
      {
        v26 = faiss::fvec_L2sqr(v22, (const float *)(a2 + 4 * *(_QWORD *)(v23 + 8 * v21) * a4), a4);
        if (v26 >= *v19)
          goto LABEL_21;
        v27 = *(_QWORD *)(v23 + 8 * v21);
        if (v12 < 2)
        {
          v28 = 1;
          goto LABEL_20;
        }
        v29 = 3;
        v30 = 2;
        v31 = 1;
        while (1)
        {
          v32 = v24[v30];
          if (v29 != v12 + 1)
          {
            v33 = v24[v29];
            if (v32 <= v33)
              break;
          }
          if (v32 < v26)
            goto LABEL_19;
LABEL_17:
          v28 = v30;
          v24[v31] = v32;
          v25[v31] = v25[v30];
          v30 *= 2;
          v29 = (2 * v28) | 1;
          v31 = v28;
          if (v30 > v12)
            goto LABEL_20;
        }
        v32 = v24[v29];
        v30 = v29;
        if (v33 >= v26)
          goto LABEL_17;
LABEL_19:
        v28 = v31;
LABEL_20:
        v24[v28] = v26;
        v25[v28] = v27;
LABEL_21:
        if (++v21 == a6)
        {
          v7 = a7;
          v15 = a7[1];
          v10 = v56;
          v9 = v57;
          break;
        }
      }
    }
    if (!v15)
    {
      v35 = 0;
      goto LABEL_42;
    }
    v34 = 0;
    v35 = 0;
    v36 = v19 - 1;
    v37 = v20 - 1;
    do
    {
      v38 = *v19;
      v39 = *v20;
      v40 = v15 - v34;
      v41 = v36[v15 - v34];
      if (v15 - v34 < 2)
      {
        v42 = 1;
        goto LABEL_37;
      }
      v43 = 3;
      v44 = 2;
      v45 = 1;
      while (1)
      {
        v46 = v36[v44];
        if (v43 != v40 + 1)
        {
          v47 = v36[v43];
          if (v46 <= v47)
            break;
        }
        if (v41 > v46)
          goto LABEL_35;
LABEL_33:
        v42 = v44;
        v36[v45] = v46;
        v37[v45] = v37[v44];
        v44 *= 2;
        v43 = (2 * v42) | 1;
        v45 = v42;
        if (v44 > v40)
          goto LABEL_36;
      }
      v46 = v36[v43];
      v44 = v43;
      if (v41 <= v47)
        goto LABEL_33;
LABEL_35:
      v42 = v45;
LABEL_36:
      v41 = v36[v40];
LABEL_37:
      v36[v42] = v41;
      v37[v42] = v37[v40];
      v48 = v15 + ~v35;
      v19[v48] = v38;
      v20[v48] = v39;
      if (v39 != -1)
        ++v35;
      ++v34;
    }
    while (v34 != v15);
LABEL_42:
    memmove(v19, &v19[v15 - v35], 4 * v35);
    result = (char *)memmove(v20, &v20[v15 - v35], 8 * v35);
    v49 = v15 - v35;
    if (v15 > v35)
    {
      v50 = (_QWORD *)(v58 + v59 * v10 + 8 * v35);
      v51 = (_DWORD *)(v60 + v59 * v9 + 4 * v35);
      do
      {
        *v51++ = 2139095039;
        *v50++ = -1;
        --v49;
      }
      while (v49);
    }
    v11 = v61 + 1;
    v10 += 8;
    v9 += 4;
  }
  while (v61 + 1 != a5);
  return result;
}

uint64_t faiss::pairwise_L2sqr(uint64_t this, uint64_t a2, faiss *a3, uint64_t a4, float *a5, float *a6, float *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  faiss *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float alpha;
  float beta;
  int v35;
  int lda;
  int v37;
  int k;
  int n;
  int m;

  if (a2 && a4)
  {
    v14 = this;
    v15 = a9;
    if (a7 == (float *)-1)
      v16 = this;
    else
      v16 = (uint64_t)a7;
    if (a8 == -1)
      v17 = this;
    else
      v17 = a8;
    if (a9 == -1)
      v15 = a4;
    v30 = v15;
    v31 = v17;
    if (a4 >= 1)
    {
      v18 = (faiss *)a5;
      v19 = 4 * v17;
      v20 = a6;
      v21 = a4;
      do
      {
        *v20++ = faiss::fvec_norm_L2sqr(v18, v14);
        v18 = (faiss *)((char *)v18 + v19);
        --v21;
      }
      while (v21);
    }
    if (a2 > 1)
    {
      v22 = 1;
      v23 = v30;
      do
      {
        v24 = faiss::fvec_norm_L2sqr((faiss *)((char *)a3 + 4 * v22 * v16), v14);
        v25 = a6;
        v26 = a4;
        if (a4 >= 1)
        {
          do
          {
            v25[v23] = v24 + *v25;
            ++v25;
            --v26;
          }
          while (v26);
        }
        ++v22;
        v23 += v30;
      }
      while (v22 != a2);
    }
    v27 = faiss::fvec_norm_L2sqr(a3, v14);
    if (a4 >= 1)
    {
      v28 = a6;
      v29 = a4;
      do
      {
        *v28 = v27 + *v28;
        ++v28;
        --v29;
      }
      while (v29);
    }
    m = a4;
    k = v14;
    n = a2;
    lda = v31;
    v37 = v16;
    beta = 1.0;
    v35 = v30;
    alpha = -2.0;
    return sgemm_("Transposed", "Not transposed", &m, &n, &k, &alpha, a5, &lda, (float *)a3, &v37, &beta, a6, &v35);
  }
  return this;
}

float *faiss::inner_product_to_L2sqr(float *this, float *a2, float *a3, const float *a4, uint64_t a5)
{
  const float *i;
  float *v6;
  float *v7;
  uint64_t j;
  float v9;

  if (a4)
  {
    for (i = 0; i != a4; i = (const float *)((char *)i + 1))
    {
      v6 = a3;
      v7 = this;
      for (j = a5; j; --j)
      {
        v9 = *v6++;
        *v7 = (float)(a2[(_QWORD)i] + v9) + (float)(*v7 * -2.0);
        ++v7;
      }
      this += a5;
    }
  }
  return this;
}

float faiss::HeapResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::add_result(uint64_t a1, uint64_t a2, float result)
{
  float *v3;
  unint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;

  v3 = *(float **)(a1 + 16);
  if (*v3 >= result)
    return result;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v3 - 1;
  v6 = *(_QWORD *)(a1 + 24) - 8;
  if (v4 < 2)
  {
    v7 = 1;
    goto LABEL_13;
  }
  v8 = 1;
  v9 = 2;
  v10 = 3;
  while (1)
  {
    v11 = v5[v9];
    if (v10 != v4 + 1)
    {
      v12 = v5[v10];
      if (v11 >= v12)
        break;
    }
    if (v11 > result)
      goto LABEL_12;
LABEL_10:
    v7 = v9;
    v5[v8] = v11;
    *(_QWORD *)(v6 + 8 * v8) = *(_QWORD *)(v6 + 8 * v9);
    v9 *= 2;
    v10 = (2 * v7) | 1;
    v8 = v7;
    if (v9 > v4)
      goto LABEL_13;
  }
  v11 = v5[v10];
  v9 = v10;
  if (v12 <= result)
    goto LABEL_10;
LABEL_12:
  v7 = v8;
LABEL_13:
  v5[v7] = result;
  *(_QWORD *)(v6 + 8 * v7) = a2;
  result = *v3;
  *(float *)(a1 + 32) = *v3;
  return result;
}

void *faiss::HeapResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::end(_QWORD *a1)
{
  int *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  void *result;
  unint64_t v20;
  uint64_t *v21;
  int *v22;

  v2 = a1[1];
  v1 = (int *)a1[2];
  v3 = (uint64_t *)a1[3];
  if (!v2)
  {
    v5 = 0;
    goto LABEL_20;
  }
  v4 = 0;
  v5 = 0;
  v6 = v1 - 1;
  v7 = v3 - 1;
  do
  {
    v8 = *v1;
    v9 = *v3;
    v10 = v2 - v4;
    v11 = *(float *)&v6[v2 - v4];
    if (v2 - v4 < 2)
    {
      v12 = 1;
      goto LABEL_15;
    }
    v13 = 3;
    v14 = 2;
    v15 = 1;
    while (1)
    {
      v16 = *(float *)&v6[v14];
      if (v13 != v10 + 1)
      {
        v17 = *(float *)&v6[v13];
        if (v16 >= v17)
          break;
      }
      if (v11 < v16)
        goto LABEL_13;
LABEL_11:
      v12 = v14;
      *(float *)&v6[v15] = v16;
      v7[v15] = v7[v14];
      v14 *= 2;
      v13 = (2 * v12) | 1;
      v15 = v12;
      if (v14 > v10)
        goto LABEL_14;
    }
    v16 = *(float *)&v6[v13];
    v14 = v13;
    if (v11 >= v17)
      goto LABEL_11;
LABEL_13:
    v12 = v15;
LABEL_14:
    v11 = *(float *)&v6[v10];
LABEL_15:
    *(float *)&v6[v12] = v11;
    v7[v12] = v7[v10];
    v18 = v2 + ~v5;
    v1[v18] = v8;
    v3[v18] = v9;
    if (v9 != -1)
      ++v5;
    ++v4;
  }
  while (v4 != v2);
LABEL_20:
  memmove(v1, &v1[v2 - v5], 4 * v5);
  result = memmove(v3, &v3[v2 - v5], 8 * v5);
  v20 = v2 - v5;
  if (v2 > v5)
  {
    v21 = &v3[v5];
    v22 = &v1[v5];
    do
    {
      *v22++ = -8388609;
      *v21++ = -1;
      --v20;
    }
    while (v20);
  }
  return result;
}

_QWORD *faiss::HeapResultHandler<faiss::CMin<float,long long>>::add_results(_QWORD *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;

  v4 = result[4];
  v5 = result[5];
  if (v4 < v5)
  {
    v6 = result[1];
    v7 = a4 - 4 * a2;
    v8 = result[2] - 8;
    for (i = result[4]; i != v5; ++i)
    {
      if (a3 <= a2)
        continue;
      v10 = result[3] * i;
      v11 = (float *)(v6 + 4 * v10);
      v12 = v11 - 1;
      v13 = *v11;
      v14 = v8 + 8 * v10;
      v15 = a2;
      do
      {
        v16 = *(float *)(v7 + 4 * (i - v4) * (a3 - a2) + 4 * v15);
        if (v13 >= v16)
          goto LABEL_18;
        v17 = result[3];
        if (v17 < 2)
        {
          v18 = 1;
          goto LABEL_17;
        }
        v19 = 3;
        v20 = 2;
        v21 = 1;
        while (1)
        {
          v22 = v12[v20];
          if (v19 != v17 + 1)
          {
            v23 = v12[v19];
            if (v22 >= v23)
              break;
          }
          if (v22 > v16)
            goto LABEL_16;
LABEL_14:
          v18 = v20;
          v12[v21] = v22;
          *(_QWORD *)(v14 + 8 * v21) = *(_QWORD *)(v14 + 8 * v20);
          v20 *= 2;
          v19 = (2 * v18) | 1;
          v21 = v18;
          if (v20 > v17)
            goto LABEL_17;
        }
        v22 = v12[v19];
        v20 = v19;
        if (v23 <= v16)
          goto LABEL_14;
LABEL_16:
        v18 = v21;
LABEL_17:
        v12[v18] = v16;
        *(_QWORD *)(v14 + 8 * v18) = v15;
        v13 = *v11;
LABEL_18:
        ++v15;
      }
      while (v15 != a3);
    }
  }
  return result;
}

_QWORD *faiss::HeapResultHandler<faiss::CMin<float,long long>>::end_multiple(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  uint64_t v27;

  v1 = result[4];
  if (v1 >= result[5])
    return result;
  v2 = result;
  v3 = 8 * v1;
  v4 = 4 * v1;
  do
  {
    v6 = v2[2];
    v5 = v2[3];
    v7 = (int *)(v2[1] + 4 * v5 * v1);
    v8 = (uint64_t *)(v6 + 8 * v5 * v1);
    v27 = v2[1];
    if (!v5)
    {
      v10 = 0;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = 0;
    v11 = v7 - 1;
    v12 = v8 - 1;
    do
    {
      v13 = *v7;
      v14 = *v8;
      v15 = v5 - v9;
      v16 = *(float *)&v11[v5 - v9];
      if (v5 - v9 < 2)
      {
        v17 = 1;
        goto LABEL_17;
      }
      v18 = 3;
      v19 = 2;
      v20 = 1;
      while (1)
      {
        v21 = *(float *)&v11[v19];
        if (v18 != v15 + 1)
        {
          v22 = *(float *)&v11[v18];
          if (v21 >= v22)
            break;
        }
        if (v16 < v21)
          goto LABEL_15;
LABEL_13:
        v17 = v19;
        *(float *)&v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        v18 = (2 * v17) | 1;
        v20 = v17;
        if (v19 > v15)
          goto LABEL_16;
      }
      v21 = *(float *)&v11[v18];
      v19 = v18;
      if (v16 >= v22)
        goto LABEL_13;
LABEL_15:
      v17 = v20;
LABEL_16:
      v16 = *(float *)&v11[v15];
LABEL_17:
      *(float *)&v11[v17] = v16;
      v12[v17] = v12[v15];
      v23 = v5 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1)
        ++v10;
      ++v9;
    }
    while (v9 != v5);
LABEL_22:
    memmove(v7, &v7[v5 - v10], 4 * v10);
    result = memmove((void *)(v6 + 8 * v5 * v1), &v8[v5 - v10], 8 * v10);
    v24 = v5 - v10;
    if (v5 > v10)
    {
      v25 = (_QWORD *)(v6 + v5 * v3 + 8 * v10);
      v26 = (_DWORD *)(v27 + v5 * v4 + 4 * v10);
      do
      {
        *v26++ = -8388609;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v1;
    v3 += 8;
    v4 += 4;
  }
  while (v1 < v2[5]);
  return result;
}

_QWORD *faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::~SingleResultHandler(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::SingleResultHandler(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = a1 + 4;
  std::vector<float>::vector(a1 + 1, *(_QWORD *)(a2 + 32));
  std::vector<long long>::vector(v4, *(_QWORD *)(a2 + 32));
  return a1;
}

void sub_1D48CF5F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D48CF668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void faiss::ReservoirTopN<faiss::CMin<float,long long>>::add(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;

  if (*(float *)(a1 + 40) < a3)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 == *(_QWORD *)(a1 + 32))
    {
      faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy(a1);
      v6 = *(_QWORD *)(a1 + 16);
    }
    v7 = *(_QWORD *)(a1 + 8);
    *(float *)(*(_QWORD *)a1 + 4 * v6) = a3;
    *(_QWORD *)(v7 + 8 * v6) = a2;
    *(_QWORD *)(a1 + 16) = v6 + 1;
  }
}

void faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 32))
    faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy();
  *(float *)(a1 + 40) = MEMORY[0x1D8262574](*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

void *faiss::ReservoirTopN<faiss::CMin<float,long long>>::to_result(uint64_t *a1, float *__dst, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t *v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  uint64_t *v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  void *result;
  uint64_t v53;
  uint64_t *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  uint64_t *v59;
  uint64_t v60;
  float *v61;
  uint64_t *v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  uint64_t v70;
  unint64_t v71;
  float *v72;
  uint64_t *v73;
  float v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  float *v87;

  v7 = a1[2];
  v6 = a1[3];
  if (v6 >= v7)
    v8 = a1[2];
  else
    v8 = a1[3];
  if (v8)
  {
    v9 = 0;
    v10 = *a1;
    v11 = a1[1];
    v12 = __dst - 1;
    v13 = a3 - 1;
    do
    {
      v14 = v9++;
      v15 = *(float *)(v10 + 4 * v14);
      v16 = *(_QWORD *)(v11 + 8 * v14);
      if (v14)
      {
        v17 = v9;
        while (1)
        {
          v18 = v17 >> 1;
          v19 = v12[v17 >> 1];
          if (v19 <= v15)
            break;
          v12[v17] = v19;
          v13[v17] = v13[v18];
          v20 = v17 > 3;
          v17 >>= 1;
          if (!v20)
            goto LABEL_13;
        }
        v18 = v17;
      }
      else
      {
        v18 = 1;
      }
LABEL_13:
      v12[v18] = v15;
      v13[v18] = v16;
      v7 = a1[2];
      v6 = a1[3];
      if (v6 >= v7)
        v21 = a1[2];
      else
        v21 = a1[3];
    }
    while (v21 > v9);
  }
  v22 = v7 - v6;
  if (v7 < v6)
  {
    if (!v7)
    {
      v24 = 0;
      goto LABEL_55;
    }
    v23 = 0;
    v24 = 0;
    v25 = __dst - 1;
    v26 = a3 - 1;
    while (1)
    {
      v27 = *__dst;
      v28 = *a3;
      v29 = v7 - v23;
      v30 = v25[v7 - v23];
      if (v7 - v23 < 2)
      {
        v31 = 1;
        goto LABEL_32;
      }
      v32 = 3;
      v33 = 2;
      v34 = 1;
      while (1)
      {
        v35 = v25[v33];
        if (v32 != v29 + 1)
        {
          v36 = v25[v32];
          if (v35 >= v36)
            break;
        }
        if (v30 < v35)
          goto LABEL_30;
LABEL_28:
        v31 = v33;
        v25[v34] = v35;
        v26[v34] = v26[v33];
        v33 *= 2;
        v32 = (2 * v31) | 1;
        v34 = v31;
        if (v33 > v29)
          goto LABEL_31;
      }
      v35 = v25[v32];
      v33 = v32;
      if (v30 >= v36)
        goto LABEL_28;
LABEL_30:
      v31 = v34;
LABEL_31:
      v30 = v25[v29];
LABEL_32:
      v25[v31] = v30;
      v26[v31] = v26[v29];
      v37 = v7 + ~v24;
      __dst[v37] = v27;
      a3[v37] = v28;
      if (v28 != -1)
        ++v24;
      if (++v23 == v7)
      {
LABEL_55:
        memmove(__dst, &__dst[v7 - v24], 4 * v24);
        result = memmove(a3, &a3[v7 - v24], 8 * v24);
        v53 = v7 - v24;
        if (v7 > v24)
        {
          v54 = &a3[v24];
          v55 = &__dst[v24];
          do
          {
            *v55++ = -3.4028e38;
            *v54++ = -1;
            --v53;
          }
          while (v53);
        }
        v56 = a1[2];
        v57 = a1[3] - v56;
        if (v57)
        {
          v58 = &__dst[v56];
          v59 = &a3[v56];
          do
          {
            *v58++ = -3.4028e38;
            *v59++ = -1;
            --v57;
          }
          while (v57);
        }
        return result;
      }
    }
  }
  v38 = a1[1];
  v39 = *a1 + 4 * v6;
  if (!v38)
  {
    if (v7 == v6)
      goto LABEL_78;
    v60 = 0;
    v61 = __dst - 1;
    v62 = a3 - 1;
LABEL_64:
    v63 = *(float *)(v39 + 4 * v60);
    if (*__dst >= v63)
      goto LABEL_77;
    if (v6 < 2)
    {
      v64 = 1;
      goto LABEL_76;
    }
    v65 = 3;
    v66 = 2;
    v67 = 1;
    while (1)
    {
      v68 = v61[v66];
      if (v65 == v6 + 1 || (v69 = v61[v65], v68 < v69))
      {
        if (v68 > v63)
          goto LABEL_75;
      }
      else
      {
        v68 = v61[v65];
        v66 = v65;
        if (v69 > v63)
        {
LABEL_75:
          v64 = v67;
LABEL_76:
          v61[v64] = v63;
          v62[v64] = v60;
LABEL_77:
          if (++v60 == v22)
            goto LABEL_78;
          goto LABEL_64;
        }
      }
      v64 = v66;
      v61[v67] = v68;
      v62[v67] = v62[v66];
      v66 *= 2;
      v65 = (2 * v64) | 1;
      v67 = v64;
      if (v66 > v6)
        goto LABEL_76;
    }
  }
  if (v7 == v6)
    goto LABEL_78;
  v40 = 0;
  v41 = __dst - 1;
  v42 = a3 - 1;
  v43 = v38 + 8 * v6;
  do
  {
    v44 = *(float *)(v39 + 4 * v40);
    if (*__dst >= v44)
      goto LABEL_52;
    v45 = *(_QWORD *)(v43 + 8 * v40);
    if (v6 < 2)
    {
      v46 = 1;
      goto LABEL_51;
    }
    v47 = 3;
    v48 = 2;
    v49 = 1;
    while (1)
    {
      v50 = v41[v48];
      if (v47 != v6 + 1)
      {
        v51 = v41[v47];
        if (v50 >= v51)
          break;
      }
      if (v50 > v44)
        goto LABEL_50;
LABEL_48:
      v46 = v48;
      v41[v49] = v50;
      v42[v49] = v42[v48];
      v48 *= 2;
      v47 = (2 * v46) | 1;
      v49 = v46;
      if (v48 > v6)
        goto LABEL_51;
    }
    v50 = v41[v47];
    v48 = v47;
    if (v51 <= v44)
      goto LABEL_48;
LABEL_50:
    v46 = v49;
LABEL_51:
    v41[v46] = v44;
    v42[v46] = v45;
LABEL_52:
    ++v40;
  }
  while (v40 != v22);
LABEL_78:
  if (!v6)
  {
    v71 = 0;
    goto LABEL_97;
  }
  v70 = 0;
  v71 = 0;
  v72 = __dst - 1;
  v73 = a3 - 1;
  while (2)
  {
    v74 = *__dst;
    v75 = *a3;
    v76 = v6 - v70;
    v77 = v72[v6 - v70];
    if (v6 - v70 < 2)
    {
      v78 = 1;
      goto LABEL_92;
    }
    v79 = 3;
    v80 = 2;
    v81 = 1;
    while (2)
    {
      v82 = v72[v80];
      if (v79 == v76 + 1 || (v83 = v72[v79], v82 < v83))
      {
        if (v77 < v82)
          break;
        goto LABEL_88;
      }
      v82 = v72[v79];
      v80 = v79;
      if (v77 >= v83)
      {
LABEL_88:
        v78 = v80;
        v72[v81] = v82;
        v73[v81] = v73[v80];
        v80 *= 2;
        v79 = (2 * v78) | 1;
        v81 = v78;
        if (v80 > v76)
          goto LABEL_91;
        continue;
      }
      break;
    }
    v78 = v81;
LABEL_91:
    v77 = v72[v76];
LABEL_92:
    v72[v78] = v77;
    v73[v78] = v73[v76];
    v84 = v6 + ~v71;
    __dst[v84] = v74;
    a3[v84] = v75;
    if (v75 != -1)
      ++v71;
    if (++v70 != v6)
      continue;
    break;
  }
LABEL_97:
  memmove(__dst, &__dst[v6 - v71], 4 * v71);
  result = memmove(a3, &a3[v6 - v71], 8 * v71);
  v85 = v6 - v71;
  if (v6 > v71)
  {
    v86 = &a3[v71];
    v87 = &__dst[v71];
    do
    {
      *v87++ = -3.4028e38;
      *v86++ = -1;
      --v85;
    }
    while (v85);
  }
  return result;
}

void faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::begin_multiple(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  a1[5] = a2;
  a1[6] = a3;
  v6 = a3 - a2;
  v7 = a1 + 4;
  std::vector<float>::resize((uint64_t)(a1 + 7), a1[4] * (a3 - a2));
  std::vector<long long>::resize((uint64_t)(a1 + 10), *v7 * v6);
  v8 = a1[13];
  a1[14] = v8;
  v9 = a3 >= a2;
  v10 = a3 - a2;
  if (v10 != 0 && v9)
  {
    v11 = 0;
    do
    {
      v12 = a1[4];
      v13 = a1[7] + 4 * v12 * v11;
      v14 = a1[10] + 8 * v12 * v11;
      v16 = v14;
      v17 = v13;
      if (v8 >= a1[15])
      {
        v8 = std::vector<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::__emplace_back_slow_path<long long &,unsigned long &,float *,long long *>(a1 + 13, a1 + 3, a1 + 4, &v17, &v16);
      }
      else
      {
        v15 = a1[3];
        *(_QWORD *)v8 = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = v15;
        *(_QWORD *)(v8 + 32) = v12;
        if (v15 >= v12)
          __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
        *(_DWORD *)(v8 + 40) = -8388609;
        v8 += 48;
        a1[14] = v8;
      }
      a1[14] = v8;
      ++v11;
    }
    while (v10 != v11);
  }
}

void sub_1D48CFD58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 112) = v2;
  _Unwind_Resume(a1);
}

void faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::add_results(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;

  v5 = a1[5];
  v4 = a1[6];
  if (v5 < v4)
  {
    v10 = 4 * (a3 - a2);
    do
    {
      if (a3 > a2)
      {
        v11 = v5 - a1[5];
        v12 = a1[13] + 48 * v11;
        v13 = (float *)(a4 + v10 * v11);
        v14 = a2;
        do
        {
          v15 = *v13++;
          faiss::ReservoirTopN<faiss::CMin<float,long long>>::add(v12, v14++, v15);
        }
        while (a3 != v14);
        v4 = a1[6];
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

_QWORD *faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::end_multiple(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = result[5];
  if (v1 < result[6])
  {
    v2 = result;
    v3 = 48 * v1;
    do
    {
      result = faiss::ReservoirTopN<faiss::CMin<float,long long>>::to_result((uint64_t *)(v2[13] - 48 * v2[5] + v3), (float *)(v2[1] + 4 * v2[3] * v1), (uint64_t *)(v2[2] + 8 * v2[3] * v1));
      ++v1;
      v3 += 48;
    }
    while (v1 < v2[6]);
  }
  return result;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t std::vector<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::__emplace_back_slow_path<long long &,unsigned long &,float *,long long *>(uint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v12 = 0x555555555555555;
  else
    v12 = v7;
  if (v12)
  {
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>((uint64_t)(a1 + 2), v12);
    v15 = v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = (uint64_t)&v13[48 * v6];
  std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>((uint64_t)(a1 + 2), v16, a2, a3, a4, a5);
  v17 = v16 + 48;
  v19 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      v20 = *((_OWORD *)v18 - 3);
      v21 = *((_OWORD *)v18 - 2);
      *(_OWORD *)(v16 - 20) = *(_OWORD *)(v18 - 20);
      *(_OWORD *)(v16 - 48) = v20;
      *(_OWORD *)(v16 - 32) = v21;
      v16 -= 48;
      v18 -= 48;
    }
    while (v18 != v19);
    v18 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&v13[48 * v15];
  if (v18)
    operator delete(v18);
  return v17;
}

void sub_1D48D0234(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v6 = *a3;
  v7 = *a4;
  v8 = *a6;
  *(_QWORD *)a2 = *a5;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  if (v6 >= v7)
    std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>();
  *(_DWORD *)(a2 + 40) = -8388609;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

float faiss::HeapResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::add_result(uint64_t a1, uint64_t a2, float result)
{
  float *v3;
  unint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;

  v3 = *(float **)(a1 + 16);
  if (*v3 <= result)
    return result;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v3 - 1;
  v6 = *(_QWORD *)(a1 + 24) - 8;
  if (v4 < 2)
  {
    v7 = 1;
    goto LABEL_13;
  }
  v8 = 1;
  v9 = 2;
  v10 = 3;
  while (1)
  {
    v11 = v5[v9];
    if (v10 != v4 + 1)
    {
      v12 = v5[v10];
      if (v11 <= v12)
        break;
    }
    if (v11 < result)
      goto LABEL_12;
LABEL_10:
    v7 = v9;
    v5[v8] = v11;
    *(_QWORD *)(v6 + 8 * v8) = *(_QWORD *)(v6 + 8 * v9);
    v9 *= 2;
    v10 = (2 * v7) | 1;
    v8 = v7;
    if (v9 > v4)
      goto LABEL_13;
  }
  v11 = v5[v10];
  v9 = v10;
  if (v12 >= result)
    goto LABEL_10;
LABEL_12:
  v7 = v8;
LABEL_13:
  v5[v7] = result;
  *(_QWORD *)(v6 + 8 * v7) = a2;
  result = *v3;
  *(float *)(a1 + 32) = *v3;
  return result;
}

void *faiss::HeapResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::end(_QWORD *a1)
{
  int *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  void *result;
  unint64_t v20;
  uint64_t *v21;
  int *v22;

  v2 = a1[1];
  v1 = (int *)a1[2];
  v3 = (uint64_t *)a1[3];
  if (!v2)
  {
    v5 = 0;
    goto LABEL_20;
  }
  v4 = 0;
  v5 = 0;
  v6 = v1 - 1;
  v7 = v3 - 1;
  do
  {
    v8 = *v1;
    v9 = *v3;
    v10 = v2 - v4;
    v11 = *(float *)&v6[v2 - v4];
    if (v2 - v4 < 2)
    {
      v12 = 1;
      goto LABEL_15;
    }
    v13 = 3;
    v14 = 2;
    v15 = 1;
    while (1)
    {
      v16 = *(float *)&v6[v14];
      if (v13 != v10 + 1)
      {
        v17 = *(float *)&v6[v13];
        if (v16 <= v17)
          break;
      }
      if (v11 > v16)
        goto LABEL_13;
LABEL_11:
      v12 = v14;
      *(float *)&v6[v15] = v16;
      v7[v15] = v7[v14];
      v14 *= 2;
      v13 = (2 * v12) | 1;
      v15 = v12;
      if (v14 > v10)
        goto LABEL_14;
    }
    v16 = *(float *)&v6[v13];
    v14 = v13;
    if (v11 <= v17)
      goto LABEL_11;
LABEL_13:
    v12 = v15;
LABEL_14:
    v11 = *(float *)&v6[v10];
LABEL_15:
    *(float *)&v6[v12] = v11;
    v7[v12] = v7[v10];
    v18 = v2 + ~v5;
    v1[v18] = v8;
    v3[v18] = v9;
    if (v9 != -1)
      ++v5;
    ++v4;
  }
  while (v4 != v2);
LABEL_20:
  memmove(v1, &v1[v2 - v5], 4 * v5);
  result = memmove(v3, &v3[v2 - v5], 8 * v5);
  v20 = v2 - v5;
  if (v2 > v5)
  {
    v21 = &v3[v5];
    v22 = &v1[v5];
    do
    {
      *v22++ = 2139095039;
      *v21++ = -1;
      --v20;
    }
    while (v20);
  }
  return result;
}

_QWORD *faiss::HeapResultHandler<faiss::CMax<float,long long>>::add_results(_QWORD *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;

  v4 = result[4];
  v5 = result[5];
  if (v4 < v5)
  {
    v6 = result[1];
    v7 = a4 - 4 * a2;
    v8 = result[2] - 8;
    for (i = result[4]; i != v5; ++i)
    {
      if (a3 <= a2)
        continue;
      v10 = result[3] * i;
      v11 = (float *)(v6 + 4 * v10);
      v12 = v11 - 1;
      v13 = *v11;
      v14 = v8 + 8 * v10;
      v15 = a2;
      do
      {
        v16 = *(float *)(v7 + 4 * (i - v4) * (a3 - a2) + 4 * v15);
        if (v13 <= v16)
          goto LABEL_18;
        v17 = result[3];
        if (v17 < 2)
        {
          v18 = 1;
          goto LABEL_17;
        }
        v19 = 3;
        v20 = 2;
        v21 = 1;
        while (1)
        {
          v22 = v12[v20];
          if (v19 != v17 + 1)
          {
            v23 = v12[v19];
            if (v22 <= v23)
              break;
          }
          if (v22 < v16)
            goto LABEL_16;
LABEL_14:
          v18 = v20;
          v12[v21] = v22;
          *(_QWORD *)(v14 + 8 * v21) = *(_QWORD *)(v14 + 8 * v20);
          v20 *= 2;
          v19 = (2 * v18) | 1;
          v21 = v18;
          if (v20 > v17)
            goto LABEL_17;
        }
        v22 = v12[v19];
        v20 = v19;
        if (v23 >= v16)
          goto LABEL_14;
LABEL_16:
        v18 = v21;
LABEL_17:
        v12[v18] = v16;
        *(_QWORD *)(v14 + 8 * v18) = v15;
        v13 = *v11;
LABEL_18:
        ++v15;
      }
      while (v15 != a3);
    }
  }
  return result;
}

_QWORD *faiss::HeapResultHandler<faiss::CMax<float,long long>>::end_multiple(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  uint64_t v27;

  v1 = result[4];
  if (v1 >= result[5])
    return result;
  v2 = result;
  v3 = 8 * v1;
  v4 = 4 * v1;
  do
  {
    v6 = v2[2];
    v5 = v2[3];
    v7 = (int *)(v2[1] + 4 * v5 * v1);
    v8 = (uint64_t *)(v6 + 8 * v5 * v1);
    v27 = v2[1];
    if (!v5)
    {
      v10 = 0;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = 0;
    v11 = v7 - 1;
    v12 = v8 - 1;
    do
    {
      v13 = *v7;
      v14 = *v8;
      v15 = v5 - v9;
      v16 = *(float *)&v11[v5 - v9];
      if (v5 - v9 < 2)
      {
        v17 = 1;
        goto LABEL_17;
      }
      v18 = 3;
      v19 = 2;
      v20 = 1;
      while (1)
      {
        v21 = *(float *)&v11[v19];
        if (v18 != v15 + 1)
        {
          v22 = *(float *)&v11[v18];
          if (v21 <= v22)
            break;
        }
        if (v16 > v21)
          goto LABEL_15;
LABEL_13:
        v17 = v19;
        *(float *)&v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        v18 = (2 * v17) | 1;
        v20 = v17;
        if (v19 > v15)
          goto LABEL_16;
      }
      v21 = *(float *)&v11[v18];
      v19 = v18;
      if (v16 <= v22)
        goto LABEL_13;
LABEL_15:
      v17 = v20;
LABEL_16:
      v16 = *(float *)&v11[v15];
LABEL_17:
      *(float *)&v11[v17] = v16;
      v12[v17] = v12[v15];
      v23 = v5 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1)
        ++v10;
      ++v9;
    }
    while (v9 != v5);
LABEL_22:
    memmove(v7, &v7[v5 - v10], 4 * v10);
    result = memmove((void *)(v6 + 8 * v5 * v1), &v8[v5 - v10], 8 * v10);
    v24 = v5 - v10;
    if (v5 > v10)
    {
      v25 = (_QWORD *)(v6 + v5 * v3 + 8 * v10);
      v26 = (_DWORD *)(v27 + v5 * v4 + 4 * v10);
      do
      {
        *v26++ = 2139095039;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v1;
    v3 += 8;
    v4 += 4;
  }
  while (v1 < v2[5]);
  return result;
}

void faiss::ReservoirTopN<faiss::CMax<float,long long>>::add(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;

  if (*(float *)(a1 + 40) > a3)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 == *(_QWORD *)(a1 + 32))
    {
      faiss::ReservoirTopN<faiss::CMax<float,long long>>::shrink_fuzzy(a1);
      v6 = *(_QWORD *)(a1 + 16);
    }
    v7 = *(_QWORD *)(a1 + 8);
    *(float *)(*(_QWORD *)a1 + 4 * v6) = a3;
    *(_QWORD *)(v7 + 8 * v6) = a2;
    *(_QWORD *)(a1 + 16) = v6 + 1;
  }
}

void faiss::ReservoirTopN<faiss::CMax<float,long long>>::shrink_fuzzy(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 32))
    faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy();
  *(float *)(a1 + 40) = MEMORY[0x1D8262568](*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

void *faiss::ReservoirTopN<faiss::CMax<float,long long>>::to_result(uint64_t *a1, float *__dst, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t *v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  uint64_t *v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  void *result;
  uint64_t v53;
  uint64_t *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  uint64_t *v59;
  uint64_t v60;
  float *v61;
  uint64_t *v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  uint64_t v70;
  unint64_t v71;
  float *v72;
  uint64_t *v73;
  float v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  float *v87;

  v7 = a1[2];
  v6 = a1[3];
  if (v6 >= v7)
    v8 = a1[2];
  else
    v8 = a1[3];
  if (v8)
  {
    v9 = 0;
    v10 = *a1;
    v11 = a1[1];
    v12 = __dst - 1;
    v13 = a3 - 1;
    do
    {
      v14 = v9++;
      v15 = *(float *)(v10 + 4 * v14);
      v16 = *(_QWORD *)(v11 + 8 * v14);
      if (v14)
      {
        v17 = v9;
        while (1)
        {
          v18 = v17 >> 1;
          v19 = v12[v17 >> 1];
          if (v19 >= v15)
            break;
          v12[v17] = v19;
          v13[v17] = v13[v18];
          v20 = v17 > 3;
          v17 >>= 1;
          if (!v20)
            goto LABEL_13;
        }
        v18 = v17;
      }
      else
      {
        v18 = 1;
      }
LABEL_13:
      v12[v18] = v15;
      v13[v18] = v16;
      v7 = a1[2];
      v6 = a1[3];
      if (v6 >= v7)
        v21 = a1[2];
      else
        v21 = a1[3];
    }
    while (v21 > v9);
  }
  v22 = v7 - v6;
  if (v7 < v6)
  {
    if (!v7)
    {
      v24 = 0;
      goto LABEL_55;
    }
    v23 = 0;
    v24 = 0;
    v25 = __dst - 1;
    v26 = a3 - 1;
    while (1)
    {
      v27 = *__dst;
      v28 = *a3;
      v29 = v7 - v23;
      v30 = v25[v7 - v23];
      if (v7 - v23 < 2)
      {
        v31 = 1;
        goto LABEL_32;
      }
      v32 = 3;
      v33 = 2;
      v34 = 1;
      while (1)
      {
        v35 = v25[v33];
        if (v32 != v29 + 1)
        {
          v36 = v25[v32];
          if (v35 <= v36)
            break;
        }
        if (v30 > v35)
          goto LABEL_30;
LABEL_28:
        v31 = v33;
        v25[v34] = v35;
        v26[v34] = v26[v33];
        v33 *= 2;
        v32 = (2 * v31) | 1;
        v34 = v31;
        if (v33 > v29)
          goto LABEL_31;
      }
      v35 = v25[v32];
      v33 = v32;
      if (v30 <= v36)
        goto LABEL_28;
LABEL_30:
      v31 = v34;
LABEL_31:
      v30 = v25[v29];
LABEL_32:
      v25[v31] = v30;
      v26[v31] = v26[v29];
      v37 = v7 + ~v24;
      __dst[v37] = v27;
      a3[v37] = v28;
      if (v28 != -1)
        ++v24;
      if (++v23 == v7)
      {
LABEL_55:
        memmove(__dst, &__dst[v7 - v24], 4 * v24);
        result = memmove(a3, &a3[v7 - v24], 8 * v24);
        v53 = v7 - v24;
        if (v7 > v24)
        {
          v54 = &a3[v24];
          v55 = &__dst[v24];
          do
          {
            *v55++ = 3.4028e38;
            *v54++ = -1;
            --v53;
          }
          while (v53);
        }
        v56 = a1[2];
        v57 = a1[3] - v56;
        if (v57)
        {
          v58 = &__dst[v56];
          v59 = &a3[v56];
          do
          {
            *v58++ = 3.4028e38;
            *v59++ = -1;
            --v57;
          }
          while (v57);
        }
        return result;
      }
    }
  }
  v38 = a1[1];
  v39 = *a1 + 4 * v6;
  if (!v38)
  {
    if (v7 == v6)
      goto LABEL_78;
    v60 = 0;
    v61 = __dst - 1;
    v62 = a3 - 1;
LABEL_64:
    v63 = *(float *)(v39 + 4 * v60);
    if (*__dst <= v63)
      goto LABEL_77;
    if (v6 < 2)
    {
      v64 = 1;
      goto LABEL_76;
    }
    v65 = 3;
    v66 = 2;
    v67 = 1;
    while (1)
    {
      v68 = v61[v66];
      if (v65 == v6 + 1 || (v69 = v61[v65], v68 > v69))
      {
        if (v68 < v63)
          goto LABEL_75;
      }
      else
      {
        v68 = v61[v65];
        v66 = v65;
        if (v69 < v63)
        {
LABEL_75:
          v64 = v67;
LABEL_76:
          v61[v64] = v63;
          v62[v64] = v60;
LABEL_77:
          if (++v60 == v22)
            goto LABEL_78;
          goto LABEL_64;
        }
      }
      v64 = v66;
      v61[v67] = v68;
      v62[v67] = v62[v66];
      v66 *= 2;
      v65 = (2 * v64) | 1;
      v67 = v64;
      if (v66 > v6)
        goto LABEL_76;
    }
  }
  if (v7 == v6)
    goto LABEL_78;
  v40 = 0;
  v41 = __dst - 1;
  v42 = a3 - 1;
  v43 = v38 + 8 * v6;
  do
  {
    v44 = *(float *)(v39 + 4 * v40);
    if (*__dst <= v44)
      goto LABEL_52;
    v45 = *(_QWORD *)(v43 + 8 * v40);
    if (v6 < 2)
    {
      v46 = 1;
      goto LABEL_51;
    }
    v47 = 3;
    v48 = 2;
    v49 = 1;
    while (1)
    {
      v50 = v41[v48];
      if (v47 != v6 + 1)
      {
        v51 = v41[v47];
        if (v50 <= v51)
          break;
      }
      if (v50 < v44)
        goto LABEL_50;
LABEL_48:
      v46 = v48;
      v41[v49] = v50;
      v42[v49] = v42[v48];
      v48 *= 2;
      v47 = (2 * v46) | 1;
      v49 = v46;
      if (v48 > v6)
        goto LABEL_51;
    }
    v50 = v41[v47];
    v48 = v47;
    if (v51 >= v44)
      goto LABEL_48;
LABEL_50:
    v46 = v49;
LABEL_51:
    v41[v46] = v44;
    v42[v46] = v45;
LABEL_52:
    ++v40;
  }
  while (v40 != v22);
LABEL_78:
  if (!v6)
  {
    v71 = 0;
    goto LABEL_97;
  }
  v70 = 0;
  v71 = 0;
  v72 = __dst - 1;
  v73 = a3 - 1;
  while (2)
  {
    v74 = *__dst;
    v75 = *a3;
    v76 = v6 - v70;
    v77 = v72[v6 - v70];
    if (v6 - v70 < 2)
    {
      v78 = 1;
      goto LABEL_92;
    }
    v79 = 3;
    v80 = 2;
    v81 = 1;
    while (2)
    {
      v82 = v72[v80];
      if (v79 == v76 + 1 || (v83 = v72[v79], v82 > v83))
      {
        if (v77 > v82)
          break;
        goto LABEL_88;
      }
      v82 = v72[v79];
      v80 = v79;
      if (v77 <= v83)
      {
LABEL_88:
        v78 = v80;
        v72[v81] = v82;
        v73[v81] = v73[v80];
        v80 *= 2;
        v79 = (2 * v78) | 1;
        v81 = v78;
        if (v80 > v76)
          goto LABEL_91;
        continue;
      }
      break;
    }
    v78 = v81;
LABEL_91:
    v77 = v72[v76];
LABEL_92:
    v72[v78] = v77;
    v73[v78] = v73[v76];
    v84 = v6 + ~v71;
    __dst[v84] = v74;
    a3[v84] = v75;
    if (v75 != -1)
      ++v71;
    if (++v70 != v6)
      continue;
    break;
  }
LABEL_97:
  memmove(__dst, &__dst[v6 - v71], 4 * v71);
  result = memmove(a3, &a3[v6 - v71], 8 * v71);
  v85 = v6 - v71;
  if (v6 > v71)
  {
    v86 = &a3[v71];
    v87 = &__dst[v71];
    do
    {
      *v87++ = 3.4028e38;
      *v86++ = -1;
      --v85;
    }
    while (v85);
  }
  return result;
}

void faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::begin_multiple(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  a1[5] = a2;
  a1[6] = a3;
  v6 = a3 - a2;
  v7 = a1 + 4;
  std::vector<float>::resize((uint64_t)(a1 + 7), a1[4] * (a3 - a2));
  std::vector<long long>::resize((uint64_t)(a1 + 10), *v7 * v6);
  v8 = a1[13];
  a1[14] = v8;
  v9 = a3 >= a2;
  v10 = a3 - a2;
  if (v10 != 0 && v9)
  {
    v11 = 0;
    do
    {
      v12 = a1[4];
      v13 = a1[7] + 4 * v12 * v11;
      v14 = a1[10] + 8 * v12 * v11;
      v16 = v14;
      v17 = v13;
      if (v8 >= a1[15])
      {
        v8 = std::vector<faiss::ReservoirTopN<faiss::CMax<float,long long>>>::__emplace_back_slow_path<long long &,unsigned long &,float *,long long *>(a1 + 13, a1 + 3, a1 + 4, &v17, &v16);
      }
      else
      {
        v15 = a1[3];
        *(_QWORD *)v8 = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = v15;
        *(_QWORD *)(v8 + 32) = v12;
        if (v15 >= v12)
          __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
        *(_DWORD *)(v8 + 40) = 2139095039;
        v8 += 48;
        a1[14] = v8;
      }
      a1[14] = v8;
      ++v11;
    }
    while (v10 != v11);
  }
}

void sub_1D48D0EA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 112) = v2;
  _Unwind_Resume(a1);
}

void faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::add_results(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;

  v5 = a1[5];
  v4 = a1[6];
  if (v5 < v4)
  {
    v10 = 4 * (a3 - a2);
    do
    {
      if (a3 > a2)
      {
        v11 = v5 - a1[5];
        v12 = a1[13] + 48 * v11;
        v13 = (float *)(a4 + v10 * v11);
        v14 = a2;
        do
        {
          v15 = *v13++;
          faiss::ReservoirTopN<faiss::CMax<float,long long>>::add(v12, v14++, v15);
        }
        while (a3 != v14);
        v4 = a1[6];
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

_QWORD *faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::end_multiple(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = result[5];
  if (v1 < result[6])
  {
    v2 = result;
    v3 = 48 * v1;
    do
    {
      result = faiss::ReservoirTopN<faiss::CMax<float,long long>>::to_result((uint64_t *)(v2[13] - 48 * v2[5] + v3), (float *)(v2[1] + 4 * v2[3] * v1), (uint64_t *)(v2[2] + 8 * v2[3] * v1));
      ++v1;
      v3 += 48;
    }
    while (v1 < v2[6]);
  }
  return result;
}

uint64_t std::vector<faiss::ReservoirTopN<faiss::CMax<float,long long>>>::__emplace_back_slow_path<long long &,unsigned long &,float *,long long *>(uint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v12 = 0x555555555555555;
  else
    v12 = v7;
  if (v12)
  {
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>((uint64_t)(a1 + 2), v12);
    v15 = v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = (uint64_t)&v13[48 * v6];
  std::allocator<faiss::ReservoirTopN<faiss::CMax<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMax<float,long long>>,long long &,unsigned long &,float *,long long *>((uint64_t)(a1 + 2), v16, a2, a3, a4, a5);
  v17 = v16 + 48;
  v19 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      v20 = *((_OWORD *)v18 - 3);
      v21 = *((_OWORD *)v18 - 2);
      *(_OWORD *)(v16 - 20) = *(_OWORD *)(v18 - 20);
      *(_OWORD *)(v16 - 48) = v20;
      *(_OWORD *)(v16 - 32) = v21;
      v16 -= 48;
      v18 -= 48;
    }
    while (v18 != v19);
    v18 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&v13[48 * v15];
  if (v18)
    operator delete(v18);
  return v17;
}

void sub_1D48D110C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::allocator<faiss::ReservoirTopN<faiss::CMax<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMax<float,long long>>,long long &,unsigned long &,float *,long long *>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v6 = *a3;
  v7 = *a4;
  v8 = *a6;
  *(_QWORD *)a2 = *a5;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  if (v6 >= v7)
    std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>();
  *(_DWORD *)(a2 + 40) = 2139095039;
}

uint64_t faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler(uint64_t a1)
{
  void **v2;
  void *v3;
  void *v4;

  v2 = (void **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32))
    faiss::RangeSearchPartialResult::merge((uint64_t **)(a1 + 32), 1);
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::~SingleResultHandler(faiss::RangeSearchPartialResult *a1)
{
  void *v2;

  faiss::RangeSearchPartialResult::finalize(a1);
  v2 = (void *)*((_QWORD *)a1 + 6);
  if (v2)
  {
    *((_QWORD *)a1 + 7) = v2;
    operator delete(v2);
  }
  faiss::BufferList::~BufferList(a1);
}

void faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::add_results(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  faiss::RangeSearchPartialResult *v12;
  unint64_t v13;
  faiss::RangeSearchPartialResult **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  faiss::RangeSearchPartialResult **v22;
  char *v23;
  char *v24;
  char *v25;
  faiss::RangeSearchPartialResult *v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  char *v37;
  unint64_t v38;
  unint64_t i;
  uint64_t v40;
  faiss::RangeQueryResult *v41;
  faiss::RangeQueryResult *v42;
  float *v43;
  uint64_t v44;
  float v45;
  float v46;

  v9 = (void **)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  v10 = *(int *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 64);
  if (v10 < (v11 - v8) >> 3 && *(_QWORD *)(v8 + 8 * v10) == a2)
  {
    v12 = *(faiss::RangeSearchPartialResult **)(*(_QWORD *)(a1 + 32) + 8 * v10);
    LODWORD(v10) = v10 + 1;
  }
  else if (a2 || v11 == v8)
  {
    v12 = (faiss::RangeSearchPartialResult *)operator new();
    faiss::RangeSearchPartialResult::RangeSearchPartialResult(v12, *(faiss::RangeSearchResult **)a1);
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(faiss::RangeSearchPartialResult ***)(a1 + 40);
    if ((unint64_t)v14 >= v13)
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = ((uint64_t)v14 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v18 = v13 - v16;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a1 + 48, v20);
      else
        v21 = 0;
      v22 = (faiss::RangeSearchPartialResult **)&v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v12;
      v15 = v22 + 1;
      v25 = *(char **)(a1 + 32);
      v24 = *(char **)(a1 + 40);
      if (v24 != v25)
      {
        do
        {
          v26 = (faiss::RangeSearchPartialResult *)*((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v22 = v26;
        }
        while (v24 != v25);
        v24 = *(char **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v22;
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v14 = v12;
      v15 = v14 + 1;
    }
    v27 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 40) = v15;
    v28 = *(char **)(a1 + 64);
    if ((unint64_t)v28 >= v27)
    {
      v30 = (char *)*v9;
      v31 = (v28 - (_BYTE *)*v9) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v33 = v27 - (_QWORD)v30;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a1 + 72, v34);
        v30 = *(char **)(a1 + 56);
        v28 = *(char **)(a1 + 64);
      }
      else
      {
        v35 = 0;
      }
      v36 = (unint64_t *)&v35[8 * v31];
      v37 = &v35[8 * v34];
      *v36 = a2;
      v29 = v36 + 1;
      while (v28 != v30)
      {
        v38 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v36 = v38;
      }
      *(_QWORD *)(a1 + 56) = v36;
      *(_QWORD *)(a1 + 64) = v29;
      *(_QWORD *)(a1 + 72) = v37;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_QWORD *)v28 = a2;
      v29 = v28 + 8;
    }
    *(_QWORD *)(a1 + 64) = v29;
    v10 = (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
  }
  else
  {
    v12 = **(faiss::RangeSearchPartialResult ***)(a1 + 32);
    LODWORD(v10) = 1;
  }
  *(_DWORD *)(a1 + 80) = v10;
  for (i = *(_QWORD *)(a1 + 16); i < *(_QWORD *)(a1 + 24); ++i)
  {
    v40 = *(_QWORD *)(a1 + 16);
    v41 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result(v12, i);
    if (a3 > a2)
    {
      v42 = v41;
      v43 = (float *)(a4 + 4 * (i - v40) * (a3 - a2));
      v44 = a2;
      do
      {
        v45 = *v43++;
        v46 = v45;
        if (*(float *)(a1 + 8) > v45)
          faiss::RangeQueryResult::add(v42, v46, v44);
        ++v44;
      }
      while (a3 != v44);
    }
  }
}

void sub_1D48D14A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D82628A4](v1, 0x1020C401FFB0C44);
  _Unwind_Resume(a1);
}

void faiss::RangeSearchResultHandler<faiss::CMin<float,long long>>::add_results(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  faiss::RangeSearchPartialResult *v12;
  unint64_t v13;
  faiss::RangeSearchPartialResult **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  faiss::RangeSearchPartialResult **v22;
  char *v23;
  char *v24;
  char *v25;
  faiss::RangeSearchPartialResult *v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  char *v37;
  unint64_t v38;
  unint64_t i;
  uint64_t v40;
  faiss::RangeQueryResult *v41;
  faiss::RangeQueryResult *v42;
  float *v43;
  uint64_t v44;
  float v45;
  float v46;

  v9 = (void **)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  v10 = *(int *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 64);
  if (v10 < (v11 - v8) >> 3 && *(_QWORD *)(v8 + 8 * v10) == a2)
  {
    v12 = *(faiss::RangeSearchPartialResult **)(*(_QWORD *)(a1 + 32) + 8 * v10);
    LODWORD(v10) = v10 + 1;
  }
  else if (a2 || v11 == v8)
  {
    v12 = (faiss::RangeSearchPartialResult *)operator new();
    faiss::RangeSearchPartialResult::RangeSearchPartialResult(v12, *(faiss::RangeSearchResult **)a1);
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(faiss::RangeSearchPartialResult ***)(a1 + 40);
    if ((unint64_t)v14 >= v13)
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = ((uint64_t)v14 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v18 = v13 - v16;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a1 + 48, v20);
      else
        v21 = 0;
      v22 = (faiss::RangeSearchPartialResult **)&v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v12;
      v15 = v22 + 1;
      v25 = *(char **)(a1 + 32);
      v24 = *(char **)(a1 + 40);
      if (v24 != v25)
      {
        do
        {
          v26 = (faiss::RangeSearchPartialResult *)*((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v22 = v26;
        }
        while (v24 != v25);
        v24 = *(char **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v22;
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v14 = v12;
      v15 = v14 + 1;
    }
    v27 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 40) = v15;
    v28 = *(char **)(a1 + 64);
    if ((unint64_t)v28 >= v27)
    {
      v30 = (char *)*v9;
      v31 = (v28 - (_BYTE *)*v9) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v33 = v27 - (_QWORD)v30;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a1 + 72, v34);
        v30 = *(char **)(a1 + 56);
        v28 = *(char **)(a1 + 64);
      }
      else
      {
        v35 = 0;
      }
      v36 = (unint64_t *)&v35[8 * v31];
      v37 = &v35[8 * v34];
      *v36 = a2;
      v29 = v36 + 1;
      while (v28 != v30)
      {
        v38 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v36 = v38;
      }
      *(_QWORD *)(a1 + 56) = v36;
      *(_QWORD *)(a1 + 64) = v29;
      *(_QWORD *)(a1 + 72) = v37;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_QWORD *)v28 = a2;
      v29 = v28 + 8;
    }
    *(_QWORD *)(a1 + 64) = v29;
    v10 = (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
  }
  else
  {
    v12 = **(faiss::RangeSearchPartialResult ***)(a1 + 32);
    LODWORD(v10) = 1;
  }
  *(_DWORD *)(a1 + 80) = v10;
  for (i = *(_QWORD *)(a1 + 16); i < *(_QWORD *)(a1 + 24); ++i)
  {
    v40 = *(_QWORD *)(a1 + 16);
    v41 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result(v12, i);
    if (a3 > a2)
    {
      v42 = v41;
      v43 = (float *)(a4 + 4 * (i - v40) * (a3 - a2));
      v44 = a2;
      do
      {
        v45 = *v43++;
        v46 = v45;
        if (*(float *)(a1 + 8) < v45)
          faiss::RangeQueryResult::add(v42, v46, v44);
        ++v44;
      }
      while (a3 != v44);
    }
  }
}

void sub_1D48D1778(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D82628A4](v1, 0x1020C401FFB0C44);
  _Unwind_Resume(a1);
}

void faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy()
{
  __assert_rtn("shrink_fuzzy", "ResultHandler.h", 166, "i == capacity");
}

void std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>()
{
  __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
}

uint64_t faiss::HeapArray<faiss::CMin<float,long long>>::get_val(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 24) + 4 * *(_QWORD *)(a1 + 8) * a2;
}

uint64_t faiss::HeapArray<faiss::CMin<float,long long>>::get_ids(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 8) * a2;
}

uint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::heapify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v1 = *result;
  if (*result)
  {
    v2 = 0;
    v4 = (uint64_t *)result[2];
    v3 = (_DWORD *)result[3];
    v5 = result[1];
    do
    {
      if (v5)
      {
        v6 = v3;
        result = v4;
        v7 = v5;
        do
        {
          *v6++ = -8388609;
          *result++ = -1;
          --v7;
        }
        while (v7);
      }
      ++v2;
      v4 += v5;
      v3 += v5;
    }
    while (v2 != v1);
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::addn(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  float v21;

  if (a6 == -1)
    v6 = *result;
  else
    v6 = a6;
  v7 = v6 + a5;
  if (v7 > *result)
    faiss::HeapArray<faiss::CMin<float,long long>>::addn((uint64_t)result, a2, a3);
  if (v7 > a5)
  {
    v8 = result[3];
    v9 = result[1];
    v10 = result[2] - 8;
    for (i = a5; i != v7; ++i)
    {
      if (!a2)
        continue;
      v12 = 0;
      v13 = (float *)(v8 + 4 * v9 * i);
      v14 = v13 - 1;
      result = (unint64_t *)(v10 + 8 * v9 * i);
      do
      {
        v15 = *(float *)(a3 + 4 * (i - a5) * a2 + 4 * v12);
        if (*v13 >= v15)
          goto LABEL_22;
        if (v9 < 2)
        {
          v16 = 1;
          goto LABEL_21;
        }
        v17 = 3;
        v18 = 2;
        v19 = 1;
        while (1)
        {
          v20 = v14[v18];
          if (v17 != v9 + 1)
          {
            v21 = v14[v17];
            if (v20 >= v21)
              break;
          }
          if (v20 > v15)
            goto LABEL_20;
LABEL_18:
          v16 = v18;
          v14[v19] = v20;
          result[v19] = result[v18];
          v18 *= 2;
          v17 = (2 * v16) | 1;
          v19 = v16;
          if (v18 > v9)
            goto LABEL_21;
        }
        v20 = v14[v17];
        v18 = v17;
        if (v21 <= v15)
          goto LABEL_18;
LABEL_20:
        v16 = v19;
LABEL_21:
        v14[v16] = v15;
        result[v16] = v12 + a4;
LABEL_22:
        ++v12;
      }
      while (v12 != a2);
    }
  }
  return result;
}

{
  return __ZN5faiss9HeapArrayINS_4CMinIfxEEE4addnEmPKfxmx(result, a2, a3, a4, a5, a6);
}

unint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  float *v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;

  if (!a4)
    return faiss::HeapArray<faiss::CMin<float,long long>>::addn(result, a2, a3, 0, a6, a7);
  if (a7 == -1)
    v7 = *result;
  else
    v7 = a7;
  v8 = v7 + a6;
  if (v8 > *result)
    faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids((uint64_t)result, a2, a3);
  if (v8 > a6)
  {
    v9 = result[3];
    v10 = result[1];
    v11 = result[2] - 8;
    for (i = a6; i != v8; ++i)
    {
      if (!a2)
        continue;
      v13 = 0;
      v14 = (float *)(v9 + 4 * v10 * i);
      result = (unint64_t *)(v14 - 1);
      v15 = v11 + 8 * v10 * i;
      do
      {
        v16 = *(float *)(a3 + 4 * (i - a6) * a2 + 4 * v13);
        if (*v14 >= v16)
          goto LABEL_23;
        v17 = *(_QWORD *)(a4 + 8 * (i - a6) * a5 + 8 * v13);
        if (v10 < 2)
        {
          v18 = 1;
          goto LABEL_22;
        }
        v19 = 3;
        v20 = 2;
        v21 = 1;
        while (1)
        {
          v22 = *((float *)result + v20);
          if (v19 != v10 + 1)
          {
            v23 = *((float *)result + v19);
            if (v22 >= v23)
              break;
          }
          if (v22 > v16)
            goto LABEL_21;
LABEL_19:
          v18 = v20;
          *((float *)result + v21) = v22;
          *(_QWORD *)(v15 + 8 * v21) = *(_QWORD *)(v15 + 8 * v20);
          v20 *= 2;
          v19 = (2 * v18) | 1;
          v21 = v18;
          if (v20 > v10)
            goto LABEL_22;
        }
        v22 = *((float *)result + v19);
        v20 = v19;
        if (v23 <= v16)
          goto LABEL_19;
LABEL_21:
        v18 = v21;
LABEL_22:
        *((float *)result + v18) = v16;
        *(_QWORD *)(v15 + 8 * v18) = v17;
LABEL_23:
        ++v13;
      }
      while (v13 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::reorder(unint64_t *result)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  unint64_t v27;

  if (!*result)
    return result;
  v1 = result;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = v1[2];
    v6 = v1[1];
    v7 = (int *)(v1[3] + 4 * v6 * v4);
    v8 = (uint64_t *)(v5 + 8 * v6 * v4);
    v27 = v1[3];
    if (!v6)
    {
      v10 = 0;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = 0;
    v11 = v7 - 1;
    v12 = v8 - 1;
    do
    {
      v13 = *v7;
      v14 = *v8;
      v15 = v6 - v9;
      v16 = *(float *)&v11[v6 - v9];
      if (v6 - v9 < 2)
      {
        v17 = 1;
        goto LABEL_17;
      }
      v18 = 3;
      v19 = 2;
      v20 = 1;
      while (1)
      {
        v21 = *(float *)&v11[v19];
        if (v18 != v15 + 1)
        {
          v22 = *(float *)&v11[v18];
          if (v21 >= v22)
            break;
        }
        if (v16 < v21)
          goto LABEL_15;
LABEL_13:
        v17 = v19;
        *(float *)&v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        v18 = (2 * v17) | 1;
        v20 = v17;
        if (v19 > v15)
          goto LABEL_16;
      }
      v21 = *(float *)&v11[v18];
      v19 = v18;
      if (v16 >= v22)
        goto LABEL_13;
LABEL_15:
      v17 = v20;
LABEL_16:
      v16 = *(float *)&v11[v15];
LABEL_17:
      *(float *)&v11[v17] = v16;
      v12[v17] = v12[v15];
      v23 = v6 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1)
        ++v10;
      ++v9;
    }
    while (v9 != v6);
LABEL_22:
    memmove(v7, &v7[v6 - v10], 4 * v10);
    result = (unint64_t *)memmove((void *)(v5 + 8 * v6 * v4), &v8[v6 - v10], 8 * v10);
    v24 = v6 - v10;
    if (v6 > v10)
    {
      v25 = (_QWORD *)(v5 + v6 * v3 + 8 * v10);
      v26 = (_DWORD *)(v27 + v6 * v2 + 4 * v10);
      do
      {
        *v26++ = -8388609;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v4;
    v3 += 8;
    v2 += 4;
  }
  while (v4 < *v1);
  return result;
}

uint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::per_line_extrema(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  v3 = *result;
  if (*result)
  {
    v4 = 0;
    v5 = result[3];
    v6 = result[1];
    do
    {
      if (v6)
      {
        v7 = 0;
        v8 = -1;
        v9 = 3.4028e38;
        do
        {
          if (*(float *)(v5 + 4 * v7) < v9)
          {
            v8 = v7;
            v9 = *(float *)(v5 + 4 * v7);
          }
          ++v7;
        }
        while (v6 != v7);
        if (!a2)
          goto LABEL_10;
      }
      else
      {
        v8 = -1;
        v9 = 3.4028e38;
        if (!a2)
          goto LABEL_10;
      }
      *(float *)(a2 + 4 * v4) = v9;
LABEL_10:
      if (a3)
      {
        v10 = result[2];
        if (v10)
        {
          if (v8 != -1)
            v8 = *(_QWORD *)(v10 + 8 * (v8 + v6 * v4));
        }
        *(_QWORD *)(a3 + 8 * v4) = v8;
      }
      ++v4;
      v5 += 4 * v6;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t faiss::HeapArray<faiss::CMax<float,long long>>::get_val(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 24) + 4 * *(_QWORD *)(a1 + 8) * a2;
}

uint64_t faiss::HeapArray<faiss::CMax<float,long long>>::get_ids(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 8) * a2;
}

uint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::heapify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v1 = *result;
  if (*result)
  {
    v2 = 0;
    v4 = (uint64_t *)result[2];
    v3 = (_DWORD *)result[3];
    v5 = result[1];
    do
    {
      if (v5)
      {
        v6 = v3;
        result = v4;
        v7 = v5;
        do
        {
          *v6++ = 2139095039;
          *result++ = -1;
          --v7;
        }
        while (v7);
      }
      ++v2;
      v4 += v5;
      v3 += v5;
    }
    while (v2 != v1);
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::addn(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  float v21;

  if (a6 == -1)
    v6 = *result;
  else
    v6 = a6;
  v7 = v6 + a5;
  if (v7 > *result)
    faiss::HeapArray<faiss::CMin<float,long long>>::addn((uint64_t)result, a2, a3);
  if (v7 > a5)
  {
    v8 = result[3];
    v9 = result[1];
    v10 = result[2] - 8;
    for (i = a5; i != v7; ++i)
    {
      if (!a2)
        continue;
      v12 = 0;
      v13 = (float *)(v8 + 4 * v9 * i);
      v14 = v13 - 1;
      result = (unint64_t *)(v10 + 8 * v9 * i);
      do
      {
        v15 = *(float *)(a3 + 4 * (i - a5) * a2 + 4 * v12);
        if (*v13 <= v15)
          goto LABEL_22;
        if (v9 < 2)
        {
          v16 = 1;
          goto LABEL_21;
        }
        v17 = 3;
        v18 = 2;
        v19 = 1;
        while (1)
        {
          v20 = v14[v18];
          if (v17 != v9 + 1)
          {
            v21 = v14[v17];
            if (v20 <= v21)
              break;
          }
          if (v20 < v15)
            goto LABEL_20;
LABEL_18:
          v16 = v18;
          v14[v19] = v20;
          result[v19] = result[v18];
          v18 *= 2;
          v17 = (2 * v16) | 1;
          v19 = v16;
          if (v18 > v9)
            goto LABEL_21;
        }
        v20 = v14[v17];
        v18 = v17;
        if (v21 >= v15)
          goto LABEL_18;
LABEL_20:
        v16 = v19;
LABEL_21:
        v14[v16] = v15;
        result[v16] = v12 + a4;
LABEL_22:
        ++v12;
      }
      while (v12 != a2);
    }
  }
  return result;
}

{
  return __ZN5faiss9HeapArrayINS_4CMaxIfxEEE4addnEmPKfxmx(result, a2, a3, a4, a5, a6);
}

unint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::addn_with_ids(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  float *v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;

  if (!a4)
    return faiss::HeapArray<faiss::CMax<float,long long>>::addn(result, a2, a3, 0, a6, a7);
  if (a7 == -1)
    v7 = *result;
  else
    v7 = a7;
  v8 = v7 + a6;
  if (v8 > *result)
    faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids((uint64_t)result, a2, a3);
  if (v8 > a6)
  {
    v9 = result[3];
    v10 = result[1];
    v11 = result[2] - 8;
    for (i = a6; i != v8; ++i)
    {
      if (!a2)
        continue;
      v13 = 0;
      v14 = (float *)(v9 + 4 * v10 * i);
      result = (unint64_t *)(v14 - 1);
      v15 = v11 + 8 * v10 * i;
      do
      {
        v16 = *(float *)(a3 + 4 * (i - a6) * a2 + 4 * v13);
        if (*v14 <= v16)
          goto LABEL_23;
        v17 = *(_QWORD *)(a4 + 8 * (i - a6) * a5 + 8 * v13);
        if (v10 < 2)
        {
          v18 = 1;
          goto LABEL_22;
        }
        v19 = 3;
        v20 = 2;
        v21 = 1;
        while (1)
        {
          v22 = *((float *)result + v20);
          if (v19 != v10 + 1)
          {
            v23 = *((float *)result + v19);
            if (v22 <= v23)
              break;
          }
          if (v22 < v16)
            goto LABEL_21;
LABEL_19:
          v18 = v20;
          *((float *)result + v21) = v22;
          *(_QWORD *)(v15 + 8 * v21) = *(_QWORD *)(v15 + 8 * v20);
          v20 *= 2;
          v19 = (2 * v18) | 1;
          v21 = v18;
          if (v20 > v10)
            goto LABEL_22;
        }
        v22 = *((float *)result + v19);
        v20 = v19;
        if (v23 >= v16)
          goto LABEL_19;
LABEL_21:
        v18 = v21;
LABEL_22:
        *((float *)result + v18) = v16;
        *(_QWORD *)(v15 + 8 * v18) = v17;
LABEL_23:
        ++v13;
      }
      while (v13 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::reorder(unint64_t *result)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  unint64_t v27;

  if (!*result)
    return result;
  v1 = result;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = v1[2];
    v6 = v1[1];
    v7 = (int *)(v1[3] + 4 * v6 * v4);
    v8 = (uint64_t *)(v5 + 8 * v6 * v4);
    v27 = v1[3];
    if (!v6)
    {
      v10 = 0;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = 0;
    v11 = v7 - 1;
    v12 = v8 - 1;
    do
    {
      v13 = *v7;
      v14 = *v8;
      v15 = v6 - v9;
      v16 = *(float *)&v11[v6 - v9];
      if (v6 - v9 < 2)
      {
        v17 = 1;
        goto LABEL_17;
      }
      v18 = 3;
      v19 = 2;
      v20 = 1;
      while (1)
      {
        v21 = *(float *)&v11[v19];
        if (v18 != v15 + 1)
        {
          v22 = *(float *)&v11[v18];
          if (v21 <= v22)
            break;
        }
        if (v16 > v21)
          goto LABEL_15;
LABEL_13:
        v17 = v19;
        *(float *)&v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        v18 = (2 * v17) | 1;
        v20 = v17;
        if (v19 > v15)
          goto LABEL_16;
      }
      v21 = *(float *)&v11[v18];
      v19 = v18;
      if (v16 <= v22)
        goto LABEL_13;
LABEL_15:
      v17 = v20;
LABEL_16:
      v16 = *(float *)&v11[v15];
LABEL_17:
      *(float *)&v11[v17] = v16;
      v12[v17] = v12[v15];
      v23 = v6 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1)
        ++v10;
      ++v9;
    }
    while (v9 != v6);
LABEL_22:
    memmove(v7, &v7[v6 - v10], 4 * v10);
    result = (unint64_t *)memmove((void *)(v5 + 8 * v6 * v4), &v8[v6 - v10], 8 * v10);
    v24 = v6 - v10;
    if (v6 > v10)
    {
      v25 = (_QWORD *)(v5 + v6 * v3 + 8 * v10);
      v26 = (_DWORD *)(v27 + v6 * v2 + 4 * v10);
      do
      {
        *v26++ = 2139095039;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v4;
    v3 += 8;
    v2 += 4;
  }
  while (v4 < *v1);
  return result;
}

uint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::per_line_extrema(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  v3 = *result;
  if (*result)
  {
    v4 = 0;
    v5 = result[3];
    v6 = result[1];
    do
    {
      if (v6)
      {
        v7 = 0;
        v8 = -1;
        v9 = -3.4028e38;
        do
        {
          if (*(float *)(v5 + 4 * v7) > v9)
          {
            v8 = v7;
            v9 = *(float *)(v5 + 4 * v7);
          }
          ++v7;
        }
        while (v6 != v7);
        if (!a2)
          goto LABEL_10;
      }
      else
      {
        v8 = -1;
        v9 = -3.4028e38;
        if (!a2)
          goto LABEL_10;
      }
      *(float *)(a2 + 4 * v4) = v9;
LABEL_10:
      if (a3)
      {
        v10 = result[2];
        if (v10)
        {
          if (v8 != -1)
            v8 = *(_QWORD *)(v10 + 8 * (v8 + v6 * v4));
        }
        *(_QWORD *)(a3 + 8 * v4) = v8;
      }
      ++v4;
      v5 += 4 * v6;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t faiss::HeapArray<faiss::CMin<int,long long>>::get_val(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 24) + 4 * *(_QWORD *)(a1 + 8) * a2;
}

uint64_t faiss::HeapArray<faiss::CMin<int,long long>>::get_ids(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 8) * a2;
}

uint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::heapify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v1 = *result;
  if (*result)
  {
    v2 = 0;
    v4 = (uint64_t *)result[2];
    v3 = (_DWORD *)result[3];
    v5 = result[1];
    do
    {
      if (v5)
      {
        v6 = v3;
        result = v4;
        v7 = v5;
        do
        {
          *v6++ = 0x80000000;
          *result++ = -1;
          --v7;
        }
        while (v7);
      }
      ++v2;
      v4 += v5;
      v3 += v5;
    }
    while (v2 != v1);
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::addn(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  if (a6 == -1)
    v6 = *result;
  else
    v6 = a6;
  v7 = v6 + a5;
  if (v7 > *result)
    faiss::HeapArray<faiss::CMin<float,long long>>::addn((uint64_t)result, a2, a3);
  if (v7 > a5)
  {
    v8 = result[3];
    v9 = result[1];
    v10 = result[2] - 8;
    for (i = a5; i != v7; ++i)
    {
      if (!a2)
        continue;
      v12 = 0;
      v13 = (_DWORD *)(v8 + 4 * v9 * i);
      v14 = v13 - 1;
      result = (unint64_t *)(v10 + 8 * v9 * i);
      do
      {
        v15 = *(_DWORD *)(a3 + 4 * (i - a5) * a2 + 4 * v12);
        if (*v13 >= v15)
          goto LABEL_22;
        if (v9 < 2)
        {
          v16 = 1;
          goto LABEL_21;
        }
        v17 = 3;
        v18 = 2;
        v19 = 1;
        while (1)
        {
          v20 = v14[v18];
          if (v17 != v9 + 1)
          {
            v21 = v14[v17];
            if (v20 >= v21)
              break;
          }
          if (v20 > v15)
            goto LABEL_20;
LABEL_18:
          v16 = v18;
          v14[v19] = v20;
          result[v19] = result[v18];
          v18 *= 2;
          v17 = (2 * v16) | 1;
          v19 = v16;
          if (v18 > v9)
            goto LABEL_21;
        }
        v20 = v14[v17];
        v18 = v17;
        if (v21 <= v15)
          goto LABEL_18;
LABEL_20:
        v16 = v19;
LABEL_21:
        v14[v16] = v15;
        result[v16] = v12 + a4;
LABEL_22:
        ++v12;
      }
      while (v12 != a2);
    }
  }
  return result;
}

{
  return __ZN5faiss9HeapArrayINS_4CMinIixEEE4addnEmPKixmx(result, a2, a3, a4, a5, a6);
}

unint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::addn_with_ids(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  if (!a4)
    return faiss::HeapArray<faiss::CMin<int,long long>>::addn(result, a2, a3, 0, a6, a7);
  if (a7 == -1)
    v7 = *result;
  else
    v7 = a7;
  v8 = v7 + a6;
  if (v8 > *result)
    faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids((uint64_t)result, a2, a3);
  if (v8 > a6)
  {
    v9 = result[3];
    v10 = result[1];
    v11 = result[2] - 8;
    for (i = a6; i != v8; ++i)
    {
      if (!a2)
        continue;
      v13 = 0;
      v14 = (_DWORD *)(v9 + 4 * v10 * i);
      result = (unint64_t *)(v14 - 1);
      v15 = v11 + 8 * v10 * i;
      do
      {
        v16 = *(_DWORD *)(a3 + 4 * (i - a6) * a2 + 4 * v13);
        if (*v14 >= v16)
          goto LABEL_23;
        v17 = *(_QWORD *)(a4 + 8 * (i - a6) * a5 + 8 * v13);
        if (v10 < 2)
        {
          v18 = 1;
          goto LABEL_22;
        }
        v19 = 3;
        v20 = 2;
        v21 = 1;
        while (1)
        {
          v22 = *((_DWORD *)result + v20);
          if (v19 != v10 + 1)
          {
            v23 = *((_DWORD *)result + v19);
            if (v22 >= v23)
              break;
          }
          if (v22 > v16)
            goto LABEL_21;
LABEL_19:
          v18 = v20;
          *((_DWORD *)result + v21) = v22;
          *(_QWORD *)(v15 + 8 * v21) = *(_QWORD *)(v15 + 8 * v20);
          v20 *= 2;
          v19 = (2 * v18) | 1;
          v21 = v18;
          if (v20 > v10)
            goto LABEL_22;
        }
        v22 = *((_DWORD *)result + v19);
        v20 = v19;
        if (v23 <= v16)
          goto LABEL_19;
LABEL_21:
        v18 = v21;
LABEL_22:
        *((_DWORD *)result + v18) = v16;
        *(_QWORD *)(v15 + 8 * v18) = v17;
LABEL_23:
        ++v13;
      }
      while (v13 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::reorder(unint64_t *result)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  unint64_t v27;

  if (!*result)
    return result;
  v1 = result;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = v1[2];
    v6 = v1[1];
    v7 = (int *)(v1[3] + 4 * v6 * v4);
    v8 = (uint64_t *)(v5 + 8 * v6 * v4);
    v27 = v1[3];
    if (!v6)
    {
      v10 = 0;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = 0;
    v11 = v7 - 1;
    v12 = v8 - 1;
    do
    {
      v13 = *v7;
      v14 = *v8;
      v15 = v6 - v9;
      v16 = v11[v6 - v9];
      if (v6 - v9 < 2)
      {
        v17 = 1;
        goto LABEL_17;
      }
      v18 = 3;
      v19 = 2;
      v20 = 1;
      while (1)
      {
        v21 = v11[v19];
        if (v18 != v15 + 1)
        {
          v22 = v11[v18];
          if (v21 >= v22)
            break;
        }
        if (v16 < v21)
          goto LABEL_15;
LABEL_13:
        v17 = v19;
        v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        v18 = (2 * v17) | 1;
        v20 = v17;
        if (v19 > v15)
          goto LABEL_16;
      }
      v21 = v11[v18];
      v19 = v18;
      if (v16 >= v22)
        goto LABEL_13;
LABEL_15:
      v17 = v20;
LABEL_16:
      v16 = v11[v15];
LABEL_17:
      v11[v17] = v16;
      v12[v17] = v12[v15];
      v23 = v6 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1)
        ++v10;
      ++v9;
    }
    while (v9 != v6);
LABEL_22:
    memmove(v7, &v7[v6 - v10], 4 * v10);
    result = (unint64_t *)memmove((void *)(v5 + 8 * v6 * v4), &v8[v6 - v10], 8 * v10);
    v24 = v6 - v10;
    if (v6 > v10)
    {
      v25 = (_QWORD *)(v5 + v6 * v3 + 8 * v10);
      v26 = (_DWORD *)(v27 + v6 * v2 + 4 * v10);
      do
      {
        *v26++ = 0x80000000;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v4;
    v3 += 8;
    v2 += 4;
  }
  while (v4 < *v1);
  return result;
}

uint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::per_line_extrema(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = *result;
  if (*result)
  {
    v4 = 0;
    v5 = result[3];
    v6 = result[1];
    do
    {
      if (v6)
      {
        v7 = 0;
        v8 = -1;
        v9 = 0x7FFFFFFF;
        do
        {
          if (*(_DWORD *)(v5 + 4 * v7) < v9)
          {
            v8 = v7;
            v9 = *(_DWORD *)(v5 + 4 * v7);
          }
          ++v7;
        }
        while (v6 != v7);
        if (!a2)
          goto LABEL_10;
      }
      else
      {
        v9 = 0x7FFFFFFF;
        v8 = -1;
        if (!a2)
          goto LABEL_10;
      }
      *(_DWORD *)(a2 + 4 * v4) = v9;
LABEL_10:
      if (a3)
      {
        v10 = result[2];
        if (v10)
        {
          if (v8 != -1)
            v8 = *(_QWORD *)(v10 + 8 * (v8 + v6 * v4));
        }
        *(_QWORD *)(a3 + 8 * v4) = v8;
      }
      ++v4;
      v5 += 4 * v6;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t faiss::HeapArray<faiss::CMax<int,long long>>::get_val(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 24) + 4 * *(_QWORD *)(a1 + 8) * a2;
}

uint64_t faiss::HeapArray<faiss::CMax<int,long long>>::get_ids(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 8) * a2;
}

uint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::heapify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v1 = *result;
  if (*result)
  {
    v2 = 0;
    v4 = (uint64_t *)result[2];
    v3 = (_DWORD *)result[3];
    v5 = result[1];
    do
    {
      if (v5)
      {
        v6 = v3;
        result = v4;
        v7 = v5;
        do
        {
          *v6++ = 0x7FFFFFFF;
          *result++ = -1;
          --v7;
        }
        while (v7);
      }
      ++v2;
      v4 += v5;
      v3 += v5;
    }
    while (v2 != v1);
  }
  return result;
}

{
  return __ZN5faiss9HeapArrayINS_4CMaxIixEEE7heapifyEv(result);
}

unint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::addn(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  if (a6 == -1)
    v6 = *result;
  else
    v6 = a6;
  v7 = v6 + a5;
  if (v7 > *result)
    faiss::HeapArray<faiss::CMin<float,long long>>::addn((uint64_t)result, a2, a3);
  if (v7 > a5)
  {
    v8 = result[3];
    v9 = result[1];
    v10 = result[2] - 8;
    for (i = a5; i != v7; ++i)
    {
      if (!a2)
        continue;
      v12 = 0;
      v13 = (_DWORD *)(v8 + 4 * v9 * i);
      v14 = v13 - 1;
      result = (unint64_t *)(v10 + 8 * v9 * i);
      do
      {
        v15 = *(_DWORD *)(a3 + 4 * (i - a5) * a2 + 4 * v12);
        if (*v13 <= v15)
          goto LABEL_22;
        if (v9 < 2)
        {
          v16 = 1;
          goto LABEL_21;
        }
        v17 = 3;
        v18 = 2;
        v19 = 1;
        while (1)
        {
          v20 = v14[v18];
          if (v17 != v9 + 1)
          {
            v21 = v14[v17];
            if (v20 <= v21)
              break;
          }
          if (v20 < v15)
            goto LABEL_20;
LABEL_18:
          v16 = v18;
          v14[v19] = v20;
          result[v19] = result[v18];
          v18 *= 2;
          v17 = (2 * v16) | 1;
          v19 = v16;
          if (v18 > v9)
            goto LABEL_21;
        }
        v20 = v14[v17];
        v18 = v17;
        if (v21 >= v15)
          goto LABEL_18;
LABEL_20:
        v16 = v19;
LABEL_21:
        v14[v16] = v15;
        result[v16] = v12 + a4;
LABEL_22:
        ++v12;
      }
      while (v12 != a2);
    }
  }
  return result;
}

{
  return __ZN5faiss9HeapArrayINS_4CMaxIixEEE4addnEmPKixmx(result, a2, a3, a4, a5, a6);
}

unint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::addn_with_ids(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  if (!a4)
    return faiss::HeapArray<faiss::CMax<int,long long>>::addn(result, a2, a3, 0, a6, a7);
  if (a7 == -1)
    v7 = *result;
  else
    v7 = a7;
  v8 = v7 + a6;
  if (v8 > *result)
    faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids((uint64_t)result, a2, a3);
  if (v8 > a6)
  {
    v9 = result[3];
    v10 = result[1];
    v11 = result[2] - 8;
    for (i = a6; i != v8; ++i)
    {
      if (!a2)
        continue;
      v13 = 0;
      v14 = (_DWORD *)(v9 + 4 * v10 * i);
      result = (unint64_t *)(v14 - 1);
      v15 = v11 + 8 * v10 * i;
      do
      {
        v16 = *(_DWORD *)(a3 + 4 * (i - a6) * a2 + 4 * v13);
        if (*v14 <= v16)
          goto LABEL_23;
        v17 = *(_QWORD *)(a4 + 8 * (i - a6) * a5 + 8 * v13);
        if (v10 < 2)
        {
          v18 = 1;
          goto LABEL_22;
        }
        v19 = 3;
        v20 = 2;
        v21 = 1;
        while (1)
        {
          v22 = *((_DWORD *)result + v20);
          if (v19 != v10 + 1)
          {
            v23 = *((_DWORD *)result + v19);
            if (v22 <= v23)
              break;
          }
          if (v22 < v16)
            goto LABEL_21;
LABEL_19:
          v18 = v20;
          *((_DWORD *)result + v21) = v22;
          *(_QWORD *)(v15 + 8 * v21) = *(_QWORD *)(v15 + 8 * v20);
          v20 *= 2;
          v19 = (2 * v18) | 1;
          v21 = v18;
          if (v20 > v10)
            goto LABEL_22;
        }
        v22 = *((_DWORD *)result + v19);
        v20 = v19;
        if (v23 >= v16)
          goto LABEL_19;
LABEL_21:
        v18 = v21;
LABEL_22:
        *((_DWORD *)result + v18) = v16;
        *(_QWORD *)(v15 + 8 * v18) = v17;
LABEL_23:
        ++v13;
      }
      while (v13 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::reorder(unint64_t *result)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  unint64_t v27;

  if (!*result)
    return result;
  v1 = result;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = v1[2];
    v6 = v1[1];
    v7 = (int *)(v1[3] + 4 * v6 * v4);
    v8 = (uint64_t *)(v5 + 8 * v6 * v4);
    v27 = v1[3];
    if (!v6)
    {
      v10 = 0;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = 0;
    v11 = v7 - 1;
    v12 = v8 - 1;
    do
    {
      v13 = *v7;
      v14 = *v8;
      v15 = v6 - v9;
      v16 = v11[v6 - v9];
      if (v6 - v9 < 2)
      {
        v17 = 1;
        goto LABEL_17;
      }
      v18 = 3;
      v19 = 2;
      v20 = 1;
      while (1)
      {
        v21 = v11[v19];
        if (v18 != v15 + 1)
        {
          v22 = v11[v18];
          if (v21 <= v22)
            break;
        }
        if (v16 > v21)
          goto LABEL_15;
LABEL_13:
        v17 = v19;
        v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        v18 = (2 * v17) | 1;
        v20 = v17;
        if (v19 > v15)
          goto LABEL_16;
      }
      v21 = v11[v18];
      v19 = v18;
      if (v16 <= v22)
        goto LABEL_13;
LABEL_15:
      v17 = v20;
LABEL_16:
      v16 = v11[v15];
LABEL_17:
      v11[v17] = v16;
      v12[v17] = v12[v15];
      v23 = v6 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1)
        ++v10;
      ++v9;
    }
    while (v9 != v6);
LABEL_22:
    memmove(v7, &v7[v6 - v10], 4 * v10);
    result = (unint64_t *)memmove((void *)(v5 + 8 * v6 * v4), &v8[v6 - v10], 8 * v10);
    v24 = v6 - v10;
    if (v6 > v10)
    {
      v25 = (_QWORD *)(v5 + v6 * v3 + 8 * v10);
      v26 = (_DWORD *)(v27 + v6 * v2 + 4 * v10);
      do
      {
        *v26++ = 0x7FFFFFFF;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v4;
    v3 += 8;
    v2 += 4;
  }
  while (v4 < *v1);
  return result;
}

{
  return __ZN5faiss9HeapArrayINS_4CMaxIixEEE7reorderEv(result);
}

uint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::per_line_extrema(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  signed int v9;
  uint64_t v10;

  v3 = *result;
  if (*result)
  {
    v4 = 0;
    v5 = result[3];
    v6 = result[1];
    do
    {
      if (v6)
      {
        v7 = 0;
        v8 = -1;
        v9 = 0x80000000;
        do
        {
          if (*(_DWORD *)(v5 + 4 * v7) > v9)
          {
            v8 = v7;
            v9 = *(_DWORD *)(v5 + 4 * v7);
          }
          ++v7;
        }
        while (v6 != v7);
        if (!a2)
          goto LABEL_10;
      }
      else
      {
        v9 = 0x80000000;
        v8 = -1;
        if (!a2)
          goto LABEL_10;
      }
      *(_DWORD *)(a2 + 4 * v4) = v9;
LABEL_10:
      if (a3)
      {
        v10 = result[2];
        if (v10)
        {
          if (v8 != -1)
            v8 = *(_QWORD *)(v10 + 8 * (v8 + v6 * v4));
        }
        *(_QWORD *)(a3 + 8 * v4) = v8;
      }
      ++v4;
      v5 += 4 * v6;
    }
    while (v4 != v3);
  }
  return result;
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 64, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 34, a4);
}

void faiss::HeapArray<faiss::CMin<float,long long>>::addn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1("addn", "Heap.cpp", a3, "i0 >= 0 && i0 + ni <= nh");
}

void faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("addn_with_ids", "Heap.cpp", a3, "i0 >= 0 && i0 + ni <= nh");
}

uint64_t faiss::RandomGenerator::RandomGenerator(uint64_t this, unsigned int a2)
{
  uint64_t i;

  *(_DWORD *)this = a2;
  for (i = 1; i != 624; ++i)
  {
    a2 = i + 1812433253 * (a2 ^ (a2 >> 30));
    *(_DWORD *)(this + 4 * i) = a2;
  }
  *(_QWORD *)(this + 2496) = 0;
  return this;
}

{
  uint64_t i;

  *(_DWORD *)this = a2;
  for (i = 1; i != 624; ++i)
  {
    a2 = i + 1812433253 * (a2 ^ (a2 >> 30));
    *(_DWORD *)(this + 4 * i) = a2;
  }
  *(_QWORD *)(this + 2496) = 0;
  return this;
}

uint64_t faiss::RandomGenerator::rand_int(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & 0x7FFFFFFF;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

unint64_t faiss::RandomGenerator::rand_int64(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  uint64_t v2;

  v2 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & 0x7FFFFFFF;
  return v2 | ((unint64_t)(std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & 0x7FFFFFFF) << 31);
}

uint64_t faiss::RandomGenerator::rand_int(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, unsigned int a2)
{
  return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
       % a2;
}

float faiss::RandomGenerator::rand_float(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  return (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
       * 2.3283e-10;
}

double faiss::RandomGenerator::rand_double(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  return (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
       / 4294967300.0;
}

uint64_t faiss::float_rand(faiss *this, float *a2)
{
  uint64_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t result;
  unint64_t v8;
  int v9;
  char v10;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v16;
  uint64_t v18;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v19;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v21;

  v2 = MEMORY[0x1E0C80A78](this);
  v5 = v4;
  v18 = v2;
  v21.__x_[0] = v3;
  for (i = 1; i != 624; ++i)
  {
    v3 = i + 1812433253 * (v3 ^ (v3 >> 30));
    v21.__x_[i] = v3;
  }
  v21.__i_ = 0;
  v19 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21) & 0x7FFFFFFF;
  result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21);
  v8 = 0;
  v9 = result & 0x7FFFFFFF;
  if (v5 <= 0x3FF)
    v10 = 0;
  else
    v10 = 10;
  do
  {
    v11 = v19 + v9 * v8;
    v20.__x_[0] = v11;
    for (j = 1; j != 624; ++j)
    {
      v11 = j + 1812433253 * (v11 ^ (v11 >> 30));
      v20.__x_[j] = v11;
    }
    v20.__i_ = 0;
    v13 = (v8 * v5) >> v10;
    v14 = ((v8 + 1) * v5) >> v10;
    v15 = v14 - v13;
    if (v14 > v13)
    {
      v16 = (float *)(v18 + 4 * v13);
      do
      {
        result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v20);
        *v16++ = (float)result * 2.3283e-10;
        --v15;
      }
      while (v15);
    }
    if (v5 < 0x400)
      break;
  }
  while (v8++ < 0x3FF);
  return result;
}

void faiss::float_randn(faiss *this, float *a2)
{
  uint64_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  char v9;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v10;
  uint64_t j;
  unint64_t v12;
  unint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  float v18;
  char v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v22;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v23;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v24;

  v2 = MEMORY[0x1E0C80A78](this);
  v5 = v4;
  v6 = v2;
  v24.__x_[0] = v3;
  for (i = 1; i != 624; ++i)
  {
    v3 = i + 1812433253 * (v3 ^ (v3 >> 30));
    v24.__x_[i] = v3;
  }
  v24.__i_ = 0;
  v22 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v24) & 0x7FFFFFFF;
  v8 = 0;
  v21 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v24) & 0x7FFFFFFF;
  v9 = 10;
  if (v5 <= 0x3FF)
    v9 = 0;
  v20 = v9;
  do
  {
    v10 = v22 + v21 * v8;
    v23.__x_[0] = v10;
    for (j = 1; j != 624; ++j)
    {
      v10 = j + 1812433253 * (v10 ^ (v10 >> 30));
      v23.__x_[j] = v10;
    }
    v23.__i_ = 0;
    v12 = (v8 * v5) >> v20;
    v13 = ((v8 + 1) * v5) >> v20;
    if (v12 < v13)
    {
      v14 = 0;
      v15 = 0.0;
      v16 = 0.0;
      v17 = 0.0;
      do
      {
        if (!v14)
        {
          do
          {
            v16 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v23)
                / 4294967300.0
                * 2.0
                + -1.0;
            v17 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v23)
                / 4294967300.0
                * 2.0
                + -1.0;
            v15 = v17 * v17 + v16 * v16;
          }
          while (v15 >= 1.0);
        }
        v18 = v16 * sqrt(log(v15) * -2.0 / v15);
        *(float *)(v6 + 4 * v12) = v18;
        v14 = 1 - v14;
        ++v12;
        v16 = v17;
      }
      while (v12 != v13);
    }
    if (v5 < 0x400)
      break;
  }
  while (v8++ < 0x3FF);
}

uint64_t faiss::int64_rand(faiss *this, uint64_t *a2)
{
  uint64_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t result;
  unint64_t v8;
  int v9;
  char v10;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v21;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v22;

  v2 = MEMORY[0x1E0C80A78](this);
  v5 = v4;
  v19 = v2;
  v22.__x_[0] = v3;
  for (i = 1; i != 624; ++i)
  {
    v3 = i + 1812433253 * (v3 ^ (v3 >> 30));
    v22.__x_[i] = v3;
  }
  v22.__i_ = 0;
  v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v22) & 0x7FFFFFFF;
  result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v22);
  v8 = 0;
  v9 = result & 0x7FFFFFFF;
  if (v5 <= 0x3FF)
    v10 = 0;
  else
    v10 = 10;
  do
  {
    v11 = v20 + v9 * v8;
    v21.__x_[0] = v11;
    for (j = 1; j != 624; ++j)
    {
      v11 = j + 1812433253 * (v11 ^ (v11 >> 30));
      v21.__x_[j] = v11;
    }
    v21.__i_ = 0;
    v13 = (v8 * v5) >> v10;
    v14 = ((v8 + 1) * v5) >> v10;
    v15 = v14 - v13;
    if (v14 > v13)
    {
      v16 = (unint64_t *)(v19 + 8 * v13);
      do
      {
        v17 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21) & 0x7FFFFFFF;
        result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21);
        *v16++ = v17 | ((unint64_t)(result & 0x7FFFFFFF) << 31);
        --v15;
      }
      while (v15);
    }
    if (v5 < 0x400)
      break;
  }
  while (v8++ < 0x3FF);
  return result;
}

uint64_t faiss::int64_rand_max(faiss *this, uint64_t *a2)
{
  uint64_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t i;
  uint64_t result;
  unint64_t v10;
  char v11;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v12;
  uint64_t j;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v22;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v23;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v24;

  v2 = MEMORY[0x1E0C80A78](this);
  v5 = v4;
  v7 = v6;
  v20 = v2;
  v24.__x_[0] = v3;
  for (i = 1; i != 624; ++i)
  {
    v3 = i + 1812433253 * (v3 ^ (v3 >> 30));
    v24.__x_[i] = v3;
  }
  v24.__i_ = 0;
  v22 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v24) & 0x7FFFFFFF;
  result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v24);
  v10 = 0;
  v21 = result & 0x7FFFFFFF;
  if (v7 <= 0x3FF)
    v11 = 0;
  else
    v11 = 10;
  do
  {
    v12 = v22 + v21 * v10;
    v23.__x_[0] = v12;
    for (j = 1; j != 624; ++j)
    {
      v12 = j + 1812433253 * (v12 ^ (v12 >> 30));
      v23.__x_[j] = v12;
    }
    v23.__i_ = 0;
    v14 = (v10 * v7) >> v11;
    v15 = ((v10 + 1) * v7) >> v11;
    v16 = v15 - v14;
    if (v15 > v14)
    {
      v17 = (unint64_t *)(v20 + 8 * v14);
      do
      {
        v18 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v23) & 0x7FFFFFFF;
        result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v23);
        *v17++ = (v18 | ((unint64_t)(result & 0x7FFFFFFF) << 31)) % v5;
        --v16;
      }
      while (v16);
    }
    if (v7 < 0x400)
      break;
  }
  while (v10++ < 0x3FF);
  return result;
}

uint64_t faiss::rand_perm(uint64_t this, int *a2, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type a3)
{
  int *v3;
  uint64_t v4;
  int *i;
  uint64_t j;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v10;

  v3 = a2;
  v4 = this;
  if (a2)
  {
    for (i = 0; i != a2; i = (int *)((char *)i + 1))
      *(_DWORD *)(this + 4 * (_QWORD)i) = (_DWORD)i;
  }
  v10.__x_[0] = a3;
  for (j = 1; j != 624; ++j)
  {
    a3 = j + 1812433253 * (a3 ^ (a3 >> 30));
    v10.__x_[j] = a3;
  }
  v10.__i_ = 0;
  if ((unint64_t)a2 >= 2)
  {
    v7 = 0;
    do
    {
      this = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v10);
      v8 = v7 + (int)(this % v3);
      v9 = *(_DWORD *)(v4 + 4 * v7);
      *(_DWORD *)(v4 + 4 * v7) = *(_DWORD *)(v4 + 4 * v8);
      *(_DWORD *)(v4 + 4 * v8) = v9;
      v3 = (int *)((char *)v3 - 1);
      ++v7;
    }
    while (v3 != (int *)1);
  }
  return this;
}

uint64_t faiss::byte_rand(faiss *this, unsigned __int8 *a2)
{
  uint64_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t result;
  unint64_t v8;
  int v9;
  char v10;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v19;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v21;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v22;

  v2 = MEMORY[0x1E0C80A78](this);
  v5 = v4;
  v19 = v2;
  v22.__x_[0] = v3;
  for (i = 1; i != 624; ++i)
  {
    v3 = i + 1812433253 * (v3 ^ (v3 >> 30));
    v22.__x_[i] = v3;
  }
  v22.__i_ = 0;
  v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v22) & 0x7FFFFFFF;
  result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v22);
  v8 = 0;
  v9 = result & 0x7FFFFFFF;
  if (v5 <= 0x3FF)
    v10 = 0;
  else
    v10 = 10;
  do
  {
    v11 = v20 + v9 * v8;
    v21.__x_[0] = v11;
    for (j = 1; j != 624; ++j)
    {
      v11 = j + 1812433253 * (v11 ^ (v11 >> 30));
      v21.__x_[j] = v11;
    }
    v21.__i_ = 0;
    v13 = (v8 * v5) >> v10;
    v14 = ((v8 + 1) * v5) >> v10;
    v15 = v14 - v13;
    if (v14 > v13)
    {
      v16 = (_BYTE *)(v19 + v13);
      do
      {
        v17 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21);
        result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21);
        *v16++ = v17;
        --v15;
      }
      while (v15);
    }
    if (v5 < 0x400)
      break;
  }
  while (v8++ < 0x3FF);
  return result;
}

std::string *faiss::get_compile_options@<X0>(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "OPTIMIZE ");
  return std::string::append(a1, "NEON");
}

void sub_1D48D37CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double faiss::getmillisecs(faiss *this)
{
  timeval v2;

  gettimeofday(&v2, 0);
  return (double)v2.tv_usec * 0.001 + (double)v2.tv_sec * 1000.0;
}

uint64_t faiss::get_cycles(faiss *this)
{
  return 0;
}

uint64_t faiss::get_mem_usage_kb(faiss *this)
{
  fwrite("WARN: get_mem_usage_kb not implemented on current architecture\n", 0x3FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  return 0;
}

uint64_t faiss::reflection(uint64_t this, const float *a2, float *a3, unint64_t a4, uint64_t a5)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;

  if (a3)
  {
    v5 = 0;
    v6 = 4 * a4;
    do
    {
      if (a5)
      {
        v7 = 0;
        v8 = this;
        do
        {
          if (a4)
          {
            v9 = 0;
            v10 = 0.0;
            v11 = 1;
            v12 = 0.0;
            do
            {
              v12 = v12 + (float)(*(float *)(v8 + v11 * 4 - 4) * a2[v11 - 1]);
              v10 = v10 + (float)(*(float *)(v8 + v11 * 4) * a2[v11]);
              v9 += 2;
              v11 += 2;
            }
            while (v9 < a4);
            v13 = 0;
            v14 = (float)(v12 + v10) * -2.0;
            do
            {
              a2[v13] = a2[v13] + (float)(v14 * *(float *)(v8 + 4 * v13));
              ++v13;
            }
            while (a4 != v13);
          }
          ++v7;
          v8 += v6;
        }
        while (v7 != a5);
      }
      v5 = (float *)((char *)v5 + 1);
      a2 = (const float *)((char *)a2 + v6);
    }
    while (v5 != a3);
  }
  return this;
}

uint64_t faiss::reflection_ref(uint64_t this, const float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  float v13;

  if (a3)
  {
    v5 = 0;
    v6 = 4 * a4;
    do
    {
      if (a5)
      {
        v7 = 0;
        v8 = this;
        do
        {
          if (a4)
          {
            v9 = 0;
            v10 = 0.0;
            do
            {
              v10 = v10 + (float)(*(float *)(v8 + 4 * v9) * a2[v9]);
              ++v9;
            }
            while (a4 != v9);
            v11 = 0;
            v12 = v10 * -2.0;
            do
            {
              v13 = a2[v11] + v12 * *(float *)(v8 + 4 * v11);
              a2[v11++] = v13;
            }
            while (a4 != v11);
          }
          ++v7;
          v8 += v6;
        }
        while (v7 != a5);
      }
      v5 = (float *)((char *)v5 + 1);
      a2 = (const float *)((char *)a2 + v6);
    }
    while (v5 != a3);
  }
  return this;
}

void faiss::matrix_qr(faiss *this, __CLPK_integer a2, __CLPK_real *a3, float *a4)
{
  int v5;
  std::string *v6;
  size_t size;
  void *exception;
  __CLPK_real *__work[3];
  __CLPK_integer __info[2];
  __CLPK_integer __lwork;
  __CLPK_integer __k;
  __CLPK_integer __n;
  __CLPK_integer __lda;
  std::string v15;

  if ((int)this < a2)
  {
    memset(&v15, 0, sizeof(v15));
    v5 = snprintf(0, 0, "Error: '%s' failed", "m >= n");
    std::string::resize(&v15, v5 + 1, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v15;
    else
      v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    else
      size = v15.__r_.__value_.__l.__size_;
    snprintf((char *)v6, size, "Error: '%s' failed", "m >= n");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v15, "void faiss::matrix_qr(int, int, float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/utils.cpp", 234);
  }
  __lda = (int)this;
  __k = a2;
  __n = a2;
  std::vector<float>::vector(&v15, a2);
  __lwork = -1;
  *(_QWORD *)__info = 0;
  sgeqrf_(&__lda, &__n, a3, &__lda, (__CLPK_real *)v15.__r_.__value_.__l.__data_, (__CLPK_real *)__info, &__lwork, &__info[1]);
  __lwork = (unint64_t)*(float *)__info;
  std::vector<float>::vector(__work, __lwork);
  sgeqrf_(&__lda, &__n, a3, &__lda, (__CLPK_real *)v15.__r_.__value_.__l.__data_, __work[0], &__lwork, &__info[1]);
  sorgqr_(&__lda, &__n, &__k, a3, &__lda, (__CLPK_real *)v15.__r_.__value_.__l.__data_, __work[0], &__lwork, &__info[1]);
  if (__work[0])
  {
    __work[1] = __work[0];
    operator delete(__work[0]);
  }
  if (v15.__r_.__value_.__r.__words[0])
  {
    v15.__r_.__value_.__l.__size_ = v15.__r_.__value_.__r.__words[0];
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1D48D3B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  uint64_t v12;

  __cxa_free_exception(v11);
  if (*(char *)(v12 - 17) < 0)
    operator delete(*(void **)(v12 - 40));
  _Unwind_Resume(a1);
}

void faiss::FaissException::~FaissException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E9805E98;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_1E9805E98;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::ranklist_handle_ties(uint64_t this, uint64_t a2, float *a3, const float *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  float v8;
  float v10;

  if ((int)this >= 1)
  {
    v5 = 0;
    v6 = this;
    v7 = -1;
    v8 = -1.0e38;
    do
    {
      v10 = a3[v5];
      if (v10 != v8)
      {
        if (v5 > v7 + 1)
        {
          this = std::__sort<std::__less<long long,long long> &,long long *>();
          v10 = a3[v5];
        }
        v8 = v10;
        v7 = v5;
      }
      ++v5;
      a2 += 8;
    }
    while (v6 != v5);
  }
  return this;
}

uint64_t faiss::merge_result_table_with(faiss *this, unint64_t a2, uint64_t a3, uint64_t *a4, float *a5, const uint64_t *a6, const float *a7, uint64_t a8, uint64_t a9)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  float *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  float *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  void *v35;
  char v40;
  void *__src[3];
  void *__p[3];

  v40 = (char)a7;
  std::vector<long long>::vector(__p, a2);
  std::vector<float>::vector(__src, a2);
  v12 = __src[0];
  if (this)
  {
    v13 = 0;
    v14 = 0;
    v35 = __p[0];
    while (1)
    {
      v15 = (_QWORD *)(a3 + 8 * v13 * a2);
      v16 = (char *)a4 + 4 * v13 * a2;
      v17 = &a5[2 * v13 * a2];
      v18 = (char *)a6 + 4 * v13 * a2;
      if ((v40 & 1) == 0)
        break;
      if (a2)
      {
        v19 = 0;
        v20 = 0;
        v21 = (float *)__src[0];
        v22 = __p[0];
        v23 = a2;
        while (1)
        {
          v24 = v15[v20];
          if (v24 < 0)
            break;
          v25 = *(float *)&v16[4 * v20];
          v26 = *(float *)&v18[4 * v19];
          if (v25 >= v26)
            goto LABEL_10;
          *v21 = v25;
          *v22 = v24;
          ++v20;
LABEL_13:
          ++v21;
          ++v22;
          if (!--v23)
            goto LABEL_27;
        }
        v26 = *(float *)&v18[4 * v19];
LABEL_10:
        if (v26 >= 0.0)
        {
          *v21 = v26;
          *v22 = *(_QWORD *)&v17[2 * v19++] + a8;
        }
        else
        {
          *v21 = NAN;
          *v22 = -1;
        }
        goto LABEL_13;
      }
LABEL_26:
      v19 = 0;
LABEL_27:
      v14 += v19;
      memcpy(v16, v12, 4 * a2);
      memcpy(v15, v35, 8 * a2);
      if ((faiss *)++v13 == this)
      {
        v12 = __src[0];
        if (__src[0])
          goto LABEL_29;
        goto LABEL_30;
      }
    }
    if (!a2)
      goto LABEL_26;
    v19 = 0;
    v27 = 0;
    v28 = (float *)__src[0];
    v29 = __p[0];
    v30 = a2;
    while (1)
    {
      v31 = v15[v27];
      if (v31 < 0)
        break;
      v32 = *(float *)&v16[4 * v27];
      v33 = *(float *)&v18[4 * v19];
      if (v32 <= v33)
        goto LABEL_21;
      *v28 = v32;
      *v29 = v31;
      ++v27;
LABEL_24:
      ++v28;
      ++v29;
      if (!--v30)
        goto LABEL_27;
    }
    v33 = *(float *)&v18[4 * v19];
LABEL_21:
    if (v33 >= 0.0)
    {
      *v28 = v33;
      *v29 = *(_QWORD *)&v17[2 * v19++] + a8;
    }
    else
    {
      *v28 = NAN;
      *v29 = -1;
    }
    goto LABEL_24;
  }
  v14 = 0;
  if (__src[0])
  {
LABEL_29:
    __src[1] = v12;
    operator delete(v12);
  }
LABEL_30:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v14;
}

void sub_1D48D3EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t faiss::ranklist_intersection_size(faiss *this, const void *a2, faiss *a3, const void *a4, const uint64_t *a5)
{
  const void *v7;
  faiss *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  faiss *v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;

  do
  {
    v7 = a4;
    v8 = a3;
    a4 = a2;
    a3 = this;
    this = v8;
    a2 = v7;
  }
  while (v8 > a3);
  v9 = (void *)operator new[]();
  memcpy(v9, v7, 8 * (_QWORD)v8);
  std::__sort<std::__less<long long,long long> &,long long *>();
  v10 = 0;
  if (v8)
  {
    v11 = -1;
    v12 = (uint64_t *)v9;
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v14 != v11)
      {
        *((_QWORD *)v9 + v10++) = v13;
        v11 = v13;
      }
      v8 = (faiss *)((char *)v8 - 1);
    }
    while (v8);
  }
  if (a3)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *((_QWORD *)a4 + (_QWORD)v15);
      if (v10 < 2)
      {
        v18 = 0;
      }
      else
      {
        v18 = 0;
        v19 = v10;
        do
        {
          if ((uint64_t)(*((_QWORD *)v9 + ((v19 + v18) >> 1)) & 0xEFFFFFFFFFFFFFFFLL) > v17)
            v19 = (v19 + v18) >> 1;
          else
            v18 = (v19 + v18) >> 1;
        }
        while (v18 + 1 < v19);
      }
      if (*((_QWORD *)v9 + v18) == v17)
      {
        ++v16;
        *((_QWORD *)v9 + v18) = v17 | 0x1000000000000000;
      }
      v15 = (faiss *)((char *)v15 + 1);
    }
    while (v15 != a3);
  }
  else
  {
    v16 = 0;
  }
  MEMORY[0x1D826288C](v9, 0x1000C8000313F17);
  return v16;
}

double faiss::imbalance_factor(faiss *this, int *a2, const int *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  int v6;

  if ((int)this < 1)
  {
    v5 = 0.0;
    v4 = 0.0;
  }
  else
  {
    v3 = this;
    v4 = 0.0;
    v5 = 0.0;
    do
    {
      v6 = *a2++;
      v5 = v5 + (double)v6;
      v4 = v4 + (double)v6 * (double)v6;
      --v3;
    }
    while (v3);
  }
  return v4 * (double)(int)this / (v5 * v5);
}

double faiss::imbalance_factor(faiss *this, int a2, uint64_t *a3, const uint64_t *a4)
{
  int v6;
  int *begin;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int *v12;
  double v13;
  int v14;
  double v15;
  std::vector<int>::value_type __x;
  std::vector<int> v18;

  v6 = (int)this;
  __x = 0;
  std::vector<int>::vector(&v18, a2, &__x);
  begin = v18.__begin_;
  if (v6 >= 1)
  {
    v8 = v6;
    do
    {
      v9 = *a3++;
      ++begin[v9];
      --v8;
    }
    while (v8);
  }
  if (a2 >= 1)
  {
    v10 = a2;
    v11 = 0.0;
    v12 = begin;
    v13 = 0.0;
    do
    {
      v14 = *v12++;
      v13 = v13 + (double)v14;
      v11 = v11 + (double)v14 * (double)v14;
      --v10;
    }
    while (v10);
    v15 = v11 * (double)a2 / (v13 * v13);
    goto LABEL_9;
  }
  v15 = (double)a2 * 0.0 / 0.0;
  if (begin)
  {
LABEL_9:
    v18.__end_ = begin;
    operator delete(begin);
  }
  return v15;
}

uint64_t faiss::ivec_hist(faiss *this, uint64_t a2, const int *a3, void *a4, int *a5)
{
  int v6;
  uint64_t result;
  uint64_t v10;

  v6 = (int)a3;
  bzero(a4, 4 * (int)a3);
  for (result = 0; this; this = (faiss *)((char *)this - 1))
  {
    v10 = *(unsigned int *)(a2 - 4 + 4 * (_QWORD)this);
    if ((v10 & 0x80000000) != 0 || (int)v10 >= v6)
      result = (result + 1);
    else
      ++*((_DWORD *)a4 + v10);
  }
  return result;
}

void faiss::bincode_hist(faiss *this, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int *a5)
{
  unint64_t v9;
  int *v10;
  faiss *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t j;
  int v20;
  char *begin;
  size_t value_high;
  void *exception;
  std::vector<int> v24;

  if ((a2 & 7) != 0)
  {
    memset(&v24, 0, sizeof(v24));
    v20 = snprintf(0, 0, "Error: '%s' failed", "nbits % 8 == 0");
    std::string::resize((std::string *)&v24, v20 + 1, 0);
    if (SHIBYTE(v24.__end_cap_.__value_) >= 0)
      begin = (char *)&v24;
    else
      begin = (char *)v24.__begin_;
    if (SHIBYTE(v24.__end_cap_.__value_) >= 0)
      value_high = HIBYTE(v24.__end_cap_.__value_);
    else
      value_high = (size_t)v24.__end_;
    snprintf(begin, value_high, "Error: '%s' failed", "nbits % 8 == 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v24, "void faiss::bincode_hist(size_t, size_t, const uint8_t *, int *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/utils.cpp", 410);
  }
  v9 = a2 >> 3;
  std::vector<int>::vector(&v24, a2 >> 3 << 8);
  v10 = v24.__begin_;
  if (this)
  {
    v11 = 0;
    if (v9 <= 1)
      v12 = 1;
    else
      v12 = v9;
    do
    {
      if (a2 >= 8)
      {
        v13 = 0;
        v14 = v12;
        do
        {
          v15 = *a3++;
          ++v10[v13 & 0xFFFFFF00 | (unint64_t)v15];
          v13 += 256;
          --v14;
        }
        while (v14);
      }
      v11 = (faiss *)((char *)v11 + 1);
    }
    while (v11 != this);
  }
  bzero(a4, 4 * a2);
  if (a2 >= 8)
  {
    v16 = 0;
    if (v9 <= 1)
      v17 = 1;
    else
      v17 = v9;
    do
    {
      for (i = 0; i != 256; ++i)
      {
        for (j = 0; j != 8; ++j)
        {
          if (((i >> j) & 1) != 0)
            *(_DWORD *)&a4[32 * (v16 & 0x1FFFFFFF) + 4 * j] += v10[((_DWORD)v16 << 8) + i];
        }
      }
      ++v16;
    }
    while (v16 != v17);
  }
  if (v10)
  {
    v24.__end_ = v10;
    operator delete(v10);
  }
}

void sub_1D48D43B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::ivec_checksum(faiss *this, uint64_t a2, const int *a3)
{
  uint64_t result;

  for (result = 112909; this; this = (faiss *)((char *)this - 1))
    result = 65713 * result + 1686049 * *(int *)(a2 - 4 + 4 * (_QWORD)this);
  return result;
}

uint64_t faiss::fvec_argsort(unint64_t this, uint64_t a2, const float *a3, unint64_t *a4)
{
  faiss *i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (this)
  {
    for (i = 0; i != (faiss *)this; i = (faiss *)((char *)i + 1))
      *(_QWORD *)&a3[2 * (_QWORD)i] = i;
  }
  v8 = a2;
  v5 = 126 - 2 * __clz(this);
  if (this)
    v6 = v5;
  else
    v6 = 0;
}

void faiss::fvec_argsort_parallel(unint64_t this, uint64_t a2, const float *a3, unint64_t *a4)
{
  faiss *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  operator new[]();
  if (this)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)&a3[2 * (_QWORD)v7] = v7;
      v7 = (faiss *)((char *)v7 + 1);
    }
    while ((faiss *)this != v7);
  }
  v10 = a2;
  v8 = 126 - 2 * __clz(this);
  if (this)
    v9 = v8;
  else
    v9 = 0;
  JUMPOUT(0x1D826288CLL);
}

uint64_t faiss::fvecs_maybe_subsample(faiss *this, int **a2, unint64_t *a3, uint64_t a4, const float *a5, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type a6)
{
  int *v8;
  uint64_t v12;
  uint64_t v13;
  int *begin;
  unint64_t *v15;
  char *v16;
  std::vector<int> v18;

  v8 = *a2;
  if (v8 <= (int *)a3)
    return a4;
  if ((_DWORD)a5)
  {
    printf("  Input training set too big (max size is %zd), sampling %zd / %zd vectors\n", (size_t)a3, (size_t)a3, (size_t)v8);
    v8 = *a2;
  }
  std::vector<int>::vector(&v18, (std::vector<int>::size_type)v8);
  faiss::rand_perm((uint64_t)v18.__begin_, *a2, a6);
  v12 = operator new[]();
  v13 = v12;
  begin = v18.__begin_;
  if (a3)
  {
    v15 = 0;
    v16 = (char *)v12;
    do
    {
      memcpy(v16, (const void *)(a4 + 4 * begin[(_QWORD)v15] * (_QWORD)this), 4 * (_QWORD)this);
      v15 = (unint64_t *)((char *)v15 + 1);
      v16 += 4 * (_QWORD)this;
    }
    while (a3 != v15);
    *a2 = (int *)a3;
    goto LABEL_10;
  }
  *a2 = 0;
  if (begin)
  {
LABEL_10:
    v18.__end_ = begin;
    operator delete(begin);
  }
  return v13;
}

void sub_1D48D4658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float faiss::binary_to_real(faiss *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  unint64_t i;
  float result;

  if (this)
  {
    for (i = 0; (faiss *)i != this; ++i)
    {
      result = (float)(2 * ((*(unsigned __int8 *)(a2 + (i >> 3)) >> (i & 7)) & 1) - 1);
      *(float *)&a3[4 * i] = result;
    }
  }
  return result;
}

unint64_t faiss::real_to_binary(unint64_t this, uint64_t a2, const float *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;

  if (this >= 8)
  {
    v4 = 0;
    do
    {
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = 1 << v5;
        if (*(float *)(a2 + 4 * v5) <= 0.0)
          LOBYTE(v7) = 0;
        v6 |= v7;
        ++v5;
      }
      while (v5 != 8);
      *((_BYTE *)a3 + v4++) = v6;
      a2 += 32;
    }
    while (v4 != this >> 3);
  }
  return this;
}

unint64_t faiss::hash_bytes(faiss *this, uint64_t a2)
{
  uint64_t v2;
  const unsigned __int8 *v3;
  unsigned int v4;

  v2 = (unint64_t)*(unsigned __int8 *)this << 7;
  if (a2 >= 1)
  {
    v3 = (const unsigned __int8 *)(a2 + 1);
    do
    {
      v4 = *(unsigned __int8 *)this;
      this = (faiss *)((char *)this + 1);
      v2 = (1000003 * v2) ^ v4;
      --v3;
    }
    while ((unint64_t)v3 > 1);
  }
  return v2 ^ a2;
}

uint64_t faiss::check_openmp(faiss *this)
{
  return 0;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1D48D47AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1D48D4820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,faiss::`anonymous namespace'::ArgsortComparator &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t *v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  uint64_t *v89;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *(a2 - 1);
        v42 = *v10;
        if (*(float *)(*a3 + 4 * v41) < *(float *)(*a3 + 4 * *v10))
        {
          *v10 = v41;
          *(a2 - 1) = v42;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v43 = v10 + 1;
        v44 = v10 + 2;
        v45 = v10 + 3;
        v46 = *(a2 - 1);
        v47 = v10[3];
        v48 = *a3;
        if (*(float *)(*a3 + 4 * v46) < *(float *)(*a3 + 4 * v47))
        {
          *v45 = v46;
          *(a2 - 1) = v47;
          v49 = *v45;
          v50 = *v44;
          v51 = *(float *)(v48 + 4 * *v45);
          if (v51 < *(float *)(v48 + 4 * *v44))
          {
            *v44 = v49;
            *v45 = v50;
            v52 = *v43;
            if (v51 < *(float *)(v48 + 4 * *v43))
            {
              v10[1] = v49;
              v10[2] = v52;
              v53 = *v10;
              if (v51 < *(float *)(v48 + 4 * *v10))
              {
                *v10 = v49;
                v10[1] = v53;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v54 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v55 = 0;
                v56 = *a3;
                v57 = v10;
                do
                {
                  v59 = *v57;
                  v58 = v57[1];
                  v57 = v54;
                  v60 = *(float *)(v56 + 4 * v58);
                  if (v60 < *(float *)(v56 + 4 * v59))
                  {
                    v61 = v55;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v61 + 8) = v59;
                      if (!v61)
                        break;
                      v59 = *(uint64_t *)((char *)v10 + v61 - 8);
                      v61 -= 8;
                      if (v60 >= *(float *)(v56 + 4 * v59))
                      {
                        v62 = (uint64_t *)((char *)v10 + v61 + 8);
                        goto LABEL_75;
                      }
                    }
                    v62 = v10;
LABEL_75:
                    *v62 = v58;
                  }
                  v54 = v57 + 1;
                  v55 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v91 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v92 = *a3;
              do
              {
                v94 = *v9;
                v93 = v9[1];
                v9 = v91;
                v95 = *(float *)(v92 + 4 * v93);
                if (v95 < *(float *)(v92 + 4 * v94))
                {
                  do
                  {
                    *v91 = v94;
                    v94 = *(v91 - 2);
                    --v91;
                  }
                  while (v95 < *(float *)(v92 + 4 * v94));
                  *v91 = v93;
                }
                v91 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v63 = (v12 - 2) >> 1;
            v64 = *a3;
            v65 = v63;
            do
            {
              v66 = v65;
              if (v63 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &v10[v67];
                if (2 * v66 + 2 < (uint64_t)v12 && *(float *)(v64 + 4 * *v68) < *(float *)(v64 + 4 * v68[1]))
                {
                  ++v68;
                  v67 = 2 * v66 + 2;
                }
                result = (uint64_t)&v10[v66];
                v69 = *v68;
                v70 = *(_QWORD *)result;
                v71 = *(float *)(v64 + 4 * *(_QWORD *)result);
                if (*(float *)(v64 + 4 * *v68) >= v71)
                {
                  do
                  {
                    v72 = v68;
                    *(_QWORD *)result = v69;
                    if (v63 < v67)
                      break;
                    v73 = 2 * v67;
                    v67 = (2 * v67) | 1;
                    v68 = &v10[v67];
                    v74 = v73 + 2;
                    if (v74 < (uint64_t)v12 && *(float *)(v64 + 4 * *v68) < *(float *)(v64 + 4 * v68[1]))
                    {
                      ++v68;
                      v67 = v74;
                    }
                    v69 = *v68;
                    result = (uint64_t)v72;
                  }
                  while (*(float *)(v64 + 4 * *v68) >= v71);
                  *v72 = v70;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v75 = (unint64_t)v11 >> 3;
            do
            {
              v76 = 0;
              v77 = *v10;
              v78 = *a3;
              v79 = v10;
              do
              {
                v80 = v79;
                v79 += v76 + 1;
                v81 = 2 * v76;
                v76 = (2 * v76) | 1;
                v82 = v81 + 2;
                if (v82 < v75)
                {
                  result = *v79;
                  if (*(float *)(v78 + 4 * *v79) < *(float *)(v78 + 4 * v79[1]))
                  {
                    ++v79;
                    v76 = v82;
                  }
                }
                *v80 = *v79;
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v79 == --a2)
              {
                *v79 = v77;
              }
              else
              {
                *v79 = *a2;
                *a2 = v77;
                v83 = (char *)v79 - (char *)v10 + 8;
                if (v83 >= 9)
                {
                  v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
                  v85 = &v10[v84];
                  v86 = *v85;
                  v87 = *v79;
                  v88 = *(float *)(v78 + 4 * *v79);
                  if (*(float *)(v78 + 4 * *v85) < v88)
                  {
                    do
                    {
                      v89 = v85;
                      *v79 = v86;
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = &v10[v84];
                      v86 = *v85;
                      v79 = v89;
                    }
                    while (*(float *)(v78 + 4 * *v85) < v88);
                    *v89 = v87;
                  }
                }
              }
            }
            while (v75-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
        }
        else
        {
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = *a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(float *)(v17 + 4 * v16);
          if (*(float *)(v17 + 4 * *(v9 - 1)) < v18)
            goto LABEL_12;
          if (v18 >= *(float *)(v17 + 4 * *(a2 - 1)))
          {
            v33 = v9 + 1;
            do
            {
              v10 = v33;
              if (v33 >= a2)
                break;
              ++v33;
            }
            while (v18 >= *(float *)(v17 + 4 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v32 = v10[1];
              ++v10;
            }
            while (v18 >= *(float *)(v17 + 4 * v32));
          }
          v34 = a2;
          if (v10 < a2)
          {
            v34 = a2;
            do
              v35 = *--v34;
            while (v18 < *(float *)(v17 + 4 * v35));
          }
          if (v10 < v34)
          {
            v36 = *v10;
            v37 = *v34;
            do
            {
              *v10 = v37;
              *v34 = v36;
              do
              {
                v38 = v10[1];
                ++v10;
                v36 = v38;
              }
              while (v18 >= *(float *)(v17 + 4 * v38));
              do
              {
                v39 = *--v34;
                v37 = v39;
              }
              while (v18 < *(float *)(v17 + 4 * v39));
            }
            while (v10 < v34);
          }
          v40 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v40;
          a5 = 0;
          *v40 = v16;
          continue;
        }
        v18 = *(float *)(v17 + 4 * v16);
LABEL_12:
        v19 = 0;
        do
          v20 = v9[++v19];
        while (*(float *)(v17 + 4 * v20) < v18);
        v21 = &v9[v19];
        v22 = a2;
        if (v19 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *--v22;
          }
          while (*(float *)(v17 + 4 * v24) >= v18);
        }
        else
        {
          do
            v23 = *--v22;
          while (*(float *)(v17 + 4 * v23) >= v18);
        }
        if (v21 >= v22)
        {
          v30 = v21 - 1;
        }
        else
        {
          v25 = *v22;
          v26 = &v9[v19];
          v27 = v22;
          do
          {
            *v26 = v25;
            *v27 = v20;
            do
            {
              v28 = v26[1];
              ++v26;
              v20 = v28;
            }
            while (*(float *)(v17 + 4 * v28) < v18);
            do
            {
              v29 = *--v27;
              v25 = v29;
            }
            while (*(float *)(v17 + 4 * v29) >= v18);
          }
          while (v26 < v27);
          v30 = v26 - 1;
        }
        if (v30 != v9)
          *v9 = *v30;
        *v30 = v16;
        if (v21 < v22)
        {
LABEL_33:
          a5 = 0;
          v10 = v30 + 1;
          continue;
        }
        v10 = v30 + 1;
        if (!(_DWORD)result)
        {
          if (v31)
            continue;
          goto LABEL_33;
        }
        a2 = v30;
        if (!v31)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::`anonymous namespace'::ArgsortComparator &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *result;
  v6 = *a4;
  v7 = *(float *)(*a4 + 4 * *a2);
  v8 = *(float *)(*a4 + 4 * *result);
  v9 = *a3;
  v10 = *(float *)(*a4 + 4 * *a3);
  if (v7 >= v8)
  {
    if (v10 < v7)
    {
      *a2 = v9;
      *a3 = v4;
      v11 = *result;
      if (*(float *)(v6 + 4 * *a2) < *(float *)(v6 + 4 * *result))
      {
        *result = *a2;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *result = v4;
      *a2 = v5;
      if (*(float *)(v6 + 4 * *a3) >= v8)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::`anonymous namespace'::ArgsortComparator &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v21 = a1 + 1;
      v22 = a1 + 2;
      v23 = a1 + 3;
      v24 = *(a2 - 1);
      v25 = a1[3];
      v26 = *a3;
      if (*(float *)(*a3 + 4 * v24) < *(float *)(*a3 + 4 * v25))
      {
        *v23 = v24;
        *(a2 - 1) = v25;
        v27 = *v23;
        v28 = *v22;
        v29 = *(float *)(v26 + 4 * *v23);
        if (v29 < *(float *)(v26 + 4 * *v22))
        {
          *v22 = v27;
          *v23 = v28;
          v30 = *v21;
          if (v29 < *(float *)(v26 + 4 * *v21))
          {
            a1[1] = v27;
            a1[2] = v30;
            v31 = *a1;
            if (v29 < *(float *)(v26 + 4 * *a1))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * *v11);
    if (v17 < *(float *)(v13 + 4 * *v10))
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::`anonymous namespace'::ArgsortComparator &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = *a3;
  v12 = *a5;
  if (*(float *)(*a5 + 4 * *a4) < *(float *)(*a5 + 4 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(float *)(v12 + 4 * *a3) < *(float *)(v12 + 4 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(float *)(v12 + 4 * *a2) < *(float *)(v12 + 4 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

faiss::RangeSearchResult *faiss::RangeSearchResult::RangeSearchResult(faiss::RangeSearchResult *this, uint64_t a2, int a3)
{
  size_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E9806230;
  *((_QWORD *)this + 1) = a2;
  if (a3)
  {
    v4 = 8 * (a2 + 1);
    v5 = (void *)operator new[]();
    bzero(v5, v4);
  }
  else
  {
    v5 = 0;
  }
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x40000;
  return this;
}

uint64_t faiss::RangeSearchResult::do_allocation(faiss::RangeSearchResult *this)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int v8;
  std::string *v9;
  size_t size;
  void *exception;
  std::string v12;

  if (*((_QWORD *)this + 3) || *((_QWORD *)this + 4))
  {
    memset(&v12, 0, sizeof(v12));
    v8 = snprintf(0, 0, "Error: '%s' failed", "labels == nullptr && distances == nullptr");
    std::string::resize(&v12, v8 + 1, 0);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v12;
    else
      v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    snprintf((char *)v9, size, "Error: '%s' failed", "labels == nullptr && distances == nullptr");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v12, "virtual void faiss::RangeSearchResult::do_allocation()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/AuxIndexStructures.cpp", 40);
  }
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (*((_QWORD *)this + 1))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = v2[v3];
      v2[v3] = v4;
      v4 += v5;
      ++v3;
      v6 = *((_QWORD *)this + 1);
    }
    while (v6 > v3);
    v2[v6] = v4;
  }
  else
  {
    *v2 = 0;
  }
  *((_QWORD *)this + 3) = operator new[]();
  result = operator new[]();
  *((_QWORD *)this + 4) = result;
  return result;
}

void sub_1D48D54C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::RangeSearchResult::~RangeSearchResult(faiss::RangeSearchResult *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E9806230;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1D826288C](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    MEMORY[0x1D826288C](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x1D826288C](v4, 0x1000C8000313F17);
}

{
  faiss::RangeSearchResult::~RangeSearchResult(this);
  JUMPOUT(0x1D82628A4);
}

_QWORD *faiss::BufferList::BufferList(_QWORD *this, uint64_t a2)
{
  *this = a2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = a2;
  return this;
}

{
  *this = a2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = a2;
  return this;
}

void faiss::BufferList::~BufferList(faiss::BufferList *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (char *)*((_QWORD *)this + 2);
  if (v2 != *((char **)this + 1))
  {
    v3 = 0;
    v4 = 0;
    v2 = (char *)*((_QWORD *)this + 1);
    do
    {
      if (*(_QWORD *)&v2[v3])
      {
        MEMORY[0x1D826288C](*(_QWORD *)&v2[v3], 0x1000C8000313F17);
        v2 = (char *)*((_QWORD *)this + 1);
      }
      if (*(_QWORD *)&v2[v3 + 8])
      {
        MEMORY[0x1D826288C](*(_QWORD *)&v2[v3 + 8], 0x1000C8052888210);
        v2 = (char *)*((_QWORD *)this + 1);
      }
      ++v4;
      v3 += 16;
    }
    while (v4 < (uint64_t)(*((_QWORD *)this + 2) - (_QWORD)v2) >> 4);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void faiss::BufferList::add(faiss::BufferList *this, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *((_QWORD *)this + 4);
  if (v6 == *(_QWORD *)this)
  {
    faiss::BufferList::append_buffer(this);
    v6 = *((_QWORD *)this + 4);
  }
  v7 = *((_QWORD *)this + 2);
  v9 = *(_QWORD *)(v7 - 16);
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v9 + 8 * v6) = a2;
  *(float *)(v8 + 4 * v6) = a3;
  *((_QWORD *)this + 4) = v6 + 1;
}

void faiss::BufferList::append_buffer(faiss::BufferList *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;

  v2 = operator new[]();
  v3 = operator new[]();
  v4 = *((_QWORD *)this + 3);
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = ((uint64_t)v5 - v7) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::BufferList::Buffer>>((uint64_t)this + 24, v11);
    else
      v12 = 0;
    v13 = (uint64_t *)&v12[16 * v8];
    v14 = &v12[16 * v11];
    *v13 = v2;
    v13[1] = v3;
    v6 = v13 + 2;
    v16 = (char *)*((_QWORD *)this + 1);
    v15 = (char *)*((_QWORD *)this + 2);
    if (v15 != v16)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 2;
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 3) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v2;
    v5[1] = v3;
    v6 = v5 + 2;
  }
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 4) = 0;
}

_QWORD *faiss::BufferList::copy_range(_QWORD *this, unint64_t a2, unint64_t a3, char *__dst, float *a5)
{
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3)
  {
    v7 = a3;
    v8 = this;
    v9 = a2 / *this;
    v10 = a2 % *this;
    do
    {
      if (v10 + v7 >= *v8)
        v11 = *v8 - v10;
      else
        v11 = v7;
      v12 = (_QWORD *)(v8[1] + 16 * v9);
      v13 = v12[1];
      memcpy(__dst, (const void *)(*v12 + 8 * v10), 8 * v11);
      this = memcpy(a5, (const void *)(v13 + 4 * v10), 4 * v11);
      v10 = 0;
      __dst += 8 * v11;
      ++v9;
      a5 += v11;
      v7 -= v11;
    }
    while (v7);
  }
  return this;
}

void faiss::RangeQueryResult::add(faiss::RangeQueryResult *this, float a2, uint64_t a3)
{
  faiss::BufferList *v3;

  v3 = (faiss::BufferList *)*((_QWORD *)this + 2);
  ++*((_QWORD *)this + 1);
  faiss::BufferList::add(v3, a3, a2);
}

_QWORD *faiss::RangeSearchPartialResult::RangeSearchPartialResult(_QWORD *this, faiss::RangeSearchResult *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  *this = v2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = v2;
  this[5] = a2;
  this[7] = 0;
  this[8] = 0;
  this[6] = 0;
  return this;
}

{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  *this = v2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = v2;
  this[5] = a2;
  this[7] = 0;
  this[8] = 0;
  this[6] = 0;
  return this;
}

_QWORD *faiss::RangeSearchPartialResult::new_result(faiss::RangeSearchPartialResult *this, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = *((_QWORD *)this + 8);
  v4 = (char *)this + 64;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v10) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[24 * v11];
    v17 = &v15[24 * v14];
    *(_QWORD *)v16 = a2;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = this;
    v8 = v16 + 24;
    v19 = (char *)*((_QWORD *)this + 6);
    v18 = (char *)*((_QWORD *)this + 7);
    if (v18 != v19)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v16 - 24) = v20;
        v16 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 6) = v16;
    *((_QWORD *)this + 7) = v8;
    *((_QWORD *)this + 8) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v7[1] = 0;
    v8 = v7 + 3;
    v7[2] = this;
  }
  *((_QWORD *)this + 7) = v8;
  return v8 - 3;
}

_QWORD *faiss::RangeSearchPartialResult::finalize(faiss::RangeSearchPartialResult *this)
{
  faiss::RangeSearchPartialResult::set_lims(this);
  (***((void (****)(_QWORD))this + 5))(*((_QWORD *)this + 5));
  return faiss::RangeSearchPartialResult::copy_result(this, 0);
}

_QWORD *faiss::RangeSearchPartialResult::set_lims(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = this[6];
  v2 = this[7] - v1;
  if (v2)
  {
    v3 = v2 / 24;
    v4 = *(_QWORD *)(this[5] + 16);
    if (v3 <= 1)
      v3 = 1;
    v5 = (_QWORD *)(v1 + 8);
    do
    {
      *(_QWORD *)(v4 + 8 * *(v5 - 1)) = *v5;
      v5 += 3;
      --v3;
    }
    while (v3);
  }
  return this;
}

_QWORD *faiss::RangeSearchPartialResult::copy_result(_QWORD *this, int a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = this[6];
  if (this[7] != v2)
  {
    v4 = this;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v2 + v5;
      v9 = (_QWORD *)v4[5];
      v10 = *(_QWORD *)(v9[2] + 8 * *(_QWORD *)(v2 + v5));
      this = faiss::BufferList::copy_range(v4, v7, *(_QWORD *)(v2 + v5 + 8), (char *)(v9[3] + 8 * v10), (float *)(v9[4] + 4 * v10));
      if (a2)
        *(_QWORD *)(*(_QWORD *)(v4[5] + 16) + 8 * *(_QWORD *)(v2 + v5)) += *(_QWORD *)(v8 + 8);
      v7 += *(_QWORD *)(v8 + 8);
      ++v6;
      v2 = v4[6];
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4[7] - v2) >> 3) > v6);
  }
  return this;
}

uint64_t **faiss::RangeSearchPartialResult::merge(uint64_t **result, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  faiss::BufferList *v18;
  void *v19;
  _QWORD *v20;

  v3 = *result;
  v2 = result[1];
  v4 = (char *)v2 - (char *)*result;
  if ((v4 >> 3))
  {
    v6 = (uint64_t *)result;
    v7 = *(_QWORD *)(*v3 + 40);
    v8 = *(_QWORD *)(v7 + 8);
    while (v3 != v2)
    {
      v9 = *v3;
      if (*v3)
      {
        v10 = *(uint64_t **)(v9 + 48);
        v11 = *(uint64_t **)(v9 + 56);
        if (v10 != v11)
        {
          v12 = *(_QWORD *)(v7 + 16);
          do
          {
            v13 = *v10;
            v14 = v10[1];
            v10 += 3;
            *(_QWORD *)(v12 + 8 * v13) += v14;
          }
          while (v10 != v11);
        }
      }
      ++v3;
    }
    result = (uint64_t **)(**(uint64_t (***)(uint64_t))v7)(v7);
    if ((int)(v4 >> 3) >= 1)
    {
      v15 = 0;
      v16 = v4 & 0x7FFFFFFF8;
      do
      {
        result = *(uint64_t ***)(*v6 + v15);
        if (result)
        {
          result = (uint64_t **)faiss::RangeSearchPartialResult::copy_result(result, 1);
          if (a2)
          {
            v17 = *v6;
            v18 = *(faiss::BufferList **)(*v6 + v15);
            if (v18)
            {
              v19 = (void *)*((_QWORD *)v18 + 6);
              if (v19)
              {
                *((_QWORD *)v18 + 7) = v19;
                operator delete(v19);
              }
              faiss::BufferList::~BufferList(v18);
              result = (uint64_t **)MEMORY[0x1D82628A4]();
              v17 = *v6;
            }
            *(_QWORD *)(v17 + v15) = 0;
          }
        }
        v15 += 8;
      }
      while (v16 != v15);
    }
    v20 = *(_QWORD **)(v7 + 16);
    if (v8)
      result = (uint64_t **)memmove(v20 + 1, *(const void **)(v7 + 16), 8 * v8);
    *v20 = 0;
  }
  return result;
}

_QWORD *faiss::IDSelectorRange::IDSelectorRange(_QWORD *this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E9805FA0;
  this[1] = a2;
  this[2] = a3;
  return this;
}

{
  *this = &off_1E9805FA0;
  this[1] = a2;
  this[2] = a3;
  return this;
}

BOOL faiss::IDSelectorRange::is_member(faiss::IDSelectorRange *this, uint64_t a2)
{
  return *((_QWORD *)this + 1) <= a2 && *((_QWORD *)this + 2) > a2;
}

_QWORD *faiss::IDSelectorArray::IDSelectorArray(_QWORD *this, uint64_t a2, const uint64_t *a3)
{
  *this = &off_1E9805F50;
  this[1] = a2;
  this[2] = a3;
  return this;
}

{
  *this = &off_1E9805F50;
  this[1] = a2;
  this[2] = a3;
  return this;
}

BOOL faiss::IDSelectorArray::is_member(faiss::IDSelectorArray *this, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (*v3 == a2)
    return 1;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v2 == v5)
      break;
    v7 = v3[v5++];
  }
  while (v7 != a2);
  return v6 < v2;
}

faiss::IDSelectorBatch *faiss::IDSelectorBatch::IDSelectorBatch(faiss::IDSelectorBatch *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  char *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v11;
  char v12;

  v4 = a2;
  *(_QWORD *)this = &off_1E9805F78;
  *(_OWORD *)((char *)this + 8) = 0u;
  v6 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_QWORD *)this + 6) = 0;
  v7 = 1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  do
    v8 = 1 << (v7++ - 1);
  while (v8 < a2);
  *((_DWORD *)this + 18) = v7 + 3;
  *((_QWORD *)this + 10) = ~(-1 << (v7 + 3));
  v12 = 0;
  std::vector<unsigned char>::__append((_QWORD *)this + 6, 1 << v7, &v12);
  for (; v4; --v4)
  {
    v9 = *a3++;
    v11 = v9;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>((uint64_t)v6, (unint64_t *)&v11, &v11);
    v11 &= *((_QWORD *)this + 10);
    *(_BYTE *)(*((_QWORD *)this + 6) + (v11 >> 3)) |= 1 << (v11 & 7);
  }
  return this;
}

void sub_1D48D5E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 56) = v5;
    operator delete(v5);
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL faiss::IDSelectorBatch::is_member(faiss::IDSelectorBatch *this, unint64_t a2)
{
  unint64_t v3;

  v3 = a2;
  return ((*(unsigned __int8 *)(*((_QWORD *)this + 6) + ((uint64_t)(*((_QWORD *)this + 10) & a2) >> 3)) >> (*((_BYTE *)this + 80) & a2 & 7)) & 1) != 0
      && std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)this + 1, &v3) != 0;
}

uint64_t *faiss::InterruptCallback::get_instance(faiss::InterruptCallback *this)
{
  unsigned __int8 v1;

  {
    __cxa_atexit((void (*)(void *))std::unique_ptr<faiss::InterruptCallback>::~unique_ptr[abi:ne180100], &faiss::InterruptCallback::get_instance(void)::instance, &dword_1D467C000);
  }
  return &faiss::InterruptCallback::get_instance(void)::instance;
}

uint64_t *std::unique_ptr<faiss::InterruptCallback>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

std::mutex *faiss::InterruptCallback::get_lock(faiss::InterruptCallback *this)
{
  unsigned __int8 v1;

  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &faiss::InterruptCallback::get_lock(void)::lock, &dword_1D467C000);
  }
  return &faiss::InterruptCallback::get_lock(void)::lock;
}

uint64_t faiss::InterruptCallback::clear_instance(faiss::InterruptCallback *this)
{
  uint64_t result;

  faiss::InterruptCallback::get_instance(this);
  result = faiss::InterruptCallback::get_instance(void)::instance;
  faiss::InterruptCallback::get_instance(void)::instance = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t *faiss::InterruptCallback::check(faiss::InterruptCallback *this)
{
  uint64_t *result;
  void *exception;
  _QWORD v3[3];

  result = faiss::InterruptCallback::get_instance(this);
  if (faiss::InterruptCallback::get_instance(void)::instance)
  {
    faiss::InterruptCallback::get_instance((faiss::InterruptCallback *)result);
    result = (uint64_t *)(**(uint64_t (***)(uint64_t))faiss::InterruptCallback::get_instance(void)::instance)(faiss::InterruptCallback::get_instance(void)::instance);
    if ((_DWORD)result)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v3, "computation interrupted");
      faiss::FaissException::FaissException(exception, v3, "static void faiss::InterruptCallback::check()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/AuxIndexStructures.cpp", 279);
    }
  }
  return result;
}

void sub_1D48D60F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::InterruptCallback::is_interrupted(faiss::InterruptCallback *this)
{
  uint64_t *instance;
  faiss::InterruptCallback *v2;
  uint64_t v3;

  instance = faiss::InterruptCallback::get_instance(this);
  if (!faiss::InterruptCallback::get_instance(void)::instance)
    return 0;
  faiss::InterruptCallback::get_lock((faiss::InterruptCallback *)instance);
  std::mutex::lock(&faiss::InterruptCallback::get_lock(void)::lock);
  faiss::InterruptCallback::get_instance(v2);
  v3 = (**(uint64_t (***)(uint64_t))faiss::InterruptCallback::get_instance(void)::instance)(faiss::InterruptCallback::get_instance(void)::instance);
  std::mutex::unlock(&faiss::InterruptCallback::get_lock(void)::lock);
  return v3;
}

void sub_1D48D6194(_Unwind_Exception *a1)
{
  std::mutex::unlock(&faiss::InterruptCallback::get_lock(void)::lock);
  _Unwind_Resume(a1);
}

unint64_t faiss::InterruptCallback::get_period_hint(faiss::InterruptCallback *this)
{
  faiss::InterruptCallback::get_instance(this);
  if (!faiss::InterruptCallback::get_instance(void)::instance)
    return 0x40000000;
  if ((unint64_t)this + 1 > 0x5F5E100)
    return 1;
  return 0x5F5E100 / ((unint64_t)this + 1);
}

void faiss::IDSelectorRange::~IDSelectorRange(faiss::IDSelectorRange *this)
{
  JUMPOUT(0x1D82628A4);
}

void faiss::IDSelectorArray::~IDSelectorArray(faiss::IDSelectorArray *this)
{
  JUMPOUT(0x1D82628A4);
}

void faiss::IDSelectorBatch::~IDSelectorBatch(faiss::IDSelectorBatch *this)
{
  faiss::IDSelectorBatch::~IDSelectorBatch(this);
  JUMPOUT(0x1D82628A4);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E9805F78;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::BufferList::Buffer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void std::vector<unsigned char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1D48D6668(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

_QWORD *faiss::FaissException::FaissException(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E9805E98;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1D48D6A7C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::FaissException::FaissException(uint64_t a1, uint64_t a2, const char *a3, const char *a4, int a5)
{
  std::string *v10;
  const char *v11;
  int v12;
  size_t v13;
  const char *v14;

  *(_QWORD *)a1 = off_1E9805E98;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  v12 = snprintf(0, 0, "Error in %s at %s:%d: %s", a3, a4, a5, v11);
  std::string::resize(v10, v12 + 1, 0);
  if (*(char *)(a1 + 31) < 0)
  {
    v10 = *(std::string **)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v13 = *(unsigned __int8 *)(a1 + 31);
  }
  if (*(char *)(a2 + 23) >= 0)
    v14 = (const char *)a2;
  else
    v14 = *(const char **)a2;
  snprintf((char *)v10, v13, "Error in %s at %s:%d: %s", a3, a4, a5, v14);
  return a1;
}

void sub_1D48D6B70(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::FaissException::what(faiss::FaissException *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

const std::exception_ptr **faiss::handleExceptions(const std::exception_ptr **result)
{
  const std::exception_ptr *v1;
  unint64_t v2;
  std::exception_ptr v3;
  const std::exception_ptr **v4;
  _QWORD *exception;
  std::exception_ptr v6;
  __int128 v7;
  std::exception_ptr v8;
  char v9[280];
  std::exception_ptr v10;

  v2 = (char *)result[1] - (char *)*result;
  if (v2 == 16)
  {
    v3.__ptr_ = std::exception_ptr::exception_ptr(&v10, *result + 1);
    std::rethrow_exception(v3);
    goto LABEL_7;
  }
  if (v2 >= 0x11)
  {
    v4 = result;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    v1 = *v4;
    if (*v4 == v4[1])
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      faiss::FaissException::FaissException(exception, &v7);
    }
    while (1)
    {
      std::exception_ptr::exception_ptr(&v8, v1 + 1);
      v6.__ptr_ = &v8;
      std::rethrow_exception(v6);
LABEL_7:
      __break(1u);
    }
  }
  return result;
}

void sub_1D48D6CC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception_ptr a13)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;

  std::exception_ptr::~exception_ptr(&a13);
  v22 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v23 = v22;
    if ((*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v16, 28);
      v26 = (_QWORD *)std::ostream::operator<<();
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v17, 2);
      v28 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
      v29 = strlen(v28);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v14, 36);
      v24 = (_QWORD *)std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v15, 1);
    __cxa_end_catch();
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v14, 36);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v15, 1);
    __cxa_end_catch();
  }
  if (v18 + 16 == v19)
    JUMPOUT(0x1D48D6C3CLL);
  JUMPOUT(0x1D48D6CA8);
}

void sub_1D48D6DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1D48D6F28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1D8262844](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D8262844](a1 + 128);
  return a1;
}

void faiss::demangle_cpp_symbol(faiss *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int status;

  status = -1;
  v4 = __cxa_demangle((const char *)this, 0, 0, &status);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!status)
    MEMORY[0x1D82626B8](a2, v4);
  free(v4);
}

void sub_1D48D703C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1D82626F4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1D8262700](v13);
  return a1;
}

void sub_1D48D723C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1D8262700](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1D48D721CLL);
}

void sub_1D48D7284(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1D48D73B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

double faiss::SimulatedAnnealingParameters::SimulatedAnnealingParameters(faiss::SimulatedAnnealingParameters *this)
{
  double result;

  result = 0.7;
  *(_OWORD *)this = xmmword_1D493C1B0;
  *((_OWORD *)this + 1) = xmmword_1D493C1C0;
  *((_WORD *)this + 16) = 0;
  return result;
}

{
  double result;

  result = 0.7;
  *(_OWORD *)this = xmmword_1D493C1B0;
  *((_OWORD *)this + 1) = xmmword_1D493C1C0;
  *((_WORD *)this + 16) = 0;
  return result;
}

double faiss::PermutationObjective::cost_update(faiss::PermutationObjective *this, const int *a2, int a3, int a4)
{
  double v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  double v11;
  std::vector<int> v13;

  v8 = (**(double (***)(faiss::PermutationObjective *))this)(this);
  std::vector<int>::vector(&v13, *((int *)this + 2));
  begin = v13.__begin_;
  if (*((int *)this + 2) >= 1)
  {
    v10 = 0;
    do
    {
      begin[v10] = a2[v10];
      ++v10;
    }
    while (v10 < *((int *)this + 2));
  }
  begin[a3] = a2[a4];
  begin[a4] = a2[a3];
  v11 = (**(double (***)(faiss::PermutationObjective *))this)(this);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
  return v11 - v8;
}

void sub_1D48D7574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

faiss::SimulatedAnnealingOptimizer *faiss::SimulatedAnnealingOptimizer::SimulatedAnnealingOptimizer(faiss::SimulatedAnnealingOptimizer *this, faiss::PermutationObjective *a2, const faiss::SimulatedAnnealingParameters *a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  std::string *v11;
  size_t size;
  void *exception;
  std::string v14;

  v5 = *(_OWORD *)a3;
  v6 = *((_OWORD *)a3 + 1);
  v7 = *((_QWORD *)a3 + 4);
  *(_QWORD *)this = &off_1E9806B98;
  *(_OWORD *)((char *)this + 24) = v6;
  *(_OWORD *)((char *)this + 8) = v5;
  *((_QWORD *)this + 5) = v7;
  *((_QWORD *)this + 6) = a2;
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 8) = 0;
  v8 = operator new();
  faiss::RandomGenerator::RandomGenerator(v8, *((_DWORD *)a3 + 6));
  *((_QWORD *)this + 9) = v8;
  if (*((_DWORD *)this + 14) >> 5 >= 0xC35u)
  {
    memset(&v14, 0, sizeof(v14));
    v10 = snprintf(0, 0, "Error: '%s' failed", "n < 100000 && n >= 0");
    std::string::resize(&v14, v10 + 1, 0);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v14;
    else
      v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    snprintf((char *)v11, size, "Error: '%s' failed", "n < 100000 && n >= 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v14, "faiss::SimulatedAnnealingOptimizer::SimulatedAnnealingOptimizer(PermutationObjective *, const SimulatedAnnealingParameters &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 78);
  }
  return this;
}

void sub_1D48D76D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::SimulatedAnnealingOptimizer::~SimulatedAnnealingOptimizer(faiss::SimulatedAnnealingOptimizer *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E9806B98;
  v1 = *((_QWORD *)this + 9);
  if (v1)
    MEMORY[0x1D82628A4](v1, 0x1000C407BAC9B3ELL);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E9806B98;
  v1 = *((_QWORD *)this + 9);
  if (v1)
    MEMORY[0x1D82628A4](v1, 0x1000C407BAC9B3ELL);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E9806B98;
  v1 = *((_QWORD *)this + 9);
  if (v1)
    MEMORY[0x1D82628A4](v1, 0x1000C407BAC9B3ELL);
  JUMPOUT(0x1D82628A4);
}

double faiss::SimulatedAnnealingOptimizer::run_optimization(faiss::SimulatedAnnealingOptimizer *this, int *a2)
{
  int v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  std::vector<int>::pointer begin;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  std::vector<int>::pointer v13;
  int v14;
  double v15;
  FILE *v16;
  float v17;
  double v18;
  const char *v19;
  int *v20;
  std::vector<int> v22;

  if (*((int *)this + 7) < 1)
    return 1.0e30;
  v4 = 0;
  v5 = 1.0e30;
  do
  {
    std::vector<int>::vector(&v22, *((int *)this + 14));
    LODWORD(v6) = *((_DWORD *)this + 14);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      begin = v22.__begin_;
      do
      {
        begin[v7] = v7;
        ++v7;
      }
      while (v7 < *((int *)this + 14));
      LODWORD(v6) = *((_DWORD *)this + 14);
    }
    if (*((_BYTE *)this + 41))
      v9 = (int)v6 < 1;
    else
      v9 = 1;
    if (!v9)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = faiss::RandomGenerator::rand_int(*((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)this+ 9), (int)v6 + v10);
        v13 = v22.__begin_;
        v14 = v22.__begin_[v11];
        v22.__begin_[v11] = v22.__begin_[(int)v11 + v12];
        v13[(int)v11++ + v12] = v14;
        v6 = *((int *)this + 14);
        --v10;
      }
      while (v11 < v6);
    }
    v15 = faiss::SimulatedAnnealingOptimizer::optimize(this, v22.__begin_);
    v16 = (FILE *)*((_QWORD *)this + 8);
    if (v16)
      fputc(10, v16);
    v17 = v15;
    v18 = v17;
    if (*((int *)this + 9) >= 2)
    {
      if (v5 <= v18)
        v19 = "";
      else
        v19 = "keep";
      printf("    optimization run %d: cost=%g %s\n", v4, v17, v19);
    }
    v20 = v22.__begin_;
    if (v5 > v18)
    {
      memcpy(a2, v22.__begin_, 4 * *((int *)this + 14));
      v5 = v18;
    }
    if (v20)
    {
      v22.__end_ = v20;
      operator delete(v20);
    }
    ++v4;
  }
  while (v4 < *((_DWORD *)this + 7));
  return v5;
}

void sub_1D48D79AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double faiss::SimulatedAnnealingOptimizer::optimize(faiss::SimulatedAnnealingOptimizer *this, int *a2)
{
  double v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  double v9;
  FILE **v10;
  double v11;
  int v12;
  uint64_t v13;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  int v18;
  int v19;
  BOOL v20;
  FILE *v21;

  v4 = (***((double (****)(_QWORD))this + 6))(*((_QWORD *)this + 6));
  *((double *)this + 10) = v4;
  v5 = -1;
  do
    ++v5;
  while (*((_DWORD *)this + 14) > 1 << v5);
  if (*((int *)this + 6) >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *((double *)this + 1);
    v10 = (FILE **)MEMORY[0x1E0C80C20];
    do
    {
      v11 = *((double *)this + 2);
      v12 = *((unsigned __int8 *)this + 40);
      v13 = faiss::RandomGenerator::rand_int(*((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)this+ 9), *((_DWORD *)this + 14));
      v14 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)*((_QWORD *)this + 9);
      if (v12)
      {
        v15 = (1 << faiss::RandomGenerator::rand_int(v14, v5)) ^ v13;
      }
      else
      {
        v16 = faiss::RandomGenerator::rand_int(v14, *((_DWORD *)this + 14) - 1);
        if (v16 == (_DWORD)v13)
          v15 = v16 + 1;
        else
          v15 = v16;
      }
      v9 = v9 * v11;
      v17 = (*(double (**)(_QWORD, int *, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 8))(*((_QWORD *)this + 6), a2, v13, v15);
      if (v17 < 0.0
        || v9 > faiss::RandomGenerator::rand_float(*((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)this
                                                   + 9)))
      {
        v18 = a2[(int)v13];
        a2[(int)v13] = a2[(int)v15];
        a2[(int)v15] = v18;
        v4 = v4 + v17;
        ++v8;
        if (v17 >= 0.0)
          ++v7;
      }
      v19 = *((_DWORD *)this + 9);
      if (v19 > 2 || (10000 * (v6 / 0x2710u) == v6 ? (v20 = v19 == 2) : (v20 = 0), v20))
      {
        printf("      iteration %d cost %g temp %g n_swap %d (%d hot)     \r", v6, v4, v9, v8, v7);
        fflush(*v10);
      }
      v21 = (FILE *)*((_QWORD *)this + 8);
      if (v21)
        fprintf(v21, "%d %g %g %d %d\n", v6, v4, v9, v8, v7);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 6));
  }
  if (*((int *)this + 9) > 1)
    putchar(10);
  return v4;
}

long double faiss::ReproduceDistancesObjective::dis_weight(faiss::ReproduceDistancesObjective *this, double a2)
{
  return exp(-(*((double *)this + 2) * a2));
}

double faiss::ReproduceDistancesObjective::get_source_dis(faiss::ReproduceDistancesObjective *this, int a2, int a3)
{
  return *(double *)(*((_QWORD *)this + 3) + 8 * (a3 + *((_DWORD *)this + 2) * a2));
}

double faiss::ReproduceDistancesObjective::compute_cost(faiss::ReproduceDistancesObjective *this, const int *a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double *v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  const int *v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v2 = *((unsigned int *)this + 2);
  if ((int)v2 < 1)
    return 0.0;
  v3 = 0;
  v4 = (double *)*((_QWORD *)this + 6);
  v5 = (double *)*((_QWORD *)this + 7);
  v6 = 8 * v2;
  result = 0.0;
  v8 = *((_QWORD *)this + 3);
  do
  {
    v9 = v2;
    v10 = a2;
    v11 = v5;
    v12 = v4;
    do
    {
      v13 = *v12++;
      v14 = v13;
      v15 = *v11++;
      v16 = v15;
      LODWORD(v15) = *v10++;
      v17 = *(double *)(v8 + 8 * (a2[v3] * (int)v2 + LODWORD(v15)));
      result = result + v16 * ((v14 - v17) * (v14 - v17));
      --v9;
    }
    while (v9);
    ++v3;
    v4 = (double *)((char *)v4 + v6);
    v5 = (double *)((char *)v5 + v6);
  }
  while (v3 != v2);
  return result;
}

double faiss::ReproduceDistancesObjective::cost_update(faiss::ReproduceDistancesObjective *this, const int *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;

  v4 = *((unsigned int *)this + 2);
  if ((int)v4 < 1)
    return 0.0;
  v5 = 0;
  v6 = a3;
  v7 = (int)a3;
  v8 = 8 * v4 * (unint64_t)a4;
  v9 = 8 * v4 * (unint64_t)a3;
  result = 0.0;
  do
  {
    if (v5 == v6)
    {
      v11 = 0;
      v12 = *((_QWORD *)this + 3);
      do
      {
        v13 = *(double *)(*((_QWORD *)this + 6) + v9 + 8 * v11);
        v14 = v13 - *(double *)(v12 + 8 * (a2[v6] * (int)v4 + a2[v11]));
        v15 = v14 * v14;
        if (a4 == v11)
          v16 = v6;
        else
          v16 = v11;
        if (v6 == v11)
          v16 = a4;
        v17 = *(double *)(v12 + 8 * (a2[a4] * (int)v4 + a2[v16]));
        result = result
               - *(double *)(*((_QWORD *)this + 7) + v9 + 8 * v11) * v15
               + *(double *)(*((_QWORD *)this + 7) + v9 + 8 * v11) * ((v13 - v17) * (v13 - v17));
        ++v11;
      }
      while (v4 != v11);
    }
    else
    {
      v18 = *((_QWORD *)this + 6);
      if (v5 == a4)
      {
        v19 = 0;
        v20 = *((_QWORD *)this + 3);
        v21 = v18 + v8;
        do
        {
          v22 = *(double *)(v21 + 8 * v19);
          v23 = v22 - *(double *)(v20 + 8 * (a2[a4] * (int)v4 + a2[v19]));
          v24 = v23 * v23;
          if (a4 == v19)
            v25 = v6;
          else
            v25 = v19;
          if (v6 == v19)
            v25 = a4;
          v26 = *(double *)(v20 + 8 * (a2[v7] * (int)v4 + a2[v25]));
          result = result
                 - *(double *)(*((_QWORD *)this + 7) + v8 + 8 * v19) * v24
                 + *(double *)(*((_QWORD *)this + 7) + v8 + 8 * v19) * ((v22 - v26) * (v22 - v26));
          ++v19;
        }
        while (v4 != v19);
      }
      else
      {
        v27 = v5 * v4 + v7;
        v28 = *(double *)(v18 + 8 * v27);
        v29 = *((_QWORD *)this + 7);
        v30 = *(double *)(v29 + 8 * v27);
        LODWORD(v27) = a2[v5] * v4;
        v31 = *((_QWORD *)this + 3);
        v32 = *(double *)(v31 + 8 * ((int)v27 + a2[v7]));
        v33 = *(double *)(v31 + 8 * (a2[a4] + (int)v27));
        v34 = v5 * v4 + (int)a4;
        result = result
               - v30 * ((v28 - v32) * (v28 - v32))
               + v30 * ((v28 - v33) * (v28 - v33))
               - *(double *)(v29 + 8 * v34) * ((*(double *)(v18 + 8 * v34) - v33) * (*(double *)(v18 + 8 * v34) - v33))
               + *(double *)(v29 + 8 * v34) * ((*(double *)(v18 + 8 * v34) - v32) * (*(double *)(v18 + 8 * v34) - v32));
      }
    }
    ++v5;
  }
  while (v5 != v4);
  return result;
}

faiss::ReproduceDistancesObjective *faiss::ReproduceDistancesObjective::ReproduceDistancesObjective(faiss::ReproduceDistancesObjective *this, int a2, double *a3, const double *a4, double a5)
{
  *((double *)this + 2) = a5;
  *(_QWORD *)this = &off_1E9806B68;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 2) = a2;
  faiss::ReproduceDistancesObjective::set_affine_target_dis(this, a3);
  return this;
}

void sub_1D48D7EA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 64) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void faiss::ReproduceDistancesObjective::set_affine_target_dis(faiss::ReproduceDistancesObjective *this, double *a2)
{
  double *v2;
  int v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double *v22;
  long double *v23;
  double v24;
  double v25;

  v2 = a2;
  v4 = *((_DWORD *)this + 2);
  LODWORD(v5) = v4 * v4;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  if (v4)
  {
    v9 = a2;
    v10 = (v4 * v4);
    do
    {
      v11 = *v9++;
      v8 = v8 + v11;
      v7 = v7 + v11 * v11;
      --v10;
    }
    while (v10);
  }
  v12 = (double)v5;
  v13 = v8 / (double)v5;
  v14 = sqrt(v7 / (double)v5 - v13 * v13);
  v15 = 0.0;
  if (v4)
  {
    v16 = (double *)*((_QWORD *)this + 6);
    v17 = (v4 * v4);
    v6 = 0.0;
    do
    {
      v18 = *v16++;
      v15 = v15 + v18;
      v6 = v6 + v18 * v18;
      --v17;
    }
    while (v17);
  }
  v19 = v15 / v12;
  v20 = sqrt(v6 / v12 - v19 * v19);
  printf("map mean %g std %g -> mean %g std %g\n", v13, v14, v15 / v12, v20);
  std::vector<double>::resize((uint64_t)this + 24, (v4 * v4));
  std::vector<double>::resize((uint64_t)this + 56, (v4 * v4));
  if (v4)
  {
    v21 = (double *)*((_QWORD *)this + 3);
    v22 = (double *)*((_QWORD *)this + 6);
    v23 = (long double *)*((_QWORD *)this + 7);
    if (v5 <= 1)
      v5 = 1;
    else
      v5 = v5;
    do
    {
      v24 = *v2++;
      *v21++ = v19 + (v24 - v13) / v14 * v20;
      v25 = *v22++;
      *v23++ = exp(-(*((double *)this + 2) * v25));
      --v5;
    }
    while (v5);
  }
}

double faiss::ReproduceDistancesObjective::compute_mean_stdev(faiss::ReproduceDistancesObjective *this, const double *a2, double *a3, double *a4, double *a5)
{
  double v5;
  const double *v6;
  double v7;
  double v8;
  double result;

  if (a2)
  {
    v5 = 0.0;
    v6 = a2;
    v7 = 0.0;
    do
    {
      v8 = *(double *)this;
      this = (faiss::ReproduceDistancesObjective *)((char *)this + 8);
      v5 = v5 + v8;
      v7 = v7 + v8 * v8;
      v6 = (const double *)((char *)v6 - 1);
    }
    while (v6);
  }
  else
  {
    v7 = 0.0;
    v5 = 0.0;
  }
  result = v5 / (double)(unint64_t)a2;
  *a3 = result;
  *a4 = sqrt(v7 / (double)(unint64_t)a2 - result * result);
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

double faiss::PolysemousTraining::PolysemousTraining(faiss::PolysemousTraining *this)
{
  double result;

  *(_OWORD *)this = xmmword_1D493C1B0;
  *((_OWORD *)this + 1) = xmmword_1D493C1C0;
  *((_WORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)&result = 1;
  *(_QWORD *)((char *)this + 36) = 1;
  *((_QWORD *)this + 6) = 0x3FE62E42FEFA39EFLL;
  *((_QWORD *)this + 7) = 0x500000000;
  *((_QWORD *)this + 8) = 0;
  return result;
}

{
  double result;

  *(_OWORD *)this = xmmword_1D493C1B0;
  *((_OWORD *)this + 1) = xmmword_1D493C1C0;
  *((_WORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)&result = 1;
  *(_QWORD *)((char *)this + 36) = 1;
  *((_QWORD *)this + 6) = 0x3FE62E42FEFA39EFLL;
  *((_QWORD *)this + 7) = 0x500000000;
  *((_QWORD *)this + 8) = 0;
  return result;
}

void faiss::PolysemousTraining::optimize_reproduce_distances(faiss::PolysemousTraining *this, faiss::ProductQuantizer *a2)
{
  faiss::ProductQuantizer *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double *v15;
  double *v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  double *v23;
  uint64_t v24;
  double v25;
  double *v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  double *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  double *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t i;
  std::string::size_type v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  std::string *v63;
  size_t v64;
  void *v65;
  int v66;
  std::string *v67;
  size_t v68;
  void *v69;
  unint64_t v70;
  int v71;
  std::string *v72;
  size_t size;
  void *exception;
  const char **v75;
  faiss::ProductQuantizer *v76;
  std::vector<int>::size_type __n;
  faiss::PolysemousTraining *v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::string v86;
  _QWORD v87[8];
  FILE *v88;
  uint64_t v89;
  double v90;
  uint64_t (**v91)(faiss::_anonymous_namespace_::ReproduceWithHammingObjective *__hidden, const int *);
  int v92;
  int v93;
  double v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  std::vector<int> v98;
  void *v99;
  double *v100;
  double *v101;
  std::string __str[10];
  uint64_t v103;

  v2 = a2;
  v103 = *MEMORY[0x1E0C80C00];
  v79 = *((_QWORD *)a2 + 3);
  v4 = *((_QWORD *)a2 + 5);
  v80 = *((_DWORD *)a2 + 4);
  v5 = faiss::PolysemousTraining::memory_usage_per_thread(this, a2);
  v6 = *((_QWORD *)this + 7);
  v78 = this;
  if (v5 >= v6)
  {
    v70 = v5;
    memset(__str, 0, 24);
    v71 = snprintf(0, 0, "Error: '%s' failed: Polysemous training will use %zd bytes per thread, while the max is set to %zd", "mem1 < max_memory", v5, v6);
    std::string::resize(__str, v71 + 1, 0);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v72 = __str;
    else
      v72 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      size = __str[0].__r_.__value_.__l.__size_;
    snprintf((char *)v72, size, "Error: '%s' failed: Polysemous training will use %zd bytes per thread, while the max is set to %zd", "mem1 < max_memory", v70, *((_QWORD *)this + 7));
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, __str, "void faiss::PolysemousTraining::optimize_reproduce_distances(ProductQuantizer &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 789);
  }
  if (*((_QWORD *)v2 + 1))
  {
    v7 = 0;
    v8 = v4;
    __n = (int)v4;
    LODWORD(v9) = 1 << v80 << v80;
    v10 = (double)(int)v9;
    v81 = v4;
    v82 = v9;
    if (v9 <= 1)
      v9 = 1;
    else
      v9 = v9;
    v75 = (const char **)((char *)this + 64);
    v84 = (v4 * v79);
    v85 = v9;
    v76 = v2;
    do
    {
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v83 = v7;
      v11 = *((_QWORD *)v2 + 13) + 4 * *((_QWORD *)v2 + 5) * v7 * *((_QWORD *)v2 + 3);
      if ((int)v4 >= 1)
      {
        v12 = 0;
        do
        {
          v13 = 0;
          do
          {
            v14 = faiss::fvec_L2sqr((faiss *)(v11 + 4 * v12 * (int)v79), (const float *)(v11 + 4 * v13 * (int)v79), (int)v79);
            v15 = v100;
            if (v100 >= v101)
            {
              v17 = (double *)v99;
              v18 = ((char *)v100 - (_BYTE *)v99) >> 3;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 61)
                std::vector<long long>::__throw_length_error[abi:ne180100]();
              v20 = (char *)v101 - (_BYTE *)v99;
              if (((char *)v101 - (_BYTE *)v99) >> 2 > v19)
                v19 = v20 >> 2;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)&v101, v21);
                v17 = (double *)v99;
                v15 = v100;
              }
              else
              {
                v22 = 0;
              }
              v23 = (double *)&v22[8 * v18];
              *v23 = v14;
              v16 = v23 + 1;
              while (v15 != v17)
              {
                v24 = *((_QWORD *)v15-- - 1);
                *((_QWORD *)v23-- - 1) = v24;
              }
              v99 = v23;
              v100 = v16;
              v101 = (double *)&v22[8 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *v100 = v14;
              v16 = v15 + 1;
            }
            v100 = v16;
            ++v13;
          }
          while (v13 != v8);
          ++v12;
        }
        while (v12 != v8);
      }
      std::vector<int>::vector(&v98, __n);
      v25 = *((double *)v78 + 6);
      v91 = &off_1E9805D38;
      v94 = v25;
      v95 = 0u;
      v96 = 0u;
      v97 = 0u;
      v93 = v80;
      v92 = 1 << v80;
      v26 = (double *)v99;
      if (v82 != ((char *)v100 - (_BYTE *)v99) >> 3)
      {
        memset(__str, 0, 24);
        v62 = snprintf(0, 0, "Error: '%s' failed", "dis_table.size() == n * n");
        std::string::resize(__str, v62 + 1, 0);
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = __str;
        else
          v63 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
        else
          v64 = __str[0].__r_.__value_.__l.__size_;
        snprintf((char *)v63, v64, "Error: '%s' failed", "dis_table.size() == n * n");
        v65 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v65, __str, "faiss::(anonymous namespace)::ReproduceWithHammingObjective::ReproduceWithHammingObjective(int, const std::vector<double> &, double)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 276);
      }
      v27 = 0.0;
      v28 = v85;
      v29 = 0.0;
      do
      {
        v30 = *v26++;
        v27 = v27 + v30;
        v29 = v29 + v30 * v30;
        --v28;
      }
      while (v28);
      std::vector<double>::resize((uint64_t)&v95, v82);
      v31 = 0;
      v32 = v27 / v10;
      v33 = sqrt(v29 / v10 - v32 * v32);
      v34 = (double *)v97;
      do
      {
        v35 = (double)(v93 / 2) + (*((double *)v99 + v31) - v32) / v33 * sqrt((double)(v93 / 4));
        *(double *)(v95 + 8 * v31) = v35;
        v36 = exp(-(v94 * v35));
        v37 = v36;
        if ((unint64_t)v34 >= *((_QWORD *)&v97 + 1))
        {
          v39 = (double *)*((_QWORD *)&v96 + 1);
          v40 = ((uint64_t)v34 - *((_QWORD *)&v96 + 1)) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v42 = *((_QWORD *)&v97 + 1) - *((_QWORD *)&v96 + 1);
          if ((uint64_t)(*((_QWORD *)&v97 + 1) - *((_QWORD *)&v96 + 1)) >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)&v97 + 8, v43);
            v39 = (double *)*((_QWORD *)&v96 + 1);
            v34 = (double *)v97;
          }
          else
          {
            v44 = 0;
          }
          v45 = (double *)&v44[8 * v40];
          *v45 = v37;
          v38 = v45 + 1;
          while (v34 != v39)
          {
            v46 = *((_QWORD *)v34-- - 1);
            *((_QWORD *)v45-- - 1) = v46;
          }
          *((_QWORD *)&v96 + 1) = v45;
          *(_QWORD *)&v97 = v38;
          *((_QWORD *)&v97 + 1) = &v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v34 = v36;
          v38 = v34 + 1;
        }
        *(_QWORD *)&v97 = v38;
        ++v31;
        v34 = v38;
      }
      while (v31 != v85);
      faiss::SimulatedAnnealingOptimizer::SimulatedAnnealingOptimizer((faiss::SimulatedAnnealingOptimizer *)v87, (faiss::PermutationObjective *)&v91, v78);
      if (*((char *)v78 + 87) < 0)
      {
        if (*((_QWORD *)v78 + 9))
        {
          snprintf((char *)__str, 0x100uLL, *v75, v83);
LABEL_54:
          printf("opening log file %s\n", (const char *)__str);
          v88 = fopen((const char *)__str, "w");
          if (!v88)
          {
            memset(&v86, 0, sizeof(v86));
            v66 = snprintf(0, 0, "Error: '%s' failed: could not open logfile", "optim.logfile");
            std::string::resize(&v86, v66 + 1, 0);
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v67 = &v86;
            else
              v67 = (std::string *)v86.__r_.__value_.__r.__words[0];
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
            else
              v68 = v86.__r_.__value_.__l.__size_;
            snprintf((char *)v67, v68, "Error: '%s' failed: could not open logfile", "optim.logfile");
            v69 = __cxa_allocate_exception(0x20uLL);
            faiss::FaissException::FaissException(v69, &v86, "void faiss::PolysemousTraining::optimize_reproduce_distances(ProductQuantizer &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 823);
          }
        }
      }
      else if (*((_BYTE *)v78 + 87))
      {
        snprintf((char *)__str, 0x100uLL, (const char *)v75, v83);
        goto LABEL_54;
      }
      v47 = faiss::SimulatedAnnealingOptimizer::run_optimization((faiss::SimulatedAnnealingOptimizer *)v87, v98.__begin_);
      if (*((int *)v78 + 7) >= 1)
        printf("SimulatedAnnealingOptimizer for m=%d: %g -> %g\n", v83, v90, v47);
      if (*((char *)v78 + 87) < 0)
        v48 = *((_QWORD *)v78 + 9);
      else
        v48 = *((unsigned __int8 *)v78 + 87);
      if (v48)
        fclose(v88);
      memset(__str, 0, 24);
      if ((int)v84 >= 1)
      {
        v49 = 0;
        for (i = 0; i != v84; ++i)
        {
          if ((unint64_t)v49 >= __str[0].__r_.__value_.__r.__words[2])
          {
            v52 = (_DWORD *)__str[0].__r_.__value_.__r.__words[0];
            v53 = (uint64_t)((uint64_t)v49 - __str[0].__r_.__value_.__r.__words[0]) >> 2;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            v55 = __str[0].__r_.__value_.__r.__words[2] - __str[0].__r_.__value_.__r.__words[0];
            if ((uint64_t)(__str[0].__r_.__value_.__r.__words[2] - __str[0].__r_.__value_.__r.__words[0]) >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__str[0].__r_.__value_.__r.__words[2], v56);
              v49 = (_DWORD *)__str[0].__r_.__value_.__l.__size_;
              v52 = (_DWORD *)__str[0].__r_.__value_.__r.__words[0];
            }
            else
            {
              v57 = 0;
            }
            v58 = &v57[4 * v53];
            *(_DWORD *)v58 = *(_DWORD *)(v11 + 4 * i);
            v51 = (std::string::size_type)(v58 + 4);
            while (v49 != v52)
            {
              v59 = *--v49;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }
            __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
            __str[0].__r_.__value_.__l.__size_ = v51;
            __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v57[4 * v56];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v49 = *(_DWORD *)(v11 + 4 * i);
            v51 = (std::string::size_type)(v49 + 1);
          }
          __str[0].__r_.__value_.__l.__size_ = v51;
          v49 = (_DWORD *)v51;
        }
      }
      if (v81 >= 1)
      {
        v60 = 0;
        v61 = 0;
        do
        {
          memcpy((void *)(v11 + 4 * v98.__begin_[v60] * (int)v79), (const void *)(__str[0].__r_.__value_.__r.__words[0] + v61), 4 * (int)v79);
          v61 += 4 * (int)v79;
          ++v60;
        }
        while (v8 != v60);
      }
      if (__str[0].__r_.__value_.__r.__words[0])
      {
        __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
        operator delete(__str[0].__r_.__value_.__l.__data_);
      }
      v87[0] = &off_1E9806B98;
      v2 = v76;
      LODWORD(v4) = v81;
      if (v89)
        MEMORY[0x1D82628A4](v89, 0x1000C407BAC9B3ELL);
      if (v98.__begin_)
      {
        v98.__end_ = v98.__begin_;
        operator delete(v98.__begin_);
      }
      if (v99)
      {
        v100 = (double *)v99;
        operator delete(v99);
      }
      v7 = v83 + 1;
    }
    while (*((_QWORD *)v76 + 1) > (unint64_t)(v83 + 1));
  }
}

void sub_1D48D89B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  void *v66;

  __cxa_free_exception(v66);
  if (a66 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::PolysemousTraining::memory_usage_per_thread(faiss::PolysemousTraining *this, const faiss::ProductQuantizer *a2)
{
  uint64_t result;
  uint64_t v3;
  void *exception;
  _QWORD v5[3];

  result = *((unsigned int *)this + 9);
  if ((_DWORD)result)
  {
    v3 = *((_QWORD *)a2 + 5);
    if ((_DWORD)result == 2)
    {
      return 4 * v3 * v3 * v3;
    }
    else
    {
      if ((_DWORD)result != 1)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v5, "Invalid optmization type");
        faiss::FaissException::FaissException(exception, v5, "size_t faiss::PolysemousTraining::memory_usage_per_thread(const ProductQuantizer &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 985);
      }
      return 24 * v3 * v3;
    }
  }
  return result;
}

void sub_1D48D8BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::`anonymous namespace'::ReproduceWithHammingObjective::~ReproduceWithHammingObjective(faiss::_anonymous_namespace_::ReproduceWithHammingObjective *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E9805D38;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  JUMPOUT(0x1D82628A4);
}

void faiss::PolysemousTraining::optimize_ranking(faiss::PolysemousTraining *this, faiss::ProductQuantizer *a2, unint64_t a3, const float *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  std::vector<int>::pointer begin;
  faiss *v16;
  faiss *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::vector<int>::pointer v21;
  int *v22;
  double v23;
  faiss *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  std::string::size_type v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  std::string *v43;
  size_t v44;
  void *v45;
  int v46;
  std::string *v47;
  size_t size;
  void *exception;
  uint64_t v50;
  const char **v51;
  const float *v52;
  int v53;
  uint64_t v55;
  faiss::PermutationObjective *v56;
  std::string v57;
  _QWORD v58[8];
  FILE *v59;
  uint64_t v60;
  double v61;
  void *__dst;
  void *v63;
  uint64_t v64;
  std::vector<int> v65;
  unsigned __int8 *v66[3];
  std::string __p[10];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v53 = *((_DWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 3);
  std::vector<unsigned char>::vector(v66, *((_QWORD *)a2 + 4) * a3);
  faiss::ProductQuantizer::compute_codes(a2, a4, v66[0], a3);
  if (*((_QWORD *)a2 + 2) != 8)
  {
    memset(__p, 0, 24);
    v46 = snprintf(0, 0, "Error: '%s' failed", "pq.nbits == 8");
    std::string::resize(__p, v46 + 1, 0);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = __p;
    else
      v47 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    else
      size = __p[0].__r_.__value_.__l.__size_;
    snprintf((char *)v47, size, "Error: '%s' failed", "pq.nbits == 8");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, __p, "void faiss::PolysemousTraining::optimize_ranking(ProductQuantizer &, size_t, const float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 859);
  }
  if (!a3)
    faiss::ProductQuantizer::compute_sdc_table(a2);
  v52 = a4;
  if (*((_QWORD *)a2 + 1))
  {
    v8 = 0;
    v55 = a3 - (a3 >> 2);
    v51 = (const char **)((char *)this + 64);
    v9 = 4 * (int)v7;
    do
    {
      memset(&v65, 0, sizeof(v65));
      __dst = 0;
      v63 = 0;
      v64 = 0;
      if (a3)
      {
        std::vector<float>::vector(__p, (int)v7 * a3);
        v10 = 0;
        v11 = 0;
        do
        {
          memcpy((void *)(__p[0].__r_.__value_.__r.__words[0] + v10), &v52[v8 * (int)v7 + *(_QWORD *)a2 * v11++], 4 * (int)v7);
          v10 += v9;
        }
        while (a3 != v11);
        std::vector<unsigned int>::resize(&v65, a3);
        v12 = *((_QWORD *)a2 + 4);
        v13 = v66[0];
        v14 = a3;
        begin = v65.__begin_;
        do
        {
          *begin++ = v13[v8];
          v13 += v12;
          --v14;
        }
        while (v14);
        v16 = (faiss *)__p[0].__r_.__value_.__r.__words[0];
        std::vector<float>::resize((uint64_t)&__dst, v55 * (a3 >> 2));
        faiss::pairwise_L2sqr((int)v7, a3 >> 2, v16, v55, (float *)v16 + (int)v7 * (a3 >> 2), (float *)__dst, (float *)0xFFFFFFFFFFFFFFFFLL, -1, -1, v50);
        v17 = (faiss *)__p[0].__r_.__value_.__r.__words[0];
        if (__p[0].__r_.__value_.__r.__words[0])
        {
          __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        v19 = a3 >> 2;
        v18 = a3 - (a3 >> 2);
      }
      else
      {
        v19 = *((_QWORD *)a2 + 5);
        std::vector<unsigned int>::resize(&v65, 2 * v19);
        if (v19)
        {
          v20 = 0;
          v21 = v65.__begin_;
          v22 = &v65.__begin_[v19];
          do
          {
            v22[v20] = v20;
            v21[v20] = v20;
            ++v20;
          }
          while (v19 != v20);
        }
        std::vector<float>::resize((uint64_t)&__dst, v19 * v19);
        v17 = (faiss *)memcpy(__dst, (const void *)(*((_QWORD *)a2 + 16) + 4 * v19 * v19 * v8), 4 * v19 * v19);
        v18 = v19;
      }
      v23 = faiss::getmillisecs(v17);
      v56 = (faiss::PermutationObjective *)operator new();
      v24 = faiss::RankingScore2::RankingScore2(v56, v53, v19, v18, (const unsigned int *)v65.__begin_, (const unsigned int *)&v65.__begin_[v19], (const float *)__dst);
      if (*((int *)this + 7) >= 1)
      {
        v25 = faiss::getmillisecs(v24);
        printf("   m=%d, nq=%zd, nb=%zd, intialize RankingScore in %.3f ms\n", v8, v19, v18, v25 - v23);
      }
      faiss::SimulatedAnnealingOptimizer::SimulatedAnnealingOptimizer((faiss::SimulatedAnnealingOptimizer *)v58, v56, this);
      if (*((char *)this + 87) < 0)
      {
        if (!*((_QWORD *)this + 9))
          goto LABEL_26;
        snprintf((char *)__p, 0x100uLL, *v51, v8);
      }
      else
      {
        if (!*((_BYTE *)this + 87))
          goto LABEL_26;
        snprintf((char *)__p, 0x100uLL, (const char *)v51, v8);
      }
      printf("opening log file %s\n", (const char *)__p);
      v59 = fopen((const char *)__p, "w");
      if (!v59)
      {
        memset(&v57, 0, sizeof(v57));
        v42 = snprintf(0, 0, "Error: '%s' failed: could not open logfile %s", "optim.logfile", (const char *)__p);
        std::string::resize(&v57, v42 + 1, 0);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v57;
        else
          v43 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          v44 = v57.__r_.__value_.__l.__size_;
        snprintf((char *)v43, v44, "Error: '%s' failed: could not open logfile %s", "optim.logfile", (const char *)__p);
        v45 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v45, &v57, "void faiss::PolysemousTraining::optimize_ranking(ProductQuantizer &, size_t, const float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 931);
      }
LABEL_26:
      std::vector<int>::vector((std::vector<int> *)__p, *((_QWORD *)a2 + 5));
      v26 = faiss::SimulatedAnnealingOptimizer::run_optimization((faiss::SimulatedAnnealingOptimizer *)v58, (int *)__p[0].__r_.__value_.__l.__data_);
      printf("SimulatedAnnealingOptimizer for m=%d: %g -> %g\n", v8, v61, v26);
      if (*((char *)this + 87) < 0)
      {
        if (!*((_QWORD *)this + 9))
          goto LABEL_29;
LABEL_28:
        fclose(v59);
        goto LABEL_29;
      }
      if (*((_BYTE *)this + 87))
        goto LABEL_28;
LABEL_29:
      v27 = *((_QWORD *)a2 + 5);
      v28 = *((_QWORD *)a2 + 13) + 4 * v27 * v8 * *((_QWORD *)a2 + 3);
      memset(&v57, 0, sizeof(v57));
      if (v27 * (int)v7)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          if ((unint64_t)v29 >= v57.__r_.__value_.__r.__words[2])
          {
            v32 = (_DWORD *)v57.__r_.__value_.__r.__words[0];
            v33 = (uint64_t)((uint64_t)v29 - v57.__r_.__value_.__r.__words[0]) >> 2;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            v35 = v57.__r_.__value_.__r.__words[2] - v57.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v57.__r_.__value_.__r.__words[2] - v57.__r_.__value_.__r.__words[0]) >> 1 > v34)
              v34 = v35 >> 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v36 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v57.__r_.__value_.__r.__words[2], v36);
              v29 = (_DWORD *)v57.__r_.__value_.__l.__size_;
              v32 = (_DWORD *)v57.__r_.__value_.__r.__words[0];
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[4 * v33];
            *(_DWORD *)v38 = *(_DWORD *)(v28 + 4 * v30);
            v31 = (std::string::size_type)(v38 + 4);
            while (v29 != v32)
            {
              v39 = *--v29;
              *((_DWORD *)v38 - 1) = v39;
              v38 -= 4;
            }
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
            v57.__r_.__value_.__l.__size_ = v31;
            v57.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37[4 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *v29 = *(_DWORD *)(v28 + 4 * v30);
            v31 = (std::string::size_type)(v29 + 1);
          }
          v57.__r_.__value_.__l.__size_ = v31;
          ++v30;
          v27 = *((_QWORD *)a2 + 5);
          v29 = (_DWORD *)v31;
        }
        while (v27 * (int)v7 > v30);
      }
      if (v27)
      {
        v40 = 0;
        v41 = 0;
        do
        {
          memcpy((void *)(v28 + 4 * *(_DWORD *)(__p[0].__r_.__value_.__r.__words[0] + 4 * v41++) * (int)v7), (const void *)(v57.__r_.__value_.__r.__words[0] + v40), 4 * (int)v7);
          v40 += v9;
        }
        while (*((_QWORD *)a2 + 5) > v41);
      }
      if (v57.__r_.__value_.__r.__words[0])
      {
        v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      v58[0] = &off_1E9806B98;
      if (v60)
        MEMORY[0x1D82628A4](v60, 0x1000C407BAC9B3ELL);
      (*(void (**)(faiss::PermutationObjective *))(*(_QWORD *)v56 + 24))(v56);
      if (__dst)
      {
        v63 = __dst;
        operator delete(__dst);
      }
      if (v65.__begin_)
      {
        v65.__end_ = v65.__begin_;
        operator delete(v65.__begin_);
      }
      ++v8;
    }
    while (*((_QWORD *)a2 + 1) > v8);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
}

void sub_1D48D92F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;

  __cxa_free_exception(v55);
  if (a55 < 0)
    operator delete(__p);
  if (a47)
    operator delete(a47);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

void faiss::PolysemousTraining::optimize_pq_for_hamming(faiss::PolysemousTraining *this, faiss::ProductQuantizer *a2, unint64_t a3, const float *a4)
{
  int v5;

  v5 = *((_DWORD *)this + 9);
  if (v5)
  {
    if (v5 == 1)
      faiss::PolysemousTraining::optimize_reproduce_distances(this, a2);
    else
      faiss::PolysemousTraining::optimize_ranking(this, a2, a3, a4);
  }
  faiss::ProductQuantizer::compute_sdc_table(a2);
}

void faiss::ReproduceDistancesObjective::~ReproduceDistancesObjective(faiss::ReproduceDistancesObjective *this)
{
  faiss::ReproduceDistancesObjective::~ReproduceDistancesObjective(this);
  JUMPOUT(0x1D82628A4);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E9806B68;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

double faiss::`anonymous namespace'::ReproduceWithHammingObjective::compute_cost(faiss::_anonymous_namespace_::ReproduceWithHammingObjective *this, const int *a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double *v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  const int *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint8x8_t v16;

  v2 = *((unsigned int *)this + 2);
  if ((int)v2 < 1)
    return 0.0;
  v3 = 0;
  v4 = (double *)*((_QWORD *)this + 3);
  v5 = (double *)*((_QWORD *)this + 6);
  v6 = 8 * v2;
  result = 0.0;
  do
  {
    v8 = *((unsigned int *)this + 2);
    v9 = a2;
    v10 = v5;
    v11 = v4;
    do
    {
      v12 = *v11++;
      v13 = v12;
      v14 = *v10++;
      v15 = v14;
      LODWORD(v14) = *v9++;
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)(LODWORD(v14) ^ a2[v3]));
      v16.i16[0] = vaddlv_u8(v16);
      result = result + v15 * ((v13 - (double)v16.i32[0]) * (v13 - (double)v16.i32[0]));
      --v8;
    }
    while (v8);
    ++v3;
    v4 = (double *)((char *)v4 + v6);
    v5 = (double *)((char *)v5 + v6);
  }
  while (v3 != v2);
  return result;
}

double faiss::`anonymous namespace'::ReproduceWithHammingObjective::cost_update(faiss::_anonymous_namespace_::ReproduceWithHammingObjective *this, const int *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double result;
  uint64_t i;
  double v14;
  uint8x8_t v15;
  double v16;
  int v17;
  uint8x8_t v18;
  uint64_t j;
  double v20;
  uint8x8_t v21;
  double v22;
  int v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint8x8_t v30;
  double v31;
  uint8x8_t v32;
  double v33;
  uint64_t v34;

  v4 = *((unsigned int *)this + 2);
  if ((int)v4 < 1)
    return 0.0;
  v5 = 0;
  v6 = a4;
  v7 = a3;
  v8 = (int)a3;
  v9 = (int)a4;
  v10 = 8 * v4 * (unint64_t)a4;
  v11 = 8 * v4 * (unint64_t)a3;
  result = 0.0;
  do
  {
    if (v5 == v7)
    {
      for (i = 0; i != v4; ++i)
      {
        v14 = *(double *)(*((_QWORD *)this + 3) + v11 + 8 * i);
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[i] ^ a2[v7]));
        v15.i16[0] = vaddlv_u8(v15);
        v16 = (v14 - (double)v15.i32[0]) * (v14 - (double)v15.i32[0]);
        if (v6 == i)
          v17 = v7;
        else
          v17 = i;
        if (v7 == i)
          v17 = v6;
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[v17] ^ a2[v9]));
        v18.i16[0] = vaddlv_u8(v18);
        result = result
               - *(double *)(*((_QWORD *)this + 6) + v11 + 8 * i) * v16
               + *(double *)(*((_QWORD *)this + 6) + v11 + 8 * i)
               * ((v14 - (double)v18.i32[0])
                * (v14 - (double)v18.i32[0]));
      }
    }
    else if (v5 == v6)
    {
      for (j = 0; j != v4; ++j)
      {
        v20 = *(double *)(*((_QWORD *)this + 3) + v10 + 8 * j);
        v21 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[j] ^ a2[v6]));
        v21.i16[0] = vaddlv_u8(v21);
        v22 = (v20 - (double)v21.i32[0]) * (v20 - (double)v21.i32[0]);
        if (v6 == j)
          v23 = v7;
        else
          v23 = j;
        if (v7 == j)
          v23 = v6;
        v24 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[v23] ^ a2[v8]));
        v24.i16[0] = vaddlv_u8(v24);
        result = result
               - *(double *)(*((_QWORD *)this + 6) + v10 + 8 * j) * v22
               + *(double *)(*((_QWORD *)this + 6) + v10 + 8 * j)
               * ((v20 - (double)v24.i32[0])
                * (v20 - (double)v24.i32[0]));
      }
    }
    else
    {
      v25 = v5 * v4 + v8;
      v26 = *((_QWORD *)this + 3);
      v27 = *(double *)(v26 + 8 * v25);
      v28 = *((_QWORD *)this + 6);
      v29 = *(double *)(v28 + 8 * v25);
      LODWORD(v25) = a2[v5];
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)(int)(a2[v8] ^ v25));
      v30.i16[0] = vaddlv_u8(v30);
      v31 = (double)v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)(int)(a2[v9] ^ v25));
      v32.i16[0] = vaddlv_u8(v32);
      v33 = (double)v32.i32[0];
      v34 = v5 * v4 + v9;
      result = result
             - v29 * ((v27 - v31) * (v27 - v31))
             + v29 * ((v27 - v33) * (v27 - v33))
             - *(double *)(v28 + 8 * v34) * ((*(double *)(v26 + 8 * v34) - v33) * (*(double *)(v26 + 8 * v34) - v33))
             + *(double *)(v28 + 8 * v34) * ((*(double *)(v26 + 8 * v34) - v31) * (*(double *)(v26 + 8 * v34) - v31));
    }
    ++v5;
  }
  while (v5 != v4);
  return result;
}

faiss::RankingScore2 *faiss::RankingScore2::RankingScore2(faiss::RankingScore2 *this, int a2, int a3, int a4, const unsigned int *a5, const unsigned int *a6, const float *a7)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &unk_1E9805E68;
  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a3;
  *((_DWORD *)this + 12) = a4;
  *((_QWORD *)this + 7) = a5;
  *((_QWORD *)this + 8) = a6;
  *((_QWORD *)this + 9) = a7;
  *((_DWORD *)this + 2) = 1 << a2;
  *((_DWORD *)this + 3) = 1 << a2;
  std::vector<float>::resize((uint64_t)this + 16, 1 << a2 << a2 << a2);
  faiss::RankingScore2::init_n_gt(this);
  return this;
}

void sub_1D48D984C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = &unk_1E9805EC0;
  v3 = (void *)v1[2];
  if (v3)
  {
    v1[3] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void faiss::RankingScore2::init_n_gt(faiss::RankingScore2 *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  std::vector<int>::pointer begin;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD **v21;
  unint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  _QWORD v45[3];
  std::vector<int> v46;
  uint64_t v47;
  void **v48;

  LODWORD(v1) = *((_DWORD *)this + 11);
  if ((int)v1 >= 1)
  {
    v3 = 0;
    do
    {
      v5 = *((_QWORD *)this + 8);
      v4 = *((_QWORD *)this + 9);
      v6 = *((_DWORD *)this + 12);
      v7 = *(_DWORD *)(*((_QWORD *)this + 7) + 4 * v3);
      v8 = *((_DWORD *)this + 3);
      v9 = *((_QWORD *)this + 2);
      printf("init gt for q=%d/%d    \r", v3, v1);
      fflush((FILE *)*MEMORY[0x1E0C80C20]);
      std::vector<int>::vector(&v46, *((int *)this + 12));
      begin = v46.__begin_;
      std::vector<std::vector<int>>::vector(v45, *((int *)this + 3));
      v11 = *((_DWORD *)this + 12);
      if (v11 < 1)
      {
        v14 = v11;
      }
      else
      {
        v12 = 0;
        do
        {
          begin[v12] = v12;
          ++v12;
          v13 = *((_DWORD *)this + 12);
        }
        while (v12 < v13);
        v14 = v13;
        v11 = *((_DWORD *)this + 12);
      }
      v42 = v9;
      v43 = v8;
      v44 = v7;
      v15 = &begin[v14];
      v47 = v4 + 4 * v6 * (int)v3;
      v16 = 126 - 2 * __clz(v14);
      if (v11)
        v17 = v16;
      else
        v17 = 0;
      std::__introsort<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,false>((uint64_t)begin, v15, &v47, v17, 1);
      if (*((int *)this + 12) >= 1)
      {
        v18 = 0;
        do
        {
          v19 = v45[0] + 24 * *(unsigned int *)(v5 + 4 * begin[v18]);
          v21 = (_DWORD **)(v19 + 8);
          v20 = *(_DWORD **)(v19 + 8);
          v23 = (_QWORD *)(v19 + 16);
          v22 = *(_QWORD *)(v19 + 16);
          if ((unint64_t)v20 >= v22)
          {
            v25 = *(_DWORD **)v19;
            v26 = ((uint64_t)v20 - *(_QWORD *)v19) >> 2;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 1 > v27)
              v27 = v28 >> 1;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
              v29 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v23, v29);
              v20 = *v21;
              v25 = *(_DWORD **)v19;
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30[4 * v26];
            *(_DWORD *)v31 = v18;
            v24 = v31 + 4;
            while (v20 != v25)
            {
              v32 = *--v20;
              *((_DWORD *)v31 - 1) = v32;
              v31 -= 4;
            }
            *(_QWORD *)v19 = v31;
            *v21 = v24;
            *v23 = &v30[4 * v29];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *v20 = v18;
            v24 = v20 + 1;
          }
          *v21 = v24;
          ++v18;
        }
        while (v18 < *((int *)this + 12));
      }
      v33 = *((_DWORD *)this + 3);
      if (v33 >= 1)
      {
        v34 = 0;
        v35 = v42 + 4 * (v43 * v44 * v43);
        do
        {
          if (v33 <= 0)
          {
            v41 = v33;
          }
          else
          {
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v45[0] + 24 * v34);
            do
            {
              v39 = faiss::RankingScore2::accum_gt_weight_diff((uint64_t)this, v38, (uint64_t *)(v45[0] + v36));
              v33 = *((_DWORD *)this + 3);
              v40 = v37 + (int)v34 * v33;
              *(float *)&v39 = v39 + *(float *)(v35 + 4 * v40);
              *(_DWORD *)(v35 + 4 * v40) = LODWORD(v39);
              ++v37;
              v36 += 24;
            }
            while (v37 < v33);
            v41 = v33;
          }
          ++v34;
        }
        while (v34 < v41);
      }
      v48 = (void **)v45;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v48);
      if (v46.__begin_)
      {
        v46.__end_ = v46.__begin_;
        operator delete(v46.__begin_);
      }
      ++v3;
      v1 = *((int *)this + 11);
    }
    while (v3 < v1);
  }
}

void sub_1D48D9B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double faiss::Score3Computer<float,double>::compute_cost(uint64_t a1, uint64_t a2)
{
  return -faiss::Score3Computer<float,double>::compute(a1, a2);
}

double faiss::Score3Computer<float,double>::cost_update(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  return -faiss::Score3Computer<float,double>::compute_update(a1, a2, a3, a4);
}

void faiss::RankingScore2::~RankingScore2(faiss::RankingScore2 *this)
{
  void *v2;

  *(_QWORD *)this = &unk_1E9805EC0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E9805EC0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D82628A4);
}

void faiss::Score3Computer<float,double>::~Score3Computer(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E9805EC0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D82628A4);
}

double faiss::RankingScore2::accum_gt_weight_diff(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double result;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  double v14;
  unint64_t v15;

  v3 = a2[1] - *a2;
  if ((int)(v3 >> 2) < 1)
    return 0.0;
  v4 = 0;
  LODWORD(v5) = 0;
  v6 = *a3;
  v7 = (a3[1] - *a3) >> 2;
  v8 = (v3 >> 2);
  result = 0.0;
  do
  {
    v10 = *(_DWORD *)(*a2 + 4 * v4);
    if ((int)v5 < (int)v7)
    {
      v11 = (int *)(v6 + 4 * (int)v5);
      v12 = (int)v7 - (uint64_t)(int)v5;
      while (1)
      {
        v13 = *v11++;
        if (v10 < v13)
          break;
        LODWORD(v5) = v5 + 1;
        if (!--v12)
        {
          v5 = (a3[1] - *a3) >> 2;
          break;
        }
      }
    }
    v14 = 0.0;
    if (v7 > (int)v5)
    {
      v15 = (int)v5;
      do
        v14 = v14 + 1.0 / (double)(*(_DWORD *)(v6 + 4 * v15++) - v10 + 1);
      while (v7 > v15);
    }
    result = result + 1.0 / (double)(v10 + 1) * v14;
    ++v4;
  }
  while (v4 != v8);
  return result;
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D48D9DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(float *)(*a3 + 4 * v20) < *(float *)(*a3 + 4 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*a3 + 4 * *(v9 - 1)) >= *(float *)(*a3 + 4 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::IndirectSort &>(v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::IndirectSort &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *result, int *a2, uint64_t *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  _DWORD *v11;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *a3;
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v3;
        v9 = *(float *)(v5 + 4 * v7);
        if (v9 < *(float *)(v5 + 4 * v8))
        {
          v10 = v4;
          while (1)
          {
            *(int *)((char *)result + v10 + 4) = v8;
            if (!v10)
              break;
            v8 = *(int *)((char *)result + v10 - 4);
            v10 -= 4;
            if (v9 >= *(float *)(v5 + 4 * v8))
            {
              v11 = (int *)((char *)result + v10 + 4);
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *v11 = v7;
        }
        v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *result, int *a2, uint64_t *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v6 = *result;
        v5 = result[1];
        result = v3;
        v7 = *(float *)(v4 + 4 * v5);
        if (v7 < *(float *)(v4 + 4 * v6))
        {
          do
          {
            *v3 = v6;
            v6 = *(v3 - 2);
            --v3;
          }
          while (v7 < *(float *)(v4 + 4 * v6));
          *v3 = v5;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  v6 = *a4;
  v7 = *(float *)(*a4 + 4 * v4);
  v8 = *(float *)(*a4 + 4 * v5);
  v9 = *a3;
  v10 = *(float *)(*a4 + 4 * v9);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v13 = *a3;
    if (*(float *)(v6 + 4 * v13) >= v8)
      return 1;
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    v11 = *a2;
    v12 = *a1;
    if (*(float *)(v6 + 4 * v11) >= *(float *)(v6 + 4 * v12))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::IndirectSort &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a3;
  v5 = *(float *)(*a3 + 4 * v3);
  if (v5 >= *(float *)(*a3 + 4 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 < *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 4 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 < *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::IndirectSort &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = 0;
  v4 = *a1;
  v5 = *a3;
  v6 = *(float *)(*a3 + 4 * v4);
  do
    v7 = a1[++v3];
  while (*(float *)(v5 + 4 * v7) < v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(float *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(float *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    v12 = *a2;
    v13 = v7;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v12;
      *v15 = v13;
      do
      {
        v16 = v14[1];
        ++v14;
        v13 = v16;
      }
      while (*(float *)(v5 + 4 * v16) < v6);
      do
      {
        v17 = *--v15;
        v12 = v17;
      }
      while (*(float *)(v5 + 4 * v17) >= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) < *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *a6;
  if (*(float *)(*a6 + 4 * v13) < *(float *)(*a6 + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    if (*(float *)(v15 + 4 * v16) < *(float *)(v15 + 4 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      if (*(float *)(v15 + 4 * v18) < *(float *)(v15 + 4 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        if (*(float *)(v15 + 4 * v20) < *(float *)(v15 + 4 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(float *)(*a4 + 4 * v15) < *(float *)(*a4 + 4 * v16))
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v17 = (unint64_t)v8 >> 2;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 + 1;
      v7 = (int *)(result + 4 * (v5 + 1));
      v8 = v5 + 2;
      v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) >= v12)
      {
        do
        {
          v13 = v7;
          *a4 = v10;
          if (v4 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v15;
          }
          v10 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 4 * v10) >= v12);
        *v13 = v11;
      }
    }
  }
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    result += v3 + 1;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3 && *(float *)(v6 + 4 * *result) < *(float *)(v6 + 4 * result[1]))
    {
      ++result;
      v3 = v9;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (int *)(result + 4 * v4);
    v6 = *v5;
    v9 = *(int *)(a2 - 4);
    v7 = (_DWORD *)(a2 - 4);
    v8 = v9;
    v10 = *a3;
    v11 = *(float *)(*a3 + 4 * v9);
    if (*(float *)(*a3 + 4 * v6) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (int *)(result + 4 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * v6) < v11);
      *v12 = v8;
    }
  }
  return result;
}

double faiss::Score3Computer<float,double>::compute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint8x8_t v11;
  unsigned int v12;
  uint8x8_t v13;

  v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1)
    return 0.0;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = 4 * (v2 - 1);
  result = 0.0;
  do
  {
    v7 = 0;
    v8 = *(_DWORD *)(a2 + 4 * v3);
    v9 = v4;
    do
    {
      v10 = 0;
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_DWORD *)(a2 + 4 * v7) ^ v8));
      v11.i16[0] = vaddlv_u8(v11);
      v12 = v11.i32[0];
      do
      {
        v13 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_DWORD *)(a2 + v10) ^ v8));
        v13.i16[0] = vaddlv_u8(v13);
        if (v12 < v13.i32[0])
          result = result + *(float *)(v9 + v10);
        v10 += 4;
      }
      while (4 * v2 != v10);
      v9 += v5 + 4;
      ++v7;
    }
    while (v7 != v2);
    v4 += (v5 + 8) * (v2 - 1) + 4;
    ++v3;
  }
  while (v3 != v2);
  return result;
}

double faiss::Score3Computer<float,double>::compute_update(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  float *v9;
  double v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  if (a3 == a4)
    faiss::Score3Computer<float,double>::compute_update();
  if ((int)a3 >= (int)a4)
    v5 = a4;
  else
    v5 = a3;
  if ((int)a3 <= (int)a4)
    v6 = a4;
  else
    v6 = a3;
  if (*(int *)(a1 + 12) < 1)
    return 0.0;
  v8 = 0;
  v9 = *(float **)(a1 + 16);
  v10 = 0.0;
  do
  {
    v11 = a2[v8];
    if (v6 == v8)
      v12 = v5;
    else
      v12 = v8;
    if (v5 == v8)
      v12 = v6;
    v13 = a2[v12];
    v10 = v10 + faiss::Score3Computer<float,double>::update_i_cross(a1, a2, v5, v6, a2[v8], v13, v9);
    if (v13 != v11)
      v10 = v10 + faiss::Score3Computer<float,double>::update_i_plane(a1, (uint64_t)a2, v5, v6, v11, v13, (uint64_t)v9);
    v14 = *(int *)(a1 + 12);
    v9 += (v14 * v14);
    ++v8;
  }
  while (v8 < v14);
  return v10;
}

double faiss::Score3Computer<float,double>::update_i_cross(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, float *a7)
{
  int v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  int8x8_t v19;
  double v20;
  float64x2_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint8x8_t v26;
  unsigned int v27;
  uint8x8_t v28;
  int8x8_t v29;
  unsigned int v30;
  int8x8_t v31;
  int8x16_t v32;
  uint32x2_t v33;
  float32x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int8x8_t v37;
  uint32x2_t v38;
  float64x2_t v39;
  double updated;
  uint64_t v42;
  uint64_t v43;

  v7 = *(_DWORD *)(a1 + 12);
  if (v7 < 1)
    return 0.0;
  v14 = 0;
  v15 = a4;
  v16 = (int)a3;
  v17 = (int8x8_t)vdup_n_s32(a6);
  v18 = (int)a4;
  v19 = (int8x8_t)vdup_n_s32(a5);
  v20 = 0.0;
  v21 = 0uLL;
  v22 = a3;
  v42 = a3;
  v43 = a4;
  do
  {
    v23 = a2[v14];
    if (v15 == v14)
      v24 = v22;
    else
      v24 = v14;
    if (v22 == v14)
      v24 = v15;
    v25 = a2[v24];
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)(int)(v25 ^ a6));
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.i32[0];
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)(int)(v23 ^ a5));
    v28.i16[0] = vaddlv_u8(v28);
    v29.i32[0] = a2[v18];
    v29.i32[1] = a2[v16];
    v30 = v28.i32[0];
    v31 = veor_s8((int8x8_t)__PAIR64__(v29.u32[0], v29.u32[1]), v17);
    v32.i64[0] = v31.i32[0];
    v32.i64[1] = v31.i32[1];
    v33 = vcgt_u32((uint32x2_t)vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v32))))), (uint32x2_t)vdup_n_s32(v27));
    v32.i64[0] = v33.i32[0];
    v32.i64[1] = v33.i32[1];
    v34.f32[0] = a7[v18];
    v34.f32[1] = a7[v16];
    v35 = vcvtq_f64_f32(v34);
    v36 = (float64x2_t)vandq_s8((int8x16_t)vaddq_f64(v35, v21), v32);
    v37 = veor_s8(v29, v19);
    v32.i64[0] = v37.i32[0];
    v32.i64[1] = v37.i32[1];
    v38 = vcgt_u32((uint32x2_t)vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v32))))), (uint32x2_t)vdup_n_s32(v30));
    v32.i64[0] = v38.i32[0];
    v32.i64[1] = v38.i32[1];
    v39 = vsubq_f64(v36, (float64x2_t)vandq_s8((int8x16_t)v35, v32));
    v20 = v39.f64[0] + v20 + v39.f64[1];
    if (v25 != v23)
    {
      updated = faiss::Score3Computer<float,double>::update_j_line(a1, a2, a3, a4, a5, a6, v23, v25, a7);
      v22 = v42;
      v15 = v43;
      v21 = 0uLL;
      v20 = v20 + updated;
      v7 = *(_DWORD *)(a1 + 12);
    }
    a7 += v7;
    ++v14;
  }
  while (v14 < v7);
  return v20;
}

double faiss::Score3Computer<float,double>::update_i_plane(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint32x2_t v14;
  double v15;
  uint32x2_t v16;
  double v17;
  double v18;

  v7 = *(unsigned int *)(a1 + 12);
  if ((int)v7 < 1)
    return 0.0;
  v8 = 0;
  v9.i64[0] = a5;
  v9.i64[1] = a6;
  v10 = v9;
  v11 = 4 * v7;
  result = 0.0;
  do
  {
    if (v8 != a3 && v8 != a4)
    {
      v13 = 0;
      v14 = (uint32x2_t)vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8((int8x16_t)vdupq_n_s64(*(int *)(a2 + 4 * v8)), v10))))));
      do
      {
        if (4 * a3 != v13 && 4 * a4 != v13)
        {
          v15 = *(float *)(a7 + v13);
          v16 = vcgt_u32((uint32x2_t)vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8((int8x16_t)vdupq_n_s64(*(int *)(a2 + v13)), v10)))))), v14);
          v17 = -0.0;
          if ((v16.i8[4] & 1) != 0)
            v17 = *(float *)(a7 + v13);
          v18 = result + v17;
          if ((v16.i8[0] & 1) == 0)
            v15 = 0.0;
          result = v18 - v15;
        }
        v13 += 4;
      }
      while (v11 != v13);
    }
    ++v8;
    a7 += v11;
  }
  while (v8 != v7);
  return result;
}

double faiss::Score3Computer<float,double>::update_j_line(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, int a8, float *a9)
{
  uint64_t v9;
  uint8x8_t v11;
  unsigned int v12;
  uint8x8_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint8x8_t v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  uint8x8_t v23;

  v9 = *(unsigned int *)(a1 + 12);
  if ((int)v9 < 1)
    return 0.0;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)(a8 ^ a6));
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.i32[0];
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)(a7 ^ a5));
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.i32[0];
  v15 = a4;
  v16 = a3;
  result = 0.0;
  do
  {
    if (v16 && v15)
    {
      v18 = (uint8x8_t)vcnt_s8((int8x8_t)(*a2 ^ a6));
      v18.i16[0] = vaddlv_u8(v18);
      v19 = *a9;
      v20 = v12 >= v18.i32[0];
      v21 = -0.0;
      if (!v20)
        v21 = *a9;
      v22 = result + v21;
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)(*a2 ^ a5));
      v23.i16[0] = vaddlv_u8(v23);
      if (v14 >= v23.i32[0])
        v19 = 0.0;
      result = v22 - v19;
    }
    --v16;
    ++a9;
    ++a2;
    --v15;
    --v9;
  }
  while (v9);
  return result;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1D48DB278(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void faiss::Score3Computer<float,double>::compute_update()
{
  __assert_rtn("compute_update", "PolysemousTraining.cpp", 485, "iw != jw");
}

faiss::ProductQuantizer *faiss::ProductQuantizer::ProductQuantizer(faiss::ProductQuantizer *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  faiss::ClusteringParameters::ClusteringParameters((faiss::ProductQuantizer *)((char *)this + 56));
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  faiss::ProductQuantizer::set_derived_values(this);
  return this;
}

void sub_1D48DB44C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  v3 = (void *)v1[16];
  if (v3)
  {
    v1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[13];
  if (v4)
  {
    v1[14] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void faiss::ProductQuantizer::set_derived_values(faiss::ProductQuantizer *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  size_t size;
  void *exception;
  std::string v10;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this % v2)
  {
    memset(&v10, 0, sizeof(v10));
    v6 = snprintf(0, 0, "Error: '%s' failed: The dimension of the vector (d) should be a multiple of the number of subquantizers (M)", "d % M == 0");
    std::string::resize(&v10, v6 + 1, 0);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v10;
    else
      v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      size = v10.__r_.__value_.__l.__size_;
    snprintf((char *)v7, size, "Error: '%s' failed: The dimension of the vector (d) should be a multiple of the number of subquantizers (M)", "d % M == 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v10, "void faiss::ProductQuantizer::set_derived_values()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/ProductQuantizer.cpp", 186);
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 3) = *(_QWORD *)this / v2;
  *((_QWORD *)this + 4) = (v4 * v2 + 7) >> 3;
  v5 = 1 << v4;
  *((_QWORD *)this + 5) = v5;
  std::vector<float>::resize((uint64_t)this + 104, v1 * v5);
  *((_BYTE *)this + 48) = 0;
  *((_DWORD *)this + 13) = 0;
}

void sub_1D48DB590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

faiss::ProductQuantizer *faiss::ProductQuantizer::ProductQuantizer(faiss::ProductQuantizer *this)
{
  return faiss::ProductQuantizer::ProductQuantizer(this, 0, 1, 0);
}

{
  return faiss::ProductQuantizer::ProductQuantizer(this, 0, 1, 0);
}

void *faiss::ProductQuantizer::set_params(faiss::ProductQuantizer *this, const float *a2, int a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3) * *((_QWORD *)this + 5);
  return memcpy((void *)(*((_QWORD *)this + 13) + 4 * v3 * a3), a2, 4 * v3);
}

void faiss::ProductQuantizer::train(faiss::ProductQuantizer *this, int a2, const float *a3)
{
  faiss::ProductQuantizer *v3;
  uint64_t v4;
  unint64_t v5;
  faiss::Index *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  float *v44;
  uint64_t v45;
  char *v46;
  float *v47;
  float v48;
  uint64_t v49;
  float *v50;
  float v51;
  int v52;
  void **v53;
  uint64_t v54;
  faiss::ClusteringParameters *v56;
  const float *__dst;
  faiss::ProductQuantizer *v59;
  uint64_t v60;
  _QWORD v61[2];
  char v62;
  void *__p;
  void *v64;
  void *v65;
  void *v66[2];
  char v67;
  void *v68;
  void *v69;
  void *__src;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  float *v76;

  v3 = this;
  v4 = *((unsigned int *)this + 13);
  if ((v4 - 3) < 2)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5 < *((_QWORD *)this + 2))
    {
      printf("cannot train hypercube: nbits=%zd > log2(d=%zd)\n", *((_QWORD *)this + 2), v5);
      v4 = 0;
    }
    goto LABEL_16;
  }
  if ((_DWORD)v4 != 2)
  {
LABEL_16:
    __dst = (const float *)operator new[]();
    if (*((_QWORD *)v3 + 1))
    {
      v60 = 0;
      v9 = 0;
      v56 = (faiss::ProductQuantizer *)((char *)v3 + 56);
      v59 = v3;
      do
      {
        v10 = v4;
        v11 = *((_QWORD *)v3 + 3);
        if (a2 >= 1)
        {
          v12 = (char *)a3 + v11 * v60;
          v13 = 4 * *(_QWORD *)v59;
          v14 = a2;
          v15 = (float *)__dst;
          do
          {
            memcpy(v15, v12, 4 * v11);
            v12 += v13;
            v15 += v11;
            --v14;
          }
          while (v14);
        }
        v3 = v59;
        faiss::Clustering::Clustering((faiss::Clustering *)v61, v11, *((_DWORD *)v59 + 10), v56);
        v4 = v10;
        if ((_DWORD)v10)
        {
          std::vector<float>::resize((uint64_t)&v65, *((_QWORD *)v59 + 5) * *((_QWORD *)v59 + 3));
          if ((_DWORD)v10 == 1)
          {
            v3 = v59;
            v36 = *((_QWORD *)v59 + 3) * *((_QWORD *)v59 + 5);
            memcpy(v65, (const void *)(*((_QWORD *)v59 + 13) + 4 * v36 * v9), 4 * v36);
          }
          else
          {
            v3 = v59;
            if ((_DWORD)v10 == 4)
            {
              v38 = *((_QWORD *)v59 + 2);
              v37 = *((_QWORD *)v59 + 3);
              v39 = (char *)v65;
              faiss::PCAMatrix::PCAMatrix((uint64_t)v66, v37, v38, 0.0, 0);
              faiss::PCAMatrix::train((faiss::PCAMatrix *)v66, (int *)a2, __dst);
              v3 = v59;
              if ((_DWORD)v38 == 31)
              {
                v40 = (float *)v75;
              }
              else
              {
                v41 = 0;
                LODWORD(v42) = 1 << v38;
                v43 = (float *)v71;
                v44 = (float *)v73;
                v40 = (float *)v75;
                if (1 << v38 <= 1)
                  v42 = 1;
                else
                  v42 = v42;
                do
                {
                  if ((int)v37 >= 1)
                  {
                    v45 = 0;
                    v46 = &v39[4 * v41 * (int)v37];
                    v47 = v40;
                    do
                    {
                      v48 = v43[v45];
                      *(float *)&v46[4 * v45] = v48;
                      if ((int)v38 >= 1)
                      {
                        v49 = 0;
                        v50 = v47;
                        do
                        {
                          v51 = sqrtf(v44[v49]);
                          if (((v41 >> v49) & 1) != 0)
                            v52 = 1;
                          else
                            v52 = -1;
                          v48 = v48 + (float)((float)(v51 * (float)v52) * *v50);
                          *(float *)&v46[4 * v45] = v48;
                          ++v49;
                          v50 += (int)v37;
                        }
                        while (v38 != v49);
                      }
                      ++v45;
                      ++v47;
                    }
                    while (v45 != v37);
                  }
                  ++v41;
                }
                while (v41 != v42);
              }
              v66[0] = &off_1E9806F70;
              if (v40)
              {
                v76 = v40;
                operator delete(v40);
              }
              if (v73)
              {
                v74 = v73;
                operator delete(v73);
              }
              if (v71)
              {
                v72 = v71;
                operator delete(v71);
              }
              faiss::LinearTransform::~LinearTransform((faiss::LinearTransform *)v66);
            }
            else if ((_DWORD)v10 == 3)
            {
              v17 = *((_QWORD *)v59 + 2);
              v16 = *((_QWORD *)v59 + 3);
              v18 = v16;
              v19 = (float *)v65;
              std::vector<float>::vector(v66, (int)v16);
              v20 = (float *)v66[0];
              v21 = 4 * (int)v16;
              if (a2 >= 1)
              {
                v22 = 0;
                v23 = (float *)__dst;
                do
                {
                  v24 = v23;
                  v25 = v20;
                  v26 = v16;
                  if ((int)v16 >= 1)
                  {
                    do
                    {
                      v27 = *v24++;
                      *v25 = v27 + *v25;
                      ++v25;
                      --v26;
                    }
                    while (v26);
                  }
                  ++v22;
                  v23 = (float *)((char *)v23 + v21);
                }
                while (v22 != a2);
                v20 = (float *)v66[0];
              }
              v28 = 0.0;
              if ((int)v16 >= 1)
              {
                do
                {
                  v29 = *v20 / (float)a2;
                  *v20++ = v29;
                  v30 = fabsf(v29);
                  if (v30 > v28)
                    v28 = v30;
                  --v18;
                }
                while (v18);
                v20 = (float *)v66[0];
              }
              v3 = v59;
              if ((_DWORD)v17 != 31)
              {
                v31 = 0;
                LODWORD(v32) = 1 << v17;
                if (1 << v17 <= 1)
                  v32 = 1;
                else
                  v32 = v32;
                do
                {
                  if ((int)v17 >= 1)
                  {
                    v33 = 0;
                    do
                    {
                      if (((v31 >> v33) & 1) != 0)
                        v34 = 1;
                      else
                        v34 = -1;
                      v19[v33] = v20[v33] + (float)((float)v34 * v28);
                      ++v33;
                    }
                    while (v17 != v33);
                  }
                  v35 = (int)v17;
                  if ((int)v17 < (int)v16)
                  {
                    do
                    {
                      v19[v35] = v20[v35];
                      ++v35;
                    }
                    while ((int)v16 != v35);
                  }
                  ++v31;
                  v19 = (float *)((char *)v19 + v21);
                }
                while (v31 != v32);
              }
              if (v20)
              {
                v66[1] = v20;
                operator delete(v20);
              }
            }
          }
        }
        if (*((_BYTE *)v3 + 48))
        {
          v62 = 1;
          printf("Training PQ slice %d/%zd\n", v9, *((_QWORD *)v3 + 1));
        }
        faiss::IndexFlat::IndexFlat((uint64_t)v66, *((_QWORD *)v3 + 3), 1);
        v66[0] = &unk_1E9805548;
        if (*((_QWORD *)v3 + 12))
          v53 = (void **)*((_QWORD *)v3 + 12);
        else
          v53 = v66;
        faiss::Clustering::train((faiss::Clustering *)v61, a2, __dst, (faiss::Index *)v53, 0);
        v54 = *((_QWORD *)v3 + 3) * *((_QWORD *)v3 + 5);
        memcpy((void *)(*((_QWORD *)v3 + 13) + 4 * v54 * v9), v65, 4 * v54);
        v66[0] = &off_1E9806E90;
        if (v68)
        {
          v69 = v68;
          operator delete(v68);
        }
        faiss::Index::~Index((faiss::Index *)v66);
        faiss::Clustering::~Clustering((faiss::Clustering *)v61);
        ++v9;
        v60 += 4;
      }
      while (*((_QWORD *)v3 + 1) > v9);
    }
    MEMORY[0x1D826288C](__dst, 0x1000C8052888210);
    return;
  }
  faiss::Clustering::Clustering((faiss::Clustering *)v66, *((_DWORD *)this + 6), *((_DWORD *)this + 10), (faiss::ProductQuantizer *)((char *)this + 56));
  if (*((_BYTE *)v3 + 48))
  {
    v67 = 1;
    puts("Training all PQ slices at once");
  }
  faiss::IndexFlat::IndexFlat((uint64_t)v61, *((_QWORD *)v3 + 3), 1);
  v61[0] = &unk_1E9805548;
  if (*((_QWORD *)v3 + 12))
    v6 = (faiss::Index *)*((_QWORD *)v3 + 12);
  else
    v6 = (faiss::Index *)v61;
  faiss::Clustering::train((faiss::Clustering *)v66, *((_QWORD *)v3 + 1) * a2, a3, v6, 0);
  if (*((_QWORD *)v3 + 1))
  {
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)v3 + 3) * *((_QWORD *)v3 + 5);
      memcpy((void *)(*((_QWORD *)v3 + 13) + 4 * v8 * v7++), __src, 4 * v8);
    }
    while (*((_QWORD *)v3 + 1) > v7);
  }
  v61[0] = &off_1E9806E90;
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  faiss::Index::~Index((faiss::Index *)v61);
  faiss::Clustering::~Clustering((faiss::Clustering *)v66);
}

void sub_1D48DBC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  faiss::IndexFlatL2::~IndexFlatL2((faiss::IndexFlatL2 *)&a22);
  faiss::Clustering::~Clustering((faiss::Clustering *)&a36);
  _Unwind_Resume(a1);
}

void faiss::IndexFlatL2::~IndexFlatL2(faiss::IndexFlatL2 *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E9806E90;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  faiss::Index::~Index(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E9806E90;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  faiss::Index::~Index(this);
  JUMPOUT(0x1D82628A4);
}

void faiss::ProductQuantizer::compute_code(uint64_t this, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 16);
  if (v3 == 16)
  {
    faiss::compute_code<faiss::PQEncoder16>(this, a2, a3);
  }
  else if (v3 == 8)
  {
    faiss::compute_code<faiss::PQEncoder8>(this, a2, a3);
  }
  else
  {
    faiss::compute_code<faiss::PQEncoderGeneric>((_QWORD *)this, a2, a3);
  }
}

void faiss::compute_code<faiss::PQEncoder8>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  float v10;
  void *__p[3];

  std::vector<float>::vector(__p, *(_QWORD *)(a1 + 40));
  if (*(_DWORD *)(a1 + 16) != 8)
    __assert_rtn("PQEncoder8", "ProductQuantizer-inl.h", 47, "8 == nbits");
  if (*(_QWORD *)(a1 + 8))
  {
    v6 = 0;
    do
    {
      faiss::fvec_L2sqr_ny((faiss *)__p[0], (faiss *)(a2 + 4 * *(_QWORD *)(a1 + 24) * v6), (const float *)(*(_QWORD *)(a1 + 104) + 4 * *(_QWORD *)(a1 + 24) * v6 * *(_QWORD *)(a1 + 40)), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40));
      v7 = *(_QWORD *)(a1 + 40);
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = 1.0e20;
        do
        {
          if (*((float *)__p[0] + v8) < v10)
          {
            v10 = *((float *)__p[0] + v8);
            v9 = v8;
          }
          ++v8;
        }
        while (v7 != v8);
      }
      else
      {
        v9 = 0;
      }
      *a3++ = v9;
      ++v6;
    }
    while (v6 < *(_QWORD *)(a1 + 8));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D48DBE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void faiss::compute_code<faiss::PQEncoder16>(uint64_t a1, uint64_t a2, _WORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  float v10;
  void *__p[3];

  std::vector<float>::vector(__p, *(_QWORD *)(a1 + 40));
  if (*(_DWORD *)(a1 + 16) != 16)
    __assert_rtn("PQEncoder16", "ProductQuantizer-inl.h", 56, "16 == nbits");
  if (*(_QWORD *)(a1 + 8))
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 40);
    do
    {
      faiss::fvec_L2sqr_ny((faiss *)__p[0], (faiss *)(a2 + 4 * *(_QWORD *)(a1 + 24) * v6), (const float *)(*(_QWORD *)(a1 + 104) + 4 * *(_QWORD *)(a1 + 24) * v6 * v7), *(_QWORD *)(a1 + 24), v7);
      v7 = *(_QWORD *)(a1 + 40);
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = 1.0e20;
        do
        {
          if (*((float *)__p[0] + v8) < v10)
          {
            v10 = *((float *)__p[0] + v8);
            v9 = v8;
          }
          ++v8;
        }
        while (v7 != v8);
      }
      else
      {
        v9 = 0;
      }
      *a3++ = v9;
      ++v6;
    }
    while (v6 < *(_QWORD *)(a1 + 8));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D48DBF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void faiss::compute_code<faiss::PQEncoderGeneric>(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  void *__p[3];

  std::vector<float>::vector(__p, a1[5]);
  v6 = a1[2];
  if ((int)v6 > 64)
    __assert_rtn("PQEncoderGeneric", "ProductQuantizer-inl.h", 15, "nbits <= 64");
  if (a1[1])
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      faiss::fvec_L2sqr_ny((faiss *)__p[0], (faiss *)(a2 + 4 * a1[3] * v7), (const float *)(a1[13] + 4 * a1[3] * v7 * a1[5]), a1[3], a1[5]);
      v10 = a1[5];
      if (v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = 1.0e20;
        do
        {
          if (*((float *)__p[0] + v11) < v13)
          {
            v13 = *((float *)__p[0] + v11);
            v12 = v11;
          }
          ++v11;
        }
        while (v10 != v11);
      }
      else
      {
        v12 = 0;
      }
      v9 |= v12 << v8;
      if ((int)(v6 + v8) < 8)
      {
        v8 += v6;
      }
      else
      {
        v14 = v12 >> (8 - v8);
        *a3++ = v9;
        v15 = v6 - 8 + v8;
        if (v15 >= 8)
        {
          v16 = v15 >> 3;
          do
          {
            *a3++ = v14;
            v14 >>= 8;
            --v16;
          }
          while (v16);
        }
        v8 = (v8 + v6) & 7;
        v9 = v14;
      }
      ++v7;
    }
    while (v7 < a1[1]);
    if (v8)
      *a3 = v9;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

_DWORD *faiss::ProductQuantizer::decode(_DWORD *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3 == 16)
    return faiss::decode<faiss::PQDecoder16>(this, a2, a3);
  if (v3 == 8)
    return faiss::decode<faiss::PQDecoder8>(this, a2, a3);
  return faiss::decode<faiss::PQDecoderGeneric>(this, (unsigned __int8 *)a2, a3);
}

_DWORD *faiss::decode<faiss::PQDecoder8>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v6;

  if (result[4] != 8)
    faiss::decode<faiss::PQDecoder8>();
  v3 = result;
  if (*((_QWORD *)result + 1))
  {
    v6 = 0;
    do
    {
      result = memcpy((void *)(a3 + 4 * v3[3] * v6), (const void *)(v3[13] + 4 * (*(unsigned __int8 *)(a2 + v6) + v3[5] * v6) * v3[3]), 4 * v3[3]);
      ++v6;
    }
    while (v6 < v3[1]);
  }
  return result;
}

_DWORD *faiss::decode<faiss::PQDecoder16>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v6;

  if (result[4] != 16)
    faiss::decode<faiss::PQDecoder16>();
  v3 = result;
  if (*((_QWORD *)result + 1))
  {
    v6 = 0;
    do
    {
      result = memcpy((void *)(a3 + 4 * v3[3] * v6), (const void *)(v3[13] + 4 * (*(unsigned __int16 *)(a2 + 2 * v6) + v3[5] * v6) * v3[3]), 4 * v3[3]);
      ++v6;
    }
    while (v6 < v3[1]);
  }
  return result;
}

_QWORD *faiss::decode<faiss::PQDecoderGeneric>(_QWORD *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v3 = result[2];
  if ((int)v3 > 64)
    faiss::decode<faiss::PQDecoderGeneric>();
  v4 = result;
  if (result[1])
  {
    v7 = 0;
    LOBYTE(v8) = 0;
    LODWORD(v9) = 0;
    do
    {
      if (!(_BYTE)v8)
        LODWORD(v9) = *a2;
      v10 = v9 >> v8;
      v11 = v3 + v8;
      v12 = v11 - 8;
      if (v11 < 8)
      {
        LOBYTE(v8) = v3 + v8;
      }
      else
      {
        v13 = 8 - v8;
        v14 = a2 + 1;
        if (v12 < 8)
        {
          ++a2;
        }
        else
        {
          v15 = v12 >> 3;
          v16 = v15 - 1;
          do
          {
            v17 = *v14++;
            v10 |= (unint64_t)v17 << v13;
            v13 += 8;
            --v15;
          }
          while (v15);
          a2 += v16 + 2;
        }
        v8 = ((_BYTE)v8 + (_BYTE)v3) & 7;
        if (v8)
        {
          v9 = *a2;
          v10 |= v9 << v13;
        }
      }
      result = memcpy((void *)(a3 + 4 * v4[3] * v7), (const void *)(v4[13] + 4 * ((v10 & ~(-1 << v3)) + v4[5] * v7) * v4[3]), 4 * v4[3]);
      ++v7;
    }
    while (v7 < v4[1]);
  }
  return result;
}

_DWORD *faiss::ProductQuantizer::decode(_DWORD *this, const unsigned __int8 *a2, float *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t i;

  if (a4)
  {
    v7 = (uint64_t)this;
    for (i = 0; i != a4; ++i)
      this = faiss::ProductQuantizer::decode((_DWORD *)v7, (uint64_t)&a2[*(_QWORD *)(v7 + 32) * i], (uint64_t)&a3[*(_QWORD *)v7 * i]);
  }
  return this;
}

_QWORD *faiss::ProductQuantizer::compute_code_from_distance_table(_QWORD *this, const float *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  int v13;
  unsigned int v14;

  v3 = this[2];
  if ((int)v3 > 64)
    faiss::ProductQuantizer::compute_code_from_distance_table();
  v4 = this[1];
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = this[5];
      if (v8)
      {
        v9 = 0;
        v10 = 0;
        v11 = 1.0e20;
        do
        {
          if (a2[v9] < v11)
          {
            v11 = a2[v9];
            v10 = v9;
          }
          ++v9;
        }
        while (v8 != v9);
        a2 += v8;
      }
      else
      {
        v10 = 0;
      }
      v7 |= v10 << v6;
      if ((int)(v3 + v6) < 8)
      {
        v6 += v3;
      }
      else
      {
        v12 = v10 >> (8 - v6);
        *a3++ = v7;
        v13 = v3 - 8 + v6;
        if (v13 >= 8)
        {
          v14 = v13 >> 3;
          do
          {
            *a3++ = v12;
            v12 >>= 8;
            --v14;
          }
          while (v14);
        }
        v6 = (v6 + v3) & 7;
        v4 = this[1];
        v7 = v12;
      }
      ++v5;
    }
    while (v5 < v4);
    if (v6)
      *a3 = v7;
  }
  return this;
}

_QWORD *faiss::ProductQuantizer::compute_codes_with_assign_index(_QWORD *this, const float *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  char v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  std::string *v42;
  size_t size;
  void *exception;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v48;
  unint64_t v51;
  uint64_t *v52;
  char *__dst;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  std::string v57;

  v4 = this[12];
  if (!v4 || (v5 = (uint64_t)this, this[3] != *(_DWORD *)(v4 + 8)))
  {
    memset(&v57, 0, sizeof(v57));
    v41 = snprintf(0, 0, "Error: '%s' failed", "assign_index && assign_index->d == dsub");
    std::string::resize(&v57, v41 + 1, 0);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v57;
    else
      v42 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    else
      size = v57.__r_.__value_.__l.__size_;
    snprintf((char *)v42, size, "Error: '%s' failed", "assign_index && assign_index->d == dsub");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v57, "void faiss::ProductQuantizer::compute_codes_with_assign_index(const float *, uint8_t *, size_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/ProductQuantizer.cpp", 424);
  }
  if (this[1])
  {
    v6 = a4;
    v7 = a3;
    v48 = 0;
    v8 = 0;
    v46 = a3;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 96) + 64))(*(_QWORD *)(v5 + 96));
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 96) + 24))(*(_QWORD *)(v5 + 96));
      __dst = (char *)operator new[]();
      v9 = operator new[]();
      v10 = v9;
      if (v6)
      {
        v56 = 0;
        v11 = 0;
        v45 = &v7[v8];
        v12 = 0x10000;
        v51 = v8;
        v52 = (uint64_t *)v9;
        do
        {
          if (v6 >= v12)
            v13 = v12;
          else
            v13 = v6;
          v54 = v11 + 0x10000;
          v55 = v12;
          if (v11 + 0x10000 >= v6)
            v14 = v6;
          else
            v14 = v11 + 0x10000;
          if (v14 > v11)
          {
            v15 = *(_QWORD *)(v5 + 24);
            v16 = 4 * v15;
            v17 = (char *)a2 + *(_QWORD *)v5 * v56 + v48 * v15;
            v18 = 4 * *(_QWORD *)v5;
            v19 = __dst;
            v20 = v13;
            do
            {
              memcpy(v19, v17, v16);
              --v20;
              v17 += v18;
              v19 += v16;
            }
            while (v11 != v20);
          }
          v10 = (uint64_t)v52;
          (*(void (**)(_QWORD, unint64_t, char *, uint64_t *, uint64_t))(**(_QWORD **)(v5 + 96) + 56))(*(_QWORD *)(v5 + 96), v14 - v11, __dst, v52, 1);
          v21 = *(_QWORD *)(v5 + 16);
          if (v21 == 8)
          {
            v22 = v14 > v11;
            v7 = a3;
            v6 = a4;
            v8 = v51;
            if (v22)
            {
              v27 = &v45[*(_QWORD *)(v5 + 32) * v11];
              v28 = v52;
              do
              {
                v29 = *v28++;
                *v27 = v29;
                v27 += *(_QWORD *)(v5 + 8);
                --v13;
              }
              while (v11 != v13);
            }
          }
          else
          {
            v7 = a3;
            v6 = a4;
            if (v21 == 16)
            {
              v22 = v14 > v11;
              v8 = v51;
              if (v22)
              {
                v23 = &v46[*(_QWORD *)(v5 + 32) * v11];
                v24 = 2 * *(_QWORD *)(v5 + 8);
                v25 = v52;
                do
                {
                  v26 = *v25++;
                  *(_WORD *)v23 = v26;
                  --v13;
                  v23 += v24;
                }
                while (v11 != v13);
              }
            }
            else
            {
              v30 = v11;
              v22 = v14 > v11;
              v8 = v51;
              if (v22)
              {
                do
                {
                  v31 = *(_QWORD *)(v5 + 16);
                  if ((int)v31 >= 65)
                    __assert_rtn("PQEncoderGeneric", "ProductQuantizer-inl.h", 15, "nbits <= 64");
                  v32 = v31 * v51;
                  v33 = &a3[*(_QWORD *)(v5 + 32) * v30 + ((v31 * v51) >> 3)];
                  v34 = (v31 * v51) & 7;
                  if (v34)
                    v35 = *v33 & ~(-1 << v34);
                  else
                    v35 = 0;
                  v36 = v52[v30 - v11];
                  v37 = v35 | ((_DWORD)v36 << (v32 & 7));
                  v38 = v34 + v31;
                  if (v34 + (int)v31 >= 8)
                  {
                    v39 = v36 >> (8 - v34);
                    *v33++ = v37;
                    if ((int)v31 + v34 - 8 >= 8)
                    {
                      v40 = ((((_BYTE)v51 * (_BYTE)v31) & 7) + v31 - 8) >> 3;
                      do
                      {
                        *v33++ = v39;
                        v39 >>= 8;
                        --v40;
                      }
                      while (v40);
                    }
                    v38 = (v32 + v31) & 7;
                    LOBYTE(v37) = v39;
                  }
                  if (v38)
                    *v33 = v37;
                  ++v30;
                }
                while (v30 != v13);
              }
            }
          }
          v12 = v55 + 0x10000;
          v56 += 0x40000;
          v11 += 0x10000;
        }
        while (v54 < v6);
      }
      MEMORY[0x1D826288C](v10, 0x1000C8000313F17);
      this = (_QWORD *)MEMORY[0x1D826288C](__dst, 0x1000C8052888210);
      ++v8;
      v48 += 4;
      v46 += 2;
    }
    while (v8 < *(_QWORD *)(v5 + 8));
  }
  return this;
}

void sub_1D48DC974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  __cxa_free_exception(v27);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

#error "1D48DCB00: call analysis failed (funcsize=90)"

void sub_1D48DCB64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826288C](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void faiss::ProductQuantizer::compute_distance_tables(faiss::ProductQuantizer *this, uint64_t a2, const float *a3, float *a4, int32x4_t a5, int32x4_t a6, float32x4_t a7, int32x4_t a8, int32x4_t a9, int32x4_t a10, int32x4_t a11, int32x4_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,size_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int32x4_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v67;
  uint64_t i;
  unint64_t v69;
  unint64_t j;
  uint64_t v71;

  v67 = *((_QWORD *)this + 3);
  if (v67 == 2)
  {
    if (*((_QWORD *)this + 2) <= 7uLL)
    {
      faiss::compute_PQ_dis_tables_dsub2(*(_QWORD *)this, *((_QWORD *)this + 5), *((uint64_t **)this + 13), a2, (uint64_t)a3, 0, (uint64_t)a4, a5, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
        a27,
        a28,
        a29,
        a30,
        a31,
        a32,
        a33,
        a34,
        a35,
        a36,
        a37,
        a38,
        a39,
        a40,
        a41,
        a42,
        a43,
        a44,
        a45,
        a46,
        a47,
        a48,
        a49,
        a50,
        a51,
        a52,
        a53,
        a54,
        a55,
        a56,
        a57,
        a58,
        a59,
        a6,
        a7,
        a8,
        a9,
        a10,
        a11,
        a12,
        a60,
        a61,
        a62,
        a63);
      return;
    }
    goto LABEL_5;
  }
  if (v67 < 0x10)
  {
LABEL_5:
    if (a2)
    {
      for (i = 0; i != a2; ++i)
        faiss::ProductQuantizer::compute_distance_table(this, &a3[*(_QWORD *)this * i], &a4[*((_QWORD *)this + 5) * i * *((_QWORD *)this + 1)]);
    }
    return;
  }
  v69 = *((_QWORD *)this + 1);
  if (v69)
  {
    for (j = 0; j < v69; ++j)
    {
      faiss::pairwise_L2sqr(*((_QWORD *)this + 3), a2, (faiss *)&a3[*((_QWORD *)this + 3) * j], *((_QWORD *)this + 5), (float *)(*((_QWORD *)this + 13) + 4 * *((_QWORD *)this + 3) * j * *((_QWORD *)this + 5)), &a4[*((_QWORD *)this + 5) * j], *(float **)this, *((_QWORD *)this + 3), *((_QWORD *)this + 5) * v69, v71);
      v69 = *((_QWORD *)this + 1);
    }
  }
}

void faiss::ProductQuantizer::compute_distance_table(faiss::ProductQuantizer *this, const float *a2, float *a3)
{
  unint64_t v6;

  if (*((_QWORD *)this + 1))
  {
    v6 = 0;
    do
    {
      faiss::fvec_L2sqr_ny((faiss *)&a3[*((_QWORD *)this + 5) * v6], (faiss *)&a2[*((_QWORD *)this + 3) * v6], (const float *)(*((_QWORD *)this + 13) + 4 * *((_QWORD *)this + 5) * v6 * *((_QWORD *)this + 3)), *((_QWORD *)this + 3), *((_QWORD *)this + 5));
      ++v6;
    }
    while (v6 < *((_QWORD *)this + 1));
  }
}

uint64_t faiss::ProductQuantizer::compute_inner_prod_table(uint64_t this, const float *a2, float *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  unint64_t v9;

  if (*(_QWORD *)(this + 8))
  {
    v8 = this;
    v9 = 0;
    do
    {
      this = faiss::fvec_inner_products_ny((faiss *)&a3[*(_QWORD *)(v8 + 40) * v9], (float *)&a2[*(_QWORD *)(v8 + 24) * v9], (const float *)(*(_QWORD *)(v8 + 104) + 4 * *(_QWORD *)(v8 + 40) * v9 * *(_QWORD *)(v8 + 24)), *(const float **)(v8 + 24), *(_QWORD *)(v8 + 40), a6);
      ++v9;
    }
    while (v9 < *(_QWORD *)(v8 + 8));
  }
  return this;
}

unint64_t faiss::ProductQuantizer::compute_inner_prod_tables(unint64_t this, uint64_t a2, const float *a3, float *a4, uint64_t a5, unint64_t a6, int32x4_t a7, int32x4_t a8, float32x4_t a9, int32x4_t a10, int32x4_t a11, int32x4_t a12, int32x4_t a13, int32x4_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,size_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int32x4_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *v66;
  unint64_t v67;
  uint64_t i;
  unint64_t v69;
  unint64_t j;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  float alpha;
  int ldb;
  int lda;
  int m;
  int n;
  int v80;

  v66 = (uint64_t *)this;
  v67 = *(_QWORD *)(this + 24);
  if (v67 == 2)
  {
    if (*(_QWORD *)(this + 16) <= 7uLL)
      return faiss::compute_PQ_dis_tables_dsub2(*(_QWORD *)this, *(_QWORD *)(this + 40), *(uint64_t **)(this + 104), a2, (uint64_t)a3, 1, (uint64_t)a4, a7, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
               a27,
               a28,
               a29,
               a30,
               a31,
               a32,
               a33,
               a34,
               a35,
               a36,
               a37,
               a38,
               a39,
               a40,
               a41,
               a42,
               a43,
               a44,
               a45,
               a46,
               a47,
               a48,
               a49,
               a50,
               a51,
               a52,
               a53,
               a54,
               a55,
               a56,
               a57,
               a58,
               a59,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a60,
               a61,
               a62,
               a63);
    goto LABEL_5;
  }
  if (v67 < 0x10)
  {
LABEL_5:
    if (a2)
    {
      for (i = 0; i != a2; ++i)
        this = faiss::ProductQuantizer::compute_inner_prod_table((uint64_t)v66, &a3[*v66 * i], &a4[v66[5] * i * v66[1]], (uint64_t)a4, a5, a6);
    }
    return this;
  }
  v69 = *(_QWORD *)(this + 8);
  if (v69)
  {
    for (j = 0; j < v69; ++j)
    {
      v71 = v66[5];
      n = a2;
      v80 = v71 * v69;
      v72 = v66[3];
      lda = v72;
      m = v71;
      v73 = *v66;
      alpha = 1.0;
      ldb = v73;
      v74 = 0;
      this = sgemm_("Transposed", "Not transposed", &m, &n, &lda, &alpha, (float *)(v66[13] + 4 * v72 * j * v71), &lda, (float *)&a3[v72 * j], &ldb, (float *)&v74, &a4[v71 * j], &v80);
      v69 = v66[1];
    }
  }
  return this;
}

#error "1D48DCFB4: call analysis failed (funcsize=516)"

void sub_1D48DD778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  uint64_t v22;

  __cxa_free_exception(v21);
  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  _Unwind_Resume(a1);
}

#error "1D48DD85C: call analysis failed (funcsize=516)"

void sub_1D48DE020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  uint64_t v22;

  __cxa_free_exception(v21);
  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  _Unwind_Resume(a1);
}

void faiss::ProductQuantizer::compute_sdc_table(faiss::ProductQuantizer *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  const float *v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  faiss *v13;
  uint64_t v14;

  std::vector<float>::resize((uint64_t)this + 128, *((_QWORD *)this + 5) * *((_QWORD *)this + 1) * *((_QWORD *)this + 5));
  v2 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 3) >= 4uLL)
  {
    if (v2)
    {
      v10 = 0;
      do
      {
        v11 = *((_QWORD *)this + 5);
        v12 = *((_QWORD *)this + 3);
        v13 = (faiss *)(*((_QWORD *)this + 13) + 4 * v11 * v10 * v12);
        faiss::pairwise_L2sqr(v12, v11, v13, v11, (float *)v13, (float *)(*((_QWORD *)this + 16) + 4 * v11 * v10++ * v11), (float *)v12, v12, v11, v14);
      }
      while (*((_QWORD *)this + 1) > v10);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 5);
    if (v3 * v2)
    {
      v4 = 0;
      v5 = 1;
      do
      {
        v6 = v4 / v3 * v3;
        v7 = *((_QWORD *)this + 3);
        v8 = (const float *)(*((_QWORD *)this + 13) + 4 * v6 * v7);
        faiss::fvec_L2sqr_ny((faiss *)(*((_QWORD *)this + 16) + 4 * v6 * v3 + 4 * v4 % v3 * v3), (faiss *)&v8[v7 * (v4 % v3)], v8, v7, v3);
        v4 = v5;
        v3 = *((_QWORD *)this + 5);
      }
      while (v3 * *((_QWORD *)this + 1) > v5++);
    }
  }
}

_QWORD *faiss::ProductQuantizer::search_sdc(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  float v41;
  uint64_t v42;
  unint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  std::string *v56;
  size_t size;
  void *exception;
  int v59;
  std::string *v60;
  size_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v68;
  uint64_t v69;
  uint64_t v70;
  std::string v71;

  if (result[5] * result[1] * result[5] != (uint64_t)(result[17] - result[16]) >> 2)
  {
    memset(&v71, 0, sizeof(v71));
    v55 = snprintf(0, 0, "Error: '%s' failed", "sdc_table.size() == M * ksub * ksub");
    std::string::resize(&v71, v55 + 1, 0);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v71;
    else
      v56 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      size = v71.__r_.__value_.__l.__size_;
    snprintf((char *)v56, size, "Error: '%s' failed", "sdc_table.size() == M * ksub * ksub");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v71, "void faiss::ProductQuantizer::search_sdc(const uint8_t *, size_t, const uint8_t *, const size_t, float_maxheap_array_t *, BOOL) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/ProductQuantizer.cpp", 751);
  }
  v7 = result;
  if (result[2] != 8)
  {
    memset(&v71, 0, sizeof(v71));
    v59 = snprintf(0, 0, "Error: '%s' failed", "nbits == 8");
    std::string::resize(&v71, v59 + 1, 0);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &v71;
    else
      v60 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v61 = v71.__r_.__value_.__l.__size_;
    snprintf((char *)v60, v61, "Error: '%s' failed", "nbits == 8");
    v62 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v62, &v71, "void faiss::ProductQuantizer::search_sdc(const uint8_t *, size_t, const uint8_t *, const size_t, float_maxheap_array_t *, BOOL) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/ProductQuantizer.cpp", 752);
  }
  if (!a3)
    return result;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a6[1];
  if (v12)
    v13 = a7;
  else
    v13 = 0;
  v68 = v13;
  v65 = a7;
  v63 = a3;
  v64 = a6;
  do
  {
    v15 = a6[2];
    v14 = a6[3];
    v16 = v7[4];
    if (v68)
    {
      v17 = (_QWORD *)(v15 + v10);
      v18 = (_DWORD *)(v14 + v9);
      v19 = v12;
      do
      {
        *v18++ = 2139095039;
        *v17++ = -1;
        --v19;
      }
      while (v19);
    }
    v69 = v15;
    v70 = v14;
    v20 = (uint64_t *)(v15 + 8 * v11 * v12);
    result = (_QWORD *)(v14 + 4 * v11 * v12);
    if (!a5)
      goto LABEL_32;
    v21 = 0;
    v22 = v7[16];
    v23 = v7[1];
    v24 = (char *)result - 4;
    v25 = v20 - 1;
    v26 = a4;
    do
    {
      if (v23)
      {
        v27 = 0;
        v28 = v7[5];
        v29 = 0.0;
        v30 = v22;
        do
        {
          v29 = v29
              + *(float *)(v30 + 4
                               * (*(unsigned __int8 *)(v26 + v27) + v28 * *(unsigned __int8 *)(a2 + v16 * v11 + v27)));
          ++v27;
          v30 += 4 * v28 * v28;
        }
        while (v23 != v27);
      }
      else
      {
        v29 = 0.0;
      }
      if (v29 >= *(float *)result)
        goto LABEL_31;
      if (v12 < 2)
      {
        v31 = 1;
        goto LABEL_30;
      }
      v32 = 3;
      v33 = 2;
      v34 = 1;
      while (1)
      {
        v35 = *(float *)&v24[4 * v33];
        if (v32 != v12 + 1)
        {
          v36 = *(float *)&v24[4 * v32];
          if (v35 <= v36)
            break;
        }
        if (v35 < v29)
          goto LABEL_29;
LABEL_27:
        v31 = v33;
        *(float *)&v24[4 * v34] = v35;
        v25[v34] = v25[v33];
        v33 *= 2;
        v32 = (2 * v31) | 1;
        v34 = v31;
        if (v33 > v12)
          goto LABEL_30;
      }
      v35 = *(float *)&v24[4 * v32];
      v33 = v32;
      if (v36 >= v29)
        goto LABEL_27;
LABEL_29:
      v31 = v34;
LABEL_30:
      *(float *)&v24[4 * v31] = v29;
      v25[v31] = v21;
LABEL_31:
      v26 += v16;
      ++v21;
    }
    while (v21 != a5);
LABEL_32:
    if ((a7 & 1) == 0)
      goto LABEL_55;
    if (!v12)
    {
      v38 = 0;
      goto LABEL_52;
    }
    v37 = 0;
    v38 = 0;
    v39 = (char *)result - 4;
    v40 = v20 - 1;
    while (2)
    {
      v41 = *(float *)result;
      v42 = *v20;
      v43 = v12 - v37;
      v44 = *(float *)&v39[4 * (v12 - v37)];
      if (v12 - v37 < 2)
      {
        v45 = 1;
        goto LABEL_47;
      }
      v46 = 3;
      v47 = 2;
      v48 = 1;
      while (2)
      {
        v49 = *(float *)&v39[4 * v47];
        if (v46 == v43 + 1 || (v50 = *(float *)&v39[4 * v46], v49 > v50))
        {
          if (v44 > v49)
            break;
          goto LABEL_43;
        }
        v49 = *(float *)&v39[4 * v46];
        v47 = v46;
        if (v44 <= v50)
        {
LABEL_43:
          v45 = v47;
          *(float *)&v39[4 * v48] = v49;
          v40[v48] = v40[v47];
          v47 *= 2;
          v46 = (2 * v45) | 1;
          v48 = v45;
          if (v47 > v43)
            goto LABEL_46;
          continue;
        }
        break;
      }
      v45 = v48;
LABEL_46:
      v44 = *(float *)&v39[4 * v43];
LABEL_47:
      *(float *)&v39[4 * v45] = v44;
      v40[v45] = v40[v43];
      v51 = v12 + ~v38;
      *((float *)result + v51) = v41;
      v20[v51] = v42;
      if (v42 != -1)
        ++v38;
      if (++v37 != v12)
        continue;
      break;
    }
LABEL_52:
    memmove(result, (char *)result + 4 * v12 + -4 * v38, 4 * v38);
    result = memmove(v20, &v20[v12 - v38], 8 * v38);
    v52 = v12 - v38;
    LOBYTE(a7) = v65;
    a3 = v63;
    a6 = v64;
    if (v12 > v38)
    {
      v53 = v69 + 8 * v38;
      v54 = v70 + 4 * v38;
      do
      {
        *(_DWORD *)(v54 + v9) = 2139095039;
        *(_QWORD *)(v53 + v10) = -1;
        v53 += 8;
        v54 += 4;
        --v52;
      }
      while (v52);
    }
LABEL_55:
    ++v11;
    v10 += 8 * v12;
    v9 += 4 * v12;
  }
  while (v11 != a3);
  return result;
}

void sub_1D48DE63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  __cxa_free_exception(v27);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::PCAMatrix::~PCAMatrix(faiss::PCAMatrix *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E9806F70;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  faiss::LinearTransform::~LinearTransform(this);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E9806F70;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  faiss::LinearTransform::~LinearTransform(this);
  JUMPOUT(0x1D82628A4);
}

void faiss::LinearTransform::~LinearTransform(faiss::LinearTransform *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E9805FC8;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  faiss::LinearTransform::~LinearTransform(this);
  JUMPOUT(0x1D82628A4);
}

void faiss::Clustering::~Clustering(faiss::Clustering *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E9805270;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
}

{
  faiss::Clustering::~Clustering(this);
  JUMPOUT(0x1D82628A4);
}

unsigned __int8 *faiss::pq_estimators_from_tables_M4<unsigned char,faiss::CMax<float,long long>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;

  if (!a2)
    return result;
  v7 = 0;
  v8 = a3 + 4 * a4;
  v9 = v8 + 4 * a4;
  v10 = v9 + 4 * a4;
  v11 = a6 - 1;
  v12 = a7 - 8;
  do
  {
    v13 = (float)((float)(*(float *)(a3 + 4 * *result) + *(float *)(v8 + 4 * result[1]))
                + *(float *)(v9 + 4 * result[2]))
        + *(float *)(v10 + 4 * result[3]);
    if (*a6 <= v13)
      goto LABEL_16;
    if (a5 < 2)
    {
      v14 = 1;
      goto LABEL_15;
    }
    v15 = 3;
    v16 = 2;
    v17 = 1;
    while (1)
    {
      v18 = v11[v16];
      if (v15 != a5 + 1)
      {
        v19 = v11[v15];
        if (v18 <= v19)
          break;
      }
      if (v18 < v13)
        goto LABEL_14;
LABEL_12:
      v14 = v16;
      v11[v17] = v18;
      *(_QWORD *)(v12 + 8 * v17) = *(_QWORD *)(v12 + 8 * v16);
      v16 *= 2;
      v15 = (2 * v14) | 1;
      v17 = v14;
      if (v16 > a5)
        goto LABEL_15;
    }
    v18 = v11[v15];
    v16 = v15;
    if (v19 >= v13)
      goto LABEL_12;
LABEL_14:
    v14 = v17;
LABEL_15:
    v11[v14] = v13;
    *(_QWORD *)(v12 + 8 * v14) = v7;
LABEL_16:
    result += 4;
    ++v7;
  }
  while (v7 != a2);
  return result;
}

uint64_t faiss::pq_estimators_from_tables_Mmul4<unsigned char,faiss::CMax<float,long long>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float *a7, uint64_t a8)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;

  if (!a3)
    return result;
  v8 = 0;
  v9 = a7 - 1;
  v10 = a8 - 8;
  v11 = 16 * a5;
  v12 = 12 * a5;
  v13 = 8 * a5;
  v14 = 4 * a5;
  do
  {
    if ((_DWORD)result)
    {
      v15 = 0;
      v16 = 0.0;
      v17 = a4;
      do
      {
        v16 = v16
            + (float)((float)((float)(*(float *)(v17 + 4 * *(unsigned __int8 *)(a2 + v15))
                                    + *(float *)(v17 + v14 + 4 * *(unsigned __int8 *)(a2 + v15 + 1)))
                            + *(float *)(v17 + v13 + 4 * *(unsigned __int8 *)(a2 + v15 + 2)))
                    + *(float *)(v17 + v12 + 4 * *(unsigned __int8 *)(a2 + v15 + 3)));
        v15 += 4;
        v17 += v11;
      }
      while (v15 < (int)result);
      a2 += v15;
    }
    else
    {
      v16 = 0.0;
    }
    if (*a7 <= v16)
      goto LABEL_21;
    if (a6 < 2)
    {
      v18 = 1;
      goto LABEL_20;
    }
    v19 = 3;
    v20 = 2;
    v21 = 1;
    while (1)
    {
      v22 = v9[v20];
      if (v19 != a6 + 1)
      {
        v23 = v9[v19];
        if (v22 <= v23)
          break;
      }
      if (v22 < v16)
        goto LABEL_19;
LABEL_17:
      v18 = v20;
      v9[v21] = v22;
      *(_QWORD *)(v10 + 8 * v21) = *(_QWORD *)(v10 + 8 * v20);
      v20 *= 2;
      v19 = (2 * v18) | 1;
      v21 = v18;
      if (v20 > a6)
        goto LABEL_20;
    }
    v22 = v9[v19];
    v20 = v19;
    if (v23 >= v16)
      goto LABEL_17;
LABEL_19:
    v18 = v21;
LABEL_20:
    v9[v18] = v16;
    *(_QWORD *)(v10 + 8 * v18) = v8;
LABEL_21:
    ++v8;
  }
  while (v8 != a3);
  return result;
}

unsigned __int16 *faiss::pq_estimators_from_tables_M4<unsigned short,faiss::CMax<float,long long>>(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;

  if (!a2)
    return result;
  v7 = 0;
  v8 = a3 + 4 * a4;
  v9 = v8 + 4 * a4;
  v10 = v9 + 4 * a4;
  v11 = a6 - 1;
  v12 = a7 - 8;
  do
  {
    v13 = (float)((float)(*(float *)(a3 + 4 * *result) + *(float *)(v8 + 4 * result[1]))
                + *(float *)(v9 + 4 * result[2]))
        + *(float *)(v10 + 4 * result[3]);
    if (*a6 <= v13)
      goto LABEL_16;
    if (a5 < 2)
    {
      v14 = 1;
      goto LABEL_15;
    }
    v15 = 3;
    v16 = 2;
    v17 = 1;
    while (1)
    {
      v18 = v11[v16];
      if (v15 != a5 + 1)
      {
        v19 = v11[v15];
        if (v18 <= v19)
          break;
      }
      if (v18 < v13)
        goto LABEL_14;
LABEL_12:
      v14 = v16;
      v11[v17] = v18;
      *(_QWORD *)(v12 + 8 * v17) = *(_QWORD *)(v12 + 8 * v16);
      v16 *= 2;
      v15 = (2 * v14) | 1;
      v17 = v14;
      if (v16 > a5)
        goto LABEL_15;
    }
    v18 = v11[v15];
    v16 = v15;
    if (v19 >= v13)
      goto LABEL_12;
LABEL_14:
    v14 = v17;
LABEL_15:
    v11[v14] = v13;
    *(_QWORD *)(v12 + 8 * v14) = v7;
LABEL_16:
    result += 4;
    ++v7;
  }
  while (v7 != a2);
  return result;
}

uint64_t faiss::pq_estimators_from_tables_Mmul4<unsigned short,faiss::CMax<float,long long>>(uint64_t result, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float *a7, uint64_t a8)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;

  if (!a3)
    return result;
  v8 = 0;
  v9 = a7 - 1;
  v10 = a8 - 8;
  v11 = 16 * a5;
  v12 = 12 * a5;
  v13 = 8 * a5;
  v14 = 4 * a5;
  do
  {
    if ((_DWORD)result)
    {
      v15 = 0;
      v16 = 0.0;
      v17 = a4;
      do
      {
        v18 = a2 + 4;
        v16 = v16
            + (float)((float)((float)(*(float *)(v17 + 4 * *a2) + *(float *)(v17 + v14 + 4 * a2[1]))
                            + *(float *)(v17 + v13 + 4 * a2[2]))
                    + *(float *)(v17 + v12 + 4 * a2[3]));
        v15 += 4;
        v17 += v11;
        a2 += 4;
      }
      while (v15 < (int)result);
      a2 = v18;
    }
    else
    {
      v16 = 0.0;
    }
    if (*a7 <= v16)
      goto LABEL_21;
    if (a6 < 2)
    {
      v19 = 1;
      goto LABEL_20;
    }
    v20 = 3;
    v21 = 2;
    v22 = 1;
    while (1)
    {
      v23 = v9[v21];
      if (v20 != a6 + 1)
      {
        v24 = v9[v20];
        if (v23 <= v24)
          break;
      }
      if (v23 < v16)
        goto LABEL_19;
LABEL_17:
      v19 = v21;
      v9[v22] = v23;
      *(_QWORD *)(v10 + 8 * v22) = *(_QWORD *)(v10 + 8 * v21);
      v21 *= 2;
      v20 = (2 * v19) | 1;
      v22 = v19;
      if (v21 > a6)
        goto LABEL_20;
    }
    v23 = v9[v20];
    v21 = v20;
    if (v24 >= v16)
      goto LABEL_17;
LABEL_19:
    v19 = v22;
LABEL_20:
    v9[v19] = v16;
    *(_QWORD *)(v10 + 8 * v19) = v8;
LABEL_21:
    ++v8;
  }
  while (v8 != a3);
  return result;
}

unsigned __int8 *faiss::pq_estimators_from_tables_M4<unsigned char,faiss::CMin<float,long long>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;

  if (!a2)
    return result;
  v7 = 0;
  v8 = a3 + 4 * a4;
  v9 = v8 + 4 * a4;
  v10 = v9 + 4 * a4;
  v11 = a6 - 1;
  v12 = a7 - 8;
  do
  {
    v13 = (float)((float)(*(float *)(a3 + 4 * *result) + *(float *)(v8 + 4 * result[1]))
                + *(float *)(v9 + 4 * result[2]))
        + *(float *)(v10 + 4 * result[3]);
    if (*a6 >= v13)
      goto LABEL_16;
    if (a5 < 2)
    {
      v14 = 1;
      goto LABEL_15;
    }
    v15 = 3;
    v16 = 2;
    v17 = 1;
    while (1)
    {
      v18 = v11[v16];
      if (v15 != a5 + 1)
      {
        v19 = v11[v15];
        if (v18 >= v19)
          break;
      }
      if (v18 > v13)
        goto LABEL_14;
LABEL_12:
      v14 = v16;
      v11[v17] = v18;
      *(_QWORD *)(v12 + 8 * v17) = *(_QWORD *)(v12 + 8 * v16);
      v16 *= 2;
      v15 = (2 * v14) | 1;
      v17 = v14;
      if (v16 > a5)
        goto LABEL_15;
    }
    v18 = v11[v15];
    v16 = v15;
    if (v19 <= v13)
      goto LABEL_12;
LABEL_14:
    v14 = v17;
LABEL_15:
    v11[v14] = v13;
    *(_QWORD *)(v12 + 8 * v14) = v7;
LABEL_16:
    result += 4;
    ++v7;
  }
  while (v7 != a2);
  return result;
}

uint64_t faiss::pq_estimators_from_tables_Mmul4<unsigned char,faiss::CMin<float,long long>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float *a7, uint64_t a8)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;

  if (!a3)
    return result;
  v8 = 0;
  v9 = a7 - 1;
  v10 = a8 - 8;
  v11 = 16 * a5;
  v12 = 12 * a5;
  v13 = 8 * a5;
  v14 = 4 * a5;
  do
  {
    if ((_DWORD)result)
    {
      v15 = 0;
      v16 = 0.0;
      v17 = a4;
      do
      {
        v16 = v16
            + (float)((float)((float)(*(float *)(v17 + 4 * *(unsigned __int8 *)(a2 + v15))
                                    + *(float *)(v17 + v14 + 4 * *(unsigned __int8 *)(a2 + v15 + 1)))
                            + *(float *)(v17 + v13 + 4 * *(unsigned __int8 *)(a2 + v15 + 2)))
                    + *(float *)(v17 + v12 + 4 * *(unsigned __int8 *)(a2 + v15 + 3)));
        v15 += 4;
        v17 += v11;
      }
      while (v15 < (int)result);
      a2 += v15;
    }
    else
    {
      v16 = 0.0;
    }
    if (*a7 >= v16)
      goto LABEL_21;
    if (a6 < 2)
    {
      v18 = 1;
      goto LABEL_20;
    }
    v19 = 3;
    v20 = 2;
    v21 = 1;
    while (1)
    {
      v22 = v9[v20];
      if (v19 != a6 + 1)
      {
        v23 = v9[v19];
        if (v22 >= v23)
          break;
      }
      if (v22 > v16)
        goto LABEL_19;
LABEL_17:
      v18 = v20;
      v9[v21] = v22;
      *(_QWORD *)(v10 + 8 * v21) = *(_QWORD *)(v10 + 8 * v20);
      v20 *= 2;
      v19 = (2 * v18) | 1;
      v21 = v18;
      if (v20 > a6)
        goto LABEL_20;
    }
    v22 = v9[v19];
    v20 = v19;
    if (v23 <= v16)
      goto LABEL_17;
LABEL_19:
    v18 = v21;
LABEL_20:
    v9[v18] = v16;
    *(_QWORD *)(v10 + 8 * v18) = v8;
LABEL_21:
    ++v8;
  }
  while (v8 != a3);
  return result;
}

unsigned __int16 *faiss::pq_estimators_from_tables_M4<unsigned short,faiss::CMin<float,long long>>(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;

  if (!a2)
    return result;
  v7 = 0;
  v8 = a3 + 4 * a4;
  v9 = v8 + 4 * a4;
  v10 = v9 + 4 * a4;
  v11 = a6 - 1;
  v12 = a7 - 8;
  do
  {
    v13 = (float)((float)(*(float *)(a3 + 4 * *result) + *(float *)(v8 + 4 * result[1]))
                + *(float *)(v9 + 4 * result[2]))
        + *(float *)(v10 + 4 * result[3]);
    if (*a6 >= v13)
      goto LABEL_16;
    if (a5 < 2)
    {
      v14 = 1;
      goto LABEL_15;
    }
    v15 = 3;
    v16 = 2;
    v17 = 1;
    while (1)
    {
      v18 = v11[v16];
      if (v15 != a5 + 1)
      {
        v19 = v11[v15];
        if (v18 >= v19)
          break;
      }
      if (v18 > v13)
        goto LABEL_14;
LABEL_12:
      v14 = v16;
      v11[v17] = v18;
      *(_QWORD *)(v12 + 8 * v17) = *(_QWORD *)(v12 + 8 * v16);
      v16 *= 2;
      v15 = (2 * v14) | 1;
      v17 = v14;
      if (v16 > a5)
        goto LABEL_15;
    }
    v18 = v11[v15];
    v16 = v15;
    if (v19 <= v13)
      goto LABEL_12;
LABEL_14:
    v14 = v17;
LABEL_15:
    v11[v14] = v13;
    *(_QWORD *)(v12 + 8 * v14) = v7;
LABEL_16:
    result += 4;
    ++v7;
  }
  while (v7 != a2);
  return result;
}

uint64_t faiss::pq_estimators_from_tables_Mmul4<unsigned short,faiss::CMin<float,long long>>(uint64_t result, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float *a7, uint64_t a8)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;

  if (!a3)
    return result;
  v8 = 0;
  v9 = a7 - 1;
  v10 = a8 - 8;
  v11 = 16 * a5;
  v12 = 12 * a5;
  v13 = 8 * a5;
  v14 = 4 * a5;
  do
  {
    if ((_DWORD)result)
    {
      v15 = 0;
      v16 = 0.0;
      v17 = a4;
      do
      {
        v18 = a2 + 4;
        v16 = v16
            + (float)((float)((float)(*(float *)(v17 + 4 * *a2) + *(float *)(v17 + v14 + 4 * a2[1]))
                            + *(float *)(v17 + v13 + 4 * a2[2]))
                    + *(float *)(v17 + v12 + 4 * a2[3]));
        v15 += 4;
        v17 += v11;
        a2 += 4;
      }
      while (v15 < (int)result);
      a2 = v18;
    }
    else
    {
      v16 = 0.0;
    }
    if (*a7 >= v16)
      goto LABEL_21;
    if (a6 < 2)
    {
      v19 = 1;
      goto LABEL_20;
    }
    v20 = 3;
    v21 = 2;
    v22 = 1;
    while (1)
    {
      v23 = v9[v21];
      if (v20 != a6 + 1)
      {
        v24 = v9[v20];
        if (v23 >= v24)
          break;
      }
      if (v23 > v16)
        goto LABEL_19;
LABEL_17:
      v19 = v21;
      v9[v22] = v23;
      *(_QWORD *)(v10 + 8 * v22) = *(_QWORD *)(v10 + 8 * v21);
      v21 *= 2;
      v20 = (2 * v19) | 1;
      v22 = v19;
      if (v21 > a6)
        goto LABEL_20;
    }
    v23 = v9[v20];
    v21 = v20;
    if (v24 <= v16)
      goto LABEL_17;
LABEL_19:
    v19 = v22;
LABEL_20:
    v9[v19] = v16;
    *(_QWORD *)(v10 + 8 * v19) = v8;
LABEL_21:
    ++v8;
  }
  while (v8 != a3);
  return result;
}

void faiss::decode<faiss::PQDecoder8>()
{
  __assert_rtn("PQDecoder8", "ProductQuantizer-inl.h", 100, "8 == nbits_in");
}

void faiss::decode<faiss::PQDecoder16>()
{
  __assert_rtn("PQDecoder16", "ProductQuantizer-inl.h", 109, "16 == nbits_in");
}

void faiss::decode<faiss::PQDecoderGeneric>()
{
  __assert_rtn("PQDecoderGeneric", "ProductQuantizer-inl.h", 69, "nbits <= 64");
}

void faiss::ProductQuantizer::compute_code_from_distance_table()
{
  __assert_rtn("PQEncoderGeneric", "ProductQuantizer-inl.h", 15, "nbits <= 64");
}

float faiss::fvec_L2sqr_ref(faiss *this, float *a2, const float *a3)
{
  float result;
  float v4;
  float v5;
  float v6;

  for (result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    v5 = v4;
    v6 = *a2++;
    result = result + (float)((float)(v5 - v6) * (float)(v5 - v6));
  }
  return result;
}

float faiss::fvec_L1_ref(faiss *this, float *a2, const float *a3)
{
  float result;
  float v4;
  float v5;
  float v6;

  for (result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    v5 = v4;
    v6 = *a2++;
    result = result + vabds_f32(v5, v6);
  }
  return result;
}

float faiss::fvec_Linf_ref(faiss *this, float *a2, const float *a3)
{
  float result;
  float v4;
  float v5;
  float v6;

  for (result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    v5 = v4;
    v6 = *a2++;
    result = fmaxf(result, vabds_f32(v5, v6));
  }
  return result;
}

float faiss::fvec_inner_product_ref(faiss *this, float *a2, const float *a3)
{
  float result;
  float v4;
  float v5;
  float v6;

  for (result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    v5 = v4;
    v6 = *a2++;
    result = result + (float)(v5 * v6);
  }
  return result;
}

float faiss::fvec_norm_L2sqr_ref(faiss *this, const float *a2)
{
  double v2;
  float v3;

  if (!a2)
    return 0.0;
  v2 = 0.0;
  do
  {
    v3 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    v2 = v2 + (float)(v3 * v3);
    a2 = (const float *)((char *)a2 - 1);
  }
  while (a2);
  return v2;
}

void faiss::fvec_L2sqr_ny_ref(faiss *this, faiss *a2, const float *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;

  if (a5)
  {
    v5 = a5;
    v10 = 4 * a4;
    do
    {
      *(float *)this = faiss::fvec_L2sqr(a2, a3, a4);
      this = (faiss *)((char *)this + 4);
      a3 = (const float *)((char *)a3 + v10);
      --v5;
    }
    while (v5);
  }
}

float faiss::fvec_L2sqr(faiss *this, const float *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  float32x4_t v5;
  faiss *v6;
  const float *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unint64_t v12;
  float result;
  char *v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;

  v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a3 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    v4 = 0;
    v5 = 0uLL;
    v6 = this;
    v7 = a2;
    do
    {
      v8 = *(float32x4_t *)v6;
      v6 = (faiss *)((char *)v6 + 16);
      v9 = v8;
      v10 = *(float32x4_t *)v7;
      v7 += 4;
      v11 = vsubq_f32(v9, v10);
      v5 = vmlaq_f32(v5, v11, v11);
      v4 += 4;
    }
    while (v4 < v3);
    v12 = ((v3 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else
  {
    v12 = 0;
    v5 = 0uLL;
  }
  result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v5, v5));
  v14 = (char *)(a3 - v12);
  if (a3 > v12)
  {
    v15 = (float *)&a2[v12];
    v16 = (float *)((char *)this + 4 * v12);
    do
    {
      v17 = *v16++;
      v18 = v17;
      v19 = *v15++;
      result = result + (float)((float)(v18 - v19) * (float)(v18 - v19));
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t faiss::fvec_inner_products_ny_ref(uint64_t this, float *a2, const float *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float32x4_t v9;
  float v10;

  if (a5)
  {
    v5 = 0;
    v6 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v7 = 0;
      if (v6)
      {
        v8 = 0;
        v9 = 0uLL;
        do
        {
          v9 = vmlaq_f32(v9, *(float32x4_t *)((char *)a3 + v7), *(float32x4_t *)((char *)a2 + v7));
          v8 += 4;
          v7 += 16;
        }
        while (v8 < v6);
        v7 = (((a4 & 0xFFFFFFFFFFFFFFFCLL) - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      }
      else
      {
        v9 = 0uLL;
      }
      v10 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9));
      if (v7 < a4)
      {
        do
        {
          v10 = v10 + (float)(a2[v7] * a3[v7]);
          ++v7;
        }
        while (a4 != v7);
      }
      *(float *)(this + 4 * v5++) = v10;
      a3 += a4;
    }
    while (v5 != a5);
  }
  return this;
}

float faiss::fvec_inner_product(faiss *this, const float *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  float32x4_t v5;
  faiss *v6;
  const float *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unint64_t v11;
  float result;
  char *v13;
  float *v14;
  float *v15;
  float v16;
  float v17;
  float v18;

  v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a3 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    v4 = 0;
    v5 = 0uLL;
    v6 = this;
    v7 = a2;
    do
    {
      v8 = *(float32x4_t *)v6;
      v6 = (faiss *)((char *)v6 + 16);
      v9 = v8;
      v10 = *(float32x4_t *)v7;
      v7 += 4;
      v5 = vmlaq_f32(v5, v10, v9);
      v4 += 4;
    }
    while (v4 < v3);
    v11 = ((v3 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else
  {
    v11 = 0;
    v5 = 0uLL;
  }
  result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v5, v5));
  v13 = (char *)(a3 - v11);
  if (a3 > v11)
  {
    v14 = (float *)&a2[v11];
    v15 = (float *)((char *)this + 4 * v11);
    do
    {
      v16 = *v15++;
      v17 = v16;
      v18 = *v14++;
      result = result + (float)(v17 * v18);
      --v13;
    }
    while (v13);
  }
  return result;
}

float faiss::fvec_norm_L2sqr(faiss *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  float32x4_t v4;
  faiss *v5;
  float32x4_t v6;
  float result;
  char *v8;
  float *v9;
  float v10;

  v2 = 0;
  v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    v4 = 0uLL;
    v5 = this;
    do
    {
      v6 = *(float32x4_t *)v5;
      v5 = (faiss *)((char *)v5 + 16);
      v4 = vmlaq_f32(v4, v6, v6);
      v2 += 4;
    }
    while (v2 < v3);
    v2 = ((v3 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else
  {
    v4 = 0uLL;
  }
  result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v4, v4));
  v8 = (char *)(a2 - v2);
  if (a2 > v2)
  {
    v9 = (float *)((char *)this + 4 * v2);
    do
    {
      v10 = *v9++;
      result = result + (float)(v10 * v10);
      --v8;
    }
    while (v8);
  }
  return result;
}

void faiss::fvec_L2sqr_ny(faiss *this, faiss *a2, const float *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;

  if (a5)
  {
    v5 = a5;
    v10 = 4 * a4;
    do
    {
      *(float *)this = faiss::fvec_L2sqr(a2, a3, a4);
      this = (faiss *)((char *)this + 4);
      a3 = (const float *)((char *)a3 + v10);
      --v5;
    }
    while (v5);
  }
}

float faiss::fvec_L1(faiss *this, float *a2, const float *a3)
{
  float result;
  float v4;
  float v5;
  float v6;

  for (result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    v5 = v4;
    v6 = *a2++;
    result = result + vabds_f32(v5, v6);
  }
  return result;
}

float faiss::fvec_Linf(faiss *this, float *a2, const float *a3)
{
  float result;
  float v4;
  float v5;
  float v6;

  for (result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    v5 = v4;
    v6 = *a2++;
    result = fmaxf(result, vabds_f32(v5, v6));
  }
  return result;
}

uint64_t faiss::fvec_madd(uint64_t this, float *a2, float *a3, float a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;

  for (; this; --this)
  {
    v6 = *a2++;
    v7 = v6;
    v8 = *a3++;
    *a5++ = v7 + (float)(a4 * v8);
  }
  return this;
}

uint64_t faiss::fvec_madd_and_argmin(uint64_t this, uint64_t a2, const float *a3, float a4, const float *a5, float *a6)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;

  if (!this)
    return 0xFFFFFFFFLL;
  v6 = this;
  v7 = 0;
  LODWORD(this) = -1;
  v8 = 1.0e20;
  do
  {
    v9 = *(float *)(a2 + 4 * v7) + (float)(a4 * a3[v7]);
    a5[v7] = v9;
    if (v9 >= v8)
    {
      this = this;
    }
    else
    {
      v8 = v9;
      this = v7;
    }
    ++v7;
  }
  while (v6 != v7);
  return this;
}

unint64_t faiss::compute_PQ_dis_tables_dsub2(unint64_t result, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int32x4_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, size_t __na, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int32x4_t __dst,float32x4_t a54,int32x4_t a55,int32x4_t a56,int32x4_t a57,int32x4_t a58,int32x4_t a59,int32x4_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  float32x4_t v82;
  int32x4_t *v83;
  uint64_t v84;
  uint64_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  unint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t *v96;
  int32x4_t *v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t *v111;
  int32x4_t *v112;
  int32x4_t *v113;
  int32x4_t *v114;
  int v115;
  char *v116;
  size_t v117;
  void *exception;
  uint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t vars8;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t __n;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;

  a64 = *MEMORY[0x1E0C80C00];
  if ((a2 & 7) != 0)
  {
    a22 = 0uLL;
    a23 = 0;
    v115 = snprintf(0, 0, "Error: '%s' failed", "ksub % 8 == 0");
    std::string::resize((std::string *)&a22, v115 + 1, 0);
    if (a23 >= 0)
      v116 = (char *)&a22;
    else
      v116 = (char *)a22;
    if (a23 >= 0)
      v117 = HIBYTE(a23);
    else
      v117 = *((_QWORD *)&a22 + 1);
    snprintf(v116, v117, "Error: '%s' failed", "ksub % 8 == 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &a22, "void faiss::compute_PQ_dis_tables_dsub2(size_t, size_t, const float *, size_t, const float *, BOOL, float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/distances_simd.cpp", 931);
  }
  if (result >= 2)
  {
    v122 = 0;
    v66 = 0;
    v67 = result >> 1;
    v135 = 2 * a2;
    v120 = 32 * a2;
    v68 = 8 * a2;
    v69 = 4;
    v128 = 3 * a2;
    v129 = result;
    v130 = a2;
    do
    {
      v121 = v69;
      if (v69 >= v67)
        v70 = v67;
      else
        v70 = v69;
      v71 = v66 + 4;
      if (a2)
      {
        v127 = 0;
        v72 = v122 + v70;
        if (v71 >= v67)
          v73 = v67;
        else
          v73 = v66 + 4;
        v74 = (int)v73;
        v75 = a5 + 8 * v66;
        v136 = v73 - v66;
        __n = 8 * ((v73 - v66) & 0x7FFFFFFF);
        v133 = v75;
        v76 = (int)v73 - v66;
        v77 = a3;
        vars8 = v73;
        v134 = (int)v73;
        v131 = v66;
        do
        {
          v78 = 0;
          v79 = v77;
          do
          {
            if ((int)v66 < (int)v73)
            {
              v80 = 0;
              v81 = v79;
              do
              {
                __dst.i64[v80++] = *v81;
                v81 = (uint64_t *)((char *)v81 + v68);
              }
              while (v72 != (_DWORD)v80);
              a8 = __dst;
            }
            v82 = a54;
            v83 = (int32x4_t *)(&a22 + 2 * v78);
            *v83 = a8;
            v83[1] = (int32x4_t)v82;
            ++v78;
            ++v79;
          }
          while (v78 != 8);
          v126 = v77;
          if (a4)
          {
            v84 = 0;
            v85 = a7 + 4 * v127;
            do
            {
              if (v74 == v71)
              {
                v86 = (float32x4_t *)(v75 + 4 * v84 * result);
                v88 = *v86;
                v87 = v86[1];
              }
              else
              {
                v87 = 0uLL;
                __dst = 0u;
                a54 = 0u;
                if (v136 < 1)
                {
                  v88 = 0uLL;
                }
                else
                {
                  memcpy(&__dst, (const void *)(v75 + 4 * v84 * result), __n);
                  v74 = v134;
                  v85 = a7 + 4 * v127;
                  v75 = v133;
                  a2 = v130;
                  v66 = v131;
                  result = v129;
                  v88 = (float32x4_t)__dst;
                  v87 = a54;
                }
              }
              v89 = (v66 + v84 * v67) * a2;
              v90 = 0;
              v91 = (float32x4_t *)&a25;
              if (a6)
              {
                do
                {
                  v92 = vmulq_f32(v88, v91[-2]);
                  v93 = vmulq_f32(v87, v91[-1]);
                  v94 = *v91;
                  v95 = v91[1];
                  v91 += 4;
                  v96 = (float32x4_t *)&__dst.i8[v90];
                  *v96 = vpaddq_f32(v92, vmulq_f32(v88, v94));
                  v96[1] = vpaddq_f32(v93, vmulq_f32(v87, v95));
                  v90 += 32;
                }
                while (v90 != 128);
                v97 = (int32x4_t *)(v85 + 4 * v89);
                a8 = __dst;
                v98 = (int32x4_t)a54;
                v99 = a55;
                v100 = a56;
                v101 = a57;
                v102 = a58;
                v103 = a59;
                v104 = a60;
                switch(v76)
                {
                  case 1uLL:
                    goto LABEL_33;
                  case 2uLL:
                    goto LABEL_32;
                  case 3uLL:
                    goto LABEL_31;
                  case 4uLL:
                    goto LABEL_30;
                  default:
                    break;
                }
              }
              else
              {
                do
                {
                  v105 = vsubq_f32(v88, v91[-2]);
                  v106 = vsubq_f32(v87, v91[-1]);
                  v107 = *v91;
                  v108 = v91[1];
                  v91 += 4;
                  v109 = vsubq_f32(v88, v107);
                  v110 = vsubq_f32(v87, v108);
                  v111 = (float32x4_t *)&__dst.i8[v90];
                  *v111 = vpaddq_f32(vmulq_f32(v105, v105), vmulq_f32(v109, v109));
                  v111[1] = vpaddq_f32(vmulq_f32(v106, v106), vmulq_f32(v110, v110));
                  v90 += 32;
                }
                while (v90 != 128);
                v97 = (int32x4_t *)(v85 + 4 * v89);
                a8 = __dst;
                v98 = (int32x4_t)a54;
                v99 = a55;
                v100 = a56;
                v101 = a57;
                v102 = a58;
                v103 = a59;
                v104 = a60;
                switch(v76)
                {
                  case 1uLL:
                    goto LABEL_33;
                  case 2uLL:
                    goto LABEL_32;
                  case 3uLL:
                    goto LABEL_31;
                  case 4uLL:
LABEL_30:
                    v112 = (int32x4_t *)((char *)v97 + 4 * v128);
                    *v112 = vuzp2q_s32(v98, v100);
                    v112[1] = vuzp2q_s32(v102, v104);
LABEL_31:
                    v113 = (int32x4_t *)((char *)v97 + 4 * v135);
                    *v113 = vuzp1q_s32(v98, v100);
                    v113[1] = vuzp1q_s32(v102, v104);
LABEL_32:
                    v114 = (int32x4_t *)((char *)v97 + 4 * a2);
                    *v114 = vuzp2q_s32(a8, v99);
                    v114[1] = vuzp2q_s32(v101, v103);
LABEL_33:
                    a8 = vuzp1q_s32(a8, v99);
                    *v97 = a8;
                    v97[1] = vuzp1q_s32(v101, v103);
                    break;
                  default:
                    break;
                }
              }
              ++v84;
            }
            while (v84 != a4);
          }
          v77 = v126 + 8;
          v127 += 8;
          LODWORD(v73) = vars8;
        }
        while (v127 < a2);
      }
      v69 = v121 + 4;
      v122 -= 4;
      a3 = (uint64_t *)((char *)a3 + v120);
      v66 = v71;
    }
    while (v71 < v67);
  }
  return result;
}

void sub_1D48DF9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  __cxa_free_exception(v38);
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *faiss::InvertedLists::InvertedLists(_QWORD *this, uint64_t a2, uint64_t a3)
{
  *this = &unk_1E9805DD8;
  this[1] = a2;
  this[2] = a3;
  return this;
}

uint64_t faiss::InvertedLists::get_single_id(faiss::InvertedLists *this, uint64_t a2, unint64_t a3)
{
  if ((**(uint64_t (***)(faiss::InvertedLists *))this)(this) <= a3)
    faiss::InvertedLists::get_single_id();
  return *(_QWORD *)((*(uint64_t (**)(faiss::InvertedLists *, uint64_t))(*(_QWORD *)this + 16))(this, a2)
                   + 8 * a3);
}

unint64_t faiss::InvertedLists::get_single_code(faiss::InvertedLists *this, uint64_t a2, unint64_t a3)
{
  if ((**(uint64_t (***)(faiss::InvertedLists *))this)(this) <= a3)
    faiss::InvertedLists::get_single_code();
  return (*(uint64_t (**)(faiss::InvertedLists *, uint64_t))(*(_QWORD *)this + 8))(this, a2)
       + *((_QWORD *)this + 2) * a3;
}

uint64_t faiss::InvertedLists::add_entry(faiss::InvertedLists *this, uint64_t a2, uint64_t a3, const unsigned __int8 *a4)
{
  uint64_t v5;

  v5 = a3;
  return (*(uint64_t (**)(faiss::InvertedLists *, uint64_t, uint64_t, uint64_t *, const unsigned __int8 *))(*(_QWORD *)this + 72))(this, a2, 1, &v5, a4);
}

uint64_t faiss::InvertedLists::update_entry(faiss::InvertedLists *this, uint64_t a2, uint64_t a3, uint64_t a4, const unsigned __int8 *a5)
{
  uint64_t v6;

  v6 = a4;
  return (*(uint64_t (**)(faiss::InvertedLists *, uint64_t, uint64_t, uint64_t, uint64_t *, const unsigned __int8 *))(*(_QWORD *)this + 88))(this, a2, a3, 1, &v6, a5);
}

_QWORD *faiss::InvertedLists::reset(_QWORD *this)
{
  _QWORD *v1;
  unint64_t v2;

  if (this[1])
  {
    v1 = this;
    v2 = 0;
    do
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, _QWORD))(*v1 + 96))(v1, v2++, 0);
    while (v2 < v1[1]);
  }
  return this;
}

_QWORD *faiss::InvertedLists::merge_from(_QWORD *this, faiss::InvertedLists *a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[3];

  if (this[1])
  {
    v5 = this;
    v6 = 0;
    do
    {
      v7 = (**(uint64_t (***)(faiss::InvertedLists *, unint64_t))a2)(a2, v6);
      v8 = (*(uint64_t (**)(faiss::InvertedLists *, unint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
      if (a3)
      {
        std::vector<long long>::vector(__p, v7);
        v9 = __p[0];
        v10 = __p[0];
        v11 = (uint64_t *)v8;
        for (i = v7; i; --i)
        {
          v13 = *v11++;
          *v10++ = v13 + a3;
        }
        v14 = (*(uint64_t (**)(faiss::InvertedLists *, unint64_t))(*(_QWORD *)a2 + 8))(a2, v6);
        (*(void (**)(_QWORD *, unint64_t, unint64_t, void *, uint64_t))(*v5 + 72))(v5, v6, v7, v9, v14);
        (*(void (**)(faiss::InvertedLists *, unint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v6, v14);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        v15 = (*(uint64_t (**)(faiss::InvertedLists *, unint64_t))(*(_QWORD *)a2 + 8))(a2, v6);
        (*(void (**)(_QWORD *, unint64_t, unint64_t, uint64_t, uint64_t))(*v5 + 72))(v5, v6, v7, v8, v15);
        (*(void (**)(faiss::InvertedLists *, unint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v6, v15);
      }
      (*(void (**)(faiss::InvertedLists *, unint64_t, _QWORD))(*(_QWORD *)a2 + 96))(a2, v6, 0);
      this = (_QWORD *)(*(uint64_t (**)(faiss::InvertedLists *, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v6++, v8);
    }
    while (v6 < v5[1]);
  }
  return this;
}

void sub_1D48DFD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, v12, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, v12, v13);
  _Unwind_Resume(a1);
}

double faiss::InvertedLists::imbalance_factor(faiss::InvertedLists *this)
{
  const int *v2;
  unint64_t v3;
  int v4;
  int *begin;
  faiss *v6;
  double v7;
  std::vector<int> v9;

  std::vector<int>::vector(&v9, *((_QWORD *)this + 1));
  if (*((_QWORD *)this + 1))
  {
    v3 = 0;
    do
    {
      v4 = (**(uint64_t (***)(faiss::InvertedLists *, unint64_t))this)(this, v3);
      begin = v9.__begin_;
      v9.__begin_[v3++] = v4;
      v6 = (faiss *)*((_QWORD *)this + 1);
    }
    while (v3 < (unint64_t)v6);
  }
  else
  {
    v6 = 0;
    begin = v9.__begin_;
  }
  v7 = faiss::imbalance_factor(v6, begin, v2);
  if (v9.__begin_)
  {
    v9.__end_ = v9.__begin_;
    operator delete(v9.__begin_);
  }
  return v7;
}

void sub_1D48DFE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void faiss::InvertedLists::print_stats(faiss::InvertedLists *this)
{
  int *begin;
  unint64_t v3;
  unint64_t v4;
  std::vector<int>::pointer end;
  unint64_t v6;
  int v7;
  std::vector<int> v8;

  std::vector<int>::vector(&v8, 0x28uLL);
  begin = v8.__begin_;
  if (*((_QWORD *)this + 1))
  {
    v3 = 0;
    do
    {
      if (v8.__end_ != begin)
      {
        v4 = 0;
        while ((unint64_t)(**(uint64_t (***)(faiss::InvertedLists *, unint64_t))this)(this, v3) >> v4)
        {
          ++v4;
          begin = v8.__begin_;
          if (v4 >= v8.__end_ - v8.__begin_)
            goto LABEL_9;
        }
        begin = v8.__begin_;
        ++v8.__begin_[v4];
      }
LABEL_9:
      ++v3;
    }
    while (v3 < *((_QWORD *)this + 1));
  }
  end = v8.__end_;
  if (v8.__end_ != begin)
  {
    v6 = 0;
    do
    {
      v7 = begin[v6];
      if (v7)
      {
        printf("list size in < %d: %d instances\n", 1 << v6, v7);
        begin = v8.__begin_;
        end = v8.__end_;
      }
      ++v6;
    }
    while (v6 < end - begin);
  }
  if (begin)
  {
    v8.__end_ = begin;
    operator delete(begin);
  }
}

void sub_1D48DFF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t faiss::InvertedLists::compute_ntotal(faiss::InvertedLists *this)
{
  unint64_t v2;
  uint64_t v3;

  if (!*((_QWORD *)this + 1))
    return 0;
  v2 = 0;
  v3 = 0;
  do
    v3 += (**(uint64_t (***)(faiss::InvertedLists *, uint64_t))this)(this, v2++);
  while (v2 < *((_QWORD *)this + 1));
  return v3;
}

faiss::ArrayInvertedLists *faiss::ArrayInvertedLists::ArrayInvertedLists(faiss::ArrayInvertedLists *this, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *(_QWORD *)this = off_1E9806258;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (uint64_t *)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  std::vector<std::vector<long long>>::resize((uint64_t *)this + 6, a2);
  std::vector<std::vector<unsigned char>>::resize(v5, a2);
  return this;
}

void sub_1D48E0068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<long long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<long long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<unsigned char>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned char>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t faiss::ArrayInvertedLists::add_entries(faiss::ArrayInvertedLists *this, unint64_t a2, uint64_t a3, const uint64_t *a4, const unsigned __int8 *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  if (!a3)
    return 0;
  if (*((_QWORD *)this + 1) <= a2)
    faiss::ArrayInvertedLists::add_entries();
  v10 = (_QWORD *)(*((_QWORD *)this + 6) + 24 * a2);
  v11 = v10[1] - *v10;
  v12 = v11 >> 3;
  v13 = a3 + (v11 >> 3);
  std::vector<long long>::resize((uint64_t)v10, v13);
  memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 6) + 24 * a2) + v11), a4, 8 * a3);
  v14 = *((_QWORD *)this + 2);
  v15 = (unint64_t *)(*((_QWORD *)this + 3) + 24 * a2);
  v16 = *v15;
  v17 = v15[1] - *v15;
  if (v14 * v13 <= v17)
  {
    if (v14 * v13 < v17)
      v15[1] = v16 + v14 * v13;
  }
  else
  {
    std::vector<unsigned char>::__append(v15, v14 * v13 - v17);
    v14 = *((_QWORD *)this + 2);
    v16 = *(_QWORD *)(*((_QWORD *)this + 3) + 24 * a2);
  }
  memcpy((void *)(v16 + v14 * v12), a5, v14 * a3);
  return v12;
}

uint64_t faiss::ArrayInvertedLists::list_size(faiss::ArrayInvertedLists *this, unint64_t a2)
{
  if (*((_QWORD *)this + 1) <= a2)
    faiss::ArrayInvertedLists::list_size();
  return (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 6) + 24 * a2 + 8) - *(_QWORD *)(*((_QWORD *)this + 6) + 24 * a2)) >> 3;
}

uint64_t faiss::ArrayInvertedLists::get_codes(faiss::ArrayInvertedLists *this, unint64_t a2)
{
  if (*((_QWORD *)this + 1) <= a2)
    faiss::ArrayInvertedLists::get_codes();
  return *(_QWORD *)(*((_QWORD *)this + 3) + 24 * a2);
}

uint64_t faiss::ArrayInvertedLists::get_ids(faiss::ArrayInvertedLists *this, unint64_t a2)
{
  if (*((_QWORD *)this + 1) <= a2)
    faiss::ArrayInvertedLists::get_ids();
  return *(_QWORD *)(*((_QWORD *)this + 6) + 24 * a2);
}

void faiss::ArrayInvertedLists::resize(faiss::ArrayInvertedLists *this, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v5 = 3 * a2;
  std::vector<long long>::resize(*((_QWORD *)this + 6) + 24 * a2, a3);
  v6 = (unint64_t *)(*((_QWORD *)this + 3) + 8 * v5);
  v7 = *((_QWORD *)this + 2) * a3;
  v8 = v6[1] - *v6;
  if (v7 <= v8)
  {
    if (v7 < v8)
      v6[1] = *v6 + v7;
  }
  else
  {
    std::vector<unsigned char>::__append(v6, v7 - v8);
  }
}

void *faiss::ArrayInvertedLists::update_entries(faiss::ArrayInvertedLists *this, unint64_t a2, uint64_t a3, uint64_t a4, void *__src, const unsigned __int8 *a6)
{
  uint64_t v10;

  if (*((_QWORD *)this + 1) <= a2)
    faiss::ArrayInvertedLists::update_entries();
  v10 = *(_QWORD *)(*((_QWORD *)this + 6) + 24 * a2);
  if (a4 + a3 > (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 6) + 24 * a2 + 8) - v10) >> 3))
    faiss::ArrayInvertedLists::update_entries();
  memcpy((void *)(v10 + 8 * a3), __src, 8 * a4);
  return memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 3) + 24 * a2) + *((_QWORD *)this + 2) * a3), a6, *((_QWORD *)this + 2) * a4);
}

void faiss::ArrayInvertedLists::~ArrayInvertedLists(faiss::ArrayInvertedLists *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_1E9806258;
  v1 = (void **)((char *)this + 24);
  v2 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_1E9806258;
  v1 = (void **)((char *)this + 24);
  v2 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_1E9806258;
  v2 = (void **)((char *)this + 24);
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1D82628A4](this, 0x10A1C40A1EC57E1);
}

void faiss::ReadOnlyInvertedLists::add_entries(faiss::ReadOnlyInvertedLists *this, unint64_t a2, unint64_t a3, const uint64_t *a4, const unsigned __int8 *a5)
{
  void *exception;
  _QWORD v6[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "not implemented");
  faiss::FaissException::FaissException(exception, v6, "virtual size_t faiss::ReadOnlyInvertedLists::add_entries(size_t, size_t, const idx_t *, const uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 191);
}

void sub_1D48E05EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::ReadOnlyInvertedLists::update_entries(faiss::ReadOnlyInvertedLists *this, unint64_t a2, unint64_t a3, unint64_t a4, const uint64_t *a5, const unsigned __int8 *a6)
{
  void *exception;
  _QWORD v7[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v7, "not implemented");
  faiss::FaissException::FaissException(exception, v7, "virtual void faiss::ReadOnlyInvertedLists::update_entries(size_t, size_t, size_t, const idx_t *, const uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 200);
}

void sub_1D48E0698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::ReadOnlyInvertedLists::resize(faiss::ReadOnlyInvertedLists *this)
{
  void *exception;
  _QWORD v2[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "not implemented");
  faiss::FaissException::FaissException(exception, v2, "virtual void faiss::ReadOnlyInvertedLists::resize(size_t, size_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 204);
}

void sub_1D48E0744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

faiss::HStackInvertedLists *faiss::HStackInvertedLists::HStackInvertedLists(faiss::HStackInvertedLists *this, int a2, const faiss::InvertedLists **a3)
{
  char *v5;
  uint64_t v6;
  char **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  const faiss::InvertedLists *v19;
  int v21;
  std::string *v22;
  size_t v23;
  void *v24;
  int v25;
  std::string *v26;
  size_t size;
  void *exception;
  std::string v29;

  if (a2 < 1)
  {
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *(_QWORD *)this = off_1E98064C8;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    memset(&v29, 0, sizeof(v29));
    v25 = snprintf(0, 0, "Error: '%s' failed", "nil > 0");
    std::string::resize(&v29, v25 + 1, 0);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v29;
    else
      v26 = (std::string *)v29.__r_.__value_.__r.__words[0];
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    else
      size = v29.__r_.__value_.__l.__size_;
    snprintf((char *)v26, size, "Error: '%s' failed", "nil > 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v29, "faiss::HStackInvertedLists::HStackInvertedLists(int, const InvertedLists **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 215);
  }
  v5 = 0;
  v6 = 0;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)*a3 + 8);
  *(_QWORD *)this = off_1E98064C8;
  *((_QWORD *)this + 3) = 0;
  v7 = (char **)((char *)this + 24);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v8 = (_QWORD *)((char *)this + 40);
  v9 = a2;
  do
  {
    if ((unint64_t)v5 >= *v8)
    {
      v10 = (v5 - *v7) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v11 = *v8 - (_QWORD)*v7;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)this + 40, v13);
      else
        v14 = 0;
      v15 = &v14[8 * v10];
      *(_QWORD *)v15 = a3[v6];
      v5 = v15 + 8;
      v17 = (char *)*((_QWORD *)this + 3);
      v16 = (char *)*((_QWORD *)this + 4);
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v15 - 1) = v18;
          v15 -= 8;
        }
        while (v16 != v17);
        v16 = *v7;
      }
      *((_QWORD *)this + 3) = v15;
      *((_QWORD *)this + 4) = v5;
      *((_QWORD *)this + 5) = &v14[8 * v13];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_QWORD *)v5 = a3[v6];
      v5 += 8;
    }
    *((_QWORD *)this + 4) = v5;
    v19 = a3[v6];
    if (*((_QWORD *)v19 + 2) != *((_QWORD *)this + 2) || *((_QWORD *)v19 + 1) != *((_QWORD *)this + 1))
    {
      memset(&v29, 0, sizeof(v29));
      v21 = snprintf(0, 0, "Error: '%s' failed", "ils_in[i]->code_size == code_size && ils_in[i]->nlist == nlist");
      std::string::resize(&v29, v21 + 1, 0);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v29;
      else
        v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        v23 = v29.__r_.__value_.__l.__size_;
      snprintf((char *)v22, v23, "Error: '%s' failed", "ils_in[i]->code_size == code_size && ils_in[i]->nlist == nlist");
      v24 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v24, &v29, "faiss::HStackInvertedLists::HStackInvertedLists(int, const InvertedLists **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 219);
    }
    ++v6;
  }
  while (v6 != v9);
  return this;
}

void sub_1D48E0A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void *v17;
  void *v19;

  __cxa_free_exception(v17);
  if (a15 < 0)
    operator delete(__p);
  v19 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v15 + 32) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::HStackInvertedLists::list_size(faiss::HStackInvertedLists *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) == v2)
    return 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v6 += (***(uint64_t (****)(_QWORD, uint64_t))(v2 + 8 * v5))(*(_QWORD *)(v2 + 8 * v5), a2);
    ++v5;
    v2 = *((_QWORD *)this + 3);
  }
  while (v5 < (*((_QWORD *)this + 4) - v2) >> 3);
  return v6;
}

uint64_t faiss::HStackInvertedLists::get_codes(faiss::HStackInvertedLists *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  const void *v11;

  (**(void (***)(faiss::HStackInvertedLists *))this)(this);
  v4 = operator new[]();
  v5 = v4;
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v6)
  {
    v7 = 0;
    v8 = (char *)v4;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v7);
      v10 = *((_QWORD *)this + 2) * (**(uint64_t (***)(uint64_t, uint64_t))v9)(v9, a2);
      if (v10)
      {
        v11 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2);
        memcpy(v8, v11, v10);
        (*(void (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v9 + 24))(v9, a2, v11);
        v8 += v10;
      }
      ++v7;
      v6 = *((_QWORD *)this + 3);
    }
    while (v7 < (*((_QWORD *)this + 4) - v6) >> 3);
  }
  return v5;
}

void *faiss::HStackInvertedLists::get_single_code(faiss::HStackInvertedLists *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  std::string *v12;
  size_t size;
  void *exception;
  void *v15;
  const void *v16;
  std::string v18;

  v3 = a3;
  v4 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) == v4)
  {
    v10 = a3;
LABEL_5:
    memset(&v18, 0, sizeof(v18));
    v11 = snprintf(0, 0, "offset %zd unknown", v10);
    std::string::resize(&v18, v11 + 1, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v18;
    else
      v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    snprintf((char *)v12, size, "offset %zd unknown", v10);
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v18, "virtual const uint8_t *faiss::HStackInvertedLists::get_single_code(size_t, size_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 260);
  }
  v7 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(v4 + 8 * v7);
    v9 = (**(uint64_t (***)(uint64_t, uint64_t))v8)(v8, a2);
    v10 = v3 - v9;
    if (v3 < v9)
      break;
    ++v7;
    v4 = *((_QWORD *)this + 3);
    v3 -= v9;
    if (v7 >= (*((_QWORD *)this + 4) - v4) >> 3)
      goto LABEL_5;
  }
  v15 = (void *)operator new[]();
  v16 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v8 + 48))(v8, a2, v3);
  memcpy(v15, v16, *((_QWORD *)this + 2));
  (*(void (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v8 + 24))(v8, a2, v16);
  return v15;
}

void sub_1D48E0DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::HStackInvertedLists::release_codes(faiss::HStackInvertedLists *this, unint64_t a2, const unsigned __int8 *a3)
{
  if (a3)
    JUMPOUT(0x1D826288CLL);
}

uint64_t faiss::HStackInvertedLists::get_ids(faiss::HStackInvertedLists *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;

  (**(void (***)(faiss::HStackInvertedLists *))this)(this);
  v4 = operator new[]();
  v5 = v4;
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v6)
  {
    v7 = 0;
    v8 = (char *)v4;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v7);
      v10 = (**(uint64_t (***)(uint64_t, uint64_t))v9)(v9, a2);
      if (v10)
      {
        v11 = v10;
        v12 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2);
        memcpy(v8, v12, 8 * v11);
        (*(void (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v9 + 32))(v9, a2, v12);
        v8 += 8 * v11;
      }
      ++v7;
      v6 = *((_QWORD *)this + 3);
    }
    while (v7 < (*((_QWORD *)this + 4) - v6) >> 3);
  }
  return v5;
}

uint64_t faiss::HStackInvertedLists::get_single_id(faiss::HStackInvertedLists *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::string *v13;
  size_t size;
  void *exception;
  std::string v17;

  v3 = a3;
  v4 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) == v4)
  {
    v10 = a3;
LABEL_5:
    memset(&v17, 0, sizeof(v17));
    v11 = v10;
    v12 = snprintf(0, 0, "offset %zd unknown", v10);
    std::string::resize(&v17, v12 + 1, 0);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v17;
    else
      v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    else
      size = v17.__r_.__value_.__l.__size_;
    snprintf((char *)v13, size, "offset %zd unknown", v11);
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v17, "virtual Index::idx_t faiss::HStackInvertedLists::get_single_id(size_t, size_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 291);
  }
  v7 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(v4 + 8 * v7);
    v9 = (**(uint64_t (***)(uint64_t, uint64_t))v8)(v8, a2);
    v10 = v3 - v9;
    if (v3 < v9)
      return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, a2, v3);
    ++v7;
    v4 = *((_QWORD *)this + 3);
    v3 -= v9;
    if (v7 >= (*((_QWORD *)this + 4) - v4) >> 3)
      goto LABEL_5;
  }
}

void sub_1D48E1050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::HStackInvertedLists::release_ids(faiss::HStackInvertedLists *this, unint64_t a2, const uint64_t *a3)
{
  if (a3)
    JUMPOUT(0x1D826288CLL);
}

uint64_t faiss::HStackInvertedLists::prefetch_lists(uint64_t this, const uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(this + 24);
  if (*(_QWORD *)(this + 32) != v3)
  {
    v6 = this;
    v7 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, const uint64_t *, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 56))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 24);
    }
    while (v7 < (*(_QWORD *)(v6 + 32) - v3) >> 3);
  }
  return this;
}

_QWORD *faiss::SliceInvertedLists::SliceInvertedLists(_QWORD *this, const faiss::InvertedLists *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 2);
  *this = off_1E9806438;
  this[1] = a4 - a3;
  this[2] = v4;
  this[3] = a2;
  this[4] = a3;
  this[5] = a4;
  return this;
}

{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 2);
  *this = off_1E9806438;
  this[1] = a4 - a3;
  this[2] = v4;
  this[3] = a2;
  this[4] = a3;
  this[5] = a4;
  return this;
}

uint64_t faiss::SliceInvertedLists::list_size(faiss::SliceInvertedLists *this, unint64_t a2)
{
  uint64_t (***v2)(_QWORD, unint64_t);
  unint64_t v3;

  v2 = (uint64_t (***)(_QWORD, unint64_t))*((_QWORD *)this + 3);
  return (**v2)(v2, v3);
}

unint64_t faiss::`anonymous namespace'::translate_list_no(faiss::_anonymous_namespace_ *this, unint64_t a2)
{
  int v3;
  std::string *v4;
  size_t size;
  void *exception;
  std::string v7;

  if ((a2 & 0x8000000000000000) != 0 || *((_QWORD *)this + 1) <= a2)
  {
    memset(&v7, 0, sizeof(v7));
    v3 = snprintf(0, 0, "Error: '%s' failed", "list_no >= 0 && list_no < sil->nlist");
    std::string::resize(&v7, v3 + 1, 0);
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v7;
    else
      v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
    else
      size = v7.__r_.__value_.__l.__size_;
    snprintf((char *)v4, size, "Error: '%s' failed", "list_no >= 0 && list_no < sil->nlist");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v7, "idx_t faiss::(anonymous namespace)::translate_list_no(const SliceInvertedLists *, idx_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 315);
  }
  return *((_QWORD *)this + 4) + a2;
}

void sub_1D48E1258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::SliceInvertedLists::get_codes(faiss::SliceInvertedLists *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 3);
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 8))(v2, v3);
}

uint64_t faiss::SliceInvertedLists::get_single_code(faiss::SliceInvertedLists *this, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *((_QWORD *)this + 3);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v5, a3);
}

uint64_t faiss::SliceInvertedLists::release_codes(faiss::SliceInvertedLists *this, unint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *((_QWORD *)this + 3);
  return (*(uint64_t (**)(uint64_t, unint64_t, const unsigned __int8 *))(*(_QWORD *)v4 + 24))(v4, v5, a3);
}

uint64_t faiss::SliceInvertedLists::get_ids(faiss::SliceInvertedLists *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 3);
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
}

uint64_t faiss::SliceInvertedLists::get_single_id(faiss::SliceInvertedLists *this, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *((_QWORD *)this + 3);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v5, a3);
}

uint64_t faiss::SliceInvertedLists::release_ids(faiss::SliceInvertedLists *this, unint64_t a2, const uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *((_QWORD *)this + 3);
  return (*(uint64_t (**)(uint64_t, unint64_t, const uint64_t *))(*(_QWORD *)v4 + 32))(v4, v5, a3);
}

void faiss::SliceInvertedLists::prefetch_lists(faiss::SliceInvertedLists *this, const uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *__p;
  unint64_t *v21;
  unint64_t *v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  if (a3 >= 1)
  {
    v5 = 0;
    v6 = a3;
    do
    {
      v7 = a2[v5];
      if ((v7 & 0x8000000000000000) == 0)
      {
        v9 = v8;
        v10 = v21;
        if (v21 >= v22)
        {
          v12 = __p;
          v13 = v21 - __p;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v15 = (char *)v22 - (char *)__p;
          if (((char *)v22 - (char *)__p) >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)&v22, v16);
            v12 = __p;
            v10 = v21;
          }
          else
          {
            v17 = 0;
          }
          v18 = (unint64_t *)&v17[8 * v13];
          *v18 = v9;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *--v10;
            *--v18 = v19;
          }
          __p = v18;
          v22 = (unint64_t *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v21 = v8;
          v11 = v21 + 1;
        }
        v21 = v11;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  if (__p)
    operator delete(__p);
}

void sub_1D48E1538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

faiss::VStackInvertedLists *faiss::VStackInvertedLists::VStackInvertedLists(faiss::VStackInvertedLists *this, int a2, const faiss::InvertedLists **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  const faiss::InvertedLists *v23;
  uint64_t v24;
  int v26;
  std::string *v27;
  size_t v28;
  void *v29;
  int v30;
  std::string *v31;
  size_t size;
  void *exception;
  std::string v34;

  if (a2 < 1)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
      v7 += *((_QWORD *)a3[v6++] + 1);
    while (a2 != v6);
    v8 = *((_QWORD *)*a3 + 2);
  }
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)this + 2) = v8;
  *(_QWORD *)this = off_1E98067F0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v9 = (char **)((char *)this + 24);
  v10 = (_QWORD *)((char *)this + 48);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (a2 <= 0)
  {
    memset(&v34, 0, sizeof(v34));
    v30 = snprintf(0, 0, "Error: '%s' failed", "nil > 0");
    std::string::resize(&v34, v30 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v34;
    else
      v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    snprintf((char *)v31, size, "Error: '%s' failed", "nil > 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "faiss::VStackInvertedLists::VStackInvertedLists(int, const InvertedLists **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 413);
  }
  std::vector<long long>::resize((uint64_t)this + 48, (a2 + 1));
  v11 = 0;
  v12 = (_QWORD *)((char *)this + 40);
  v13 = (char *)*((_QWORD *)this + 4);
  do
  {
    if ((unint64_t)v13 >= *v12)
    {
      v14 = (v13 - *v9) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v15 = *v12 - (_QWORD)*v9;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)this + 40, v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      *(_QWORD *)v19 = a3[v11];
      v13 = v19 + 8;
      v21 = (char *)*((_QWORD *)this + 3);
      v20 = (char *)*((_QWORD *)this + 4);
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v19 - 1) = v22;
          v19 -= 8;
        }
        while (v20 != v21);
        v20 = *v9;
      }
      *((_QWORD *)this + 3) = v19;
      *((_QWORD *)this + 4) = v13;
      *((_QWORD *)this + 5) = &v18[8 * v17];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v13 = a3[v11];
      v13 += 8;
    }
    *((_QWORD *)this + 4) = v13;
    v23 = a3[v11];
    if (*((_QWORD *)v23 + 2) != *((_QWORD *)this + 2))
    {
      memset(&v34, 0, sizeof(v34));
      v26 = snprintf(0, 0, "Error: '%s' failed", "ils_in[i]->code_size == code_size");
      std::string::resize(&v34, v26 + 1, 0);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v34;
      else
        v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      else
        v28 = v34.__r_.__value_.__l.__size_;
      snprintf((char *)v27, v28, "Error: '%s' failed", "ils_in[i]->code_size == code_size");
      v29 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v29, &v34, "faiss::VStackInvertedLists::VStackInvertedLists(int, const InvertedLists **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 417);
    }
    v24 = *((_QWORD *)v23 + 1) + *(_QWORD *)(*v10 + 8 * v11++);
    *(_QWORD *)(*v10 + 8 * v11) = v24;
  }
  while (v11 != a2);
  return this;
}

void sub_1D48E1880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void **v17;
  void *v18;
  void *v20;
  void *v21;

  __cxa_free_exception(v18);
  if (a15 < 0)
    operator delete(__p);
  v20 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v15 + 56) = v20;
    operator delete(v20);
  }
  v21 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v15 + 32) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::VStackInvertedLists::list_size(faiss::VStackInvertedLists *this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD, uint64_t);

  v5 = a2 - *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v4);
  v6 = *(uint64_t (****)(_QWORD, uint64_t))(*((_QWORD *)this + 3) + 8 * v4);
  return (**v6)(v6, v5);
}

uint64_t faiss::`anonymous namespace'::translate_list_no(faiss::_anonymous_namespace_ *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  size_t size;
  void *exception;
  std::string v13;

  if (a2 < 0 || *((_QWORD *)this + 1) <= (unint64_t)a2)
  {
    memset(&v13, 0, sizeof(v13));
    v9 = snprintf(0, 0, "Error: '%s' failed", "list_no >= 0 && list_no < vil->nlist");
    std::string::resize(&v13, v9 + 1, 0);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    snprintf((char *)v10, size, "Error: '%s' failed", "list_no >= 0 && list_no < vil->nlist");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v13, "int faiss::(anonymous namespace)::translate_list_no(const VStackInvertedLists *, idx_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 384);
  }
  v2 = (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3;
  v3 = *((_QWORD *)this + 6);
  if ((int)v2 < 2)
  {
    result = 0;
    v8 = 1;
  }
  else
  {
    LODWORD(result) = 0;
    do
    {
      v5 = v2 + result;
      if ((int)v2 + (int)result < 0 != __OFADD__((_DWORD)v2, (_DWORD)result))
        ++v5;
      v6 = v5 >> 1;
      v7 = *(_QWORD *)(v3 + 8 * v6);
      if (v7 <= a2)
        result = v6;
      else
        result = result;
      if (v7 > a2)
        LODWORD(v2) = v6;
    }
    while ((int)result + 1 < (int)v2);
    v8 = (int)result + 1;
  }
  if (*(_QWORD *)(v3 + 8 * (int)result) > a2 || *(_QWORD *)(v3 + 8 * v8) <= a2)
  return result;
}

void sub_1D48E1A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::VStackInvertedLists::get_codes(faiss::VStackInvertedLists *this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a2 - *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v4);
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 8))(v6, v5);
}

uint64_t faiss::VStackInvertedLists::get_single_code(faiss::VStackInvertedLists *this, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v6);
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, a2 - v7, a3);
}

uint64_t faiss::VStackInvertedLists::release_codes(faiss::VStackInvertedLists *this, uint64_t a2, const unsigned __int8 *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v6);
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, const unsigned __int8 *))(*(_QWORD *)v8 + 24))(v8, a2 - v7, a3);
}

uint64_t faiss::VStackInvertedLists::get_ids(faiss::VStackInvertedLists *this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a2 - *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v4);
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
}

uint64_t faiss::VStackInvertedLists::get_single_id(faiss::VStackInvertedLists *this, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v6);
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a2 - v7, a3);
}

uint64_t faiss::VStackInvertedLists::release_ids(faiss::VStackInvertedLists *this, uint64_t a2, const uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v6);
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, const uint64_t *))(*(_QWORD *)v8 + 32))(v8, a2 - v7, a3);
}

void faiss::VStackInvertedLists::prefetch_lists(faiss::VStackInvertedLists *this, uint64_t *a2, int a3)
{
  std::vector<int>::size_type v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::vector<int>::size_type v11;
  uint64_t v12;
  uint64_t v13;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer v15;
  int v16;
  int v17;
  std::vector<int>::pointer v18;
  std::vector<int>::pointer v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  void *__p[3];
  std::vector<int> v32;
  std::vector<int> __x;
  std::vector<int> v34;

  LODWORD(__x.__begin_) = -1;
  std::vector<int>::vector(&v34, a3, (const std::vector<int>::value_type *)&__x);
  v6 = (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3;
  LODWORD(v32.__begin_) = 0;
  std::vector<int>::vector(&__x, v6, (const std::vector<int>::value_type *)&v32);
  v7 = a3;
  if (a3 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = a2[v8];
      if ((v9 & 0x8000000000000000) == 0)
      {
        v34.__begin_[v8] = v10;
        ++__x.__begin_[v10];
      }
      ++v8;
    }
    while (a3 != v8);
  }
  v11 = ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) + 1;
  LODWORD(__p[0]) = 0;
  std::vector<int>::vector(&v32, v11, (const std::vector<int>::value_type *)__p);
  v12 = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
  if (v12)
  {
    v13 = v12 >> 3;
    begin = __x.__begin_;
    if ((unint64_t)(v12 >> 3) <= 1)
      v13 = 1;
    v15 = v32.__begin_ + 1;
    v16 = *v32.__begin_;
    do
    {
      v17 = *begin++;
      v16 += v17;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  std::vector<long long>::vector(__p, *(v32.__end_ - 1));
  if (a3 >= 1)
  {
    v18 = v34.__begin_;
    v19 = v32.__begin_;
    v20 = __p[0];
    do
    {
      v22 = *a2++;
      v21 = v22;
      if ((v22 & 0x8000000000000000) == 0)
      {
        v23 = *v18;
        v24 = v19[v23];
        v25 = v21 - *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v23);
        v19[v23] = v24 + 1;
        v20[v24] = v25;
      }
      ++v18;
      --v7;
    }
    while (v7);
  }
  v27 = *((_QWORD *)this + 3);
  v26 = *((_QWORD *)this + 4);
  if (v26 != v27)
  {
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = __x.__begin_[v28];
      if (v30 >= 1)
      {
        (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v27 + 8 * v28) + 56))(*(_QWORD *)(v27 + 8 * v28), (char *)__p[0] + 8 * v29, __x.__begin_[v28]);
        v27 = *((_QWORD *)this + 3);
        v26 = *((_QWORD *)this + 4);
      }
      v29 += v30;
      ++v28;
    }
    while (v28 < (v26 - v27) >> 3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
}

void sub_1D48E1E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

_QWORD *faiss::MaskedInvertedLists::MaskedInvertedLists(_QWORD *this, const faiss::InvertedLists *a2, const faiss::InvertedLists *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  std::string *v6;
  size_t size;
  void *exception;
  int v9;
  std::string *v10;
  size_t v11;
  void *v12;
  std::string v13;

  v4 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  *this = off_1E98066B8;
  this[1] = v4;
  this[2] = v3;
  this[3] = a2;
  this[4] = a3;
  if (*((_QWORD *)a3 + 1) != v4)
  {
    memset(&v13, 0, sizeof(v13));
    v5 = snprintf(0, 0, "Error: '%s' failed", "il1->nlist == nlist");
    std::string::resize(&v13, v5 + 1, 0);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v13;
    else
      v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    snprintf((char *)v6, size, "Error: '%s' failed", "il1->nlist == nlist");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v13, "faiss::MaskedInvertedLists::MaskedInvertedLists(const InvertedLists *, const InvertedLists *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 513);
  }
  if (*((_QWORD *)a3 + 2) != v3)
  {
    memset(&v13, 0, sizeof(v13));
    v9 = snprintf(0, 0, "Error: '%s' failed", "il1->code_size == code_size");
    std::string::resize(&v13, v9 + 1, 0);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      v11 = v13.__r_.__value_.__l.__size_;
    snprintf((char *)v10, v11, "Error: '%s' failed", "il1->code_size == code_size");
    v12 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v12, &v13, "faiss::MaskedInvertedLists::MaskedInvertedLists(const InvertedLists *, const InvertedLists *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 514);
  }
  return this;
}

void sub_1D48E206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::MaskedInvertedLists::list_size(faiss::MaskedInvertedLists *this, uint64_t a2)
{
  uint64_t result;

  result = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  if (!result)
    return (***((uint64_t (****)(_QWORD, uint64_t))this + 4))(*((_QWORD *)this + 4), a2);
  return result;
}

uint64_t faiss::MaskedInvertedLists::get_codes(faiss::MaskedInvertedLists *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  v5 = 24;
  if (!v4)
    v5 = 32;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)((char *)this + v5) + 8))(*(_QWORD *)((char *)this + v5), a2);
}

uint64_t faiss::MaskedInvertedLists::get_ids(faiss::MaskedInvertedLists *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  v5 = 24;
  if (!v4)
    v5 = 32;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)((char *)this + v5) + 16))(*(_QWORD *)((char *)this + v5), a2);
}

uint64_t faiss::MaskedInvertedLists::release_codes(faiss::MaskedInvertedLists *this, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  v7 = 24;
  if (!v6)
    v7 = 32;
  return (*(uint64_t (**)(_QWORD, uint64_t, const unsigned __int8 *))(**(_QWORD **)((char *)this + v7) + 24))(*(_QWORD *)((char *)this + v7), a2, a3);
}

uint64_t faiss::MaskedInvertedLists::release_ids(faiss::MaskedInvertedLists *this, uint64_t a2, const uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  v7 = 24;
  if (!v6)
    v7 = 32;
  return (*(uint64_t (**)(_QWORD, uint64_t, const uint64_t *))(**(_QWORD **)((char *)this + v7) + 32))(*(_QWORD *)((char *)this + v7), a2, a3);
}

uint64_t faiss::MaskedInvertedLists::get_single_id(faiss::MaskedInvertedLists *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  v7 = 24;
  if (!v6)
    v7 = 32;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)this + v7) + 40))(*(_QWORD *)((char *)this + v7), a2, a3);
}

uint64_t faiss::MaskedInvertedLists::get_single_code(faiss::MaskedInvertedLists *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  v7 = 24;
  if (!v6)
    v7 = 32;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)this + v7) + 48))(*(_QWORD *)((char *)this + v7), a2, a3);
}

void faiss::MaskedInvertedLists::prefetch_lists(faiss::MaskedInvertedLists *this, const uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **p_p;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  __p = 0;
  v23 = 0;
  v24 = 0;
  if (a3 >= 1)
  {
    v5 = 0;
    v6 = a3;
    do
    {
      v7 = a2[v5];
      if ((v7 & 0x8000000000000000) == 0)
      {
        v8 = (***((uint64_t (****)(_QWORD, const uint64_t))this + 3))(*((_QWORD *)this + 3), a2[v5]);
        if (v8)
          p_p = &v25;
        else
          p_p = &__p;
        if (v8)
          v10 = &v27;
        else
          v10 = &v24;
        v11 = (uint64_t *)p_p[1];
        v12 = (uint64_t *)p_p[2];
        if (v11 >= v12)
        {
          v14 = (uint64_t *)*p_p;
          v15 = ((char *)v11 - (_BYTE *)*p_p) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v17 = (char *)v12 - (char *)v14;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)v10, v18);
            v14 = (uint64_t *)*p_p;
            v11 = (uint64_t *)p_p[1];
          }
          else
          {
            v19 = 0;
          }
          v20 = (uint64_t *)&v19[8 * v15];
          *v20 = v7;
          v13 = v20 + 1;
          while (v11 != v14)
          {
            v21 = *--v11;
            *--v20 = v21;
          }
          *p_p = v20;
          p_p[1] = v13;
          p_p[2] = &v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v11 = v7;
          v13 = v11 + 1;
        }
        p_p[1] = v13;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_1D48E24D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

__n128 faiss::StopWordsInvertedLists::StopWordsInvertedLists(faiss::StopWordsInvertedLists *this, const faiss::InvertedLists *a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  *(_QWORD *)this = off_1E9806A58;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  return result;
}

{
  __n128 result;

  result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  *(_QWORD *)this = off_1E9806A58;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  return result;
}

unint64_t faiss::StopWordsInvertedLists::list_size(faiss::StopWordsInvertedLists *this)
{
  unint64_t result;

  result = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  if (result >= *((_QWORD *)this + 4))
    return 0;
  return result;
}

uint64_t faiss::StopWordsInvertedLists::get_codes(faiss::StopWordsInvertedLists *this, uint64_t a2)
{
  if ((unint64_t)(***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3)) >= *((_QWORD *)this + 4))
    return 0;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 8))(*((_QWORD *)this + 3), a2);
}

uint64_t faiss::StopWordsInvertedLists::get_ids(faiss::StopWordsInvertedLists *this, uint64_t a2)
{
  if ((unint64_t)(***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3)) >= *((_QWORD *)this + 4))
    return 0;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), a2);
}

unint64_t faiss::StopWordsInvertedLists::release_codes(faiss::StopWordsInvertedLists *this, uint64_t a2, const unsigned __int8 *a3)
{
  unint64_t result;

  result = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  if (result < *((_QWORD *)this + 4))
    return (*(uint64_t (**)(_QWORD, uint64_t, const unsigned __int8 *))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), a2, a3);
  return result;
}

unint64_t faiss::StopWordsInvertedLists::release_ids(faiss::StopWordsInvertedLists *this, uint64_t a2, const uint64_t *a3)
{
  unint64_t result;

  result = (***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3));
  if (result < *((_QWORD *)this + 4))
    return (*(uint64_t (**)(_QWORD, uint64_t, const uint64_t *))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), a2, a3);
  return result;
}

uint64_t faiss::StopWordsInvertedLists::get_single_id(faiss::StopWordsInvertedLists *this, uint64_t a2, uint64_t a3)
{
  int v7;
  std::string *v8;
  size_t size;
  void *exception;
  std::string v11;

  if ((unint64_t)(***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3)) >= *((_QWORD *)this + 4))
  {
    memset(&v11, 0, sizeof(v11));
    v7 = snprintf(0, 0, "Error: '%s' failed", "il0->list_size(list_no) < maxsize");
    std::string::resize(&v11, v7 + 1, 0);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v11;
    else
      v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    else
      size = v11.__r_.__value_.__l.__size_;
    snprintf((char *)v8, size, "Error: '%s' failed", "il0->list_size(list_no) < maxsize");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v11, "virtual idx_t faiss::StopWordsInvertedLists::get_single_id(size_t, size_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 610);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), a2, a3);
}

void sub_1D48E281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::StopWordsInvertedLists::get_single_code(faiss::StopWordsInvertedLists *this, uint64_t a2, uint64_t a3)
{
  int v7;
  std::string *v8;
  size_t size;
  void *exception;
  std::string v11;

  if ((unint64_t)(***((uint64_t (****)(_QWORD))this + 3))(*((_QWORD *)this + 3)) >= *((_QWORD *)this + 4))
  {
    memset(&v11, 0, sizeof(v11));
    v7 = snprintf(0, 0, "Error: '%s' failed", "il0->list_size(list_no) < maxsize");
    std::string::resize(&v11, v7 + 1, 0);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v11;
    else
      v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    else
      size = v11.__r_.__value_.__l.__size_;
    snprintf((char *)v8, size, "Error: '%s' failed", "il0->list_size(list_no) < maxsize");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v11, "virtual const uint8_t *faiss::StopWordsInvertedLists::get_single_code(size_t, size_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 617);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3), a2, a3);
}

void sub_1D48E2958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::StopWordsInvertedLists::prefetch_lists(faiss::StopWordsInvertedLists *this, const uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *__p;
  uint64_t *v19;
  uint64_t *v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  if (a3 >= 1)
  {
    v5 = 0;
    v6 = a3;
    do
    {
      v7 = a2[v5];
      if ((v7 & 0x8000000000000000) == 0
        && (unint64_t)(***((uint64_t (****)(_QWORD, const uint64_t))this + 3))(*((_QWORD *)this + 3), a2[v5]) < *((_QWORD *)this + 4))
      {
        v8 = v19;
        if (v19 >= v20)
        {
          v10 = __p;
          v11 = v19 - __p;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v13 = (char *)v20 - (char *)__p;
          if (((char *)v20 - (char *)__p) >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)&v20, v14);
            v10 = __p;
            v8 = v19;
          }
          else
          {
            v15 = 0;
          }
          v16 = (uint64_t *)&v15[8 * v11];
          *v16 = v7;
          v9 = v16 + 1;
          while (v8 != v10)
          {
            v17 = *--v8;
            *--v16 = v17;
          }
          __p = v16;
          v20 = (uint64_t *)&v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v19 = v7;
          v9 = v19 + 1;
        }
        v19 = v9;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  if (__p)
    operator delete(__p);
}

void sub_1D48E2B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void faiss::HStackInvertedLists::~HStackInvertedLists(faiss::HStackInvertedLists *this)
{
  void *v2;

  *(_QWORD *)this = off_1E98064C8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E98064C8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D82628A4);
}

void faiss::SliceInvertedLists::~SliceInvertedLists(faiss::SliceInvertedLists *this)
{
  JUMPOUT(0x1D82628A4);
}

void faiss::VStackInvertedLists::~VStackInvertedLists(faiss::VStackInvertedLists *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E98067F0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E98067F0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1D82628A4);
}

void faiss::MaskedInvertedLists::~MaskedInvertedLists(faiss::MaskedInvertedLists *this)
{
  JUMPOUT(0x1D82628A4);
}

void faiss::StopWordsInvertedLists::~StopWordsInvertedLists(faiss::StopWordsInvertedLists *this)
{
  JUMPOUT(0x1D82628A4);
}

void std::vector<std::vector<long long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<long long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1D48E2DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<long long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<long long>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<long long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<unsigned char>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1D48E3164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void faiss::InvertedLists::get_single_id()
{
  __assert_rtn("get_single_id", "InvertedLists.cpp", 30, "offset < list_size(list_no)");
}

void faiss::InvertedLists::get_single_code()
{
  __assert_rtn("get_single_code", "InvertedLists.cpp", 42, "offset < list_size(list_no)");
}

void faiss::ArrayInvertedLists::add_entries()
{
  __assert_rtn("add_entries", "InvertedLists.cpp", 139, "list_no < nlist");
}

void faiss::ArrayInvertedLists::list_size()
{
  __assert_rtn("list_size", "InvertedLists.cpp", 149, "list_no < nlist");
}

void faiss::ArrayInvertedLists::get_codes()
{
  __assert_rtn("get_codes", "InvertedLists.cpp", 154, "list_no < nlist");
}

void faiss::ArrayInvertedLists::get_ids()
{
  __assert_rtn("get_ids", "InvertedLists.cpp", 159, "list_no < nlist");
}

void faiss::ArrayInvertedLists::update_entries()
{
  __assert_rtn("update_entries", "InvertedLists.cpp", 175, "n_entry + offset <= ids[list_no].size()");
}

{
  __assert_rtn("update_entries", "InvertedLists.cpp", 174, "list_no < nlist");
}

void faiss::`anonymous namespace'::translate_list_no()
{
  __assert_rtn("translate_list_no", "InvertedLists.cpp", 395, "list_no >= cumsz[i0] && list_no < cumsz[i0 + 1]");
}

void faiss::pairwise_extra_distances(const float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, int a6, float *a7, const float *a8, float a9, uint64_t a10, uint64_t a11)
{
  float *v12;
  uint64_t v15;
  uint64_t v16;
  const float *v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  const float *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  const float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  const float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  const float *v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  const float *v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  float *v69;
  float *v70;
  uint64_t v71;
  void *exception;
  const float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v82[3];

  if (a2 && a4)
  {
    v12 = a7;
    v16 = a10;
    v15 = a11;
    if (a8 == (const float *)-1)
      v17 = a1;
    else
      v17 = a8;
    if (a10 == -1)
      v16 = (uint64_t)a1;
    if (a11 == -1)
      v15 = a4;
    v73 = v17;
    v76 = v15;
    if (a6 <= 19)
    {
      switch(a6)
      {
        case 1:
          if (a2 >= 1)
          {
            v18 = 0;
            v77 = v15;
            v19 = 4 * v16;
            do
            {
              v20 = v12;
              if (a4 >= 1)
              {
                v21 = a5;
                v22 = v12;
                v23 = a4;
                do
                {
                  *v22++ = faiss::fvec_L2sqr((faiss *)(a3 + 4 * v18 * (_QWORD)v73), v21, (unint64_t)a1);
                  v21 = (const float *)((char *)v21 + v19);
                  --v23;
                }
                while (v23);
              }
              ++v18;
              v12 = &v20[v77];
            }
            while (v18 != a2);
          }
          return;
        case 2:
          if (a2 >= 1)
          {
            v66 = 0;
            v79 = v15;
            v67 = 4 * v16;
            do
            {
              v68 = v12;
              if (a4 >= 1)
              {
                v69 = a5;
                v70 = v12;
                v71 = a4;
                do
                {
                  *v70++ = faiss::fvec_L1((faiss *)(a3 + 4 * v66 * (_QWORD)v73), v69, a1);
                  v69 = (float *)((char *)v69 + v67);
                  --v71;
                }
                while (v71);
              }
              ++v66;
              v12 = &v68[v79];
            }
            while (v66 != a2);
          }
          return;
        case 3:
          if (a2 >= 1)
          {
            v53 = 0;
            v78 = v15;
            v54 = 4 * v16;
            do
            {
              v55 = v12;
              if (a4 >= 1)
              {
                v56 = a5;
                v57 = v12;
                v58 = a4;
                do
                {
                  *v57++ = faiss::fvec_Linf((faiss *)(a3 + 4 * v53 * (_QWORD)v73), v56, a1);
                  v56 = (float *)((char *)v56 + v54);
                  --v58;
                }
                while (v58);
              }
              ++v53;
              v12 = &v55[v78];
            }
            while (v53 != a2);
          }
          return;
        case 4:
          if (a2 >= 1)
          {
            v60 = 0;
            v61 = 4 * v16;
            v75 = 4 * (_QWORD)v17;
            do
            {
              if (a4 >= 1)
              {
                v62 = 0;
                v63 = a5;
                do
                {
                  if (a1)
                  {
                    v64 = 0;
                    v65 = 0.0;
                    do
                    {
                      v65 = v65 + powf(vabds_f32(*(float *)(a3 + 4 * (_QWORD)v64), v63[(_QWORD)v64]), a9);
                      v64 = (const float *)((char *)v64 + 1);
                    }
                    while (a1 != v64);
                  }
                  else
                  {
                    v65 = 0.0;
                  }
                  v12[v60 * v76 + v62++] = v65;
                  v63 = (float *)((char *)v63 + v61);
                }
                while (v62 != a4);
              }
              ++v60;
              a3 += v75;
            }
            while (v60 != a2);
          }
          return;
        default:
          goto LABEL_84;
      }
    }
    switch(a6)
    {
      case 20:
        if (a2 >= 1)
        {
          v46 = 0;
          v47 = 4 * v16;
          v48 = 4 * (_QWORD)v17;
          do
          {
            if (a4 >= 1)
            {
              v49 = 0;
              v50 = a5;
              do
              {
                if (a1)
                {
                  v51 = 0;
                  v52 = 0.0;
                  do
                  {
                    v52 = v52
                        + (float)(vabds_f32(*(float *)(a3 + 4 * (_QWORD)v51), v50[(_QWORD)v51])
                                / (float)(fabsf(*(float *)(a3 + 4 * (_QWORD)v51)) + fabsf(v50[(_QWORD)v51])));
                    v51 = (const float *)((char *)v51 + 1);
                  }
                  while (a1 != v51);
                }
                else
                {
                  v52 = 0.0;
                }
                a7[v46 * v76 + v49++] = v52;
                v50 = (float *)((char *)v50 + v47);
              }
              while (v49 != a4);
            }
            ++v46;
            a3 += v48;
          }
          while (v46 != a2);
        }
        break;
      case 21:
        if (a2 >= 1)
        {
          v35 = 0;
          v36 = 4 * v16;
          v37 = 4 * (_QWORD)v17;
          do
          {
            if (a4 >= 1)
            {
              v38 = 0;
              v39 = a5;
              do
              {
                if (a1)
                {
                  v40 = 0;
                  v41 = 0.0;
                  v42 = 0.0;
                  do
                  {
                    v43 = *(float *)(a3 + 4 * (_QWORD)v40);
                    v44 = v39[(_QWORD)v40];
                    v41 = v41 + vabds_f32(v43, v44);
                    v42 = v42 + fabsf(v43 + v44);
                    v40 = (const float *)((char *)v40 + 1);
                  }
                  while (a1 != v40);
                  v45 = v41 / v42;
                }
                else
                {
                  v45 = NAN;
                }
                a7[v35 * v76 + v38++] = v45;
                v39 = (float *)((char *)v39 + v36);
              }
              while (v38 != a4);
            }
            ++v35;
            a3 += v37;
          }
          while (v35 != a2);
        }
        break;
      case 22:
        if (a2 >= 1)
        {
          v24 = 0;
          v25 = 4 * v16;
          v74 = 4 * (_QWORD)v17;
          do
          {
            if (a4 >= 1)
            {
              v26 = 0;
              v27 = a5;
              do
              {
                if (a1)
                {
                  v28 = 0;
                  v29 = 0.0;
                  do
                  {
                    v30 = *(float *)(a3 + 4 * (_QWORD)v28);
                    v31 = v27[(_QWORD)v28];
                    v32 = (float)(v30 + v31) * 0.5;
                    v33 = logf(v32 / v30);
                    v29 = v29 + (float)((float)-(float)(v31 * logf(v32 / v31)) - (float)(v30 * v33));
                    v28 = (const float *)((char *)v28 + 1);
                  }
                  while (a1 != v28);
                  v34 = v29 * 0.5;
                }
                else
                {
                  v34 = 0.0;
                }
                v12[v24 * v76 + v26++] = v34;
                v27 = (float *)((char *)v27 + v25);
              }
              while (v26 != a4);
            }
            ++v24;
            a3 += v74;
          }
          while (v24 != a2);
        }
        break;
      default:
LABEL_84:
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v82, "metric type not implemented");
        faiss::FaissException::FaissException(exception, v82, "void faiss::pairwise_extra_distances(int64_t, int64_t, const float *, int64_t, const float *, MetricType, float, float *, int64_t, int64_t, int64_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/extra_distances.cpp", 162);
    }
  }
}

void sub_1D48E3AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

unint64_t faiss::knn_extra_metrics(uint64_t a1, float *a2, unint64_t a3, unint64_t a4, uint64_t a5, int a6, _QWORD *a7, float a8)
{
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  float *v22;
  uint64_t *v23;
  uint64_t v24;
  const float *v25;
  faiss *v26;
  float *v27;
  uint64_t *v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  float *v38;
  uint64_t *v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  _DWORD *v68;
  float *v69;
  _QWORD *v70;
  uint64_t v71;
  float *v72;
  _QWORD *v73;
  float *v74;
  float *v75;
  _QWORD *v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  float v88;
  float v89;
  uint64_t v90;
  unint64_t v91;
  float *v92;
  _QWORD *v93;
  unint64_t v94;
  float v95;
  uint64_t v96;
  unint64_t v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _DWORD *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  _DWORD *v123;
  float *v124;
  uint64_t *v125;
  uint64_t v126;
  float *v127;
  uint64_t *v128;
  float *v129;
  uint64_t v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  float v140;
  float v141;
  uint64_t v142;
  unint64_t v143;
  float *v144;
  uint64_t *v145;
  float v146;
  uint64_t v147;
  unint64_t v148;
  float v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  float v154;
  float v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _DWORD *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  _DWORD *v174;
  float *v175;
  uint64_t *v176;
  uint64_t v177;
  float *v178;
  uint64_t *v179;
  float *v180;
  uint64_t v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  float v187;
  float v188;
  uint64_t v189;
  unint64_t v190;
  float *v191;
  uint64_t *v192;
  float v193;
  uint64_t v194;
  unint64_t v195;
  float v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  float v201;
  float v202;
  unint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _DWORD *v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  _DWORD *v218;
  float *v219;
  uint64_t *v220;
  uint64_t v221;
  float *v222;
  faiss *v223;
  float *v224;
  uint64_t *v225;
  float v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  float v231;
  float v232;
  uint64_t v233;
  unint64_t v234;
  float *v235;
  uint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  float v239;
  uint64_t v240;
  unint64_t v241;
  float v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  float v247;
  float v248;
  unint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  _DWORD *v252;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _DWORD *v267;
  float *v268;
  uint64_t v269;
  float *v270;
  char *v271;
  float *v272;
  uint64_t v273;
  float v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  float v279;
  float v280;
  uint64_t v281;
  unint64_t v282;
  float *v283;
  char *v284;
  char *v285;
  float v286;
  uint64_t v287;
  unint64_t v288;
  float v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  float v294;
  float v295;
  unint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  _DWORD *v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  unint64_t v310;
  _DWORD *v311;
  float *v312;
  uint64_t *v313;
  uint64_t v314;
  float *v315;
  faiss *v316;
  float *v317;
  uint64_t *v318;
  float v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  float v324;
  float v325;
  uint64_t v326;
  unint64_t v327;
  float *v328;
  uint64_t *v329;
  float v330;
  uint64_t v331;
  unint64_t v332;
  float v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  float v338;
  float v339;
  unint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  _DWORD *v343;
  void *exception;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  _QWORD v447[4];

  if (a6 <= 19)
  {
    switch(a6)
    {
      case 1:
        v9 = a7[1];
        result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
        v365 = result;
        v11 = a4;
        if (!a4)
          return result;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v351 = 4 * result;
        v358 = 8 * result;
        while (1)
        {
          v372 = v14 + v365;
          if (v14 + v365 < v11)
            v11 = v14 + v365;
          v380 = v13;
          v387 = v12;
          v15 = v12;
          v394 = v11;
LABEL_8:
          if (v14 < v11)
            break;
          result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
          v13 = v380 + v358;
          v12 = v387 + v351;
          v11 = a4;
          v14 = v372;
          if (v372 >= a4)
            return result;
        }
        v17 = a7[2];
        v16 = a7[3];
        v18 = a7[1];
        if (v9)
        {
          v19 = (_QWORD *)(v17 + v18 * v13);
          v20 = v9;
          v21 = (_DWORD *)(v16 + v18 * v15);
          do
          {
            *v21++ = 2139095039;
            *v19++ = -1;
            --v20;
          }
          while (v20);
        }
        v415 = v16;
        v422 = v13;
        v432 = v15;
        v439 = v14;
        v401 = v17;
        v408 = v18;
        v22 = (float *)(v16 + 4 * v18 * v14);
        v23 = (uint64_t *)(v17 + 8 * v18 * v14);
        if (!a5)
          goto LABEL_28;
        v24 = 0;
        v25 = a2;
        v26 = (faiss *)(a1 + 4 * v14 * a3);
        v27 = v22 - 1;
        v28 = v23 - 1;
        do
        {
          v29 = faiss::fvec_L2sqr(v26, v25, a3);
          if (v29 >= *v22)
            goto LABEL_27;
          if (v9 < 2)
          {
            v30 = 1;
            goto LABEL_26;
          }
          v31 = 3;
          v32 = 2;
          v33 = 1;
          while (1)
          {
            v34 = v27[v32];
            if (v31 == v9 + 1 || (v35 = v27[v31], v34 > v35))
            {
              if (v34 < v29)
                break;
              goto LABEL_23;
            }
            v34 = v27[v31];
            v32 = v31;
            if (v35 < v29)
              break;
LABEL_23:
            v30 = v32;
            v27[v33] = v34;
            v28[v33] = v28[v32];
            v32 *= 2;
            v31 = (2 * v30) | 1;
            v33 = v30;
            if (v32 > v9)
              goto LABEL_26;
          }
          v30 = v33;
LABEL_26:
          v27[v30] = v29;
          v28[v30] = v24;
LABEL_27:
          v25 += a3;
          ++v24;
        }
        while (v24 != a5);
LABEL_28:
        if (!v9)
        {
          v37 = 0;
          goto LABEL_47;
        }
        v36 = 0;
        v37 = 0;
        v38 = v22 - 1;
        v39 = v23 - 1;
LABEL_30:
        v40 = *v22;
        v41 = *v23;
        v42 = v9 - v36;
        v43 = v38[v9 - v36];
        if (v9 - v36 < 2)
        {
          v44 = 1;
          goto LABEL_42;
        }
        v45 = 3;
        v46 = 2;
        v47 = 1;
        while (1)
        {
          v48 = v38[v46];
          if (v45 == v42 + 1 || (v49 = v38[v45], v48 > v49))
          {
            if (v43 > v48)
              goto LABEL_40;
          }
          else
          {
            v48 = v38[v45];
            v46 = v45;
            if (v43 > v49)
            {
LABEL_40:
              v44 = v47;
LABEL_41:
              v43 = v38[v42];
LABEL_42:
              v38[v44] = v43;
              v39[v44] = v39[v42];
              v50 = v9 + ~v37;
              v22[v50] = v40;
              v23[v50] = v41;
              if (v41 != -1)
                ++v37;
              if (++v36 == v9)
              {
LABEL_47:
                memmove(v22, &v22[v9 - v37], 4 * v37);
                result = (unint64_t)memmove(v23, &v23[v9 - v37], 8 * v37);
                v51 = v9 - v37;
                if (v9 > v37)
                {
                  v52 = (_QWORD *)(v401 + v408 * v422 + 8 * v37);
                  v53 = (_DWORD *)(v415 + v408 * v432 + 4 * v37);
                  do
                  {
                    *v53++ = 2139095039;
                    *v52++ = -1;
                    --v51;
                  }
                  while (v51);
                }
                v14 = v439 + 1;
                v13 = v422 + 8;
                v15 = v432 + 4;
                v11 = v394;
                goto LABEL_8;
              }
              goto LABEL_30;
            }
          }
          v44 = v46;
          v38[v47] = v48;
          v39[v47] = v39[v46];
          v46 *= 2;
          v45 = (2 * v44) | 1;
          v47 = v44;
          if (v46 > v42)
            goto LABEL_41;
        }
      case 2:
        v300 = a7[1];
        result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
        v371 = result;
        v301 = a4;
        if (!a4)
          return result;
        v302 = 0;
        v303 = 0;
        v304 = 0;
        v357 = 4 * result;
        v364 = 8 * result;
        while (1)
        {
          v378 = v304 + v371;
          if (v304 + v371 < v301)
            v301 = v304 + v371;
          v386 = v303;
          v393 = v302;
          v305 = v302;
          v400 = v301;
LABEL_329:
          if (v304 < v301)
            break;
          result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
          v303 = v386 + v364;
          v302 = v393 + v357;
          v301 = a4;
          v304 = v378;
          if (v378 >= a4)
            return result;
        }
        v307 = a7[2];
        v306 = a7[3];
        v308 = a7[1];
        if (v300)
        {
          v309 = (_QWORD *)(v307 + v308 * v303);
          v310 = v300;
          v311 = (_DWORD *)(v306 + v308 * v305);
          do
          {
            *v311++ = 2139095039;
            *v309++ = -1;
            --v310;
          }
          while (v310);
        }
        v421 = v306;
        v428 = v303;
        v438 = v305;
        v445 = v304;
        v407 = v307;
        v414 = v308;
        v312 = (float *)(v306 + 4 * v308 * v304);
        v313 = (uint64_t *)(v307 + 8 * v308 * v304);
        if (!a5)
          goto LABEL_349;
        v314 = 0;
        v315 = a2;
        v316 = (faiss *)(a1 + 4 * v304 * a3);
        v317 = v312 - 1;
        v318 = v313 - 1;
        do
        {
          v319 = faiss::fvec_L1(v316, v315, (const float *)a3);
          if (v319 >= *v312)
            goto LABEL_348;
          if (v300 < 2)
          {
            v320 = 1;
            goto LABEL_347;
          }
          v321 = 3;
          v322 = 2;
          v323 = 1;
          while (1)
          {
            v324 = v317[v322];
            if (v321 == v300 + 1 || (v325 = v317[v321], v324 > v325))
            {
              if (v324 < v319)
                break;
              goto LABEL_344;
            }
            v324 = v317[v321];
            v322 = v321;
            if (v325 < v319)
              break;
LABEL_344:
            v320 = v322;
            v317[v323] = v324;
            v318[v323] = v318[v322];
            v322 *= 2;
            v321 = (2 * v320) | 1;
            v323 = v320;
            if (v322 > v300)
              goto LABEL_347;
          }
          v320 = v323;
LABEL_347:
          v317[v320] = v319;
          v318[v320] = v314;
LABEL_348:
          v315 += a3;
          ++v314;
        }
        while (v314 != a5);
LABEL_349:
        if (!v300)
        {
          v327 = 0;
          goto LABEL_368;
        }
        v326 = 0;
        v327 = 0;
        v328 = v312 - 1;
        v329 = v313 - 1;
LABEL_351:
        v330 = *v312;
        v331 = *v313;
        v332 = v300 - v326;
        v333 = v328[v300 - v326];
        if (v300 - v326 < 2)
        {
          v334 = 1;
          goto LABEL_363;
        }
        v335 = 3;
        v336 = 2;
        v337 = 1;
        while (1)
        {
          v338 = v328[v336];
          if (v335 == v332 + 1 || (v339 = v328[v335], v338 > v339))
          {
            if (v333 > v338)
              goto LABEL_361;
          }
          else
          {
            v338 = v328[v335];
            v336 = v335;
            if (v333 > v339)
            {
LABEL_361:
              v334 = v337;
LABEL_362:
              v333 = v328[v332];
LABEL_363:
              v328[v334] = v333;
              v329[v334] = v329[v332];
              v340 = v300 + ~v327;
              v312[v340] = v330;
              v313[v340] = v331;
              if (v331 != -1)
                ++v327;
              if (++v326 == v300)
              {
LABEL_368:
                memmove(v312, &v312[v300 - v327], 4 * v327);
                result = (unint64_t)memmove(v313, &v313[v300 - v327], 8 * v327);
                v341 = v300 - v327;
                if (v300 > v327)
                {
                  v342 = (_QWORD *)(v407 + v414 * v428 + 8 * v327);
                  v343 = (_DWORD *)(v421 + v414 * v438 + 4 * v327);
                  do
                  {
                    *v343++ = 2139095039;
                    *v342++ = -1;
                    --v341;
                  }
                  while (v341);
                }
                v304 = v445 + 1;
                v303 = v428 + 8;
                v305 = v438 + 4;
                v301 = v400;
                goto LABEL_329;
              }
              goto LABEL_351;
            }
          }
          v334 = v336;
          v328[v337] = v338;
          v329[v337] = v329[v336];
          v336 *= 2;
          v335 = (2 * v334) | 1;
          v337 = v334;
          if (v336 > v332)
            goto LABEL_362;
        }
      case 3:
        v207 = a7[1];
        result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
        v369 = result;
        v208 = a4;
        if (!a4)
          return result;
        v209 = 0;
        v210 = 0;
        v211 = 0;
        v355 = 4 * result;
        v362 = 8 * result;
        while (1)
        {
          v376 = v211 + v369;
          if (v211 + v369 < v208)
            v208 = v211 + v369;
          v384 = v210;
          v391 = v209;
          v212 = v209;
          v398 = v208;
LABEL_224:
          if (v211 < v208)
            break;
          result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
          v210 = v384 + v362;
          v209 = v391 + v355;
          v208 = a4;
          v211 = v376;
          if (v376 >= a4)
            return result;
        }
        v214 = a7[2];
        v213 = a7[3];
        v215 = a7[1];
        if (v207)
        {
          v216 = (_QWORD *)(v214 + v215 * v210);
          v217 = v207;
          v218 = (_DWORD *)(v213 + v215 * v212);
          do
          {
            *v218++ = 2139095039;
            *v216++ = -1;
            --v217;
          }
          while (v217);
        }
        v419 = v213;
        v426 = v210;
        v436 = v212;
        v443 = v211;
        v405 = v214;
        v412 = v215;
        v219 = (float *)(v213 + 4 * v215 * v211);
        v220 = (uint64_t *)(v214 + 8 * v215 * v211);
        if (!a5)
          goto LABEL_244;
        v221 = 0;
        v222 = a2;
        v223 = (faiss *)(a1 + 4 * v211 * a3);
        v224 = v219 - 1;
        v225 = v220 - 1;
        do
        {
          v226 = faiss::fvec_Linf(v223, v222, (const float *)a3);
          if (v226 >= *v219)
            goto LABEL_243;
          if (v207 < 2)
          {
            v227 = 1;
            goto LABEL_242;
          }
          v228 = 3;
          v229 = 2;
          v230 = 1;
          while (1)
          {
            v231 = v224[v229];
            if (v228 == v207 + 1 || (v232 = v224[v228], v231 > v232))
            {
              if (v231 < v226)
                break;
              goto LABEL_239;
            }
            v231 = v224[v228];
            v229 = v228;
            if (v232 < v226)
              break;
LABEL_239:
            v227 = v229;
            v224[v230] = v231;
            v225[v230] = v225[v229];
            v229 *= 2;
            v228 = (2 * v227) | 1;
            v230 = v227;
            if (v229 > v207)
              goto LABEL_242;
          }
          v227 = v230;
LABEL_242:
          v224[v227] = v226;
          v225[v227] = v221;
LABEL_243:
          v222 += a3;
          ++v221;
        }
        while (v221 != a5);
LABEL_244:
        if (!v207)
        {
          v234 = 0;
          v238 = v436;
          v237 = v443;
          goto LABEL_263;
        }
        v233 = 0;
        v234 = 0;
        v235 = v219 - 1;
        v236 = v220 - 1;
        v238 = v436;
        v237 = v443;
LABEL_246:
        v239 = *v219;
        v240 = *v220;
        v241 = v207 - v233;
        v242 = v235[v207 - v233];
        if (v207 - v233 < 2)
        {
          v243 = 1;
          goto LABEL_258;
        }
        v244 = 3;
        v245 = 2;
        v246 = 1;
        while (1)
        {
          v247 = v235[v245];
          if (v244 == v241 + 1 || (v248 = v235[v244], v247 > v248))
          {
            if (v242 > v247)
              goto LABEL_256;
          }
          else
          {
            v247 = v235[v244];
            v245 = v244;
            if (v242 > v248)
            {
LABEL_256:
              v243 = v246;
LABEL_257:
              v242 = v235[v241];
LABEL_258:
              v235[v243] = v242;
              v236[v243] = v236[v241];
              v249 = v207 + ~v234;
              v219[v249] = v239;
              v220[v249] = v240;
              if (v240 != -1)
                ++v234;
              if (++v233 == v207)
              {
LABEL_263:
                memmove(v219, &v219[v207 - v234], 4 * v234);
                result = (unint64_t)memmove(v220, &v220[v207 - v234], 8 * v234);
                v250 = v207 - v234;
                if (v207 > v234)
                {
                  v251 = (_QWORD *)(v405 + v412 * v426 + 8 * v234);
                  v252 = (_DWORD *)(v419 + v412 * v238 + 4 * v234);
                  do
                  {
                    *v252++ = 2139095039;
                    *v251++ = -1;
                    --v250;
                  }
                  while (v250);
                }
                v211 = v237 + 1;
                v210 = v426 + 8;
                v212 = v238 + 4;
                v208 = v398;
                goto LABEL_224;
              }
              goto LABEL_246;
            }
          }
          v243 = v245;
          v235[v246] = v247;
          v236[v246] = v236[v245];
          v245 *= 2;
          v244 = (2 * v243) | 1;
          v246 = v243;
          if (v245 > v241)
            goto LABEL_257;
        }
      case 4:
        v254 = a7[1];
        result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
        v356 = result;
        v255 = a4;
        if (!a4)
          return result;
        v256 = 0;
        v257 = 0;
        v258 = 0;
        v348 = 4 * result;
        v350 = 8 * result;
        v444 = 4 * a3;
        v346 = 4 * result * a3;
        while (1)
        {
          v259 = v258 + v356;
          v363 = v258 + v356;
          v370 = v257;
          if (v258 + v356 >= v255)
            v259 = v255;
          v260 = a1;
          v377 = v256;
          v261 = v256;
          v385 = v259;
LABEL_274:
          if (v258 < v259)
            break;
          result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
          v257 = v370 + v350;
          v256 = v377 + v348;
          a1 += v346;
          v258 = v363;
          v255 = a4;
          if (v363 >= a4)
            return result;
        }
        v263 = a7[2];
        v262 = a7[3];
        v264 = a7[1];
        if (v254)
        {
          v265 = (_QWORD *)(v263 + v264 * v257);
          v266 = v254;
          v267 = (_DWORD *)(v262 + v264 * v261);
          do
          {
            *v267++ = 2139095039;
            *v265++ = -1;
            --v266;
          }
          while (v266);
        }
        v413 = v257;
        v420 = v261;
        v427 = v258;
        v399 = v264;
        v406 = v262;
        v268 = (float *)(v262 + 4 * v264 * v258);
        v392 = v263;
        v437 = (char *)(v263 + 8 * v264 * v258);
        if (!a5)
          goto LABEL_299;
        v269 = 0;
        v270 = v268 - 1;
        v271 = v437 - 8;
        v272 = a2;
        break;
      default:
        goto LABEL_374;
    }
    do
    {
      if (a3)
      {
        v273 = 0;
        v274 = 0.0;
        do
        {
          v274 = v274 + powf(vabds_f32(*(float *)(v260 + 4 * v273), v272[v273]), a8);
          ++v273;
        }
        while (a3 != v273);
      }
      else
      {
        v274 = 0.0;
      }
      if (v274 >= *v268)
        goto LABEL_298;
      if (v254 < 2)
      {
        v275 = 1;
        goto LABEL_297;
      }
      v276 = 3;
      v277 = 2;
      v278 = 1;
      while (1)
      {
        v279 = v270[v277];
        if (v276 == v254 + 1 || (v280 = v270[v276], v279 > v280))
        {
          if (v279 < v274)
            break;
          goto LABEL_294;
        }
        v279 = v270[v276];
        v277 = v276;
        if (v280 < v274)
          break;
LABEL_294:
        v275 = v277;
        v270[v278] = v279;
        *(_QWORD *)&v271[8 * v278] = *(_QWORD *)&v271[8 * v277];
        v277 *= 2;
        v276 = (2 * v275) | 1;
        v278 = v275;
        if (v277 > v254)
          goto LABEL_297;
      }
      v275 = v278;
LABEL_297:
      v270[v275] = v274;
      *(_QWORD *)&v271[8 * v275] = v269;
LABEL_298:
      ++v269;
      v272 = (float *)((char *)v272 + v444);
    }
    while (v269 != a5);
LABEL_299:
    if (!v254)
    {
      v282 = 0;
      v284 = v437;
      goto LABEL_318;
    }
    v281 = 0;
    v282 = 0;
    v283 = v268 - 1;
    v284 = v437;
    v285 = v437 - 8;
LABEL_301:
    v286 = *v268;
    v287 = *(_QWORD *)v437;
    v288 = v254 - v281;
    v289 = v283[v254 - v281];
    if (v254 - v281 < 2)
    {
      v290 = 1;
      goto LABEL_313;
    }
    v291 = 3;
    v292 = 2;
    v293 = 1;
    while (1)
    {
      v294 = v283[v292];
      if (v291 == v288 + 1 || (v295 = v283[v291], v294 > v295))
      {
        if (v289 > v294)
          goto LABEL_311;
      }
      else
      {
        v294 = v283[v291];
        v292 = v291;
        if (v289 > v295)
        {
LABEL_311:
          v290 = v293;
LABEL_312:
          v289 = v283[v288];
LABEL_313:
          v283[v290] = v289;
          *(_QWORD *)&v285[8 * v290] = *(_QWORD *)&v285[8 * v288];
          v296 = v254 + ~v282;
          v268[v296] = v286;
          *(_QWORD *)&v437[8 * v296] = v287;
          if (v287 != -1)
            ++v282;
          if (++v281 == v254)
          {
LABEL_318:
            memmove(v268, &v268[v254 - v282], 4 * v282);
            result = (unint64_t)memmove(v284, &v284[8 * v254 + -8 * v282], 8 * v282);
            v297 = v254 - v282;
            if (v254 > v282)
            {
              v298 = (_QWORD *)(v392 + v399 * v413 + 8 * v282);
              v299 = (_DWORD *)(v406 + v399 * v420 + 4 * v282);
              do
              {
                *v299++ = 2139095039;
                *v298++ = -1;
                --v297;
              }
              while (v297);
            }
            v258 = v427 + 1;
            v257 = v413 + 8;
            v261 = v420 + 4;
            v260 += v444;
            v259 = v385;
            goto LABEL_274;
          }
          goto LABEL_301;
        }
      }
      v290 = v292;
      v283[v293] = v294;
      *(_QWORD *)&v285[8 * v293] = *(_QWORD *)&v285[8 * v292];
      v292 *= 2;
      v291 = (2 * v290) | 1;
      v293 = v290;
      if (v292 > v288)
        goto LABEL_312;
    }
  }
  if (a6 == 20)
  {
    v160 = a7[1];
    result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
    v375 = result;
    v161 = a4;
    if (!a4)
      return result;
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v361 = 4 * result;
    v368 = 8 * result;
    v165 = 4 * a3;
    v354 = 4 * result * a3;
    while (1)
    {
      v166 = v164 + v375;
      v383 = v164 + v375;
      v390 = v163;
      if (v164 + v375 >= v161)
        v166 = v161;
      v167 = a1;
      v397 = v162;
      v404 = v166;
      v168 = v162;
LABEL_169:
      if (v164 < v166)
        break;
      result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
      v163 = v390 + v368;
      v162 = v397 + v361;
      a1 += v354;
      v161 = a4;
      v164 = v383;
      if (v383 >= a4)
        return result;
    }
    v169 = a7[2];
    v170 = a7[3];
    v171 = a7[1];
    if (v160)
    {
      v172 = (_QWORD *)(v169 + v171 * v163);
      v173 = v160;
      v174 = (_DWORD *)(v170 + v171 * v168);
      do
      {
        *v174++ = 2139095039;
        *v172++ = -1;
        --v173;
      }
      while (v173);
    }
    v435 = v163;
    v442 = v168;
    v418 = v171;
    v175 = (float *)(v170 + 4 * v171 * v164);
    v176 = (uint64_t *)(v169 + 8 * v171 * v164);
    if (!a5)
      goto LABEL_194;
    v177 = 0;
    v178 = v175 - 1;
    v179 = v176 - 1;
    v180 = a2;
    do
    {
      if (a3)
      {
        v181 = 0;
        v182 = 0.0;
        do
        {
          v182 = v182
               + (float)(vabds_f32(*(float *)(v167 + 4 * v181), v180[v181])
                       / (float)(fabsf(*(float *)(v167 + 4 * v181)) + fabsf(v180[v181])));
          ++v181;
        }
        while (a3 != v181);
      }
      else
      {
        v182 = 0.0;
      }
      if (v182 >= *v175)
        goto LABEL_193;
      if (v160 < 2)
      {
        v183 = 1;
        goto LABEL_192;
      }
      v184 = 3;
      v185 = 2;
      v186 = 1;
      while (1)
      {
        v187 = v178[v185];
        if (v184 == v160 + 1 || (v188 = v178[v184], v187 > v188))
        {
          if (v187 < v182)
            break;
          goto LABEL_189;
        }
        v187 = v178[v184];
        v185 = v184;
        if (v188 < v182)
          break;
LABEL_189:
        v183 = v185;
        v178[v186] = v187;
        v179[v186] = v179[v185];
        v185 *= 2;
        v184 = (2 * v183) | 1;
        v186 = v183;
        if (v185 > v160)
          goto LABEL_192;
      }
      v183 = v186;
LABEL_192:
      v178[v183] = v182;
      v179[v183] = v177;
LABEL_193:
      ++v177;
      v180 = (float *)((char *)v180 + v165);
    }
    while (v177 != a5);
LABEL_194:
    v425 = v170;
    v411 = v169;
    if (!v160)
    {
      v190 = 0;
      goto LABEL_213;
    }
    v189 = 0;
    v190 = 0;
    v191 = v175 - 1;
    v192 = v176 - 1;
LABEL_196:
    v193 = *v175;
    v194 = *v176;
    v195 = v160 - v189;
    v196 = v191[v160 - v189];
    if (v160 - v189 < 2)
    {
      v197 = 1;
      goto LABEL_208;
    }
    v198 = 3;
    v199 = 2;
    v200 = 1;
    while (1)
    {
      v201 = v191[v199];
      if (v198 == v195 + 1 || (v202 = v191[v198], v201 > v202))
      {
        if (v196 > v201)
          goto LABEL_206;
      }
      else
      {
        v201 = v191[v198];
        v199 = v198;
        if (v196 > v202)
        {
LABEL_206:
          v197 = v200;
LABEL_207:
          v196 = v191[v195];
LABEL_208:
          v191[v197] = v196;
          v192[v197] = v192[v195];
          v203 = v160 + ~v190;
          v175[v203] = v193;
          v176[v203] = v194;
          if (v194 != -1)
            ++v190;
          if (++v189 == v160)
          {
LABEL_213:
            memmove(v175, &v175[v160 - v190], 4 * v190);
            result = (unint64_t)memmove(v176, &v176[v160 - v190], 8 * v190);
            v204 = v160 - v190;
            if (v160 > v190)
            {
              v205 = (_QWORD *)(v411 + v418 * v435 + 8 * v190);
              v206 = (_DWORD *)(v425 + v418 * v442 + 4 * v190);
              do
              {
                *v206++ = 2139095039;
                *v205++ = -1;
                --v204;
              }
              while (v204);
            }
            ++v164;
            v163 = v435 + 8;
            v168 = v442 + 4;
            v167 += v165;
            v166 = v404;
            goto LABEL_169;
          }
          goto LABEL_196;
        }
      }
      v197 = v199;
      v191[v200] = v201;
      v192[v200] = v192[v199];
      v199 *= 2;
      v198 = (2 * v197) | 1;
      v200 = v197;
      if (v199 > v195)
        goto LABEL_207;
    }
  }
  if (a6 == 21)
  {
    v109 = a7[1];
    result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
    v374 = result;
    v110 = a4;
    if (!a4)
      return result;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v360 = 4 * result;
    v367 = 8 * result;
    v114 = 4 * a3;
    v353 = 4 * result * a3;
    while (1)
    {
      v115 = v113 + v374;
      v382 = v113 + v374;
      v389 = v112;
      if (v113 + v374 >= v110)
        v115 = v110;
      v116 = a1;
      v396 = v111;
      v403 = v115;
      v117 = v112;
LABEL_116:
      if (v113 < v115)
        break;
      result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
      v112 = v389 + v367;
      v111 = v396 + v360;
      a1 += v353;
      v110 = a4;
      v113 = v382;
      if (v382 >= a4)
        return result;
    }
    v119 = a7[2];
    v118 = a7[3];
    v120 = a7[1];
    if (v109)
    {
      v121 = (_QWORD *)(v119 + v120 * v117);
      v122 = v109;
      v123 = (_DWORD *)(v118 + v120 * v111);
      do
      {
        *v123++ = 2139095039;
        *v121++ = -1;
        --v122;
      }
      while (v122);
    }
    v124 = (float *)(v118 + 4 * v120 * v113);
    v125 = (uint64_t *)(v119 + 8 * v120 * v113);
    if (!a5)
      goto LABEL_139;
    v126 = 0;
    v127 = v124 - 1;
    v128 = v125 - 1;
    v129 = a2;
    do
    {
      if (!a3)
        goto LABEL_138;
      v130 = 0;
      v131 = 0.0;
      v132 = 0.0;
      do
      {
        v133 = *(float *)(v116 + 4 * v130);
        v134 = v129[v130];
        v131 = v131 + vabds_f32(v133, v134);
        v132 = v132 + fabsf(v133 + v134);
        ++v130;
      }
      while (a3 != v130);
      v135 = v131 / v132;
      if (v135 >= *v124)
        goto LABEL_138;
      if (v109 < 2)
      {
        v136 = 1;
        goto LABEL_137;
      }
      v137 = 3;
      v138 = 2;
      v139 = 1;
      while (1)
      {
        v140 = v127[v138];
        if (v137 == v109 + 1 || (v141 = v127[v137], v140 > v141))
        {
          if (v140 < v135)
            break;
          goto LABEL_134;
        }
        v140 = v127[v137];
        v138 = v137;
        if (v141 < v135)
          break;
LABEL_134:
        v136 = v138;
        v127[v139] = v140;
        v128[v139] = v128[v138];
        v138 *= 2;
        v137 = (2 * v136) | 1;
        v139 = v136;
        if (v138 > v109)
          goto LABEL_137;
      }
      v136 = v139;
LABEL_137:
      v127[v136] = v135;
      v128[v136] = v126;
LABEL_138:
      ++v126;
      v129 = (float *)((char *)v129 + v114);
    }
    while (v126 != a5);
LABEL_139:
    v434 = v117;
    v441 = v113;
    v417 = v120;
    v424 = v118;
    v410 = v119;
    if (!v109)
    {
      v143 = 0;
      goto LABEL_158;
    }
    v142 = 0;
    v143 = 0;
    v144 = v124 - 1;
    v145 = v125 - 1;
LABEL_141:
    v146 = *v124;
    v147 = *v125;
    v148 = v109 - v142;
    v149 = v144[v109 - v142];
    if (v109 - v142 < 2)
    {
      v150 = 1;
      goto LABEL_153;
    }
    v151 = 3;
    v152 = 2;
    v153 = 1;
    while (1)
    {
      v154 = v144[v152];
      if (v151 == v148 + 1 || (v155 = v144[v151], v154 > v155))
      {
        if (v149 > v154)
          goto LABEL_151;
      }
      else
      {
        v154 = v144[v151];
        v152 = v151;
        if (v149 > v155)
        {
LABEL_151:
          v150 = v153;
LABEL_152:
          v149 = v144[v148];
LABEL_153:
          v144[v150] = v149;
          v145[v150] = v145[v148];
          v156 = v109 + ~v143;
          v124[v156] = v146;
          v125[v156] = v147;
          if (v147 != -1)
            ++v143;
          if (++v142 == v109)
          {
LABEL_158:
            memmove(v124, &v124[v109 - v143], 4 * v143);
            result = (unint64_t)memmove(v125, &v125[v109 - v143], 8 * v143);
            v157 = v109 - v143;
            if (v109 > v143)
            {
              v158 = (_QWORD *)(v410 + v417 * v434 + 8 * v143);
              v159 = (_DWORD *)(v424 + v417 * v111 + 4 * v143);
              do
              {
                *v159++ = 2139095039;
                *v158++ = -1;
                --v157;
              }
              while (v157);
            }
            v113 = v441 + 1;
            v117 = v434 + 8;
            v111 += 4;
            v116 += v114;
            v115 = v403;
            goto LABEL_116;
          }
          goto LABEL_141;
        }
      }
      v150 = v152;
      v144[v153] = v154;
      v145[v153] = v145[v152];
      v152 *= 2;
      v151 = (2 * v150) | 1;
      v153 = v150;
      if (v152 > v148)
        goto LABEL_152;
    }
  }
  if (a6 != 22)
  {
LABEL_374:
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v447, "metric type not implemented");
    faiss::FaissException::FaissException(exception, v447, "void faiss::knn_extra_metrics(const float *, const float *, size_t, size_t, size_t, MetricType, float, float_maxheap_array_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/extra_distances.cpp", 191);
  }
  v54 = a7[1];
  result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
  v352 = result;
  v55 = a4;
  if (a4)
  {
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = v54 + 1;
    v347 = 4 * result;
    v349 = 8 * result;
    v433 = v54;
    v440 = 4 * a3;
    v345 = 4 * result * a3;
    while (1)
    {
      v60 = v58 + v352;
      v359 = v58 + v352;
      v366 = v57;
      if (v58 + v352 >= v55)
        v60 = v55;
      v61 = a1;
      v373 = v56;
      v62 = v56;
      v381 = v60;
LABEL_61:
      if (v58 < v60)
        break;
      result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
      v57 = v366 + v349;
      v56 = v373 + v347;
      a1 += v345;
      v58 = v359;
      v55 = a4;
      if (v359 >= a4)
        return result;
    }
    v64 = a7[2];
    v63 = a7[3];
    v65 = a7[1];
    if (v54)
    {
      v66 = (_QWORD *)(v64 + v65 * v57);
      v67 = v54;
      v68 = (_DWORD *)(v63 + v65 * v62);
      do
      {
        *v68++ = 2139095039;
        *v66++ = -1;
        --v67;
      }
      while (v67);
    }
    v409 = v57;
    v416 = v62;
    v423 = v58;
    v395 = v65;
    v402 = v63;
    v69 = (float *)(v63 + 4 * v65 * v58);
    v388 = v64;
    v70 = (_QWORD *)(v64 + 8 * v65 * v58);
    if (!a5)
      goto LABEL_86;
    v71 = 0;
    v72 = v69 - 1;
    v73 = v70 - 1;
    v74 = a2;
    do
    {
      if (a3)
      {
        v75 = v69;
        v76 = v70;
        v77 = 0;
        v78 = 0.0;
        do
        {
          v79 = *(float *)(v61 + 4 * v77);
          v80 = v74[v77];
          v81 = (float)(v79 + v80) * 0.5;
          v82 = logf(v81 / v79);
          v78 = v78 + (float)((float)-(float)(v80 * logf(v81 / v80)) - (float)(v79 * v82));
          ++v77;
        }
        while (a3 != v77);
        v83 = v78 * 0.5;
        v70 = v76;
        v69 = v75;
        v54 = v433;
      }
      else
      {
        v83 = 0.0;
      }
      if (v83 >= *v69)
        goto LABEL_85;
      if (v54 < 2)
      {
        v84 = 1;
        goto LABEL_84;
      }
      v85 = 3;
      v86 = 2;
      v87 = 1;
      while (1)
      {
        v88 = v72[v86];
        if (v85 == v59 || (v89 = v72[v85], v88 > v89))
        {
          if (v88 < v83)
            break;
          goto LABEL_81;
        }
        v88 = v72[v85];
        v86 = v85;
        if (v89 < v83)
          break;
LABEL_81:
        v84 = v86;
        v72[v87] = v88;
        v73[v87] = v73[v86];
        v86 *= 2;
        v85 = (2 * v84) | 1;
        v87 = v84;
        if (v86 > v54)
          goto LABEL_84;
      }
      v84 = v87;
LABEL_84:
      v72[v84] = v83;
      v73[v84] = v71;
LABEL_85:
      ++v71;
      v74 = (float *)((char *)v74 + v440);
    }
    while (v71 != a5);
LABEL_86:
    if (!v54)
    {
      v91 = 0;
      v94 = v423;
      goto LABEL_105;
    }
    v90 = 0;
    v91 = 0;
    v92 = v69 - 1;
    v93 = v70 - 1;
    v94 = v423;
LABEL_88:
    v95 = *v69;
    v96 = *v70;
    v97 = v54 - v90;
    v98 = v92[v54 - v90];
    if (v54 - v90 < 2)
    {
      v99 = 1;
      goto LABEL_100;
    }
    v100 = 3;
    v101 = 2;
    v102 = 1;
    while (1)
    {
      v103 = v92[v101];
      if (v100 == v97 + 1 || (v104 = v92[v100], v103 > v104))
      {
        if (v98 > v103)
          goto LABEL_98;
      }
      else
      {
        v103 = v92[v100];
        v101 = v100;
        if (v98 > v104)
        {
LABEL_98:
          v99 = v102;
LABEL_99:
          v98 = v92[v97];
LABEL_100:
          v92[v99] = v98;
          v93[v99] = v93[v97];
          v105 = v54 + ~v91;
          v69[v105] = v95;
          v70[v105] = v96;
          if (v96 != -1)
            ++v91;
          if (++v90 == v54)
          {
LABEL_105:
            memmove(v69, &v69[v54 - v91], 4 * v91);
            result = (unint64_t)memmove(v70, &v70[v54 - v91], 8 * v91);
            v106 = v54 - v91;
            if (v54 > v91)
            {
              v107 = (_QWORD *)(v388 + v395 * v409 + 8 * v91);
              v108 = (_DWORD *)(v402 + v395 * v416 + 4 * v91);
              do
              {
                *v108++ = 2139095039;
                *v107++ = -1;
                --v106;
              }
              while (v106);
            }
            v58 = v94 + 1;
            v57 = v409 + 8;
            v62 = v416 + 4;
            v61 += v440;
            v60 = v381;
            goto LABEL_61;
          }
          goto LABEL_88;
        }
      }
      v99 = v101;
      v92[v102] = v103;
      v93[v102] = v93[v101];
      v101 *= 2;
      v100 = (2 * v99) | 1;
      v102 = v99;
      if (v101 > v97)
        goto LABEL_99;
    }
  }
  return result;
}

void sub_1D48E5394(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 137) < 0)
  {
    operator delete(*(void **)(v3 - 160));
    if ((v2 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

uint64_t faiss::get_extra_distance_computer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t result;
  uint64_t (**v10)();
  void *exception;
  _QWORD v12[3];

  if (a2 <= 19)
  {
    switch(a2)
    {
      case 1:
        result = operator new();
        v10 = off_1E9805B78;
        goto LABEL_13;
      case 2:
        result = operator new();
        v10 = off_1E9805C58;
        goto LABEL_13;
      case 3:
        result = operator new();
        v10 = off_1E9805C90;
        goto LABEL_13;
      case 4:
        result = operator new();
        v10 = off_1E9805CC8;
        goto LABEL_13;
      default:
        goto LABEL_14;
    }
  }
  switch(a2)
  {
    case 20:
      result = operator new();
      v10 = off_1E9805BB0;
      break;
    case 21:
      result = operator new();
      v10 = off_1E9805BE8;
      break;
    case 22:
      result = operator new();
      v10 = off_1E9805C20;
      break;
    default:
LABEL_14:
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v12, "metric type not implemented");
      faiss::FaissException::FaissException(exception, v12, "DistanceComputer *faiss::get_extra_distance_computer(size_t, MetricType, float, size_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/extra_distances.cpp", 217);
  }
LABEL_13:
  *(_QWORD *)result = v10;
  *(_QWORD *)(result + 8) = a1;
  *(float *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a4;
  return result;
}

void sub_1D48E55BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)1>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)1>>::operator()(uint64_t a1, uint64_t a2)
{
  return faiss::fvec_L2sqr(*(faiss **)(a1 + 32), (const float *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a2), *(_QWORD *)(a1 + 8));
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)1>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return faiss::fvec_L2sqr((faiss *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a3), (const float *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a2), *(_QWORD *)(a1 + 8));
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)1>>::~ExtraDistanceComputer()
{
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)2>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)2>>::operator()(uint64_t a1, uint64_t a2)
{
  return faiss::fvec_L1(*(faiss **)(a1 + 32), (float *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a2), *(const float **)(a1 + 8));
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)2>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return faiss::fvec_L1((faiss *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a3), (float *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a2), *(const float **)(a1 + 8));
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)2>>::~ExtraDistanceComputer()
{
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)3>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)3>>::operator()(uint64_t a1, uint64_t a2)
{
  return faiss::fvec_Linf(*(faiss **)(a1 + 32), (float *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a2), *(const float **)(a1 + 8));
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)3>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return faiss::fvec_Linf((faiss *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a3), (float *)(*(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8) * a2), *(const float **)(a1 + 8));
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)3>>::~ExtraDistanceComputer()
{
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)20>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)20>>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  float result;
  float v6;
  float v7;
  float v8;

  v2 = a1[1];
  if (!v2)
    return 0.0;
  v3 = (float *)a1[4];
  v4 = (float *)(a1[5] + 4 * v2 * a2);
  result = 0.0;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    result = result + (float)(vabds_f32(v7, v8) / (float)(fabsf(v7) + fabsf(v8)));
    --v2;
  }
  while (v2);
  return result;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)20>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float *v6;
  float result;
  float v8;
  float v9;
  float v10;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0.0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (float *)(v4 + 4 * v3 * a3);
  v6 = (float *)(v4 + 4 * v3 * a2);
  result = 0.0;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = result + (float)(vabds_f32(v9, v10) / (float)(fabsf(v9) + fabsf(v10)));
    --v3;
  }
  while (v3);
  return result;
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)20>>::~ExtraDistanceComputer()
{
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)21>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)21>>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = a1[1];
  if (!v2)
    return NAN;
  v3 = (float *)a1[4];
  v4 = (float *)(a1[5] + 4 * v2 * a2);
  v5 = 0.0;
  v6 = 0.0;
  do
  {
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    v5 = v5 + vabds_f32(v8, v9);
    v6 = v6 + fabsf(v8 + v9);
    --v2;
  }
  while (v2);
  return v5 / v6;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)21>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return NAN;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (float *)(v4 + 4 * v3 * a3);
  v6 = (float *)(v4 + 4 * v3 * a2);
  v7 = 0.0;
  v8 = 0.0;
  do
  {
    v9 = *v5++;
    v10 = v9;
    v11 = *v6++;
    v7 = v7 + vabds_f32(v10, v11);
    v8 = v8 + fabsf(v10 + v11);
    --v3;
  }
  while (v3);
  return v7 / v8;
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)21>>::~ExtraDistanceComputer()
{
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)22>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)22>>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = a1[1];
  if (v2)
  {
    v3 = (float *)a1[4];
    v4 = (float *)(a1[5] + 4 * v2 * a2);
    v5 = 0.0;
    do
    {
      v6 = *v3++;
      v7 = v6;
      v8 = *v4++;
      v9 = (float)(v7 + v8) * 0.5;
      v10 = logf(v9 / v7);
      v5 = v5 + (float)((float)-(float)(v8 * logf(v9 / v8)) - (float)(v7 * v10));
      --v2;
    }
    while (v2);
  }
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)22>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (float *)(v4 + 4 * v3 * a3);
    v6 = (float *)(v4 + 4 * v3 * a2);
    v7 = 0.0;
    do
    {
      v8 = *v5++;
      v9 = v8;
      v10 = *v6++;
      v11 = (float)(v9 + v10) * 0.5;
      v12 = logf(v11 / v9);
      v7 = v7 + (float)((float)-(float)(v10 * logf(v11 / v10)) - (float)(v9 * v12));
      --v3;
    }
    while (v3);
  }
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)22>>::~ExtraDistanceComputer()
{
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)4>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)4>>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0.0;
  v3 = *(float **)(a1 + 32);
  v4 = (float *)(*(_QWORD *)(a1 + 40) + 4 * v2 * a2);
  v5 = *(float *)(a1 + 16);
  v6 = 0.0;
  do
  {
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    v6 = v6 + powf(vabds_f32(v8, v9), v5);
    --v2;
  }
  while (v2);
  return v6;
}

float faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)4>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0.0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (float *)(v4 + 4 * v3 * a3);
  v6 = (float *)(v4 + 4 * v3 * a2);
  v7 = *(float *)(a1 + 16);
  v8 = 0.0;
  do
  {
    v9 = *v5++;
    v10 = v9;
    v11 = *v6++;
    v8 = v8 + powf(vabds_f32(v10, v11), v7);
    --v3;
  }
  while (v3);
  return v8;
}

void faiss::`anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)4>>::~ExtraDistanceComputer()
{
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::hamming<64ul>(_QWORD *a1, _QWORD *a2)
{
  uint8x8_t v2;

  v2 = (uint8x8_t)vcnt_s8((int8x8_t)(*a2 ^ *a1));
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

float faiss::hamming<128ul>(int8x16_t *a1, int8x16_t *a2)
{
  int32x2_t v2;
  float result;

  v2 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a2, *a1))))));
  LODWORD(result) = vadd_s32(vdup_lane_s32(v2, 1), v2).u32[0];
  return result;
}

uint64_t faiss::hamming<256ul>(int8x16_t *a1, int8x16_t *a2)
{
  return vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a2, *a1))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a2[1], a1[1])))))));
}

uint64_t faiss::hamming(faiss *this, const unint64_t *a2, const unint64_t *a3)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8x8_t v7;

  for (i = 0; a3; a3 = (const unint64_t *)((char *)a3 - 1))
  {
    v5 = *(_QWORD *)this;
    this = (faiss *)((char *)this + 8);
    v4 = v5;
    v6 = *a2++;
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)(v6 ^ v4));
    v7.i16[0] = vaddlv_u8(v7);
    i = (i + v7.i32[0]);
  }
  return i;
}

uint64_t *faiss::hammings(uint64_t *this, const unint64_t *a2, const unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const unint64_t *v12;
  int v13;
  uint64_t *v14;
  const unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t v20;

  v7 = a5 * (_QWORD)a3;
  if (a5 * (_QWORD)a3)
  {
    v8 = 0;
    v9 = a5 * a4;
    v10 = 8 * a5;
    do
    {
      if (v9)
      {
        v11 = 0;
        v12 = a2;
        do
        {
          v13 = 0;
          if (a5)
          {
            v14 = this;
            v15 = v12;
            v16 = a5;
            do
            {
              v18 = *v14++;
              v17 = v18;
              v19 = *v15++;
              v20 = (uint8x8_t)vcnt_s8((int8x8_t)(v19 ^ v17));
              v20.i16[0] = vaddlv_u8(v20);
              v13 += v20.i32[0];
              --v16;
            }
            while (v16);
          }
          *(_DWORD *)(a6 + 4 * v11) = v13;
          v11 += a5;
          v12 = (const unint64_t *)((char *)v12 + v10);
        }
        while (v11 < v9);
      }
      v8 += a5;
      this = (uint64_t *)((char *)this + v10);
    }
    while (v8 < v7);
  }
  return this;
}

float *faiss::fvec2bitvec(float *this, float *a2, unsigned __int8 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  char v8;
  float *v9;
  float v10;
  char v11;

  if (a3)
  {
    v3 = 0;
    do
    {
      v4 = v3 + 8;
      v5 = (_DWORD)a3 - v3;
      if (v4 <= (unint64_t)a3)
        v6 = 8;
      else
        v6 = v5;
      if ((int)v6 < 1)
      {
        v7 = 0;
      }
      else
      {
        v7 = 0;
        v8 = 1;
        v9 = this;
        do
        {
          v10 = *v9++;
          if (v10 >= 0.0)
            v11 = v8;
          else
            v11 = 0;
          v7 |= v11;
          v8 *= 2;
          --v6;
        }
        while (v6);
      }
      *(_BYTE *)a2 = v7;
      a2 = (float *)((char *)a2 + 1);
      this += 8;
      v3 = v4;
    }
    while (v4 < (unint64_t)a3);
  }
  return this;
}

float *faiss::fvecs2bitvecs(float *this, float *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  float *v7;
  unint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v4 = a4;
    v7 = this;
    v8 = (unint64_t)(a3 + 7) >> 3;
    v9 = 4 * (_QWORD)a3;
    do
    {
      this = faiss::fvec2bitvec(v7, a2, a3);
      a2 = (float *)((char *)a2 + v8);
      v7 = (float *)((char *)v7 + v9);
      --v4;
    }
    while (v4);
  }
  return this;
}

void faiss::bitvecs2fvecs(faiss *this, const unsigned __int8 *a2, faiss *a3, float *a4)
{
  float *v4;
  unint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v4 = a4;
    v8 = ((unint64_t)a3 + 7) >> 3;
    v9 = 4 * (_QWORD)a3;
    do
    {
      faiss::binary_to_real(a3, (uint64_t)this, a2, a4);
      a2 += v9;
      this = (faiss *)((char *)this + v8);
      v4 = (float *)((char *)v4 - 1);
    }
    while (v4);
  }
}

unint64_t *faiss::bitvec_print(unint64_t *this, const unsigned __int8 *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;

  if (a2)
  {
    v3 = this;
    v4 = 0;
    do
    {
      v5 = 0;
      v6 = *v3;
      v7 = 64;
      do
      {
        v5 = v6 & 1 | (2 * v5);
        v6 >>= 1;
        --v7;
      }
      while (v7);
      if (v4 < (unint64_t)a2)
      {
        v8 = 0;
        do
        {
          printf("%d", v5 & 1);
          v9 = v8 + 1;
          if (v8 > 0x3E)
            break;
          v5 >>= 1;
          ++v8;
        }
        while (v9 + v4 < (unint64_t)a2);
        v4 += v9;
      }
      ++v3;
      this = (unint64_t *)putchar(32);
    }
    while (v4 < (unint64_t)a2);
  }
  return this;
}

void faiss::bitvec_shuffle(faiss *this, unint64_t a2, uint64_t a3, unsigned int *a4, const int *a5, const unsigned __int8 *a6, unsigned __int8 *a7)
{
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  faiss *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  std::string *v21;
  size_t size;
  void *exception;
  std::string v24;

  if (a3)
  {
    v12 = a4;
    v13 = a3;
    do
    {
      v15 = *v12++;
      v14 = v15;
      if ((v15 & 0x80000000) != 0 || v14 >= a2)
      {
        memset(&v24, 0, sizeof(v24));
        v20 = snprintf(0, 0, "Error: '%s' failed", "order[i] >= 0 && order[i] < da");
        std::string::resize(&v24, v20 + 1, 0);
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v24;
        else
          v21 = (std::string *)v24.__r_.__value_.__r.__words[0];
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        else
          size = v24.__r_.__value_.__l.__size_;
        snprintf((char *)v21, size, "Error: '%s' failed", "order[i] >= 0 && order[i] < da");
        exception = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(exception, &v24, "void faiss::bitvec_shuffle(size_t, size_t, size_t, const int *, const uint8_t *, uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 433);
      }
      --v13;
    }
    while (v13);
  }
  if (this)
  {
    v16 = 0;
    v17 = (a2 + 7) >> 3;
    v18 = (unint64_t)(a3 + 7) >> 3;
    do
    {
      bzero((void *)&a6[(_QWORD)v16 * v18], (unint64_t)(a3 + 7) >> 3);
      if (a3)
      {
        v19 = 0;
        do
        {
          a6[(_QWORD)v16 * v18 + (v19 >> 3)] |= ((*((unsigned __int8 *)a5 + (_QWORD)v16 * v17 + ((int)a4[v19] >> 3)) >> (a4[v19] & 7)) & 1) << (v19 & 7);
          ++v19;
        }
        while (a3 != v19);
      }
      v16 = (faiss *)((char *)v16 + 1);
    }
    while (v16 != this);
  }
}

void sub_1D48E5FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *faiss::hammings(uint64_t *this, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  __int128 v7;
  const unsigned __int8 *i;
  uint64_t v9;
  int8x16_t *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint8x8_t v14;
  int v15;
  std::string *v16;
  size_t size;
  void *exception;
  std::string v19;

  if ((a5 & 7) != 0)
  {
    memset(&v19, 0, sizeof(v19));
    v15 = snprintf(0, 0, "Error: '%s' failed", "ncodes % 8 == 0");
    std::string::resize(&v19, v15 + 1, 0);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v19;
    else
      v16 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      size = v19.__r_.__value_.__l.__size_;
    snprintf((char *)v16, size, "Error: '%s' failed", "ncodes % 8 == 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v19, "void faiss::hammings(const uint8_t *, const uint8_t *, size_t, size_t, size_t, hamdis_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 464);
  }
  *((_QWORD *)&v7 + 1) = a5;
  *(_QWORD *)&v7 = a5 - 8;
  switch((unint64_t)(v7 >> 3))
  {
    case 0uLL:
      if (a3)
      {
        for (i = 0; i != a3; ++i)
        {
          if (a4)
          {
            v9 = this[(_QWORD)i];
            v10 = a2;
            v11 = a6;
            v12 = a4;
            do
            {
              v13 = v10->i64[0];
              v10 = (int8x16_t *)((char *)v10 + 8);
              v14 = (uint8x8_t)vcnt_s8((int8x8_t)(v13 ^ v9));
              v14.i16[0] = vaddlv_u8(v14);
              *v11++ = v14.i32[0];
              --v12;
            }
            while (v12);
          }
          a6 += a4;
        }
      }
      break;
    case 1uLL:
      this = (uint64_t *)faiss::hammings<128ul>((uint64_t)this, a2, (uint64_t)a3, a4, a6);
      break;
    case 3uLL:
      this = (uint64_t *)faiss::hammings<256ul>((uint64_t)this, a2, (uint64_t)a3, a4, a6);
      break;
    case 7uLL:
      this = (uint64_t *)faiss::hammings<512ul>((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a6);
      break;
    default:
      this = faiss::hammings(this, (const unint64_t *)a2, (const unint64_t *)a3, a4, 8 * a5, (uint64_t)a6, a7);
      break;
  }
  return this;
}

void sub_1D48E61B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::hammings<128ul>(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t i;
  int8x16_t v6;
  int8x16_t *v7;
  _DWORD *v8;
  uint64_t v9;
  int8x16_t v10;
  int32x2_t v11;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a4)
      {
        v6 = *(int8x16_t *)(result + 16 * i);
        v7 = a2;
        v8 = a5;
        v9 = a4;
        do
        {
          v10 = *v7++;
          v11 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10, v6))))));
          *v8++ = vadd_s32(vdup_lane_s32(v11, 1), v11).u32[0];
          --v9;
        }
        while (v9);
      }
      a5 += a4;
    }
  }
  return result;
}

uint64_t faiss::hammings<256ul>(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t i;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  _DWORD *v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a4)
      {
        v6 = (int8x16_t *)(result + 32 * i);
        v8 = *v6;
        v7 = v6[1];
        v9 = a2;
        v10 = a5;
        v11 = a4;
        do
        {
          v13 = *v9;
          v12 = v9[1];
          v9 += 2;
          *v10++ = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v13, v8))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v12, v7)))))));
          --v11;
        }
        while (v11);
      }
      a5 += a4;
    }
  }
  return result;
}

uint64_t faiss::hammings<512ul>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a4)
      {
        v6 = 0;
        v7 = a2;
        do
        {
          v8 = 0;
          v9 = 0uLL;
          do
          {
            v9 = vaddq_s32(v9, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v7 + v8), *(int8x16_t *)(result + v8)))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v7 + v8 + 16), *(int8x16_t *)(result + v8 + 16))))))));
            v8 += 32;
          }
          while (v8 != 64);
          *(_DWORD *)(a5 + 4 * i * a4 + 4 * v6++) = vaddvq_s32(v9);
          v7 += 64;
        }
        while (v6 != a4);
      }
      result += 64;
    }
  }
  return result;
}

unint64_t *faiss::hammings_knn_hc(uint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, int a6)
{
  int v7;
  unint64_t *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t *result;
  int8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  int *v43;
  int v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t v67;
  const unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int8x16_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  int8x16_t *v88;
  int32x2_t v89;
  signed __int32 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  signed __int32 v95;
  signed __int32 v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  int8x16_t v107;
  int8x16_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  int8x16_t *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v125;
  int v126;
  uint64_t v127;
  unint64_t *v128;
  unsigned __int8 *v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v133;

  v7 = a5;
  v10 = (unint64_t *)a1;
  *((_QWORD *)&v11 + 1) = a5;
  *(_QWORD *)&v11 = a5 - 4;
  switch((unint64_t)(v11 >> 2))
  {
    case 0uLL:
      v12 = a1[1];
      result = (unint64_t *)faiss::HeapArray<faiss::CMax<int,long long>>::heapify(a1);
      if (!a4)
        goto LABEL_127;
      v15 = 0;
      v16 = faiss::hamming_batch_size;
      v17 = *v10;
      while (1)
      {
        v18 = v15 + v16;
        if (v15 + v16 >= a4)
          v19 = a4;
        else
          v19 = v15 + v16;
        if (!v17)
          goto LABEL_26;
        v20 = 0;
        v21 = v10[3];
        v22 = v10[2] - 8;
        do
        {
          if (v15 >= v19)
            goto LABEL_25;
          result = (unint64_t *)*(unsigned int *)(a2 + 4 * v20);
          v23 = (_DWORD *)(v21 + 4 * v20 * v12);
          v24 = v23 - 1;
          v25 = v22 + 8 * v20 * v12;
          v26 = v15;
          v27 = (_DWORD *)a3 + v15;
          do
          {
            v14.i32[0] = *v27 ^ result;
            v14 = vcnt_s8(v14);
            v14.i16[0] = vaddlv_u8((uint8x8_t)v14);
            if (v14.i32[0] >= *v23)
              goto LABEL_24;
            if (v12 < 2)
            {
              v28 = 1;
              goto LABEL_23;
            }
            v29 = 3;
            v30 = 2;
            v31 = 1;
            while (1)
            {
              v32 = v24[v30];
              if (v29 == v12 + 1 || (v33 = v24[v29], v32 > v33))
              {
                if (v32 < v14.i32[0])
                  break;
                goto LABEL_20;
              }
              v32 = v24[v29];
              v30 = v29;
              if (v33 < v14.i32[0])
                break;
LABEL_20:
              v28 = v30;
              v24[v31] = v32;
              *(_QWORD *)(v25 + 8 * v31) = *(_QWORD *)(v25 + 8 * v30);
              v30 *= 2;
              v29 = (2 * v28) | 1;
              v31 = v28;
              if (v30 > v12)
                goto LABEL_23;
            }
            v28 = v31;
LABEL_23:
            v24[v28] = v14.i32[0];
            *(_QWORD *)(v25 + 8 * v28) = v26;
LABEL_24:
            ++v26;
            ++v27;
          }
          while (v26 < v19);
LABEL_25:
          ++v20;
        }
        while (v20 != v17);
LABEL_26:
        v15 += v16;
        if (v18 >= a4)
          goto LABEL_127;
      }
    case 1uLL:
      v34 = a1[1];
      result = (unint64_t *)faiss::HeapArray<faiss::CMax<int,long long>>::heapify(a1);
      v35 = *v10;
      if (!*v10)
        goto LABEL_127;
      v36 = 0;
      v37 = v10[3];
      v38 = v10[2] - 8;
      while (1)
      {
        if (!a4)
          goto LABEL_46;
        v39 = 0;
        v40 = *(_QWORD *)(a2 + 8 * v36);
        v41 = (int *)(v37 + 4 * v36 * v34);
        v44 = *v41;
        v43 = v41 - 1;
        v42 = v44;
        v45 = v38 + 8 * v36 * v34;
        result = a3;
        do
        {
          v46 = (uint8x8_t)vcnt_s8((int8x8_t)(*result ^ v40));
          v46.i16[0] = vaddlv_u8(v46);
          if (v42 <= v46.i32[0])
            goto LABEL_45;
          if (v34 < 2)
          {
            v47 = 1;
            goto LABEL_44;
          }
          v48 = 3;
          v49 = 2;
          v50 = 1;
          while (1)
          {
            v51 = v43[v49];
            if (v48 != v34 + 1)
            {
              v52 = v43[v48];
              if (v51 <= v52)
                break;
            }
            if (v51 < v46.i32[0])
              goto LABEL_43;
LABEL_41:
            v47 = v49;
            v43[v50] = v51;
            *(_QWORD *)(v45 + 8 * v50) = *(_QWORD *)(v45 + 8 * v49);
            v49 *= 2;
            v48 = (2 * v47) | 1;
            v50 = v47;
            if (v49 > v34)
              goto LABEL_44;
          }
          v51 = v43[v48];
          v49 = v48;
          if (v52 >= v46.i32[0])
            goto LABEL_41;
LABEL_43:
          v47 = v50;
LABEL_44:
          v43[v47] = v46.i32[0];
          *(_QWORD *)(v45 + 8 * v47) = v39;
          v42 = *(_DWORD *)(v37 + 4 * v36 * v34);
LABEL_45:
          ++v39;
          ++result;
        }
        while (v39 != a4);
LABEL_46:
        if (++v36 == v35)
          goto LABEL_127;
      }
    case 3uLL:
      v75 = a1[1];
      result = (unint64_t *)faiss::HeapArray<faiss::CMax<int,long long>>::heapify(a1);
      if (!a4)
        goto LABEL_127;
      v76 = 0;
      v77 = faiss::hamming_batch_size;
      v78 = *v10;
      while (1)
      {
        v79 = v76 + v77;
        if (v76 + v77 >= a4)
          v80 = a4;
        else
          v80 = v76 + v77;
        if (!v78)
          goto LABEL_100;
        v81 = 0;
        v82 = v10[3];
        v83 = v10[2] - 8;
        do
        {
          if (v76 >= v80)
            goto LABEL_99;
          v84 = *(int8x16_t *)(a2 + 16 * v81);
          result = (unint64_t *)(v82 + 4 * v81 * v75);
          v85 = (char *)result - 4;
          v86 = v83 + 8 * v81 * v75;
          v87 = v76;
          v88 = (int8x16_t *)&a3[2 * v76];
          do
          {
            v89 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v88, v84))))));
            v90 = vadd_s32(vdup_lane_s32(v89, 1), v89).u32[0];
            if (v90 >= *(_DWORD *)result)
              goto LABEL_98;
            if (v75 < 2)
            {
              v91 = 1;
              goto LABEL_97;
            }
            v92 = 3;
            v93 = 2;
            v94 = 1;
            while (1)
            {
              v95 = *(_DWORD *)&v85[4 * v93];
              if (v92 == v75 + 1 || (v96 = *(_DWORD *)&v85[4 * v92], v95 > v96))
              {
                if (v95 < v90)
                  break;
                goto LABEL_94;
              }
              v95 = *(_DWORD *)&v85[4 * v92];
              v93 = v92;
              if (v96 < v90)
                break;
LABEL_94:
              v91 = v93;
              *(_DWORD *)&v85[4 * v94] = v95;
              *(_QWORD *)(v86 + 8 * v94) = *(_QWORD *)(v86 + 8 * v93);
              v93 *= 2;
              v92 = (2 * v91) | 1;
              v94 = v91;
              if (v93 > v75)
                goto LABEL_97;
            }
            v91 = v94;
LABEL_97:
            *(_DWORD *)&v85[4 * v91] = v90;
            *(_QWORD *)(v86 + 8 * v91) = v87;
LABEL_98:
            ++v87;
            ++v88;
          }
          while (v87 < v80);
LABEL_99:
          ++v81;
        }
        while (v81 != v78);
LABEL_100:
        v76 += v77;
        if (v79 >= a4)
          goto LABEL_127;
      }
    case 7uLL:
      v97 = a1[1];
      result = (unint64_t *)faiss::HeapArray<faiss::CMax<int,long long>>::heapify(a1);
      if (!a4)
        goto LABEL_127;
      v98 = 0;
      v99 = faiss::hamming_batch_size;
      v100 = *v10;
      while (1)
      {
        v101 = v98 + v99;
        v102 = v98 + v99 >= a4 ? a4 : v98 + v99;
        if (v100)
          break;
LABEL_126:
        v98 += v99;
        if (v101 >= a4)
        {
LABEL_127:
          if (a6)
            return faiss::HeapArray<faiss::CMax<int,long long>>::reorder(v10);
          return result;
        }
      }
      v103 = 0;
      v104 = v10[3];
      v105 = v10[2] - 8;
LABEL_109:
      if (v98 >= v102)
        goto LABEL_125;
      v106 = (int8x16_t *)(a2 + 32 * v103);
      v108 = *v106;
      v107 = v106[1];
      result = (unint64_t *)(v104 + 4 * v103 * v97);
      v109 = (char *)result - 4;
      v110 = v105 + 8 * v103 * v97;
      v111 = v98;
      v112 = (int8x16_t *)&a3[4 * v98];
LABEL_111:
      v113 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v112, v108))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v112[1], v107)))))));
      if (v113 >= *(_DWORD *)result)
        goto LABEL_124;
      if (v97 < 2)
      {
        v114 = 1;
        goto LABEL_123;
      }
      v115 = 3;
      v116 = 2;
      v117 = 1;
      while (1)
      {
        v118 = *(_DWORD *)&v109[4 * v116];
        if (v115 == v97 + 1 || (v119 = *(_DWORD *)&v109[4 * v115], v118 > v119))
        {
          if (v118 < v113)
            goto LABEL_122;
        }
        else
        {
          v118 = *(_DWORD *)&v109[4 * v115];
          v116 = v115;
          if (v119 < v113)
          {
LABEL_122:
            v114 = v117;
LABEL_123:
            *(_DWORD *)&v109[4 * v114] = v113;
            *(_QWORD *)(v110 + 8 * v114) = v111;
LABEL_124:
            ++v111;
            v112 += 2;
            if (v111 >= v102)
            {
LABEL_125:
              if (++v103 == v100)
                goto LABEL_126;
              goto LABEL_109;
            }
            goto LABEL_111;
          }
        }
        v114 = v116;
        *(_DWORD *)&v109[4 * v117] = v118;
        *(_QWORD *)(v110 + 8 * v117) = *(_QWORD *)(v110 + 8 * v116);
        v116 *= 2;
        v115 = (2 * v114) | 1;
        v117 = v114;
        if (v116 > v97)
          goto LABEL_123;
      }
    default:
      v53 = a1[1];
      result = (unint64_t *)faiss::HeapArray<faiss::CMax<int,long long>>::heapify(a1);
      if (!a4)
        goto LABEL_74;
      v55 = a4;
      v56 = 0;
      v121 = faiss::hamming_batch_size;
      v122 = a4;
      v57 = v7;
      v58 = v7 / 8;
      v59 = v7 - (v54 & 0xFFFFFFF8);
      v60 = *v10;
      v61 = *v10;
      v127 = a2;
      v128 = v10;
      v125 = v59;
      v126 = v7 / 8;
      break;
  }
  do
  {
    if (v56 + v121 >= v55)
      v62 = v55;
    else
      v62 = v56 + v121;
    v123 = v56 + v121;
    if (!v61)
      goto LABEL_73;
    v63 = 0;
    v129 = (unsigned __int8 *)a3 + v56 * v57;
    v130 = v56;
    do
    {
      v131 = a2 + v63 * v57;
      v132 = v58;
      v133 = v59;
      if (v56 >= v62)
        goto LABEL_72;
      v64 = (_DWORD *)(v10[3] + 4 * v63 * v53);
      v65 = v64 - 1;
      v66 = v10[2] + 8 * v63 * v53 - 8;
      v67 = v56;
      v68 = v129;
      do
      {
        result = (unint64_t *)faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v131, v68);
        if ((int)result >= *v64)
          goto LABEL_70;
        if (v53 < 2)
        {
          v69 = 1;
          goto LABEL_69;
        }
        v70 = 3;
        v71 = 2;
        v72 = 1;
        while (1)
        {
          v73 = v65[v71];
          if (v70 != v53 + 1)
          {
            v74 = v65[v70];
            if (v73 <= v74)
              break;
          }
          if (v73 < (int)result)
            goto LABEL_68;
LABEL_66:
          v69 = v71;
          v65[v72] = v73;
          *(_QWORD *)(v66 + 8 * v72) = *(_QWORD *)(v66 + 8 * v71);
          v71 *= 2;
          v70 = (2 * v69) | 1;
          v72 = v69;
          if (v71 > v53)
            goto LABEL_69;
        }
        v73 = v65[v70];
        v71 = v70;
        if (v74 >= (int)result)
          goto LABEL_66;
LABEL_68:
        v69 = v72;
LABEL_69:
        v65[v69] = (_DWORD)result;
        *(_QWORD *)(v66 + 8 * v69) = v67;
LABEL_70:
        ++v67;
        v68 += v57;
      }
      while (v67 < v62);
      a2 = v127;
      v10 = v128;
      v60 = *v128;
      v59 = v125;
      v58 = v126;
      v56 = v130;
LABEL_72:
      ++v63;
      v61 = v60;
    }
    while (v63 < v60);
LABEL_73:
    v55 = v122;
    v56 = v123;
  }
  while (v123 < v122);
LABEL_74:
  if (a6)
    return faiss::HeapArray<faiss::CMax<int,long long>>::reorder(v10);
  return result;
}

void faiss::hammings_knn_mc(faiss *this, int8x16_t *a2, const unsigned __int8 *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t *a9)
{
  int v9;
  const unsigned __int8 *v11;
  __int128 v13;
  uint64_t v15;
  __int128 v16;
  char *v17;
  const unsigned __int8 *i;
  int *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const unsigned __int8 *v35;
  unsigned __int8 *v36;
  unint64_t j;
  char *v38;
  uint64_t v39;
  int *v40;
  const unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v57;
  char *v58;
  const unsigned __int8 *n;
  int *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const unsigned __int8 *v79;
  int8x16_t *v80;
  unint64_t ii;
  uint64_t v82;
  int *v83;
  const unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v100;
  char *v101;
  const unsigned __int8 *k;
  int *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  __int128 v114;
  __int128 v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  const unsigned __int8 *v120;
  unsigned __int8 *v121;
  unint64_t m;
  char *v123;
  uint64_t v124;
  int *v125;
  const unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v142;
  char *v143;
  const unsigned __int8 *jj;
  int *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  const unsigned __int8 *v167;
  int8x16_t *v168;
  unint64_t kk;
  char *v170;
  uint64_t v171;
  int *v172;
  const unsigned __int8 *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  signed int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  char *v193;
  const unsigned __int8 *v194;
  int *v195;
  unint64_t v196;
  char *v197;
  const unsigned __int8 *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  __int128 v207;
  __int128 v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  const unsigned __int8 *v212;
  const unsigned __int8 *v213;
  unint64_t mm;
  char *v215;
  int *v216;
  uint64_t v217;
  const unsigned __int8 *v218;
  BOOL v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  int v236;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  std::vector<int>::value_type __x[2];
  char *v262;
  char *v263;
  std::vector<int> v264;

  v9 = a6;
  v11 = a3;
  *((_QWORD *)&v13 + 1) = a6;
  *(_QWORD *)&v13 = a6 - 4;
  switch((unint64_t)(v13 >> 2))
  {
    case 0uLL:
      __x[0] = 0;
      std::vector<int>::vector(&v264, 33 * (_QWORD)a3, __x);
      v15 = operator new[]();
      *(_QWORD *)__x = 0;
      v262 = 0;
      v263 = 0;
      v244 = v15;
      if (v11)
      {
        v17 = 0;
        for (i = 0; i != v11; ++i)
        {
          v19 = &v264.__begin_[33 * (_QWORD)i];
          v20 = v15 + 8 * 33 * (_QWORD)i * a5;
          v21 = *((_DWORD *)this + (_QWORD)i);
          if (v17 >= v263)
          {
            v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v17[-*(_QWORD *)__x] >> 3);
            v23 = v22 + 1;
            if (v22 + 1 > 0x666666666666666)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)&v263[-*(_QWORD *)__x] >> 3) > v23)
              v23 = 0x999999999999999ALL * ((uint64_t)&v263[-*(_QWORD *)__x] >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v263[-*(_QWORD *)__x] >> 3) >= 0x333333333333333)
              v24 = 0x666666666666666;
            else
              v24 = v23;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>((uint64_t)&v263, v24);
            else
              v25 = 0;
            v26 = &v25[40 * v22];
            *(_QWORD *)v26 = v19;
            *((_QWORD *)v26 + 1) = v20;
            *((_DWORD *)v26 + 4) = v21;
            *(_QWORD *)(v26 + 20) = 33;
            *((_DWORD *)v26 + 7) = 0;
            *((_DWORD *)v26 + 8) = a5;
            v28 = *(char **)__x;
            v27 = v262;
            v29 = v26;
            v11 = a3;
            if (v262 != *(char **)__x)
            {
              do
              {
                v16 = *(_OWORD *)(v27 - 40);
                v30 = *(_OWORD *)(v27 - 24);
                *((_DWORD *)v29 - 2) = *((_DWORD *)v27 - 2);
                *(_OWORD *)(v29 - 24) = v30;
                *(_OWORD *)(v29 - 40) = v16;
                v29 -= 40;
                v27 -= 40;
              }
              while (v27 != v28);
              v27 = v28;
            }
            v17 = v26 + 40;
            *(_QWORD *)__x = v29;
            v262 = v26 + 40;
            v263 = &v25[40 * v24];
            if (v27)
              operator delete(v27);
            v15 = v244;
          }
          else
          {
            *(_QWORD *)v17 = v19;
            *((_QWORD *)v17 + 1) = v20;
            *((_DWORD *)v17 + 4) = v21;
            *(_QWORD *)(v17 + 20) = 33;
            *((_DWORD *)v17 + 7) = 0;
            *((_DWORD *)v17 + 8) = a5;
            v17 += 40;
            v11 = a3;
          }
          v262 = v17;
        }
      }
      v31 = a4;
      if (a4)
      {
        v32 = 0;
        v249 = faiss::hamming_batch_size;
        v255 = 4 * faiss::hamming_batch_size;
        do
        {
          v33 = v32 + v249;
          if (v32 + v249 >= v31)
            v34 = v31;
          else
            v34 = v32 + v249;
          if (v11)
          {
            v35 = 0;
            do
            {
              v36 = (unsigned __int8 *)a2;
              for (j = v32; j < v34; v36 += 4)
                faiss::HCounterState<faiss::HammingComputer4>::update_counter((uint64_t *)(*(_QWORD *)__x + 40 * (_QWORD)v35), v36, j++, *(int8x8_t *)&v16);
              ++v35;
              v11 = a3;
            }
            while (v35 != a3);
          }
          v31 = a4;
          a2 = (int8x16_t *)((char *)a2 + v255);
          v32 += v249;
        }
        while (v33 < a4);
      }
      v38 = *(char **)__x;
      v39 = a7;
      v40 = a8;
      if (v11)
      {
        v41 = 0;
        v42 = 8 * a5;
        do
        {
          if (a5)
          {
            v43 = 0;
            v44 = 0;
            LODWORD(v45) = 0;
            v46 = &v38[40 * (_QWORD)v41];
            v49 = *(_QWORD *)v46;
            v47 = v46 + 8;
            v48 = v49;
            do
            {
              v50 = (int)v45;
              if (*(int *)(v48 + 4 * v44) >= 1 && (int)v45 < a5)
              {
                v52 = 0;
                v53 = (uint64_t)(int)v45 << 32;
                v54 = *v47 + v43;
                do
                {
                  *(_QWORD *)&v40[2 * (int)v45 + 2 * v52] = *(_QWORD *)(v54 + 8 * v52);
                  *(_DWORD *)(v39 + 4 * (int)v45 + 4 * v52) = v44;
                  v55 = (int)v45 + 1 + v52++;
                  v53 += 0x100000000;
                }
                while (v52 < *(int *)(v48 + 4 * v44) && v55 < a5);
                LODWORD(v45) = v45 + v52;
                v50 = v53 >> 32;
              }
              if (v44 > 0x1F)
                break;
              ++v44;
              v43 += v42;
            }
            while (v50 < a5);
          }
          else
          {
            LODWORD(v45) = 0;
          }
          v45 = (int)v45;
          if ((int)v45 < a5)
          {
            do
            {
              *(_QWORD *)&v40[2 * v45] = -1;
              *(_DWORD *)(v39 + 4 * v45++) = 0x7FFFFFFF;
            }
            while (a5 != v45);
          }
          ++v41;
          v39 += 4 * a5;
          v40 = (int *)((char *)v40 + v42);
        }
        while (v41 != v11);
      }
      goto LABEL_109;
    case 1uLL:
      __x[0] = 0;
      std::vector<int>::vector(&v264, 65 * (_QWORD)a3, __x);
      v251 = operator new[]();
      *(_QWORD *)__x = 0;
      v262 = 0;
      v263 = 0;
      if (v11)
      {
        v101 = 0;
        for (k = 0; k != v11; ++k)
        {
          v103 = &v264.__begin_[65 * (_QWORD)k];
          v104 = v251 + 8 * 65 * (_QWORD)k * a5;
          v105 = *((_QWORD *)this + (_QWORD)k);
          if (v101 >= v263)
          {
            v106 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v101[-*(_QWORD *)__x] >> 3);
            v107 = v106 + 1;
            if (v106 + 1 > 0x666666666666666)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)&v263[-*(_QWORD *)__x] >> 3) > v107)
              v107 = 0x999999999999999ALL * ((uint64_t)&v263[-*(_QWORD *)__x] >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v263[-*(_QWORD *)__x] >> 3) >= 0x333333333333333)
              v108 = 0x666666666666666;
            else
              v108 = v107;
            if (v108)
              v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>((uint64_t)&v263, v108);
            else
              v109 = 0;
            v110 = &v109[40 * v106];
            *(_QWORD *)v110 = v103;
            *((_QWORD *)v110 + 1) = v104;
            *((_QWORD *)v110 + 2) = v105;
            *((_QWORD *)v110 + 3) = 65;
            *((_DWORD *)v110 + 8) = 0;
            *((_DWORD *)v110 + 9) = a5;
            v112 = *(char **)__x;
            v111 = v262;
            v113 = v110;
            v11 = a3;
            if (v262 != *(char **)__x)
            {
              do
              {
                v114 = *(_OWORD *)(v111 - 40);
                v115 = *(_OWORD *)(v111 - 24);
                *((_QWORD *)v113 - 1) = *((_QWORD *)v111 - 1);
                *(_OWORD *)(v113 - 24) = v115;
                *(_OWORD *)(v113 - 40) = v114;
                v113 -= 40;
                v111 -= 40;
              }
              while (v111 != v112);
              v111 = v112;
            }
            v101 = v110 + 40;
            *(_QWORD *)__x = v113;
            v262 = v110 + 40;
            v263 = &v109[40 * v108];
            if (v111)
              operator delete(v111);
          }
          else
          {
            *(_QWORD *)v101 = v103;
            *((_QWORD *)v101 + 1) = v104;
            *((_QWORD *)v101 + 2) = v105;
            *((_QWORD *)v101 + 3) = 65;
            *((_DWORD *)v101 + 8) = 0;
            *((_DWORD *)v101 + 9) = a5;
            v101 += 40;
            v11 = a3;
          }
          v262 = v101;
        }
      }
      v116 = a4;
      if (a4)
      {
        v117 = 0;
        v257 = faiss::hamming_batch_size;
        v245 = 8 * faiss::hamming_batch_size;
        do
        {
          v118 = v117 + v257;
          if (v117 + v257 >= v116)
            v119 = v116;
          else
            v119 = v117 + v257;
          if (v11)
          {
            v120 = 0;
            do
            {
              v121 = (unsigned __int8 *)a2;
              for (m = v117; m < v119; v121 += 8)
                faiss::HCounterState<faiss::HammingComputer8>::update_counter((uint64_t *)(*(_QWORD *)__x + 40 * (_QWORD)v120), v121, m++);
              ++v120;
              v11 = a3;
            }
            while (v120 != a3);
          }
          a2 = (int8x16_t *)((char *)a2 + v245);
          v117 += v257;
          v116 = a4;
        }
        while (v118 < a4);
      }
      v123 = *(char **)__x;
      v124 = a7;
      v125 = a8;
      if (v11)
      {
        v126 = 0;
        v127 = 8 * a5;
        do
        {
          if (a5)
          {
            v128 = 0;
            v129 = 0;
            LODWORD(v130) = 0;
            v131 = &v123[40 * (_QWORD)v126];
            v134 = *(_QWORD *)v131;
            v132 = v131 + 8;
            v133 = v134;
            do
            {
              v135 = (int)v130;
              if (*(int *)(v133 + 4 * v129) >= 1 && (int)v130 < a5)
              {
                v137 = 0;
                v138 = (uint64_t)(int)v130 << 32;
                v139 = *v132 + v128;
                do
                {
                  *(_QWORD *)&v125[2 * (int)v130 + 2 * v137] = *(_QWORD *)(v139 + 8 * v137);
                  *(_DWORD *)(v124 + 4 * (int)v130 + 4 * v137) = v129;
                  v140 = (int)v130 + 1 + v137++;
                  v138 += 0x100000000;
                }
                while (v137 < *(int *)(v133 + 4 * v129) && v140 < a5);
                LODWORD(v130) = v130 + v137;
                v135 = v138 >> 32;
              }
              if (v129 > 0x3F)
                break;
              ++v129;
              v128 += v127;
            }
            while (v135 < a5);
          }
          else
          {
            LODWORD(v130) = 0;
          }
          v130 = (int)v130;
          if ((int)v130 < a5)
          {
            do
            {
              *(_QWORD *)&v125[2 * v130] = -1;
              *(_DWORD *)(v124 + 4 * v130++) = 0x7FFFFFFF;
            }
            while (a5 != v130);
          }
          ++v126;
          v124 += 4 * a5;
          v125 = (int *)((char *)v125 + v127);
        }
        while (v126 != v11);
      }
      if (v123)
      {
        v262 = v123;
        operator delete(v123);
      }
      v100 = v251;
      break;
    case 3uLL:
      __x[0] = 0;
      std::vector<int>::vector(&v264, 129 * (_QWORD)a3, __x);
      v57 = operator new[]();
      *(_QWORD *)__x = 0;
      v262 = 0;
      v263 = 0;
      v244 = v57;
      if (v11)
      {
        v58 = 0;
        for (n = 0; n != v11; ++n)
        {
          v60 = &v264.__begin_[129 * (_QWORD)n];
          v61 = v57 + 8 * 129 * (_QWORD)n * a5;
          v62 = (uint64_t *)((char *)this + 16 * (_QWORD)n);
          v64 = *v62;
          v63 = v62[1];
          if (v58 >= v263)
          {
            v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v58[-*(_QWORD *)__x] >> 4);
            v66 = v65 + 1;
            if (v65 + 1 > 0x555555555555555)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)&v263[-*(_QWORD *)__x] >> 4) > v66)
              v66 = 0x5555555555555556 * ((uint64_t)&v263[-*(_QWORD *)__x] >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v263[-*(_QWORD *)__x] >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v67 = 0x555555555555555;
            else
              v67 = v66;
            if (v67)
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>((uint64_t)&v263, v67);
            else
              v68 = 0;
            v69 = &v68[48 * v65];
            *(_QWORD *)v69 = v60;
            *((_QWORD *)v69 + 1) = v61;
            *((_QWORD *)v69 + 2) = v64;
            *((_QWORD *)v69 + 3) = v63;
            *((_QWORD *)v69 + 4) = 129;
            *((_DWORD *)v69 + 10) = 0;
            *((_DWORD *)v69 + 11) = a5;
            v71 = *(char **)__x;
            v70 = v262;
            v72 = v69;
            v11 = a3;
            if (v262 != *(char **)__x)
            {
              do
              {
                v73 = *((_OWORD *)v70 - 3);
                v74 = *((_OWORD *)v70 - 1);
                *((_OWORD *)v72 - 2) = *((_OWORD *)v70 - 2);
                *((_OWORD *)v72 - 1) = v74;
                *((_OWORD *)v72 - 3) = v73;
                v72 -= 48;
                v70 -= 48;
              }
              while (v70 != v71);
              v70 = v71;
            }
            v58 = v69 + 48;
            *(_QWORD *)__x = v72;
            v262 = v69 + 48;
            v263 = &v68[48 * v67];
            if (v70)
              operator delete(v70);
            v57 = v244;
          }
          else
          {
            *(_QWORD *)v58 = v60;
            *((_QWORD *)v58 + 1) = v61;
            *((_QWORD *)v58 + 2) = v64;
            *((_QWORD *)v58 + 3) = v63;
            *((_QWORD *)v58 + 4) = 129;
            *((_DWORD *)v58 + 10) = 0;
            *((_DWORD *)v58 + 11) = a5;
            v58 += 48;
            v11 = a3;
          }
          v262 = v58;
        }
      }
      v75 = a4;
      if (a4)
      {
        v76 = 0;
        v250 = faiss::hamming_batch_size;
        v256 = 16 * faiss::hamming_batch_size;
        do
        {
          v77 = v76 + v250;
          if (v76 + v250 >= v75)
            v78 = v75;
          else
            v78 = v76 + v250;
          if (v11)
          {
            v79 = 0;
            do
            {
              v80 = a2;
              for (ii = v76; ii < v78; ++v80)
                faiss::HCounterState<faiss::HammingComputer16>::update_counter((int8x16_t *)(*(_QWORD *)__x + 48 * (_QWORD)v79), v80, ii++);
              ++v79;
              v11 = a3;
            }
            while (v79 != a3);
          }
          v75 = a4;
          a2 = (int8x16_t *)((char *)a2 + v256);
          v76 += v250;
        }
        while (v77 < a4);
      }
      v38 = *(char **)__x;
      v82 = a7;
      v83 = a8;
      if (v11)
      {
        v84 = 0;
        v85 = 8 * a5;
        do
        {
          if (a5)
          {
            v86 = 0;
            v87 = 0;
            LODWORD(v88) = 0;
            v89 = &v38[48 * (_QWORD)v84];
            v92 = *(_QWORD *)v89;
            v90 = v89 + 8;
            v91 = v92;
            do
            {
              v93 = (int)v88;
              if (*(int *)(v91 + 4 * v87) >= 1 && (int)v88 < a5)
              {
                v95 = 0;
                v96 = (uint64_t)(int)v88 << 32;
                v97 = *v90 + v86;
                do
                {
                  *(_QWORD *)&v83[2 * (int)v88 + 2 * v95] = *(_QWORD *)(v97 + 8 * v95);
                  *(_DWORD *)(v82 + 4 * (int)v88 + 4 * v95) = v87;
                  v98 = (int)v88 + 1 + v95++;
                  v96 += 0x100000000;
                }
                while (v95 < *(int *)(v91 + 4 * v87) && v98 < a5);
                LODWORD(v88) = v88 + v95;
                v93 = v96 >> 32;
              }
              if (v87 > 0x7F)
                break;
              ++v87;
              v86 += v85;
            }
            while (v93 < a5);
          }
          else
          {
            LODWORD(v88) = 0;
          }
          v88 = (int)v88;
          if ((int)v88 < a5)
          {
            do
            {
              *(_QWORD *)&v83[2 * v88] = -1;
              *(_DWORD *)(v82 + 4 * v88++) = 0x7FFFFFFF;
            }
            while (a5 != v88);
          }
          ++v84;
          v82 += 4 * a5;
          v83 = (int *)((char *)v83 + v85);
        }
        while (v84 != v11);
      }
LABEL_109:
      if (v38)
      {
        v262 = v38;
        operator delete(v38);
      }
      v100 = v244;
      break;
    case 7uLL:
      __x[0] = 0;
      std::vector<int>::vector(&v264, 257 * (_QWORD)a3, __x);
      v142 = operator new[]();
      *(_QWORD *)__x = 0;
      v262 = 0;
      v263 = 0;
      v241 = v142;
      if (v11)
      {
        v143 = 0;
        for (jj = 0; jj != v11; ++jj)
        {
          v145 = &v264.__begin_[257 * (_QWORD)jj];
          v146 = (uint64_t *)((char *)this + 32 * (_QWORD)jj);
          v147 = *v146;
          v148 = v146[1];
          v149 = v146[2];
          v150 = v146[3];
          if (v143 >= v263)
          {
            v246 = *v146;
            v252 = v142 + 8 * 257 * (_QWORD)jj * a5;
            v151 = (uint64_t)&v143[-*(_QWORD *)__x] >> 6;
            if ((unint64_t)(v151 + 1) >> 58)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            v152 = (uint64_t)&v263[-*(_QWORD *)__x] >> 5;
            if (v152 <= v151 + 1)
              v152 = v151 + 1;
            if ((unint64_t)&v263[-*(_QWORD *)__x] >= 0x7FFFFFFFFFFFFFC0)
              v153 = 0x3FFFFFFFFFFFFFFLL;
            else
              v153 = v152;
            if (v153)
              v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer32>>>((uint64_t)&v263, v153);
            else
              v154 = 0;
            v155 = &v154[64 * v151];
            *(_QWORD *)v155 = v145;
            *((_QWORD *)v155 + 1) = v252;
            *((_QWORD *)v155 + 2) = v246;
            *((_QWORD *)v155 + 3) = v148;
            *((_QWORD *)v155 + 4) = v149;
            *((_QWORD *)v155 + 5) = v150;
            *((_QWORD *)v155 + 6) = 257;
            *((_DWORD *)v155 + 14) = 0;
            *((_DWORD *)v155 + 15) = a5;
            v157 = *(char **)__x;
            v156 = v262;
            v158 = v155;
            v11 = a3;
            if (v262 != *(char **)__x)
            {
              do
              {
                v159 = *((_OWORD *)v156 - 4);
                v160 = *((_OWORD *)v156 - 3);
                v161 = *((_OWORD *)v156 - 1);
                *((_OWORD *)v158 - 2) = *((_OWORD *)v156 - 2);
                *((_OWORD *)v158 - 1) = v161;
                *((_OWORD *)v158 - 4) = v159;
                *((_OWORD *)v158 - 3) = v160;
                v158 -= 64;
                v156 -= 64;
              }
              while (v156 != v157);
              v156 = v157;
            }
            v143 = v155 + 64;
            *(_QWORD *)__x = v158;
            v262 = v155 + 64;
            v263 = &v154[64 * v153];
            if (v156)
              operator delete(v156);
            v142 = v241;
          }
          else
          {
            *(_QWORD *)v143 = v145;
            *((_QWORD *)v143 + 1) = v142 + 8 * 257 * (_QWORD)jj * a5;
            *((_QWORD *)v143 + 2) = v147;
            *((_QWORD *)v143 + 3) = v148;
            *((_QWORD *)v143 + 4) = v149;
            *((_QWORD *)v143 + 5) = v150;
            *((_QWORD *)v143 + 6) = 257;
            *((_DWORD *)v143 + 14) = 0;
            *((_DWORD *)v143 + 15) = a5;
            v143 += 64;
            v11 = a3;
          }
          v262 = v143;
        }
      }
      v162 = a4;
      if (a4)
      {
        v163 = 0;
        v164 = faiss::hamming_batch_size;
        v258 = 32 * faiss::hamming_batch_size;
        do
        {
          v165 = v163 + v164;
          if (v163 + v164 >= v162)
            v166 = v162;
          else
            v166 = v163 + v164;
          if (v11)
          {
            v167 = 0;
            do
            {
              v168 = a2;
              for (kk = v163; kk < v166; v168 += 2)
                faiss::HCounterState<faiss::HammingComputer32>::update_counter((int8x16_t *)(*(_QWORD *)__x + ((_QWORD)v167 << 6)), v168, kk++);
              ++v167;
              v11 = a3;
            }
            while (v167 != a3);
          }
          v162 = a4;
          a2 = (int8x16_t *)((char *)a2 + v258);
          v163 += v164;
        }
        while (v165 < a4);
      }
      v170 = *(char **)__x;
      v171 = a7;
      v172 = a8;
      if (v11)
      {
        v173 = 0;
        v174 = 8 * a5;
        do
        {
          if (a5)
          {
            v175 = 0;
            v176 = 0;
            LODWORD(v177) = 0;
            v178 = &v170[64 * (_QWORD)v173];
            v181 = *(_QWORD *)v178;
            v180 = v178 + 8;
            v179 = v181;
            do
            {
              v182 = (int)v177;
              if (*(int *)(v179 + 4 * v176) >= 1 && (int)v177 < a5)
              {
                v184 = 0;
                v185 = (uint64_t)(int)v177 << 32;
                v186 = *v180 + v175;
                do
                {
                  *(_QWORD *)&v172[2 * (int)v177 + 2 * v184] = *(_QWORD *)(v186 + 8 * v184);
                  *(_DWORD *)(v171 + 4 * (int)v177 + 4 * v184) = v176;
                  v187 = (int)v177 + 1 + v184++;
                  v185 += 0x100000000;
                }
                while (v184 < *(int *)(v179 + 4 * v176) && v187 < a5);
                LODWORD(v177) = v177 + v184;
                v182 = v185 >> 32;
              }
              if (v176 > 0xFF)
                break;
              ++v176;
              v175 += v174;
            }
            while (v182 < a5);
          }
          else
          {
            LODWORD(v177) = 0;
          }
          v177 = (int)v177;
          if ((int)v177 < a5)
          {
            do
            {
              *(_QWORD *)&v172[2 * v177] = -1;
              *(_DWORD *)(v171 + 4 * v177++) = 0x7FFFFFFF;
            }
            while (a5 != v177);
          }
          ++v173;
          v171 += 4 * a5;
          v172 = (int *)((char *)v172 + v174);
        }
        while (v173 != v11);
      }
      if (v170)
      {
        v262 = v170;
        operator delete(v170);
      }
      v100 = v241;
      break;
    default:
      v189 = (8 * a6) | 1;
      v253 = v189;
      __x[0] = 0;
      std::vector<int>::vector(&v264, v189 * (_QWORD)a3, __x);
      v190 = operator new[]();
      *(_QWORD *)__x = 0;
      v262 = 0;
      v236 = v9;
      v192 = v9;
      v263 = 0;
      v240 = v190;
      if (v11)
      {
        v193 = 0;
        v194 = 0;
        v247 = v9 / 8;
        v242 = v9 - (v191 & 0xFFFFFFF8);
        v239 = (8 * v9) | 1;
        do
        {
          v195 = &v264.__begin_[(_QWORD)v194 * v253];
          v196 = v190 + 8 * (_QWORD)v194 * v253 * a5;
          v197 = (char *)this + (_QWORD)v194 * v192;
          if (v193 >= v263)
          {
            v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v193[-*(_QWORD *)__x] >> 4);
            v200 = v199 + 1;
            if (v199 + 1 > 0x555555555555555)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)&v263[-*(_QWORD *)__x] >> 4) > v200)
              v200 = 0x5555555555555556 * ((uint64_t)&v263[-*(_QWORD *)__x] >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v263[-*(_QWORD *)__x] >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v201 = 0x555555555555555;
            else
              v201 = v200;
            if (v201)
              v202 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>((uint64_t)&v263, v201);
            else
              v202 = 0;
            v203 = &v202[48 * v199];
            *(_QWORD *)v203 = v195;
            *((_QWORD *)v203 + 1) = v196;
            *((_QWORD *)v203 + 2) = v197;
            *((_DWORD *)v203 + 6) = v247;
            *((_DWORD *)v203 + 7) = v242;
            v189 = v239;
            *((_QWORD *)v203 + 4) = v239;
            *((_DWORD *)v203 + 10) = 0;
            *((_DWORD *)v203 + 11) = a5;
            v205 = *(char **)__x;
            v204 = v262;
            v206 = v203;
            v198 = a3;
            if (v262 != *(char **)__x)
            {
              do
              {
                v207 = *((_OWORD *)v204 - 3);
                v208 = *((_OWORD *)v204 - 1);
                *((_OWORD *)v206 - 2) = *((_OWORD *)v204 - 2);
                *((_OWORD *)v206 - 1) = v208;
                *((_OWORD *)v206 - 3) = v207;
                v206 -= 48;
                v204 -= 48;
              }
              while (v204 != v205);
              v204 = v205;
            }
            v193 = v203 + 48;
            *(_QWORD *)__x = v206;
            v262 = v203 + 48;
            v263 = &v202[48 * v201];
            if (v204)
              operator delete(v204);
            v190 = v240;
          }
          else
          {
            *(_QWORD *)v193 = v195;
            *((_QWORD *)v193 + 1) = v196;
            *((_QWORD *)v193 + 2) = v197;
            *((_DWORD *)v193 + 6) = v247;
            *((_DWORD *)v193 + 7) = v242;
            *((_DWORD *)v193 + 8) = v189;
            *((_DWORD *)v193 + 9) = 0;
            *((_DWORD *)v193 + 10) = 0;
            *((_DWORD *)v193 + 11) = a5;
            v193 += 48;
            v198 = a3;
          }
          v262 = v193;
          ++v194;
        }
        while (v194 != v198);
      }
      v209 = a4;
      if (a4)
      {
        v210 = 0;
        v248 = faiss::hamming_batch_size;
        v243 = faiss::hamming_batch_size * v192;
        do
        {
          v259 = v210 + v248;
          if (v210 + v248 >= v209)
            v211 = v209;
          else
            v211 = v210 + v248;
          if (a3)
          {
            v212 = 0;
            do
            {
              v213 = (const unsigned __int8 *)a2;
              for (mm = v210; mm < v211; v213 += v192)
                faiss::HCounterState<faiss::HammingComputerDefault>::update_counter((uint64_t *)(*(_QWORD *)__x + 48 * (_QWORD)v212), v213, mm++);
              ++v212;
            }
            while (v212 != a3);
          }
          a2 = (int8x16_t *)((char *)a2 + v243);
          v209 = a4;
          v210 += v248;
        }
        while (v259 < a4);
      }
      v215 = *(char **)__x;
      v217 = a7;
      v216 = a8;
      if (a3)
      {
        v218 = 0;
        if (a5)
          v219 = v236 < 0;
        else
          v219 = 1;
        v220 = !v219;
        v221 = 8 * a5;
        do
        {
          if (v220)
          {
            v222 = 0;
            v223 = 0;
            LODWORD(v224) = 0;
            v225 = &v215[48 * (_QWORD)v218];
            v228 = *(_QWORD *)v225;
            v226 = v225 + 8;
            v227 = v228;
            do
            {
              v229 = (int)v224;
              if (*(int *)(v227 + 4 * v223) >= 1 && (int)v224 < a5)
              {
                v231 = 0;
                v232 = (uint64_t)(int)v224 << 32;
                v233 = *v226 + v222;
                do
                {
                  *(_QWORD *)&v216[2 * (int)v224 + 2 * v231] = *(_QWORD *)(v233 + 8 * v231);
                  *(_DWORD *)(v217 + 4 * (int)v224 + 4 * v231) = v223;
                  v234 = (int)v224 + 1 + v231++;
                  v232 += 0x100000000;
                }
                while (v231 < *(int *)(v227 + 4 * v223) && v234 < a5);
                LODWORD(v224) = v224 + v231;
                v229 = v232 >> 32;
              }
              if (++v223 >= v253)
                break;
              v222 += v221;
            }
            while (v229 < a5);
          }
          else
          {
            LODWORD(v224) = 0;
          }
          v224 = (int)v224;
          if ((int)v224 < a5)
          {
            do
            {
              *(_QWORD *)&v216[2 * v224] = -1;
              *(_DWORD *)(v217 + 4 * v224++) = 0x7FFFFFFF;
            }
            while (a5 != v224);
          }
          ++v218;
          v217 += 4 * a5;
          v216 = (int *)((char *)v216 + v221);
        }
        while (v218 != a3);
      }
      if (v215)
      {
        v262 = v215;
        operator delete(v215);
      }
      v100 = v240;
      break;
  }
  MEMORY[0x1D826288C](v100, 0x1000C8000313F17);
  if (v264.__begin_)
  {
    v264.__end_ = v264.__begin_;
    operator delete(v264.__begin_);
  }
}

void sub_1D48E7C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void faiss::hamming_range_search(faiss *this, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, int a5, uint64_t a6, faiss::RangeSearchResult *a7, faiss::RangeSearchResult *a8)
{
  __int128 v13;
  uint64_t v14;
  int v15;
  faiss::RangeQueryResult *v16;
  int8x8_t v17;
  faiss::RangeQueryResult *v18;
  uint64_t v19;
  const unsigned __int8 *v20;
  uint64_t v21;
  faiss::RangeQueryResult *v22;
  faiss::RangeQueryResult *v23;
  uint64_t v24;
  int8x16_t *v25;
  int32x2_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  faiss::RangeQueryResult *v30;
  faiss::RangeQueryResult *v31;
  uint64_t v32;
  const unsigned __int8 *v33;
  uint8x8_t v34;
  uint64_t v35;
  int8x16_t *v36;
  faiss::RangeQueryResult *v37;
  faiss::RangeQueryResult *v38;
  uint64_t v39;
  int8x16_t *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  faiss::RangeQueryResult *v45;
  faiss::RangeQueryResult *v46;
  uint64_t v47;
  const unsigned __int8 *v48;
  int v49;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char *v54;
  int v55;
  int v56;
  _QWORD v57[6];
  void *__p;
  void *v59;

  *((_QWORD *)&v13 + 1) = a6;
  *(_QWORD *)&v13 = a6 - 4;
  switch((unint64_t)(v13 >> 2))
  {
    case 0uLL:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        if ((_DWORD)a6 != 4)
          __assert_rtn("set", "hamming-inl.h", 86, "code_size == 4");
        v14 = 0;
        do
        {
          v15 = *(_DWORD *)((char *)this + v14 * a6);
          v16 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v14);
          if (a4)
          {
            v18 = v16;
            v19 = 0;
            v20 = (const unsigned __int8 *)a2;
            do
            {
              v17.i32[0] = *(_DWORD *)v20 ^ v15;
              v17 = vcnt_s8(v17);
              v17.i16[0] = vaddlv_u8((uint8x8_t)v17);
              if (v17.i32[0] < a5)
                faiss::RangeQueryResult::add(v18, (float)v17.i32[0], v19);
              v20 += a6;
              ++v19;
            }
            while (a4 != v19);
          }
          ++v14;
        }
        while ((const unsigned __int8 *)v14 != a3);
      }
      goto LABEL_41;
    case 1uLL:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        if ((_DWORD)a6 != 8)
          __assert_rtn("set", "hamming-inl.h", 105, "code_size == 8");
        v28 = 0;
        do
        {
          v29 = *(_QWORD *)((char *)this + v28 * a6);
          v30 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v28);
          if (a4)
          {
            v31 = v30;
            v32 = 0;
            v33 = (const unsigned __int8 *)a2;
            do
            {
              v34 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v33 ^ v29));
              v34.i16[0] = vaddlv_u8(v34);
              if (v34.i32[0] < a5)
                faiss::RangeQueryResult::add(v31, (float)v34.i32[0], v32);
              v33 += a6;
              ++v32;
            }
            while (a4 != v32);
          }
          ++v28;
        }
        while ((const unsigned __int8 *)v28 != a3);
      }
      goto LABEL_41;
    case 3uLL:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        if ((_DWORD)a6 != 16)
          __assert_rtn("set", "hamming-inl.h", 124, "code_size == 16");
        v21 = 0;
        do
        {
          v52 = *(int8x16_t *)((char *)this + v21 * a6);
          v22 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v21);
          if (a4)
          {
            v23 = v22;
            v24 = 0;
            v25 = a2;
            do
            {
              v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v25, v52))))));
              v27 = vadd_s32(vdup_lane_s32(v26, 1), v26).u32[0];
              if (v27 < a5)
                faiss::RangeQueryResult::add(v23, (float)v27, v24);
              v25 = (int8x16_t *)((char *)v25 + a6);
              ++v24;
            }
            while (a4 != v24);
          }
          ++v21;
        }
        while ((const unsigned __int8 *)v21 != a3);
      }
      goto LABEL_41;
    case 7uLL:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        if ((_DWORD)a6 != 32)
          __assert_rtn("set", "hamming-inl.h", 173, "code_size == 32");
        v35 = 0;
        do
        {
          v36 = (int8x16_t *)((char *)this + v35 * a6);
          v51 = *v36;
          v53 = v36[1];
          v37 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v35);
          if (a4)
          {
            v38 = v37;
            v39 = 0;
            v40 = a2;
            do
            {
              v41 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v40, v51))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v40[1], v53)))))));
              if (v41 < a5)
                faiss::RangeQueryResult::add(v38, (float)v41, v39);
              v40 = (int8x16_t *)((char *)v40 + a6);
              ++v39;
            }
            while (a4 != v39);
          }
          ++v35;
        }
        while ((const unsigned __int8 *)v35 != a3);
      }
LABEL_41:
      faiss::RangeSearchPartialResult::finalize((faiss::RangeSearchPartialResult *)v57);
      break;
    default:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        v43 = 0;
        v44 = a6 - (v42 & 0xFFFFFFF8);
        do
        {
          v54 = (char *)this + v43 * a6;
          v55 = (int)a6 / 8;
          v56 = v44;
          v45 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v43);
          if (a4)
          {
            v46 = v45;
            v47 = 0;
            v48 = (const unsigned __int8 *)a2;
            do
            {
              v49 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v54, v48);
              if (v49 < a5)
                faiss::RangeQueryResult::add(v46, (float)v49, v47);
              v48 += a6;
              ++v47;
            }
            while (a4 != v47);
          }
          ++v43;
        }
        while ((const unsigned __int8 *)v43 != a3);
      }
      faiss::RangeSearchPartialResult::finalize((faiss::RangeSearchPartialResult *)v57);
      break;
  }
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  faiss::BufferList::~BufferList((faiss::BufferList *)v57);
}

void sub_1D48E81DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  faiss::BufferList::~BufferList((faiss::BufferList *)&a18);
  _Unwind_Resume(a1);
}

int8x16_t *faiss::hamming_count_thres(int8x16_t *this, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, __int32 a5, uint64_t a6, _QWORD *a7, unint64_t *a8)
{
  __int128 v8;
  uint64_t v9;
  const unsigned __int8 *i;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  uint8x8_t v14;
  const unsigned __int8 *j;
  uint64_t v16;
  int8x16_t *v17;
  uint64_t v18;
  int32x4_t v19;
  int v21;
  std::string *v22;
  size_t size;
  void *exception;
  std::string v25;

  *((_QWORD *)&v8 + 1) = a6;
  *(_QWORD *)&v8 = a6 - 8;
  switch((unint64_t)(v8 >> 3))
  {
    case 0uLL:
      v9 = 0;
      if (a3)
      {
        for (i = 0; i != a3; ++i)
        {
          if (a4)
          {
            v11 = a4;
            v12 = a2;
            do
            {
              v13 = v12->i64[0];
              v12 = (int8x16_t *)((char *)v12 + 8);
              v14 = (uint8x8_t)vcnt_s8((int8x8_t)(v13 ^ this->i64[0]));
              v14.i16[0] = vaddlv_u8(v14);
              if (v14.i32[0] <= a5)
                ++v9;
              --v11;
            }
            while (v11);
          }
          this = (int8x16_t *)((char *)this + 8);
        }
      }
      goto LABEL_22;
    case 1uLL:
      return faiss::hamming_count_thres<128ul>(this, a2, (uint64_t)a3, a4, a5, a7);
    case 3uLL:
      return faiss::hamming_count_thres<256ul>(this, a2, (uint64_t)a3, a4, a5, a7);
    case 7uLL:
      v9 = 0;
      if (a3)
      {
        for (j = 0; j != a3; ++j)
        {
          if (a4)
          {
            v16 = 0;
            v17 = a2;
            do
            {
              v18 = 0;
              v19 = 0uLL;
              do
              {
                v19 = vaddq_s32(v19, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v17[v18], this[v18]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v17[v18 + 1], this[v18 + 1])))))));
                v18 += 2;
              }
              while (v18 != 4);
              if (vaddvq_s32(v19) <= a5)
                ++v9;
              v17 += 4;
              ++v16;
            }
            while (v16 != a4);
          }
          this += 4;
        }
      }
LABEL_22:
      *a7 = v9;
      return this;
    default:
      memset(&v25, 0, sizeof(v25));
      v21 = snprintf(0, 0, "not implemented for %zu bits", a6);
      std::string::resize(&v25, v21 + 1, 0);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v25;
      else
        v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      else
        size = v25.__r_.__value_.__l.__size_;
      snprintf((char *)v22, size, "not implemented for %zu bits", a6);
      exception = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v25, "void faiss::hamming_count_thres(const uint8_t *, const uint8_t *, size_t, size_t, hamdis_t, size_t, size_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 649);
  }
}

void sub_1D48E8458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

int8x16_t *faiss::hamming_count_thres<128ul>(int8x16_t *result, int8x16_t *a2, uint64_t a3, uint64_t a4, __int32 a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t v10;
  int32x2_t v11;

  v6 = 0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a4)
      {
        v8 = a4;
        v9 = a2;
        do
        {
          v10 = *v9++;
          v11 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10, *result))))));
          if (vadd_s32(vdup_lane_s32(v11, 1), v11).i32[0] <= a5)
            ++v6;
          --v8;
        }
        while (v8);
      }
      ++result;
    }
  }
  *a6 = v6;
  return result;
}

int8x16_t *faiss::hamming_count_thres<256ul>(int8x16_t *result, int8x16_t *a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t v10;
  int8x16_t v11;

  v6 = 0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a4)
      {
        v8 = a4;
        v9 = a2;
        do
        {
          v11 = *v9;
          v10 = v9[1];
          v9 += 2;
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v11, *result))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10, result[1]))))))) <= a5)++v6;
          --v8;
        }
        while (v8);
      }
      result += 2;
    }
  }
  *a6 = v6;
  return result;
}

int8x16_t *faiss::crosshamming_count_thres(int8x16_t *this, const unsigned __int8 *a2, __int32 a3, uint64_t a4, _QWORD *a5, unint64_t *a6)
{
  __int128 v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  const unsigned __int8 *v9;
  const unsigned __int8 *v10;
  uint8x8_t v11;
  int v13;
  std::string *v14;
  size_t size;
  void *exception;
  std::string v17;

  *((_QWORD *)&v6 + 1) = a4;
  *(_QWORD *)&v6 = a4 - 8;
  switch((unint64_t)(v6 >> 3))
  {
    case 0uLL:
      v7 = 0;
      if (a2)
      {
        v8 = 0;
        v9 = a2 - 1;
        do
        {
          if (++v8 < a2)
          {
            v10 = 0;
            do
            {
              v11 = (uint8x8_t)vcnt_s8((int8x8_t)(this[1].i64[(_QWORD)v10] ^ this->i64[0]));
              v11.i16[0] = vaddlv_u8(v11);
              if (v11.i32[0] <= a3)
                ++v7;
              ++v10;
            }
            while (v9 != v10);
          }
          this = (int8x16_t *)((char *)this + 8);
          --v9;
        }
        while (v8 != a2);
      }
      *a5 = v7;
      break;
    case 1uLL:
      this = faiss::crosshamming_count_thres<128ul>(this, (unint64_t)a2, a3, a5);
      break;
    case 3uLL:
      this = faiss::crosshamming_count_thres<256ul>(this, (unint64_t)a2, a3, a5);
      break;
    case 7uLL:
      this = (int8x16_t *)faiss::crosshamming_count_thres<512ul>((uint64_t)this, (unint64_t)a2, a3, a5);
      break;
    default:
      memset(&v17, 0, sizeof(v17));
      v13 = snprintf(0, 0, "not implemented for %zu bits", a4);
      std::string::resize(&v17, v13 + 1, 0);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v17;
      else
        v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      snprintf((char *)v14, size, "not implemented for %zu bits", a4);
      exception = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v17, "void faiss::crosshamming_count_thres(const uint8_t *, size_t, hamdis_t, size_t, size_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 674);
  }
  return this;
}

void sub_1D48E8700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

int8x16_t *faiss::crosshamming_count_thres<128ul>(int8x16_t *result, unint64_t a2, __int32 a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int32x2_t v8;

  v4 = 0;
  if (a2)
  {
    v5 = 0;
    v6 = a2;
    do
    {
      if (++v5 < a2)
      {
        v7 = 1;
        do
        {
          v8 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[v7], *result))))));
          if (vadd_s32(vdup_lane_s32(v8, 1), v8).i32[0] <= a3)
            ++v4;
          ++v7;
        }
        while (v6 != v7);
      }
      ++result;
      --v6;
    }
    while (v5 != a2);
  }
  *a4 = v4;
  return result;
}

int8x16_t *faiss::crosshamming_count_thres<256ul>(int8x16_t *result, unint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = 0;
  if (a2)
  {
    v5 = 0;
    v6 = a2 - 1;
    do
    {
      if (++v5 < a2)
      {
        v7 = 0;
        do
        {
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[2 * v7 + 1], *result))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[2 * v7 + 2], result[1]))))))) <= a3)++v4;
          ++v7;
        }
        while (v6 != v7);
      }
      result += 2;
      --v6;
    }
    while (v5 != a2);
  }
  *a4 = v4;
  return result;
}

uint64_t faiss::crosshamming_count_thres<512ul>(uint64_t result, unint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;

  v4 = 0;
  if (a2)
  {
    v5 = 0;
    do
    {
      if (++v5 < a2)
      {
        v6 = result + 16;
        v7 = v5;
        do
        {
          v8 = 0;
          v9 = 0uLL;
          do
          {
            v9 = vaddq_s32(v9, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v6 + v8), *(int8x16_t *)(result + v8)))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v6 + v8 + 16), *(int8x16_t *)(result + v8 + 16))))))));
            v8 += 32;
          }
          while (v8 != 64);
          if (vaddvq_s32(v9) <= a3)
            ++v4;
          v6 += 64;
          ++v7;
        }
        while (v7 != a2);
      }
      result += 64;
    }
    while (v5 != a2);
  }
  *a4 = v4;
  return result;
}

uint64_t faiss::match_hamming_thres(int8x16_t *this, const unsigned __int8 *a2, const unsigned __int8 *a3, uint64_t a4, signed __int32 a5, uint64_t a6, const unsigned __int8 **a7, uint64_t *a8, int *a9)
{
  __int128 v9;
  uint64_t v10;
  const unsigned __int8 *i;
  const unsigned __int8 *j;
  uint8x8_t v13;
  uint64_t result;
  int v16;
  std::string *v17;
  size_t size;
  void *exception;
  std::string v20;

  *((_QWORD *)&v9 + 1) = a6;
  *(_QWORD *)&v9 = a6 - 8;
  switch((unint64_t)(v9 >> 3))
  {
    case 0uLL:
      v10 = 0;
      if (a3)
      {
        for (i = 0; i != a3; ++i)
        {
          if (a4)
          {
            for (j = 0; j != (const unsigned __int8 *)a4; ++j)
            {
              v13 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * (_QWORD)j] ^ this->i64[0]));
              v13.i16[0] = vaddlv_u8(v13);
              if (v13.i32[0] <= a5)
              {
                *a7 = i;
                a7[1] = j;
                a7 += 2;
                ++v10;
                *(_DWORD *)a8 = v13.i32[0];
                a8 = (uint64_t *)((char *)a8 + 4);
              }
            }
          }
          this = (int8x16_t *)((char *)this + 8);
        }
      }
      result = v10;
      break;
    case 1uLL:
      result = faiss::match_hamming_thres<128ul>(this, (uint64_t)a2, (uint64_t)a3, a4, a5, a7, (signed __int32 *)a8);
      break;
    case 3uLL:
      result = faiss::match_hamming_thres<256ul>(this, (uint64_t)a2, (uint64_t)a3, a4, a5, a7, (int *)a8);
      break;
    case 7uLL:
      result = faiss::match_hamming_thres<512ul>((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, a5, a7, (int *)a8);
      break;
    default:
      memset(&v20, 0, sizeof(v20));
      v16 = snprintf(0, 0, "not implemented for %zu bits", a6);
      std::string::resize(&v20, v16 + 1, 0);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v20;
      else
        v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      else
        size = v20.__r_.__value_.__l.__size_;
      snprintf((char *)v17, size, "not implemented for %zu bits", a6);
      exception = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v20, "size_t faiss::match_hamming_thres(const uint8_t *, const uint8_t *, size_t, size_t, hamdis_t, size_t, int64_t *, hamdis_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 702);
  }
  return result;
}

void sub_1D48E8A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::match_hamming_thres<128ul>(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, signed __int32 a5, _QWORD *a6, signed __int32 *a7)
{
  uint64_t v7;
  uint64_t i;
  uint64_t j;
  int32x2_t v10;
  signed __int32 v11;

  v7 = 0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a4)
      {
        for (j = 0; j != a4; ++j)
        {
          v10 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + 16 * j), *a1))))));
          v11 = vadd_s32(vdup_lane_s32(v10, 1), v10).u32[0];
          if (v11 <= a5)
          {
            *a6 = i;
            a6[1] = j;
            a6 += 2;
            ++v7;
            *a7++ = v11;
          }
        }
      }
      ++a1;
    }
  }
  return v7;
}

uint64_t faiss::match_hamming_thres<256ul>(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6, int *a7)
{
  uint64_t v7;
  uint64_t i;
  uint64_t j;
  int v10;

  v7 = 0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a4)
      {
        for (j = 0; j != a4; ++j)
        {
          v10 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + 32 * j), *a1))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + 32 * j + 16), a1[1])))))));
          if (v10 <= a5)
          {
            *a6 = i;
            a6[1] = j;
            a6 += 2;
            ++v7;
            *a7++ = v10;
          }
        }
      }
      a1 += 2;
    }
  }
  return v7;
}

uint64_t faiss::match_hamming_thres<512ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6, int *a7)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  int v13;

  v7 = 0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a4)
      {
        v9 = 0;
        v10 = a2;
        do
        {
          v11 = 0;
          v12 = 0uLL;
          do
          {
            v12 = vaddq_s32(v12, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v10 + v11), *(int8x16_t *)(a1 + v11)))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v10 + v11 + 16), *(int8x16_t *)(a1 + v11 + 16))))))));
            v11 += 32;
          }
          while (v11 != 64);
          v13 = vaddvq_s32(v12);
          if (v13 <= a5)
          {
            *a6 = i;
            a6[1] = v9;
            a6 += 2;
            ++v7;
            *a7++ = v13;
          }
          v10 += 64;
          ++v9;
        }
        while (v9 != a4);
      }
      a1 += 64;
    }
  }
  return v7;
}

uint64_t *faiss::generalized_hammings_knn_hc(uint64_t *result, uint64_t a2, int8x16_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t *v40;
  int8x16_t v41;
  int8x16_t v42;
  char *v43;
  unint64_t v44;
  int8x16_t *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  char *v61;
  unint64_t v62;
  int8x16_t *v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  signed __int32 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  signed __int32 v72;
  signed __int32 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  int8x16_t *v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;

  v11 = (unint64_t *)result;
  v13 = *result;
  v12 = result[1];
  if (a6)
    result = faiss::HeapArray<faiss::CMax<int,long long>>::heapify(result);
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v15 = v13;
    v17 = v11[2];
    v16 = v11[3];
    v18 = (int)v12;
    v19 = v12 & 0xFFFFFFFE;
    v20 = (int)v12 + 1;
    v21.i64[0] = 0x101010101010101;
    v21.i64[1] = 0x101010101010101;
    v22 = a2;
    do
    {
      v23 = v14 * a5;
      result = (uint64_t *)(v16 + 4 * v14 * v18);
      v24 = v17 + 8 * v14 * v18;
      if (a5 == 32)
      {
        if (!a4)
          goto LABEL_81;
        v39 = 0;
        v40 = (int8x16_t *)(a2 + v23);
        v42 = *v40;
        v41 = v40[1];
        v43 = (char *)result - 4;
        v44 = v24 - 8;
        v45 = a3;
LABEL_27:
        v46 = veorq_s8(v45[1], v41);
        v47 = veorq_s8(*v45, v42);
        v48 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v46, 1uLL), v46);
        v49 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v47, 1uLL), v47);
        v50 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v48, 2uLL), v48);
        v51 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v49, 2uLL), v49);
        v52 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v51, 4uLL), v51), v21))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v50, 4uLL), v50), v21)))))));
        if (v52 >= *(_DWORD *)result)
          goto LABEL_40;
        if (!v19)
        {
          v58 = 1;
          goto LABEL_39;
        }
        v53 = 3;
        v54 = 2;
        v55 = 1;
        while (1)
        {
          v56 = *(_DWORD *)&v43[4 * v54];
          if (v53 == v20 || (v57 = *(_DWORD *)&v43[4 * v53], v56 > v57))
          {
            if (v56 < v52)
              goto LABEL_38;
          }
          else
          {
            v56 = *(_DWORD *)&v43[4 * v53];
            v54 = v53;
            if (v57 < v52)
            {
LABEL_38:
              v58 = v55;
LABEL_39:
              *(_DWORD *)&v43[4 * v58] = v52;
              *(_QWORD *)(v44 + 8 * v58) = v39;
LABEL_40:
              v45 += 2;
              if (++v39 == a4)
                goto LABEL_81;
              goto LABEL_27;
            }
          }
          v58 = v54;
          *(_DWORD *)&v43[4 * v55] = v56;
          *(_QWORD *)(v44 + 8 * v55) = *(_QWORD *)(v44 + 8 * v54);
          v54 *= 2;
          v53 = (2 * v58) | 1;
          v55 = v58;
          if (v54 > v18)
            goto LABEL_39;
        }
      }
      if (a5 == 16)
      {
        if (!a4)
          goto LABEL_81;
        v59 = 0;
        v60 = *(int8x16_t *)(a2 + v23);
        v61 = (char *)result - 4;
        v62 = v24 - 8;
        v63 = a3;
LABEL_44:
        v64 = *v63++;
        v65 = veorq_s8(v64, v60);
        v66 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v65, 1uLL), v65);
        v67 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v66, 2uLL), v66);
        *(int32x2_t *)v67.i8 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v67, 4uLL), v67), v21))))));
        v68 = vadd_s32(vdup_lane_s32(*(int32x2_t *)v67.i8, 1), *(int32x2_t *)v67.i8).u32[0];
        if (v68 >= *(_DWORD *)result)
          goto LABEL_57;
        if (!v19)
        {
          v74 = 1;
          goto LABEL_56;
        }
        v69 = 3;
        v70 = 2;
        v71 = 1;
        while (1)
        {
          v72 = *(_DWORD *)&v61[4 * v70];
          if (v69 == v20 || (v73 = *(_DWORD *)&v61[4 * v69], v72 > v73))
          {
            if (v72 < v68)
              goto LABEL_55;
          }
          else
          {
            v72 = *(_DWORD *)&v61[4 * v69];
            v70 = v69;
            if (v73 < v68)
            {
LABEL_55:
              v74 = v71;
LABEL_56:
              *(_DWORD *)&v61[4 * v74] = v68;
              *(_QWORD *)(v62 + 8 * v74) = v59;
LABEL_57:
              if (++v59 == a4)
                goto LABEL_81;
              goto LABEL_44;
            }
          }
          v74 = v70;
          *(_DWORD *)&v61[4 * v71] = v72;
          *(_QWORD *)(v62 + 8 * v71) = *(_QWORD *)(v62 + 8 * v70);
          v70 *= 2;
          v69 = (2 * v74) | 1;
          v71 = v74;
          if (v70 > v18)
            goto LABEL_56;
        }
      }
      if (a5 != 8)
      {
        if ((a5 & 7) != 0)
          faiss::generalized_hammings_knn_hc();
        if (!a4)
          goto LABEL_81;
        v75 = 0;
        v76 = (char *)result - 4;
        v77 = v24 - 8;
        v78 = a3;
LABEL_62:
        if ((int)a5 < 8)
        {
          v80 = 0;
        }
        else
        {
          v79 = 0;
          v80 = 0;
          do
          {
            v81 = v78->i64[v79] ^ *(_QWORD *)(v22 + 8 * v79) | ((unint64_t)(v78->i64[v79] ^ *(_QWORD *)(v22 + 8 * v79)) >> 1);
            v82 = (uint8x8_t)vcnt_s8((int8x8_t)((v81 | (v81 >> 2) | ((v81 | (v81 >> 2)) >> 4)) & 0x101010101010101));
            v82.i16[0] = vaddlv_u8(v82);
            v80 += v82.i32[0];
            ++v79;
          }
          while ((int)a5 / 8 != v79);
        }
        if (v80 >= *(_DWORD *)result)
          goto LABEL_80;
        if (!v19)
        {
          v88 = 1;
          goto LABEL_79;
        }
        v83 = 3;
        v84 = 2;
        v85 = 1;
        while (1)
        {
          v86 = *(_DWORD *)&v76[4 * v84];
          if (v83 == v20 || (v87 = *(_DWORD *)&v76[4 * v83], v86 > v87))
          {
            if (v86 < v80)
              goto LABEL_78;
          }
          else
          {
            v86 = *(_DWORD *)&v76[4 * v83];
            v84 = v83;
            if (v87 < v80)
            {
LABEL_78:
              v88 = v85;
LABEL_79:
              *(_DWORD *)&v76[4 * v88] = v80;
              *(_QWORD *)(v77 + 8 * v88) = v75;
LABEL_80:
              v78 = (int8x16_t *)((char *)v78 + a5);
              if (++v75 == a4)
                goto LABEL_81;
              goto LABEL_62;
            }
          }
          v88 = v84;
          *(_DWORD *)&v76[4 * v85] = v86;
          *(_QWORD *)(v77 + 8 * v85) = *(_QWORD *)(v77 + 8 * v84);
          v84 *= 2;
          v83 = (2 * v88) | 1;
          v85 = v88;
          if (v84 > v18)
            goto LABEL_79;
        }
      }
      if (!a4)
        goto LABEL_81;
      v25 = 0;
      v26 = *(_QWORD *)(a2 + v23);
      v27 = (char *)result - 4;
      v28 = v24 - 8;
      v29 = (uint64_t *)a3;
      do
      {
        v30 = *v29++;
        v31 = v30 ^ v26 | ((v30 ^ v26) >> 1) | ((v30 ^ v26 | ((v30 ^ v26) >> 1)) >> 2);
        v32 = (uint8x8_t)vcnt_s8((int8x8_t)((v31 | (v31 >> 4)) & 0x101010101010101));
        v32.i16[0] = vaddlv_u8(v32);
        if (*(_DWORD *)result <= v32.i32[0])
          goto LABEL_23;
        if (!v19)
        {
          v38 = 1;
          goto LABEL_22;
        }
        v33 = 3;
        v34 = 2;
        v35 = 1;
        while (1)
        {
          v36 = *(_DWORD *)&v27[4 * v34];
          if (v33 != v20)
          {
            v37 = *(_DWORD *)&v27[4 * v33];
            if (v36 <= v37)
              break;
          }
          if (v36 < v32.i32[0])
            goto LABEL_21;
LABEL_18:
          v38 = v34;
          *(_DWORD *)&v27[4 * v35] = v36;
          *(_QWORD *)(v28 + 8 * v35) = *(_QWORD *)(v28 + 8 * v34);
          v34 *= 2;
          v33 = (2 * v38) | 1;
          v35 = v38;
          if (v34 > v18)
            goto LABEL_22;
        }
        v36 = *(_DWORD *)&v27[4 * v33];
        v34 = v33;
        if (v37 >= v32.i32[0])
          goto LABEL_18;
LABEL_21:
        v38 = v35;
LABEL_22:
        *(_DWORD *)&v27[4 * v38] = v32.i32[0];
        *(_QWORD *)(v28 + 8 * v38) = v25;
LABEL_23:
        ++v25;
      }
      while (v25 != a4);
LABEL_81:
      ++v14;
      v22 += a5;
    }
    while (v14 != v15);
  }
  if (a6)
    return (uint64_t *)faiss::HeapArray<faiss::CMax<int,long long>>::reorder(v11);
  return result;
}

uint64_t faiss::HammingComputerDefault::hamming(faiss::HammingComputerDefault *this, const unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int i;
  BOOL v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  int v24;
  int v25;
  _BYTE *v26;
  const unsigned __int8 *v27;

  result = 0;
  v4 = *(_QWORD *)this;
  v5 = *((_DWORD *)this + 2);
  v6 = v5;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  switch(v5 & 7)
  {
    case 1:
      goto LABEL_11;
    case 2:
      goto LABEL_10;
    case 3:
      goto LABEL_9;
    case 4:
      goto LABEL_8;
    case 5:
      goto LABEL_7;
    case 6:
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    default:
      for (i = 0; ; i = v13 + 1)
      {
        v15 = __OFSUB__(v5, 8);
        v5 -= 8;
        if (v5 < 0 != v15)
          break;
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * i] ^ *(_QWORD *)(v4 + 8 * i)));
        v16.i16[0] = vaddlv_u8(v16);
        LODWORD(result) = result + v16.i32[0];
        v7 = i + 1;
LABEL_5:
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * v7] ^ *(_QWORD *)(v4 + 8 * v7)));
        v17.i16[0] = vaddlv_u8(v17);
        LODWORD(result) = result + v17.i32[0];
        v8 = v7 + 1;
LABEL_6:
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * v8] ^ *(_QWORD *)(v4 + 8 * v8)));
        v18.i16[0] = vaddlv_u8(v18);
        LODWORD(result) = result + v18.i32[0];
        v9 = v8 + 1;
LABEL_7:
        v19 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * v9] ^ *(_QWORD *)(v4 + 8 * v9)));
        v19.i16[0] = vaddlv_u8(v19);
        LODWORD(result) = result + v19.i32[0];
        v10 = v9 + 1;
LABEL_8:
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * v10] ^ *(_QWORD *)(v4 + 8 * v10)));
        v20.i16[0] = vaddlv_u8(v20);
        LODWORD(result) = result + v20.i32[0];
        v11 = v10 + 1;
LABEL_9:
        v21 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * v11] ^ *(_QWORD *)(v4 + 8 * v11)));
        v21.i16[0] = vaddlv_u8(v21);
        LODWORD(result) = result + v21.i32[0];
        v12 = v11 + 1;
LABEL_10:
        v22 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * v12] ^ *(_QWORD *)(v4 + 8 * v12)));
        v22.i16[0] = vaddlv_u8(v22);
        LODWORD(result) = result + v22.i32[0];
        v13 = v12 + 1;
LABEL_11:
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&a2[8 * v13] ^ *(_QWORD *)(v4 + 8 * v13)));
        v23.i16[0] = vaddlv_u8(v23);
        result = (result + v23.i32[0]);
      }
      v24 = *((_DWORD *)this + 3);
      if (v24)
      {
        v25 = v24 - 1;
        v26 = (_BYTE *)(v4 + 8 * v6);
        v27 = &a2[8 * v6];
        switch(v25)
        {
          case 0:
            goto LABEL_20;
          case 1:
            goto LABEL_19;
          case 2:
            goto LABEL_18;
          case 3:
            goto LABEL_17;
          case 4:
            goto LABEL_16;
          case 5:
            goto LABEL_15;
          case 6:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v27[6] ^ v26[6]];
LABEL_15:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v27[5] ^ v26[5]];
LABEL_16:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v27[4] ^ v26[4]];
LABEL_17:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v27[3] ^ v26[3]];
LABEL_18:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v27[2] ^ v26[2]];
LABEL_19:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v27[1] ^ v26[1]];
LABEL_20:
            result = result + faiss::hamdis_tab_ham_bytes[*v27 ^ *v26];
            break;
          default:
            return result;
        }
      }
      return result;
  }
}

uint64_t *faiss::HCounterState<faiss::HammingComputer4>::update_counter(uint64_t *result, _DWORD *a2, uint64_t a3, int8x8_t a4)
{
  int v4;
  uint8x8_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  v4 = *((_DWORD *)result + 5);
  a4.i32[0] = *((_DWORD *)result + 4) ^ *a2;
  v5 = (uint8x8_t)vcnt_s8(a4);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.i32[0] >= v4;
  if (v5.i32[0] <= v4)
  {
    v7 = *((_DWORD *)result + 8);
    if (v6)
    {
      v15 = *((_DWORD *)result + 7);
      if (v15 < v7)
      {
        *((_DWORD *)result + 7) = v15 + 1;
        v16 = *result;
        *(_QWORD *)(result[1] + 8 * (v15 + v7 * v5.i32[0])) = a3;
        *(_DWORD *)(v16 + 4 * v5.u32[0]) = v15 + 1;
      }
    }
    else
    {
      v8 = *result;
      v9 = result[1];
      v10 = *(_DWORD *)(*result + 4 * v5.u32[0]);
      *(_DWORD *)(*result + 4 * v5.u32[0]) = v10 + 1;
      *(_QWORD *)(v9 + 8 * (v10 + v7 * v5.i32[0])) = a3;
      v11 = *((_DWORD *)result + 6) + 1;
      v12 = *((_DWORD *)result + 8);
      *((_DWORD *)result + 6) = v11;
      if (v11 == v12)
      {
        v13 = *((_DWORD *)result + 5);
        do
        {
          if (v13 < 1)
            break;
          *((_DWORD *)result + 5) = --v13;
          v14 = *(_DWORD *)(v8 + 4 * v13);
          *((_DWORD *)result + 6) = v11 - v14;
          *((_DWORD *)result + 7) = v14;
        }
        while (!v14);
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t *faiss::HCounterState<faiss::HammingComputer8>::update_counter(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  uint8x8_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  v3 = (uint8x8_t)vcnt_s8((int8x8_t)(result[2] ^ *a2));
  v3.i16[0] = vaddlv_u8(v3);
  v4 = *((_DWORD *)result + 6);
  if (v4 >= v3.i32[0])
  {
    v5 = *((_DWORD *)result + 9);
    if (v4 <= v3.i32[0])
    {
      v13 = *((_DWORD *)result + 8);
      if (v13 < v5)
      {
        *((_DWORD *)result + 8) = v13 + 1;
        v14 = *result;
        *(_QWORD *)(result[1] + 8 * (v13 + v5 * v3.i32[0])) = a3;
        *(_DWORD *)(v14 + 4 * v3.u32[0]) = v13 + 1;
      }
    }
    else
    {
      v6 = *result;
      v7 = result[1];
      v8 = *(_DWORD *)(*result + 4 * v3.u32[0]);
      *(_DWORD *)(*result + 4 * v3.u32[0]) = v8 + 1;
      *(_QWORD *)(v7 + 8 * (v8 + v5 * v3.i32[0])) = a3;
      v9 = *((_DWORD *)result + 7) + 1;
      v10 = *((_DWORD *)result + 9);
      *((_DWORD *)result + 7) = v9;
      if (v9 == v10)
      {
        v11 = *((_DWORD *)result + 6);
        do
        {
          if (v11 < 1)
            break;
          *((_DWORD *)result + 6) = --v11;
          v12 = *(_DWORD *)(v6 + 4 * v11);
          *((_DWORD *)result + 7) = v9 - v12;
          *((_DWORD *)result + 8) = v12;
        }
        while (!v12);
      }
    }
  }
  return result;
}

int8x16_t *faiss::HCounterState<faiss::HammingComputer16>::update_counter(int8x16_t *result, int8x16_t *a2, uint64_t a3)
{
  int32x2_t v3;
  unsigned __int32 v4;
  signed __int32 v5;
  __int32 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  __int32 v11;
  int v12;
  __int32 v13;
  __int32 v14;
  uint64_t v15;

  v3 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[1], *a2))))));
  v4 = vadd_s32(vdup_lane_s32(v3, 1), v3).u32[0];
  v5 = result[2].i32[0];
  if ((int)v4 <= v5)
  {
    v6 = result[2].i32[3];
    if ((int)v4 >= v5)
    {
      v14 = result[2].i32[2];
      if (v14 < v6)
      {
        result[2].i32[2] = v14 + 1;
        v15 = result->i64[0];
        *(_QWORD *)(result->i64[1] + 8 * (int)(v14 + v6 * v4)) = a3;
        *(_DWORD *)(v15 + 4 * v4) = v14 + 1;
      }
    }
    else
    {
      v7 = result->i64[0];
      v8 = result->i64[1];
      v9 = *(_DWORD *)(result->i64[0] + 4 * v4);
      *(_DWORD *)(result->i64[0] + 4 * v4) = v9 + 1;
      *(_QWORD *)(v8 + 8 * (int)(v9 + v6 * v4)) = a3;
      v10 = result[2].i32[1] + 1;
      v11 = result[2].i32[3];
      result[2].i32[1] = v10;
      if (v10 == v11)
      {
        v12 = result[2].i32[0];
        do
        {
          if (v12 < 1)
            break;
          result[2].i32[0] = --v12;
          v13 = *(_DWORD *)(v7 + 4 * v12);
          result[2].i32[1] = v10 - v13;
          result[2].i32[2] = v13;
        }
        while (!v13);
      }
    }
  }
  return result;
}

int8x16_t *faiss::HCounterState<faiss::HammingComputer32>::update_counter(int8x16_t *result, int8x16_t *a2, uint64_t a3)
{
  unsigned int v3;
  signed int v4;
  __int32 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  __int32 v10;
  int v11;
  __int32 v12;
  __int32 v13;
  uint64_t v14;

  v3 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[1], *a2))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[2], a2[1])))))));
  v4 = result[3].i32[0];
  if ((int)v3 <= v4)
  {
    v5 = result[3].i32[3];
    if ((int)v3 >= v4)
    {
      v13 = result[3].i32[2];
      if (v13 < v5)
      {
        result[3].i32[2] = v13 + 1;
        v14 = result->i64[0];
        *(_QWORD *)(result->i64[1] + 8 * (int)(v13 + v5 * v3)) = a3;
        *(_DWORD *)(v14 + 4 * v3) = v13 + 1;
      }
    }
    else
    {
      v6 = result->i64[0];
      v7 = result->i64[1];
      v8 = *(_DWORD *)(result->i64[0] + 4 * v3);
      *(_DWORD *)(result->i64[0] + 4 * v3) = v8 + 1;
      *(_QWORD *)(v7 + 8 * (int)(v8 + v5 * v3)) = a3;
      v9 = result[3].i32[1] + 1;
      v10 = result[3].i32[3];
      result[3].i32[1] = v9;
      if (v9 == v10)
      {
        v11 = result[3].i32[0];
        do
        {
          if (v11 < 1)
            break;
          result[3].i32[0] = --v11;
          v12 = *(_DWORD *)(v6 + 4 * v11);
          result[3].i32[1] = v9 - v12;
          result[3].i32[2] = v12;
        }
        while (!v12);
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer32>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t faiss::HCounterState<faiss::HammingComputerDefault>::update_counter(uint64_t *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;

  result = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)(a1 + 2), a2);
  v6 = *((_DWORD *)a1 + 8);
  if ((int)result <= v6)
  {
    v7 = *((_DWORD *)a1 + 11);
    if ((int)result >= v6)
    {
      v14 = *((_DWORD *)a1 + 10);
      if (v14 < v7)
      {
        *((_DWORD *)a1 + 10) = v14 + 1;
        v15 = *a1;
        *(_QWORD *)(a1[1] + 8 * (v14 + v7 * (int)result)) = a3;
        *(_DWORD *)(v15 + 4 * (int)result) = v14 + 1;
      }
    }
    else
    {
      v8 = *a1;
      v9 = a1[1];
      v10 = *(_DWORD *)(*a1 + 4 * (int)result);
      *(_DWORD *)(*a1 + 4 * (int)result) = v10 + 1;
      *(_QWORD *)(v9 + 8 * (v10 + v7 * (int)result)) = a3;
      v11 = *((_DWORD *)a1 + 9) + 1;
      LODWORD(v9) = *((_DWORD *)a1 + 11);
      *((_DWORD *)a1 + 9) = v11;
      if (v11 == (_DWORD)v9)
      {
        v12 = *((_DWORD *)a1 + 8);
        do
        {
          if (v12 < 1)
            break;
          *((_DWORD *)a1 + 8) = --v12;
          v13 = *(_DWORD *)(v8 + 4 * v12);
          *((_DWORD *)a1 + 9) = v11 - v13;
          *((_DWORD *)a1 + 10) = v13;
        }
        while (!v13);
      }
    }
  }
  return result;
}

void faiss::generalized_hammings_knn_hc()
{
  __assert_rtn("GenHammingComputerM8", "hamming-inl.h", 445, "code_size % 8 == 0");
}

float faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(float *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  unint64_t v9;
  int v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  std::string *v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  std::string *v33;
  size_t size;
  void *exception;
  unint64_t v36;
  std::string v37;

  if (!a4)
    return 0.0;
  if (a5 >= a3)
  {
    if (a6)
      *a6 = a5;
    return -3.4028e38;
  }
  if (a3 <= 2)
  {
    memset(&v37, 0, sizeof(v37));
    v32 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v37, v32 + 1, 0);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v37;
    else
      v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    snprintf((char *)v33, size, "Error: '%s' failed", "n >= 3");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v37, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMin<float, long long>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  v9 = a4;
  v12 = 0;
  v13 = *a1;
  v14 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = &a1[a3];
  v16 = *(v15 - 1);
  if (*a1 <= v14)
    v17 = *a1;
  else
    v17 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  if (*a1 <= v14)
    v13 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  if (v17 >= v16)
    v18 = v17;
  else
    v18 = *(v15 - 1);
  v19 = 3.4028e38;
  v20 = -3.4028e38;
  if (v13 >= v16)
    v21 = v18;
  else
    v21 = v13;
  while (2)
  {
    v22 = 0;
    v36 = 0;
    v37.__r_.__value_.__r.__words[0] = 0;
    do
    {
      v23 = a1[v22];
      if (v23 <= v21)
      {
        if (v23 != v21)
          goto LABEL_21;
        v24 = &v37;
      }
      else
      {
        v24 = (std::string *)&v36;
      }
      ++v24->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v22;
    }
    while (a3 != v22);
    v25 = v36;
    if (v36 <= v9)
    {
      v19 = v21;
      if (v37.__r_.__value_.__r.__words[0] + v36 < v9)
        goto LABEL_26;
      v27 = v9;
    }
    else
    {
      v20 = v21;
      if (v36 <= a5)
      {
        v27 = v36;
        break;
      }
LABEL_26:
      v26 = faiss::partitioning::sample_threshold_median3<faiss::CMin<float,long long>>((uint64_t)a1, a3, v19, v20);
      if (v26 != v19)
      {
        v21 = v26;
        if (++v12 == 200)
        {
          v27 = 0;
          break;
        }
        continue;
      }
      v27 = 0;
    }
    break;
  }
  if ((uint64_t)(v27 - v25) < 0)
  {
    v21 = nextafterf(v21, INFINITY);
    v27 = v9;
  }
  else
  {
    v9 = v27 - v25;
    if (v27 - v25 > v37.__r_.__value_.__r.__words[0])
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>((uint64_t)a1, a2, a3);
  }
  v28 = faiss::partitioning::compress_array<faiss::CMin<float,long long>>(a1, a2, a3, v9, v21);
  if (v27 != (int)v28)
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(v28, v29, v30);
  if (a6)
    *a6 = v27;
  return v21;
}

void sub_1D48E9ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float faiss::partitioning::partition_fuzzy_median3<faiss::CMax<float,long long>>(float *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  unint64_t v9;
  int v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  std::string *v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  std::string *v33;
  size_t size;
  void *exception;
  unint64_t v36;
  std::string v37;

  if (!a4)
    return 0.0;
  if (a5 >= a3)
  {
    if (a6)
      *a6 = a5;
    return 3.4028e38;
  }
  if (a3 <= 2)
  {
    memset(&v37, 0, sizeof(v37));
    v32 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v37, v32 + 1, 0);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v37;
    else
      v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    snprintf((char *)v33, size, "Error: '%s' failed", "n >= 3");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v37, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMax<float, long long>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  v9 = a4;
  v12 = 0;
  v13 = *a1;
  v14 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = &a1[a3];
  v16 = *(v15 - 1);
  if (*a1 <= v14)
    v17 = *a1;
  else
    v17 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  if (*a1 <= v14)
    v13 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  if (v17 >= v16)
    v18 = v17;
  else
    v18 = *(v15 - 1);
  v19 = -3.4028e38;
  v20 = 3.4028e38;
  if (v13 >= v16)
    v21 = v18;
  else
    v21 = v13;
  while (2)
  {
    v22 = 0;
    v36 = 0;
    v37.__r_.__value_.__r.__words[0] = 0;
    do
    {
      v23 = a1[v22];
      if (v23 >= v21)
      {
        if (v23 != v21)
          goto LABEL_21;
        v24 = &v37;
      }
      else
      {
        v24 = (std::string *)&v36;
      }
      ++v24->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v22;
    }
    while (a3 != v22);
    v25 = v36;
    if (v36 <= v9)
    {
      v19 = v21;
      if (v37.__r_.__value_.__r.__words[0] + v36 < v9)
        goto LABEL_26;
      v27 = v9;
    }
    else
    {
      v20 = v21;
      if (v36 <= a5)
      {
        v27 = v36;
        break;
      }
LABEL_26:
      v26 = faiss::partitioning::sample_threshold_median3<faiss::CMax<float,long long>>((uint64_t)a1, a3, v19, v20);
      if (v26 != v19)
      {
        v21 = v26;
        if (++v12 == 200)
        {
          v27 = 0;
          break;
        }
        continue;
      }
      v27 = 0;
    }
    break;
  }
  if ((uint64_t)(v27 - v25) < 0)
  {
    v21 = nextafterf(v21, -INFINITY);
    v27 = v9;
  }
  else
  {
    v9 = v27 - v25;
    if (v27 - v25 > v37.__r_.__value_.__r.__words[0])
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>((uint64_t)a1, a2, a3);
  }
  v28 = faiss::partitioning::compress_array<faiss::CMax<float,long long>>(a1, a2, a3, v9, v21);
  if (v27 != (int)v28)
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(v28, v29, v30);
  if (a6)
    *a6 = v27;
  return v21;
}

void sub_1D48E9DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::partitioning::partition_fuzzy_median3<faiss::CMin<unsigned short,long long>>(unsigned __int16 *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned int v19;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  std::string *v28;
  size_t size;
  void *exception;
  unint64_t v33;
  std::string v34;

  if (!a4)
  {
    if (a6)
    {
      v16 = 0;
      *a6 = 0xFFFFLL;
      return v16;
    }
    return 0;
  }
  if (a5 >= a3)
  {
    if (a6)
    {
      v16 = 0;
      *a6 = a5;
      return v16;
    }
    return 0;
  }
  if (a3 <= 2)
  {
    memset(&v34, 0, sizeof(v34));
    v27 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v34, v27 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v34;
    else
      v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    snprintf((char *)v28, size, "Error: '%s' failed", "n >= 3");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMin<unsigned short, long long>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  v8 = a4;
  v9 = a1;
  v10 = 0;
  v11 = 0;
  v12 = *a1;
  v13 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  if (v12 >= v13)
    v14 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  else
    v14 = *a1;
  if (v12 <= v13)
    v12 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  v15 = a1[a3 - 1];
  if (v14 <= v15)
    LOWORD(v14) = a1[a3 - 1];
  if (v12 >= v15)
    v16 = v14;
  else
    v16 = v12;
  v17 = -1;
  while (2)
  {
    v18 = 0;
    v33 = 0;
    v34.__r_.__value_.__r.__words[0] = 0;
    do
    {
      v19 = v9[v18];
      if (v19 <= v16)
      {
        if (v19 != v16)
          goto LABEL_21;
        v20 = &v34;
      }
      else
      {
        v20 = (std::string *)&v33;
      }
      ++v20->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v18;
    }
    while (a3 != v18);
    v21 = v33;
    if (v33 <= v8)
    {
      v17 = v16;
      if (v34.__r_.__value_.__r.__words[0] + v33 < v8)
        goto LABEL_26;
      v22 = v8;
    }
    else
    {
      v11 = v16;
      if (v33 <= a5)
      {
        v22 = v33;
        break;
      }
LABEL_26:
      a1 = (unsigned __int16 *)faiss::partitioning::sample_threshold_median3<faiss::CMin<unsigned short,long long>>((uint64_t)v9, a3, v17, v11);
      if ((_DWORD)a1 != v17)
      {
        v16 = (unsigned __int16)a1;
        if (++v10 == 200)
        {
          v22 = 0;
          break;
        }
        continue;
      }
      v22 = 0;
    }
    break;
  }
  if ((uint64_t)(v22 - v21) < 0)
  {
    ++v16;
    v22 = v8;
  }
  else
  {
    v8 = v22 - v21;
    if (v22 - v21 > v34.__r_.__value_.__r.__words[0])
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>((uint64_t)a1, a2, a3);
  }
  v23 = faiss::partitioning::compress_array<faiss::CMin<unsigned short,long long>>(v9, a2, a3, v16, v8);
  if (v22 != (int)v23)
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(v23, v24, v25);
  if (a6)
    *a6 = v22;
  return v16;
}

void sub_1D48EA070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::partitioning::partition_fuzzy_median3<faiss::CMax<unsigned short,long long>>(unsigned __int16 *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned int v19;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  std::string *v28;
  size_t size;
  void *exception;
  unint64_t v33;
  std::string v34;

  if (!a4)
  {
    v16 = 0;
    if (a6)
      *a6 = 0;
    return v16;
  }
  if (a5 >= a3)
  {
    if (a6)
      *a6 = a5;
    return (unsigned __int16)-1;
  }
  if (a3 <= 2)
  {
    memset(&v34, 0, sizeof(v34));
    v27 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v34, v27 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v34;
    else
      v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    snprintf((char *)v28, size, "Error: '%s' failed", "n >= 3");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMax<unsigned short, long long>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  v8 = a4;
  v9 = a1;
  v10 = 0;
  v11 = 0;
  v12 = *a1;
  v13 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  if (v12 >= v13)
    v14 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  else
    v14 = *a1;
  if (v12 <= v13)
    v12 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  v15 = a1[a3 - 1];
  if (v14 <= v15)
    LOWORD(v14) = a1[a3 - 1];
  if (v12 >= v15)
    v16 = v14;
  else
    v16 = v12;
  v17 = -1;
  while (2)
  {
    v18 = 0;
    v33 = 0;
    v34.__r_.__value_.__r.__words[0] = 0;
    do
    {
      v19 = v9[v18];
      if (v19 >= v16)
      {
        if (v19 != v16)
          goto LABEL_21;
        v20 = &v34;
      }
      else
      {
        v20 = (std::string *)&v33;
      }
      ++v20->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v18;
    }
    while (a3 != v18);
    v21 = v33;
    if (v33 <= v8)
    {
      v11 = v16;
      if (v34.__r_.__value_.__r.__words[0] + v33 < v8)
        goto LABEL_26;
      v22 = v8;
    }
    else
    {
      v17 = v16;
      if (v33 <= a5)
      {
        v22 = v33;
        break;
      }
LABEL_26:
      a1 = (unsigned __int16 *)faiss::partitioning::sample_threshold_median3<faiss::CMax<unsigned short,long long>>((uint64_t)v9, a3, v11, v17);
      if ((_DWORD)a1 != v11)
      {
        v16 = (unsigned __int16)a1;
        if (++v10 == 200)
        {
          v22 = 0;
          break;
        }
        continue;
      }
      v22 = 0;
    }
    break;
  }
  if ((uint64_t)(v22 - v21) < 0)
  {
    --v16;
    v22 = v8;
  }
  else
  {
    v8 = v22 - v21;
    if (v22 - v21 > v34.__r_.__value_.__r.__words[0])
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>((uint64_t)a1, a2, a3);
  }
  v23 = faiss::partitioning::compress_array<faiss::CMax<unsigned short,long long>>(v9, a2, a3, v16, v8);
  if (v22 != (int)v23)
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(v23, v24, v25);
  if (a6)
    *a6 = v22;
  return v16;
}

void sub_1D48EA32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::partitioning::partition_fuzzy_median3<faiss::CMin<unsigned short,int>>(unsigned __int16 *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned int v19;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  std::string *v28;
  size_t size;
  void *exception;
  unint64_t v33;
  std::string v34;

  if (!a4)
  {
    if (a6)
    {
      v16 = 0;
      *a6 = 0xFFFFLL;
      return v16;
    }
    return 0;
  }
  if (a5 >= a3)
  {
    if (a6)
    {
      v16 = 0;
      *a6 = a5;
      return v16;
    }
    return 0;
  }
  if (a3 <= 2)
  {
    memset(&v34, 0, sizeof(v34));
    v27 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v34, v27 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v34;
    else
      v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    snprintf((char *)v28, size, "Error: '%s' failed", "n >= 3");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMin<unsigned short, int>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  v8 = a4;
  v9 = a1;
  v10 = 0;
  v11 = 0;
  v12 = *a1;
  v13 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  if (v12 >= v13)
    v14 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  else
    v14 = *a1;
  if (v12 <= v13)
    v12 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  v15 = a1[a3 - 1];
  if (v14 <= v15)
    LOWORD(v14) = a1[a3 - 1];
  if (v12 >= v15)
    v16 = v14;
  else
    v16 = v12;
  v17 = -1;
  while (2)
  {
    v18 = 0;
    v33 = 0;
    v34.__r_.__value_.__r.__words[0] = 0;
    do
    {
      v19 = v9[v18];
      if (v19 <= v16)
      {
        if (v19 != v16)
          goto LABEL_21;
        v20 = &v34;
      }
      else
      {
        v20 = (std::string *)&v33;
      }
      ++v20->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v18;
    }
    while (a3 != v18);
    v21 = v33;
    if (v33 <= v8)
    {
      v17 = v16;
      if (v34.__r_.__value_.__r.__words[0] + v33 < v8)
        goto LABEL_26;
      v22 = v8;
    }
    else
    {
      v11 = v16;
      if (v33 <= a5)
      {
        v22 = v33;
        break;
      }
LABEL_26:
      a1 = (unsigned __int16 *)faiss::partitioning::sample_threshold_median3<faiss::CMin<unsigned short,long long>>((uint64_t)v9, a3, v17, v11);
      if ((_DWORD)a1 != v17)
      {
        v16 = (unsigned __int16)a1;
        if (++v10 == 200)
        {
          v22 = 0;
          break;
        }
        continue;
      }
      v22 = 0;
    }
    break;
  }
  if ((uint64_t)(v22 - v21) < 0)
  {
    ++v16;
    v22 = v8;
  }
  else
  {
    v8 = v22 - v21;
    if (v22 - v21 > v34.__r_.__value_.__r.__words[0])
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>((uint64_t)a1, a2, a3);
  }
  v23 = faiss::partitioning::compress_array<faiss::CMin<unsigned short,int>>(v9, a2, a3, v16, v8);
  if (v22 != (int)v23)
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(v23, v24, v25);
  if (a6)
    *a6 = v22;
  return v16;
}

void sub_1D48EA5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::partitioning::partition_fuzzy_median3<faiss::CMax<unsigned short,int>>(unsigned __int16 *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned int v19;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  std::string *v28;
  size_t size;
  void *exception;
  unint64_t v33;
  std::string v34;

  if (!a4)
  {
    v16 = 0;
    if (a6)
      *a6 = 0;
    return v16;
  }
  if (a5 >= a3)
  {
    if (a6)
      *a6 = a5;
    return (unsigned __int16)-1;
  }
  if (a3 <= 2)
  {
    memset(&v34, 0, sizeof(v34));
    v27 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v34, v27 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v34;
    else
      v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    snprintf((char *)v28, size, "Error: '%s' failed", "n >= 3");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMax<unsigned short, int>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  v8 = a4;
  v9 = a1;
  v10 = 0;
  v11 = 0;
  v12 = *a1;
  v13 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  if (v12 >= v13)
    v14 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  else
    v14 = *a1;
  if (v12 <= v13)
    v12 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  v15 = a1[a3 - 1];
  if (v14 <= v15)
    LOWORD(v14) = a1[a3 - 1];
  if (v12 >= v15)
    v16 = v14;
  else
    v16 = v12;
  v17 = -1;
  while (2)
  {
    v18 = 0;
    v33 = 0;
    v34.__r_.__value_.__r.__words[0] = 0;
    do
    {
      v19 = v9[v18];
      if (v19 >= v16)
      {
        if (v19 != v16)
          goto LABEL_21;
        v20 = &v34;
      }
      else
      {
        v20 = (std::string *)&v33;
      }
      ++v20->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v18;
    }
    while (a3 != v18);
    v21 = v33;
    if (v33 <= v8)
    {
      v11 = v16;
      if (v34.__r_.__value_.__r.__words[0] + v33 < v8)
        goto LABEL_26;
      v22 = v8;
    }
    else
    {
      v17 = v16;
      if (v33 <= a5)
      {
        v22 = v33;
        break;
      }
LABEL_26:
      a1 = (unsigned __int16 *)faiss::partitioning::sample_threshold_median3<faiss::CMax<unsigned short,long long>>((uint64_t)v9, a3, v11, v17);
      if ((_DWORD)a1 != v11)
      {
        v16 = (unsigned __int16)a1;
        if (++v10 == 200)
        {
          v22 = 0;
          break;
        }
        continue;
      }
      v22 = 0;
    }
    break;
  }
  if ((uint64_t)(v22 - v21) < 0)
  {
    --v16;
    v22 = v8;
  }
  else
  {
    v8 = v22 - v21;
    if (v22 - v21 > v34.__r_.__value_.__r.__words[0])
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>((uint64_t)a1, a2, a3);
  }
  v23 = faiss::partitioning::compress_array<faiss::CMax<unsigned short,int>>(v9, a2, a3, v16, v8);
  if (v22 != (int)v23)
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(v23, v24, v25);
  if (a6)
    *a6 = v22;
  return v16;
}

void sub_1D48EA8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint16x8_t *faiss::simd_partitioning::find_minimax(uint16x8_t *this, unint64_t a2, _WORD *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint16x8_t *v5;
  uint16x8_t v6;
  uint16x8_t v7;
  unint64_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint16x8_t *v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  uint16x8_t vars0;

  if (a2 < 0x10)
  {
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v6.i16[0] = 0;
  }
  else
  {
    v5 = this + 1;
    v6 = 0uLL;
    v7.i64[0] = -1;
    v7.i64[1] = -1;
    v8 = 15;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v10 = 0uLL;
    do
    {
      v11 = v5[-1];
      v9 = vminq_u16(v11, v9);
      v7 = vminq_u16(*v5, v7);
      v6 = vmaxq_u16(v11, v6);
      v10 = vmaxq_u16(*v5, v10);
      v5 += 2;
      v8 += 16;
    }
    while (v8 < a2);
  }
  v12 = 0;
  vars0 = v9;
  *a3 = v9.i16[0];
  *a4 = v6.i16[0];
  do
  {
    v13 = vars0.u16[v12 + 1];
    if (v13 >= (unsigned __int16)*a3)
      LOWORD(v13) = *a3;
    *a3 = v13;
    v14 = *(unsigned __int16 *)((char *)&vars0 + v12 * 2 + 34);
    if (*a4 > v14)
      LOWORD(v14) = *a4;
    *a4 = v14;
    ++v12;
  }
  while (v12 != 15);
  v15 = (char *)(a2 - (a2 & 0xFFFFFFFFFFFFFFF0));
  if (a2 > (a2 & 0xFFFFFFFFFFFFFFF0))
  {
    v16 = &this[2 * (a2 >> 4)];
    do
    {
      v17 = v16->u16[0];
      if (v17 >= (unsigned __int16)*a3)
        LOWORD(v17) = *a3;
      *a3 = v17;
      v18 = *a4;
      v20 = v16->u16[0];
      v16 = (uint16x8_t *)((char *)v16 + 2);
      v19 = v20;
      if (v18 <= v20)
        LOWORD(v18) = v19;
      *a4 = v18;
      --v15;
    }
    while (v15);
  }
  return this;
}

unsigned __int16 *faiss::simd_histogram_16(unsigned __int16 *this, const unsigned __int16 *a2, int a3, int a4, _OWORD *a5, int *a6)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  __int16 v9;
  unsigned __int16 v10;
  unsigned int v11;

  a5[2] = 0u;
  a5[3] = 0u;
  *a5 = 0u;
  a5[1] = 0u;
  v6 = (int)a2;
  if (a4 < 0)
  {
    if ((_DWORD)a2)
    {
      do
      {
        v11 = *this++;
        ++*((_DWORD *)a5 + v11);
        --v6;
      }
      while (v6);
    }
  }
  else if ((_DWORD)a2)
  {
    v7 = (16 << a4) + a3;
    if (v7 >= 0x10000)
      LOWORD(v7) = 0;
    v8 = (unsigned __int16)(v7 + ~(_WORD)a3);
    do
    {
      v9 = *this++;
      v10 = v9 - a3;
      if (v8 >= (unsigned __int16)(v9 - a3))
        ++*((_DWORD *)a5 + (v10 >> a4));
      --v6;
    }
    while (v6);
  }
  return this;
}

unsigned __int16 *faiss::simd_histogram_8(unsigned __int16 *this, const unsigned __int16 *a2, unsigned int a3, int a4, _OWORD *a5, int *a6)
{
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;

  *a5 = 0u;
  a5[1] = 0u;
  v6 = (int)a2;
  if (a4 < 0)
  {
    if ((_DWORD)a2)
    {
      do
      {
        v10 = *this++;
        ++*((_DWORD *)a5 + v10);
        --v6;
      }
      while (v6);
    }
  }
  else if ((_DWORD)a2)
  {
    do
    {
      v7 = *this++;
      v8 = v7 - a3;
      if (v7 >= a3)
      {
        v9 = v8 >> a4;
        if (v9 <= 7)
          ++*((_DWORD *)a5 + v9);
      }
      --v6;
    }
    while (v6);
  }
  return this;
}

_QWORD *faiss::PartitionStats::reset(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t *faiss::PartitionStats::get_partition_stats(faiss::PartitionStats *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    faiss::PartitionStats::get_partition_stats(void)::_stats = 0;
    unk_1EFEC2C50 = 0;
  }
  return &faiss::PartitionStats::get_partition_stats(void)::_stats;
}

float faiss::partitioning::sample_threshold_median3<faiss::CMin<float,long long>>(uint64_t a1, int a2, float result, float a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  float v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a2;
    while (1)
    {
      v7 = *(float *)(a1 + 4 * (v4 % a2));
      if (v7 < result && v7 > a4)
      {
        *(&v11 + v5++) = v7;
        if (v5 == 3)
          break;
      }
      v4 += 6700417;
      if (!--v6)
      {
        if (v5)
          return v11;
        return result;
      }
    }
    result = v11;
    if (v11 <= v12)
      v9 = v11;
    else
      v9 = v12;
    if (v11 <= v12)
      result = v12;
    if (v9 >= v13)
      v10 = v9;
    else
      v10 = v13;
    if (result >= v13)
      return v10;
  }
  return result;
}

uint64_t faiss::partitioning::compress_array<faiss::CMin<float,long long>>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t result;
  float *v7;
  _QWORD *v8;
  float v9;

  if (!a3)
  {
    result = 0;
    if (!a4)
      return result;
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>(result, a2, 0);
  }
  result = 0;
  v7 = a1;
  v8 = (_QWORD *)a2;
  do
  {
    v9 = *v7;
    if (*v7 <= a5)
    {
      if (a4)
      {
        if (v9 == a5)
        {
          a1[result] = v9;
          *(_QWORD *)(a2 + 8 * result++) = *v8;
          --a4;
        }
      }
    }
    else
    {
      a1[result] = v9;
      *(_QWORD *)(a2 + 8 * result++) = *v8;
    }
    ++v8;
    ++v7;
    --a3;
  }
  while (a3);
  if (a4)
    goto LABEL_12;
  return result;
}

float faiss::partitioning::sample_threshold_median3<faiss::CMax<float,long long>>(uint64_t a1, int a2, float result, float a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  float v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a2;
    while (1)
    {
      v7 = *(float *)(a1 + 4 * (v4 % a2));
      if (v7 > result && v7 < a4)
      {
        *(&v11 + v5++) = v7;
        if (v5 == 3)
          break;
      }
      v4 += 6700417;
      if (!--v6)
      {
        if (v5)
          return v11;
        return result;
      }
    }
    result = v11;
    if (v11 <= v12)
      v9 = v11;
    else
      v9 = v12;
    if (v11 <= v12)
      result = v12;
    if (v9 >= v13)
      v10 = v9;
    else
      v10 = v13;
    if (result >= v13)
      return v10;
  }
  return result;
}

uint64_t faiss::partitioning::compress_array<faiss::CMax<float,long long>>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t result;
  float *v7;
  _QWORD *v8;
  float v9;

  if (!a3)
  {
    result = 0;
    if (!a4)
      return result;
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>(result, a2, 0);
  }
  result = 0;
  v7 = a1;
  v8 = (_QWORD *)a2;
  do
  {
    v9 = *v7;
    if (*v7 >= a5)
    {
      if (a4)
      {
        if (v9 == a5)
        {
          a1[result] = v9;
          *(_QWORD *)(a2 + 8 * result++) = *v8;
          --a4;
        }
      }
    }
    else
    {
      a1[result] = v9;
      *(_QWORD *)(a2 + 8 * result++) = *v8;
    }
    ++v8;
    ++v7;
    --a3;
  }
  while (a3);
  if (a4)
    goto LABEL_12;
  return result;
}

uint64_t faiss::partitioning::sample_threshold_median3<faiss::CMin<unsigned short,long long>>(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;

  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a2;
    while (1)
    {
      v7 = *(unsigned __int16 *)(a1 + 2 * (v4 % a2));
      if (v7 < a3 && v7 > a4)
      {
        *(&v13 + v5++) = v7;
        if (v5 == 3)
          break;
      }
      v4 += 6700417;
      if (!--v6)
      {
        if (v5)
          return v13;
        return a3;
      }
    }
    v9 = v13;
    if (v13 >= v14)
      v10 = v14;
    else
      v10 = v13;
    if (v13 <= v14)
      v9 = v14;
    if (v10 <= v15)
      v11 = v15;
    else
      v11 = v10;
    if (v9 >= v15)
      return v11;
    else
      return v9;
  }
  return a3;
}

uint64_t faiss::partitioning::compress_array<faiss::CMin<unsigned short,long long>>(unsigned __int16 *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t result;
  unsigned __int16 *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;

  if (!a3)
  {
    result = 0;
    if (!a5)
      return result;
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>(result, a2, 0);
  }
  result = 0;
  v7 = a1;
  v8 = (_QWORD *)a2;
  do
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 <= a4)
    {
      if (a5)
      {
        if (v9 == a4)
        {
          a1[result] = a4;
          *(_QWORD *)(a2 + 8 * result++) = *v8;
          --a5;
        }
      }
    }
    else
    {
      a1[result] = v9;
      *(_QWORD *)(a2 + 8 * result++) = *v8;
    }
    ++v8;
    --a3;
  }
  while (a3);
  if (a5)
    goto LABEL_12;
  return result;
}

uint64_t faiss::partitioning::sample_threshold_median3<faiss::CMax<unsigned short,long long>>(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;

  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a2;
    while (1)
    {
      v7 = *(unsigned __int16 *)(a1 + 2 * (v4 % a2));
      if (v7 > a3 && v7 < a4)
      {
        *(&v13 + v5++) = v7;
        if (v5 == 3)
          break;
      }
      v4 += 6700417;
      if (!--v6)
      {
        if (v5)
          return v13;
        return a3;
      }
    }
    v9 = v13;
    if (v13 >= v14)
      v10 = v14;
    else
      v10 = v13;
    if (v13 <= v14)
      v9 = v14;
    if (v10 <= v15)
      v11 = v15;
    else
      v11 = v10;
    if (v9 >= v15)
      return v11;
    else
      return v9;
  }
  return a3;
}

uint64_t faiss::partitioning::compress_array<faiss::CMax<unsigned short,long long>>(unsigned __int16 *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t result;
  unsigned __int16 *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;

  if (!a3)
  {
    result = 0;
    if (!a5)
      return result;
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>(result, a2, 0);
  }
  result = 0;
  v7 = a1;
  v8 = (_QWORD *)a2;
  do
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 >= a4)
    {
      if (a5)
      {
        if (v9 == a4)
        {
          a1[result] = a4;
          *(_QWORD *)(a2 + 8 * result++) = *v8;
          --a5;
        }
      }
    }
    else
    {
      a1[result] = v9;
      *(_QWORD *)(a2 + 8 * result++) = *v8;
    }
    ++v8;
    --a3;
  }
  while (a3);
  if (a5)
    goto LABEL_12;
  return result;
}

uint64_t faiss::partitioning::compress_array<faiss::CMin<unsigned short,int>>(unsigned __int16 *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t result;
  unsigned __int16 *v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;

  if (!a3)
  {
    result = 0;
    if (!a5)
      return result;
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>(result, a2, 0);
  }
  result = 0;
  v7 = a1;
  v8 = (_DWORD *)a2;
  do
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 <= a4)
    {
      if (a5)
      {
        if (v9 == a4)
        {
          a1[result] = a4;
          *(_DWORD *)(a2 + 4 * result++) = *v8;
          --a5;
        }
      }
    }
    else
    {
      a1[result] = v9;
      *(_DWORD *)(a2 + 4 * result++) = *v8;
    }
    ++v8;
    --a3;
  }
  while (a3);
  if (a5)
    goto LABEL_12;
  return result;
}

uint64_t faiss::partitioning::compress_array<faiss::CMax<unsigned short,int>>(unsigned __int16 *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t result;
  unsigned __int16 *v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;

  if (!a3)
  {
    result = 0;
    if (!a5)
      return result;
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>(result, a2, 0);
  }
  result = 0;
  v7 = a1;
  v8 = (_DWORD *)a2;
  do
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 >= a4)
    {
      if (a5)
      {
        if (v9 == a4)
        {
          a1[result] = a4;
          *(_DWORD *)(a2 + 4 * result++) = *v8;
          --a5;
        }
      }
    }
    else
    {
      a1[result] = v9;
      *(_DWORD *)(a2 + 4 * result++) = *v8;
    }
    ++v8;
    --a3;
  }
  while (a3);
  if (a5)
    goto LABEL_12;
  return result;
}

void OUTLINED_FUNCTION_0_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 206, a4);
}

void OUTLINED_FUNCTION_1_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 211, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 113, a4);
}

void faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_0("partition_fuzzy_median3", "partitioning.cpp", a3, "wp == q");
}

{
  OUTLINED_FUNCTION_0_0("partition_fuzzy_median3", "partitioning.cpp", a3, "n_eq_1 <= n_eq");
}

void faiss::partitioning::compress_array<faiss::CMin<float,long long>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2("compress_array", "partitioning.cpp", a3, "n_eq == 0");
}

faiss::WorkerThread *faiss::WorkerThread::WorkerThread(faiss::WorkerThread *this)
{
  std::__assoc_sub_state *v2;
  uint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__assoc_sub_state *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 850045863;
  *(_QWORD *)this = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 9) = 1018212795;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  faiss::WorkerThread::startThread(this);
  v9[0] = &off_1E9806FA8;
  v10 = v9;
  faiss::WorkerThread::add((uint64_t)this, (uint64_t)v9, (uint64_t *)&v8);
  std::future<BOOL>::get(&v8);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = &v8->__shared_owners_;
    do
      v4 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v4 - 1, (unint64_t *)p_shared_owners));
    if (!v4)
      ((void (*)(std::__assoc_sub_state *))v2->__on_zero_shared)(v2);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_10;
  }
  if (v10)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return this;
}

void sub_1D48EB314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::thread *v13;
  std::mutex *v14;
  std::condition_variable *v15;
  _QWORD *v16;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;

  if (a9)
  {
    v18 = a9 + 1;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
      (*(void (**)(unint64_t *))(*a9 + 16))(a9);
  }
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::~deque[abi:ne180100](v16);
  std::condition_variable::~condition_variable(v15);
  std::mutex::~mutex(v14);
  std::thread::~thread(v13);
  _Unwind_Resume(a1);
}

void faiss::WorkerThread::startThread(faiss::WorkerThread *this)
{
  std::__thread_struct *v2;
  uint64_t *v3;
  int v4;
  std::thread v5;
  uint64_t *v6;

  v2 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v2);
  v3 = (uint64_t *)operator new();
  *v3 = (uint64_t)v2;
  v3[1] = (uint64_t)this;
  v6 = v3;
  v4 = pthread_create(&v5.__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>, v3);
  if (v4)
  {
    std::__throw_system_error(v4, "thread constructor failed");
    __break(1u);
LABEL_5:
    std::terminate();
  }
  v6 = 0;
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>::~unique_ptr[abi:ne180100](&v6);
  if (*(_QWORD *)this)
    goto LABEL_5;
  *(std::thread *)this = v5;
  v5.__t_ = 0;
  std::thread::~thread(&v5);
}

void faiss::WorkerThread::add(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[3];
  uint64_t *v14;
  uint64_t v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (!*(_BYTE *)(a1 + 120))
  {
    v9 = operator new();
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 850045863;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = 1018212795;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_OWORD *)(v9 + 124) = 0u;
    *(_QWORD *)v9 = &off_1E9807058;
    v12 = v9;
    *a3 = v9;
    std::__assoc_sub_state::__attach_future[abi:ne180100](v9);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
    v15[0] = v12;
    v12 = 0;
    std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::emplace_back<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>((_QWORD *)(a1 + 128), (uint64_t)v13);
    std::promise<BOOL>::~promise(v15);
    v10 = v14;
    if (v14 == v13)
    {
      v11 = 4;
      v10 = v13;
    }
    else
    {
      if (!v14)
      {
LABEL_9:
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 72));
        v8 = &v12;
        goto LABEL_10;
      }
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_9;
  }
  v7 = operator new();
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 850045863;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 1018212795;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 124) = 0u;
  *(_QWORD *)v7 = &off_1E9807058;
  v13[0] = v7;
  *a3 = v7;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v7);
  LOBYTE(v12) = 0;
  if (!v13[0])
    std::__throw_future_error[abi:ne180100](3u);
  std::__assoc_state<BOOL>::set_value<BOOL>(v13[0], &v12);
  v8 = v13;
LABEL_10:
  std::promise<BOOL>::~promise(v8);
  std::mutex::unlock(v6);
}

void sub_1D48EB6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  std::pair<std::function<void ()(void)>,std::promise<BOOL>>::~pair((uint64_t *)va1);
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  std::promise<BOOL>::~promise((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t std::future<BOOL>::get(std::__assoc_sub_state **a1)
{
  std::__assoc_sub_state *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *a1;
  *a1 = 0;
  std::__assoc_state<BOOL>::move(v1);
  v3 = v2;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
      ((void (*)(std::__assoc_sub_state *))v1->__on_zero_shared)(v1);
  }
  return v3;
}

void sub_1D48EB790(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    std::future<BOOL>::get(v1);
  _Unwind_Resume(exception_object);
}

void faiss::WorkerThread::~WorkerThread(faiss::WorkerThread *this)
{
  faiss::WorkerThread::stop(this);
  faiss::WorkerThread::waitForThreadExit((std::thread *)this);
  std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::~deque[abi:ne180100]((_QWORD *)this + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  std::thread::~thread((std::thread *)this);
}

void faiss::WorkerThread::stop(faiss::WorkerThread *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 120) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 72));
  std::mutex::unlock(v2);
}

void faiss::WorkerThread::waitForThreadExit(std::thread *this)
{
  std::thread::join(this);
}

void sub_1D48EB844(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::promise<BOOL>::set_value(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;

  v2 = *a1;
  if (!v2)
    std::__throw_future_error[abi:ne180100](3u);
  std::__assoc_state<BOOL>::set_value<BOOL>(v2, a2);
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::emplace_back<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  *(_QWORD *)(std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v8, a2) + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v9 = a1[4];
  v10 = a1[5] + 1;
  a1[5] = v10;
  v11 = v9 + v10;
  v12 = a1[1];
  v13 = (_QWORD *)(v12 + 8 * (v11 / 0x66));
  v14 = *v13 + 40 * (v11 % 0x66);
  if (a1[2] == v12)
    v14 = 0;
  if (v14 == *v13)
    v14 = *(v13 - 1) + 4080;
  return v14 - 40;
}

_QWORD *std::pair<std::function<void ()(void)>,std::promise<BOOL>>::~pair(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  std::promise<BOOL>::~promise(a1 + 4);
  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void faiss::WorkerThread::threadMain(faiss::WorkerThread *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  faiss::WorkerThread::threadLoop(this);
  if (!*((_BYTE *)this + 120))
    faiss::WorkerThread::threadMain();
  v2 = *((_QWORD *)this + 17);
  if (*((_QWORD *)this + 18) != v2)
  {
    v3 = *((_QWORD *)this + 20);
    v4 = *((_QWORD *)this + 21);
    v5 = (_QWORD *)(v2 + 8 * (v3 / 0x66));
    v6 = *v5 + 40 * (v3 % 0x66);
    v7 = *(_QWORD *)(v2 + 8 * ((v4 + v3) / 0x66)) + 40 * ((v4 + v3) % 0x66);
    while (v6 != v7)
    {
      v6 += 40;
      if (v6 - *v5 == 4080)
      {
        v8 = v5[1];
        ++v5;
        v6 = v8;
      }
    }
  }
}

_QWORD *faiss::WorkerThread::threadLoop(faiss::WorkerThread *this)
{
  std::mutex *v2;
  std::condition_variable *v3;
  int64x2_t *v4;
  char v5;
  _QWORD *result;
  uint64_t v7;
  std::unique_lock<std::mutex> v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11[2];

  v2 = (std::mutex *)((char *)this + 8);
  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = (std::condition_variable *)((char *)this + 72);
  v4 = (int64x2_t *)((char *)this + 128);
  do
  {
    std::pair<std::function<void ()(void)>,std::promise<BOOL>>::pair[abi:ne180100]<true,0>((uint64_t)v9);
    v8.__m_ = v2;
    v8.__owns_ = 1;
    std::mutex::lock(v2);
    while (!*((_BYTE *)this + 120))
    {
      if (*((_QWORD *)this + 21))
      {
        std::pair<std::function<void ()(void)>,std::promise<BOOL>>::operator=[abi:ne180100](v9, *(_QWORD *)(*((_QWORD *)this + 17) + 8 * (*((_QWORD *)this + 20) / 0x66uLL))+ 40 * (*((_QWORD *)this + 20) % 0x66uLL));
        std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::pop_front(v4);
        if (v8.__owns_)
          std::mutex::unlock(v8.__m_);
        v5 = 1;
        goto LABEL_9;
      }
      std::condition_variable::wait(v3, &v8);
    }
    if (v8.__owns_)
      std::mutex::unlock(v8.__m_);
    v5 = 0;
LABEL_9:
    std::promise<BOOL>::~promise(v11);
    result = v10;
    if (v10 == v9)
    {
      result = v9;
      v7 = 4;
    }
    else
    {
      if (!v10)
        continue;
      v7 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  while ((v5 & 1) != 0);
  return result;
}

void sub_1D48EBC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10, int a11, uint64_t a12)
{
  std::pair<std::function<void ()(void)>,std::promise<BOOL>>::~pair(&a12);
  _Unwind_Resume(a1);
}

void faiss::`anonymous namespace'::runCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = 1;
  std::promise<BOOL>::set_value(a2, &v4);
}

void sub_1D48EBCA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::__assoc_sub_state **v9;

  __cxa_begin_catch(a1);
  std::current_exception();
  std::promise<BOOL>::set_exception(v9, &a9);
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  JUMPOUT(0x1D48EBC88);
}

void sub_1D48EBCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::function<void ()(void)>,std::promise<BOOL>>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](a1, a2);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = a1[4];
  a1[4] = v4;
  std::promise<BOOL>::~promise(&v6);
  return a1;
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::pop_front(int64x2_t *a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL);
  std::promise<BOOL>::~promise((uint64_t *)(v2 + 32));
  v3 = *(_QWORD **)(v2 + 24);
  if (v3 == (_QWORD *)v2)
  {
    v4 = 4;
    v3 = (_QWORD *)v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1D493C810);
  return std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::promise<BOOL>::set_exception(std::__assoc_sub_state **a1, const std::exception_ptr *a2)
{
  std::__assoc_sub_state *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;

  v2 = *a1;
  if (!*a1)
    std::__throw_future_error[abi:ne180100](3u);
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(v2, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_1D48EBE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1D82628A4);
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x1D82626DC](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E30], (void (*)(void *))MEMORY[0x1E0DE4540]);
}

void sub_1D48EBF40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::function<void ()(void)>,std::promise<BOOL>>::pair[abi:ne180100]<true,0>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = 0;
  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 850045863;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 1018212795;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *(_QWORD *)v2 = &off_1E9807058;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(a1 + 32) = v2;
  return a1;
}

void sub_1D48EBFCC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__assoc_state<BOOL>::set_value<BOOL>(uint64_t a1, _BYTE *a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_BYTE *)(a1 + 140) = *a2;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_1D48EC094(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 != v2)
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 == v8)
      goto LABEL_13;
    while (1)
    {
      std::promise<BOOL>::~promise((uint64_t *)(v7 + 32));
      v9 = *(_QWORD **)(v7 + 24);
      if (v9 == (_QWORD *)v7)
        break;
      if (v9)
      {
        v10 = 5;
LABEL_7:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
      v7 += 40;
      if (v7 - (_QWORD)*v6 == 4080)
      {
        v11 = (unint64_t)v6[1];
        ++v6;
        v7 = v11;
      }
      if (v7 == v8)
      {
        v2 = (void **)a1[1];
        v3 = (void **)a1[2];
        goto LABEL_13;
      }
    }
    v9 = (_QWORD *)v7;
    v10 = 4;
    goto LABEL_7;
  }
  v4 = a1 + 5;
  v3 = (void **)a1[1];
LABEL_13:
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 51;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_21;
    v14 = 102;
  }
  a1[4] = v14;
LABEL_21:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1D82628A4);
}

_QWORD *std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E9806FA8;
  return result;
}

void std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E9806FA8;
}

uint64_t std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__assoc_state<BOOL>::move(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1D48EC3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  const void **v4;

  v4 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v4;
  *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  faiss::WorkerThread::threadMain((faiss::WorkerThread *)v4[1]);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)&v4);
  return 0;
}

void sub_1D48EC464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x1D82628A4](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1D826273C]();
    JUMPOUT(0x1D82628A4);
  }
  return result;
}

void std::__assoc_state<BOOL>::~__assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1D82628A4);
}

uint64_t std::__assoc_state<BOOL>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *std::promise<BOOL>::~promise(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const std::error_category *v4;
  unint64_t *v5;
  unint64_t v6;
  std::logic_error v8[2];
  std::exception_ptr v9;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    {
      v9.__ptr_ = 0;
      v3 = *(_QWORD *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v9);
      v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        v4 = std::future_category();
        MEMORY[0x1D82626DC](v8, 4, v4);
        std::make_exception_ptr[abi:ne180100]<std::future_error>(v8);
      }
    }
    v5 = (unint64_t *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void std::make_exception_ptr[abi:ne180100]<std::future_error>(const std::logic_error *a1)
{
  std::logic_error *exception;
  std::logic_error *v3;

  exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
  v3 = std::logic_error::logic_error(exception, a1);
  v3->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE4F88] + 16);
  v3[1] = a1[1];
  __cxa_throw(v3, MEMORY[0x1E0DE4E30], (void (*)(void *))MEMORY[0x1E0DE4540]);
}

void sub_1D48EC6E0(void *a1)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  v4 = (unint64_t *)(a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_1D48EC75C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1D48ECA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

_QWORD *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x66)
    a2 = 1;
  if (v2 < 0xCC)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

uint64_t std::future<BOOL>::get(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void faiss::WorkerThread::threadMain()
{
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Faiss assertion '%s' failed in %s at %s:%d\n", "wantStop_", "void faiss::WorkerThread::threadMain()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/WorkerThread.cpp", 79);
  abort();
}

double faiss::ClusteringParameters::ClusteringParameters(faiss::ClusteringParameters *this)
{
  double result;

  *(_QWORD *)this = 0x100000019;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  *(_QWORD *)&result = 0x10000000027;
  *((_QWORD *)this + 2) = 0x10000000027;
  *((_DWORD *)this + 6) = 1234;
  *((_QWORD *)this + 4) = 0x8000;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0x100000019;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  *(_QWORD *)&result = 0x10000000027;
  *((_QWORD *)this + 2) = 0x10000000027;
  *((_DWORD *)this + 6) = 1234;
  *((_QWORD *)this + 4) = 0x8000;
  return result;
}

double faiss::Clustering::Clustering(faiss::Clustering *this, int a2, int a3)
{
  double result;

  *((_QWORD *)this + 1) = 0x100000019;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_QWORD *)this + 3) = 0x10000000027;
  *((_DWORD *)this + 8) = 1234;
  *(_QWORD *)this = &off_1E9805270;
  *((_QWORD *)this + 5) = 0x8000;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = a3;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 1) = 0x100000019;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_QWORD *)this + 3) = 0x10000000027;
  *((_DWORD *)this + 8) = 1234;
  *(_QWORD *)this = &off_1E9805270;
  *((_QWORD *)this + 5) = 0x8000;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = a3;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return result;
}

double faiss::Clustering::Clustering(faiss::Clustering *this, int a2, int a3, const faiss::ClusteringParameters *a4)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  double result;

  v4 = *(_OWORD *)a4;
  v5 = *((_OWORD *)a4 + 1);
  v6 = *((_QWORD *)a4 + 4);
  *(_QWORD *)this = &off_1E9805270;
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  *((_QWORD *)this + 5) = v6;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = a3;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return result;
}

{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  double result;

  v4 = *(_OWORD *)a4;
  v5 = *((_OWORD *)a4 + 1);
  v6 = *((_QWORD *)a4 + 4);
  *(_QWORD *)this = &off_1E9805270;
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  *((_QWORD *)this + 5) = v6;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = a3;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return result;
}

float faiss::Clustering::post_process_centroids(faiss::Clustering *this, uint64_t a2, uint64_t a3, float *a4)
{
  float result;
  float *v6;
  uint64_t v7;
  unint64_t v8;

  if (*((_BYTE *)this + 17))
    faiss::fvec_renorm_L2(*((_QWORD *)this + 6), *((_QWORD *)this + 7), *((float **)this + 8), a4);
  if (*((_BYTE *)this + 18))
  {
    v6 = (float *)*((_QWORD *)this + 8);
    v7 = *((_QWORD *)this + 9) - (_QWORD)v6;
    if (v7)
    {
      v8 = v7 >> 2;
      if (v8 <= 1)
        v8 = 1;
      do
      {
        result = roundf(*v6);
        *v6++ = result;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t faiss::Clustering::train(faiss::Clustering *this, unint64_t a2, const float *a3, faiss::Index *a4, const float *a5)
{
  return faiss::Clustering::train_encoded(this, a2, (const unsigned __int8 *)a3, 0, a4, a5);
}

uint64_t faiss::Clustering::train_encoded(faiss::Clustering *this, unint64_t a2, const unsigned __int8 *a3, const faiss::Index *a4, faiss::Index *a5, const float *a6)
{
  int64_t v6;
  unint64_t v7;
  faiss::Index *v8;
  const faiss::Index *v9;
  faiss::Clustering *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  int64_t v19;
  const unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const unsigned __int8 *v24;
  int *v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  const float *v29;
  int *v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  float v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  const char *v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  faiss *v63;
  double v64;
  faiss::InterruptCallback *v65;
  faiss::InterruptCallback *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  double v72;
  float v73;
  int64_t v74;
  float *v75;
  float v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  float *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t j;
  unint64_t v85;
  unint64_t v86;
  float *v87;
  float *v88;
  float v89;
  unint64_t v90;
  float v91;
  unint64_t v92;
  float v93;
  uint64_t v94;
  float v95;
  float *v97;
  unint64_t v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  float *v102;
  uint64_t v103;
  faiss *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  float v115;
  uint64_t k;
  float v117;
  float v118;
  float v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  float *v125;
  int *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  int *v131;
  double v132;
  int v133;
  double v134;
  double v135;
  double v136;
  unint64_t v137;
  unint64_t v138;
  double v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  __int128 v149;
  __int128 v150;
  float v151;
  faiss::InterruptCallback *v152;
  _BOOL4 v153;
  uint64_t result;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  int v161;
  char *v162;
  size_t v163;
  void *v164;
  int v165;
  char *v166;
  size_t v167;
  void *exception;
  int v169;
  char *v170;
  size_t v171;
  void *v172;
  int v173;
  char *v174;
  size_t v175;
  void *v176;
  int v177;
  char *v178;
  size_t v179;
  void *v180;
  int v181;
  float v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  void **v186;
  void **v187;
  uint64_t v188;
  faiss::Index *v189;
  double v190;
  const unsigned __int8 *v191;
  const float *v192;
  unint64_t v193;
  size_t __n;
  double v195;
  double v196;
  int v198;
  uint64_t v200;
  uint64_t v201;
  float *v203;
  int64_t v204;
  const unsigned __int8 *v205;
  uint64_t v206;
  void *__p[3];
  std::vector<int> v208;
  void *v209[3];
  void *v210;
  _BYTE *v211;
  uint64_t v212;
  void *v213;
  _BYTE *v214;
  uint64_t v215;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v216;
  std::vector<int>::value_type __x[3];

  v6 = a2;
  v7 = *((_QWORD *)this + 7);
  if (v7 > a2)
  {
    memset(&v216, 0, 24);
    v165 = snprintf(0, 0, "Error: '%s' failed: Number of training points (%lld) should be at least as large as number of clusters (%zd)", "nx >= k", a2, v7);
    std::string::resize((std::string *)&v216, v165 + 1, 0);
    if ((v216.__x_[5] & 0x80000000) == 0)
      v166 = (char *)&v216;
    else
      v166 = *(char **)v216.__x_;
    if ((v216.__x_[5] & 0x80000000) == 0)
      v167 = HIBYTE(v216.__x_[5]);
    else
      v167 = *(_QWORD *)&v216.__x_[2];
    snprintf(v166, v167, "Error: '%s' failed: Number of training points (%lld) should be at least as large as number of clusters (%zd)", "nx >= k", v6, *((_QWORD *)this + 7));
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v216, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 289);
  }
  v8 = a5;
  v9 = a4;
  v11 = this;
  if (a4)
  {
    v12 = *((int *)a4 + 2);
    v13 = *((_QWORD *)this + 6);
    v183 = (_QWORD *)((char *)this + 48);
    if (v13 != v12)
    {
      memset(&v216, 0, 24);
      v169 = snprintf(0, 0, "Error: '%s' failed: Codec dimension %d not the same as data dimension %d", "(!codec || codec->d == d)", v12, v13);
      std::string::resize((std::string *)&v216, v169 + 1, 0);
      if ((v216.__x_[5] & 0x80000000) == 0)
        v170 = (char *)&v216;
      else
        v170 = *(char **)v216.__x_;
      if ((v216.__x_[5] & 0x80000000) == 0)
        v171 = HIBYTE(v216.__x_[5]);
      else
        v171 = *(_QWORD *)&v216.__x_[2];
      snprintf(v170, v171, "Error: '%s' failed: Codec dimension %d not the same as data dimension %d", "(!codec || codec->d == d)", *((_DWORD *)a4 + 2), *v183);
      v172 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v172, &v216, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 295);
    }
    v15 = (_DWORD *)((char *)a5 + 8);
    LODWORD(v14) = *((_DWORD *)a5 + 2);
    if ((_DWORD)v12 == (_DWORD)v14)
    {
      v16 = faiss::getmillisecs(this);
      v17 = (*(uint64_t (**)(const faiss::Index *))(*(_QWORD *)v9 + 128))(v9);
      goto LABEL_12;
    }
LABEL_253:
    memset(&v216, 0, 24);
    v177 = snprintf(0, 0, "Error: '%s' failed: Index dimension %d not the same as data dimension %d", "index.d == d", v14, v12);
    std::string::resize((std::string *)&v216, v177 + 1, 0);
    if ((v216.__x_[5] & 0x80000000) == 0)
      v178 = (char *)&v216;
    else
      v178 = *(char **)v216.__x_;
    if ((v216.__x_[5] & 0x80000000) == 0)
      v179 = HIBYTE(v216.__x_[5]);
    else
      v179 = *(_QWORD *)&v216.__x_[2];
    snprintf(v178, v179, "Error: '%s' failed: Index dimension %d not the same as data dimension %d", "index.d == d", *v15, *v183);
    v180 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v180, &v216, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 301);
  }
  v18 = (_QWORD *)((char *)this + 48);
  v12 = *((_QWORD *)this + 6);
  v15 = (_DWORD *)((char *)a5 + 8);
  v14 = *((int *)a5 + 2);
  v183 = (_QWORD *)((char *)this + 48);
  if (v12 != v14)
    goto LABEL_253;
  v16 = faiss::getmillisecs(this);
  v19 = *v18 * v6;
  if (v19)
  {
    v20 = a3;
    do
    {
      if ((*(_DWORD *)v20 & 0x7FFFFFFFu) >= 0x7F800000)
      {
        memset(&v216, 0, 24);
        v161 = snprintf(0, 0, "Error: '%s' failed: input contains NaN's or Inf's", "std::isfinite(x[i])");
        std::string::resize((std::string *)&v216, v161 + 1, 0);
        if ((v216.__x_[5] & 0x80000000) == 0)
          v162 = (char *)&v216;
        else
          v162 = *(char **)v216.__x_;
        if ((v216.__x_[5] & 0x80000000) == 0)
          v163 = HIBYTE(v216.__x_[5]);
        else
          v163 = *(_QWORD *)&v216.__x_[2];
        snprintf(v162, v163, "Error: '%s' failed: input contains NaN's or Inf's", "std::isfinite(x[i])");
        v164 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v164, &v216, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 312);
      }
      v20 += 4;
      --v19;
    }
    while (v19);
  }
  v17 = 4 * *v18;
LABEL_12:
  v21 = *((_QWORD *)v11 + 7);
  v22 = v21 * *((int *)v11 + 7);
  __n = v17;
  if (v22 < v6)
  {
    if (*((_BYTE *)v11 + 16))
      printf("Sampling a subset of %zd / %lld for training\n", v22, v6);
    std::vector<int>::vector((std::vector<int> *)&v216, v6);
    faiss::rand_perm(*(uint64_t *)v216.__x_, (int *)v6, *((_DWORD *)v11 + 8));
    v6 = *((_QWORD *)v11 + 7) * *((int *)v11 + 7);
    v23 = operator new[]();
    v24 = (const unsigned __int8 *)v23;
    if (v6 >= 1)
    {
      v25 = *(int **)v216.__x_;
      v26 = (char *)v23;
      v27 = v6;
      do
      {
        v28 = *v25++;
        memcpy(v26, &a3[__n * v28], __n);
        v26 += __n;
        --v27;
      }
      while (v27);
    }
    if (a6)
    {
      v29 = (const float *)operator new[]();
      v30 = *(int **)v216.__x_;
      if (v6 >= 1)
      {
        for (i = 0; i != v6; ++i)
          v29[i] = a6[v30[i]];
        goto LABEL_28;
      }
    }
    else
    {
      v29 = 0;
      v30 = *(int **)v216.__x_;
    }
    if (!v30)
    {
LABEL_29:
      a6 = v29;
      v205 = v24;
      goto LABEL_30;
    }
LABEL_28:
    *(_QWORD *)&v216.__x_[2] = v30;
    operator delete(v30);
    goto LABEL_29;
  }
  v32 = v21 * *((int *)v11 + 6);
  if (v32 > v6)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "WARNING clustering %lld points to %zd centroids: please provide at least %lld training points\n", v6, v21, v32);
  v29 = 0;
  v24 = 0;
  v205 = a3;
LABEL_30:
  v33 = *((_QWORD *)v11 + 7);
  if (v6 == v33)
  {
    v34 = v6;
    if (*((_BYTE *)v11 + 16))
    {
      printf("Number of training points (%lld) same as number of clusters, just copying\n", v6);
      v34 = *((_QWORD *)v11 + 7);
    }
    std::vector<float>::resize((uint64_t)v11 + 64, v34 * *((_QWORD *)v11 + 6));
    if (v9)
      (*(void (**)(const faiss::Index *, int64_t, const unsigned __int8 *, _QWORD))(*(_QWORD *)v9 + 144))(v9, v6, a3, *((_QWORD *)v11 + 8));
    else
      memcpy(*((void **)v11 + 8), a3, 4 * *((_QWORD *)v11 + 6) * *((_QWORD *)v11 + 7));
    v45 = *((_QWORD *)v11 + 13);
    v46 = (_QWORD *)*((_QWORD *)v11 + 12);
    if ((unint64_t)v46 >= v45)
    {
      v48 = *((_QWORD *)v11 + 11);
      v49 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v46 - v48) >> 3);
      v50 = v49 + 1;
      if (v49 + 1 > 0x666666666666666)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
      if (2 * v51 > v50)
        v50 = 2 * v51;
      if (v51 >= 0x333333333333333)
        v52 = 0x666666666666666;
      else
        v52 = v50;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>((uint64_t)v11 + 104, v52);
      else
        v53 = 0;
      v155 = &v53[40 * v49];
      v156 = &v53[40 * v52];
      *(_QWORD *)v155 = 0;
      *((_QWORD *)v155 + 1) = 0;
      *((_QWORD *)v155 + 2) = 0;
      *((_QWORD *)v155 + 3) = 0x3FF0000000000000;
      *((_QWORD *)v155 + 4) = 0;
      v47 = v155 + 40;
      v158 = (char *)*((_QWORD *)v11 + 11);
      v157 = (char *)*((_QWORD *)v11 + 12);
      if (v157 != v158)
      {
        do
        {
          v159 = *(_OWORD *)(v157 - 40);
          v160 = *(_OWORD *)(v157 - 24);
          *((_QWORD *)v155 - 1) = *((_QWORD *)v157 - 1);
          *(_OWORD *)(v155 - 24) = v160;
          *(_OWORD *)(v155 - 40) = v159;
          v155 -= 40;
          v157 -= 40;
        }
        while (v157 != v158);
        v157 = (char *)*((_QWORD *)v11 + 11);
      }
      *((_QWORD *)v11 + 11) = v155;
      *((_QWORD *)v11 + 12) = v47;
      *((_QWORD *)v11 + 13) = v156;
      if (v157)
        operator delete(v157);
    }
    else
    {
      *v46 = 0;
      v46[1] = 0;
      v46[2] = 0;
      v46[3] = 0x3FF0000000000000;
      v47 = v46 + 5;
      v46[4] = 0;
    }
    *((_QWORD *)v11 + 12) = v47;
    (*(void (**)(faiss::Index *))(*(_QWORD *)v8 + 64))(v8);
    result = (*(uint64_t (**)(faiss::Index *, _QWORD, _QWORD))(*(_QWORD *)v8 + 24))(v8, *((_QWORD *)v11 + 7), *((_QWORD *)v11 + 8));
    goto LABEL_219;
  }
  if (*((_BYTE *)v11 + 16))
  {
    printf("Clustering %lld points in %zdD to %zd clusters, redo %d times, %d iterations\n", v6, *((_QWORD *)v11 + 6), v33, *((_DWORD *)v11 + 3), *((_DWORD *)v11 + 2));
    if (v9)
    {
      v35 = (*(uint64_t (**)(const faiss::Index *))(*(_QWORD *)v9 + 128))(v9);
      printf("Input data encoded in %zd bytes per vector\n", v35);
    }
  }
  v206 = operator new[]();
  v36 = operator new[]();
  v203 = (float *)v36;
  v37 = v183;
  v181 = *((_DWORD *)v8 + 7);
  v38 = INFINITY;
  if (!v181)
    v38 = -INFINITY;
  v182 = v38;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  v39 = (uint64_t)(*((_QWORD *)v11 + 9) - *((_QWORD *)v11 + 8)) >> 2;
  v186 = (void **)((char *)v11 + 64);
  v40 = *((_QWORD *)v11 + 6);
  v192 = v29;
  v193 = v39 / v40;
  v191 = v24;
  if (v39 % v40)
  {
    memset(&v216, 0, 24);
    v173 = snprintf(0, 0, "Error: '%s' failed: size of provided input centroids not a multiple of dimension", "centroids.size() % d == 0");
    std::string::resize((std::string *)&v216, v173 + 1, 0);
    if ((v216.__x_[5] & 0x80000000) == 0)
      v174 = (char *)&v216;
    else
      v174 = *(char **)v216.__x_;
    if ((v216.__x_[5] & 0x80000000) == 0)
      v175 = HIBYTE(v216.__x_[5]);
    else
      v175 = *(_QWORD *)&v216.__x_[2];
    snprintf(v174, v175, "Error: '%s' failed: size of provided input centroids not a multiple of dimension", "centroids.size() % d == 0");
    v176 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v176, &v216, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 392);
  }
  v41 = *((unsigned __int8 *)v11 + 16);
  if (v40 <= v39 && *((_BYTE *)v11 + 16))
  {
    if (*((_BYTE *)v11 + 20))
      v42 = "";
    else
      v42 = "not ";
    v36 = printf("  Using %zd centroids provided as input (%sfrozen)\n", v193, v42);
    v41 = *((unsigned __int8 *)v11 + 16);
  }
  if (v41)
  {
    v43 = faiss::getmillisecs((faiss *)v36);
    v36 = printf("  Preprocessing in %.2f s\n", (v43 - v16) / 1000.0);
  }
  v190 = faiss::getmillisecs((faiss *)v36);
  if (v9)
    v44 = *((_QWORD *)v11 + 5) * *((_QWORD *)v11 + 6);
  else
    v44 = 0;
  std::vector<float>::vector(v209, v44);
  LODWORD(v54) = *((_DWORD *)v11 + 3);
  if ((int)v54 >= 1)
  {
    v188 = v6;
    v187 = (void **)((char *)v11 + 88);
    v184 = 0;
    v185 = (uint64_t)v11 + 104;
    v196 = 0.0;
    v55 = 0.5;
    v189 = v8;
    v204 = v6;
    while (1)
    {
      if ((int)v54 >= 2 && *((_BYTE *)v11 + 16))
        printf("Outer iteration %d / %d\n", v184, v54);
      std::vector<float>::resize((uint64_t)v186, *((_QWORD *)v11 + 7) * *((_QWORD *)v11 + 6));
      std::vector<int>::vector(&v208, v6);
      faiss::rand_perm((uint64_t)v208.__begin_, (int *)v6, *((_DWORD *)v11 + 8) + 15486557 * v184 + 1);
      v59 = *((_QWORD *)v11 + 7);
      if (v9)
      {
        if (v59 > (int)v193)
        {
          v60 = (int)v193;
          do
          {
            (*(void (**)(const faiss::Index *, uint64_t, const unsigned __int8 *, unint64_t))(*(_QWORD *)v9 + 144))(v9, 1, &v205[__n * v208.__begin_[v60]], (unint64_t)*v186 + 4 * *v37 * v60);
            ++v60;
          }
          while (*((_QWORD *)v11 + 7) > v60);
        }
      }
      else
      {
        v61 = (int)v193;
        if (v59 > (int)v193)
        {
          do
          {
            memcpy((void *)(*((_QWORD *)v11 + 8) + 4 * *((_QWORD *)v11 + 6) * v61), &v205[__n * v208.__begin_[v61]], __n);
            ++v61;
          }
          while (*((_QWORD *)v11 + 7) > v61);
        }
      }
      v62.n128_f32[0] = faiss::Clustering::post_process_centroids(v11, v56, v57, v58);
      if (*((_QWORD *)v8 + 2))
        (*(void (**)(faiss::Index *, float))(*(_QWORD *)v8 + 64))(v8, v62.n128_f32[0]);
      if (!*((_BYTE *)v8 + 25))
        (*(void (**)(faiss::Index *, _QWORD, _QWORD, __n128))(*(_QWORD *)v8 + 16))(v8, *((_QWORD *)v11 + 7), *((_QWORD *)v11 + 8), v62);
      v63 = (faiss *)(*(uint64_t (**)(faiss::Index *, _QWORD, _QWORD, __n128))(*(_QWORD *)v8 + 24))(v8, *((_QWORD *)v11 + 7), *((_QWORD *)v11 + 8), v62);
      if (*((int *)v11 + 2) >= 1)
        break;
      v73 = 0.0;
LABEL_180:
      if (*((_BYTE *)v11 + 16))
        putchar(10);
      v37 = v183;
      if (*((int *)v11 + 3) >= 2)
      {
        v153 = v73 < v182;
        if (!v181)
          v153 = v73 > v182;
        if (v153)
        {
          if (*((_BYTE *)v11 + 16))
            puts("Objective improved: keep new clusters");
          if (&v210 != v186)
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v210, *((char **)v11 + 8), *((_QWORD *)v11 + 9), (uint64_t)(*((_QWORD *)v11 + 9) - *((_QWORD *)v11 + 8)) >> 2);
          if (&v213 != v187)
            std::vector<faiss::ClusteringIterationStats>::__assign_with_size[abi:ne180100]<faiss::ClusteringIterationStats*,faiss::ClusteringIterationStats*>((char *)&v213, *((char **)v11 + 11), *((_QWORD *)v11 + 12), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v11 + 12) - *((_QWORD *)v11 + 11)) >> 3));
          v182 = v73;
        }
        (*(void (**)(faiss::Index *))(*(_QWORD *)v8 + 64))(v8);
      }
      if (v208.__begin_)
      {
        v208.__end_ = v208.__begin_;
        operator delete(v208.__begin_);
      }
      v54 = *((int *)v11 + 3);
      if (++v184 >= v54)
      {
        if ((int)v54 > 1)
        {
          if (&v210 != v186)
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v186, (char *)v210, (uint64_t)v211, (v211 - (_BYTE *)v210) >> 2);
          if (&v213 != v187)
            std::vector<faiss::ClusteringIterationStats>::__assign_with_size[abi:ne180100]<faiss::ClusteringIterationStats*,faiss::ClusteringIterationStats*>((char *)v187, (char *)v213, (uint64_t)v214, 0xCCCCCCCCCCCCCCCDLL * ((v214 - (_BYTE *)v213) >> 3));
          (*(void (**)(faiss::Index *))(*(_QWORD *)v8 + 64))(v8);
          (*(void (**)(faiss::Index *, _QWORD, void *))(*(_QWORD *)v8 + 24))(v8, *((_QWORD *)v11 + 7), v210);
        }
        goto LABEL_204;
      }
    }
    v198 = 0;
    while (1)
    {
      v64 = faiss::getmillisecs(v63);
      if (v9)
      {
        v65 = (faiss::InterruptCallback *)(*(uint64_t (**)(const faiss::Index *))(*(_QWORD *)v9 + 128))(v9);
        if (v6)
        {
          v66 = v65;
          v67 = 0;
          v68 = *((_QWORD *)v11 + 5);
          do
          {
            v69 = v68 + v67;
            if (v69 >= v6)
              v69 = v6;
            v70 = v69 - v67;
            (*(void (**)(const faiss::Index *, unint64_t, const unsigned __int8 *, void *))(*(_QWORD *)v9 + 144))(v9, v69 - v67, &v205[v67 * (_QWORD)v66], v209[0]);
            v65 = (faiss::InterruptCallback *)(*(uint64_t (**)(faiss::Index *, unint64_t, void *, uint64_t, float *, unint64_t))(*(_QWORD *)v8 + 40))(v8, v70, v209[0], 1, &v203[v67], v206 + 8 * v67);
            v68 = *((_QWORD *)v11 + 5);
            v67 += v68;
          }
          while (v67 < v6);
        }
      }
      else
      {
        v65 = (faiss::InterruptCallback *)(*(uint64_t (**)(faiss::Index *, int64_t, const unsigned __int8 *, uint64_t, float *, uint64_t))(*(_QWORD *)v8 + 40))(v8, v6, v205, 1, v203, v206);
      }
      v71 = faiss::InterruptCallback::check(v65);
      v72 = faiss::getmillisecs((faiss *)v71);
      v73 = 0.0;
      if (v6 >= 1)
      {
        v74 = v6;
        v75 = v203;
        do
        {
          v76 = *v75++;
          v73 = v73 + v76;
          --v74;
        }
        while (v74);
      }
      std::vector<float>::vector(__p, *((_QWORD *)v11 + 7));
      if (*((_BYTE *)v11 + 20))
        v77 = v193;
      else
        v77 = 0;
      v78 = *((_QWORD *)v11 + 6);
      v79 = *((_QWORD *)v11 + 7);
      v80 = (float *)__p[0];
      v81 = *((_QWORD *)v11 + 8);
      v82 = v79 - v77;
      v83 = (char *)(v81 + 4 * v77 * v78);
      bzero(v83, (v79 - v77) * 4 * v78);
      if (v9)
        v200 = (*(uint64_t (**)(const faiss::Index *))(*(_QWORD *)v9 + 128))(v9);
      else
        v200 = 4 * v78;
      std::vector<float>::vector(&v216, v78);
      if (v204)
      {
        for (j = 0; j != v204; ++j)
        {
          v85 = *(_QWORD *)(v206 + 8 * j);
          if ((v85 & 0x8000000000000000) != 0 || v85 >= v79)
            __assert_rtn("compute_centroids", "Clustering.cpp", 175, "ci >= 0 && ci < k + k_frozen");
          v86 = v85 - v77;
          if (v85 - v77 < v82)
          {
            if (a4)
            {
              v87 = *(float **)v216.__x_;
              (*(void (**)(const faiss::Index *, uint64_t, const unsigned __int8 *, _QWORD))(*(_QWORD *)a4 + 144))(a4, 1, &v205[j * v200], *(_QWORD *)v216.__x_);
            }
            else
            {
              v87 = (float *)&v205[j * v200];
            }
            v88 = (float *)&v83[4 * v86 * v78];
            if (a6)
            {
              v89 = a6[j];
              v80[v86] = v89 + v80[v86];
              if (v78)
              {
                v90 = v78;
                do
                {
                  v91 = *v87++;
                  *v88 = *v88 + (float)(v91 * v89);
                  ++v88;
                  --v90;
                }
                while (v90);
              }
            }
            else
            {
              v80[v86] = v80[v86] + 1.0;
              if (v78)
              {
                v92 = v78;
                do
                {
                  v93 = *v87++;
                  *v88 = v93 + *v88;
                  ++v88;
                  --v92;
                }
                while (v92);
              }
            }
          }
        }
      }
      if (*(_QWORD *)v216.__x_)
      {
        *(_QWORD *)&v216.__x_[2] = *(_QWORD *)v216.__x_;
        operator delete(*(void **)v216.__x_);
      }
      if (v79 != v77)
      {
        v94 = 0;
        do
        {
          v95 = v80[v94];
          if (v95 != 0.0 && v78 != 0)
          {
            v97 = (float *)v83;
            v98 = v78;
            v99 = 1.0 / v95;
            do
            {
              *v97 = v99 * *v97;
              ++v97;
              --v98;
            }
            while (v98);
          }
          ++v94;
          v83 += 4 * v78;
        }
        while (v94 != v82);
      }
      v100 = *((_QWORD *)this + 6);
      v101 = *((_QWORD *)this + 7);
      v102 = (float *)__p[0];
      v103 = *((_QWORD *)this + 8);
      v104 = (faiss *)faiss::RandomGenerator::RandomGenerator((uint64_t)&v216, 0x4D2u);
      v195 = v64;
      if (v101 == v77)
      {
        v105 = 0;
      }
      else
      {
        v106 = 0;
        v105 = 0;
        v107 = v101 - v77;
        v108 = v103 + 4 * v100 * v77;
        v109 = (float)(v204 - (v101 - v77));
        v201 = 4 * v77;
        v110 = v108;
        do
        {
          if (v102[v106] == 0.0)
          {
            v111 = *v102;
            v112 = faiss::RandomGenerator::rand_float(&v216);
            v113 = (v111 + -1.0) / v109;
            v114 = 0;
            while (v112 >= v113)
            {
              if (v114 + 1 == v107)
                v114 = 0;
              else
                ++v114;
              v115 = v102[v114];
              v112 = faiss::RandomGenerator::rand_float(&v216);
              v113 = (v115 + -1.0) / v109;
            }
            v104 = (faiss *)memcpy((void *)(v108 + 4 * v106 * v100), (const void *)(v108 + 4 * v114 * v100), 4 * v100);
            if (v100)
            {
              for (k = 0; k != v100; ++k)
              {
                if ((k & 1) != 0)
                  v117 = 0.99902;
                else
                  v117 = 1.001;
                *(float *)(v110 + 4 * k) = *(float *)(v110 + 4 * k) * v117;
                if ((k & 1) != 0)
                  v118 = 1.001;
                else
                  v118 = 0.99902;
                *(float *)(v103 + v100 * (v201 + 4 * v114) + 4 * k) = *(float *)(v103 + v100 * (v201 + 4 * v114) + 4 * k)
                                                                    * v118;
              }
            }
            v119 = v102[v114] * v55;
            v102[v106] = v119;
            v102[v114] = v102[v114] - v119;
            ++v105;
          }
          ++v106;
          v110 += 4 * v100;
        }
        while (v106 != v107);
      }
      v24 = v191;
      v29 = v192;
      v11 = this;
      v8 = v189;
      v9 = a4;
      v6 = v204;
      v120 = faiss::getmillisecs(v104);
      v121 = *((_QWORD *)this + 7);
      v122 = v121;
      __x[0] = 0;
      std::vector<int>::vector((std::vector<int> *)&v216, (int)v121, __x);
      v126 = *(int **)v216.__x_;
      v127 = (uint64_t *)v206;
      v128 = v188;
      if ((int)v204 >= 1)
      {
        do
        {
          v129 = *v127++;
          ++v126[v129];
          --v128;
        }
        while (v128);
      }
      v130 = 0.0;
      if ((int)v121 >= 1)
        break;
      v132 = 0.0;
      v134 = 0.0;
      if (v126)
        goto LABEL_154;
LABEL_155:
      v135 = (v120 - v190) / 1000.0;
      v196 = v196 + v72 - v195;
      v136 = v196 / 1000.0;
      v137 = *((_QWORD *)this + 12);
      v138 = *((_QWORD *)this + 13);
      v139 = v130 * (double)(int)v121 / (v134 * v134);
      if (v137 >= v138)
      {
        v141 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v137 - (_QWORD)*v187) >> 3);
        v142 = v141 + 1;
        v55 = 0.5;
        if (v141 + 1 > 0x666666666666666)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v143 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v138 - (_QWORD)*v187) >> 3);
        if (2 * v143 > v142)
          v142 = 2 * v143;
        if (v143 >= 0x333333333333333)
          v123 = 0x666666666666666;
        else
          v123 = v142;
        if (v123)
          v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>(v185, v123);
        else
          v144 = 0;
        v145 = &v144[40 * v141];
        *(float *)v145 = v73;
        *((_DWORD *)v145 + 1) = 0;
        *((double *)v145 + 1) = v135;
        *((double *)v145 + 2) = v136;
        *((double *)v145 + 3) = v139;
        *((_DWORD *)v145 + 8) = v105;
        *((_DWORD *)v145 + 9) = 0;
        v147 = (char *)*((_QWORD *)this + 11);
        v146 = (char *)*((_QWORD *)this + 12);
        v148 = v145;
        if (v146 != v147)
        {
          do
          {
            v149 = *(_OWORD *)(v146 - 40);
            v150 = *(_OWORD *)(v146 - 24);
            *((_QWORD *)v148 - 1) = *((_QWORD *)v146 - 1);
            *(_OWORD *)(v148 - 24) = v150;
            *(_OWORD *)(v148 - 40) = v149;
            v148 -= 40;
            v146 -= 40;
          }
          while (v146 != v147);
          v146 = (char *)*v187;
        }
        v140 = v145 + 40;
        *((_QWORD *)this + 11) = v148;
        *((_QWORD *)this + 12) = v145 + 40;
        *((_QWORD *)this + 13) = &v144[40 * v123];
        if (v146)
          operator delete(v146);
      }
      else
      {
        *(float *)v137 = v73;
        *(_DWORD *)(v137 + 4) = 0;
        *(double *)(v137 + 8) = v135;
        *(double *)(v137 + 16) = v136;
        *(double *)(v137 + 24) = v139;
        v140 = (char *)(v137 + 40);
        *(_DWORD *)(v137 + 32) = v105;
        *(_DWORD *)(v137 + 36) = 0;
        v55 = 0.5;
      }
      *((_QWORD *)this + 12) = v140;
      if (*((_BYTE *)this + 16))
      {
        printf("  Iteration %d (%.2f s, search %.2f s): objective=%g imbalance=%.3f nsplit=%d       \r", v198, v135, v136, v73, v139, v105);
        fflush((FILE *)*MEMORY[0x1E0C80C20]);
      }
      v151 = faiss::Clustering::post_process_centroids(this, v123, v124, v125);
      (*(void (**)(faiss::Index *, float))(*(_QWORD *)v189 + 64))(v189, v151);
      if (*((_BYTE *)this + 19))
        (*(void (**)(faiss::Index *, _QWORD, _QWORD))(*(_QWORD *)v189 + 16))(v189, *((_QWORD *)this + 7), *((_QWORD *)this + 8));
      v152 = (faiss::InterruptCallback *)(*(uint64_t (**)(faiss::Index *, _QWORD, _QWORD))(*(_QWORD *)v189 + 24))(v189, *((_QWORD *)this + 7), *((_QWORD *)this + 8));
      faiss::InterruptCallback::check(v152);
      v63 = (faiss *)__p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (++v198 >= *((_DWORD *)this + 2))
        goto LABEL_180;
    }
    v131 = v126;
    v132 = 0.0;
    do
    {
      v133 = *v131++;
      v132 = v132 + (double)v133;
      v130 = v130 + (double)v133 * (double)v133;
      --v122;
    }
    while (v122);
LABEL_154:
    *(_QWORD *)&v216.__x_[2] = v126;
    operator delete(v126);
    v134 = v132;
    goto LABEL_155;
  }
LABEL_204:
  if (v209[0])
  {
    v209[1] = v209[0];
    operator delete(v209[0]);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  MEMORY[0x1D826288C](v203, 0x1000C8052888210);
  result = MEMORY[0x1D826288C](v206, 0x1000C8000313F17);
LABEL_219:
  if (v29)
    result = MEMORY[0x1D826288C](v29, 0x1000C8052888210);
  if (v24)
    return MEMORY[0x1D826288C](v24, 0x1000C8077774924);
  return result;
}

void sub_1D48EE67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;
  uint64_t v62;

  if (__p)
    operator delete(__p);
  if (a50)
    operator delete(a50);
  if (a53)
    operator delete(a53);
  MEMORY[0x1D826288C](a37, 0x1000C8052888210);
  MEMORY[0x1D826288C](a40, 0x1000C8000313F17);
  if (v61)
    MEMORY[0x1D826288C](v61, 0x1000C8052888210);
  if (v62)
    MEMORY[0x1D826288C](v62, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

float faiss::kmeans_clustering(faiss *this, unint64_t a2, uint64_t a3, const unsigned __int8 *a4, float *a5, float *a6)
{
  float v11;
  _QWORD v13[5];
  void *__p;
  void *v15;
  _QWORD v16[2];
  _BOOL4 v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__src[2];
  __int128 v25;
  __int128 v26;

  v16[1] = 0x100000019;
  v18 = 0;
  v19 = 0x10000000027;
  v20 = 1234;
  v16[0] = &off_1E9805270;
  v21 = 0x8000;
  v22 = (int)this;
  v23 = (int)a3;
  *(_OWORD *)__src = 0u;
  v25 = 0u;
  v26 = 0u;
  v17 = a2 * (unint64_t)this * a3 > 0x40000000;
  faiss::IndexFlat::IndexFlat((uint64_t)v13, (int)this, 1);
  v13[0] = &unk_1E9805548;
  faiss::Clustering::train_encoded((faiss::Clustering *)v16, a2, a4, 0, (faiss::Index *)v13, 0);
  memcpy(a5, __src[0], 4 * (_QWORD)this * a3);
  v11 = *(float *)(v26 - 40);
  v13[0] = &off_1E9806E90;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  faiss::Index::~Index((faiss::Index *)v13);
  faiss::Clustering::~Clustering((faiss::Clustering *)v16);
  return v11;
}

void sub_1D48EE9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  faiss::IndexFlatL2::~IndexFlatL2((faiss::IndexFlatL2 *)&a9);
  faiss::Clustering::~Clustering((faiss::Clustering *)&a17);
  _Unwind_Resume(a1);
}

double faiss::ProgressiveDimClusteringParameters::ProgressiveDimClusteringParameters(faiss::ProgressiveDimClusteringParameters *this)
{
  double result;

  *((_BYTE *)this + 12) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0x10000000027;
  *((_DWORD *)this + 6) = 1234;
  *((_QWORD *)this + 4) = 0x8000;
  *((_DWORD *)this + 10) = 10;
  *((_BYTE *)this + 44) = 1;
  *(_QWORD *)&result = 0x10000000ALL;
  *(_QWORD *)this = 0x10000000ALL;
  return result;
}

{
  double result;

  *((_BYTE *)this + 12) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0x10000000027;
  *((_DWORD *)this + 6) = 1234;
  *((_QWORD *)this + 4) = 0x8000;
  *((_DWORD *)this + 10) = 10;
  *((_BYTE *)this + 44) = 1;
  *(_QWORD *)&result = 0x10000000ALL;
  *(_QWORD *)this = 0x10000000ALL;
  return result;
}

_QWORD *faiss::ProgressiveDimIndexFactory::operator()(uint64_t a1, int a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)operator new();
  faiss::IndexFlat::IndexFlat((uint64_t)v3, a2, 1);
  *v3 = &unk_1E9805548;
  return v3;
}

void sub_1D48EEAB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D82628A4](v1, 0x1081C40E7E060E2);
  _Unwind_Resume(a1);
}

double faiss::ProgressiveDimClustering::ProgressiveDimClustering(faiss::ProgressiveDimClustering *this, int a2, int a3)
{
  double result;

  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0x10000000027;
  *((_DWORD *)this + 8) = 1234;
  *((_QWORD *)this + 5) = 0x8000;
  *((_DWORD *)this + 12) = 10;
  *((_BYTE *)this + 52) = 1;
  *((_QWORD *)this + 1) = 0x10000000ALL;
  *(_QWORD *)this = &unk_1E9806AE8;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 8) = a3;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0x10000000027;
  *((_DWORD *)this + 8) = 1234;
  *((_QWORD *)this + 5) = 0x8000;
  *((_DWORD *)this + 12) = 10;
  *((_BYTE *)this + 52) = 1;
  *((_QWORD *)this + 1) = 0x10000000ALL;
  *(_QWORD *)this = &unk_1E9806AE8;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 8) = a3;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

double faiss::ProgressiveDimClustering::ProgressiveDimClustering(faiss::ProgressiveDimClustering *this, int a2, int a3, const faiss::ProgressiveDimClusteringParameters *a4)
{
  __int128 v4;
  __int128 v5;
  double result;

  v4 = *(_OWORD *)a4;
  v5 = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)this + 40) = *((_OWORD *)a4 + 2);
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  *(_QWORD *)this = &unk_1E9806AE8;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 8) = a3;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  __int128 v4;
  __int128 v5;
  double result;

  v4 = *(_OWORD *)a4;
  v5 = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)this + 40) = *((_OWORD *)a4 + 2);
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  *(_QWORD *)this = &unk_1E9806AE8;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 8) = a3;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void faiss::ProgressiveDimClustering::train(faiss::ProgressiveDimClustering *this, uint64_t a2, float *a3, faiss::ProgressiveDimIndexFactory *a4)
{
  faiss::ProgressiveDimClustering *v5;
  int v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  faiss::Index *v11;
  faiss::ProgressiveDimClustering *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  const float *v29;
  int64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  int v38;
  char *v39;
  int64_t v40;
  void *__p[3];
  _BYTE v42[24];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 __dst;
  __int128 v48;
  __int128 v49;
  float *c__;
  float *v51;
  uint64_t v52;
  _QWORD v53[13];
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;

  v5 = this;
  faiss::PCAMatrix::PCAMatrix((uint64_t)v53, *((_DWORD *)this + 14), *((_DWORD *)this + 14), 0.0, 0);
  c__ = 0;
  v51 = 0;
  v52 = 0;
  if (*((_BYTE *)v5 + 52))
  {
    if (*((_BYTE *)v5 + 16))
      puts("Training PCA transform");
    faiss::PCAMatrix::train((faiss::PCAMatrix *)v53, (int *)a2, a3);
    if (*((_BYTE *)v5 + 16))
      puts("Apply PCA");
    std::vector<float>::resize((uint64_t)&c__, *((_QWORD *)v5 + 7) * a2);
    faiss::LinearTransform::apply_noalloc((faiss::LinearTransform *)v53, a2, a3, c__);
    a3 = c__;
  }
  v6 = *((_DWORD *)v5 + 12);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v36 = (char *)v5 + 8;
    v40 = a2;
    v39 = (char *)v5 + 72;
    v35 = (uint64_t)v5 + 96;
    do
    {
      v9 = pow((double)*((unint64_t *)v5 + 7), ((double)v8 + 1.0) / (double)v6);
      v10 = (int)v9;
      if (*((_BYTE *)v5 + 16))
        printf("Progressive dim step %d: cluster in dimension %d\n", v8, (int)v9);
      v11 = (faiss::Index *)(**(uint64_t (***)(faiss::ProgressiveDimIndexFactory *, uint64_t))a4)(a4, v10);
      v12 = v5;
      v13 = *((_QWORD *)v5 + 8);
      v14 = *((_OWORD *)v36 + 1);
      *(_OWORD *)&v42[8] = *(_OWORD *)v36;
      v43 = v14;
      v44 = *((_QWORD *)v36 + 4);
      v38 = v10;
      v15 = (int)v10;
      *(_QWORD *)v42 = &off_1E9805270;
      v45 = (int)v10;
      v46 = (int)v13;
      __dst = 0u;
      v48 = 0u;
      v16 = 4 * (int)v10;
      v49 = 0u;
      if (v7 >= 1)
      {
        std::vector<float>::resize((uint64_t)&__dst, v13 * (int)v10);
        v17 = *((_QWORD *)v5 + 8);
        if (v17 >= 1)
        {
          v18 = v7;
          v19 = (char *)__dst;
          v20 = *(char **)v39;
          if (v15 >= v18)
            v21 = v18;
          else
            v21 = v15;
          v22 = 4 * v21;
          v23 = 4 * v18;
          do
          {
            memcpy(v19, v20, v22);
            v19 += v16;
            v20 += v23;
            --v17;
          }
          while (v17);
        }
      }
      std::vector<float>::vector(__p, v15 * v40);
      v5 = v12;
      if (v40 >= 1)
      {
        v24 = *((_QWORD *)v12 + 7);
        if (v15 >= v24)
          v25 = *((_QWORD *)v12 + 7);
        else
          v25 = v15;
        v26 = (char *)__p[0];
        v27 = 4 * v25;
        v28 = 4 * v24;
        v29 = a3;
        v30 = v40;
        do
        {
          memcpy(v26, v29, v27);
          v26 += v16;
          v29 = (const float *)((char *)v29 + v28);
          --v30;
        }
        while (v30);
      }
      faiss::Clustering::train_encoded((faiss::Clustering *)v42, v40, (const unsigned __int8 *)__p[0], 0, v11, 0);
      if (v39 != (char *)&__dst)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v39, (char *)__dst, *((uint64_t *)&__dst + 1), (uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 2);
      std::vector<faiss::ClusteringIterationStats>::__insert_with_size[abi:ne180100]<std::__wrap_iter<faiss::ClusteringIterationStats*>,std::__wrap_iter<faiss::ClusteringIterationStats*>>(v35, *((_QWORD *)v12 + 13), *((char **)&v48 + 1), (char *)v49, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - *((_QWORD *)&v48 + 1)) >> 3));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      faiss::Clustering::~Clustering((faiss::Clustering *)v42);
      (*(void (**)(faiss::Index *))(*(_QWORD *)v11 + 8))(v11);
      ++v8;
      v6 = *((_DWORD *)v12 + 12);
      v7 = v38;
    }
    while (v8 < v6);
  }
  if (*((_BYTE *)v5 + 52))
  {
    if (*((_BYTE *)v5 + 16))
      puts("Revert PCA transform on centroids");
    std::vector<float>::vector(v42, *((_QWORD *)v5 + 8) * *((_QWORD *)v5 + 7));
    faiss::LinearTransform::reverse_transform((faiss::LinearTransform *)v53, *((_QWORD *)v5 + 8), *((float **)v5 + 9), *(float **)v42);
    v31 = (void *)*((_QWORD *)v5 + 9);
    *(_OWORD *)((char *)v5 + 72) = *(_OWORD *)v42;
    v32 = *(_QWORD *)&v42[16];
    v33 = *((_QWORD *)v5 + 11);
    *(_QWORD *)v42 = v31;
    *(_QWORD *)&v42[16] = v33;
    *((_QWORD *)v5 + 11) = v32;
    if (v31)
    {
      *(_QWORD *)&v42[8] = v31;
      operator delete(v31);
    }
  }
  if (c__)
  {
    v51 = c__;
    operator delete(c__);
  }
  v53[0] = &off_1E9806F70;
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  faiss::LinearTransform::~LinearTransform((faiss::LinearTransform *)v53);
}

void sub_1D48EF020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40)
{
  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  faiss::PCAMatrix::~PCAMatrix((faiss::PCAMatrix *)&a40);
  _Unwind_Resume(a1);
}

void faiss::ProgressiveDimIndexFactory::~ProgressiveDimIndexFactory(faiss::ProgressiveDimIndexFactory *this)
{
  JUMPOUT(0x1D82628A4);
}

void faiss::ProgressiveDimClustering::~ProgressiveDimClustering(faiss::ProgressiveDimClustering *this)
{
  faiss::ProgressiveDimClustering::~ProgressiveDimClustering(this);
  JUMPOUT(0x1D82628A4);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E9806AE8;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<faiss::ClusteringIterationStats>::__assign_with_size[abi:ne180100]<faiss::ClusteringIterationStats*,faiss::ClusteringIterationStats*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    result = std::vector<faiss::ClusteringIterationStats>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<faiss::ClusteringIterationStats>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

char *std::vector<faiss::ClusteringIterationStats>::__insert_with_size[abi:ne180100]<std::__wrap_iter<faiss::ClusteringIterationStats*>,std::__wrap_iter<faiss::ClusteringIterationStats*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void *__p;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 > 0x666666666666666)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 3);
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x333333333333333)
      v18 = 0x666666666666666;
    else
      v18 = v17;
    v39 = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>(v9, v18);
    else
      v19 = 0;
    v29 = &v19[40 * v15];
    __p = v19;
    v36 = v29;
    v38 = &v19[40 * v18];
    v30 = &v29[40 * a5];
    v31 = 40 * a5;
    do
    {
      v32 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 1);
      *((_QWORD *)v29 + 4) = *((_QWORD *)v7 + 4);
      *(_OWORD *)v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 40;
      v7 += 40;
      v31 -= 40;
    }
    while (v31);
    v37 = v30;
    v5 = (char *)std::vector<faiss::ClusteringIterationStats>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36)
      v37 = &v36[(v37 - v36 - 40) % 0x28uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    v21 = &__src[40 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[40 * a5];
    v25 = &v23[-40 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 1);
        *((_QWORD *)v26 + 4) = *((_QWORD *)v25 + 4);
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v25 += 40;
        v26 += 40;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[40 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1D48EF5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<faiss::ClusteringIterationStats>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  void *v16;
  void *v17;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 40);
      v11 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 40);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v11;
      *(_OWORD *)(v9 - 40) = v10;
      v8 -= 40;
      v9 -= 40;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v12 = a1[1];
  v13 = *(_QWORD *)(a2 + 16);
  v14 = v12 - __src;
  if (v12 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v12 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v13 + v14;
  v15 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v15;
  v16 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v16;
  v17 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void faiss::IOReader::fileno(faiss::IOReader *this)
{
  void *exception;
  _QWORD v2[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "IOReader does not support memory mapping");
  faiss::FaissException::FaissException(exception, v2, "virtual int faiss::IOReader::fileno()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 24);
}

void sub_1D48EF7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IOWriter::fileno(faiss::IOWriter *this)
{
  void *exception;
  _QWORD v2[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "IOWriter does not support memory mapping");
  faiss::FaissException::FaissException(exception, v2, "virtual int faiss::IOWriter::fileno()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 28);
}

void sub_1D48EF88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::VectorIOWriter::operator()(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  size_t v5;
  uint64_t v7;
  uint64_t *v8;
  size_t v9;

  v5 = a4 * a3;
  if (a4 * a3)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = (uint64_t *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40) - v7;
    if (v9 >= v9 + v5)
    {
      if (v9 > v9 + v5)
        *(_QWORD *)(a1 + 40) += v5;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 32), a4 * a3);
      v7 = *v8;
    }
    memcpy((void *)(v7 + v9), a2, v5);
  }
  return a4;
}

unint64_t faiss::VectorIOReader::operator()(_QWORD *a1, void *__dst, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v4 = a1[7];
  v5 = a1[4];
  v6 = a1[5] - v5;
  v7 = v6 > v4;
  v8 = v6 - v4;
  if (!v7)
    return 0;
  v9 = v8 / a3;
  if (v9 >= a4)
    v12 = a4;
  else
    v12 = v9;
  v10 = v12 * a3;
  if (v12 * a3)
  {
    memcpy(__dst, (const void *)(v5 + v4), v12 * a3);
    a1[7] += v10;
  }
  return v12;
}

uint64_t faiss::FileIOReader::FileIOReader(uint64_t this, __sFILE *a2)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1E98056E0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 32) = a2;
  *(_BYTE *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1E98056E0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 32) = a2;
  *(_BYTE *)(this + 40) = 0;
  return this;
}

faiss::FileIOReader *faiss::FileIOReader::FileIOReader(faiss::FileIOReader *this, const char *a2)
{
  FILE *v4;
  int *v6;
  char *v7;
  int v8;
  std::string *v9;
  size_t size;
  int *v11;
  char *v12;
  void *exception;
  std::string v14;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = &off_1E98056E0;
  *((_BYTE *)this + 40) = 0;
  MEMORY[0x1D82626B8]((char *)this + 8);
  v4 = fopen(a2, "rb");
  *((_QWORD *)this + 4) = v4;
  if (!v4)
  {
    memset(&v14, 0, sizeof(v14));
    v6 = __error();
    v7 = strerror(*v6);
    v8 = snprintf(0, 0, "Error: '%s' failed: could not open %s for reading: %s", "f", a2, v7);
    v9 = &v14;
    std::string::resize(&v14, v8 + 1, 0);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size = v14.__r_.__value_.__l.__size_;
      v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    v11 = __error();
    v12 = strerror(*v11);
    snprintf((char *)v9, size, "Error: '%s' failed: could not open %s for reading: %s", "f", a2, v12);
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v14, "faiss::FileIOReader::FileIOReader(const char *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 68);
  }
  *((_BYTE *)this + 40) = 1;
  return this;
}

void sub_1D48EFB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void **v18;
  void *v19;

  __cxa_free_exception(v19);
  if (a17 < 0)
    operator delete(__p);
  *(_QWORD *)v17 = &unk_1E9806D08;
  if (*(char *)(v17 + 31) < 0)
    operator delete(*v18);
  _Unwind_Resume(a1);
}

void faiss::FileIOReader::~FileIOReader(faiss::FileIOReader *this)
{
  const char *v2;
  FILE *v3;
  int *v4;
  char *v5;

  *(_QWORD *)this = &off_1E98056E0;
  if (*((_BYTE *)this + 40) && fclose(*((FILE **)this + 4)))
  {
    v2 = (char *)this + 8;
    if (*((char *)this + 31) < 0)
      v2 = *(const char **)v2;
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = __error();
    v5 = strerror(*v4);
    fprintf(v3, "file %s close error: %s", v2, v5);
  }
  *(_QWORD *)this = &unk_1E9806D08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  faiss::FileIOReader::~FileIOReader(this);
  JUMPOUT(0x1D82628A4);
}

size_t faiss::FileIOReader::operator()(uint64_t a1, void *__ptr, size_t __size, size_t __nitems)
{
  return fread(__ptr, __size, __nitems, *(FILE **)(a1 + 32));
}

uint64_t faiss::FileIOReader::fileno(FILE **this)
{
  return fileno(this[4]);
}

uint64_t faiss::FileIOWriter::FileIOWriter(uint64_t this, __sFILE *a2)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1E9805710;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 32) = a2;
  *(_BYTE *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)this = &off_1E9805710;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 32) = a2;
  *(_BYTE *)(this + 40) = 0;
  return this;
}

faiss::FileIOWriter *faiss::FileIOWriter::FileIOWriter(faiss::FileIOWriter *this, const char *a2)
{
  FILE *v4;
  int *v6;
  char *v7;
  int v8;
  std::string *v9;
  size_t size;
  int *v11;
  char *v12;
  void *exception;
  std::string v14;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = &off_1E9805710;
  *((_BYTE *)this + 40) = 0;
  MEMORY[0x1D82626B8]((char *)this + 8);
  v4 = fopen(a2, "wb");
  *((_QWORD *)this + 4) = v4;
  if (!v4)
  {
    memset(&v14, 0, sizeof(v14));
    v6 = __error();
    v7 = strerror(*v6);
    v8 = snprintf(0, 0, "Error: '%s' failed: could not open %s for writing: %s", "f", a2, v7);
    v9 = &v14;
    std::string::resize(&v14, v8 + 1, 0);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size = v14.__r_.__value_.__l.__size_;
      v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    v11 = __error();
    v12 = strerror(*v11);
    snprintf((char *)v9, size, "Error: '%s' failed: could not open %s for writing: %s", "f", a2, v12);
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v14, "faiss::FileIOWriter::FileIOWriter(const char *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 98);
  }
  *((_BYTE *)this + 40) = 1;
  return this;
}

void sub_1D48EFE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void **v18;
  void *v19;

  __cxa_free_exception(v19);
  if (a17 < 0)
    operator delete(__p);
  *(_QWORD *)v17 = &unk_1E9806D38;
  if (*(char *)(v17 + 31) < 0)
    operator delete(*v18);
  _Unwind_Resume(a1);
}

void faiss::FileIOWriter::~FileIOWriter(faiss::FileIOWriter *this)
{
  const char *v2;
  FILE *v3;
  int *v4;
  char *v5;

  *(_QWORD *)this = &off_1E9805710;
  if (*((_BYTE *)this + 40) && fclose(*((FILE **)this + 4)))
  {
    v2 = (char *)this + 8;
    if (*((char *)this + 31) < 0)
      v2 = (const char *)*((_QWORD *)this + 1);
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = __error();
    v5 = strerror(*v4);
    fprintf(v3, "file %s close error: %s", v2, v5);
  }
  *(_QWORD *)this = &unk_1E9806D38;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  faiss::FileIOWriter::~FileIOWriter(this);
  JUMPOUT(0x1D82628A4);
}

void sub_1D48EFF28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)v1 = &unk_1E9806D38;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1D48EFF88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D82628A4](v1, 0x10B3C40EC4B095CLL);
  _Unwind_Resume(a1);
}

size_t faiss::FileIOWriter::operator()(uint64_t a1, void *__ptr, size_t __size, size_t __nitems)
{
  return fwrite(__ptr, __size, __nitems, *(FILE **)(a1 + 32));
}

uint64_t faiss::FileIOWriter::fileno(FILE **this)
{
  return fileno(this[4]);
}

uint64_t faiss::BufferedIOReader::BufferedIOReader(uint64_t a1, uint64_t a2, std::vector<char>::size_type __n)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E9806038;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = __n;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  std::vector<char>::vector((std::vector<char> *)(a1 + 80), __n);
  return a1;
}

void sub_1D48F0024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)v1 = &unk_1E9806D08;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

size_t faiss::BufferedIOReader::operator()(uint64_t a1, char *__dst, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;

  v4 = a4 * a3;
  if (!(a4 * a3))
    return 0;
  v8 = *(_QWORD *)(a1 + 64);
  if (v4 >= *(_QWORD *)(a1 + 72) - v8)
    v9 = *(_QWORD *)(a1 + 72) - v8;
  else
    v9 = a4 * a3;
  memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 80) + v8), v9);
  v10 = *(_QWORD *)(a1 + 64) + v9;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = v4 - v9;
  if (v11)
  {
    v12 = &__dst[v9];
    do
    {
      if (v10 != *(_QWORD *)(a1 + 72))
        faiss::BufferedIOReader::operator()();
      *(_QWORD *)(a1 + 64) = 0;
      v13 = (***(uint64_t (****)(_QWORD, _QWORD, uint64_t, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 80), 1, *(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 72) = v13;
      if (!v13)
        break;
      *(_QWORD *)(a1 + 48) += v13;
      v10 = v11 >= v13 ? v13 : v11;
      memcpy(v12, *(const void **)(a1 + 80), v10);
      *(_QWORD *)(a1 + 64) = v10;
      v9 += v10;
      v12 += v10;
      v11 -= v10;
    }
    while (v11);
  }
  *(_QWORD *)(a1 + 56) += v9;
  return v9 / a3;
}

std::vector<char> *faiss::BufferedIOWriter::BufferedIOWriter(std::vector<char> *a1, char *a2, char *__n)
{
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  a1[1].__begin_ = 0;
  a1->__begin_ = (std::vector<char>::pointer)&off_1E9806068;
  a1[1].__end_ = a2;
  a1[1].__end_cap_.__value_ = __n;
  a1[2].__end_ = 0;
  a1[2].__end_cap_.__value_ = 0;
  std::vector<char>::vector(a1 + 3, (std::vector<char>::size_type)__n);
  return a1;
}

void sub_1D48F01A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)v1 = &unk_1E9806D38;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

size_t faiss::BufferedIOWriter::operator()(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int v16;
  std::string *v17;
  size_t size;
  void *exception;
  std::string v20;

  v4 = a4 * a3;
  if (!(a4 * a3))
    return 0;
  v8 = *(_QWORD *)(a1 + 64);
  if (v4 >= *(_QWORD *)(a1 + 40) - v8)
    v9 = *(_QWORD *)(a1 + 40) - v8;
  else
    v9 = a4 * a3;
  memcpy((void *)(*(_QWORD *)(a1 + 72) + v8), a2, v9);
  v10 = *(_QWORD *)(a1 + 64) + v9;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = v4 - v9;
  if (v11)
  {
    v12 = &a2[v9];
    do
    {
      if (v10 != *(_QWORD *)(a1 + 40))
        faiss::BufferedIOWriter::operator()();
      v13 = 0;
      do
      {
        if (v13 >= 0x989680)
          faiss::BufferedIOWriter::operator()();
        v14 = (***(uint64_t (****)(_QWORD, unint64_t, uint64_t, size_t))(a1 + 32))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 72) + v13, 1, v10 - v13);
        if (!v14)
        {
          memset(&v20, 0, sizeof(v20));
          v16 = snprintf(0, 0, "Error: '%s' failed", "written > 0");
          std::string::resize(&v20, v16 + 1, 0);
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v20;
          else
            v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
          else
            size = v20.__r_.__value_.__l.__size_;
          snprintf((char *)v17, size, "Error: '%s' failed", "written > 0");
          exception = __cxa_allocate_exception(0x20uLL);
          faiss::FaissException::FaissException(exception, &v20, "virtual size_t faiss::BufferedIOWriter::operator()(const void *, size_t, size_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 203);
        }
        v13 += v14;
        v10 = *(_QWORD *)(a1 + 40);
      }
      while (v13 != v10);
      if (v11 >= v13)
        v10 = v13;
      else
        v10 = v11;
      memcpy(*(void **)(a1 + 72), v12, v10);
      *(_QWORD *)(a1 + 64) = v10;
      v9 += v10;
      v12 += v10;
      v11 -= v10;
    }
    while (v11);
  }
  *(_QWORD *)(a1 + 56) += v9;
  return v9 / a3;
}

void sub_1D48F0398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::BufferedIOWriter::~BufferedIOWriter(faiss::BufferedIOWriter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  std::string *v7;
  size_t size;
  void *exception;
  std::string v10;

  *(_QWORD *)this = &off_1E9806068;
  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (***((uint64_t (****)(_QWORD, uint64_t, uint64_t, uint64_t))this + 4))(*((_QWORD *)this + 4), *((_QWORD *)this + 9) + v3, 1, v2 - v3);
      if (!v4)
      {
        memset(&v10, 0, sizeof(v10));
        v6 = snprintf(0, 0, "Error: '%s' failed", "written > 0");
        std::string::resize(&v10, v6 + 1, 0);
        if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v10;
        else
          v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
        if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
        else
          size = v10.__r_.__value_.__l.__size_;
        snprintf((char *)v7, size, "Error: '%s' failed", "written > 0");
        exception = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(exception, &v10, "virtual faiss::BufferedIOWriter::~BufferedIOWriter()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 224);
      }
      v3 += v4;
      v2 = *((_QWORD *)this + 8);
    }
    while (v3 != v2);
  }
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
  *(_QWORD *)this = &unk_1E9806D38;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  faiss::BufferedIOWriter::~BufferedIOWriter(this);
  JUMPOUT(0x1D82628A4);
}

void sub_1D48F0514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  void *v18;

  __cxa_free_exception(v16);
  if (a15 < 0)
    operator delete(__p);
  v18 = *(void **)(v15 + 72);
  if (v18)
  {
    *(_QWORD *)(v15 + 80) = v18;
    operator delete(v18);
  }
  *(_QWORD *)v15 = &unk_1E9806D38;
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_1D48F05AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D82628A4](v1, 0x10B3C409958CBA3);
  _Unwind_Resume(a1);
}

uint64_t faiss::fourcc(faiss *this, const char *a2)
{
  int v4;
  std::string *v5;
  size_t size;
  void *exception;
  std::string v8;

  if (strlen((const char *)this) != 4)
  {
    memset(&v8, 0, sizeof(v8));
    v4 = snprintf(0, 0, "Error: '%s' failed", "4 == strlen(sx)");
    std::string::resize(&v8, v4 + 1, 0);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v8;
    else
      v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    else
      size = v8.__r_.__value_.__l.__size_;
    snprintf((char *)v5, size, "Error: '%s' failed", "4 == strlen(sx)");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v8, "uint32_t faiss::fourcc(const char *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 230);
  }
  return *(unsigned int *)this;
}

void sub_1D48F06B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::fourcc(unsigned int *a1)
{
  int v1;
  int v3;
  std::string *v4;
  size_t size;
  void *exception;
  std::string v7;

  v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (*((_QWORD *)a1 + 1) != 4)
      goto LABEL_7;
    a1 = *(unsigned int **)a1;
  }
  else if (v1 != 4)
  {
LABEL_7:
    memset(&v7, 0, sizeof(v7));
    v3 = snprintf(0, 0, "Error: '%s' failed", "sx.length() == 4");
    std::string::resize(&v7, v3 + 1, 0);
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v7;
    else
      v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
    else
      size = v7.__r_.__value_.__l.__size_;
    snprintf((char *)v4, size, "Error: '%s' failed", "sx.length() == 4");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v7, "uint32_t faiss::fourcc(const std::string &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 236);
  }
  return *a1;
}

void sub_1D48F07D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::fourcc_inv(uint64_t this, uint64_t a2, char *a3)
{
  *(_DWORD *)a2 = this;
  *(_BYTE *)(a2 + 5) = 0;
  return this;
}

_QWORD *faiss::fourcc_inv@<X0>(faiss *this@<X0>, _QWORD *a2@<X8>)
{
  char __s[5];
  char v4;

  *(_DWORD *)__s = (_DWORD)this;
  v4 = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __s);
}

void faiss::fourcc_inv_printable(faiss *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  int v4;
  int v5;
  char v6;
  char __str[10];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = (int)this;
  v6 = 0;
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (i = 0; i != 4; ++i)
  {
    v4 = *((unsigned __int8 *)&v5 + i);
    if ((v4 - 32) > 0x5E)
    {
      snprintf(__str, 0xAuLL, "\\x%02x", *((unsigned __int8 *)&v5 + i));
      std::string::append(a2, __str);
    }
    else
    {
      std::string::push_back(a2, v4);
    }
  }
}

void sub_1D48F0900(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void faiss::VectorIOWriter::~VectorIOWriter(faiss::VectorIOWriter *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E9805F20;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E9806D38;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = &off_1E9805F20;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E9806D38;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1D82628A4);
}

void faiss::VectorIOReader::~VectorIOReader(faiss::VectorIOReader *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E9805EF0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E9806D08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = &off_1E9805EF0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E9806D08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1D82628A4);
}

void faiss::BufferedIOReader::~BufferedIOReader(faiss::BufferedIOReader *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E9806038;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E9806D08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = &off_1E9806038;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E9806D08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1D82628A4);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1D48F0BB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void faiss::BufferedIOReader::operator()()
{
  __assert_rtn("operator()", "io.cpp", 153, "b0 == b1");
}

void faiss::BufferedIOWriter::operator()()
{
  __assert_rtn("operator()", "io.cpp", 201, "ofs < 10000000");
}

{
  __assert_rtn("operator()", "io.cpp", 197, "b0 == bsz");
}

_QWORD *faiss::IndexIVFFlat::IndexIVFFlat(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v5;
  _QWORD *result;

  v5 = 4 * a3;
  result = (_QWORD *)faiss::IndexIVF::IndexIVF(a1, a2, a3, a4, 4 * a3, a5);
  *result = &off_1E9805778;
  result[16] = v5;
  return result;
}

{
  uint64_t v5;
  _QWORD *result;

  v5 = 4 * a3;
  result = (_QWORD *)faiss::IndexIVF::IndexIVF(a1, a2, a3, a4, 4 * a3, a5);
  *result = &off_1E9805778;
  result[16] = v5;
  return result;
}

void faiss::IndexIVFFlat::add_core(faiss::IndexIVFFlat *this, unint64_t a2, const float *a3, const uint64_t *a4, const uint64_t *a5)
{
  int v8;
  std::string *v9;
  size_t size;
  void *exception;
  int v12;
  std::string *v13;
  size_t v14;
  void *v15;
  std::string v16;

  if (!*((_BYTE *)this + 25))
  {
    memset(&v16, 0, sizeof(v16));
    v8 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
    std::string::resize(&v16, v8 + 1, 0);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v16;
    else
      v9 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      size = v16.__r_.__value_.__l.__size_;
    snprintf((char *)v9, size, "Error: '%s' failed", "is_trained");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v16, "virtual void faiss::IndexIVFFlat::add_core(idx_t, const float *, const int64_t *, const int64_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 48);
  }
  if (!a5)
  {
    memset(&v16, 0, sizeof(v16));
    v12 = snprintf(0, 0, "Error: '%s' failed", "coarse_idx");
    std::string::resize(&v16, v12 + 1, 0);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v16;
    else
      v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      v14 = v16.__r_.__value_.__l.__size_;
    snprintf((char *)v13, v14, "Error: '%s' failed", "coarse_idx");
    v15 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v15, &v16, "virtual void faiss::IndexIVFFlat::add_core(idx_t, const float *, const int64_t *, const int64_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 49);
  }
  if (!*((_QWORD *)this + 14))
    faiss::IndexIVFFlat::add_core();
  faiss::DirectMap::check_can_add((_DWORD *)this + 40, a4);
  faiss::DirectMapAdd::DirectMapAdd((faiss::DirectMapAdd *)&v16, (faiss::IndexIVFFlat *)((char *)this + 160), a2, a4);
  if (*((_BYTE *)this + 24))
    printf("IndexIVFFlat::add_core: added %lld / %lld vectors\n", 0, a2);
  *((_QWORD *)this + 2) += a2;
  faiss::DirectMapAdd::~DirectMapAdd((faiss::DirectMapAdd *)&v16);
}

void sub_1D48F0EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFFlat::encode_vectors(faiss::IndexIVFFlat *this, uint64_t a2, const float *__src, const uint64_t *a4, unsigned __int8 *__dst, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  const float *v17;

  if ((a6 & 1) != 0)
  {
    v11 = faiss::Level1Quantizer::coarse_code_size((faiss::IndexIVFFlat *)((char *)this + 40));
    if (a2)
    {
      v12 = v11;
      v13 = 0;
      do
      {
        v14 = a4[v13];
        v15 = *((_QWORD *)this + 16) + v12;
        v16 = &__dst[v15 * v13];
        if (v14 < 0)
        {
          bzero(&__dst[v15 * v13], *((_QWORD *)this + 16) + v12);
        }
        else
        {
          v17 = &__src[v13 * *((int *)this + 2)];
          faiss::Level1Quantizer::encode_listno((uint64_t)this + 40, v14, v16);
          memcpy(&v16[v12], v17, *((_QWORD *)this + 16));
        }
        ++v13;
      }
      while (a2 != v13);
    }
  }
  else
  {
    memcpy(__dst, __src, *((_QWORD *)this + 16) * a2);
  }
}

uint64_t faiss::IndexIVFFlat::sa_decode(faiss::IndexIVFFlat *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  const unsigned __int8 *v11;

  result = faiss::Level1Quantizer::coarse_code_size((faiss::IndexIVFFlat *)((char *)this + 40));
  if (a2)
  {
    v9 = result;
    v10 = 0;
    v11 = &a3[result];
    do
    {
      result = (uint64_t)memcpy(&a4[v10 * *((int *)this + 2)], &v11[(*((_QWORD *)this + 16) + v9) * v10], *((_QWORD *)this + 16));
      ++v10;
    }
    while (a2 != v10);
  }
  return result;
}

uint64_t faiss::IndexIVFFlat::get_InvertedListScanner(faiss::IndexIVFFlat *this, char a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (**v7)();
  void *exception;
  _QWORD v9[3];

  v4 = *((_DWORD *)this + 7);
  if (v4 == 1)
  {
    result = operator new();
    v6 = *((int *)this + 2);
    v7 = off_1E9805A60;
  }
  else
  {
    if (v4)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v9, "metric type not supported");
      faiss::FaissException::FaissException(exception, v9, "virtual InvertedListScanner *faiss::IndexIVFFlat::get_InvertedListScanner(BOOL) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 208);
    }
    result = operator new();
    v6 = *((int *)this + 2);
    v7 = off_1E9805A18;
  }
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v6;
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void sub_1D48F1138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *faiss::IndexIVFFlat::reconstruct_from_offset(faiss::IndexIVFFlat *this, uint64_t a2, uint64_t a3, float *a4)
{
  const void *v6;

  v6 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 48))(*((_QWORD *)this + 14));
  return memcpy(a4, v6, *((_QWORD *)this + 16));
}

double faiss::IndexIVFFlatDedup::IndexIVFFlatDedup(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  double result;

  v5 = 4 * a3;
  v6 = faiss::IndexIVF::IndexIVF(a1, a2, a3, a4, 4 * a3, a5);
  *(_QWORD *)(v6 + 128) = v5;
  *(_QWORD *)v6 = &off_1E9806098;
  result = 0.0;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_DWORD *)(v6 + 264) = 1065353216;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  double result;

  v5 = 4 * a3;
  v6 = faiss::IndexIVF::IndexIVF(a1, a2, a3, a4, 4 * a3, a5);
  *(_QWORD *)(v6 + 128) = v5;
  *(_QWORD *)v6 = &off_1E9806098;
  result = 0.0;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_DWORD *)(v6 + 264) = 1065353216;
  return result;
}

uint64_t faiss::IndexIVFFlatDedup::train(faiss::IndexIVFFlatDedup *this, uint64_t a2, const float *a3)
{
  const float *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v14;
  _OWORD v15[2];
  int v16;
  unint64_t *v17;

  memset(v15, 0, sizeof(v15));
  v16 = 1065353216;
  v6 = (const float *)operator new[]();
  if (a2 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = *((_DWORD *)this + 2);
    v10 = *((_QWORD *)this + 16);
    do
    {
      v14 = 0;
      v14 = faiss::hash_bytes((faiss *)&a3[v7 * v9], v10);
      if (!std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v15, &v14)|| (v17 = &v14, v11 = std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v15, &v14, (uint64_t)&std::piecewise_construct, &v17), v12 = *((int *)this + 2), v10 = *((_QWORD *)this + 16), memcmp(&v6[v11[3] * v12], &a3[v7 * v12], v10)))
      {
        v17 = &v14;
        std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v15, &v14, (uint64_t)&std::piecewise_construct, &v17)[3] = v8;
        v12 = *((int *)this + 2);
        v10 = *((_QWORD *)this + 16);
        memcpy((void *)&v6[v8 * v12], &a3[v7 * v12], v10);
        ++v8;
      }
      v9 = v12;
      ++v7;
    }
    while (a2 != v7);
  }
  if (*((_BYTE *)this + 24))
    printf("IndexIVFFlatDedup::train: train on %lld points after dedup (was %lld points)\n", v8, a2);
  faiss::IndexIVF::train(this, v8, v6);
  MEMORY[0x1D826288C](v6, 0x1000C8052888210);
  return std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)v15);
}

void sub_1D48F1408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x1D826288C](v5, 0x1000C8052888210);
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFFlatDedup::add_with_ids(faiss::IndexIVFFlatDedup *this, uint64_t a2, const float *a3, const uint64_t *a4)
{
  uint64_t v7;
  int v8;
  std::string *v9;
  size_t v10;
  void *v11;
  int v12;
  std::string *v13;
  size_t size;
  void *exception;
  std::string v16;

  if (*((_BYTE *)this + 25))
  {
    if (*((_QWORD *)this + 14))
    {
      if (!*((_DWORD *)this + 40))
      {
        v7 = operator new[]();
        (*(void (**)(_QWORD, uint64_t, const float *, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), a2, a3, v7, 1);
        if (*((_BYTE *)this + 24))
          printf("IndexIVFFlat::add_with_ids: added %lld / %lld vectors (out of which %lld are duplicates)\n", 0, a2, 0);
        JUMPOUT(0x1D826288CLL);
      }
      memset(&v16, 0, sizeof(v16));
      v12 = snprintf(0, 0, "Error: '%s' failed: IVFFlatDedup not implemented with direct_map", "direct_map.no()");
      std::string::resize(&v16, v12 + 1, 0);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v16;
      else
        v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      else
        size = v16.__r_.__value_.__l.__size_;
      snprintf((char *)v13, size, "Error: '%s' failed: IVFFlatDedup not implemented with direct_map", "direct_map.no()");
      exception = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v16, "virtual void faiss::IndexIVFFlatDedup::add_with_ids(idx_t, const float *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 264);
    }
    faiss::IndexIVFFlatDedup::add_with_ids();
  }
  memset(&v16, 0, sizeof(v16));
  v8 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
  std::string::resize(&v16, v8 + 1, 0);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v16;
  else
    v9 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    v10 = v16.__r_.__value_.__l.__size_;
  snprintf((char *)v9, v10, "Error: '%s' failed", "is_trained");
  v11 = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(v11, &v16, "virtual void faiss::IndexIVFFlatDedup::add_with_ids(idx_t, const float *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 261);
}

void sub_1D48F1660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFFlatDedup::search_preassigned(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, float *a6, float *a7, uint64_t *a8, char a9, uint64_t a10)
{
  uint64_t *v10;
  float *v11;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  std::string::size_type v27;
  _DWORD *v28;
  int v29;
  std::string *v30;
  size_t size;
  void *exception;
  float *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  void *__p[3];
  std::string v41;

  if (a9)
  {
    memset(&v41, 0, sizeof(v41));
    v29 = snprintf(0, 0, "Error: '%s' failed: store_pairs not supported in IVFDedup", "!store_pairs");
    std::string::resize(&v41, v29 + 1, 0);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v41;
    else
      v30 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    else
      size = v41.__r_.__value_.__l.__size_;
    snprintf((char *)v30, size, "Error: '%s' failed: store_pairs not supported in IVFDedup", "!store_pairs");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v41, "virtual void faiss::IndexIVFFlatDedup::search_preassigned(idx_t, const float *, idx_t, const idx_t *, const float *, float *, idx_t *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 342);
  }
  v10 = a8;
  v11 = a7;
  faiss::IndexIVF::search_preassigned(a1, a2, a3, a4, a5, a6, a7, a8, 0, a10, 0);
  std::vector<long long>::vector(&v41, a4);
  std::vector<float>::vector(__p, a4);
  if (a2 >= 1)
  {
    v38 = v11;
    v39 = 0;
    v15 = (_QWORD *)(a1 + 232);
    v36 = 8 * a4;
    v37 = 4 * a4;
    v16 = v10;
    v33 = v11;
    v34 = v10;
    v35 = a2;
    do
    {
      if (a4 >= 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = &v10[v39 * a4];
        v21 = &v11[v39 * a4];
        while (!std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v15, (unint64_t *)&v16[v18]))
        {
          --v19;
          ++v18;
          ++v17;
          if (!(a4 + v19))
            goto LABEL_18;
        }
        v22 = -v19;
        v23 = v22;
        if (v22 >= a4)
        {
          v27 = v41.__r_.__value_.__r.__words[0];
          v28 = __p[0];
        }
        else
        {
          do
          {
            v24 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__equal_range_multi<long long>(v15, (unint64_t *)&v20[v22]);
            v26 = v21[v22];
            v27 = v41.__r_.__value_.__r.__words[0];
            *(_QWORD *)(v41.__r_.__value_.__r.__words[0] + 8 * v23) = v20[v22];
            v28 = __p[0];
            *((float *)__p[0] + v23++) = v26;
            if (v23 < a4)
            {
              while (v24 != v25)
              {
                *(_QWORD *)(v27 + 8 * v23) = v24[3];
                *(float *)&v28[v23++] = v26;
                if (v23 >= a4)
                  break;
                v24 = (_QWORD *)*v24;
              }
            }
            ++v22;
          }
          while (v23 < a4);
        }
        memcpy(&v16[v18], (const void *)(v27 + v18 * 8), v36 - v18 * 8);
        memcpy(&v38[v17], &v28[v17], v37 - v17 * 4);
        v11 = v33;
        v10 = v34;
      }
LABEL_18:
      v38 = (float *)((char *)v38 + v37);
      ++v39;
      v16 = (uint64_t *)((char *)v16 + v36);
    }
    while (v39 != v35);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v41.__r_.__value_.__r.__words[0])
  {
    v41.__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_1D48F1950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  __cxa_free_exception(v27);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFFlatDedup::remove_ids(uint64_t a1, unsigned int (***a2)(_QWORD, uint64_t))
{
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int (*v7)(_QWORD, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 *v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  std::string *v44;
  size_t size;
  void *exception;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  std::string v50;
  void *__p;
  char *v52;
  char *v53;
  _OWORD v54[2];
  int v55;
  unint64_t *v56;

  memset(v54, 0, sizeof(v54));
  v55 = 1065353216;
  __p = 0;
  v52 = 0;
  v53 = 0;
  v4 = *(_QWORD **)(a1 + 248);
  if (v4)
  {
    while (1)
    {
      v5 = (**a2)(a2, v4[2]);
      v6 = v4[3];
      v7 = **a2;
      if (v5)
        break;
      if (v7(a2, v6))
      {
LABEL_26:
        v4 = (_QWORD *)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::erase((_QWORD *)(a1 + 232), v4);
        if (!v4)
        {
LABEL_27:
          v21 = (__int128 *)__p;
          v22 = (__int128 *)v52;
          while (v21 != v22)
            std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<std::pair<long long,long long> &>((_QWORD *)(a1 + 232), v21++);
          goto LABEL_30;
        }
      }
      else
      {
        v4 = (_QWORD *)*v4;
        if (!v4)
          goto LABEL_27;
      }
    }
    if ((((uint64_t (*)(_QWORD, uint64_t))v7)(a2, v6) & 1) == 0)
    {
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v54, v4 + 2))
      {
        v50.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 2);
        v8 = std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v54, v4 + 2, (uint64_t)&std::piecewise_construct, &v50)[3];
        v9 = v4[3];
        v10 = v52;
        if (v52 >= v53)
        {
          v13 = (char *)__p;
          v14 = (v52 - (_BYTE *)__p) >> 4;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v16 = v53 - (_BYTE *)__p;
          if ((v53 - (_BYTE *)__p) >> 3 > v15)
            v15 = v16 >> 3;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
            v17 = 0xFFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::BufferList::Buffer>>((uint64_t)&v53, v17);
            v13 = (char *)__p;
            v10 = v52;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[16 * v14];
          *(_QWORD *)v19 = v8;
          *((_QWORD *)v19 + 1) = v9;
          v20 = v19;
          if (v10 != v13)
          {
            do
            {
              *((_OWORD *)v20 - 1) = *((_OWORD *)v10 - 1);
              v20 -= 16;
              v10 -= 16;
            }
            while (v10 != v13);
            v13 = (char *)__p;
          }
          v11 = v19 + 16;
          __p = v20;
          v52 = v19 + 16;
          v53 = &v18[16 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_QWORD *)v52 = v8;
          *((_QWORD *)v10 + 1) = v9;
          v11 = v10 + 16;
        }
        v52 = v11;
      }
      else
      {
        v12 = v4[3];
        v50.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 2);
        std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v54, v4 + 2, (uint64_t)&std::piecewise_construct, &v50)[3] = v12;
      }
    }
    goto LABEL_26;
  }
LABEL_30:
  if (*(_DWORD *)(a1 + 160))
  {
    memset(&v50, 0, sizeof(v50));
    v43 = snprintf(0, 0, "Error: '%s' failed: direct map remove not implemented", "direct_map.no()");
    std::string::resize(&v50, v43 + 1, 0);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v50;
    else
      v44 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    else
      size = v50.__r_.__value_.__l.__size_;
    snprintf((char *)v44, size, "Error: '%s' failed: direct map remove not implemented", "direct_map.no()");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v50, "virtual size_t faiss::IndexIVFFlatDedup::remove_ids(const IDSelector &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 416);
  }
  std::vector<long long>::vector(&v50, *(_QWORD *)(a1 + 48));
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_49;
  v23 = 0;
  do
  {
    v24 = (***(uint64_t (****)(_QWORD, unint64_t))(a1 + 112))(*(_QWORD *)(a1 + 112), v23);
    v25 = *(_QWORD *)(a1 + 112);
    v26 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
    v47 = v24;
    v48 = v25;
    if (v24 >= 1)
    {
      v27 = 0;
      do
      {
        if ((**a2)(a2, *(_QWORD *)(v26 + 8 * v27)))
        {
          v56 = *(unint64_t **)(v26 + 8 * v27);
          if (!std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v54, (unint64_t *)&v56))
          {
            --v24;
            v32 = *(_QWORD *)(a1 + 112);
            v33 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v32, v23, v24);
            v34 = *(_QWORD *)(a1 + 112);
            v35 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v23, v24);
            (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 80))(v32, v23, v27, v33, v35);
            (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v34 + 24))(v34, v23, v35);
            continue;
          }
          v28 = *(_QWORD *)(a1 + 112);
          v49 = *(_QWORD *)(v26 + 8 * v27);
          v56 = &v49;
          v29 = std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v54, &v49, (uint64_t)&std::piecewise_construct, &v56)[3];
          v30 = *(_QWORD *)(a1 + 112);
          v31 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v30 + 48))(v30, v23, v27);
          (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 80))(v28, v23, v27, v29, v31);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v30 + 24))(v30, v23, v31);
        }
        ++v27;
      }
      while (v27 < v24);
    }
    *(_QWORD *)(v50.__r_.__value_.__r.__words[0] + 8 * v23) = v47 - v24;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v48 + 32))(v48, v23++, v26);
    v36 = *(_QWORD *)(a1 + 48);
  }
  while (v23 < v36);
  if (!v36)
  {
LABEL_49:
    v38 = 0;
    goto LABEL_50;
  }
  v37 = 0;
  v38 = 0;
  do
  {
    v39 = *(_QWORD *)(v50.__r_.__value_.__r.__words[0] + 8 * v37);
    if (v39 >= 1)
    {
      v40 = *(_QWORD *)(a1 + 112);
      v41 = (**(uint64_t (***)(uint64_t, unint64_t))v40)(v40, v37);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v40 + 96))(v40, v37, v41 - *(_QWORD *)(v50.__r_.__value_.__r.__words[0] + 8 * v37));
      v38 += v39;
      v36 = *(_QWORD *)(a1 + 48);
    }
    ++v37;
  }
  while (v37 < v36);
LABEL_50:
  *(_QWORD *)(a1 + 16) -= v38;
  if (v50.__r_.__value_.__r.__words[0])
  {
    v50.__r_.__value_.__l.__size_ = v50.__r_.__value_.__r.__words[0];
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)v54);
  return v38;
}

void sub_1D48F1F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  __cxa_free_exception(v22);
  if (a18 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFFlatDedup::range_search(faiss::IndexIVFFlatDedup *this, uint64_t a2, const float *a3, float a4, faiss::RangeSearchResult *a5)
{
  void *exception;
  _QWORD v6[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "not implemented");
  faiss::FaissException::FaissException(exception, v6, "virtual void faiss::IndexIVFFlatDedup::range_search(idx_t, const float *, float, RangeSearchResult *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 464);
}

void sub_1D48F2090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexIVFFlatDedup::update_vectors(faiss::IndexIVFFlatDedup *this, int a2, const uint64_t *a3, const float *a4)
{
  void *exception;
  _QWORD v5[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "not implemented");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::IndexIVFFlatDedup::update_vectors(int, const idx_t *, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 468);
}

void sub_1D48F213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexIVFFlatDedup::reconstruct_from_offset(faiss::IndexIVFFlatDedup *this, uint64_t a2, uint64_t a3, float *a4)
{
  void *exception;
  _QWORD v5[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "not implemented");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::IndexIVFFlatDedup::reconstruct_from_offset(int64_t, int64_t, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 473);
}

void sub_1D48F21E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexIVFFlat::~IndexIVFFlat(faiss::IndexIVFFlat *this)
{
  faiss::IndexIVF::~IndexIVF(this);
  JUMPOUT(0x1D82628A4);
}

void faiss::IndexIVFFlatDedup::~IndexIVFFlatDedup(faiss::IndexIVFFlatDedup *this)
{
  *(_QWORD *)this = &off_1E9806098;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)this + 232);
  faiss::IndexIVF::~IndexIVF(this);
}

{
  *(_QWORD *)this = &off_1E9806098;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)this + 232);
  faiss::IndexIVF::~IndexIVF(this);
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::set_list(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

float faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::distance_to_code(uint64_t a1, const float *a2)
{
  return faiss::fvec_inner_product(*(faiss **)(a1 + 24), a2, *(_QWORD *)(a1 + 8));
}

uint64_t faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::scan_codes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;

  if (!a2)
    return 0;
  v12 = 0;
  v13 = 0;
  v14 = a5 - 1;
  v15 = a6 - 8;
  v16 = a7 + 1;
  do
  {
    v17 = faiss::fvec_inner_product(*(faiss **)(a1 + 24), (const float *)(a3 + 4 * *(_QWORD *)(a1 + 8) * v12), *(_QWORD *)(a1 + 8));
    if (*a5 >= v17)
      goto LABEL_19;
    if (*(_BYTE *)(a1 + 16))
      v18 = v12 | (*(_QWORD *)(a1 + 32) << 32);
    else
      v18 = *(_QWORD *)(a4 + 8 * v12);
    if (a7 < 2)
    {
      v19 = 1;
      goto LABEL_18;
    }
    v20 = 3;
    v21 = 2;
    v22 = 1;
    while (1)
    {
      v23 = v14[v21];
      if (v20 != v16)
      {
        v24 = v14[v20];
        if (v23 >= v24)
          break;
      }
      if (v23 > v17)
        goto LABEL_17;
LABEL_15:
      v19 = v21;
      v14[v22] = v23;
      *(_QWORD *)(v15 + 8 * v22) = *(_QWORD *)(v15 + 8 * v21);
      v21 *= 2;
      v20 = (2 * v19) | 1;
      v22 = v19;
      if (v21 > a7)
        goto LABEL_18;
    }
    v23 = v14[v20];
    v21 = v20;
    if (v24 <= v17)
      goto LABEL_15;
LABEL_17:
    v19 = v22;
LABEL_18:
    v14[v19] = v17;
    *(_QWORD *)(v15 + 8 * v19) = v18;
    ++v13;
LABEL_19:
    ++v12;
  }
  while (v12 != a2);
  return v13;
}

void faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::scan_codes_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, faiss::RangeQueryResult *a5, float a6)
{
  uint64_t i;
  float v13;
  uint64_t v14;

  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v13 = faiss::fvec_inner_product(*(faiss **)(a1 + 24), (const float *)(a3 + 4 * *(_QWORD *)(a1 + 8) * i), *(_QWORD *)(a1 + 8));
      if (v13 > a6)
      {
        if (*(_BYTE *)(a1 + 16))
          v14 = i | (*(_QWORD *)(a1 + 32) << 32);
        else
          v14 = *(_QWORD *)(a4 + 8 * i);
        faiss::RangeQueryResult::add(a5, v13, v14);
      }
    }
  }
}

void faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::~IVFFlatScanner()
{
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::set_query(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::set_list(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

float faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::distance_to_code(uint64_t a1, const float *a2)
{
  return faiss::fvec_L2sqr(*(faiss **)(a1 + 24), a2, *(_QWORD *)(a1 + 8));
}

uint64_t faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::scan_codes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;

  if (!a2)
    return 0;
  v12 = 0;
  v13 = 0;
  v14 = a5 - 1;
  v15 = a6 - 8;
  v16 = a7 + 1;
  do
  {
    v17 = faiss::fvec_L2sqr(*(faiss **)(a1 + 24), (const float *)(a3 + 4 * *(_QWORD *)(a1 + 8) * v12), *(_QWORD *)(a1 + 8));
    if (*a5 <= v17)
      goto LABEL_19;
    if (*(_BYTE *)(a1 + 16))
      v18 = v12 | (*(_QWORD *)(a1 + 32) << 32);
    else
      v18 = *(_QWORD *)(a4 + 8 * v12);
    if (a7 < 2)
    {
      v19 = 1;
      goto LABEL_18;
    }
    v20 = 3;
    v21 = 2;
    v22 = 1;
    while (1)
    {
      v23 = v14[v21];
      if (v20 != v16)
      {
        v24 = v14[v20];
        if (v23 <= v24)
          break;
      }
      if (v23 < v17)
        goto LABEL_17;
LABEL_15:
      v19 = v21;
      v14[v22] = v23;
      *(_QWORD *)(v15 + 8 * v22) = *(_QWORD *)(v15 + 8 * v21);
      v21 *= 2;
      v20 = (2 * v19) | 1;
      v22 = v19;
      if (v21 > a7)
        goto LABEL_18;
    }
    v23 = v14[v20];
    v21 = v20;
    if (v24 >= v17)
      goto LABEL_15;
LABEL_17:
    v19 = v22;
LABEL_18:
    v14[v19] = v17;
    *(_QWORD *)(v15 + 8 * v19) = v18;
    ++v13;
LABEL_19:
    ++v12;
  }
  while (v12 != a2);
  return v13;
}

void faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::scan_codes_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, faiss::RangeQueryResult *a5, float a6)
{
  uint64_t i;
  float v13;
  uint64_t v14;

  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v13 = faiss::fvec_L2sqr(*(faiss **)(a1 + 24), (const float *)(a3 + 4 * *(_QWORD *)(a1 + 8) * i), *(_QWORD *)(a1 + 8));
      if (v13 < a6)
      {
        if (*(_BYTE *)(a1 + 16))
          v14 = i | (*(_QWORD *)(a1 + 32) << 32);
        else
          v14 = *(_QWORD *)(a4 + 8 * i);
        faiss::RangeQueryResult::add(a5, v13, v14);
      }
    }
  }
}

void faiss::`anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::~IVFFlatScanner()
{
  JUMPOUT(0x1D82628A4);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1D48F2904(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<std::pair<long long,long long> &>(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 v5;
  _QWORD *inserted;

  v4 = operator new(0x20uLL);
  *v4 = 0;
  v5 = *a2;
  *((_OWORD *)v4 + 1) = *a2;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1D48F2980(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__equal_range_multi<long long>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a1, a2);
  if (result)
  {
    v4 = result;
    do
      v4 = (_QWORD *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void faiss::IndexIVFFlat::add_core()
{
  __assert_rtn("add_core", "IndexIVFFlat.cpp", 50, "invlists");
}

void faiss::IndexIVFFlatDedup::add_with_ids()
{
  __assert_rtn("add_with_ids", "IndexIVFFlat.cpp", 262, "invlists");
}

void faiss::Index::range_search(faiss::Index *this, uint64_t a2, const float *a3, float a4, faiss::RangeSearchResult *a5)
{
  void *exception;
  _QWORD v6[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "range search not implemented");
  faiss::FaissException::FaissException(exception, v6, "virtual void faiss::Index::range_search(idx_t, const float *, float, RangeSearchResult *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 27);
}

void sub_1D48F30AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::assign(faiss::Index *this, uint64_t a2, const float *a3, uint64_t *a4, uint64_t a5)
{
  void *__p[3];

  std::vector<float>::vector(__p, a5 * a2);
  (*(void (**)(faiss::Index *, uint64_t, const float *, uint64_t, void *, uint64_t *))(*(_QWORD *)this + 40))(this, a2, a3, a5, __p[0], a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D48F3168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void faiss::Index::add_with_ids(faiss::Index *this, uint64_t a2, const float *a3, const uint64_t *a4)
{
  void *exception;
  _QWORD v5[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "add_with_ids not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::Index::add_with_ids(idx_t, const float *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 39);
}

void sub_1D48F31F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::remove_ids()
{
  void *exception;
  _QWORD v1[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v1, "remove_ids not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v1, "virtual size_t faiss::Index::remove_ids(const IDSelector &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 43);
}

void sub_1D48F32A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::reconstruct(faiss::Index *this, uint64_t a2, float *a3)
{
  void *exception;
  _QWORD v4[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, "reconstruct not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v4, "virtual void faiss::Index::reconstruct(idx_t, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 48);
}

void sub_1D48F3350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

int *faiss::Index::reconstruct_n(int *this, uint64_t a2, uint64_t a3, float *a4)
{
  int *v7;
  uint64_t i;

  if (a3 >= 1)
  {
    v7 = this;
    for (i = 0; i != a3; ++i)
      this = (int *)(*(uint64_t (**)(int *, uint64_t, float *))(*(_QWORD *)v7 + 80))(v7, a2 + i, &a4[i * v7[2]]);
  }
  return this;
}

void *faiss::Index::search_and_reconstruct(faiss::Index *this, uint64_t a2, const float *a3, uint64_t a4, float *a5, uint64_t *a6, float *a7)
{
  void *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  size_t size;
  void *exception;
  std::string v21;

  if (a4 <= 0)
  {
    memset(&v21, 0, sizeof(v21));
    v17 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize(&v21, v17 + 1, 0);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v21;
    else
      v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      size = v21.__r_.__value_.__l.__size_;
    snprintf((char *)v18, size, "Error: '%s' failed", "k > 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v21, "virtual void faiss::Index::search_and_reconstruct(idx_t, const float *, idx_t, float *, idx_t *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 64);
  }
  result = (void *)(*(uint64_t (**)(faiss::Index *, uint64_t, const float *))(*(_QWORD *)this + 40))(this, a2, a3);
  if (a2 >= 1)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v13;
      v16 = a4;
      do
      {
        if (a6[v15] < 0)
          result = memset(&a7[v15 * *((int *)this + 2)], 255, 4 * *((int *)this + 2));
        else
          result = (void *)(*(uint64_t (**)(faiss::Index *))(*(_QWORD *)this + 80))(this);
        ++v15;
        --v16;
      }
      while (v16);
      ++v14;
      v13 += a4;
    }
    while (v14 != a2);
  }
  return result;
}

void sub_1D48F357C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float faiss::Index::compute_residual(faiss::Index *this, float *a2, float *a3, uint64_t a4)
{
  float result;
  uint64_t v8;
  float v9;

  (*(void (**)(faiss::Index *, uint64_t))(*(_QWORD *)this + 80))(this, a4);
  v8 = *((int *)this + 2);
  if ((_DWORD)v8)
  {
    do
    {
      v9 = *a2++;
      result = v9 - *a3;
      *a3++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

int *faiss::Index::compute_residual_n(int *this, uint64_t a2, const float *a3, float *a4, const uint64_t *a5)
{
  int *v9;
  uint64_t i;

  if (a2 >= 1)
  {
    v9 = this;
    for (i = 0; i != a2; ++i)
      this = (int *)(*(uint64_t (**)(int *, const float *, float *, const uint64_t))(*(_QWORD *)v9 + 104))(v9, &a3[i * v9[2]], &a4[i * v9[2]], a5[i]);
  }
  return this;
}

void faiss::Index::sa_code_size(faiss::Index *this)
{
  void *exception;
  _QWORD v2[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "standalone codec not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v2, "virtual size_t faiss::Index::sa_code_size() const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 101);
}

void sub_1D48F36F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::sa_encode(faiss::Index *this, uint64_t a2, const float *a3, unsigned __int8 *a4)
{
  void *exception;
  _QWORD v5[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "standalone codec not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::Index::sa_encode(idx_t, const float *, uint8_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 105);
}

void sub_1D48F379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::sa_decode(faiss::Index *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  void *exception;
  _QWORD v5[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "standalone codec not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::Index::sa_decode(idx_t, const uint8_t *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 109);
}

void sub_1D48F3848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *faiss::Index::get_distance_computer(faiss::Index *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *exception;
  _QWORD v6[3];

  if (*((_DWORD *)this + 7) != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "get_distance_computer() not implemented");
    faiss::FaissException::FaissException(exception, v6, "virtual DistanceComputer *faiss::Index::get_distance_computer() const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 148);
  }
  v2 = (_QWORD *)operator new();
  v2[3] = 0;
  v2[4] = 0;
  v2[5] = 0;
  v3 = *((int *)this + 2);
  *v2 = &off_1E9805D00;
  v2[1] = v3;
  v2[2] = this;
  std::vector<float>::resize((uint64_t)(v2 + 3), 2 * v3);
  return v2;
}

void sub_1D48F3964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::`anonymous namespace'::GenericDistanceComputer::set_query(uint64_t this, const float *a2)
{
  *(_QWORD *)(this + 48) = a2;
  return this;
}

float faiss::`anonymous namespace'::GenericDistanceComputer::operator()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 24));
  return faiss::fvec_L2sqr(*(faiss **)(a1 + 48), *(const float **)(a1 + 24), *(_QWORD *)(a1 + 8));
}

float faiss::`anonymous namespace'::GenericDistanceComputer::symmetric_dis(faiss::_anonymous_namespace_::GenericDistanceComputer *this, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2), a2, *((_QWORD *)this + 3));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2), a3, *((_QWORD *)this + 3) + 4 * *((_QWORD *)this + 1));
  return faiss::fvec_L2sqr((faiss *)(*((_QWORD *)this + 3) + 4 * *((_QWORD *)this + 1)), *((const float **)this + 3), *((_QWORD *)this + 1));
}

void faiss::`anonymous namespace'::GenericDistanceComputer::~GenericDistanceComputer(faiss::_anonymous_namespace_::GenericDistanceComputer *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E9805D00;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E9805D00;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::IndexIVFPQ::IndexIVFPQ(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int a7)
{
  _QWORD *v11;
  uint64_t v12;
  int v14;
  std::string *v15;
  size_t size;
  void *exception;
  std::string v18;

  v11 = (_QWORD *)faiss::IndexIVF::IndexIVF(a1, a2, a3, a4, 0, a7);
  *v11 = &off_1E9805298;
  faiss::ProductQuantizer::ProductQuantizer((faiss::ProductQuantizer *)(v11 + 30), a3, a5, a6);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  if (a6 >= 9)
  {
    memset(&v18, 0, sizeof(v18));
    v14 = snprintf(0, 0, "Error: '%s' failed", "nbits_per_idx <= 8");
    std::string::resize(&v18, v14 + 1, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v18;
    else
      v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    snprintf((char *)v15, size, "Error: '%s' failed", "nbits_per_idx <= 8");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v18, "faiss::IndexIVFPQ::IndexIVFPQ(Index *, size_t, size_t, size_t, size_t, MetricType)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 49);
  }
  v12 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(*(_QWORD *)(a1 + 112) + 16) = v12;
  *(_BYTE *)(a1 + 25) = 0;
  *(_BYTE *)(a1 + 232) = 1;
  *(_BYTE *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  return a1;
}

void sub_1D48F3C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;
  faiss::ProductQuantizer *v16;
  void *v17;

  __cxa_free_exception(v17);
  if (a15 < 0)
    operator delete(__p);
  free(v15[53]);
  faiss::ProductQuantizer::~ProductQuantizer(v16);
  faiss::IndexIVF::~IndexIVF((faiss::IndexIVF *)v15);
  _Unwind_Resume(a1);
}

void faiss::ProductQuantizer::~ProductQuantizer(faiss::ProductQuantizer *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
}

void faiss::IndexIVFPQ::train_residual(faiss::IndexIVFPQ *this, int *a2, const float *a3)
{
  faiss::IndexIVFPQ::train_residual_o(this, a2, a3, 0);
}

void faiss::IndexIVFPQ::train_residual_o(faiss::IndexIVFPQ *this, int *a2, const float *a3, float *a4)
{
  const float *v7;
  const float *v8;
  const float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  char v13;
  faiss::PolysemousTraining *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float v23;
  _BYTE v24[64];
  void *__p;
  char v26;
  uint64_t v27;

  v27 = (uint64_t)a2;
  v7 = (const float *)faiss::fvecs_maybe_subsample((faiss *)*((int *)this + 2), (int **)&v27, (unint64_t *)(*((_QWORD *)this + 35) * *((int *)this + 79)), (uint64_t)a3, (const float *)*((unsigned __int8 *)this + 24), *((_DWORD *)this + 80));
  v8 = v7;
  if (v7 == a3)
    v9 = 0;
  else
    v9 = v7;
  if (*((_BYTE *)this + 232))
  {
    if (*((_BYTE *)this + 24))
      puts("computing residuals");
    v10 = operator new[]();
    (*(void (**)(_QWORD, uint64_t, const float *, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), v27, v8, v10, 1);
    v11 = operator new[]();
    if (v27 >= 1)
    {
      for (i = 0; i < v27; ++i)
        (*(void (**)(_QWORD, const float *, uint64_t, _QWORD))(**((_QWORD **)this + 5) + 104))(*((_QWORD *)this + 5), &v8[i * *((int *)this + 2)], v11 + 4 * i * *((int *)this + 2), *(_QWORD *)(v10 + 8 * i));
    }
    MEMORY[0x1D826288C](v10, 0x1000C8000313F17);
    v8 = (const float *)v11;
  }
  else
  {
    v11 = 0;
  }
  v13 = *((_BYTE *)this + 24);
  if (v13)
  {
    printf("training %zdx%zd product quantizer on %lld vectors in %dD\n", *((_QWORD *)this + 31), *((_QWORD *)this + 35), v27, *((_DWORD *)this + 2));
    v13 = *((_BYTE *)this + 24);
  }
  *((_BYTE *)this + 288) = v13;
  faiss::ProductQuantizer::train((faiss::IndexIVFPQ *)((char *)this + 240), v27, v8);
  if (!*((_BYTE *)this + 392))
    goto LABEL_21;
  if (*((_BYTE *)this + 24))
    puts("doing polysemous training for PQ");
  faiss::PolysemousTraining::PolysemousTraining((faiss::PolysemousTraining *)v24);
  v14 = *((_QWORD *)this + 50) ? (faiss::PolysemousTraining *)*((_QWORD *)this + 50) : (faiss::PolysemousTraining *)v24;
  faiss::PolysemousTraining::optimize_pq_for_hamming(v14, (faiss::IndexIVFPQ *)((char *)this + 240), v27, v8);
  if (v26 < 0)
  {
    operator delete(__p);
    if (!a4)
      goto LABEL_29;
  }
  else
  {
LABEL_21:
    if (!a4)
      goto LABEL_29;
  }
  v15 = (unsigned __int8 *)operator new[]();
  faiss::ProductQuantizer::compute_codes((faiss::IndexIVFPQ *)((char *)this + 240), v8, v15, v27);
  if (v27 >= 1)
  {
    v16 = 0;
    v17 = 0;
    v18 = *((_DWORD *)this + 2);
    do
    {
      v19 = v18;
      faiss::ProductQuantizer::decode((_DWORD *)this + 60, (uint64_t)&v15[*((_QWORD *)this + 34) * v17], (uint64_t)&a4[v17 * v18]);
      v18 = *((_DWORD *)this + 2);
      if (v18 >= 1)
      {
        v20 = (float *)((char *)a4 + v16 * v19);
        v21 = (float *)((char *)v8 + v16 * v19);
        v22 = *((unsigned int *)this + 2);
        do
        {
          v23 = *v21++;
          *v20 = v23 - *v20;
          ++v20;
          --v22;
        }
        while (v22);
      }
      ++v17;
      v16 += 4;
    }
    while (v17 < v27);
  }
  MEMORY[0x1D826288C](v15, 0x1000C8077774924);
LABEL_29:
  if (*((_BYTE *)this + 232))
    faiss::initialize_IVFPQ_precomputed_table((_DWORD)this + 420, *((void **)this + 5));
  if (v11)
    MEMORY[0x1D826288C](v11, 0x1000C8052888210);
  if (v9)
    MEMORY[0x1D826288C](v9, 0x1000C8052888210);
}

void sub_1D48F4038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  MEMORY[0x1D826288C](v28, 0x1000C8077774924);
  if (v27)
  {
    MEMORY[0x1D826288C](v27, 0x1000C8052888210);
    if (!v26)
LABEL_4:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_4;
  }
  MEMORY[0x1D826288C](v26, 0x1000C8052888210);
  goto LABEL_4;
}

uint64_t faiss::IndexIVFPQ::precompute_table(void **this)
{
  return faiss::initialize_IVFPQ_precomputed_table((int)this + 420, this[5]);
}

void faiss::IndexIVFPQ::encode(faiss::IndexIVFPQ *this, uint64_t a2, const float *a3, unsigned __int8 *a4)
{
  void *__p[3];

  if (*((_BYTE *)this + 232))
  {
    std::vector<float>::vector(__p, *((int *)this + 2));
    (*(void (**)(_QWORD, const float *, void *, uint64_t))(**((_QWORD **)this + 5) + 104))(*((_QWORD *)this + 5), a3, __p[0], a2);
    faiss::ProductQuantizer::compute_code((uint64_t)this + 240, (uint64_t)__p[0], a4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    faiss::ProductQuantizer::compute_code((uint64_t)this + 240, (uint64_t)a3, a4);
  }
}

void sub_1D48F41C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t faiss::IndexIVFPQ::encode_multiple(faiss::IndexIVFPQ *this, uint64_t a2, uint64_t *a3, const float *a4, unsigned __int8 *a5, int a6)
{
  if (a6)
    (*(void (**)(_QWORD, uint64_t, const float *, uint64_t *, uint64_t))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), a2, a4, a3, 1);
  return (*(uint64_t (**)(faiss::IndexIVFPQ *, uint64_t, const float *, uint64_t *, unsigned __int8 *, _QWORD))(*(_QWORD *)this + 160))(this, a2, a4, a3, a5, 0);
}

void faiss::IndexIVFPQ::decode_multiple(faiss::IndexIVFPQ *this, uint64_t a2, const uint64_t *a3, const unsigned __int8 *a4, float *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  void *__p[3];

  faiss::ProductQuantizer::decode((_DWORD *)this + 60, a4, a5, a2);
  if (*((_BYTE *)this + 232))
  {
    std::vector<float>::vector(__p, *((int *)this + 2));
    if (a2)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        (*(void (**)(_QWORD, const uint64_t, void *))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5), a3[v10], __p[0]);
        v11 = *((int *)this + 2);
        if ((_DWORD)v11)
        {
          v12 = (float *)__p[0];
          v13 = (float *)((char *)a5 + v9 * v11);
          do
          {
            v14 = *v12++;
            *v13 = v14 + *v13;
            ++v13;
            --v11;
          }
          while (v11);
        }
        ++v10;
        v9 += 4;
      }
      while (v10 != a2);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1D48F4338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t faiss::IndexIVFPQ::add_core(faiss **this, int64_t a2, const float *a3, const uint64_t *a4, const uint64_t *a5)
{
  return faiss::IndexIVFPQ::add_core_o(this, a2, a3, a4, 0, a5);
}

uint64_t faiss::IndexIVFPQ::add_core_o(faiss **this, int64_t a2, const float *a3, const uint64_t *a4, float *a5, const uint64_t *a6)
{
  const uint64_t *v6;
  const uint64_t *v8;
  const float *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const uint64_t *v15;
  const uint64_t *v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  const float *v22;
  const uint64_t *v23;
  float *v24;
  float *v25;
  const uint64_t *v26;
  uint64_t result;
  faiss *v28;
  faiss *v29;
  double v30;
  uint64_t v31;
  double v32;
  const uint64_t *v33;
  const float *v34;
  faiss *v35;
  faiss *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  const uint64_t *v40;
  float *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float *v49;
  float v50;
  __n128 v51;
  double v52;
  int v53;
  char *v54;
  size_t v55;
  void *exception;
  const float *v57;
  uint64_t v58;
  float *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  faiss::DirectMap *v63;
  const float *v65;
  char __str[16];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;

  v6 = a6;
  v8 = a4;
  v9 = a3;
  v74 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0x8000)
  {
    faiss::InterruptCallback::check((faiss::InterruptCallback *)this);
    v63 = (faiss::DirectMap *)(this + 20);
    v28 = (faiss *)faiss::DirectMap::check_can_add((_DWORD *)this + 40, v8);
    if (!*((_BYTE *)this + 25))
    {
      memset(__str, 0, sizeof(__str));
      *(_QWORD *)&v68 = 0;
      v53 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
      std::string::resize((std::string *)__str, v53 + 1, 0);
      if ((SBYTE7(v68) & 0x80u) == 0)
        v54 = __str;
      else
        v54 = *(char **)__str;
      if ((SBYTE7(v68) & 0x80u) == 0)
        v55 = BYTE7(v68);
      else
        v55 = *(_QWORD *)&__str[8];
      snprintf(v54, v55, "Error: '%s' failed", "is_trained");
      exception = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, __str, "void faiss::IndexIVFPQ::add_core_o(idx_t, const float *, const idx_t *, float *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 290);
    }
    v30 = faiss::getmillisecs(v28);
    if (v6)
    {
      v59 = (float *)v6;
      v31 = 0;
    }
    else
    {
      v31 = operator new[]();
      v29 = (faiss *)(*(uint64_t (**)(faiss *, int64_t, const float *, uint64_t, uint64_t))(*(_QWORD *)this[5] + 56))(this[5], a2, v9, v31, 1);
      v59 = (float *)v31;
    }
    v58 = v31;
    v32 = faiss::getmillisecs(v29);
    v60 = (unsigned __int8 *)operator new[]();
    if (*((_BYTE *)this + 232))
    {
      v9 = (const float *)faiss::compute_residuals(this[5], (const faiss::Index *)a2, (uint64_t)v9, v59, v33);
      v34 = v9;
    }
    else
    {
      v34 = 0;
    }
    v35 = (faiss *)faiss::ProductQuantizer::compute_codes((faiss::ProductQuantizer *)(this + 30), v9, v60, a2);
    v57 = v34;
    v37 = faiss::getmillisecs(v35);
    if (a2)
    {
      v65 = v9;
      v38 = 0;
      v39 = 0;
      v61 = 0;
      v40 = a4;
      v41 = v59;
      do
      {
        if (v40)
          v42 = v40[v39];
        else
          v42 = (unint64_t)this[2] + v39;
        v43 = *(_QWORD *)&v41[2 * v39];
        if (v43 < 0)
        {
          faiss::DirectMap::add_single_id(v63, v42, -1, 0);
          ++v61;
          if (a5)
            bzero(a5, 4 * *((int *)this + 2));
        }
        else
        {
          v44 = (uint64_t)&v60[(_QWORD)this[16] * v39];
          v45 = (*(uint64_t (**)(faiss *, _QWORD, unint64_t, uint64_t))(*(_QWORD *)this[14] + 64))(this[14], *(_QWORD *)&v41[2 * v39], v42, v44);
          if (a5)
          {
            v46 = *((int *)this + 2);
            faiss::ProductQuantizer::decode((_DWORD *)this + 60, v44, (uint64_t)&a5[v39 * v46]);
            v47 = *((unsigned int *)this + 2);
            if ((int)v47 >= 1)
            {
              v48 = (float *)((char *)a5 + v38 * v46);
              v49 = (float *)((char *)v65 + v38 * v46);
              do
              {
                v50 = *v49++;
                *v48 = v50 - *v48;
                ++v48;
                --v47;
              }
              while (v47);
            }
          }
          faiss::DirectMap::add_single_id(v63, v42, v43, v45);
          v40 = a4;
          v41 = v59;
        }
        ++v39;
        v38 += 4;
      }
      while (v39 != a2);
    }
    else
    {
      v61 = 0;
    }
    v51.n128_f64[0] = faiss::getmillisecs(v36);
    if (*((_BYTE *)this + 24))
    {
      v52 = v51.n128_f64[0];
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      *(_OWORD *)__str = 0u;
      v68 = 0u;
      if (v61)
        snprintf(__str, 0x64uLL, "(%zd vectors ignored)", v61);
      printf(" add_core times: %.3f %.3f %.3f %s\n", v32 - v30, v37 - v32, v52 - v37, __str);
    }
    this[2] = (faiss *)((char *)this[2] + a2);
    if (v57)
      MEMORY[0x1D826288C](v57, 0x1000C8052888210, v51);
    result = MEMORY[0x1D826288C](v60, 0x1000C8077774924, v51);
    if (v58)
      return MEMORY[0x1D826288C](v58, 0x1000C8000313F17);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0x8000;
    v15 = a6;
    do
    {
      v16 = v6;
      v17 = v13 + 0x8000;
      if (a2 >= v14)
        v18 = v14;
      else
        v18 = a2;
      if (v17 >= a2)
        v19 = a2;
      else
        v19 = v13 + 0x8000;
      if (*((_BYTE *)this + 24))
        printf("IndexIVFPQ::add_core_o: adding %lld:%lld / %lld\n", v13, v19, a2);
      v20 = v18 + v12;
      v21 = v13 * *((int *)this + 2);
      v22 = &a3[v21];
      if (a4)
        v23 = v8;
      else
        v23 = 0;
      v24 = &a5[v21];
      if (a5)
        v25 = v24;
      else
        v25 = 0;
      v6 = v16;
      if (v16)
        v26 = v15;
      else
        v26 = 0;
      result = faiss::IndexIVFPQ::add_core_o((faiss::IndexIVFPQ *)this, v20, v22, v23, v25, v26);
      v15 += 0x8000;
      v8 += 0x8000;
      v14 += 0x8000;
      v12 -= 0x8000;
      v13 += 0x8000;
    }
    while (v17 < a2);
  }
  return result;
}

void sub_1D48F484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  __cxa_free_exception(v28);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQ::encode_vectors(faiss::IndexIVFPQ *this, int64_t a2, const float *a3, const float *a4, unsigned __int8 *a5, int a6)
{
  const float *v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned __int8 *v16;
  unint64_t v17;

  if (!*((_BYTE *)this + 232))
  {
    result = faiss::ProductQuantizer::compute_codes((faiss::IndexIVFPQ *)((char *)this + 240), a3, a5, a2);
    if (!a6)
      return result;
    goto LABEL_7;
  }
  v11 = (const float *)faiss::compute_residuals(*((faiss **)this + 5), (const faiss::Index *)a2, (uint64_t)a3, a4, (const uint64_t *)a5);
  result = faiss::ProductQuantizer::compute_codes((faiss::IndexIVFPQ *)((char *)this + 240), v11, a5, a2);
  if (v11)
    result = MEMORY[0x1D826288C](v11, 0x1000C8052888210);
  if (a6)
  {
LABEL_7:
    result = faiss::Level1Quantizer::coarse_code_size((faiss::IndexIVFPQ *)((char *)this + 40));
    v13 = a2 - 1;
    if (a2 >= 1)
    {
      v14 = result;
      do
      {
        v15 = *((_QWORD *)this + 16);
        v16 = &a5[(v15 + v14) * v13];
        memmove(&v16[v14], &a5[v15 * v13], v15);
        result = faiss::Level1Quantizer::encode_listno((uint64_t)this + 40, *(_QWORD *)&a4[2 * v13], v16);
        v17 = v13-- + 1;
      }
      while (v17 > 1);
    }
  }
  return result;
}

void sub_1D48F4A08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x1D826288C](v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t faiss::compute_residuals(faiss *this, const faiss::Index *a2, uint64_t a3, const float *a4, const uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;

  v9 = *((int *)this + 2);
  v10 = operator new[]();
  if (a2)
  {
    v11 = 0;
    v12 = 4 * v9;
    do
    {
      v13 = *(_QWORD *)a4;
      a4 += 2;
      if (v13 < 0)
        bzero((void *)(v10 + v11), v12);
      else
        (*(void (**)(faiss *, uint64_t, uint64_t))(*(_QWORD *)this + 104))(this, a3 + v11, v10 + v11);
      v11 += v12;
      a2 = (const faiss::Index *)((char *)a2 - 1);
    }
    while (a2);
  }
  return v10;
}

void faiss::IndexIVFPQ::sa_decode(faiss::IndexIVFPQ *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  faiss::Level1Quantizer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  uint64_t v18;
  void *__p[3];

  v7 = (faiss::IndexIVFPQ *)((char *)this + 40);
  v8 = faiss::Level1Quantizer::coarse_code_size((faiss::IndexIVFPQ *)((char *)this + 40));
  std::vector<float>::vector(__p, *((int *)this + 2));
  v18 = a2;
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = &a3[(*((_QWORD *)this + 16) + v8) * v10];
      v12 = faiss::Level1Quantizer::decode_listno(v7, v11);
      v13 = *((int *)this + 2);
      faiss::ProductQuantizer::decode((_DWORD *)this + 60, (uint64_t)&v11[v8], (uint64_t)&a4[v10 * v13]);
      if (*((_BYTE *)this + 232))
      {
        (*(void (**)(_QWORD, unint64_t, void *))(**(_QWORD **)v7 + 80))(*(_QWORD *)v7, v12, __p[0]);
        v14 = *((int *)this + 2);
        if ((_DWORD)v14)
        {
          v15 = (float *)__p[0];
          v16 = (float *)((char *)a4 + v9 * v13);
          do
          {
            v17 = *v15++;
            *v16 = v17 + *v16;
            ++v16;
            --v14;
          }
          while (v14);
        }
      }
      ++v10;
      v9 += 4;
    }
    while (v10 != v18);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D48F4C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void faiss::IndexIVFPQ::reconstruct_from_offset(faiss::IndexIVFPQ *this, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  float *v10;
  float v11;
  void *__p[3];

  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 48))(*((_QWORD *)this + 14));
  if (!*((_BYTE *)this + 232))
  {
    faiss::ProductQuantizer::decode((_DWORD *)this + 60, v7, (uint64_t)a4);
    return;
  }
  std::vector<float>::vector(__p, *((int *)this + 2));
  (*(void (**)(_QWORD, uint64_t, void *))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5), a2, __p[0]);
  faiss::ProductQuantizer::decode((_DWORD *)this + 60, v7, (uint64_t)a4);
  v8 = *((unsigned int *)this + 2);
  v9 = __p[0];
  if ((int)v8 < 1)
  {
    if (!__p[0])
      return;
  }
  else
  {
    v10 = (float *)__p[0];
    do
    {
      v11 = *v10++;
      *a4 = v11 + *a4;
      ++a4;
      --v8;
    }
    while (v8);
  }
  __p[1] = v9;
  operator delete(v9);
}

void sub_1D48F4D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t faiss::IndexIVFPQ::scanListWithTable(uint64_t this, uint64_t a2, const unsigned __int8 *a3, faiss::KnnSearchResultsMetricBased *a4, float a5, const float *a6)
{
  const unsigned __int8 *v9;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  float v14;
  const float *v15;
  const unsigned __int8 *v16;
  int v17;

  if (a2)
  {
    v9 = a3;
    v11 = this;
    for (i = 0; i != a2; ++i)
    {
      if (*(_DWORD *)(v11 + 256) != 8)
        faiss::IndexIVFPQ::scanListWithTable(this, a2, (uint64_t)a3);
      v13 = *(_QWORD *)(v11 + 248);
      v14 = a5;
      if (v13)
      {
        v15 = a6;
        v14 = a5;
        v16 = v9;
        do
        {
          v17 = *v16++;
          v14 = v14 + v15[v17];
          v15 += *(_QWORD *)(v11 + 280);
          --v13;
        }
        while (v13);
      }
      v9 += *(_QWORD *)(v11 + 272);
      this = faiss::KnnSearchResultsMetricBased::add((uint64_t)a4, i, v14);
    }
  }
  return this;
}

uint64_t faiss::KnnSearchResultsMetricBased::add(uint64_t this, uint64_t a2, float a3)
{
  int v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;

  v3 = *(_DWORD *)(this + 48);
  if (v3 == 1)
  {
    v7 = *(float **)(this + 24);
    if (*v7 <= a3)
      return this;
    v8 = *(_QWORD *)(this + 8);
    if (v8)
      v6 = *(_QWORD *)(v8 + 8 * a2);
    else
      v6 = a2 | (*(_QWORD *)this << 32);
    v18 = *(_QWORD *)(this + 16);
    v10 = v7 - 1;
    v11 = *(_QWORD *)(this + 32) - 8;
    if (v18 >= 2)
    {
      v12 = 1;
      v19 = 2;
      v20 = 3;
      while (1)
      {
        v21 = v10[v19];
        if (v20 == v18 + 1 || (v22 = v10[v20], v21 > v22))
        {
          if (v21 < a3)
            goto LABEL_30;
        }
        else
        {
          v21 = v10[v20];
          v19 = v20;
          if (v22 < a3)
          {
LABEL_30:
            v17 = v12;
            goto LABEL_31;
          }
        }
        v17 = v19;
        v10[v12] = v21;
        *(_QWORD *)(v11 + 8 * v12) = *(_QWORD *)(v11 + 8 * v19);
        v19 *= 2;
        v20 = (2 * v17) | 1;
        v12 = v17;
        if (v19 > v18)
          goto LABEL_31;
      }
    }
    goto LABEL_21;
  }
  if (v3)
    return this;
  v4 = *(float **)(this + 24);
  if (*v4 >= a3)
    return this;
  v5 = *(_QWORD *)(this + 8);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8 * a2);
  else
    v6 = a2 | (*(_QWORD *)this << 32);
  v9 = *(_QWORD *)(this + 16);
  v10 = v4 - 1;
  v11 = *(_QWORD *)(this + 32) - 8;
  if (v9 < 2)
  {
LABEL_21:
    v17 = 1;
    goto LABEL_31;
  }
  v12 = 1;
  v13 = 2;
  v14 = 3;
  do
  {
    v15 = v10[v13];
    if (v14 == v9 + 1 || (v16 = v10[v14], v15 < v16))
    {
      if (v15 > a3)
        goto LABEL_30;
    }
    else
    {
      v15 = v10[v14];
      v13 = v14;
      if (v16 > a3)
        goto LABEL_30;
    }
    v17 = v13;
    v10[v12] = v15;
    *(_QWORD *)(v11 + 8 * v12) = *(_QWORD *)(v11 + 8 * v13);
    v13 *= 2;
    v14 = (2 * v17) | 1;
    v12 = v17;
  }
  while (v13 <= v9);
LABEL_31:
  v10[v17] = a3;
  *(_QWORD *)(v11 + 8 * v17) = v6;
  ++*(_QWORD *)(this + 40);
  return this;
}

#error "1D48F5324: call analysis failed (funcsize=365)"

void sub_1D48F55AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  __cxa_free_exception(v24);
  if (a18 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQ::get_InvertedListScanner(faiss::IndexIVFPQ *this, char a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t (**v7)();
  int v8;
  int v9;

  v4 = *((_QWORD *)this + 32);
  if (v4 == 16)
  {
    v8 = *((_DWORD *)this + 7);
    if (v8 == 1)
    {
      v6 = operator new();
      if (*(_DWORD *)(v6 + 40) != 1)
        __assert_rtn("IVFPQScannerT", "IndexIVFPQ.cpp", 869, "METRIC_TYPE == metric_type");
      v7 = off_1E9805988;
      goto LABEL_22;
    }
    if (!v8)
    {
      v6 = operator new();
      if (*(_DWORD *)(v6 + 40))
        __assert_rtn("IVFPQScannerT", "IndexIVFPQ.cpp", 869, "METRIC_TYPE == metric_type");
      v7 = off_1E98058B0;
      goto LABEL_22;
    }
  }
  else if (v4 == 8)
  {
    v5 = *((_DWORD *)this + 7);
    if (v5 == 1)
    {
      v6 = operator new();
      if (*(_DWORD *)(v6 + 40) != 1)
        __assert_rtn("IVFPQScannerT", "IndexIVFPQ.cpp", 869, "METRIC_TYPE == metric_type");
      v7 = off_1E9805940;
      goto LABEL_22;
    }
    if (!v5)
    {
      v6 = operator new();
      if (*(_DWORD *)(v6 + 40))
        __assert_rtn("IVFPQScannerT", "IndexIVFPQ.cpp", 869, "METRIC_TYPE == metric_type");
      v7 = off_1E9805868;
LABEL_22:
      *(_QWORD *)v6 = v7;
      *(_BYTE *)(v6 + 220) = a2;
      *(_DWORD *)(v6 + 224) = 2;
      return v6;
    }
  }
  else
  {
    v9 = *((_DWORD *)this + 7);
    if (v9 == 1)
    {
      v6 = operator new();
      if (*(_DWORD *)(v6 + 40) != 1)
        __assert_rtn("IVFPQScannerT", "IndexIVFPQ.cpp", 869, "METRIC_TYPE == metric_type");
      v7 = off_1E98059D0;
      goto LABEL_22;
    }
    if (!v9)
    {
      v6 = operator new();
      if (*(_DWORD *)(v6 + 40))
        __assert_rtn("IVFPQScannerT", "IndexIVFPQ.cpp", 869, "METRIC_TYPE == metric_type");
      v7 = off_1E98058F8;
      goto LABEL_22;
    }
  }
  return 0;
}

void sub_1D48F591C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D82628A4](v1, 0x10F1C4060970A61);
  _Unwind_Resume(a1);
}

double faiss::IndexIVFPQStats::reset(faiss::IndexIVFPQStats *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

__int128 *faiss::IndexIVFPQStats::get_indexIVFPQ_stats(faiss::IndexIVFPQStats *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats = 0u;
    *(_OWORD *)algn_1EFEC2C70 = 0u;
  }
  return &faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats;
}

faiss::IndexIVFPQ *faiss::IndexIVFPQ::IndexIVFPQ(faiss::IndexIVFPQ *this)
{
  faiss::IndexIVF *v2;

  v2 = faiss::IndexIVF::IndexIVF(this);
  *(_QWORD *)v2 = &off_1E9805298;
  faiss::ProductQuantizer::ProductQuantizer((faiss::IndexIVF *)((char *)v2 + 240));
  *((_BYTE *)this + 392) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  return this;
}

void sub_1D48F5A48(_Unwind_Exception *a1)
{
  faiss::IndexIVF *v1;

  faiss::IndexIVF::~IndexIVF(v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQ::find_duplicates(faiss::IndexIVFPQ *this, uint64_t *a2, unint64_t *a3)
{
  faiss::IndexIVFPQ *v3;
  uint64_t v4;
  uint64_t v5;
  std::vector<int>::size_type v6;
  uint64_t v7;
  std::vector<int>::pointer begin;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<int>::pointer v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::vector<int> v32;
  _QWORD v33[2];

  *a3 = 0;
  if (!*((_QWORD *)this + 6))
    return 0;
  v3 = this;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (***((uint64_t (****)(_QWORD, uint64_t))v3 + 14))(*((_QWORD *)v3 + 14), v5);
    std::vector<int>::vector(&v32, v6);
    if (v6)
    {
      v7 = 0;
      begin = v32.__begin_;
      do
      {
        begin[v7] = v7;
        ++v7;
      }
      while (v6 != v7);
    }
    v9 = *((_QWORD *)v3 + 14);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, v5);
    v11 = 126 - 2 * __clz(v32.__end_ - v32.__begin_);
    v12 = *((_QWORD *)v3 + 16);
    v33[0] = v10;
    v33[1] = v12;
    if (v32.__end_ == v32.__begin_)
      v13 = 0;
    else
      v13 = v11;
    std::__introsort<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,false>((uint64_t)v32.__begin_, v32.__end_, (uint64_t)v33, v13, 1);
    v14 = *((_QWORD *)v3 + 14);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    v27 = v9;
    v28 = v14;
    v29 = v5;
    if (v6)
    {
      v16 = 0;
      v17 = v32.__begin_;
      v18 = 0xFFFFFFFFLL;
      do
      {
        if ((v18 & 0x80000000) == 0
          && (v19 = v17[v18],
              v20 = v17[v16],
              !memcmp((const void *)(v10 + v12 * v19), (const void *)(v10 + v12 * v20), v12)))
        {
          if (v16 == v18 + 1)
          {
            v21 = a3[v4++];
            v22 = *(_QWORD *)(v15 + 8 * v19);
            v23 = v21 + 1;
            a3[v4] = v21 + 1;
            a2[v21] = v22;
          }
          else
          {
            v23 = a3[v4];
          }
          v24 = *(_QWORD *)(v15 + 8 * v20);
          a3[v4] = v23 + 1;
          a2[v23] = v24;
        }
        else
        {
          v18 = v16;
        }
        ++v16;
      }
      while (v6 != v16);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v29, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 24))(v27, v29, v10);
    v3 = this;
    if (v32.__begin_)
    {
      v32.__end_ = v32.__begin_;
      operator delete(v32.__begin_);
    }
    v5 = v29 + 1;
  }
  while ((unint64_t)(v29 + 1) < *((_QWORD *)this + 6));
  return v4;
}

void sub_1D48F5C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, v17, v19);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFPQ::~IndexIVFPQ(void **this)
{
  void *v2;
  void *v3;

  *this = &off_1E9805298;
  free(this[53]);
  v2 = this[46];
  if (v2)
  {
    this[47] = v2;
    operator delete(v2);
  }
  v3 = this[43];
  if (v3)
  {
    this[44] = v3;
    operator delete(v3);
  }
  faiss::IndexIVF::~IndexIVF((faiss::IndexIVF *)this);
}

{
  void *v2;
  void *v3;

  *this = &off_1E9805298;
  free(this[53]);
  v2 = this[46];
  if (v2)
  {
    this[47] = v2;
    operator delete(v2);
  }
  v3 = this[43];
  if (v3)
  {
    this[44] = v3;
    operator delete(v3);
  }
  faiss::IndexIVF::~IndexIVF((faiss::IndexIVF *)this);
  JUMPOUT(0x1D82628A4);
}

{
  void *v2;
  void *v3;

  *this = &off_1E9805298;
  free(this[53]);
  v2 = this[46];
  if (v2)
  {
    this[47] = v2;
    operator delete(v2);
  }
  v3 = this[43];
  if (v3)
  {
    this[44] = v3;
    operator delete(v3);
  }
  faiss::IndexIVF::~IndexIVF((faiss::IndexIVF *)this);
}

void faiss::AlignedTableTightAlloc<float,32>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  std::bad_alloc *exception;
  std::bad_alloc *v6;
  void *memptr;

  if (*(_QWORD *)(a1 + 8) != a2)
  {
    memptr = 0;
    if (a2)
    {
      if (malloc_type_posix_memalign(&memptr, 0x20uLL, 4 * a2, 0x100004052888210uLL))
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v6 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v6, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
      }
      v4 = *(_QWORD *)(a1 + 8);
      if (v4)
      {
        if (v4 >= a2)
          v4 = a2;
        memcpy(memptr, *(const void **)a1, 4 * v4);
      }
    }
    *(_QWORD *)(a1 + 8) = a2;
    free(*(void **)a1);
    *(_QWORD *)a1 = memptr;
  }
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  faiss::_anonymous_namespace_::QueryTables *v5;
  float v6;

  v4 = *(_DWORD *)(a1 + 224);
  v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(_QWORD *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2)
      return;
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::distance_to_code(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  float result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (*(_DWORD *)(a1 + 224) != 2)
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v3 + 16) != 8)
    faiss::IndexIVFPQ::scanListWithTable(a1, (uint64_t)a2, a3);
  result = *(float *)(a1 + 216);
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = 4 * *(_QWORD *)(v3 + 40);
    do
    {
      v8 = *a2++;
      result = result + *(float *)(v6 + 4 * v8);
      v6 += v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::scan_codes(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  int8x16_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int32 v22;
  int8x16_t v23;
  float *v24;
  uint64_t v25;
  int32x2_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int8x16_t *v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float *v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  float *v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  float *v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  __int32 v114;
  int8x16_t *v115;
  int8x16_t v116;
  __int32 v117;
  float *v118;
  uint64_t v119;
  int32x2_t v120;
  int8x8_t v121;
  __int32 v122;
  uint8x8_t v123;
  float v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  float *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  float v147;
  float v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  float *v153;
  uint64_t v154;
  uint8x8_t v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  float v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int8x16_t *v165;
  int8x16_t v166;
  int8x16_t v167;
  float *v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  float v175;
  float v176;
  uint64_t v177;
  void *exception;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v185;
  int v186;
  int v187;

  v10 = (int8x16_t *)a3;
  v11 = a2;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v15 = *(_DWORD *)(a1 + 224);
  v183 = a4;
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          v69 = *(_QWORD *)(a1 + 32);
          if (*(_DWORD *)(v69 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v18 = 0;
          v70 = 0;
          v71 = 0;
          v72 = a5 - 1;
          v73 = *(_QWORD *)(v69 + 32);
          v74 = *(_QWORD *)(a1 + 64);
          v75 = a6 - 8;
          v76 = *(_QWORD *)(v69 + 8);
LABEL_93:
          v77 = *(float *)(v12 + 216);
          if (v76)
          {
            v78 = 0;
            v79 = v74;
            do
            {
              v77 = v77
                  + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * v78) + 4 * v10->u8[v78])
                          + (float)(*(float *)(v79 + 4 * v10->u8[v78]) * -2.0));
              ++v78;
              v79 += 4 * *(_QWORD *)(v69 + 40);
            }
            while (v76 != v78);
          }
          if (*a5 >= v77)
            goto LABEL_112;
          if (a4)
            v80 = *(_QWORD *)(a4 + 8 * v71);
          else
            v80 = v71 | (v13 << 32);
          if (a7 < 2)
          {
            v81 = 1;
            goto LABEL_111;
          }
          v82 = 3;
          v83 = 2;
          v84 = 1;
          while (1)
          {
            v85 = v72[v83];
            if (v82 == a7 + 1 || (v86 = v72[v82], v85 < v86))
            {
              if (v85 > v77)
                goto LABEL_110;
            }
            else
            {
              v85 = v72[v82];
              v83 = v82;
              if (v86 > v77)
              {
LABEL_110:
                v81 = v84;
LABEL_111:
                v72[v81] = v77;
                *(_QWORD *)(v75 + 8 * v81) = v80;
                v18 = ++v70;
LABEL_112:
                v10 = (int8x16_t *)((char *)v10 + v73);
                if (++v71 == v11)
                  return v18;
                goto LABEL_93;
              }
            }
            v81 = v83;
            v72[v84] = v85;
            *(_QWORD *)(v75 + 8 * v84) = *(_QWORD *)(v75 + 8 * v83);
            v83 *= 2;
            v82 = (2 * v81) | 1;
            v84 = v81;
            if (v83 > a7)
              goto LABEL_111;
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v185, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v185, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoder8>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          v34 = *(_QWORD *)(a1 + 32);
          if (*(_DWORD *)(v34 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v18 = 0;
          v35 = 0;
          v36 = 0;
          v37 = a5 - 1;
          v38 = *(_QWORD *)(v34 + 32);
          v39 = *(_QWORD *)(a1 + 56);
          v40 = a6 - 8;
          v41 = *(_QWORD *)(v34 + 8);
LABEL_41:
          v42 = *(float *)(v12 + 216);
          if (v41)
          {
            v43 = 0;
            v44 = v39;
            do
            {
              v42 = v42 + *(float *)(v44 + 4 * v10->u8[v43++]);
              v44 += 4 * *(_QWORD *)(v34 + 40);
            }
            while (v41 != v43);
          }
          if (*a5 >= v42)
            goto LABEL_60;
          if (a4)
            v45 = *(_QWORD *)(a4 + 8 * v36);
          else
            v45 = v36 | (v13 << 32);
          if (a7 < 2)
          {
            v46 = 1;
            goto LABEL_59;
          }
          v47 = 3;
          v48 = 2;
          v49 = 1;
          while (1)
          {
            v50 = v37[v48];
            if (v47 == a7 + 1 || (v51 = v37[v47], v50 < v51))
            {
              if (v50 > v42)
                goto LABEL_58;
            }
            else
            {
              v50 = v37[v47];
              v48 = v47;
              if (v51 > v42)
              {
LABEL_58:
                v46 = v49;
LABEL_59:
                v37[v46] = v42;
                *(_QWORD *)(v40 + 8 * v46) = v45;
                v18 = ++v35;
LABEL_60:
                v10 = (int8x16_t *)((char *)v10 + v38);
                if (++v36 == v11)
                  return v18;
                goto LABEL_41;
              }
            }
            v46 = v48;
            v37[v49] = v50;
            *(_QWORD *)(v40 + 8 * v49) = *(_QWORD *)(v40 + 8 * v48);
            v48 *= 2;
            v47 = (2 * v46) | 1;
            v49 = v46;
            if (v48 > a7)
              goto LABEL_59;
          }
        }
      }
      return 0;
    }
    if (*(_BYTE *)(a1 + 44))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), v13, *(_QWORD *)(a1 + 72));
      v87 = faiss::fvec_inner_product(*(faiss **)(v12 + 72), *(const float **)(v12 + 136), *(int *)(v12 + 24));
      if (!v11)
        return 0;
    }
    else
    {
      v87 = 0.0;
      if (!a2)
        return 0;
    }
    v18 = 0;
    v88 = 0;
    v181 = v13 << 32;
    v89 = a5 - 1;
    v90 = a6 - 8;
LABEL_117:
    faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)v10, *(_QWORD *)(v12 + 80));
    v91 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32);
    v92 = v87 + faiss::fvec_inner_product(*(faiss **)(v12 + 80), *(const float **)(v12 + 136), *(int *)(v12 + 24));
    if (*a5 >= v92)
      goto LABEL_133;
    if (v183)
      v93 = *(_QWORD *)(v183 + 8 * v88);
    else
      v93 = v88 | v181;
    if (a7 < 2)
    {
      v94 = 1;
      goto LABEL_132;
    }
    v95 = 3;
    v96 = 2;
    v97 = 1;
    while (1)
    {
      v98 = v89[v96];
      if (v95 == a7 + 1 || (v99 = v89[v95], v98 < v99))
      {
        if (v98 > v92)
          goto LABEL_131;
      }
      else
      {
        v98 = v89[v95];
        v96 = v95;
        if (v99 > v92)
        {
LABEL_131:
          v94 = v97;
LABEL_132:
          v89[v94] = v92;
          *(_QWORD *)(v90 + 8 * v94) = v93;
          ++v18;
LABEL_133:
          v10 = (int8x16_t *)((char *)v10 + v91);
          if (++v88 == v11)
            return v18;
          goto LABEL_117;
        }
      }
      v94 = v96;
      v89[v97] = v98;
      *(_QWORD *)(v90 + 8 * v97) = *(_QWORD *)(v90 + 8 * v96);
      v96 *= 2;
      v95 = (2 * v94) | 1;
      v97 = v94;
      if (v96 > a7)
        goto LABEL_132;
    }
  }
  if (v15 != 2)
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(v16 + 32);
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        v18 = 0;
        if (a2)
        {
          v112 = 0;
          v113 = 0;
          v21 = 0;
          v114 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v115 = *(int8x16_t **)(a1 + 160);
          v116 = *v115;
          v117 = v115[1].i32[0];
          v118 = a5 - 1;
          v119 = a6 - 8;
LABEL_162:
          v120 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v116))))));
          v121 = (int8x8_t)vadd_s32(vdup_lane_s32(v120, 1), v120);
          v122 = v121.i32[0];
          v121.i32[0] = v10[1].i32[0] ^ v117;
          v123 = (uint8x8_t)vcnt_s8(v121);
          v123.i16[0] = vaddlv_u8(v123);
          a1 = v123.u32[0];
          if (v122 + v123.i32[0] >= v114)
            goto LABEL_183;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(v123.u32[0], a2, a3);
          v124 = *(float *)(v12 + 216);
          v125 = *(_QWORD *)(v16 + 8);
          if (v125)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v124 = v124 + *(float *)(a2 + 4 * v10->u8[a1++]);
              a2 += a3;
            }
            while (v125 != a1);
          }
          ++v21;
          if (*a5 >= v124)
            goto LABEL_183;
          if (a4)
            v126 = *(_QWORD *)(a4 + 8 * v113);
          else
            v126 = v113 | (v13 << 32);
          if (a7 < 2)
          {
            v127 = 1;
            goto LABEL_182;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v128 = v118[a1];
            if (a3 == a7 + 1 || (v129 = v118[a3], v128 < v129))
            {
              if (v128 > v124)
                goto LABEL_181;
            }
            else
            {
              v128 = v118[a3];
              a1 = a3;
              if (v129 > v124)
              {
LABEL_181:
                v127 = a2;
LABEL_182:
                v118[v127] = v124;
                *(_QWORD *)(v119 + 8 * v127) = v126;
                v18 = ++v112;
LABEL_183:
                v10 = (int8x16_t *)((char *)v10 + 20);
                if (++v113 == v11)
                  goto LABEL_261;
                goto LABEL_162;
              }
            }
            v127 = a1;
            v118[a2] = v128;
            *(_QWORD *)(v119 + 8 * a2) = *(_QWORD *)(v119 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v127) | 1;
            a2 = v127;
            if (a1 > a7)
              goto LABEL_182;
          }
        }
        goto LABEL_260;
      case 32:
        v18 = 0;
        if (a2)
        {
          v162 = 0;
          v163 = 0;
          v21 = 0;
          v164 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v165 = *(int8x16_t **)(a1 + 160);
          v167 = *v165;
          v166 = v165[1];
          v168 = a5 - 1;
          v169 = a6 - 8;
LABEL_237:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v167))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v166))))))) >= v164)goto LABEL_258;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v170 = *(float *)(v12 + 216);
          v171 = *(_QWORD *)(v16 + 8);
          if (v171)
          {
            v172 = 0;
            a1 = *(_QWORD *)(v12 + 56);
            a2 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              a3 = v10->u8[v172];
              v170 = v170 + *(float *)(a1 + 4 * a3);
              ++v172;
              a1 += a2;
            }
            while (v171 != v172);
          }
          ++v21;
          if (*a5 >= v170)
            goto LABEL_258;
          if (a4)
            v173 = *(_QWORD *)(a4 + 8 * v163);
          else
            v173 = v163 | (v13 << 32);
          if (a7 < 2)
          {
            a3 = 1;
            goto LABEL_257;
          }
          a2 = 3;
          v174 = 2;
          a1 = 1;
          while (1)
          {
            v175 = v168[v174];
            if (a2 == a7 + 1 || (v176 = v168[a2], v175 < v176))
            {
              if (v175 > v170)
                goto LABEL_256;
            }
            else
            {
              v175 = v168[a2];
              v174 = a2;
              if (v176 > v170)
              {
LABEL_256:
                a3 = a1;
LABEL_257:
                v168[a3] = v170;
                *(_QWORD *)(v169 + 8 * a3) = v173;
                v18 = ++v162;
LABEL_258:
                v10 += 2;
                if (++v163 == v11)
                  goto LABEL_261;
                goto LABEL_237;
              }
            }
            a3 = v174;
            v168[a1] = v175;
            *(_QWORD *)(v169 + 8 * a1) = *(_QWORD *)(v169 + 8 * v174);
            v174 *= 2;
            a2 = (2 * a3) | 1;
            a1 = a3;
            if (v174 > a7)
              goto LABEL_257;
          }
        }
        goto LABEL_260;
      case 64:
        v18 = 0;
        if (a2)
        {
          v52 = 0;
          v53 = 0;
          v21 = 0;
          v54 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v55 = *(int8x16_t **)(a1 + 160);
          v57 = v55[2];
          v56 = v55[3];
          v59 = *v55;
          v58 = v55[1];
          v60 = a5 - 1;
          v61 = a6 - 8;
LABEL_67:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v59))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v58)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[2], v57))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[3], v56)))))))) >= v54)goto LABEL_88;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v62 = *(float *)(v12 + 216);
          v63 = *(_QWORD *)(v16 + 8);
          if (v63)
          {
            v64 = 0;
            a1 = *(_QWORD *)(v12 + 56);
            a2 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              a3 = v10->u8[v64];
              v62 = v62 + *(float *)(a1 + 4 * a3);
              ++v64;
              a1 += a2;
            }
            while (v63 != v64);
          }
          ++v21;
          if (*a5 >= v62)
            goto LABEL_88;
          if (a4)
            v65 = *(_QWORD *)(a4 + 8 * v53);
          else
            v65 = v53 | (v13 << 32);
          if (a7 < 2)
          {
            a3 = 1;
            goto LABEL_87;
          }
          a2 = 3;
          v66 = 2;
          a1 = 1;
          while (1)
          {
            v67 = v60[v66];
            if (a2 == a7 + 1 || (v68 = v60[a2], v67 < v68))
            {
              if (v67 > v62)
                goto LABEL_86;
            }
            else
            {
              v67 = v60[a2];
              v66 = a2;
              if (v68 > v62)
              {
LABEL_86:
                a3 = a1;
LABEL_87:
                v60[a3] = v62;
                *(_QWORD *)(v61 + 8 * a3) = v65;
                v18 = ++v52;
LABEL_88:
                v10 += 4;
                if (++v53 == v11)
                  goto LABEL_261;
                goto LABEL_67;
              }
            }
            a3 = v66;
            v60[a1] = v67;
            *(_QWORD *)(v61 + 8 * a1) = *(_QWORD *)(v61 + 8 * v66);
            v66 *= 2;
            a2 = (2 * a3) | 1;
            a1 = a3;
            if (v66 > a7)
              goto LABEL_87;
          }
        }
        goto LABEL_260;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        v18 = 0;
        if (a2)
        {
          v100 = 0;
          v101 = 0;
          v21 = 0;
          v102 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v103 = **(_DWORD **)(a1 + 160);
          v104 = a5 - 1;
          v105 = a6 - 8;
LABEL_137:
          a8.i32[0] = v10->i32[0] ^ v103;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v102)
            goto LABEL_158;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v106 = *(float *)(v12 + 216);
          v107 = *(_QWORD *)(v16 + 8);
          if (v107)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v106 = v106 + *(float *)(a2 + 4 * v10->u8[a1++]);
              a2 += a3;
            }
            while (v107 != a1);
          }
          ++v21;
          if (*a5 >= v106)
            goto LABEL_158;
          if (a4)
            v108 = *(_QWORD *)(a4 + 8 * v101);
          else
            v108 = v101 | (v13 << 32);
          if (a7 < 2)
          {
            v109 = 1;
            goto LABEL_157;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v110 = v104[a1];
            if (a3 == a7 + 1 || (v111 = v104[a3], v110 < v111))
            {
              if (v110 > v106)
                goto LABEL_156;
            }
            else
            {
              v110 = v104[a3];
              a1 = a3;
              if (v111 > v106)
              {
LABEL_156:
                v109 = a2;
LABEL_157:
                v104[v109] = v106;
                *(_QWORD *)(v105 + 8 * v109) = v108;
                v18 = ++v100;
LABEL_158:
                v10 = (int8x16_t *)((char *)v10 + 4);
                if (++v101 == v11)
                  goto LABEL_261;
                goto LABEL_137;
              }
            }
            v109 = a1;
            v104[a2] = v110;
            *(_QWORD *)(v105 + 8 * a2) = *(_QWORD *)(v105 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v109) | 1;
            a2 = v109;
            if (a1 > a7)
              goto LABEL_157;
          }
        }
        goto LABEL_260;
      case 8:
        v18 = 0;
        if (a2)
        {
          v149 = 0;
          v150 = 0;
          v21 = 0;
          v151 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v152 = **(_QWORD **)(a1 + 160);
          v153 = a5 - 1;
          v154 = a6 - 8;
LABEL_212:
          v155 = (uint8x8_t)vcnt_s8((int8x8_t)(v10->i64[0] ^ v152));
          v155.i16[0] = vaddlv_u8(v155);
          if (v151 <= v155.i32[0])
            goto LABEL_233;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v156 = *(float *)(v12 + 216);
          v157 = *(_QWORD *)(v16 + 8);
          if (v157)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v156 = v156 + *(float *)(a2 + 4 * v10->u8[a1++]);
              a2 += a3;
            }
            while (v157 != a1);
          }
          ++v21;
          if (*a5 >= v156)
            goto LABEL_233;
          if (a4)
            v158 = *(_QWORD *)(a4 + 8 * v150);
          else
            v158 = v150 | (v13 << 32);
          if (a7 < 2)
          {
            v159 = 1;
            goto LABEL_232;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v160 = v153[a1];
            if (a3 == a7 + 1 || (v161 = v153[a3], v160 < v161))
            {
              if (v160 > v156)
                goto LABEL_231;
            }
            else
            {
              v160 = v153[a3];
              a1 = a3;
              if (v161 > v156)
              {
LABEL_231:
                v159 = a2;
LABEL_232:
                v153[v159] = v156;
                *(_QWORD *)(v154 + 8 * v159) = v158;
                v18 = ++v149;
LABEL_233:
                v10 = (int8x16_t *)((char *)v10 + 8);
                if (++v150 == v11)
                  goto LABEL_261;
                goto LABEL_212;
              }
            }
            v159 = a1;
            v153[a2] = v160;
            *(_QWORD *)(v154 + 8 * a2) = *(_QWORD *)(v154 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v159) | 1;
            a2 = v159;
            if (a1 > a7)
              goto LABEL_232;
          }
        }
        goto LABEL_260;
      case 16:
        v18 = 0;
        if (a2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v23 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
          v24 = a5 - 1;
          v25 = a6 - 8;
          while (1)
          {
            v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v23))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v22)
              goto LABEL_33;
            if (*(_DWORD *)(v16 + 16) != 8)
              faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
            v27 = *(float *)(v12 + 216);
            v28 = *(_QWORD *)(v16 + 8);
            if (v28)
            {
              v29 = 0;
              a1 = *(_QWORD *)(v12 + 56);
              a2 = 4 * *(_QWORD *)(v16 + 40);
              do
              {
                a3 = v10->u8[v29];
                v27 = v27 + *(float *)(a1 + 4 * a3);
                ++v29;
                a1 += a2;
              }
              while (v28 != v29);
            }
            ++v21;
            if (*a5 >= v27)
              goto LABEL_33;
            if (a4)
              v30 = *(_QWORD *)(a4 + 8 * v20);
            else
              v30 = v20 | (v13 << 32);
            if (a7 < 2)
            {
              a3 = 1;
              goto LABEL_32;
            }
            a2 = 3;
            v31 = 2;
            a1 = 1;
            while (1)
            {
              v32 = v24[v31];
              if (a2 != a7 + 1)
              {
                v33 = v24[a2];
                if (v32 >= v33)
                  break;
              }
              if (v32 > v27)
                goto LABEL_31;
LABEL_29:
              a3 = v31;
              v24[a1] = v32;
              *(_QWORD *)(v25 + 8 * a1) = *(_QWORD *)(v25 + 8 * v31);
              v31 *= 2;
              a2 = (2 * a3) | 1;
              a1 = a3;
              if (v31 > a7)
                goto LABEL_32;
            }
            v32 = v24[a2];
            v31 = a2;
            if (v33 <= v27)
              goto LABEL_29;
LABEL_31:
            a3 = a1;
LABEL_32:
            v24[a3] = v27;
            *(_QWORD *)(v25 + 8 * a3) = v30;
            v18 = ++v19;
LABEL_33:
            ++v10;
            if (++v20 == v11)
            {
LABEL_261:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              v177 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v21;
              goto LABEL_262;
            }
          }
        }
LABEL_260:
        v21 = 0;
        goto LABEL_261;
    }
  }
  v182 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
  v185 = *(_QWORD *)(a1 + 160);
  v186 = (int)v17 / 8;
  v187 = v17 - (v16 & 0xFFFFFFF8);
  v18 = 0;
  if (!a2)
  {
    v131 = 0;
    goto LABEL_267;
  }
  v130 = 0;
  v131 = 0;
  v180 = (int)v17;
  v132 = a5 - 1;
  v133 = a6 - 8;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v185, (const unsigned __int8 *)v10);
    if ((int)a1 >= v182)
      goto LABEL_208;
    v136 = *(_QWORD *)(v12 + 32);
    if (*(_DWORD *)(v136 + 16) != 8)
      faiss::IndexIVFPQ::scanListWithTable(a1, v134, v135);
    v137 = *(float *)(v12 + 216);
    v138 = *(_QWORD *)(v136 + 8);
    if (v138)
    {
      v139 = 0;
      v140 = *(_QWORD *)(v12 + 56);
      v141 = 4 * *(_QWORD *)(v136 + 40);
      do
      {
        v137 = v137 + *(float *)(v140 + 4 * v10->u8[v139++]);
        v140 += v141;
      }
      while (v138 != v139);
    }
    ++v131;
    if (*a5 >= v137)
      goto LABEL_208;
    if (v183)
      v142 = *(_QWORD *)(v183 + 8 * v130);
    else
      v142 = v130 | (v13 << 32);
    if (a7 < 2)
    {
      v143 = 1;
      goto LABEL_207;
    }
    v144 = 3;
    v145 = 2;
    v146 = 1;
    while (1)
    {
      v147 = v132[v145];
      if (v144 != a7 + 1)
      {
        v148 = v132[v144];
        if (v147 >= v148)
          break;
      }
      if (v147 > v137)
        goto LABEL_206;
LABEL_204:
      v143 = v145;
      v132[v146] = v147;
      *(_QWORD *)(v133 + 8 * v146) = *(_QWORD *)(v133 + 8 * v145);
      v145 *= 2;
      v144 = (2 * v143) | 1;
      v146 = v143;
      if (v145 > a7)
        goto LABEL_207;
    }
    v147 = v132[v144];
    v145 = v144;
    if (v148 <= v137)
      goto LABEL_204;
LABEL_206:
    v143 = v146;
LABEL_207:
    v132[v143] = v137;
    *(_QWORD *)(v133 + 8 * v143) = v142;
    ++v18;
LABEL_208:
    v10 = (int8x16_t *)((char *)v10 + v180);
    ++v130;
  }
  while (v130 != v11);
LABEL_267:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  v177 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v131;
LABEL_262:
  *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v177;
  return v18;
}

void sub_1D48F6EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::scan_codes_range(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  int v6;
  float v8;
  int8x16_t *v9;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  int8x16_t v19;
  uint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int8x16_t *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int32 v80;
  int8x16_t *v81;
  int8x16_t v82;
  __int32 v83;
  uint64_t v84;
  int32x2_t v85;
  int8x8_t v86;
  __int32 v87;
  uint8x8_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int8x16_t *v124;
  int8x16_t v125;
  int8x16_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  void *exception;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  uint64_t v150;
  int v151;
  int v152;

  v8 = *(float *)&a6;
  v9 = a3;
  v11 = a1;
  v12 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v14 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) >= 1)
  {
    if (v14 != 2)
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            v79 = 0;
            v17 = 0;
            v80 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v81 = *(int8x16_t **)(a1 + 160);
            v82 = *v81;
            v83 = v81[1].i32[0];
            v84 = v12 << 32;
            v148 = *v81;
            do
            {
              v85 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v82))))));
              v86 = (int8x8_t)vadd_s32(vdup_lane_s32(v85, 1), v85);
              v87 = v86.i32[0];
              v86.i32[0] = v9[1].i32[0] ^ v83;
              v88 = (uint8x8_t)vcnt_s8(v86);
              v88.i16[0] = vaddlv_u8(v88);
              if (v87 + v88.i32[0] < v80)
              {
                v89 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v89 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v90 = *(float *)(v11 + 216);
                v91 = *(_QWORD *)(v89 + 8);
                if (v91)
                {
                  v92 = 0;
                  v93 = *(_QWORD *)(v11 + 56);
                  v94 = 4 * *(_QWORD *)(v89 + 40);
                  do
                  {
                    v90 = v90 + *(float *)(v93 + 4 * v9->u8[v92++]);
                    v93 += v94;
                  }
                  while (v91 != v92);
                }
                ++v17;
                if (v90 > v8)
                {
                  if (a4)
                    v95 = *(_QWORD *)(a4 + 8 * v79);
                  else
                    v95 = v79 | v84;
                  faiss::RangeQueryResult::add(this, v90, v95);
                  v82 = v148;
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 20);
              ++v79;
            }
            while (v79 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 32:
          if (a2)
          {
            v122 = 0;
            v17 = 0;
            v123 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v124 = *(int8x16_t **)(a1 + 160);
            v126 = *v124;
            v125 = v124[1];
            v127 = v12 << 32;
            v145 = *v124;
            v149 = v125;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v126))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v125))))))) < v123)
              {
                v128 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v128 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v129 = *(float *)(v11 + 216);
                v130 = *(_QWORD *)(v128 + 8);
                if (v130)
                {
                  v131 = 0;
                  v132 = *(_QWORD *)(v11 + 56);
                  v133 = 4 * *(_QWORD *)(v128 + 40);
                  do
                  {
                    v129 = v129 + *(float *)(v132 + 4 * v9->u8[v131++]);
                    v132 += v133;
                  }
                  while (v130 != v131);
                }
                ++v17;
                if (v129 > v8)
                {
                  if (a4)
                    v134 = *(_QWORD *)(a4 + 8 * v122);
                  else
                    v134 = v122 | v127;
                  faiss::RangeQueryResult::add(this, v129, v134);
                  v126 = v145;
                  v125 = v149;
                }
              }
              v9 += 2;
              ++v122;
            }
            while (v122 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 64:
          if (a2)
          {
            v39 = 0;
            v17 = 0;
            v40 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v41 = *(int8x16_t **)(a1 + 160);
            v43 = v41[2];
            v42 = v41[3];
            v45 = *v41;
            v44 = v41[1];
            v46 = v12 << 32;
            v144 = v43;
            v147 = v42;
            v142 = *v41;
            v143 = v44;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v45))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v44)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[2], v43))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[3], v42)))))))) < v40)
              {
                v47 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v47 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v48 = *(float *)(v11 + 216);
                v49 = *(_QWORD *)(v47 + 8);
                if (v49)
                {
                  v50 = 0;
                  v51 = *(_QWORD *)(v11 + 56);
                  v52 = 4 * *(_QWORD *)(v47 + 40);
                  do
                  {
                    v48 = v48 + *(float *)(v51 + 4 * v9->u8[v50++]);
                    v51 += v52;
                  }
                  while (v49 != v50);
                }
                ++v17;
                if (v48 > v8)
                {
                  if (a4)
                    v53 = *(_QWORD *)(a4 + 8 * v39);
                  else
                    v53 = v39 | v46;
                  faiss::RangeQueryResult::add(this, v48, v53);
                  v43 = v144;
                  v42 = v147;
                  v45 = v142;
                  v44 = v143;
                }
              }
              v9 += 4;
              ++v39;
            }
            while (v39 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            v68 = 0;
            v17 = 0;
            v69 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v70 = **(_DWORD **)(a1 + 160);
            v71 = v12 << 32;
            do
            {
              LODWORD(a6) = v9->i32[0] ^ v70;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v69)
              {
                v72 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v72 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v73 = *(float *)(v11 + 216);
                v74 = *(_QWORD *)(v72 + 8);
                if (v74)
                {
                  v75 = 0;
                  v76 = *(_QWORD *)(v11 + 56);
                  v77 = 4 * *(_QWORD *)(v72 + 40);
                  do
                  {
                    v73 = v73 + *(float *)(v76 + 4 * v9->u8[v75++]);
                    v76 += v77;
                  }
                  while (v74 != v75);
                }
                ++v17;
                if (v73 > v8)
                {
                  if (a4)
                    v78 = *(_QWORD *)(a4 + 8 * v68);
                  else
                    v78 = v68 | v71;
                  faiss::RangeQueryResult::add(this, v73, v78);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 4);
              ++v68;
            }
            while (v68 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 8:
          if (a2)
          {
            v110 = 0;
            v17 = 0;
            v111 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v112 = **(_QWORD **)(a1 + 160);
            v113 = v12 << 32;
            do
            {
              v114 = (uint8x8_t)vcnt_s8((int8x8_t)(v9->i64[0] ^ v112));
              v114.i16[0] = vaddlv_u8(v114);
              if (v111 > v114.i32[0])
              {
                v115 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v115 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v116 = *(float *)(v11 + 216);
                v117 = *(_QWORD *)(v115 + 8);
                if (v117)
                {
                  v118 = 0;
                  v119 = *(_QWORD *)(v11 + 56);
                  v120 = 4 * *(_QWORD *)(v115 + 40);
                  do
                  {
                    v116 = v116 + *(float *)(v119 + 4 * v9->u8[v118++]);
                    v119 += v120;
                  }
                  while (v117 != v118);
                }
                ++v17;
                if (v116 > v8)
                {
                  if (a4)
                    v121 = *(_QWORD *)(a4 + 8 * v110);
                  else
                    v121 = v110 | v113;
                  faiss::RangeQueryResult::add(this, v116, v121);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 8);
              ++v110;
            }
            while (v110 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 16:
          if (a2)
          {
            v16 = 0;
            v17 = 0;
            v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v19 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
            v20 = v12 << 32;
            v146 = v19;
            do
            {
              v21 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v19))))));
              if (vadd_s32(vdup_lane_s32(v21, 1), v21).i32[0] < v18)
              {
                v22 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v22 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v23 = *(float *)(v11 + 216);
                v24 = *(_QWORD *)(v22 + 8);
                if (v24)
                {
                  v25 = 0;
                  v26 = *(_QWORD *)(v11 + 56);
                  v27 = 4 * *(_QWORD *)(v22 + 40);
                  do
                  {
                    v23 = v23 + *(float *)(v26 + 4 * v9->u8[v25++]);
                    v26 += v27;
                  }
                  while (v24 != v25);
                }
                ++v17;
                if (v23 > v8)
                {
                  if (a4)
                    v28 = *(_QWORD *)(a4 + 8 * v16);
                  else
                    v28 = v16 | v20;
                  faiss::RangeQueryResult::add(this, v23, v28);
                  v19 = v146;
                }
              }
              ++v9;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_144;
          }
LABEL_143:
          v17 = 0;
LABEL_144:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
          v135 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_145:
          *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v135;
          return;
      }
    }
    v96 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
    v150 = *(_QWORD *)(a1 + 160);
    v151 = (int)v15 / 8;
    v152 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      v97 = 0;
      v98 = 0;
      v99 = (int)v15;
      v100 = v12 << 32;
      do
      {
        a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v150, (const unsigned __int8 *)v9);
        if ((int)a1 < v96)
        {
          v103 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v103 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, v101, v102);
          v104 = *(float *)(v11 + 216);
          v105 = *(_QWORD *)(v103 + 8);
          if (v105)
          {
            v106 = 0;
            v107 = *(_QWORD *)(v11 + 56);
            v108 = 4 * *(_QWORD *)(v103 + 40);
            do
            {
              v104 = v104 + *(float *)(v107 + 4 * v9->u8[v106++]);
              v107 += v108;
            }
            while (v105 != v106);
          }
          ++v98;
          if (v104 > v8)
          {
            if (a4)
              v109 = *(_QWORD *)(a4 + 8 * v97);
            else
              v109 = v97 | v100;
            faiss::RangeQueryResult::add(this, v104, v109);
          }
        }
        v9 = (int8x16_t *)((char *)v9 + v99);
        ++v97;
      }
      while (v97 != a2);
    }
    else
    {
      v98 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
    v135 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v98;
    goto LABEL_145;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        v54 = 0;
        v55 = v12 << 32;
        do
        {
          v56 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v56 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
          v57 = *(float *)(v11 + 216);
          v58 = *(_QWORD *)(v56 + 8);
          if (v58)
          {
            v59 = *(_QWORD *)(v11 + 64);
            v60 = *(uint64_t **)(v11 + 112);
            v61 = v9;
            do
            {
              v63 = v61->u8[0];
              v61 = (int8x16_t *)((char *)v61 + 1);
              v62 = v63;
              v64 = *v60++;
              v57 = v57 + (float)(*(float *)(v64 + 4 * v62) + (float)(*(float *)(v59 + 4 * v62) * -2.0));
              v59 += 4 * *(_QWORD *)(v56 + 40);
              --v58;
            }
            while (v58);
          }
          v65 = *(_QWORD *)(v56 + 32);
          if (v57 > v8)
          {
            if (a4)
              v66 = *(_QWORD *)(a4 + 8 * v54);
            else
              v66 = v54 | v55;
            faiss::RangeQueryResult::add(this, v57, v66);
          }
          v9 = (int8x16_t *)((char *)v9 + v65);
          ++v54;
        }
        while (v54 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v150, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v150, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoder8>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        v29 = 0;
        v30 = v12 << 32;
        do
        {
          v31 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v31 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
          v32 = *(float *)(v11 + 216);
          v33 = *(_QWORD *)(v31 + 8);
          if (v33)
          {
            v34 = *(_QWORD *)(v11 + 56);
            v35 = v9;
            do
            {
              v36 = v35->u8[0];
              v35 = (int8x16_t *)((char *)v35 + 1);
              v32 = v32 + *(float *)(v34 + 4 * v36);
              v34 += 4 * *(_QWORD *)(v31 + 40);
              --v33;
            }
            while (v33);
          }
          v37 = *(_QWORD *)(v31 + 32);
          if (v32 > v8)
          {
            if (a4)
              v38 = *(_QWORD *)(a4 + 8 * v29);
            else
              v38 = v29 | v30;
            faiss::RangeQueryResult::add(this, v32, v38);
          }
          v9 = (int8x16_t *)((char *)v9 + v37);
          ++v29;
        }
        while (v29 != a2);
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 44))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), v12, *(_QWORD *)(a1 + 72));
      v67 = faiss::fvec_inner_product(*(faiss **)(v11 + 72), *(const float **)(v11 + 136), *(int *)(v11 + 24));
      if (!a2)
        return;
    }
    else
    {
      v67 = 0.0;
      if (!a2)
        return;
    }
    v136 = 0;
    v137 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*(_DWORD **)(v11 + 32), (uint64_t)v9, *(_QWORD *)(v11 + 80));
      v138 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 32);
      v139 = v67 + faiss::fvec_inner_product(*(faiss **)(v11 + 80), *(const float **)(v11 + 136), *(int *)(v11 + 24));
      if (v139 > v8)
      {
        if (a4)
          v140 = *(_QWORD *)(a4 + 8 * v136);
        else
          v140 = v136 | v137;
        faiss::RangeQueryResult::add(this, v139, v140);
      }
      v9 = (int8x16_t *)((char *)v9 + v138);
      ++v136;
    }
    while (a2 != v136);
  }
}

void sub_1D48F78BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

_QWORD *faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1D82628A4);
}

uint64_t faiss::`anonymous namespace'::QueryTables::QueryTables(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  size_t v18;

  *(_QWORD *)a1 = a2;
  v4 = *(int *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = a2 + 240;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 232);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 420);
  *(_OWORD *)(a1 + 80) = 0u;
  v5 = a1 + 104;
  *(_QWORD *)(a1 + 152) = 0;
  v6 = (unint64_t *)(a1 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  std::vector<float>::resize(a1 + 80, 2 * *(_QWORD *)(a2 + 280) * *(_QWORD *)(a2 + 248) + 2 * v4);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD **)(a1 + 24);
  v9 = v8[1];
  v10 = v9 * v8[5];
  v11 = v7 + 4 * v10;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = v11 + 4 * v10;
  v13 = v12 + 4 * *(int *)(a1 + 16);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  LODWORD(v12) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 44) = v12;
  if ((_DWORD)v12)
  {
    v14 = v8[4];
    v15 = *(_QWORD *)(a1 + 152);
    v16 = *(_QWORD *)(a1 + 160) - v15;
    v17 = v14 >= v16;
    v18 = v14 - v16;
    if (v18 != 0 && v17)
    {
      std::vector<unsigned char>::__append(v6, v18);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    }
    else if (!v17)
    {
      *(_QWORD *)(a1 + 160) = v15 + v14;
    }
  }
  *(_QWORD *)(a1 + 176) = 0;
  std::vector<float const*>::resize(v5, v9);
  return a1;
}

void sub_1D48F7ABC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 160) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::vector<float const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<float const*>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<float const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void faiss::`anonymous namespace'::QueryTables::init_query(faiss::_anonymous_namespace_::QueryTables *this, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  float *v9;

  *((_QWORD *)this + 16) = a2;
  if (!*((_DWORD *)this + 8))
  {
    v8 = *((_QWORD *)this + 3);
    v9 = (float *)*((_QWORD *)this + 6);
LABEL_6:
    faiss::ProductQuantizer::compute_inner_prod_table(v8, a2, v9, a4, a5, a6);
    goto LABEL_8;
  }
  if (*((_BYTE *)this + 36))
  {
    if (!*((_DWORD *)this + 10))
      goto LABEL_8;
    v8 = *((_QWORD *)this + 3);
    v9 = (float *)*((_QWORD *)this + 7);
    goto LABEL_6;
  }
  faiss::ProductQuantizer::compute_distance_table(*((faiss::ProductQuantizer **)this + 3), a2, *((float **)this + 6));
LABEL_8:
  if (!*((_BYTE *)this + 36))
  {
    if (*((_DWORD *)this + 11))
      faiss::ProductQuantizer::compute_code(*((_QWORD *)this + 3), (uint64_t)a2, *((_BYTE **)this + 19));
  }
}

float faiss::`anonymous namespace'::QueryTables::precompute_list_tables(faiss::_anonymous_namespace_::QueryTables *this)
{
  uint64_t cycles;
  float *v3;
  uint64_t v4;
  float v5;
  int v6;
  const void *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v35;
  std::string *v36;
  size_t size;
  void *exception;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  std::string v43;

  cycles = faiss::get_cycles(this);
  v4 = cycles;
  v5 = 0.0;
  if (!*((_BYTE *)this + 36))
    goto LABEL_30;
  if (!*((_DWORD *)this + 8))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)this + 40) + 80))(*(_QWORD *)(*(_QWORD *)this + 40), *((_QWORD *)this + 17), *((_QWORD *)this + 9));
    v5 = faiss::fvec_inner_product(*((faiss **)this + 16), *((const float **)this + 9), *((int *)this + 4));
    if (!*((_DWORD *)this + 11))
      goto LABEL_30;
    v26 = *((unsigned int *)this + 4);
    if ((int)v26 <= 0)
    {
      v30 = *((_QWORD *)this + 8);
    }
    else
    {
      v27 = 0;
      v28 = *((_QWORD *)this + 16);
      v29 = 4 * v26;
      v30 = *((_QWORD *)this + 8);
      v31 = *((_QWORD *)this + 9);
      do
      {
        *(float *)(v30 + v27) = *(float *)(v28 + v27) - *(float *)(v31 + v27);
        v27 += 4;
      }
      while (v29 != v27);
    }
LABEL_29:
    faiss::ProductQuantizer::compute_code(*((_QWORD *)this + 3), v30, *((_BYTE **)this + 19));
    goto LABEL_30;
  }
  v6 = *((_DWORD *)this + 10);
  if ((v6 + 1) < 2)
  {
    v32 = (uint64_t *)((char *)this + 64);
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)this + 40) + 104))(*(_QWORD *)(*(_QWORD *)this + 40), *((_QWORD *)this + 16), *((_QWORD *)this + 8), *((_QWORD *)this + 17));
    faiss::ProductQuantizer::compute_distance_table(*((faiss::ProductQuantizer **)this + 3), *((const float **)this + 8), *((float **)this + 6));
    if (!*((_DWORD *)this + 11))
      goto LABEL_30;
LABEL_27:
    v30 = *v32;
    goto LABEL_29;
  }
  if (v6 == 1)
  {
    v5 = *((float *)this + 36);
    v33 = *(_QWORD *)(*((_QWORD *)this + 3) + 40) * *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    cycles = faiss::fvec_madd(v33, (float *)(*(_QWORD *)(*(_QWORD *)this + 424) + 4 * *((_QWORD *)this + 17) * v33), *((float **)this + 7), -2.0, *((float **)this + 6), v3);
    if (!*((_DWORD *)this + 11))
      goto LABEL_30;
    v32 = (uint64_t *)((char *)this + 64);
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)this + 40) + 104))(*(_QWORD *)(*(_QWORD *)this + 40), *((_QWORD *)this + 16), *((_QWORD *)this + 8), *((_QWORD *)this + 17));
    goto LABEL_27;
  }
  if (v6 == 2)
  {
    v7 = *(const void **)(*(_QWORD *)this + 40);
    if (!v7
      || (v5 = *((float *)this + 36),
    {
      memset(&v43, 0, sizeof(v43));
      v35 = snprintf(0, 0, "Error: '%s' failed", "miq");
      std::string::resize(&v43, v35 + 1, 0);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v43;
      else
        v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        size = v43.__r_.__value_.__l.__size_;
      snprintf((char *)v36, size, "Error: '%s' failed", "miq");
      exception = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v43, "float faiss::(anonymous namespace)::QueryTables::precompute_list_tables_L2()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 730);
    }
    v9 = cycles;
    v10 = *(_QWORD *)(cycles + 48);
    if (v10)
    {
      v39 = v4;
      v40 = cycles;
      v11 = 0;
      v12 = 0;
      v13 = *((_QWORD *)this + 3);
      v14 = *(_QWORD *)(v13 + 8) / v10;
      v15 = *((_QWORD *)this + 17);
      v16 = (float *)*((_QWORD *)this + 6);
      v17 = (float *)*((_QWORD *)this + 7);
      v18 = (int)v14;
      v41 = (int)v14;
      v42 = v14;
      v19 = v14;
      do
      {
        v20 = *(_QWORD *)(v9 + 56);
        v21 = v11 * v18;
        cycles = *(_QWORD *)(v13 + 40);
        v22 = (v11 * v18 + (int)(v15 & ~(-1 << v20)) * *(_QWORD *)(v13 + 8)) * cycles;
        v23 = *(_QWORD *)(*(_QWORD *)this + 424) + 4 * v22;
        if (*((_DWORD *)this + 11))
        {
          if (v21 < ++v11 * v18)
          {
            v24 = v12;
            do
            {
              *(_BYTE *)(*((_QWORD *)this + 19) + v24) = faiss::fvec_madd_and_argmin(cycles, v23, v17, -2.0, v16, v8);
              v13 = *((_QWORD *)this + 3);
              cycles = *(_QWORD *)(v13 + 40);
              v23 += 4 * cycles;
              v16 += cycles;
              v17 += cycles;
              ++v24;
            }
            while ((_DWORD)v24 != v19);
            v9 = v40;
            v18 = v41;
          }
        }
        else
        {
          cycles = faiss::fvec_madd(cycles * v18, (float *)(*(_QWORD *)(*(_QWORD *)this + 424) + 4 * v22), v17, -2.0, v16, v8);
          v18 = v41;
          v13 = *((_QWORD *)this + 3);
          v25 = *(_QWORD *)(v13 + 40) * v41;
          v16 += v25;
          v17 += v25;
          ++v11;
        }
        v15 >>= v20;
        v12 += v42;
        v19 += v42;
      }
      while (*(_QWORD *)(v9 + 48) > (unint64_t)v11);
      v4 = v39;
    }
  }
LABEL_30:
  *((_QWORD *)this + 22) += faiss::get_cycles((faiss *)cycles) - v4;
  return v5;
}

void sub_1D48F806C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float faiss::`anonymous namespace'::QueryTables::precompute_list_table_pointers(faiss::_anonymous_namespace_::QueryTables *this)
{
  faiss *cycles;
  faiss *v3;
  int v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *exception;
  int v22;
  std::string *v23;
  size_t size;
  void *v25;
  void *v26;
  void *v27;
  std::string v28;

  cycles = (faiss *)faiss::get_cycles(this);
  v3 = cycles;
  if (*((_BYTE *)this + 36))
  {
    if (!*((_DWORD *)this + 8))
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v28, "not implemented");
      faiss::FaissException::FaissException(exception, &v28, "float faiss::(anonymous namespace)::QueryTables::precompute_list_table_pointers()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 667);
    }
    v4 = *((_DWORD *)this + 10);
    if (v4 == 2)
    {
      v11 = *(const void **)(*(_QWORD *)this + 40);
      if (!v11
        || (v5 = *((float *)this + 36),
      {
        memset(&v28, 0, sizeof(v28));
        v22 = snprintf(0, 0, "Error: '%s' failed", "miq");
        std::string::resize(&v28, v22 + 1, 0);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v28;
        else
          v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        snprintf((char *)v23, size, "Error: '%s' failed", "miq");
        v25 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v25, &v28, "float faiss::(anonymous namespace)::QueryTables::precompute_list_table_pointers_L2()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 784);
      }
      v12 = *((_QWORD *)cycles + 6);
      if (v12)
      {
        v13 = 0;
        v14 = 0;
        v15 = *((_QWORD *)this + 3);
        v16 = *(_QWORD *)(v15 + 8) / v12;
        v17 = *((_QWORD *)this + 17);
        v18 = *((_QWORD *)cycles + 7);
        do
        {
          v19 = v14 + (int)v16;
          if ((int)v16 >= 1)
          {
            cycles = (faiss *)(*(_QWORD *)(*(_QWORD *)this + 424)
                             + 4
                             * (v13 * (int)v16 + *(_QWORD *)(v15 + 8) * (int)(v17 & ~(-1 << v18)))
                             * *(_QWORD *)(v15 + 40));
            do
            {
              *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v14) = cycles;
              v15 = *((_QWORD *)this + 3);
              cycles = (faiss *)((char *)cycles + 4 * *(_QWORD *)(v15 + 40));
              ++v14;
            }
            while (v14 < v19);
          }
          v17 >>= v18;
          ++v13;
          v14 = v19;
        }
        while (v13 != v12);
      }
    }
    else
    {
      if (v4 != 1)
      {
        v27 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v28, "need precomputed tables");
        faiss::FaissException::FaissException(v27, &v28, "float faiss::(anonymous namespace)::QueryTables::precompute_list_table_pointers_L2()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 804);
      }
      v5 = *((float *)this + 36);
      v6 = *((_QWORD *)this + 3);
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = 0;
        v9 = *(_QWORD *)(*(_QWORD *)this + 424) + 4 * *(_QWORD *)(v6 + 40) * v7 * *((_QWORD *)this + 17);
        do
        {
          *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v8) = v9;
          v10 = *((_QWORD *)this + 3);
          v9 += 4 * *(_QWORD *)(v10 + 40);
          ++v8;
        }
        while (*(_QWORD *)(v10 + 8) > v8);
      }
    }
    if (*((_DWORD *)this + 11))
    {
      v26 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v28, "not implemented");
      faiss::FaissException::FaissException(v26, &v28, "float faiss::(anonymous namespace)::QueryTables::precompute_list_table_pointers_L2()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 808);
    }
  }
  else
  {
    v5 = 0.0;
  }
  *((_QWORD *)this + 22) += faiss::get_cycles(cycles) - (_QWORD)v3;
  return v5;
}

void sub_1D48F840C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  faiss::_anonymous_namespace_::QueryTables *v5;
  float v6;

  v4 = *(_DWORD *)(a1 + 224);
  v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(_QWORD *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2)
      return;
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::distance_to_code(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  float result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (*(_DWORD *)(a1 + 224) != 2)
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v3 + 16) != 8)
    faiss::IndexIVFPQ::scanListWithTable(a1, (uint64_t)a2, a3);
  result = *(float *)(a1 + 216);
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = 4 * *(_QWORD *)(v3 + 40);
    do
    {
      v8 = *a2++;
      result = result + *(float *)(v6 + 4 * v8);
      v6 += v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::scan_codes(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  int8x16_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int32 v22;
  int8x16_t v23;
  float *v24;
  uint64_t v25;
  int32x2_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  const float **v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  float *v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  __int32 v103;
  int8x16_t *v104;
  int8x16_t v105;
  __int32 v106;
  float *v107;
  uint64_t v108;
  int32x2_t v109;
  int8x8_t v110;
  __int32 v111;
  uint8x8_t v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  float *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  float v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  float *v143;
  uint64_t v144;
  uint8x8_t v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  float v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int8x16_t *v155;
  int8x16_t v156;
  int8x16_t v157;
  float *v158;
  uint64_t v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  float v165;
  float v166;
  uint64_t v167;
  uint64_t v169;
  const float *v170;
  float *v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  float v180;
  float v181;
  void *exception;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v190;
  int v191;
  int v192;

  v10 = (int8x16_t *)a3;
  v11 = a2;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v15 = *(_DWORD *)(a1 + 224);
  v188 = a4;
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          v70 = *(_QWORD *)(a1 + 32);
          if (*(_DWORD *)(v70 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v18 = 0;
          v71 = 0;
          v72 = 0;
          v73 = a5 - 1;
          v74 = *(_QWORD *)(v70 + 32);
          v75 = *(_QWORD *)(a1 + 64);
          v76 = a6 - 8;
          v77 = *(_QWORD *)(v70 + 8);
LABEL_95:
          v78 = *(float *)(v12 + 216);
          if (v77)
          {
            v79 = 0;
            v80 = v75;
            do
            {
              v78 = v78
                  + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * v79) + 4 * v10->u8[v79])
                          + (float)(*(float *)(v80 + 4 * v10->u8[v79]) * -2.0));
              ++v79;
              v80 += 4 * *(_QWORD *)(v70 + 40);
            }
            while (v77 != v79);
          }
          if (*a5 <= v78)
            goto LABEL_114;
          if (v188)
            v81 = *(_QWORD *)(v188 + 8 * v72);
          else
            v81 = v72 | (v13 << 32);
          if (a7 < 2)
          {
            v82 = 1;
            goto LABEL_113;
          }
          v83 = 3;
          v84 = 2;
          v85 = 1;
          while (1)
          {
            v86 = v73[v84];
            if (v83 == a7 + 1 || (v87 = v73[v83], v86 > v87))
            {
              if (v86 < v78)
                goto LABEL_112;
            }
            else
            {
              v86 = v73[v83];
              v84 = v83;
              if (v87 < v78)
              {
LABEL_112:
                v82 = v85;
LABEL_113:
                v73[v82] = v78;
                *(_QWORD *)(v76 + 8 * v82) = v81;
                v18 = ++v71;
LABEL_114:
                v10 = (int8x16_t *)((char *)v10 + v74);
                if (++v72 == v11)
                  return v18;
                goto LABEL_95;
              }
            }
            v82 = v84;
            v73[v85] = v86;
            *(_QWORD *)(v76 + 8 * v85) = *(_QWORD *)(v76 + 8 * v84);
            v84 *= 2;
            v83 = (2 * v82) | 1;
            v85 = v82;
            if (v84 > a7)
              goto LABEL_113;
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v190, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v190, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoder8>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          v34 = *(_QWORD *)(a1 + 32);
          if (*(_DWORD *)(v34 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v18 = 0;
          v35 = 0;
          v36 = 0;
          v37 = a5 - 1;
          v38 = *(_QWORD *)(v34 + 32);
          v39 = *(_QWORD *)(a1 + 56);
          v40 = a6 - 8;
          v41 = *(_QWORD *)(v34 + 8);
LABEL_41:
          v42 = *(float *)(v12 + 216);
          if (v41)
          {
            v43 = 0;
            v44 = v39;
            v45 = v188;
            do
            {
              v42 = v42 + *(float *)(v44 + 4 * v10->u8[v43++]);
              v44 += 4 * *(_QWORD *)(v34 + 40);
            }
            while (v41 != v43);
          }
          else
          {
            v45 = v188;
          }
          if (*a5 <= v42)
            goto LABEL_62;
          if (v45)
            v46 = *(_QWORD *)(v45 + 8 * v36);
          else
            v46 = v36 | (v13 << 32);
          if (a7 < 2)
          {
            v47 = 1;
            goto LABEL_61;
          }
          v48 = 3;
          v49 = 2;
          v50 = 1;
          while (1)
          {
            v51 = v37[v49];
            if (v48 == a7 + 1 || (v52 = v37[v48], v51 > v52))
            {
              if (v51 < v42)
                goto LABEL_60;
            }
            else
            {
              v51 = v37[v48];
              v49 = v48;
              if (v52 < v42)
              {
LABEL_60:
                v47 = v50;
LABEL_61:
                v37[v47] = v42;
                *(_QWORD *)(v40 + 8 * v47) = v46;
                v18 = ++v35;
LABEL_62:
                v10 = (int8x16_t *)((char *)v10 + v38);
                if (++v36 == v11)
                  return v18;
                goto LABEL_41;
              }
            }
            v47 = v49;
            v37[v50] = v51;
            *(_QWORD *)(v40 + 8 * v50) = *(_QWORD *)(v40 + 8 * v49);
            v49 *= 2;
            v48 = (2 * v47) | 1;
            v50 = v47;
            if (v49 > a7)
              goto LABEL_61;
          }
        }
      }
    }
    else
    {
      v186 = a2;
      if (*(_BYTE *)(a1 + 44))
      {
        v88 = (const float **)(a1 + 72);
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 72), v13);
      }
      else
      {
        v88 = (const float **)(a1 + 136);
      }
      if (v186)
      {
        v18 = 0;
        v169 = 0;
        v170 = *v88;
        v185 = v13 << 32;
        v171 = a5 - 1;
        v172 = a6 - 8;
LABEL_250:
        faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)v10, *(_QWORD *)(v12 + 80));
        v173 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32);
        v174 = faiss::fvec_L2sqr(*(faiss **)(v12 + 80), v170, *(int *)(v12 + 24));
        if (*a5 <= v174)
          goto LABEL_266;
        if (v188)
          v175 = *(_QWORD *)(v188 + 8 * v169);
        else
          v175 = v169 | v185;
        if (a7 < 2)
        {
          v176 = 1;
          goto LABEL_265;
        }
        v177 = 3;
        v178 = 2;
        v179 = 1;
        while (1)
        {
          v180 = v171[v178];
          if (v177 == a7 + 1 || (v181 = v171[v177], v180 > v181))
          {
            if (v180 < v174)
              goto LABEL_264;
          }
          else
          {
            v180 = v171[v177];
            v178 = v177;
            if (v181 < v174)
            {
LABEL_264:
              v176 = v179;
LABEL_265:
              v171[v176] = v174;
              *(_QWORD *)(v172 + 8 * v176) = v175;
              ++v18;
LABEL_266:
              v10 = (int8x16_t *)((char *)v10 + v173);
              if (++v169 == v186)
                return v18;
              goto LABEL_250;
            }
          }
          v176 = v178;
          v171[v179] = v180;
          *(_QWORD *)(v172 + 8 * v179) = *(_QWORD *)(v172 + 8 * v178);
          v178 *= 2;
          v177 = (2 * v176) | 1;
          v179 = v176;
          if (v178 > a7)
            goto LABEL_265;
        }
      }
    }
    return 0;
  }
  if (v15 != 2)
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(v16 + 32);
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        v18 = 0;
        if (a2)
        {
          v101 = 0;
          v102 = 0;
          v21 = 0;
          v103 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v104 = *(int8x16_t **)(a1 + 160);
          v105 = *v104;
          v106 = v104[1].i32[0];
          v107 = a5 - 1;
          v108 = a6 - 8;
LABEL_145:
          v109 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v105))))));
          v110 = (int8x8_t)vadd_s32(vdup_lane_s32(v109, 1), v109);
          v111 = v110.i32[0];
          v110.i32[0] = v10[1].i32[0] ^ v106;
          v112 = (uint8x8_t)vcnt_s8(v110);
          v112.i16[0] = vaddlv_u8(v112);
          a1 = v112.u32[0];
          if (v111 + v112.i32[0] >= v103)
            goto LABEL_166;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(v112.u32[0], a2, a3);
          v113 = *(float *)(v12 + 216);
          v114 = *(_QWORD *)(v16 + 8);
          if (v114)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v113 = v113 + *(float *)(a2 + 4 * v10->u8[a1++]);
              a2 += a3;
            }
            while (v114 != a1);
          }
          ++v21;
          if (*a5 <= v113)
            goto LABEL_166;
          if (a4)
            v115 = *(_QWORD *)(a4 + 8 * v102);
          else
            v115 = v102 | (v13 << 32);
          if (a7 < 2)
          {
            v116 = 1;
            goto LABEL_165;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v117 = v107[a1];
            if (a3 == a7 + 1 || (v118 = v107[a3], v117 > v118))
            {
              if (v117 < v113)
                goto LABEL_164;
            }
            else
            {
              v117 = v107[a3];
              a1 = a3;
              if (v118 < v113)
              {
LABEL_164:
                v116 = a2;
LABEL_165:
                v107[v116] = v113;
                *(_QWORD *)(v108 + 8 * v116) = v115;
                v18 = ++v101;
LABEL_166:
                v10 = (int8x16_t *)((char *)v10 + 20);
                if (++v102 == v11)
                  goto LABEL_244;
                goto LABEL_145;
              }
            }
            v116 = a1;
            v107[a2] = v117;
            *(_QWORD *)(v108 + 8 * a2) = *(_QWORD *)(v108 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v116) | 1;
            a2 = v116;
            if (a1 > a7)
              goto LABEL_165;
          }
        }
        goto LABEL_243;
      case 32:
        v18 = 0;
        if (a2)
        {
          v152 = 0;
          v153 = 0;
          v21 = 0;
          v154 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v155 = *(int8x16_t **)(a1 + 160);
          v157 = *v155;
          v156 = v155[1];
          v158 = a5 - 1;
          v159 = a6 - 8;
LABEL_220:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v157))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v156))))))) >= v154)goto LABEL_241;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v160 = *(float *)(v12 + 216);
          v161 = *(_QWORD *)(v16 + 8);
          if (v161)
          {
            v162 = 0;
            a1 = *(_QWORD *)(v12 + 56);
            a2 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              a3 = v10->u8[v162];
              v160 = v160 + *(float *)(a1 + 4 * a3);
              ++v162;
              a1 += a2;
            }
            while (v161 != v162);
          }
          ++v21;
          if (*a5 <= v160)
            goto LABEL_241;
          if (a4)
            v163 = *(_QWORD *)(a4 + 8 * v153);
          else
            v163 = v153 | (v13 << 32);
          if (a7 < 2)
          {
            a3 = 1;
            goto LABEL_240;
          }
          a2 = 3;
          v164 = 2;
          a1 = 1;
          while (1)
          {
            v165 = v158[v164];
            if (a2 == a7 + 1 || (v166 = v158[a2], v165 > v166))
            {
              if (v165 < v160)
                goto LABEL_239;
            }
            else
            {
              v165 = v158[a2];
              v164 = a2;
              if (v166 < v160)
              {
LABEL_239:
                a3 = a1;
LABEL_240:
                v158[a3] = v160;
                *(_QWORD *)(v159 + 8 * a3) = v163;
                v18 = ++v152;
LABEL_241:
                v10 += 2;
                if (++v153 == v11)
                  goto LABEL_244;
                goto LABEL_220;
              }
            }
            a3 = v164;
            v158[a1] = v165;
            *(_QWORD *)(v159 + 8 * a1) = *(_QWORD *)(v159 + 8 * v164);
            v164 *= 2;
            a2 = (2 * a3) | 1;
            a1 = a3;
            if (v164 > a7)
              goto LABEL_240;
          }
        }
        goto LABEL_243;
      case 64:
        v18 = 0;
        if (a2)
        {
          v53 = 0;
          v54 = 0;
          v21 = 0;
          v55 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v56 = *(int8x16_t **)(a1 + 160);
          v58 = v56[2];
          v57 = v56[3];
          v60 = *v56;
          v59 = v56[1];
          v61 = a5 - 1;
          v62 = a6 - 8;
LABEL_69:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v60))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v59)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[2], v58))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[3], v57)))))))) >= v55)goto LABEL_90;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v63 = *(float *)(v12 + 216);
          v64 = *(_QWORD *)(v16 + 8);
          if (v64)
          {
            v65 = 0;
            a1 = *(_QWORD *)(v12 + 56);
            a2 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              a3 = v10->u8[v65];
              v63 = v63 + *(float *)(a1 + 4 * a3);
              ++v65;
              a1 += a2;
            }
            while (v64 != v65);
          }
          ++v21;
          if (*a5 <= v63)
            goto LABEL_90;
          if (a4)
            v66 = *(_QWORD *)(a4 + 8 * v54);
          else
            v66 = v54 | (v13 << 32);
          if (a7 < 2)
          {
            a3 = 1;
            goto LABEL_89;
          }
          a2 = 3;
          v67 = 2;
          a1 = 1;
          while (1)
          {
            v68 = v61[v67];
            if (a2 == a7 + 1 || (v69 = v61[a2], v68 > v69))
            {
              if (v68 < v63)
                goto LABEL_88;
            }
            else
            {
              v68 = v61[a2];
              v67 = a2;
              if (v69 < v63)
              {
LABEL_88:
                a3 = a1;
LABEL_89:
                v61[a3] = v63;
                *(_QWORD *)(v62 + 8 * a3) = v66;
                v18 = ++v53;
LABEL_90:
                v10 += 4;
                if (++v54 == v11)
                  goto LABEL_244;
                goto LABEL_69;
              }
            }
            a3 = v67;
            v61[a1] = v68;
            *(_QWORD *)(v62 + 8 * a1) = *(_QWORD *)(v62 + 8 * v67);
            v67 *= 2;
            a2 = (2 * a3) | 1;
            a1 = a3;
            if (v67 > a7)
              goto LABEL_89;
          }
        }
        goto LABEL_243;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        v18 = 0;
        if (a2)
        {
          v89 = 0;
          v90 = 0;
          v21 = 0;
          v91 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v92 = **(_DWORD **)(a1 + 160);
          v93 = a5 - 1;
          v94 = a6 - 8;
LABEL_120:
          a8.i32[0] = v10->i32[0] ^ v92;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v91)
            goto LABEL_141;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v95 = *(float *)(v12 + 216);
          v96 = *(_QWORD *)(v16 + 8);
          if (v96)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v95 = v95 + *(float *)(a2 + 4 * v10->u8[a1++]);
              a2 += a3;
            }
            while (v96 != a1);
          }
          ++v21;
          if (*a5 <= v95)
            goto LABEL_141;
          if (a4)
            v97 = *(_QWORD *)(a4 + 8 * v90);
          else
            v97 = v90 | (v13 << 32);
          if (a7 < 2)
          {
            v98 = 1;
            goto LABEL_140;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v99 = v93[a1];
            if (a3 == a7 + 1 || (v100 = v93[a3], v99 > v100))
            {
              if (v99 < v95)
                goto LABEL_139;
            }
            else
            {
              v99 = v93[a3];
              a1 = a3;
              if (v100 < v95)
              {
LABEL_139:
                v98 = a2;
LABEL_140:
                v93[v98] = v95;
                *(_QWORD *)(v94 + 8 * v98) = v97;
                v18 = ++v89;
LABEL_141:
                v10 = (int8x16_t *)((char *)v10 + 4);
                if (++v90 == v11)
                  goto LABEL_244;
                goto LABEL_120;
              }
            }
            v98 = a1;
            v93[a2] = v99;
            *(_QWORD *)(v94 + 8 * a2) = *(_QWORD *)(v94 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v98) | 1;
            a2 = v98;
            if (a1 > a7)
              goto LABEL_140;
          }
        }
        goto LABEL_243;
      case 8:
        v18 = 0;
        if (a2)
        {
          v139 = 0;
          v140 = 0;
          v21 = 0;
          v141 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v142 = **(_QWORD **)(a1 + 160);
          v143 = a5 - 1;
          v144 = a6 - 8;
LABEL_195:
          v145 = (uint8x8_t)vcnt_s8((int8x8_t)(v10->i64[0] ^ v142));
          v145.i16[0] = vaddlv_u8(v145);
          if (v141 <= v145.i32[0])
            goto LABEL_216;
          if (*(_DWORD *)(v16 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
          v146 = *(float *)(v12 + 216);
          v147 = *(_QWORD *)(v16 + 8);
          if (v147)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v146 = v146 + *(float *)(a2 + 4 * v10->u8[a1++]);
              a2 += a3;
            }
            while (v147 != a1);
          }
          ++v21;
          if (*a5 <= v146)
            goto LABEL_216;
          if (a4)
            v148 = *(_QWORD *)(a4 + 8 * v140);
          else
            v148 = v140 | (v13 << 32);
          if (a7 < 2)
          {
            v149 = 1;
            goto LABEL_215;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v150 = v143[a1];
            if (a3 == a7 + 1 || (v151 = v143[a3], v150 > v151))
            {
              if (v150 < v146)
                goto LABEL_214;
            }
            else
            {
              v150 = v143[a3];
              a1 = a3;
              if (v151 < v146)
              {
LABEL_214:
                v149 = a2;
LABEL_215:
                v143[v149] = v146;
                *(_QWORD *)(v144 + 8 * v149) = v148;
                v18 = ++v139;
LABEL_216:
                v10 = (int8x16_t *)((char *)v10 + 8);
                if (++v140 == v11)
                  goto LABEL_244;
                goto LABEL_195;
              }
            }
            v149 = a1;
            v143[a2] = v150;
            *(_QWORD *)(v144 + 8 * a2) = *(_QWORD *)(v144 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v149) | 1;
            a2 = v149;
            if (a1 > a7)
              goto LABEL_215;
          }
        }
        goto LABEL_243;
      case 16:
        v18 = 0;
        if (a2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v23 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
          v24 = a5 - 1;
          v25 = a6 - 8;
          while (1)
          {
            v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v23))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v22)
              goto LABEL_33;
            if (*(_DWORD *)(v16 + 16) != 8)
              faiss::IndexIVFPQ::scanListWithTable(a1, a2, a3);
            v27 = *(float *)(v12 + 216);
            v28 = *(_QWORD *)(v16 + 8);
            if (v28)
            {
              v29 = 0;
              a1 = *(_QWORD *)(v12 + 56);
              a2 = 4 * *(_QWORD *)(v16 + 40);
              do
              {
                a3 = v10->u8[v29];
                v27 = v27 + *(float *)(a1 + 4 * a3);
                ++v29;
                a1 += a2;
              }
              while (v28 != v29);
            }
            ++v21;
            if (*a5 <= v27)
              goto LABEL_33;
            if (a4)
              v30 = *(_QWORD *)(a4 + 8 * v20);
            else
              v30 = v20 | (v13 << 32);
            if (a7 < 2)
            {
              a3 = 1;
              goto LABEL_32;
            }
            a2 = 3;
            v31 = 2;
            a1 = 1;
            while (1)
            {
              v32 = v24[v31];
              if (a2 != a7 + 1)
              {
                v33 = v24[a2];
                if (v32 <= v33)
                  break;
              }
              if (v32 < v27)
                goto LABEL_31;
LABEL_29:
              a3 = v31;
              v24[a1] = v32;
              *(_QWORD *)(v25 + 8 * a1) = *(_QWORD *)(v25 + 8 * v31);
              v31 *= 2;
              a2 = (2 * a3) | 1;
              a1 = a3;
              if (v31 > a7)
                goto LABEL_32;
            }
            v32 = v24[a2];
            v31 = a2;
            if (v33 >= v27)
              goto LABEL_29;
LABEL_31:
            a3 = a1;
LABEL_32:
            v24[a3] = v27;
            *(_QWORD *)(v25 + 8 * a3) = v30;
            v18 = ++v19;
LABEL_33:
            ++v10;
            if (++v20 == v11)
            {
LABEL_244:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              v167 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v21;
              goto LABEL_245;
            }
          }
        }
LABEL_243:
        v21 = 0;
        goto LABEL_244;
    }
  }
  v187 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
  v190 = *(_QWORD *)(a1 + 160);
  v191 = (int)v17 / 8;
  v192 = v17 - (v16 & 0xFFFFFFF8);
  v18 = 0;
  if (!a2)
  {
    v120 = 0;
    goto LABEL_270;
  }
  v119 = 0;
  v120 = 0;
  v183 = v13 << 32;
  v184 = (int)v17;
  v121 = a5 - 1;
  v122 = a6 - 8;
  v123 = a7 + 1;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v190, (const unsigned __int8 *)v10);
    if ((int)a1 >= v187)
      goto LABEL_191;
    v126 = *(_QWORD *)(v12 + 32);
    if (*(_DWORD *)(v126 + 16) != 8)
      faiss::IndexIVFPQ::scanListWithTable(a1, v124, v125);
    v127 = *(float *)(v12 + 216);
    v128 = *(_QWORD *)(v126 + 8);
    if (v128)
    {
      v129 = 0;
      v130 = *(_QWORD *)(v12 + 56);
      v131 = 4 * *(_QWORD *)(v126 + 40);
      do
      {
        v127 = v127 + *(float *)(v130 + 4 * v10->u8[v129++]);
        v130 += v131;
      }
      while (v128 != v129);
    }
    ++v120;
    if (*a5 <= v127)
      goto LABEL_191;
    if (v188)
      v132 = *(_QWORD *)(v188 + 8 * v119);
    else
      v132 = v119 | v183;
    if (a7 < 2)
    {
      v133 = 1;
      goto LABEL_190;
    }
    v134 = 3;
    v135 = 2;
    v136 = 1;
    while (1)
    {
      v137 = v121[v135];
      if (v134 != v123)
      {
        v138 = v121[v134];
        if (v137 <= v138)
          break;
      }
      if (v137 < v127)
        goto LABEL_189;
LABEL_187:
      v133 = v135;
      v121[v136] = v137;
      *(_QWORD *)(v122 + 8 * v136) = *(_QWORD *)(v122 + 8 * v135);
      v135 *= 2;
      v134 = (2 * v133) | 1;
      v136 = v133;
      if (v135 > a7)
        goto LABEL_190;
    }
    v137 = v121[v134];
    v135 = v134;
    if (v138 >= v127)
      goto LABEL_187;
LABEL_189:
    v133 = v136;
LABEL_190:
    v121[v133] = v127;
    *(_QWORD *)(v122 + 8 * v133) = v132;
    ++v18;
LABEL_191:
    v10 = (int8x16_t *)((char *)v10 + v184);
    ++v119;
  }
  while (v119 != v11);
LABEL_270:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  v167 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v120;
LABEL_245:
  *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v167;
  return v18;
}

void sub_1D48F955C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::scan_codes_range(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  int v6;
  float v8;
  int8x16_t *v9;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  int8x16_t v19;
  uint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int8x16_t *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const float **v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int32 v80;
  int8x16_t *v81;
  int8x16_t v82;
  __int32 v83;
  uint64_t v84;
  int32x2_t v85;
  int8x8_t v86;
  __int32 v87;
  uint8x8_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int8x16_t *v124;
  int8x16_t v125;
  int8x16_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const float *v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  void *exception;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  uint64_t v151;
  int v152;
  int v153;

  v8 = *(float *)&a6;
  v9 = a3;
  v11 = a1;
  v12 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v14 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) >= 1)
  {
    if (v14 != 2)
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            v79 = 0;
            v17 = 0;
            v80 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v81 = *(int8x16_t **)(a1 + 160);
            v82 = *v81;
            v83 = v81[1].i32[0];
            v84 = v12 << 32;
            v149 = *v81;
            do
            {
              v85 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v82))))));
              v86 = (int8x8_t)vadd_s32(vdup_lane_s32(v85, 1), v85);
              v87 = v86.i32[0];
              v86.i32[0] = v9[1].i32[0] ^ v83;
              v88 = (uint8x8_t)vcnt_s8(v86);
              v88.i16[0] = vaddlv_u8(v88);
              if (v87 + v88.i32[0] < v80)
              {
                v89 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v89 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v90 = *(float *)(v11 + 216);
                v91 = *(_QWORD *)(v89 + 8);
                if (v91)
                {
                  v92 = 0;
                  v93 = *(_QWORD *)(v11 + 56);
                  v94 = 4 * *(_QWORD *)(v89 + 40);
                  do
                  {
                    v90 = v90 + *(float *)(v93 + 4 * v9->u8[v92++]);
                    v93 += v94;
                  }
                  while (v91 != v92);
                }
                ++v17;
                if (v90 < v8)
                {
                  if (a4)
                    v95 = *(_QWORD *)(a4 + 8 * v79);
                  else
                    v95 = v79 | v84;
                  faiss::RangeQueryResult::add(this, v90, v95);
                  v82 = v149;
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 20);
              ++v79;
            }
            while (v79 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 32:
          if (a2)
          {
            v122 = 0;
            v17 = 0;
            v123 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v124 = *(int8x16_t **)(a1 + 160);
            v126 = *v124;
            v125 = v124[1];
            v127 = v12 << 32;
            v146 = *v124;
            v150 = v125;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v126))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v125))))))) < v123)
              {
                v128 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v128 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v129 = *(float *)(v11 + 216);
                v130 = *(_QWORD *)(v128 + 8);
                if (v130)
                {
                  v131 = 0;
                  v132 = *(_QWORD *)(v11 + 56);
                  v133 = 4 * *(_QWORD *)(v128 + 40);
                  do
                  {
                    v129 = v129 + *(float *)(v132 + 4 * v9->u8[v131++]);
                    v132 += v133;
                  }
                  while (v130 != v131);
                }
                ++v17;
                if (v129 < v8)
                {
                  if (a4)
                    v134 = *(_QWORD *)(a4 + 8 * v122);
                  else
                    v134 = v122 | v127;
                  faiss::RangeQueryResult::add(this, v129, v134);
                  v126 = v146;
                  v125 = v150;
                }
              }
              v9 += 2;
              ++v122;
            }
            while (v122 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 64:
          if (a2)
          {
            v39 = 0;
            v17 = 0;
            v40 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v41 = *(int8x16_t **)(a1 + 160);
            v43 = v41[2];
            v42 = v41[3];
            v45 = *v41;
            v44 = v41[1];
            v46 = v12 << 32;
            v145 = v43;
            v148 = v42;
            v143 = *v41;
            v144 = v44;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v45))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v44)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[2], v43))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[3], v42)))))))) < v40)
              {
                v47 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v47 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v48 = *(float *)(v11 + 216);
                v49 = *(_QWORD *)(v47 + 8);
                if (v49)
                {
                  v50 = 0;
                  v51 = *(_QWORD *)(v11 + 56);
                  v52 = 4 * *(_QWORD *)(v47 + 40);
                  do
                  {
                    v48 = v48 + *(float *)(v51 + 4 * v9->u8[v50++]);
                    v51 += v52;
                  }
                  while (v49 != v50);
                }
                ++v17;
                if (v48 < v8)
                {
                  if (a4)
                    v53 = *(_QWORD *)(a4 + 8 * v39);
                  else
                    v53 = v39 | v46;
                  faiss::RangeQueryResult::add(this, v48, v53);
                  v43 = v145;
                  v42 = v148;
                  v45 = v143;
                  v44 = v144;
                }
              }
              v9 += 4;
              ++v39;
            }
            while (v39 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            v68 = 0;
            v17 = 0;
            v69 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v70 = **(_DWORD **)(a1 + 160);
            v71 = v12 << 32;
            do
            {
              LODWORD(a6) = v9->i32[0] ^ v70;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v69)
              {
                v72 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v72 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v73 = *(float *)(v11 + 216);
                v74 = *(_QWORD *)(v72 + 8);
                if (v74)
                {
                  v75 = 0;
                  v76 = *(_QWORD *)(v11 + 56);
                  v77 = 4 * *(_QWORD *)(v72 + 40);
                  do
                  {
                    v73 = v73 + *(float *)(v76 + 4 * v9->u8[v75++]);
                    v76 += v77;
                  }
                  while (v74 != v75);
                }
                ++v17;
                if (v73 < v8)
                {
                  if (a4)
                    v78 = *(_QWORD *)(a4 + 8 * v68);
                  else
                    v78 = v68 | v71;
                  faiss::RangeQueryResult::add(this, v73, v78);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 4);
              ++v68;
            }
            while (v68 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 8:
          if (a2)
          {
            v110 = 0;
            v17 = 0;
            v111 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v112 = **(_QWORD **)(a1 + 160);
            v113 = v12 << 32;
            do
            {
              v114 = (uint8x8_t)vcnt_s8((int8x8_t)(v9->i64[0] ^ v112));
              v114.i16[0] = vaddlv_u8(v114);
              if (v111 > v114.i32[0])
              {
                v115 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v115 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v116 = *(float *)(v11 + 216);
                v117 = *(_QWORD *)(v115 + 8);
                if (v117)
                {
                  v118 = 0;
                  v119 = *(_QWORD *)(v11 + 56);
                  v120 = 4 * *(_QWORD *)(v115 + 40);
                  do
                  {
                    v116 = v116 + *(float *)(v119 + 4 * v9->u8[v118++]);
                    v119 += v120;
                  }
                  while (v117 != v118);
                }
                ++v17;
                if (v116 < v8)
                {
                  if (a4)
                    v121 = *(_QWORD *)(a4 + 8 * v110);
                  else
                    v121 = v110 | v113;
                  faiss::RangeQueryResult::add(this, v116, v121);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 8);
              ++v110;
            }
            while (v110 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 16:
          if (a2)
          {
            v16 = 0;
            v17 = 0;
            v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v19 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
            v20 = v12 << 32;
            v147 = v19;
            do
            {
              v21 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v19))))));
              if (vadd_s32(vdup_lane_s32(v21, 1), v21).i32[0] < v18)
              {
                v22 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v22 + 16) != 8)
                  faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
                v23 = *(float *)(v11 + 216);
                v24 = *(_QWORD *)(v22 + 8);
                if (v24)
                {
                  v25 = 0;
                  v26 = *(_QWORD *)(v11 + 56);
                  v27 = 4 * *(_QWORD *)(v22 + 40);
                  do
                  {
                    v23 = v23 + *(float *)(v26 + 4 * v9->u8[v25++]);
                    v26 += v27;
                  }
                  while (v24 != v25);
                }
                ++v17;
                if (v23 < v8)
                {
                  if (a4)
                    v28 = *(_QWORD *)(a4 + 8 * v16);
                  else
                    v28 = v16 | v20;
                  faiss::RangeQueryResult::add(this, v23, v28);
                  v19 = v147;
                }
              }
              ++v9;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_144;
          }
LABEL_143:
          v17 = 0;
LABEL_144:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
          v135 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_145:
          *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v135;
          return;
      }
    }
    v96 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
    v151 = *(_QWORD *)(a1 + 160);
    v152 = (int)v15 / 8;
    v153 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      v97 = 0;
      v98 = 0;
      v99 = (int)v15;
      v100 = v12 << 32;
      do
      {
        a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v151, (const unsigned __int8 *)v9);
        if ((int)a1 < v96)
        {
          v103 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v103 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, v101, v102);
          v104 = *(float *)(v11 + 216);
          v105 = *(_QWORD *)(v103 + 8);
          if (v105)
          {
            v106 = 0;
            v107 = *(_QWORD *)(v11 + 56);
            v108 = 4 * *(_QWORD *)(v103 + 40);
            do
            {
              v104 = v104 + *(float *)(v107 + 4 * v9->u8[v106++]);
              v107 += v108;
            }
            while (v105 != v106);
          }
          ++v98;
          if (v104 < v8)
          {
            if (a4)
              v109 = *(_QWORD *)(a4 + 8 * v97);
            else
              v109 = v97 | v100;
            faiss::RangeQueryResult::add(this, v104, v109);
          }
        }
        v9 = (int8x16_t *)((char *)v9 + v99);
        ++v97;
      }
      while (v97 != a2);
    }
    else
    {
      v98 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
    v135 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v98;
    goto LABEL_145;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        v54 = 0;
        v55 = v12 << 32;
        do
        {
          v56 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v56 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
          v57 = *(float *)(v11 + 216);
          v58 = *(_QWORD *)(v56 + 8);
          if (v58)
          {
            v59 = *(_QWORD *)(v11 + 64);
            v60 = *(uint64_t **)(v11 + 112);
            v61 = v9;
            do
            {
              v63 = v61->u8[0];
              v61 = (int8x16_t *)((char *)v61 + 1);
              v62 = v63;
              v64 = *v60++;
              v57 = v57 + (float)(*(float *)(v64 + 4 * v62) + (float)(*(float *)(v59 + 4 * v62) * -2.0));
              v59 += 4 * *(_QWORD *)(v56 + 40);
              --v58;
            }
            while (v58);
          }
          v65 = *(_QWORD *)(v56 + 32);
          if (v57 < v8)
          {
            if (a4)
              v66 = *(_QWORD *)(a4 + 8 * v54);
            else
              v66 = v54 | v55;
            faiss::RangeQueryResult::add(this, v57, v66);
          }
          v9 = (int8x16_t *)((char *)v9 + v65);
          ++v54;
        }
        while (v54 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v151, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v151, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoder8>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        v29 = 0;
        v30 = v12 << 32;
        do
        {
          v31 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v31 + 16) != 8)
            faiss::IndexIVFPQ::scanListWithTable(a1, a2, (uint64_t)a3);
          v32 = *(float *)(v11 + 216);
          v33 = *(_QWORD *)(v31 + 8);
          if (v33)
          {
            v34 = *(_QWORD *)(v11 + 56);
            v35 = v9;
            do
            {
              v36 = v35->u8[0];
              v35 = (int8x16_t *)((char *)v35 + 1);
              v32 = v32 + *(float *)(v34 + 4 * v36);
              v34 += 4 * *(_QWORD *)(v31 + 40);
              --v33;
            }
            while (v33);
          }
          v37 = *(_QWORD *)(v31 + 32);
          if (v32 < v8)
          {
            if (a4)
              v38 = *(_QWORD *)(a4 + 8 * v29);
            else
              v38 = v29 | v30;
            faiss::RangeQueryResult::add(this, v32, v38);
          }
          v9 = (int8x16_t *)((char *)v9 + v37);
          ++v29;
        }
        while (v29 != a2);
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 44))
    {
      v67 = (const float **)(a1 + 72);
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 72), v12);
      if (!a2)
        return;
    }
    else
    {
      v67 = (const float **)(a1 + 136);
      if (!a2)
        return;
    }
    v136 = 0;
    v137 = *v67;
    v138 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*(_DWORD **)(v11 + 32), (uint64_t)v9, *(_QWORD *)(v11 + 80));
      v139 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 32);
      v140 = faiss::fvec_L2sqr(*(faiss **)(v11 + 80), v137, *(int *)(v11 + 24));
      if (v140 < v8)
      {
        if (a4)
          v141 = *(_QWORD *)(a4 + 8 * v136);
        else
          v141 = v136 | v138;
        faiss::RangeQueryResult::add(this, v140, v141);
      }
      v9 = (int8x16_t *)((char *)v9 + v139);
      ++v136;
    }
    while (a2 != v136);
  }
}

void sub_1D48F9F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

_QWORD *faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1D82628A4);
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  faiss::_anonymous_namespace_::QueryTables *v5;
  float v6;

  v4 = *(_DWORD *)(a1 + 224);
  v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(_QWORD *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2)
      return;
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::distance_to_code(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  float result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (*(_DWORD *)(a1 + 224) != 2)
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v3 + 16) != 16)
  result = *(float *)(a1 + 216);
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = 4 * *(_QWORD *)(v3 + 40);
    do
    {
      v8 = *a2++;
      result = result + *(float *)(v6 + 4 * v8);
      v6 += v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::scan_codes(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  int8x16_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int32 v22;
  int8x16_t v23;
  float *v24;
  uint64_t v25;
  int32x2_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int8x16_t *v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float *v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  float *v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  float *v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  __int32 v114;
  int8x16_t *v115;
  int8x16_t v116;
  __int32 v117;
  float *v118;
  uint64_t v119;
  int32x2_t v120;
  int8x8_t v121;
  __int32 v122;
  uint8x8_t v123;
  float v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  float *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  float v147;
  float v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  float *v153;
  uint64_t v154;
  uint8x8_t v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  float v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int8x16_t *v165;
  int8x16_t v166;
  int8x16_t v167;
  float *v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  float v175;
  float v176;
  uint64_t v177;
  void *exception;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v185;
  int v186;
  int v187;

  v10 = (int8x16_t *)a3;
  v11 = a2;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v15 = *(_DWORD *)(a1 + 224);
  v183 = a4;
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          v69 = *(_QWORD *)(a1 + 32);
          if (*(_DWORD *)(v69 + 16) != 16)
          v18 = 0;
          v70 = 0;
          v71 = 0;
          v72 = a5 - 1;
          v73 = *(_QWORD *)(v69 + 32);
          v74 = *(_QWORD *)(a1 + 64);
          v75 = a6 - 8;
          v76 = *(_QWORD *)(v69 + 8);
LABEL_93:
          v77 = *(float *)(v12 + 216);
          if (v76)
          {
            v78 = 0;
            v79 = v74;
            do
            {
              v77 = v77
                  + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * v78) + 4 * v10->u16[v78])
                          + (float)(*(float *)(v79 + 4 * v10->u16[v78]) * -2.0));
              ++v78;
              v79 += 4 * *(_QWORD *)(v69 + 40);
            }
            while (v76 != v78);
          }
          if (*a5 >= v77)
            goto LABEL_112;
          if (a4)
            v80 = *(_QWORD *)(a4 + 8 * v71);
          else
            v80 = v71 | (v13 << 32);
          if (a7 < 2)
          {
            v81 = 1;
            goto LABEL_111;
          }
          v82 = 3;
          v83 = 2;
          v84 = 1;
          while (1)
          {
            v85 = v72[v83];
            if (v82 == a7 + 1 || (v86 = v72[v82], v85 < v86))
            {
              if (v85 > v77)
                goto LABEL_110;
            }
            else
            {
              v85 = v72[v82];
              v83 = v82;
              if (v86 > v77)
              {
LABEL_110:
                v81 = v84;
LABEL_111:
                v72[v81] = v77;
                *(_QWORD *)(v75 + 8 * v81) = v80;
                v18 = ++v70;
LABEL_112:
                v10 = (int8x16_t *)((char *)v10 + v73);
                if (++v71 == v11)
                  return v18;
                goto LABEL_93;
              }
            }
            v81 = v83;
            v72[v84] = v85;
            *(_QWORD *)(v75 + 8 * v84) = *(_QWORD *)(v75 + 8 * v83);
            v83 *= 2;
            v82 = (2 * v81) | 1;
            v84 = v81;
            if (v83 > a7)
              goto LABEL_111;
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v185, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v185, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoder16>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          v34 = *(_QWORD *)(a1 + 32);
          if (*(_DWORD *)(v34 + 16) != 16)
          v18 = 0;
          v35 = 0;
          v36 = 0;
          v37 = a5 - 1;
          v38 = *(_QWORD *)(v34 + 32);
          v39 = *(_QWORD *)(a1 + 56);
          v40 = a6 - 8;
          v41 = *(_QWORD *)(v34 + 8);
LABEL_41:
          v42 = *(float *)(v12 + 216);
          if (v41)
          {
            v43 = 0;
            v44 = v39;
            do
            {
              v42 = v42 + *(float *)(v44 + 4 * v10->u16[v43++]);
              v44 += 4 * *(_QWORD *)(v34 + 40);
            }
            while (v41 != v43);
          }
          if (*a5 >= v42)
            goto LABEL_60;
          if (a4)
            v45 = *(_QWORD *)(a4 + 8 * v36);
          else
            v45 = v36 | (v13 << 32);
          if (a7 < 2)
          {
            v46 = 1;
            goto LABEL_59;
          }
          v47 = 3;
          v48 = 2;
          v49 = 1;
          while (1)
          {
            v50 = v37[v48];
            if (v47 == a7 + 1 || (v51 = v37[v47], v50 < v51))
            {
              if (v50 > v42)
                goto LABEL_58;
            }
            else
            {
              v50 = v37[v47];
              v48 = v47;
              if (v51 > v42)
              {
LABEL_58:
                v46 = v49;
LABEL_59:
                v37[v46] = v42;
                *(_QWORD *)(v40 + 8 * v46) = v45;
                v18 = ++v35;
LABEL_60:
                v10 = (int8x16_t *)((char *)v10 + v38);
                if (++v36 == v11)
                  return v18;
                goto LABEL_41;
              }
            }
            v46 = v48;
            v37[v49] = v50;
            *(_QWORD *)(v40 + 8 * v49) = *(_QWORD *)(v40 + 8 * v48);
            v48 *= 2;
            v47 = (2 * v46) | 1;
            v49 = v46;
            if (v48 > a7)
              goto LABEL_59;
          }
        }
      }
      return 0;
    }
    if (*(_BYTE *)(a1 + 44))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), v13, *(_QWORD *)(a1 + 72));
      v87 = faiss::fvec_inner_product(*(faiss **)(v12 + 72), *(const float **)(v12 + 136), *(int *)(v12 + 24));
      if (!v11)
        return 0;
    }
    else
    {
      v87 = 0.0;
      if (!a2)
        return 0;
    }
    v18 = 0;
    v88 = 0;
    v181 = v13 << 32;
    v89 = a5 - 1;
    v90 = a6 - 8;
LABEL_117:
    faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)v10, *(_QWORD *)(v12 + 80));
    v91 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32);
    v92 = v87 + faiss::fvec_inner_product(*(faiss **)(v12 + 80), *(const float **)(v12 + 136), *(int *)(v12 + 24));
    if (*a5 >= v92)
      goto LABEL_133;
    if (v183)
      v93 = *(_QWORD *)(v183 + 8 * v88);
    else
      v93 = v88 | v181;
    if (a7 < 2)
    {
      v94 = 1;
      goto LABEL_132;
    }
    v95 = 3;
    v96 = 2;
    v97 = 1;
    while (1)
    {
      v98 = v89[v96];
      if (v95 == a7 + 1 || (v99 = v89[v95], v98 < v99))
      {
        if (v98 > v92)
          goto LABEL_131;
      }
      else
      {
        v98 = v89[v95];
        v96 = v95;
        if (v99 > v92)
        {
LABEL_131:
          v94 = v97;
LABEL_132:
          v89[v94] = v92;
          *(_QWORD *)(v90 + 8 * v94) = v93;
          ++v18;
LABEL_133:
          v10 = (int8x16_t *)((char *)v10 + v91);
          if (++v88 == v11)
            return v18;
          goto LABEL_117;
        }
      }
      v94 = v96;
      v89[v97] = v98;
      *(_QWORD *)(v90 + 8 * v97) = *(_QWORD *)(v90 + 8 * v96);
      v96 *= 2;
      v95 = (2 * v94) | 1;
      v97 = v94;
      if (v96 > a7)
        goto LABEL_132;
    }
  }
  if (v15 != 2)
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(v16 + 32);
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        v18 = 0;
        if (a2)
        {
          v112 = 0;
          v113 = 0;
          v21 = 0;
          v114 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v115 = *(int8x16_t **)(a1 + 160);
          v116 = *v115;
          v117 = v115[1].i32[0];
          v118 = a5 - 1;
          v119 = a6 - 8;
LABEL_162:
          v120 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v116))))));
          v121 = (int8x8_t)vadd_s32(vdup_lane_s32(v120, 1), v120);
          v122 = v121.i32[0];
          v121.i32[0] = v10[1].i32[0] ^ v117;
          v123 = (uint8x8_t)vcnt_s8(v121);
          v123.i16[0] = vaddlv_u8(v123);
          a1 = v123.u32[0];
          if (v122 + v123.i32[0] >= v114)
            goto LABEL_183;
          if (*(_DWORD *)(v16 + 16) != 16)
          v124 = *(float *)(v12 + 216);
          v125 = *(_QWORD *)(v16 + 8);
          if (v125)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v124 = v124 + *(float *)(a2 + 4 * v10->u16[a1++]);
              a2 += a3;
            }
            while (v125 != a1);
          }
          ++v21;
          if (*a5 >= v124)
            goto LABEL_183;
          if (a4)
            v126 = *(_QWORD *)(a4 + 8 * v113);
          else
            v126 = v113 | (v13 << 32);
          if (a7 < 2)
          {
            v127 = 1;
            goto LABEL_182;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v128 = v118[a1];
            if (a3 == a7 + 1 || (v129 = v118[a3], v128 < v129))
            {
              if (v128 > v124)
                goto LABEL_181;
            }
            else
            {
              v128 = v118[a3];
              a1 = a3;
              if (v129 > v124)
              {
LABEL_181:
                v127 = a2;
LABEL_182:
                v118[v127] = v124;
                *(_QWORD *)(v119 + 8 * v127) = v126;
                v18 = ++v112;
LABEL_183:
                v10 = (int8x16_t *)((char *)v10 + 20);
                if (++v113 == v11)
                  goto LABEL_261;
                goto LABEL_162;
              }
            }
            v127 = a1;
            v118[a2] = v128;
            *(_QWORD *)(v119 + 8 * a2) = *(_QWORD *)(v119 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v127) | 1;
            a2 = v127;
            if (a1 > a7)
              goto LABEL_182;
          }
        }
        goto LABEL_260;
      case 32:
        v18 = 0;
        if (a2)
        {
          v162 = 0;
          v163 = 0;
          v21 = 0;
          v164 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v165 = *(int8x16_t **)(a1 + 160);
          v167 = *v165;
          v166 = v165[1];
          v168 = a5 - 1;
          v169 = a6 - 8;
LABEL_237:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v167))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v166))))))) >= v164)goto LABEL_258;
          if (*(_DWORD *)(v16 + 16) != 16)
          v170 = *(float *)(v12 + 216);
          v171 = *(_QWORD *)(v16 + 8);
          if (v171)
          {
            v172 = 0;
            a1 = *(_QWORD *)(v12 + 56);
            a2 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              a3 = v10->u16[v172];
              v170 = v170 + *(float *)(a1 + 4 * a3);
              ++v172;
              a1 += a2;
            }
            while (v171 != v172);
          }
          ++v21;
          if (*a5 >= v170)
            goto LABEL_258;
          if (a4)
            v173 = *(_QWORD *)(a4 + 8 * v163);
          else
            v173 = v163 | (v13 << 32);
          if (a7 < 2)
          {
            a3 = 1;
            goto LABEL_257;
          }
          a2 = 3;
          v174 = 2;
          a1 = 1;
          while (1)
          {
            v175 = v168[v174];
            if (a2 == a7 + 1 || (v176 = v168[a2], v175 < v176))
            {
              if (v175 > v170)
                goto LABEL_256;
            }
            else
            {
              v175 = v168[a2];
              v174 = a2;
              if (v176 > v170)
              {
LABEL_256:
                a3 = a1;
LABEL_257:
                v168[a3] = v170;
                *(_QWORD *)(v169 + 8 * a3) = v173;
                v18 = ++v162;
LABEL_258:
                v10 += 2;
                if (++v163 == v11)
                  goto LABEL_261;
                goto LABEL_237;
              }
            }
            a3 = v174;
            v168[a1] = v175;
            *(_QWORD *)(v169 + 8 * a1) = *(_QWORD *)(v169 + 8 * v174);
            v174 *= 2;
            a2 = (2 * a3) | 1;
            a1 = a3;
            if (v174 > a7)
              goto LABEL_257;
          }
        }
        goto LABEL_260;
      case 64:
        v18 = 0;
        if (a2)
        {
          v52 = 0;
          v53 = 0;
          v21 = 0;
          v54 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v55 = *(int8x16_t **)(a1 + 160);
          v57 = v55[2];
          v56 = v55[3];
          v59 = *v55;
          v58 = v55[1];
          v60 = a5 - 1;
          v61 = a6 - 8;
LABEL_67:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v59))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v58)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[2], v57))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[3], v56)))))))) >= v54)goto LABEL_88;
          if (*(_DWORD *)(v16 + 16) != 16)
          v62 = *(float *)(v12 + 216);
          v63 = *(_QWORD *)(v16 + 8);
          if (v63)
          {
            v64 = 0;
            a1 = *(_QWORD *)(v12 + 56);
            a2 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              a3 = v10->u16[v64];
              v62 = v62 + *(float *)(a1 + 4 * a3);
              ++v64;
              a1 += a2;
            }
            while (v63 != v64);
          }
          ++v21;
          if (*a5 >= v62)
            goto LABEL_88;
          if (a4)
            v65 = *(_QWORD *)(a4 + 8 * v53);
          else
            v65 = v53 | (v13 << 32);
          if (a7 < 2)
          {
            a3 = 1;
            goto LABEL_87;
          }
          a2 = 3;
          v66 = 2;
          a1 = 1;
          while (1)
          {
            v67 = v60[v66];
            if (a2 == a7 + 1 || (v68 = v60[a2], v67 < v68))
            {
              if (v67 > v62)
                goto LABEL_86;
            }
            else
            {
              v67 = v60[a2];
              v66 = a2;
              if (v68 > v62)
              {
LABEL_86:
                a3 = a1;
LABEL_87:
                v60[a3] = v62;
                *(_QWORD *)(v61 + 8 * a3) = v65;
                v18 = ++v52;
LABEL_88:
                v10 += 4;
                if (++v53 == v11)
                  goto LABEL_261;
                goto LABEL_67;
              }
            }
            a3 = v66;
            v60[a1] = v67;
            *(_QWORD *)(v61 + 8 * a1) = *(_QWORD *)(v61 + 8 * v66);
            v66 *= 2;
            a2 = (2 * a3) | 1;
            a1 = a3;
            if (v66 > a7)
              goto LABEL_87;
          }
        }
        goto LABEL_260;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        v18 = 0;
        if (a2)
        {
          v100 = 0;
          v101 = 0;
          v21 = 0;
          v102 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v103 = **(_DWORD **)(a1 + 160);
          v104 = a5 - 1;
          v105 = a6 - 8;
LABEL_137:
          a8.i32[0] = v10->i32[0] ^ v103;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v102)
            goto LABEL_158;
          if (*(_DWORD *)(v16 + 16) != 16)
          v106 = *(float *)(v12 + 216);
          v107 = *(_QWORD *)(v16 + 8);
          if (v107)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v106 = v106 + *(float *)(a2 + 4 * v10->u16[a1++]);
              a2 += a3;
            }
            while (v107 != a1);
          }
          ++v21;
          if (*a5 >= v106)
            goto LABEL_158;
          if (a4)
            v108 = *(_QWORD *)(a4 + 8 * v101);
          else
            v108 = v101 | (v13 << 32);
          if (a7 < 2)
          {
            v109 = 1;
            goto LABEL_157;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v110 = v104[a1];
            if (a3 == a7 + 1 || (v111 = v104[a3], v110 < v111))
            {
              if (v110 > v106)
                goto LABEL_156;
            }
            else
            {
              v110 = v104[a3];
              a1 = a3;
              if (v111 > v106)
              {
LABEL_156:
                v109 = a2;
LABEL_157:
                v104[v109] = v106;
                *(_QWORD *)(v105 + 8 * v109) = v108;
                v18 = ++v100;
LABEL_158:
                v10 = (int8x16_t *)((char *)v10 + 4);
                if (++v101 == v11)
                  goto LABEL_261;
                goto LABEL_137;
              }
            }
            v109 = a1;
            v104[a2] = v110;
            *(_QWORD *)(v105 + 8 * a2) = *(_QWORD *)(v105 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v109) | 1;
            a2 = v109;
            if (a1 > a7)
              goto LABEL_157;
          }
        }
        goto LABEL_260;
      case 8:
        v18 = 0;
        if (a2)
        {
          v149 = 0;
          v150 = 0;
          v21 = 0;
          v151 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v152 = **(_QWORD **)(a1 + 160);
          v153 = a5 - 1;
          v154 = a6 - 8;
LABEL_212:
          v155 = (uint8x8_t)vcnt_s8((int8x8_t)(v10->i64[0] ^ v152));
          v155.i16[0] = vaddlv_u8(v155);
          if (v151 <= v155.i32[0])
            goto LABEL_233;
          if (*(_DWORD *)(v16 + 16) != 16)
          v156 = *(float *)(v12 + 216);
          v157 = *(_QWORD *)(v16 + 8);
          if (v157)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v156 = v156 + *(float *)(a2 + 4 * v10->u16[a1++]);
              a2 += a3;
            }
            while (v157 != a1);
          }
          ++v21;
          if (*a5 >= v156)
            goto LABEL_233;
          if (a4)
            v158 = *(_QWORD *)(a4 + 8 * v150);
          else
            v158 = v150 | (v13 << 32);
          if (a7 < 2)
          {
            v159 = 1;
            goto LABEL_232;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v160 = v153[a1];
            if (a3 == a7 + 1 || (v161 = v153[a3], v160 < v161))
            {
              if (v160 > v156)
                goto LABEL_231;
            }
            else
            {
              v160 = v153[a3];
              a1 = a3;
              if (v161 > v156)
              {
LABEL_231:
                v159 = a2;
LABEL_232:
                v153[v159] = v156;
                *(_QWORD *)(v154 + 8 * v159) = v158;
                v18 = ++v149;
LABEL_233:
                v10 = (int8x16_t *)((char *)v10 + 8);
                if (++v150 == v11)
                  goto LABEL_261;
                goto LABEL_212;
              }
            }
            v159 = a1;
            v153[a2] = v160;
            *(_QWORD *)(v154 + 8 * a2) = *(_QWORD *)(v154 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v159) | 1;
            a2 = v159;
            if (a1 > a7)
              goto LABEL_232;
          }
        }
        goto LABEL_260;
      case 16:
        v18 = 0;
        if (a2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v23 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
          v24 = a5 - 1;
          v25 = a6 - 8;
          while (1)
          {
            v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v23))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v22)
              goto LABEL_33;
            if (*(_DWORD *)(v16 + 16) != 16)
            v27 = *(float *)(v12 + 216);
            v28 = *(_QWORD *)(v16 + 8);
            if (v28)
            {
              v29 = 0;
              a1 = *(_QWORD *)(v12 + 56);
              a2 = 4 * *(_QWORD *)(v16 + 40);
              do
              {
                a3 = v10->u16[v29];
                v27 = v27 + *(float *)(a1 + 4 * a3);
                ++v29;
                a1 += a2;
              }
              while (v28 != v29);
            }
            ++v21;
            if (*a5 >= v27)
              goto LABEL_33;
            if (a4)
              v30 = *(_QWORD *)(a4 + 8 * v20);
            else
              v30 = v20 | (v13 << 32);
            if (a7 < 2)
            {
              a3 = 1;
              goto LABEL_32;
            }
            a2 = 3;
            v31 = 2;
            a1 = 1;
            while (1)
            {
              v32 = v24[v31];
              if (a2 != a7 + 1)
              {
                v33 = v24[a2];
                if (v32 >= v33)
                  break;
              }
              if (v32 > v27)
                goto LABEL_31;
LABEL_29:
              a3 = v31;
              v24[a1] = v32;
              *(_QWORD *)(v25 + 8 * a1) = *(_QWORD *)(v25 + 8 * v31);
              v31 *= 2;
              a2 = (2 * a3) | 1;
              a1 = a3;
              if (v31 > a7)
                goto LABEL_32;
            }
            v32 = v24[a2];
            v31 = a2;
            if (v33 <= v27)
              goto LABEL_29;
LABEL_31:
            a3 = a1;
LABEL_32:
            v24[a3] = v27;
            *(_QWORD *)(v25 + 8 * a3) = v30;
            v18 = ++v19;
LABEL_33:
            ++v10;
            if (++v20 == v11)
            {
LABEL_261:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              v177 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v21;
              goto LABEL_262;
            }
          }
        }
LABEL_260:
        v21 = 0;
        goto LABEL_261;
    }
  }
  v182 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
  v185 = *(_QWORD *)(a1 + 160);
  v186 = (int)v17 / 8;
  v187 = v17 - (v16 & 0xFFFFFFF8);
  v18 = 0;
  if (!a2)
  {
    v131 = 0;
    goto LABEL_267;
  }
  v130 = 0;
  v131 = 0;
  v180 = (int)v17;
  v132 = a5 - 1;
  v133 = a6 - 8;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v185, (const unsigned __int8 *)v10);
    if ((int)a1 >= v182)
      goto LABEL_208;
    v136 = *(_QWORD *)(v12 + 32);
    if (*(_DWORD *)(v136 + 16) != 16)
    v137 = *(float *)(v12 + 216);
    v138 = *(_QWORD *)(v136 + 8);
    if (v138)
    {
      v139 = 0;
      v140 = *(_QWORD *)(v12 + 56);
      v141 = 4 * *(_QWORD *)(v136 + 40);
      do
      {
        v137 = v137 + *(float *)(v140 + 4 * v10->u16[v139++]);
        v140 += v141;
      }
      while (v138 != v139);
    }
    ++v131;
    if (*a5 >= v137)
      goto LABEL_208;
    if (v183)
      v142 = *(_QWORD *)(v183 + 8 * v130);
    else
      v142 = v130 | (v13 << 32);
    if (a7 < 2)
    {
      v143 = 1;
      goto LABEL_207;
    }
    v144 = 3;
    v145 = 2;
    v146 = 1;
    while (1)
    {
      v147 = v132[v145];
      if (v144 != a7 + 1)
      {
        v148 = v132[v144];
        if (v147 >= v148)
          break;
      }
      if (v147 > v137)
        goto LABEL_206;
LABEL_204:
      v143 = v145;
      v132[v146] = v147;
      *(_QWORD *)(v133 + 8 * v146) = *(_QWORD *)(v133 + 8 * v145);
      v145 *= 2;
      v144 = (2 * v143) | 1;
      v146 = v143;
      if (v145 > a7)
        goto LABEL_207;
    }
    v147 = v132[v144];
    v145 = v144;
    if (v148 <= v137)
      goto LABEL_204;
LABEL_206:
    v143 = v146;
LABEL_207:
    v132[v143] = v137;
    *(_QWORD *)(v133 + 8 * v143) = v142;
    ++v18;
LABEL_208:
    v10 = (int8x16_t *)((char *)v10 + v180);
    ++v130;
  }
  while (v130 != v11);
LABEL_267:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  v177 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v131;
LABEL_262:
  *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v177;
  return v18;
}

void sub_1D48FB0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::scan_codes_range(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  int v6;
  float v8;
  int8x16_t *v9;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  int8x16_t v19;
  uint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int8x16_t *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int32 v80;
  int8x16_t *v81;
  int8x16_t v82;
  __int32 v83;
  uint64_t v84;
  int32x2_t v85;
  int8x8_t v86;
  __int32 v87;
  uint8x8_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int8x16_t *v124;
  int8x16_t v125;
  int8x16_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  void *exception;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  uint64_t v150;
  int v151;
  int v152;

  v8 = *(float *)&a6;
  v9 = a3;
  v11 = a1;
  v12 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v14 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) >= 1)
  {
    if (v14 != 2)
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            v79 = 0;
            v17 = 0;
            v80 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v81 = *(int8x16_t **)(a1 + 160);
            v82 = *v81;
            v83 = v81[1].i32[0];
            v84 = v12 << 32;
            v148 = *v81;
            do
            {
              v85 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v82))))));
              v86 = (int8x8_t)vadd_s32(vdup_lane_s32(v85, 1), v85);
              v87 = v86.i32[0];
              v86.i32[0] = v9[1].i32[0] ^ v83;
              v88 = (uint8x8_t)vcnt_s8(v86);
              v88.i16[0] = vaddlv_u8(v88);
              if (v87 + v88.i32[0] < v80)
              {
                v89 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v89 + 16) != 16)
                v90 = *(float *)(v11 + 216);
                v91 = *(_QWORD *)(v89 + 8);
                if (v91)
                {
                  v92 = 0;
                  v93 = *(_QWORD *)(v11 + 56);
                  v94 = 4 * *(_QWORD *)(v89 + 40);
                  do
                  {
                    v90 = v90 + *(float *)(v93 + 4 * v9->u16[v92++]);
                    v93 += v94;
                  }
                  while (v91 != v92);
                }
                ++v17;
                if (v90 > v8)
                {
                  if (a4)
                    v95 = *(_QWORD *)(a4 + 8 * v79);
                  else
                    v95 = v79 | v84;
                  faiss::RangeQueryResult::add(this, v90, v95);
                  v82 = v148;
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 20);
              ++v79;
            }
            while (v79 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 32:
          if (a2)
          {
            v122 = 0;
            v17 = 0;
            v123 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v124 = *(int8x16_t **)(a1 + 160);
            v126 = *v124;
            v125 = v124[1];
            v127 = v12 << 32;
            v145 = *v124;
            v149 = v125;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v126))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v125))))))) < v123)
              {
                v128 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v128 + 16) != 16)
                v129 = *(float *)(v11 + 216);
                v130 = *(_QWORD *)(v128 + 8);
                if (v130)
                {
                  v131 = 0;
                  v132 = *(_QWORD *)(v11 + 56);
                  v133 = 4 * *(_QWORD *)(v128 + 40);
                  do
                  {
                    v129 = v129 + *(float *)(v132 + 4 * v9->u16[v131++]);
                    v132 += v133;
                  }
                  while (v130 != v131);
                }
                ++v17;
                if (v129 > v8)
                {
                  if (a4)
                    v134 = *(_QWORD *)(a4 + 8 * v122);
                  else
                    v134 = v122 | v127;
                  faiss::RangeQueryResult::add(this, v129, v134);
                  v126 = v145;
                  v125 = v149;
                }
              }
              v9 += 2;
              ++v122;
            }
            while (v122 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 64:
          if (a2)
          {
            v39 = 0;
            v17 = 0;
            v40 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v41 = *(int8x16_t **)(a1 + 160);
            v43 = v41[2];
            v42 = v41[3];
            v45 = *v41;
            v44 = v41[1];
            v46 = v12 << 32;
            v144 = v43;
            v147 = v42;
            v142 = *v41;
            v143 = v44;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v45))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v44)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[2], v43))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[3], v42)))))))) < v40)
              {
                v47 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v47 + 16) != 16)
                v48 = *(float *)(v11 + 216);
                v49 = *(_QWORD *)(v47 + 8);
                if (v49)
                {
                  v50 = 0;
                  v51 = *(_QWORD *)(v11 + 56);
                  v52 = 4 * *(_QWORD *)(v47 + 40);
                  do
                  {
                    v48 = v48 + *(float *)(v51 + 4 * v9->u16[v50++]);
                    v51 += v52;
                  }
                  while (v49 != v50);
                }
                ++v17;
                if (v48 > v8)
                {
                  if (a4)
                    v53 = *(_QWORD *)(a4 + 8 * v39);
                  else
                    v53 = v39 | v46;
                  faiss::RangeQueryResult::add(this, v48, v53);
                  v43 = v144;
                  v42 = v147;
                  v45 = v142;
                  v44 = v143;
                }
              }
              v9 += 4;
              ++v39;
            }
            while (v39 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            v68 = 0;
            v17 = 0;
            v69 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v70 = **(_DWORD **)(a1 + 160);
            v71 = v12 << 32;
            do
            {
              LODWORD(a6) = v9->i32[0] ^ v70;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v69)
              {
                v72 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v72 + 16) != 16)
                v73 = *(float *)(v11 + 216);
                v74 = *(_QWORD *)(v72 + 8);
                if (v74)
                {
                  v75 = 0;
                  v76 = *(_QWORD *)(v11 + 56);
                  v77 = 4 * *(_QWORD *)(v72 + 40);
                  do
                  {
                    v73 = v73 + *(float *)(v76 + 4 * v9->u16[v75++]);
                    v76 += v77;
                  }
                  while (v74 != v75);
                }
                ++v17;
                if (v73 > v8)
                {
                  if (a4)
                    v78 = *(_QWORD *)(a4 + 8 * v68);
                  else
                    v78 = v68 | v71;
                  faiss::RangeQueryResult::add(this, v73, v78);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 4);
              ++v68;
            }
            while (v68 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 8:
          if (a2)
          {
            v110 = 0;
            v17 = 0;
            v111 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v112 = **(_QWORD **)(a1 + 160);
            v113 = v12 << 32;
            do
            {
              v114 = (uint8x8_t)vcnt_s8((int8x8_t)(v9->i64[0] ^ v112));
              v114.i16[0] = vaddlv_u8(v114);
              if (v111 > v114.i32[0])
              {
                v115 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v115 + 16) != 16)
                v116 = *(float *)(v11 + 216);
                v117 = *(_QWORD *)(v115 + 8);
                if (v117)
                {
                  v118 = 0;
                  v119 = *(_QWORD *)(v11 + 56);
                  v120 = 4 * *(_QWORD *)(v115 + 40);
                  do
                  {
                    v116 = v116 + *(float *)(v119 + 4 * v9->u16[v118++]);
                    v119 += v120;
                  }
                  while (v117 != v118);
                }
                ++v17;
                if (v116 > v8)
                {
                  if (a4)
                    v121 = *(_QWORD *)(a4 + 8 * v110);
                  else
                    v121 = v110 | v113;
                  faiss::RangeQueryResult::add(this, v116, v121);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 8);
              ++v110;
            }
            while (v110 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 16:
          if (a2)
          {
            v16 = 0;
            v17 = 0;
            v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v19 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
            v20 = v12 << 32;
            v146 = v19;
            do
            {
              v21 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v19))))));
              if (vadd_s32(vdup_lane_s32(v21, 1), v21).i32[0] < v18)
              {
                v22 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v22 + 16) != 16)
                v23 = *(float *)(v11 + 216);
                v24 = *(_QWORD *)(v22 + 8);
                if (v24)
                {
                  v25 = 0;
                  v26 = *(_QWORD *)(v11 + 56);
                  v27 = 4 * *(_QWORD *)(v22 + 40);
                  do
                  {
                    v23 = v23 + *(float *)(v26 + 4 * v9->u16[v25++]);
                    v26 += v27;
                  }
                  while (v24 != v25);
                }
                ++v17;
                if (v23 > v8)
                {
                  if (a4)
                    v28 = *(_QWORD *)(a4 + 8 * v16);
                  else
                    v28 = v16 | v20;
                  faiss::RangeQueryResult::add(this, v23, v28);
                  v19 = v146;
                }
              }
              ++v9;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_144;
          }
LABEL_143:
          v17 = 0;
LABEL_144:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
          v135 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_145:
          *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v135;
          return;
      }
    }
    v96 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
    v150 = *(_QWORD *)(a1 + 160);
    v151 = (int)v15 / 8;
    v152 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      v97 = 0;
      v98 = 0;
      v99 = (int)v15;
      v100 = v12 << 32;
      do
      {
        a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v150, (const unsigned __int8 *)v9);
        if ((int)a1 < v96)
        {
          v103 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v103 + 16) != 16)
          v104 = *(float *)(v11 + 216);
          v105 = *(_QWORD *)(v103 + 8);
          if (v105)
          {
            v106 = 0;
            v107 = *(_QWORD *)(v11 + 56);
            v108 = 4 * *(_QWORD *)(v103 + 40);
            do
            {
              v104 = v104 + *(float *)(v107 + 4 * v9->u16[v106++]);
              v107 += v108;
            }
            while (v105 != v106);
          }
          ++v98;
          if (v104 > v8)
          {
            if (a4)
              v109 = *(_QWORD *)(a4 + 8 * v97);
            else
              v109 = v97 | v100;
            faiss::RangeQueryResult::add(this, v104, v109);
          }
        }
        v9 = (int8x16_t *)((char *)v9 + v99);
        ++v97;
      }
      while (v97 != a2);
    }
    else
    {
      v98 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
    v135 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v98;
    goto LABEL_145;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        v54 = 0;
        v55 = v12 << 32;
        do
        {
          v56 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v56 + 16) != 16)
          v57 = *(float *)(v11 + 216);
          v58 = *(_QWORD *)(v56 + 8);
          if (v58)
          {
            v59 = *(_QWORD *)(v11 + 64);
            v60 = *(uint64_t **)(v11 + 112);
            v61 = v9;
            do
            {
              v63 = v61->u16[0];
              v61 = (int8x16_t *)((char *)v61 + 2);
              v62 = v63;
              v64 = *v60++;
              v57 = v57 + (float)(*(float *)(v64 + 4 * v62) + (float)(*(float *)(v59 + 4 * v62) * -2.0));
              v59 += 4 * *(_QWORD *)(v56 + 40);
              --v58;
            }
            while (v58);
          }
          v65 = *(_QWORD *)(v56 + 32);
          if (v57 > v8)
          {
            if (a4)
              v66 = *(_QWORD *)(a4 + 8 * v54);
            else
              v66 = v54 | v55;
            faiss::RangeQueryResult::add(this, v57, v66);
          }
          v9 = (int8x16_t *)((char *)v9 + v65);
          ++v54;
        }
        while (v54 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v150, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v150, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoder16>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        v29 = 0;
        v30 = v12 << 32;
        do
        {
          v31 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v31 + 16) != 16)
          v32 = *(float *)(v11 + 216);
          v33 = *(_QWORD *)(v31 + 8);
          if (v33)
          {
            v34 = *(_QWORD *)(v11 + 56);
            v35 = v9;
            do
            {
              v36 = v35->u16[0];
              v35 = (int8x16_t *)((char *)v35 + 2);
              v32 = v32 + *(float *)(v34 + 4 * v36);
              v34 += 4 * *(_QWORD *)(v31 + 40);
              --v33;
            }
            while (v33);
          }
          v37 = *(_QWORD *)(v31 + 32);
          if (v32 > v8)
          {
            if (a4)
              v38 = *(_QWORD *)(a4 + 8 * v29);
            else
              v38 = v29 | v30;
            faiss::RangeQueryResult::add(this, v32, v38);
          }
          v9 = (int8x16_t *)((char *)v9 + v37);
          ++v29;
        }
        while (v29 != a2);
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 44))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), v12, *(_QWORD *)(a1 + 72));
      v67 = faiss::fvec_inner_product(*(faiss **)(v11 + 72), *(const float **)(v11 + 136), *(int *)(v11 + 24));
      if (!a2)
        return;
    }
    else
    {
      v67 = 0.0;
      if (!a2)
        return;
    }
    v136 = 0;
    v137 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*(_DWORD **)(v11 + 32), (uint64_t)v9, *(_QWORD *)(v11 + 80));
      v138 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 32);
      v139 = v67 + faiss::fvec_inner_product(*(faiss **)(v11 + 80), *(const float **)(v11 + 136), *(int *)(v11 + 24));
      if (v139 > v8)
      {
        if (a4)
          v140 = *(_QWORD *)(a4 + 8 * v136);
        else
          v140 = v136 | v137;
        faiss::RangeQueryResult::add(this, v139, v140);
      }
      v9 = (int8x16_t *)((char *)v9 + v138);
      ++v136;
    }
    while (a2 != v136);
  }
}

void sub_1D48FBAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

_QWORD *faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1D82628A4);
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  faiss::_anonymous_namespace_::QueryTables *v5;
  float v6;

  v4 = *(_DWORD *)(a1 + 224);
  v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(_QWORD *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2)
      return;
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::distance_to_code(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  float result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (*(_DWORD *)(a1 + 224) != 2)
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v3 + 16) != 16)
  result = *(float *)(a1 + 216);
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = 4 * *(_QWORD *)(v3 + 40);
    do
    {
      v8 = *a2++;
      result = result + *(float *)(v6 + 4 * v8);
      v6 += v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::scan_codes(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  int8x16_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int32 v22;
  int8x16_t v23;
  float *v24;
  uint64_t v25;
  int32x2_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  const float **v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  float *v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  __int32 v103;
  int8x16_t *v104;
  int8x16_t v105;
  __int32 v106;
  float *v107;
  uint64_t v108;
  int32x2_t v109;
  int8x8_t v110;
  __int32 v111;
  uint8x8_t v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  float *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  float v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  float *v143;
  uint64_t v144;
  uint8x8_t v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  float v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int8x16_t *v155;
  int8x16_t v156;
  int8x16_t v157;
  float *v158;
  uint64_t v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  float v165;
  float v166;
  uint64_t v167;
  uint64_t v169;
  const float *v170;
  float *v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  float v180;
  float v181;
  void *exception;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v190;
  int v191;
  int v192;

  v10 = (int8x16_t *)a3;
  v11 = a2;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v15 = *(_DWORD *)(a1 + 224);
  v188 = a4;
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          v70 = *(_QWORD *)(a1 + 32);
          if (*(_DWORD *)(v70 + 16) != 16)
          v18 = 0;
          v71 = 0;
          v72 = 0;
          v73 = a5 - 1;
          v74 = *(_QWORD *)(v70 + 32);
          v75 = *(_QWORD *)(a1 + 64);
          v76 = a6 - 8;
          v77 = *(_QWORD *)(v70 + 8);
LABEL_95:
          v78 = *(float *)(v12 + 216);
          if (v77)
          {
            v79 = 0;
            v80 = v75;
            do
            {
              v78 = v78
                  + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * v79) + 4 * v10->u16[v79])
                          + (float)(*(float *)(v80 + 4 * v10->u16[v79]) * -2.0));
              ++v79;
              v80 += 4 * *(_QWORD *)(v70 + 40);
            }
            while (v77 != v79);
          }
          if (*a5 <= v78)
            goto LABEL_114;
          if (v188)
            v81 = *(_QWORD *)(v188 + 8 * v72);
          else
            v81 = v72 | (v13 << 32);
          if (a7 < 2)
          {
            v82 = 1;
            goto LABEL_113;
          }
          v83 = 3;
          v84 = 2;
          v85 = 1;
          while (1)
          {
            v86 = v73[v84];
            if (v83 == a7 + 1 || (v87 = v73[v83], v86 > v87))
            {
              if (v86 < v78)
                goto LABEL_112;
            }
            else
            {
              v86 = v73[v83];
              v84 = v83;
              if (v87 < v78)
              {
LABEL_112:
                v82 = v85;
LABEL_113:
                v73[v82] = v78;
                *(_QWORD *)(v76 + 8 * v82) = v81;
                v18 = ++v71;
LABEL_114:
                v10 = (int8x16_t *)((char *)v10 + v74);
                if (++v72 == v11)
                  return v18;
                goto LABEL_95;
              }
            }
            v82 = v84;
            v73[v85] = v86;
            *(_QWORD *)(v76 + 8 * v85) = *(_QWORD *)(v76 + 8 * v84);
            v84 *= 2;
            v83 = (2 * v82) | 1;
            v85 = v82;
            if (v84 > a7)
              goto LABEL_113;
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v190, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v190, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoder16>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          v34 = *(_QWORD *)(a1 + 32);
          if (*(_DWORD *)(v34 + 16) != 16)
          v18 = 0;
          v35 = 0;
          v36 = 0;
          v37 = a5 - 1;
          v38 = *(_QWORD *)(v34 + 32);
          v39 = *(_QWORD *)(a1 + 56);
          v40 = a6 - 8;
          v41 = *(_QWORD *)(v34 + 8);
LABEL_41:
          v42 = *(float *)(v12 + 216);
          if (v41)
          {
            v43 = 0;
            v44 = v39;
            v45 = v188;
            do
            {
              v42 = v42 + *(float *)(v44 + 4 * v10->u16[v43++]);
              v44 += 4 * *(_QWORD *)(v34 + 40);
            }
            while (v41 != v43);
          }
          else
          {
            v45 = v188;
          }
          if (*a5 <= v42)
            goto LABEL_62;
          if (v45)
            v46 = *(_QWORD *)(v45 + 8 * v36);
          else
            v46 = v36 | (v13 << 32);
          if (a7 < 2)
          {
            v47 = 1;
            goto LABEL_61;
          }
          v48 = 3;
          v49 = 2;
          v50 = 1;
          while (1)
          {
            v51 = v37[v49];
            if (v48 == a7 + 1 || (v52 = v37[v48], v51 > v52))
            {
              if (v51 < v42)
                goto LABEL_60;
            }
            else
            {
              v51 = v37[v48];
              v49 = v48;
              if (v52 < v42)
              {
LABEL_60:
                v47 = v50;
LABEL_61:
                v37[v47] = v42;
                *(_QWORD *)(v40 + 8 * v47) = v46;
                v18 = ++v35;
LABEL_62:
                v10 = (int8x16_t *)((char *)v10 + v38);
                if (++v36 == v11)
                  return v18;
                goto LABEL_41;
              }
            }
            v47 = v49;
            v37[v50] = v51;
            *(_QWORD *)(v40 + 8 * v50) = *(_QWORD *)(v40 + 8 * v49);
            v49 *= 2;
            v48 = (2 * v47) | 1;
            v50 = v47;
            if (v49 > a7)
              goto LABEL_61;
          }
        }
      }
    }
    else
    {
      v186 = a2;
      if (*(_BYTE *)(a1 + 44))
      {
        v88 = (const float **)(a1 + 72);
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 72), v13);
      }
      else
      {
        v88 = (const float **)(a1 + 136);
      }
      if (v186)
      {
        v18 = 0;
        v169 = 0;
        v170 = *v88;
        v185 = v13 << 32;
        v171 = a5 - 1;
        v172 = a6 - 8;
LABEL_250:
        faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)v10, *(_QWORD *)(v12 + 80));
        v173 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32);
        v174 = faiss::fvec_L2sqr(*(faiss **)(v12 + 80), v170, *(int *)(v12 + 24));
        if (*a5 <= v174)
          goto LABEL_266;
        if (v188)
          v175 = *(_QWORD *)(v188 + 8 * v169);
        else
          v175 = v169 | v185;
        if (a7 < 2)
        {
          v176 = 1;
          goto LABEL_265;
        }
        v177 = 3;
        v178 = 2;
        v179 = 1;
        while (1)
        {
          v180 = v171[v178];
          if (v177 == a7 + 1 || (v181 = v171[v177], v180 > v181))
          {
            if (v180 < v174)
              goto LABEL_264;
          }
          else
          {
            v180 = v171[v177];
            v178 = v177;
            if (v181 < v174)
            {
LABEL_264:
              v176 = v179;
LABEL_265:
              v171[v176] = v174;
              *(_QWORD *)(v172 + 8 * v176) = v175;
              ++v18;
LABEL_266:
              v10 = (int8x16_t *)((char *)v10 + v173);
              if (++v169 == v186)
                return v18;
              goto LABEL_250;
            }
          }
          v176 = v178;
          v171[v179] = v180;
          *(_QWORD *)(v172 + 8 * v179) = *(_QWORD *)(v172 + 8 * v178);
          v178 *= 2;
          v177 = (2 * v176) | 1;
          v179 = v176;
          if (v178 > a7)
            goto LABEL_265;
        }
      }
    }
    return 0;
  }
  if (v15 != 2)
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(v16 + 32);
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        v18 = 0;
        if (a2)
        {
          v101 = 0;
          v102 = 0;
          v21 = 0;
          v103 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v104 = *(int8x16_t **)(a1 + 160);
          v105 = *v104;
          v106 = v104[1].i32[0];
          v107 = a5 - 1;
          v108 = a6 - 8;
LABEL_145:
          v109 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v105))))));
          v110 = (int8x8_t)vadd_s32(vdup_lane_s32(v109, 1), v109);
          v111 = v110.i32[0];
          v110.i32[0] = v10[1].i32[0] ^ v106;
          v112 = (uint8x8_t)vcnt_s8(v110);
          v112.i16[0] = vaddlv_u8(v112);
          a1 = v112.u32[0];
          if (v111 + v112.i32[0] >= v103)
            goto LABEL_166;
          if (*(_DWORD *)(v16 + 16) != 16)
          v113 = *(float *)(v12 + 216);
          v114 = *(_QWORD *)(v16 + 8);
          if (v114)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v113 = v113 + *(float *)(a2 + 4 * v10->u16[a1++]);
              a2 += a3;
            }
            while (v114 != a1);
          }
          ++v21;
          if (*a5 <= v113)
            goto LABEL_166;
          if (a4)
            v115 = *(_QWORD *)(a4 + 8 * v102);
          else
            v115 = v102 | (v13 << 32);
          if (a7 < 2)
          {
            v116 = 1;
            goto LABEL_165;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v117 = v107[a1];
            if (a3 == a7 + 1 || (v118 = v107[a3], v117 > v118))
            {
              if (v117 < v113)
                goto LABEL_164;
            }
            else
            {
              v117 = v107[a3];
              a1 = a3;
              if (v118 < v113)
              {
LABEL_164:
                v116 = a2;
LABEL_165:
                v107[v116] = v113;
                *(_QWORD *)(v108 + 8 * v116) = v115;
                v18 = ++v101;
LABEL_166:
                v10 = (int8x16_t *)((char *)v10 + 20);
                if (++v102 == v11)
                  goto LABEL_244;
                goto LABEL_145;
              }
            }
            v116 = a1;
            v107[a2] = v117;
            *(_QWORD *)(v108 + 8 * a2) = *(_QWORD *)(v108 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v116) | 1;
            a2 = v116;
            if (a1 > a7)
              goto LABEL_165;
          }
        }
        goto LABEL_243;
      case 32:
        v18 = 0;
        if (a2)
        {
          v152 = 0;
          v153 = 0;
          v21 = 0;
          v154 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v155 = *(int8x16_t **)(a1 + 160);
          v157 = *v155;
          v156 = v155[1];
          v158 = a5 - 1;
          v159 = a6 - 8;
LABEL_220:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v157))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v156))))))) >= v154)goto LABEL_241;
          if (*(_DWORD *)(v16 + 16) != 16)
          v160 = *(float *)(v12 + 216);
          v161 = *(_QWORD *)(v16 + 8);
          if (v161)
          {
            v162 = 0;
            a1 = *(_QWORD *)(v12 + 56);
            a2 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              a3 = v10->u16[v162];
              v160 = v160 + *(float *)(a1 + 4 * a3);
              ++v162;
              a1 += a2;
            }
            while (v161 != v162);
          }
          ++v21;
          if (*a5 <= v160)
            goto LABEL_241;
          if (a4)
            v163 = *(_QWORD *)(a4 + 8 * v153);
          else
            v163 = v153 | (v13 << 32);
          if (a7 < 2)
          {
            a3 = 1;
            goto LABEL_240;
          }
          a2 = 3;
          v164 = 2;
          a1 = 1;
          while (1)
          {
            v165 = v158[v164];
            if (a2 == a7 + 1 || (v166 = v158[a2], v165 > v166))
            {
              if (v165 < v160)
                goto LABEL_239;
            }
            else
            {
              v165 = v158[a2];
              v164 = a2;
              if (v166 < v160)
              {
LABEL_239:
                a3 = a1;
LABEL_240:
                v158[a3] = v160;
                *(_QWORD *)(v159 + 8 * a3) = v163;
                v18 = ++v152;
LABEL_241:
                v10 += 2;
                if (++v153 == v11)
                  goto LABEL_244;
                goto LABEL_220;
              }
            }
            a3 = v164;
            v158[a1] = v165;
            *(_QWORD *)(v159 + 8 * a1) = *(_QWORD *)(v159 + 8 * v164);
            v164 *= 2;
            a2 = (2 * a3) | 1;
            a1 = a3;
            if (v164 > a7)
              goto LABEL_240;
          }
        }
        goto LABEL_243;
      case 64:
        v18 = 0;
        if (a2)
        {
          v53 = 0;
          v54 = 0;
          v21 = 0;
          v55 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v56 = *(int8x16_t **)(a1 + 160);
          v58 = v56[2];
          v57 = v56[3];
          v60 = *v56;
          v59 = v56[1];
          v61 = a5 - 1;
          v62 = a6 - 8;
LABEL_69:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v60))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v59)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[2], v58))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[3], v57)))))))) >= v55)goto LABEL_90;
          if (*(_DWORD *)(v16 + 16) != 16)
          v63 = *(float *)(v12 + 216);
          v64 = *(_QWORD *)(v16 + 8);
          if (v64)
          {
            v65 = 0;
            a1 = *(_QWORD *)(v12 + 56);
            a2 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              a3 = v10->u16[v65];
              v63 = v63 + *(float *)(a1 + 4 * a3);
              ++v65;
              a1 += a2;
            }
            while (v64 != v65);
          }
          ++v21;
          if (*a5 <= v63)
            goto LABEL_90;
          if (a4)
            v66 = *(_QWORD *)(a4 + 8 * v54);
          else
            v66 = v54 | (v13 << 32);
          if (a7 < 2)
          {
            a3 = 1;
            goto LABEL_89;
          }
          a2 = 3;
          v67 = 2;
          a1 = 1;
          while (1)
          {
            v68 = v61[v67];
            if (a2 == a7 + 1 || (v69 = v61[a2], v68 > v69))
            {
              if (v68 < v63)
                goto LABEL_88;
            }
            else
            {
              v68 = v61[a2];
              v67 = a2;
              if (v69 < v63)
              {
LABEL_88:
                a3 = a1;
LABEL_89:
                v61[a3] = v63;
                *(_QWORD *)(v62 + 8 * a3) = v66;
                v18 = ++v53;
LABEL_90:
                v10 += 4;
                if (++v54 == v11)
                  goto LABEL_244;
                goto LABEL_69;
              }
            }
            a3 = v67;
            v61[a1] = v68;
            *(_QWORD *)(v62 + 8 * a1) = *(_QWORD *)(v62 + 8 * v67);
            v67 *= 2;
            a2 = (2 * a3) | 1;
            a1 = a3;
            if (v67 > a7)
              goto LABEL_89;
          }
        }
        goto LABEL_243;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        v18 = 0;
        if (a2)
        {
          v89 = 0;
          v90 = 0;
          v21 = 0;
          v91 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v92 = **(_DWORD **)(a1 + 160);
          v93 = a5 - 1;
          v94 = a6 - 8;
LABEL_120:
          a8.i32[0] = v10->i32[0] ^ v92;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v91)
            goto LABEL_141;
          if (*(_DWORD *)(v16 + 16) != 16)
          v95 = *(float *)(v12 + 216);
          v96 = *(_QWORD *)(v16 + 8);
          if (v96)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v95 = v95 + *(float *)(a2 + 4 * v10->u16[a1++]);
              a2 += a3;
            }
            while (v96 != a1);
          }
          ++v21;
          if (*a5 <= v95)
            goto LABEL_141;
          if (a4)
            v97 = *(_QWORD *)(a4 + 8 * v90);
          else
            v97 = v90 | (v13 << 32);
          if (a7 < 2)
          {
            v98 = 1;
            goto LABEL_140;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v99 = v93[a1];
            if (a3 == a7 + 1 || (v100 = v93[a3], v99 > v100))
            {
              if (v99 < v95)
                goto LABEL_139;
            }
            else
            {
              v99 = v93[a3];
              a1 = a3;
              if (v100 < v95)
              {
LABEL_139:
                v98 = a2;
LABEL_140:
                v93[v98] = v95;
                *(_QWORD *)(v94 + 8 * v98) = v97;
                v18 = ++v89;
LABEL_141:
                v10 = (int8x16_t *)((char *)v10 + 4);
                if (++v90 == v11)
                  goto LABEL_244;
                goto LABEL_120;
              }
            }
            v98 = a1;
            v93[a2] = v99;
            *(_QWORD *)(v94 + 8 * a2) = *(_QWORD *)(v94 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v98) | 1;
            a2 = v98;
            if (a1 > a7)
              goto LABEL_140;
          }
        }
        goto LABEL_243;
      case 8:
        v18 = 0;
        if (a2)
        {
          v139 = 0;
          v140 = 0;
          v21 = 0;
          v141 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v142 = **(_QWORD **)(a1 + 160);
          v143 = a5 - 1;
          v144 = a6 - 8;
LABEL_195:
          v145 = (uint8x8_t)vcnt_s8((int8x8_t)(v10->i64[0] ^ v142));
          v145.i16[0] = vaddlv_u8(v145);
          if (v141 <= v145.i32[0])
            goto LABEL_216;
          if (*(_DWORD *)(v16 + 16) != 16)
          v146 = *(float *)(v12 + 216);
          v147 = *(_QWORD *)(v16 + 8);
          if (v147)
          {
            a1 = 0;
            a2 = *(_QWORD *)(v12 + 56);
            a3 = 4 * *(_QWORD *)(v16 + 40);
            do
            {
              v146 = v146 + *(float *)(a2 + 4 * v10->u16[a1++]);
              a2 += a3;
            }
            while (v147 != a1);
          }
          ++v21;
          if (*a5 <= v146)
            goto LABEL_216;
          if (a4)
            v148 = *(_QWORD *)(a4 + 8 * v140);
          else
            v148 = v140 | (v13 << 32);
          if (a7 < 2)
          {
            v149 = 1;
            goto LABEL_215;
          }
          a3 = 3;
          a1 = 2;
          a2 = 1;
          while (1)
          {
            v150 = v143[a1];
            if (a3 == a7 + 1 || (v151 = v143[a3], v150 > v151))
            {
              if (v150 < v146)
                goto LABEL_214;
            }
            else
            {
              v150 = v143[a3];
              a1 = a3;
              if (v151 < v146)
              {
LABEL_214:
                v149 = a2;
LABEL_215:
                v143[v149] = v146;
                *(_QWORD *)(v144 + 8 * v149) = v148;
                v18 = ++v139;
LABEL_216:
                v10 = (int8x16_t *)((char *)v10 + 8);
                if (++v140 == v11)
                  goto LABEL_244;
                goto LABEL_195;
              }
            }
            v149 = a1;
            v143[a2] = v150;
            *(_QWORD *)(v144 + 8 * a2) = *(_QWORD *)(v144 + 8 * a1);
            a1 *= 2;
            a3 = (2 * v149) | 1;
            a2 = v149;
            if (a1 > a7)
              goto LABEL_215;
          }
        }
        goto LABEL_243;
      case 16:
        v18 = 0;
        if (a2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v23 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
          v24 = a5 - 1;
          v25 = a6 - 8;
          while (1)
          {
            v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v23))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v22)
              goto LABEL_33;
            if (*(_DWORD *)(v16 + 16) != 16)
            v27 = *(float *)(v12 + 216);
            v28 = *(_QWORD *)(v16 + 8);
            if (v28)
            {
              v29 = 0;
              a1 = *(_QWORD *)(v12 + 56);
              a2 = 4 * *(_QWORD *)(v16 + 40);
              do
              {
                a3 = v10->u16[v29];
                v27 = v27 + *(float *)(a1 + 4 * a3);
                ++v29;
                a1 += a2;
              }
              while (v28 != v29);
            }
            ++v21;
            if (*a5 <= v27)
              goto LABEL_33;
            if (a4)
              v30 = *(_QWORD *)(a4 + 8 * v20);
            else
              v30 = v20 | (v13 << 32);
            if (a7 < 2)
            {
              a3 = 1;
              goto LABEL_32;
            }
            a2 = 3;
            v31 = 2;
            a1 = 1;
            while (1)
            {
              v32 = v24[v31];
              if (a2 != a7 + 1)
              {
                v33 = v24[a2];
                if (v32 <= v33)
                  break;
              }
              if (v32 < v27)
                goto LABEL_31;
LABEL_29:
              a3 = v31;
              v24[a1] = v32;
              *(_QWORD *)(v25 + 8 * a1) = *(_QWORD *)(v25 + 8 * v31);
              v31 *= 2;
              a2 = (2 * a3) | 1;
              a1 = a3;
              if (v31 > a7)
                goto LABEL_32;
            }
            v32 = v24[a2];
            v31 = a2;
            if (v33 >= v27)
              goto LABEL_29;
LABEL_31:
            a3 = a1;
LABEL_32:
            v24[a3] = v27;
            *(_QWORD *)(v25 + 8 * a3) = v30;
            v18 = ++v19;
LABEL_33:
            ++v10;
            if (++v20 == v11)
            {
LABEL_244:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              v167 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v21;
              goto LABEL_245;
            }
          }
        }
LABEL_243:
        v21 = 0;
        goto LABEL_244;
    }
  }
  v187 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
  v190 = *(_QWORD *)(a1 + 160);
  v191 = (int)v17 / 8;
  v192 = v17 - (v16 & 0xFFFFFFF8);
  v18 = 0;
  if (!a2)
  {
    v120 = 0;
    goto LABEL_270;
  }
  v119 = 0;
  v120 = 0;
  v183 = v13 << 32;
  v184 = (int)v17;
  v121 = a5 - 1;
  v122 = a6 - 8;
  v123 = a7 + 1;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v190, (const unsigned __int8 *)v10);
    if ((int)a1 >= v187)
      goto LABEL_191;
    v126 = *(_QWORD *)(v12 + 32);
    if (*(_DWORD *)(v126 + 16) != 16)
    v127 = *(float *)(v12 + 216);
    v128 = *(_QWORD *)(v126 + 8);
    if (v128)
    {
      v129 = 0;
      v130 = *(_QWORD *)(v12 + 56);
      v131 = 4 * *(_QWORD *)(v126 + 40);
      do
      {
        v127 = v127 + *(float *)(v130 + 4 * v10->u16[v129++]);
        v130 += v131;
      }
      while (v128 != v129);
    }
    ++v120;
    if (*a5 <= v127)
      goto LABEL_191;
    if (v188)
      v132 = *(_QWORD *)(v188 + 8 * v119);
    else
      v132 = v119 | v183;
    if (a7 < 2)
    {
      v133 = 1;
      goto LABEL_190;
    }
    v134 = 3;
    v135 = 2;
    v136 = 1;
    while (1)
    {
      v137 = v121[v135];
      if (v134 != v123)
      {
        v138 = v121[v134];
        if (v137 <= v138)
          break;
      }
      if (v137 < v127)
        goto LABEL_189;
LABEL_187:
      v133 = v135;
      v121[v136] = v137;
      *(_QWORD *)(v122 + 8 * v136) = *(_QWORD *)(v122 + 8 * v135);
      v135 *= 2;
      v134 = (2 * v133) | 1;
      v136 = v133;
      if (v135 > a7)
        goto LABEL_190;
    }
    v137 = v121[v134];
    v135 = v134;
    if (v138 >= v127)
      goto LABEL_187;
LABEL_189:
    v133 = v136;
LABEL_190:
    v121[v133] = v127;
    *(_QWORD *)(v122 + 8 * v133) = v132;
    ++v18;
LABEL_191:
    v10 = (int8x16_t *)((char *)v10 + v184);
    ++v119;
  }
  while (v119 != v11);
LABEL_270:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  v167 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v120;
LABEL_245:
  *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v167;
  return v18;
}

void sub_1D48FCC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::scan_codes_range(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  int v6;
  float v8;
  int8x16_t *v9;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  int8x16_t v19;
  uint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int8x16_t *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const float **v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int32 v80;
  int8x16_t *v81;
  int8x16_t v82;
  __int32 v83;
  uint64_t v84;
  int32x2_t v85;
  int8x8_t v86;
  __int32 v87;
  uint8x8_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int8x16_t *v124;
  int8x16_t v125;
  int8x16_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const float *v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  void *exception;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  uint64_t v151;
  int v152;
  int v153;

  v8 = *(float *)&a6;
  v9 = a3;
  v11 = a1;
  v12 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v14 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) >= 1)
  {
    if (v14 != 2)
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            v79 = 0;
            v17 = 0;
            v80 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v81 = *(int8x16_t **)(a1 + 160);
            v82 = *v81;
            v83 = v81[1].i32[0];
            v84 = v12 << 32;
            v149 = *v81;
            do
            {
              v85 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v82))))));
              v86 = (int8x8_t)vadd_s32(vdup_lane_s32(v85, 1), v85);
              v87 = v86.i32[0];
              v86.i32[0] = v9[1].i32[0] ^ v83;
              v88 = (uint8x8_t)vcnt_s8(v86);
              v88.i16[0] = vaddlv_u8(v88);
              if (v87 + v88.i32[0] < v80)
              {
                v89 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v89 + 16) != 16)
                v90 = *(float *)(v11 + 216);
                v91 = *(_QWORD *)(v89 + 8);
                if (v91)
                {
                  v92 = 0;
                  v93 = *(_QWORD *)(v11 + 56);
                  v94 = 4 * *(_QWORD *)(v89 + 40);
                  do
                  {
                    v90 = v90 + *(float *)(v93 + 4 * v9->u16[v92++]);
                    v93 += v94;
                  }
                  while (v91 != v92);
                }
                ++v17;
                if (v90 < v8)
                {
                  if (a4)
                    v95 = *(_QWORD *)(a4 + 8 * v79);
                  else
                    v95 = v79 | v84;
                  faiss::RangeQueryResult::add(this, v90, v95);
                  v82 = v149;
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 20);
              ++v79;
            }
            while (v79 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 32:
          if (a2)
          {
            v122 = 0;
            v17 = 0;
            v123 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v124 = *(int8x16_t **)(a1 + 160);
            v126 = *v124;
            v125 = v124[1];
            v127 = v12 << 32;
            v146 = *v124;
            v150 = v125;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v126))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v125))))))) < v123)
              {
                v128 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v128 + 16) != 16)
                v129 = *(float *)(v11 + 216);
                v130 = *(_QWORD *)(v128 + 8);
                if (v130)
                {
                  v131 = 0;
                  v132 = *(_QWORD *)(v11 + 56);
                  v133 = 4 * *(_QWORD *)(v128 + 40);
                  do
                  {
                    v129 = v129 + *(float *)(v132 + 4 * v9->u16[v131++]);
                    v132 += v133;
                  }
                  while (v130 != v131);
                }
                ++v17;
                if (v129 < v8)
                {
                  if (a4)
                    v134 = *(_QWORD *)(a4 + 8 * v122);
                  else
                    v134 = v122 | v127;
                  faiss::RangeQueryResult::add(this, v129, v134);
                  v126 = v146;
                  v125 = v150;
                }
              }
              v9 += 2;
              ++v122;
            }
            while (v122 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 64:
          if (a2)
          {
            v39 = 0;
            v17 = 0;
            v40 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v41 = *(int8x16_t **)(a1 + 160);
            v43 = v41[2];
            v42 = v41[3];
            v45 = *v41;
            v44 = v41[1];
            v46 = v12 << 32;
            v145 = v43;
            v148 = v42;
            v143 = *v41;
            v144 = v44;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v45))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v44)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[2], v43))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[3], v42)))))))) < v40)
              {
                v47 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v47 + 16) != 16)
                v48 = *(float *)(v11 + 216);
                v49 = *(_QWORD *)(v47 + 8);
                if (v49)
                {
                  v50 = 0;
                  v51 = *(_QWORD *)(v11 + 56);
                  v52 = 4 * *(_QWORD *)(v47 + 40);
                  do
                  {
                    v48 = v48 + *(float *)(v51 + 4 * v9->u16[v50++]);
                    v51 += v52;
                  }
                  while (v49 != v50);
                }
                ++v17;
                if (v48 < v8)
                {
                  if (a4)
                    v53 = *(_QWORD *)(a4 + 8 * v39);
                  else
                    v53 = v39 | v46;
                  faiss::RangeQueryResult::add(this, v48, v53);
                  v43 = v145;
                  v42 = v148;
                  v45 = v143;
                  v44 = v144;
                }
              }
              v9 += 4;
              ++v39;
            }
            while (v39 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            v68 = 0;
            v17 = 0;
            v69 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v70 = **(_DWORD **)(a1 + 160);
            v71 = v12 << 32;
            do
            {
              LODWORD(a6) = v9->i32[0] ^ v70;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v69)
              {
                v72 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v72 + 16) != 16)
                v73 = *(float *)(v11 + 216);
                v74 = *(_QWORD *)(v72 + 8);
                if (v74)
                {
                  v75 = 0;
                  v76 = *(_QWORD *)(v11 + 56);
                  v77 = 4 * *(_QWORD *)(v72 + 40);
                  do
                  {
                    v73 = v73 + *(float *)(v76 + 4 * v9->u16[v75++]);
                    v76 += v77;
                  }
                  while (v74 != v75);
                }
                ++v17;
                if (v73 < v8)
                {
                  if (a4)
                    v78 = *(_QWORD *)(a4 + 8 * v68);
                  else
                    v78 = v68 | v71;
                  faiss::RangeQueryResult::add(this, v73, v78);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 4);
              ++v68;
            }
            while (v68 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 8:
          if (a2)
          {
            v110 = 0;
            v17 = 0;
            v111 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v112 = **(_QWORD **)(a1 + 160);
            v113 = v12 << 32;
            do
            {
              v114 = (uint8x8_t)vcnt_s8((int8x8_t)(v9->i64[0] ^ v112));
              v114.i16[0] = vaddlv_u8(v114);
              if (v111 > v114.i32[0])
              {
                v115 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v115 + 16) != 16)
                v116 = *(float *)(v11 + 216);
                v117 = *(_QWORD *)(v115 + 8);
                if (v117)
                {
                  v118 = 0;
                  v119 = *(_QWORD *)(v11 + 56);
                  v120 = 4 * *(_QWORD *)(v115 + 40);
                  do
                  {
                    v116 = v116 + *(float *)(v119 + 4 * v9->u16[v118++]);
                    v119 += v120;
                  }
                  while (v117 != v118);
                }
                ++v17;
                if (v116 < v8)
                {
                  if (a4)
                    v121 = *(_QWORD *)(a4 + 8 * v110);
                  else
                    v121 = v110 | v113;
                  faiss::RangeQueryResult::add(this, v116, v121);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 8);
              ++v110;
            }
            while (v110 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 16:
          if (a2)
          {
            v16 = 0;
            v17 = 0;
            v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v19 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
            v20 = v12 << 32;
            v147 = v19;
            do
            {
              v21 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v19))))));
              if (vadd_s32(vdup_lane_s32(v21, 1), v21).i32[0] < v18)
              {
                v22 = *(_QWORD *)(v11 + 32);
                if (*(_DWORD *)(v22 + 16) != 16)
                v23 = *(float *)(v11 + 216);
                v24 = *(_QWORD *)(v22 + 8);
                if (v24)
                {
                  v25 = 0;
                  v26 = *(_QWORD *)(v11 + 56);
                  v27 = 4 * *(_QWORD *)(v22 + 40);
                  do
                  {
                    v23 = v23 + *(float *)(v26 + 4 * v9->u16[v25++]);
                    v26 += v27;
                  }
                  while (v24 != v25);
                }
                ++v17;
                if (v23 < v8)
                {
                  if (a4)
                    v28 = *(_QWORD *)(a4 + 8 * v16);
                  else
                    v28 = v16 | v20;
                  faiss::RangeQueryResult::add(this, v23, v28);
                  v19 = v147;
                }
              }
              ++v9;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_144;
          }
LABEL_143:
          v17 = 0;
LABEL_144:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
          v135 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_145:
          *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v135;
          return;
      }
    }
    v96 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
    v151 = *(_QWORD *)(a1 + 160);
    v152 = (int)v15 / 8;
    v153 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      v97 = 0;
      v98 = 0;
      v99 = (int)v15;
      v100 = v12 << 32;
      do
      {
        a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v151, (const unsigned __int8 *)v9);
        if ((int)a1 < v96)
        {
          v103 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v103 + 16) != 16)
          v104 = *(float *)(v11 + 216);
          v105 = *(_QWORD *)(v103 + 8);
          if (v105)
          {
            v106 = 0;
            v107 = *(_QWORD *)(v11 + 56);
            v108 = 4 * *(_QWORD *)(v103 + 40);
            do
            {
              v104 = v104 + *(float *)(v107 + 4 * v9->u16[v106++]);
              v107 += v108;
            }
            while (v105 != v106);
          }
          ++v98;
          if (v104 < v8)
          {
            if (a4)
              v109 = *(_QWORD *)(a4 + 8 * v97);
            else
              v109 = v97 | v100;
            faiss::RangeQueryResult::add(this, v104, v109);
          }
        }
        v9 = (int8x16_t *)((char *)v9 + v99);
        ++v97;
      }
      while (v97 != a2);
    }
    else
    {
      v98 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
    v135 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v98;
    goto LABEL_145;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        v54 = 0;
        v55 = v12 << 32;
        do
        {
          v56 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v56 + 16) != 16)
          v57 = *(float *)(v11 + 216);
          v58 = *(_QWORD *)(v56 + 8);
          if (v58)
          {
            v59 = *(_QWORD *)(v11 + 64);
            v60 = *(uint64_t **)(v11 + 112);
            v61 = v9;
            do
            {
              v63 = v61->u16[0];
              v61 = (int8x16_t *)((char *)v61 + 2);
              v62 = v63;
              v64 = *v60++;
              v57 = v57 + (float)(*(float *)(v64 + 4 * v62) + (float)(*(float *)(v59 + 4 * v62) * -2.0));
              v59 += 4 * *(_QWORD *)(v56 + 40);
              --v58;
            }
            while (v58);
          }
          v65 = *(_QWORD *)(v56 + 32);
          if (v57 < v8)
          {
            if (a4)
              v66 = *(_QWORD *)(a4 + 8 * v54);
            else
              v66 = v54 | v55;
            faiss::RangeQueryResult::add(this, v57, v66);
          }
          v9 = (int8x16_t *)((char *)v9 + v65);
          ++v54;
        }
        while (v54 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v151, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v151, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoder16>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        v29 = 0;
        v30 = v12 << 32;
        do
        {
          v31 = *(_QWORD *)(v11 + 32);
          if (*(_DWORD *)(v31 + 16) != 16)
          v32 = *(float *)(v11 + 216);
          v33 = *(_QWORD *)(v31 + 8);
          if (v33)
          {
            v34 = *(_QWORD *)(v11 + 56);
            v35 = v9;
            do
            {
              v36 = v35->u16[0];
              v35 = (int8x16_t *)((char *)v35 + 2);
              v32 = v32 + *(float *)(v34 + 4 * v36);
              v34 += 4 * *(_QWORD *)(v31 + 40);
              --v33;
            }
            while (v33);
          }
          v37 = *(_QWORD *)(v31 + 32);
          if (v32 < v8)
          {
            if (a4)
              v38 = *(_QWORD *)(a4 + 8 * v29);
            else
              v38 = v29 | v30;
            faiss::RangeQueryResult::add(this, v32, v38);
          }
          v9 = (int8x16_t *)((char *)v9 + v37);
          ++v29;
        }
        while (v29 != a2);
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 44))
    {
      v67 = (const float **)(a1 + 72);
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 72), v12);
      if (!a2)
        return;
    }
    else
    {
      v67 = (const float **)(a1 + 136);
      if (!a2)
        return;
    }
    v136 = 0;
    v137 = *v67;
    v138 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*(_DWORD **)(v11 + 32), (uint64_t)v9, *(_QWORD *)(v11 + 80));
      v139 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 32);
      v140 = faiss::fvec_L2sqr(*(faiss **)(v11 + 80), v137, *(int *)(v11 + 24));
      if (v140 < v8)
      {
        if (a4)
          v141 = *(_QWORD *)(a4 + 8 * v136);
        else
          v141 = v136 | v138;
        faiss::RangeQueryResult::add(this, v140, v141);
      }
      v9 = (int8x16_t *)((char *)v9 + v139);
      ++v136;
    }
    while (a2 != v136);
  }
}

void sub_1D48FD638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

_QWORD *faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1D82628A4);
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  faiss::_anonymous_namespace_::QueryTables *v5;
  float v6;

  v4 = *(_DWORD *)(a1 + 224);
  v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(_QWORD *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2)
      return;
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::distance_to_code(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  if (*(_DWORD *)(a1 + 224) != 2)
  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[2];
  if ((int)v4 > 64)
  result = *(float *)(a1 + 216);
  v6 = v3[1];
  if (v6)
  {
    v7 = 0;
    LOBYTE(v8) = 0;
    LODWORD(v9) = 0;
    v10 = *(_QWORD *)(a1 + 56);
    v11 = v3[5];
    do
    {
      if (!(_BYTE)v8)
        LODWORD(v9) = *a2;
      v12 = v9 >> v8;
      v13 = v4 + v8;
      v14 = v13 - 8;
      if (v13 < 8)
      {
        LOBYTE(v8) = v4 + v8;
      }
      else
      {
        v15 = 8 - v8;
        v16 = a2 + 1;
        if (v14 < 8)
        {
          ++a2;
        }
        else
        {
          v17 = v14 >> 3;
          v18 = v17 - 1;
          do
          {
            v19 = *v16++;
            v12 |= (unint64_t)v19 << v15;
            v15 += 8;
            --v17;
          }
          while (v17);
          a2 += v18 + 2;
        }
        v8 = ((_BYTE)v8 + (_BYTE)v4) & 7;
        if (v8)
        {
          v9 = *a2;
          v12 |= v9 << v15;
        }
      }
      result = result + *(float *)(v10 + 4 * (v12 & ~(-1 << v4)));
      v10 += 4 * v11;
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::scan_codes(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  int8x16_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 v21;
  float *v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  int32x2_t v26;
  float v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  char v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t *v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  char v62;
  unsigned __int8 *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  uint64_t v74;
  int v75;
  int8x16_t *v76;
  int8x16_t v77;
  int8x16_t v78;
  float *v79;
  uint64_t v80;
  int8x16_t v81;
  int8x16_t v82;
  unint64_t v83;
  float v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int8x16_t *v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  char v92;
  unsigned __int8 *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int8x16_t *v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  char v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  float v130;
  uint64_t v131;
  float *v132;
  uint64_t v133;
  uint64_t v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  float v141;
  float v142;
  uint64_t v143;
  int v144;
  float *v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  uint64_t v149;
  float v150;
  unsigned __int8 *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int8x16_t *v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  char v159;
  unsigned __int8 *v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  float v167;
  float v168;
  uint64_t v169;
  __int32 v170;
  int8x16_t *v171;
  int8x16_t v172;
  float *v173;
  uint64_t v174;
  __int32 v175;
  unint64_t v176;
  int32x2_t v177;
  int8x8_t v178;
  __int32 v179;
  uint8x8_t v180;
  uint64_t v181;
  float v182;
  unsigned __int8 *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int8x16_t *v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  char v191;
  unsigned __int8 *v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  float v199;
  float v200;
  uint64_t v201;
  uint64_t v202;
  float *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  float v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 *v217;
  uint64_t v218;
  int v219;
  unsigned int v220;
  char v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  float v229;
  float v230;
  uint64_t v231;
  int v232;
  float *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint8x8_t v237;
  uint64_t v238;
  float v239;
  unsigned __int8 *v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  int8x16_t *v244;
  uint64_t v245;
  int v246;
  unsigned int v247;
  char v248;
  unsigned __int8 *v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  float v256;
  float v257;
  uint64_t v258;
  int v259;
  int8x16_t *v260;
  float *v261;
  uint64_t v262;
  int8x16_t v263;
  int8x16_t v264;
  unint64_t v265;
  float v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int8x16_t *v270;
  uint64_t v271;
  int v272;
  unsigned int v273;
  char v274;
  unsigned __int8 *v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  float v280;
  float v281;
  void *exception;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  __int32 v303;
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v309;
  int v310;
  int v311;

  v10 = (int8x16_t *)a3;
  v11 = a2;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v307 = a4;
  v15 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          v100 = *(_QWORD **)(a1 + 32);
          v101 = v100[2];
          if ((int)v101 > 64)
          v18 = 0;
          v102 = 0;
          v103 = 0;
          v104 = a5 - 1;
          v105 = a6 - 8;
          v106 = a7 + 1;
          v107 = v100[4];
          v300 = *(_QWORD *)(a1 + 64);
          v108 = v100[1];
          v291 = v13 << 32;
LABEL_122:
          v109 = *(float *)(v12 + 216);
          if (v108)
          {
            v110 = 0;
            LOBYTE(v111) = 0;
            LODWORD(v112) = 0;
            v113 = v300;
            v114 = v10;
            do
            {
              if (!(_BYTE)v111)
                LODWORD(v112) = v114->u8[0];
              v115 = v112 >> v111;
              v116 = v101 + v111;
              v117 = v116 - 8;
              if (v116 < 8)
              {
                LOBYTE(v111) = v101 + v111;
              }
              else
              {
                v118 = 8 - v111;
                v119 = &v114->u8[1];
                if (v117 < 8)
                {
                  v114 = (int8x16_t *)((char *)v114 + 1);
                }
                else
                {
                  v120 = v117 >> 3;
                  v121 = (v117 >> 3) - 1;
                  do
                  {
                    v122 = *v119++;
                    v115 |= (unint64_t)v122 << v118;
                    v118 += 8;
                    --v120;
                  }
                  while (v120);
                  v114 = (int8x16_t *)((char *)v114 + v121 + 2);
                }
                v111 = ((_BYTE)v111 + (_BYTE)v101) & 7;
                if (v111)
                {
                  v112 = v114->u8[0];
                  v115 |= v112 << v118;
                }
              }
              v109 = v109
                   + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * v110)
                                      + 4 * (int)(v115 & ~(-1 << v101)))
                           + (float)(*(float *)(v113 + 4 * (int)(v115 & ~(-1 << v101))) * -2.0));
              v113 += 4 * v100[5];
              ++v110;
            }
            while (v110 != v108);
          }
          if (*a5 >= v109)
            goto LABEL_152;
          if (v307)
            v123 = *(_QWORD *)(v307 + 8 * v103);
          else
            v123 = v103 | v291;
          if (a7 < 2)
          {
            v124 = 1;
            goto LABEL_151;
          }
          v125 = 3;
          v126 = 2;
          v127 = 1;
          while (1)
          {
            v128 = v104[v126];
            if (v125 == v106 || (v129 = v104[v125], v128 < v129))
            {
              if (v128 > v109)
                goto LABEL_150;
            }
            else
            {
              v128 = v104[v125];
              v126 = v125;
              if (v129 > v109)
              {
LABEL_150:
                v124 = v127;
LABEL_151:
                v104[v124] = v109;
                *(_QWORD *)(v105 + 8 * v124) = v123;
                v18 = ++v102;
LABEL_152:
                v10 = (int8x16_t *)((char *)v10 + v107);
                if (++v103 == v11)
                  return v18;
                goto LABEL_122;
              }
            }
            v124 = v126;
            v104[v127] = v128;
            *(_QWORD *)(v105 + 8 * v127) = *(_QWORD *)(v105 + 8 * v126);
            v126 *= 2;
            v125 = (2 * v124) | 1;
            v127 = v124;
            if (v126 > a7)
              goto LABEL_151;
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v309, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v309, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoderGeneric>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          v43 = *(_QWORD **)(a1 + 32);
          v44 = v43[2];
          if ((int)v44 > 64)
          v18 = 0;
          v45 = 0;
          v46 = 0;
          v47 = a5 - 1;
          v48 = a6 - 8;
          v49 = a7 + 1;
          v50 = v43[4];
          v51 = *(_QWORD *)(a1 + 56);
          v52 = v43[1];
          v298 = v13 << 32;
LABEL_50:
          v53 = *(float *)(v12 + 216);
          if (v52)
          {
            v54 = 0;
            LOBYTE(v55) = 0;
            LODWORD(v56) = 0;
            v57 = v51;
            v58 = v10;
            do
            {
              if (!(_BYTE)v55)
                LODWORD(v56) = v58->u8[0];
              v59 = v56 >> v55;
              v60 = v44 + v55;
              v61 = v60 - 8;
              if (v60 < 8)
              {
                LOBYTE(v55) = v44 + v55;
              }
              else
              {
                v62 = 8 - v55;
                v63 = &v58->u8[1];
                if (v61 < 8)
                {
                  v58 = (int8x16_t *)((char *)v58 + 1);
                }
                else
                {
                  v64 = v61 >> 3;
                  v65 = v64 - 1;
                  do
                  {
                    v66 = *v63++;
                    v59 |= (unint64_t)v66 << v62;
                    v62 += 8;
                    --v64;
                  }
                  while (v64);
                  v58 = (int8x16_t *)((char *)v58 + v65 + 2);
                }
                v55 = ((_BYTE)v55 + (_BYTE)v44) & 7;
                if (v55)
                {
                  v56 = v58->u8[0];
                  v59 |= v56 << v62;
                }
              }
              v53 = v53 + *(float *)(v57 + 4 * (v59 & ~(-1 << v44)));
              v57 += 4 * v43[5];
              ++v54;
            }
            while (v54 != v52);
          }
          if (*a5 >= v53)
            goto LABEL_80;
          if (v307)
            v67 = *(_QWORD *)(v307 + 8 * v46);
          else
            v67 = v46 | v298;
          if (a7 < 2)
          {
            v68 = 1;
            goto LABEL_79;
          }
          v69 = 3;
          v70 = 2;
          v71 = 1;
          while (1)
          {
            v72 = v47[v70];
            if (v69 == v49 || (v73 = v47[v69], v72 < v73))
            {
              if (v72 > v53)
                goto LABEL_78;
            }
            else
            {
              v72 = v47[v69];
              v70 = v69;
              if (v73 > v53)
              {
LABEL_78:
                v68 = v71;
LABEL_79:
                v47[v68] = v53;
                *(_QWORD *)(v48 + 8 * v68) = v67;
                v18 = ++v45;
LABEL_80:
                v10 = (int8x16_t *)((char *)v10 + v50);
                if (++v46 == a2)
                  return v18;
                goto LABEL_50;
              }
            }
            v68 = v70;
            v47[v71] = v72;
            *(_QWORD *)(v48 + 8 * v71) = *(_QWORD *)(v48 + 8 * v70);
            v70 *= 2;
            v69 = (2 * v68) | 1;
            v71 = v68;
            if (v70 > a7)
              goto LABEL_79;
          }
        }
      }
      return 0;
    }
    if (*(_BYTE *)(a1 + 44))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), v13, *(_QWORD *)(a1 + 72));
      v130 = faiss::fvec_inner_product(*(faiss **)(v12 + 72), *(const float **)(v12 + 136), *(int *)(v12 + 24));
      if (!v11)
        return 0;
    }
    else
    {
      v130 = 0.0;
      if (!a2)
        return 0;
    }
    v18 = 0;
    v131 = 0;
    v301 = v13 << 32;
    v132 = a5 - 1;
    v133 = a6 - 8;
LABEL_157:
    faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)v10, *(_QWORD *)(v12 + 80));
    v134 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32);
    v135 = v130 + faiss::fvec_inner_product(*(faiss **)(v12 + 80), *(const float **)(v12 + 136), *(int *)(v12 + 24));
    if (*a5 >= v135)
      goto LABEL_173;
    if (v307)
      v136 = *(_QWORD *)(v307 + 8 * v131);
    else
      v136 = v131 | v301;
    if (a7 < 2)
    {
      v137 = 1;
      goto LABEL_172;
    }
    v138 = 3;
    v139 = 2;
    v140 = 1;
    while (1)
    {
      v141 = v132[v139];
      if (v138 == a7 + 1 || (v142 = v132[v138], v141 < v142))
      {
        if (v141 > v135)
          goto LABEL_171;
      }
      else
      {
        v141 = v132[v138];
        v139 = v138;
        if (v142 > v135)
        {
LABEL_171:
          v137 = v140;
LABEL_172:
          v132[v137] = v135;
          *(_QWORD *)(v133 + 8 * v137) = v136;
          ++v18;
LABEL_173:
          v10 = (int8x16_t *)((char *)v10 + v134);
          if (++v131 == v11)
            return v18;
          goto LABEL_157;
        }
      }
      v137 = v139;
      v132[v140] = v141;
      *(_QWORD *)(v133 + 8 * v140) = *(_QWORD *)(v133 + 8 * v139);
      v139 *= 2;
      v138 = (2 * v137) | 1;
      v140 = v137;
      if (v139 > a7)
        goto LABEL_172;
    }
  }
  if (v15 != 2)
  v16 = *(_QWORD **)(a1 + 32);
  v17 = v16[4];
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        v18 = 0;
        if (a2)
        {
          v169 = 0;
          v20 = 0;
          v170 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v171 = *(int8x16_t **)(a1 + 160);
          v172 = *v171;
          v173 = a5 - 1;
          v174 = a6 - 8;
          v175 = v171[1].i32[0];
          v176 = a7 + 1;
          v286 = v13 << 32;
          v293 = 0;
          a1 = 8;
          v303 = v170;
LABEL_211:
          v177 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v172))))));
          v178 = (int8x8_t)vadd_s32(vdup_lane_s32(v177, 1), v177);
          v179 = v178.i32[0];
          v178.i32[0] = v10[1].i32[0] ^ v175;
          v180 = (uint8x8_t)vcnt_s8(v178);
          v180.i16[0] = vaddlv_u8(v180);
          if (v179 + v180.i32[0] >= v170)
            goto LABEL_241;
          v181 = v16[2];
          if ((int)v181 >= 65)
          v182 = *(float *)(v12 + 216);
          a3 = v16[1];
          if (a3)
          {
            v183 = 0;
            LOBYTE(v184) = 0;
            LODWORD(v185) = 0;
            v186 = *(_QWORD *)(v12 + 56);
            v187 = v10;
            do
            {
              if (!(_BYTE)v184)
                LODWORD(v185) = v187->u8[0];
              v188 = v185 >> v184;
              v189 = v181 + v184;
              v190 = v189 - 8;
              if (v189 < 8)
              {
                LOBYTE(v184) = v181 + v184;
                v192 = (unsigned __int8 *)v187;
              }
              else
              {
                v191 = 8 - v184;
                v192 = &v187->u8[1];
                v193 = v190 >> 3;
                if (v190 >= 8)
                {
                  do
                  {
                    v194 = *v192++;
                    v188 |= (unint64_t)v194 << v191;
                    v191 += 8;
                    --v193;
                  }
                  while (v193);
                  v192 = &v187->u8[(v190 >> 3) + 1];
                }
                v184 = ((_BYTE)v184 + (_BYTE)v181) & 7;
                if (v184)
                {
                  v185 = *v192;
                  v188 |= v185 << v191;
                }
              }
              v182 = v182 + *(float *)(v186 + 4 * (v188 & ~(-1 << v181)));
              v186 += 4 * v16[5];
              ++v183;
              v187 = (int8x16_t *)v192;
            }
            while (v183 != (unsigned __int8 *)a3);
          }
          ++v20;
          v170 = v303;
          if (*a5 >= v182)
            goto LABEL_241;
          if (v307)
            v195 = *(_QWORD *)(v307 + 8 * v169);
          else
            v195 = v169 | v286;
          if (a7 < 2)
          {
            v196 = 1;
            goto LABEL_240;
          }
          v197 = 3;
          v198 = 2;
          a3 = 1;
          while (1)
          {
            v199 = v173[v198];
            if (v197 == v176 || (v200 = v173[v197], v199 < v200))
            {
              if (v199 > v182)
                goto LABEL_239;
            }
            else
            {
              v199 = v173[v197];
              v198 = v197;
              if (v200 > v182)
              {
LABEL_239:
                v196 = a3;
LABEL_240:
                v173[v196] = v182;
                *(_QWORD *)(v174 + 8 * v196) = v195;
                v18 = ++v293;
LABEL_241:
                v10 = (int8x16_t *)((char *)v10 + 20);
                if (++v169 == v11)
                  goto LABEL_346;
                goto LABEL_211;
              }
            }
            v196 = v198;
            v173[a3] = v199;
            *(_QWORD *)(v174 + 8 * a3) = *(_QWORD *)(v174 + 8 * v198);
            v198 *= 2;
            v197 = (2 * v196) | 1;
            a3 = v196;
            if (v198 > a7)
              goto LABEL_240;
          }
        }
        break;
      case 32:
        v18 = 0;
        if (a2)
        {
          v258 = 0;
          v20 = 0;
          v259 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v260 = *(int8x16_t **)(a1 + 160);
          v261 = a5 - 1;
          v262 = a6 - 8;
          v264 = *v260;
          v263 = v260[1];
          v265 = a7 + 1;
          v296 = v13 << 32;
          v306 = 0;
LABEL_313:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v264))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v263))))))) >= v259)goto LABEL_343;
          a1 = v16[2];
          if ((int)a1 >= 65)
          v266 = *(float *)(v12 + 216);
          a2 = v16[1];
          if (a2)
          {
            a3 = 0;
            LOBYTE(v267) = 0;
            LODWORD(v268) = 0;
            v269 = *(_QWORD *)(v12 + 56);
            v270 = v10;
            do
            {
              if (!(_BYTE)v267)
                LODWORD(v268) = v270->u8[0];
              v271 = v268 >> v267;
              v272 = a1 + v267;
              v273 = v272 - 8;
              if (v272 < 8)
              {
                LOBYTE(v267) = a1 + v267;
                v275 = (unsigned __int8 *)v270;
              }
              else
              {
                v274 = 8 - v267;
                v275 = &v270->u8[1];
                v276 = v273 >> 3;
                if (v273 >= 8)
                {
                  do
                  {
                    v277 = *v275++;
                    v271 |= (unint64_t)v277 << v274;
                    v274 += 8;
                    --v276;
                  }
                  while (v276);
                  v275 = &v270->u8[(v273 >> 3) + 1];
                }
                v267 = ((_BYTE)v267 + (_BYTE)a1) & 7;
                if (v267)
                {
                  v268 = *v275;
                  v271 |= v268 << v274;
                }
              }
              v266 = v266 + *(float *)(v269 + 4 * (v271 & ~(-1 << a1)));
              v269 += 4 * v16[5];
              ++a3;
              v270 = (int8x16_t *)v275;
            }
            while (a3 != a2);
          }
          ++v20;
          if (*a5 >= v266)
            goto LABEL_343;
          if (v307)
            a1 = *(_QWORD *)(v307 + 8 * v258);
          else
            a1 = v258 | v296;
          if (a7 < 2)
          {
            v278 = 1;
            goto LABEL_342;
          }
          v279 = 3;
          a2 = 2;
          a3 = 1;
          while (1)
          {
            v280 = v261[a2];
            if (v279 == v265 || (v281 = v261[v279], v280 < v281))
            {
              if (v280 > v266)
                goto LABEL_341;
            }
            else
            {
              v280 = v261[v279];
              a2 = v279;
              if (v281 > v266)
              {
LABEL_341:
                v278 = a3;
LABEL_342:
                v261[v278] = v266;
                *(_QWORD *)(v262 + 8 * v278) = a1;
                v18 = ++v306;
LABEL_343:
                v10 += 2;
                if (++v258 == v11)
                  goto LABEL_346;
                goto LABEL_313;
              }
            }
            v278 = a2;
            v261[a3] = v280;
            *(_QWORD *)(v262 + 8 * a3) = *(_QWORD *)(v262 + 8 * a2);
            a2 *= 2;
            v279 = (2 * v278) | 1;
            a3 = v278;
            if (a2 > a7)
              goto LABEL_342;
          }
        }
        break;
      case 64:
        v18 = 0;
        if (a2)
        {
          v74 = 0;
          v20 = 0;
          v75 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v76 = *(int8x16_t **)(a1 + 160);
          v78 = v76[2];
          v77 = v76[3];
          v79 = a5 - 1;
          v80 = a6 - 8;
          v82 = *v76;
          v81 = v76[1];
          v83 = a7 + 1;
          v290 = v13 << 32;
          v299 = 0;
LABEL_87:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v82))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v81)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[2], v78))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[3], v77)))))))) >= v75)goto LABEL_117;
          a1 = v16[2];
          if ((int)a1 >= 65)
          v84 = *(float *)(v12 + 216);
          a2 = v16[1];
          if (a2)
          {
            a3 = 0;
            LOBYTE(v85) = 0;
            LODWORD(v86) = 0;
            v87 = *(_QWORD *)(v12 + 56);
            v88 = v10;
            do
            {
              if (!(_BYTE)v85)
                LODWORD(v86) = v88->u8[0];
              v89 = v86 >> v85;
              v90 = a1 + v85;
              v91 = v90 - 8;
              if (v90 < 8)
              {
                LOBYTE(v85) = a1 + v85;
                v93 = (unsigned __int8 *)v88;
              }
              else
              {
                v92 = 8 - v85;
                v93 = &v88->u8[1];
                v94 = v91 >> 3;
                if (v91 >= 8)
                {
                  do
                  {
                    v95 = *v93++;
                    v89 |= (unint64_t)v95 << v92;
                    v92 += 8;
                    --v94;
                  }
                  while (v94);
                  v93 = &v88->u8[(v91 >> 3) + 1];
                }
                v85 = ((_BYTE)v85 + (_BYTE)a1) & 7;
                if (v85)
                {
                  v86 = *v93;
                  v89 |= v86 << v92;
                }
              }
              v84 = v84 + *(float *)(v87 + 4 * (v89 & ~(-1 << a1)));
              v87 += 4 * v16[5];
              ++a3;
              v88 = (int8x16_t *)v93;
            }
            while (a3 != a2);
          }
          ++v20;
          if (*a5 >= v84)
            goto LABEL_117;
          if (v307)
            a1 = *(_QWORD *)(v307 + 8 * v74);
          else
            a1 = v74 | v290;
          if (a7 < 2)
          {
            v96 = 1;
            goto LABEL_116;
          }
          v97 = 3;
          a2 = 2;
          a3 = 1;
          while (1)
          {
            v98 = v79[a2];
            if (v97 == v83 || (v99 = v79[v97], v98 < v99))
            {
              if (v98 > v84)
                goto LABEL_115;
            }
            else
            {
              v98 = v79[v97];
              a2 = v97;
              if (v99 > v84)
              {
LABEL_115:
                v96 = a3;
LABEL_116:
                v79[v96] = v84;
                *(_QWORD *)(v80 + 8 * v96) = a1;
                v18 = ++v299;
LABEL_117:
                v10 += 4;
                if (++v74 == v11)
                  goto LABEL_346;
                goto LABEL_87;
              }
            }
            v96 = a2;
            v79[a3] = v98;
            *(_QWORD *)(v80 + 8 * a3) = *(_QWORD *)(v80 + 8 * a2);
            a2 *= 2;
            v97 = (2 * v96) | 1;
            a3 = v96;
            if (a2 > a7)
              goto LABEL_116;
          }
        }
        break;
      default:
LABEL_243:
        v304 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
        v309 = *(_QWORD *)(a1 + 160);
        v310 = (int)v17 / 8;
        v311 = v17 - (v16 & 0xFFFFFFF8);
        if (!a2)
        {
          v287 = 0;
          v202 = 0;
          goto LABEL_350;
        }
        v201 = 0;
        v202 = 0;
        v287 = 0;
        v294 = (int)v17;
        v284 = v13 << 32;
        v203 = a5 - 1;
        v204 = a6 - 8;
        v205 = a7 + 1;
LABEL_245:
        a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v309, (const unsigned __int8 *)v10);
        if ((int)a1 >= v304)
          goto LABEL_275;
        v208 = *(_QWORD **)(v12 + 32);
        v209 = v208[2];
        if ((int)v209 >= 65)
        v210 = *(float *)(v12 + 216);
        v211 = v208[1];
        if (v211)
        {
          v212 = 0;
          LOBYTE(v213) = 0;
          LODWORD(v214) = 0;
          v215 = *(_QWORD *)(v12 + 56);
          v216 = v208[5];
          v217 = (unsigned __int8 *)v10;
          do
          {
            if (!(_BYTE)v213)
              LODWORD(v214) = *v217;
            v218 = v214 >> v213;
            v219 = v209 + v213;
            v220 = v219 - 8;
            if (v219 < 8)
            {
              LOBYTE(v213) = v209 + v213;
              a1 = (uint64_t)v217;
            }
            else
            {
              v221 = 8 - v213;
              a1 = (uint64_t)(v217 + 1);
              v222 = v220 >> 3;
              if (v220 >= 8)
              {
                do
                {
                  v223 = *(unsigned __int8 *)a1++;
                  v218 |= (unint64_t)v223 << v221;
                  v221 += 8;
                  --v222;
                }
                while (v222);
                a1 = (uint64_t)&v217[(v220 >> 3) + 1];
              }
              v213 = ((_BYTE)v213 + (_BYTE)v209) & 7;
              if (v213)
              {
                v214 = *(unsigned __int8 *)a1;
                v218 |= v214 << v221;
              }
            }
            v210 = v210 + *(float *)(v215 + 4 * (v218 & ~(-1 << v209)));
            v215 += 4 * v216;
            ++v212;
            v217 = (unsigned __int8 *)a1;
          }
          while (v212 != v211);
        }
        ++v202;
        if (*a5 >= v210)
          goto LABEL_275;
        if (v307)
          v224 = *(_QWORD *)(v307 + 8 * v201);
        else
          v224 = v201 | v284;
        if (a7 < 2)
        {
          v225 = 1;
          goto LABEL_274;
        }
        v226 = 3;
        v227 = 2;
        v228 = 1;
        while (1)
        {
          v229 = v203[v227];
          if (v226 == v205 || (v230 = v203[v226], v229 < v230))
          {
            if (v229 > v210)
              goto LABEL_273;
          }
          else
          {
            v229 = v203[v226];
            v227 = v226;
            if (v230 > v210)
            {
LABEL_273:
              v225 = v228;
LABEL_274:
              v203[v225] = v210;
              *(_QWORD *)(v204 + 8 * v225) = v224;
              ++v287;
LABEL_275:
              v10 = (int8x16_t *)((char *)v10 + v294);
              if (++v201 == v11)
              {
LABEL_350:
                faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
                *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) += v202;
                return v287;
              }
              goto LABEL_245;
            }
          }
          v225 = v227;
          v203[v228] = v229;
          *(_QWORD *)(v204 + 8 * v228) = *(_QWORD *)(v204 + 8 * v227);
          v227 *= 2;
          v226 = (2 * v225) | 1;
          v228 = v225;
          if (v227 > a7)
            goto LABEL_274;
        }
    }
LABEL_345:
    v20 = 0;
    goto LABEL_346;
  }
  if (v17 == 4)
  {
    v18 = 0;
    if (a2)
    {
      v143 = 0;
      v20 = 0;
      v144 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
      v145 = a5 - 1;
      v146 = a6 - 8;
      v147 = **(_DWORD **)(a1 + 160);
      v148 = a7 + 1;
      v285 = v13 << 32;
      v292 = 0;
      a1 = 8;
      v302 = v144;
LABEL_177:
      a8.i32[0] = v10->i32[0] ^ v147;
      a8 = vcnt_s8(a8);
      a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
      if (a8.i32[0] >= v144)
        goto LABEL_207;
      v149 = v16[2];
      if ((int)v149 >= 65)
      v150 = *(float *)(v12 + 216);
      a3 = v16[1];
      if (a3)
      {
        v151 = 0;
        LOBYTE(v152) = 0;
        LODWORD(v153) = 0;
        v154 = *(_QWORD *)(v12 + 56);
        v155 = v10;
        do
        {
          if (!(_BYTE)v152)
            LODWORD(v153) = v155->u8[0];
          v156 = v153 >> v152;
          v157 = v149 + v152;
          v158 = v157 - 8;
          if (v157 < 8)
          {
            LOBYTE(v152) = v149 + v152;
            v160 = (unsigned __int8 *)v155;
          }
          else
          {
            v159 = 8 - v152;
            v160 = &v155->u8[1];
            v161 = v158 >> 3;
            if (v158 >= 8)
            {
              do
              {
                v162 = *v160++;
                v156 |= (unint64_t)v162 << v159;
                v159 += 8;
                --v161;
              }
              while (v161);
              v160 = &v155->u8[(v158 >> 3) + 1];
            }
            v152 = ((_BYTE)v152 + (_BYTE)v149) & 7;
            if (v152)
            {
              v153 = *v160;
              v156 |= v153 << v159;
            }
          }
          v150 = v150 + *(float *)(v154 + 4 * (v156 & ~(-1 << v149)));
          v154 += 4 * v16[5];
          ++v151;
          v155 = (int8x16_t *)v160;
        }
        while (v151 != (unsigned __int8 *)a3);
      }
      ++v20;
      v144 = v302;
      if (*a5 >= v150)
        goto LABEL_207;
      if (v307)
        v163 = *(_QWORD *)(v307 + 8 * v143);
      else
        v163 = v143 | v285;
      if (a7 < 2)
      {
        v164 = 1;
        goto LABEL_206;
      }
      v165 = 3;
      v166 = 2;
      a3 = 1;
      while (1)
      {
        v167 = v145[v166];
        if (v165 == v148 || (v168 = v145[v165], v167 < v168))
        {
          if (v167 > v150)
            goto LABEL_205;
        }
        else
        {
          v167 = v145[v165];
          v166 = v165;
          if (v168 > v150)
          {
LABEL_205:
            v164 = a3;
LABEL_206:
            v145[v164] = v150;
            *(_QWORD *)(v146 + 8 * v164) = v163;
            v18 = ++v292;
LABEL_207:
            v10 = (int8x16_t *)((char *)v10 + 4);
            if (++v143 == v11)
              goto LABEL_346;
            goto LABEL_177;
          }
        }
        v164 = v166;
        v145[a3] = v167;
        *(_QWORD *)(v146 + 8 * a3) = *(_QWORD *)(v146 + 8 * v166);
        v166 *= 2;
        v165 = (2 * v164) | 1;
        a3 = v164;
        if (v166 > a7)
          goto LABEL_206;
      }
    }
    goto LABEL_345;
  }
  if (v17 == 8)
  {
    v18 = 0;
    if (a2)
    {
      v231 = 0;
      v20 = 0;
      v232 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
      v233 = a5 - 1;
      v234 = a6 - 8;
      v235 = **(_QWORD **)(a1 + 160);
      v236 = a7 + 1;
      v288 = v13 << 32;
      v295 = 0;
      a1 = 8;
      v305 = v232;
LABEL_279:
      v237 = (uint8x8_t)vcnt_s8((int8x8_t)(v10->i64[0] ^ v235));
      v237.i16[0] = vaddlv_u8(v237);
      if (v232 <= v237.i32[0])
        goto LABEL_309;
      v238 = v16[2];
      if ((int)v238 >= 65)
      v239 = *(float *)(v12 + 216);
      a3 = v16[1];
      if (a3)
      {
        v240 = 0;
        LOBYTE(v241) = 0;
        LODWORD(v242) = 0;
        v243 = *(_QWORD *)(v12 + 56);
        v244 = v10;
        do
        {
          if (!(_BYTE)v241)
            LODWORD(v242) = v244->u8[0];
          v245 = v242 >> v241;
          v246 = v238 + v241;
          v247 = v246 - 8;
          if (v246 < 8)
          {
            LOBYTE(v241) = v238 + v241;
            v249 = (unsigned __int8 *)v244;
          }
          else
          {
            v248 = 8 - v241;
            v249 = &v244->u8[1];
            v250 = v247 >> 3;
            if (v247 >= 8)
            {
              do
              {
                v251 = *v249++;
                v245 |= (unint64_t)v251 << v248;
                v248 += 8;
                --v250;
              }
              while (v250);
              v249 = &v244->u8[(v247 >> 3) + 1];
            }
            v241 = ((_BYTE)v241 + (_BYTE)v238) & 7;
            if (v241)
            {
              v242 = *v249;
              v245 |= v242 << v248;
            }
          }
          v239 = v239 + *(float *)(v243 + 4 * (v245 & ~(-1 << v238)));
          v243 += 4 * v16[5];
          ++v240;
          v244 = (int8x16_t *)v249;
        }
        while (v240 != (unsigned __int8 *)a3);
      }
      ++v20;
      v232 = v305;
      if (*a5 >= v239)
        goto LABEL_309;
      if (v307)
        v252 = *(_QWORD *)(v307 + 8 * v231);
      else
        v252 = v231 | v288;
      if (a7 < 2)
      {
        v253 = 1;
        goto LABEL_308;
      }
      v254 = 3;
      v255 = 2;
      a3 = 1;
      while (1)
      {
        v256 = v233[v255];
        if (v254 == v236 || (v257 = v233[v254], v256 < v257))
        {
          if (v256 > v239)
            goto LABEL_307;
        }
        else
        {
          v256 = v233[v254];
          v255 = v254;
          if (v257 > v239)
          {
LABEL_307:
            v253 = a3;
LABEL_308:
            v233[v253] = v239;
            *(_QWORD *)(v234 + 8 * v253) = v252;
            v18 = ++v295;
LABEL_309:
            v10 = (int8x16_t *)((char *)v10 + 8);
            if (++v231 == v11)
              goto LABEL_346;
            goto LABEL_279;
          }
        }
        v253 = v255;
        v233[a3] = v256;
        *(_QWORD *)(v234 + 8 * a3) = *(_QWORD *)(v234 + 8 * v255);
        v255 *= 2;
        v254 = (2 * v253) | 1;
        a3 = v253;
        if (v255 > a7)
          goto LABEL_308;
      }
    }
    goto LABEL_345;
  }
  if (v17 != 16)
    goto LABEL_243;
  v18 = 0;
  if (!a2)
    goto LABEL_345;
  v19 = 0;
  v20 = 0;
  v21 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
  v22 = a5 - 1;
  v23 = a6 - 8;
  v24 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
  v25 = a7 + 1;
  v289 = v13 << 32;
  v297 = 0;
  do
  {
    v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v24))))));
    if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v21)
      goto LABEL_42;
    a1 = v16[2];
    if ((int)a1 >= 65)
    v27 = *(float *)(v12 + 216);
    a2 = v16[1];
    if (a2)
    {
      a3 = 0;
      LOBYTE(v28) = 0;
      LODWORD(v29) = 0;
      v30 = *(_QWORD *)(v12 + 56);
      v31 = v10;
      do
      {
        if (!(_BYTE)v28)
          LODWORD(v29) = v31->u8[0];
        v32 = v29 >> v28;
        v33 = a1 + v28;
        v34 = v33 - 8;
        if (v33 < 8)
        {
          LOBYTE(v28) = a1 + v28;
          v36 = (unsigned __int8 *)v31;
        }
        else
        {
          v35 = 8 - v28;
          v36 = &v31->u8[1];
          v37 = v34 >> 3;
          if (v34 >= 8)
          {
            do
            {
              v38 = *v36++;
              v32 |= (unint64_t)v38 << v35;
              v35 += 8;
              --v37;
            }
            while (v37);
            v36 = &v31->u8[(v34 >> 3) + 1];
          }
          v28 = ((_BYTE)v28 + (_BYTE)a1) & 7;
          if (v28)
          {
            v29 = *v36;
            v32 |= v29 << v35;
          }
        }
        v27 = v27 + *(float *)(v30 + 4 * (v32 & ~(-1 << a1)));
        v30 += 4 * v16[5];
        ++a3;
        v31 = (int8x16_t *)v36;
      }
      while (a3 != a2);
    }
    ++v20;
    if (*a5 >= v27)
      goto LABEL_42;
    if (v307)
      a1 = *(_QWORD *)(v307 + 8 * v19);
    else
      a1 = v19 | v289;
    if (a7 < 2)
    {
      v39 = 1;
      goto LABEL_41;
    }
    v40 = 3;
    a2 = 2;
    a3 = 1;
    while (1)
    {
      v41 = v22[a2];
      if (v40 != v25)
      {
        v42 = v22[v40];
        if (v41 >= v42)
          break;
      }
      if (v41 > v27)
        goto LABEL_40;
LABEL_38:
      v39 = a2;
      v22[a3] = v41;
      *(_QWORD *)(v23 + 8 * a3) = *(_QWORD *)(v23 + 8 * a2);
      a2 *= 2;
      v40 = (2 * v39) | 1;
      a3 = v39;
      if (a2 > a7)
        goto LABEL_41;
    }
    v41 = v22[v40];
    a2 = v40;
    if (v42 <= v27)
      goto LABEL_38;
LABEL_40:
    v39 = a3;
LABEL_41:
    v22[v39] = v27;
    *(_QWORD *)(v23 + 8 * v39) = a1;
    v18 = ++v297;
LABEL_42:
    ++v10;
    ++v19;
  }
  while (v19 != v11);
LABEL_346:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) += v20;
  return v18;
}

void sub_1D48FEEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::scan_codes_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  int v6;
  float v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  int8x16_t v19;
  int32x2_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  _QWORD *v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  char v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  __int32 v116;
  int8x16_t *v117;
  int8x16_t v118;
  __int32 v119;
  int32x2_t v120;
  int8x8_t v121;
  __int32 v122;
  uint8x8_t v123;
  _QWORD *v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  char v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint8x8_t v165;
  _QWORD *v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int8x16_t *v183;
  int8x16_t v184;
  int8x16_t v185;
  _QWORD *v186;
  uint64_t v187;
  float v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  float v205;
  uint64_t v206;
  void *exception;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  uint64_t v216;
  int v217;
  int v218;

  v8 = *(float *)&a6;
  v9 = (int8x16_t *)a3;
  v10 = a2;
  v11 = a1;
  v12 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v14 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) >= 1)
  {
    if (v14 != 2)
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            v115 = 0;
            v17 = 0;
            v116 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v117 = *(int8x16_t **)(a1 + 160);
            v118 = *v117;
            v119 = v117[1].i32[0];
            v214 = *v117;
            do
            {
              v120 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v118))))));
              v121 = (int8x8_t)vadd_s32(vdup_lane_s32(v120, 1), v120);
              v122 = v121.i32[0];
              v121.i32[0] = v9[1].i32[0] ^ v119;
              v123 = (uint8x8_t)vcnt_s8(v121);
              v123.i16[0] = vaddlv_u8(v123);
              if (v122 + v123.i32[0] < v116)
              {
                v124 = *(_QWORD **)(v11 + 32);
                v125 = v124[2];
                if ((int)v125 >= 65)
                v126 = *(float *)(v11 + 216);
                v127 = v124[1];
                if (v127)
                {
                  v128 = 0;
                  LOBYTE(v129) = 0;
                  LODWORD(v130) = 0;
                  v131 = *(_QWORD *)(v11 + 56);
                  v132 = v124[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v129)
                      LODWORD(v130) = *(unsigned __int8 *)a2;
                    v133 = v130 >> v129;
                    v134 = v125 + v129;
                    v135 = v134 - 8;
                    if (v134 < 8)
                    {
                      LOBYTE(v129) = v125 + v129;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v129;
                      a1 = a2 + 1;
                      v136 = v135 >> 3;
                      if (v135 >= 8)
                      {
                        do
                        {
                          v137 = *(unsigned __int8 *)a1++;
                          v133 |= (unint64_t)v137 << a3;
                          a3 += 8;
                          --v136;
                        }
                        while (v136);
                        a1 = a2 + (v135 >> 3) - 1 + 2;
                      }
                      v129 = ((_BYTE)v129 + (_BYTE)v125) & 7;
                      if (v129)
                      {
                        v130 = *(unsigned __int8 *)a1;
                        v133 |= v130 << a3;
                      }
                    }
                    v126 = v126 + *(float *)(v131 + 4 * (v133 & ~(-1 << v125)));
                    v131 += 4 * v132;
                    ++v128;
                    a2 = a1;
                  }
                  while (v128 != v127);
                }
                ++v17;
                if (v126 > v8)
                {
                  if (a4)
                    v138 = *(_QWORD *)(a4 + 8 * v115);
                  else
                    v138 = v115 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v126, v138);
                  v118 = v214;
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 20);
              ++v115;
            }
            while (v115 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 32:
          if (a2)
          {
            v181 = 0;
            v17 = 0;
            v182 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v183 = *(int8x16_t **)(a1 + 160);
            v185 = *v183;
            v184 = v183[1];
            v211 = *v183;
            v215 = v184;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v185))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v184))))))) < v182)
              {
                v186 = *(_QWORD **)(v11 + 32);
                v187 = v186[2];
                if ((int)v187 >= 65)
                v188 = *(float *)(v11 + 216);
                v189 = v186[1];
                if (v189)
                {
                  v190 = 0;
                  LOBYTE(v191) = 0;
                  LODWORD(v192) = 0;
                  v193 = *(_QWORD *)(v11 + 56);
                  v194 = v186[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v191)
                      LODWORD(v192) = *(unsigned __int8 *)a2;
                    v195 = v192 >> v191;
                    v196 = v187 + v191;
                    v197 = v196 - 8;
                    if (v196 < 8)
                    {
                      LOBYTE(v191) = v187 + v191;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v191;
                      a1 = a2 + 1;
                      v198 = v197 >> 3;
                      if (v197 >= 8)
                      {
                        do
                        {
                          v199 = *(unsigned __int8 *)a1++;
                          v195 |= (unint64_t)v199 << a3;
                          a3 += 8;
                          --v198;
                        }
                        while (v198);
                        a1 = a2 + (v197 >> 3) - 1 + 2;
                      }
                      v191 = ((_BYTE)v191 + (_BYTE)v187) & 7;
                      if (v191)
                      {
                        v192 = *(unsigned __int8 *)a1;
                        v195 |= v192 << a3;
                      }
                    }
                    v188 = v188 + *(float *)(v193 + 4 * (v195 & ~(-1 << v187)));
                    v193 += 4 * v194;
                    ++v190;
                    a2 = a1;
                  }
                  while (v190 != v189);
                }
                ++v17;
                if (v188 > v8)
                {
                  if (a4)
                    v200 = *(_QWORD *)(a4 + 8 * v181);
                  else
                    v200 = v181 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v188, v200);
                  v185 = v211;
                  v184 = v215;
                }
              }
              v9 += 2;
              ++v181;
            }
            while (v181 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 64:
          if (a2)
          {
            v54 = 0;
            v17 = 0;
            v55 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v56 = *(int8x16_t **)(a1 + 160);
            v58 = v56[2];
            v57 = v56[3];
            v60 = *v56;
            v59 = v56[1];
            v210 = v58;
            v213 = v57;
            v208 = *v56;
            v209 = v59;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v60))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v59)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[2], v58))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[3], v57)))))))) < v55)
              {
                v61 = *(_QWORD **)(v11 + 32);
                v62 = v61[2];
                if ((int)v62 >= 65)
                v63 = *(float *)(v11 + 216);
                v64 = v61[1];
                if (v64)
                {
                  v65 = 0;
                  LOBYTE(v66) = 0;
                  LODWORD(v67) = 0;
                  v68 = *(_QWORD *)(v11 + 56);
                  v69 = v61[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v66)
                      LODWORD(v67) = *(unsigned __int8 *)a2;
                    v70 = v67 >> v66;
                    v71 = v62 + v66;
                    v72 = v71 - 8;
                    if (v71 < 8)
                    {
                      LOBYTE(v66) = v62 + v66;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v66;
                      a1 = a2 + 1;
                      v73 = v72 >> 3;
                      if (v72 >= 8)
                      {
                        do
                        {
                          v74 = *(unsigned __int8 *)a1++;
                          v70 |= (unint64_t)v74 << a3;
                          a3 += 8;
                          --v73;
                        }
                        while (v73);
                        a1 = a2 + (v72 >> 3) - 1 + 2;
                      }
                      v66 = ((_BYTE)v66 + (_BYTE)v62) & 7;
                      if (v66)
                      {
                        v67 = *(unsigned __int8 *)a1;
                        v70 |= v67 << a3;
                      }
                    }
                    v63 = v63 + *(float *)(v68 + 4 * (v70 & ~(-1 << v62)));
                    v68 += 4 * v69;
                    ++v65;
                    a2 = a1;
                  }
                  while (v65 != v64);
                }
                ++v17;
                if (v63 > v8)
                {
                  if (a4)
                    v75 = *(_QWORD *)(a4 + 8 * v54);
                  else
                    v75 = v54 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v63, v75);
                  v58 = v210;
                  v57 = v213;
                  v60 = v208;
                  v59 = v209;
                }
              }
              v9 += 4;
              ++v54;
            }
            while (v54 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            v97 = 0;
            v17 = 0;
            v98 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v99 = **(_DWORD **)(a1 + 160);
            do
            {
              LODWORD(a6) = v9->i32[0] ^ v99;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v98)
              {
                v100 = *(_QWORD **)(v11 + 32);
                v101 = v100[2];
                if ((int)v101 >= 65)
                v102 = *(float *)(v11 + 216);
                v103 = v100[1];
                if (v103)
                {
                  v104 = 0;
                  LOBYTE(v105) = 0;
                  LODWORD(v106) = 0;
                  v107 = *(_QWORD *)(v11 + 56);
                  v108 = v100[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v105)
                      LODWORD(v106) = *(unsigned __int8 *)a2;
                    v109 = v106 >> v105;
                    v110 = v101 + v105;
                    v111 = v110 - 8;
                    if (v110 < 8)
                    {
                      LOBYTE(v105) = v101 + v105;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v105;
                      a1 = a2 + 1;
                      v112 = v111 >> 3;
                      if (v111 >= 8)
                      {
                        do
                        {
                          v113 = *(unsigned __int8 *)a1++;
                          v109 |= (unint64_t)v113 << a3;
                          a3 += 8;
                          --v112;
                        }
                        while (v112);
                        a1 = a2 + (v111 >> 3) - 1 + 2;
                      }
                      v105 = ((_BYTE)v105 + (_BYTE)v101) & 7;
                      if (v105)
                      {
                        v106 = *(unsigned __int8 *)a1;
                        v109 |= v106 << a3;
                      }
                    }
                    v102 = v102 + *(float *)(v107 + 4 * (v109 & ~(-1 << v101)));
                    v107 += 4 * v108;
                    ++v104;
                    a2 = a1;
                  }
                  while (v104 != v103);
                }
                ++v17;
                if (v102 > v8)
                {
                  if (a4)
                    v114 = *(_QWORD *)(a4 + 8 * v97);
                  else
                    v114 = v97 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v102, v114);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 4);
              ++v97;
            }
            while (v97 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 8:
          if (a2)
          {
            v162 = 0;
            v17 = 0;
            v163 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v164 = **(_QWORD **)(a1 + 160);
            do
            {
              v165 = (uint8x8_t)vcnt_s8((int8x8_t)(v9->i64[0] ^ v164));
              v165.i16[0] = vaddlv_u8(v165);
              if (v163 > v165.i32[0])
              {
                v166 = *(_QWORD **)(v11 + 32);
                v167 = v166[2];
                if ((int)v167 >= 65)
                v168 = *(float *)(v11 + 216);
                v169 = v166[1];
                if (v169)
                {
                  v170 = 0;
                  LOBYTE(v171) = 0;
                  LODWORD(v172) = 0;
                  v173 = *(_QWORD *)(v11 + 56);
                  v174 = v166[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v171)
                      LODWORD(v172) = *(unsigned __int8 *)a2;
                    v175 = v172 >> v171;
                    v176 = v167 + v171;
                    v177 = v176 - 8;
                    if (v176 < 8)
                    {
                      LOBYTE(v171) = v167 + v171;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v171;
                      a1 = a2 + 1;
                      v178 = v177 >> 3;
                      if (v177 >= 8)
                      {
                        do
                        {
                          v179 = *(unsigned __int8 *)a1++;
                          v175 |= (unint64_t)v179 << a3;
                          a3 += 8;
                          --v178;
                        }
                        while (v178);
                        a1 = a2 + (v177 >> 3) - 1 + 2;
                      }
                      v171 = ((_BYTE)v171 + (_BYTE)v167) & 7;
                      if (v171)
                      {
                        v172 = *(unsigned __int8 *)a1;
                        v175 |= v172 << a3;
                      }
                    }
                    v168 = v168 + *(float *)(v173 + 4 * (v175 & ~(-1 << v167)));
                    v173 += 4 * v174;
                    ++v170;
                    a2 = a1;
                  }
                  while (v170 != v169);
                }
                ++v17;
                if (v168 > v8)
                {
                  if (a4)
                    v180 = *(_QWORD *)(a4 + 8 * v162);
                  else
                    v180 = v162 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v168, v180);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 8);
              ++v162;
            }
            while (v162 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 16:
          if (a2)
          {
            v16 = 0;
            v17 = 0;
            v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v19 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
            v212 = v19;
            do
            {
              v20 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v19))))));
              if (vadd_s32(vdup_lane_s32(v20, 1), v20).i32[0] < v18)
              {
                v21 = *(_QWORD **)(v11 + 32);
                v22 = v21[2];
                if ((int)v22 >= 65)
                v23 = *(float *)(v11 + 216);
                v24 = v21[1];
                if (v24)
                {
                  v25 = 0;
                  LOBYTE(v26) = 0;
                  LODWORD(v27) = 0;
                  v28 = *(_QWORD *)(v11 + 56);
                  v29 = v21[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v26)
                      LODWORD(v27) = *(unsigned __int8 *)a2;
                    v30 = v27 >> v26;
                    v31 = v22 + v26;
                    v32 = v31 - 8;
                    if (v31 < 8)
                    {
                      LOBYTE(v26) = v22 + v26;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v26;
                      a1 = a2 + 1;
                      v33 = v32 >> 3;
                      if (v32 >= 8)
                      {
                        do
                        {
                          v34 = *(unsigned __int8 *)a1++;
                          v30 |= (unint64_t)v34 << a3;
                          a3 += 8;
                          --v33;
                        }
                        while (v33);
                        a1 = a2 + (v32 >> 3) - 1 + 2;
                      }
                      v26 = ((_BYTE)v26 + (_BYTE)v22) & 7;
                      if (v26)
                      {
                        v27 = *(unsigned __int8 *)a1;
                        v30 |= v27 << a3;
                      }
                    }
                    v23 = v23 + *(float *)(v28 + 4 * (v30 & ~(-1 << v22)));
                    v28 += 4 * v29;
                    ++v25;
                    a2 = a1;
                  }
                  while (v25 != v24);
                }
                ++v17;
                if (v23 > v8)
                {
                  if (a4)
                    v35 = *(_QWORD *)(a4 + 8 * v16);
                  else
                    v35 = v16 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v23, v35);
                  v19 = v212;
                }
              }
              ++v9;
              ++v16;
            }
            while (v16 != v10);
            goto LABEL_229;
          }
LABEL_228:
          v17 = 0;
LABEL_229:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
          v201 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_230:
          *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v201;
          return;
      }
    }
    v139 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
    v216 = *(_QWORD *)(a1 + 160);
    v217 = (int)v15 / 8;
    v218 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      v140 = 0;
      v141 = 0;
      v142 = (int)v15;
      do
      {
        a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v216, (const unsigned __int8 *)v9);
        if ((int)a1 < v139)
        {
          v145 = *(_QWORD **)(v11 + 32);
          v146 = v145[2];
          if ((int)v146 >= 65)
          v147 = *(float *)(v11 + 216);
          v148 = v145[1];
          if (v148)
          {
            v149 = 0;
            LOBYTE(v150) = 0;
            LODWORD(v151) = 0;
            v152 = *(_QWORD *)(v11 + 56);
            v153 = v145[5];
            v154 = (unsigned __int8 *)v9;
            do
            {
              if (!(_BYTE)v150)
                LODWORD(v151) = *v154;
              v155 = v151 >> v150;
              v156 = v146 + v150;
              v157 = v156 - 8;
              if (v156 < 8)
              {
                LOBYTE(v150) = v146 + v150;
                a1 = (uint64_t)v154;
              }
              else
              {
                v158 = 8 - v150;
                a1 = (uint64_t)(v154 + 1);
                v159 = v157 >> 3;
                if (v157 >= 8)
                {
                  do
                  {
                    v160 = *(unsigned __int8 *)a1++;
                    v155 |= (unint64_t)v160 << v158;
                    v158 += 8;
                    --v159;
                  }
                  while (v159);
                  a1 = (uint64_t)&v154[(v157 >> 3) + 1];
                }
                v150 = ((_BYTE)v150 + (_BYTE)v146) & 7;
                if (v150)
                {
                  v151 = *(unsigned __int8 *)a1;
                  v155 |= v151 << v158;
                }
              }
              v147 = v147 + *(float *)(v152 + 4 * (v155 & ~(-1 << v146)));
              v152 += 4 * v153;
              ++v149;
              v154 = (unsigned __int8 *)a1;
            }
            while (v149 != v148);
          }
          ++v141;
          if (v147 > v8)
          {
            if (a4)
              v161 = *(_QWORD *)(a4 + 8 * v140);
            else
              v161 = v140 | (v12 << 32);
            faiss::RangeQueryResult::add(this, v147, v161);
          }
        }
        v9 = (int8x16_t *)((char *)v9 + v142);
        ++v140;
      }
      while (v140 != v10);
    }
    else
    {
      v141 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
    v201 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v141;
    goto LABEL_230;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        v76 = 0;
        v77 = v12 << 32;
        do
        {
          v78 = *(_QWORD **)(v11 + 32);
          v79 = v78[2];
          if ((int)v79 >= 65)
          v80 = *(float *)(v11 + 216);
          v81 = v78[1];
          if (v81)
          {
            v82 = 0;
            LOBYTE(v83) = 0;
            LODWORD(v84) = 0;
            v85 = *(_QWORD *)(v11 + 64);
            a1 = v78[5];
            a2 = (uint64_t)v9;
            do
            {
              if (!(_BYTE)v83)
                LODWORD(v84) = *(unsigned __int8 *)a2;
              v86 = v84 >> v83;
              v87 = v79 + v83;
              v88 = v87 - 8;
              if (v87 < 8)
              {
                LOBYTE(v83) = v79 + v83;
              }
              else
              {
                v89 = 8 - v83;
                v90 = (unsigned __int8 *)(a2 + 1);
                if (v88 < 8)
                {
                  ++a2;
                }
                else
                {
                  v91 = v88 >> 3;
                  v92 = v91 - 1;
                  do
                  {
                    v93 = *v90++;
                    v86 |= (unint64_t)v93 << v89;
                    v89 += 8;
                    --v91;
                  }
                  while (v91);
                  a2 += v92 + 2;
                }
                v83 = ((_BYTE)v83 + (_BYTE)v79) & 7;
                if (v83)
                {
                  v84 = *(unsigned __int8 *)a2;
                  v86 |= v84 << v89;
                }
              }
              a3 = 4 * (int)(v86 & ~(-1 << v79));
              v80 = v80
                  + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v11 + 112) + 8 * v82) + a3)
                          + (float)(*(float *)(v85 + a3) * -2.0));
              v85 += 4 * a1;
              ++v82;
            }
            while (v82 != v81);
          }
          v94 = v78[4];
          if (v80 > v8)
          {
            if (a4)
              v95 = *(_QWORD *)(a4 + 8 * v76);
            else
              v95 = v76 | v77;
            faiss::RangeQueryResult::add(this, v80, v95);
          }
          v9 = (int8x16_t *)((char *)v9 + v94);
          ++v76;
        }
        while (v76 != v10);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v216, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v216, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoderGeneric>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        v36 = 0;
        v37 = v12 << 32;
        do
        {
          v38 = *(_QWORD **)(v11 + 32);
          v39 = v38[2];
          if ((int)v39 >= 65)
          v40 = *(float *)(v11 + 216);
          v41 = v38[1];
          if (v41)
          {
            v42 = 0;
            LOBYTE(v43) = 0;
            LODWORD(v44) = 0;
            v45 = *(_QWORD *)(v11 + 56);
            a1 = (uint64_t)v9;
            do
            {
              if (!(_BYTE)v43)
                LODWORD(v44) = *(unsigned __int8 *)a1;
              v46 = v44 >> v43;
              a3 = v39 + v43;
              v47 = a3 - 8;
              if ((int)a3 < 8)
              {
                LOBYTE(v43) = v39 + v43;
              }
              else
              {
                a3 = 8 - v43;
                v48 = (unsigned __int8 *)(a1 + 1);
                if (v47 < 8)
                {
                  ++a1;
                }
                else
                {
                  v49 = v47 >> 3;
                  v50 = v49 - 1;
                  do
                  {
                    v51 = *v48++;
                    v46 |= (unint64_t)v51 << a3;
                    a3 += 8;
                    --v49;
                  }
                  while (v49);
                  a1 += v50 + 2;
                }
                v43 = ((_BYTE)v43 + (_BYTE)v39) & 7;
                if (v43)
                {
                  v44 = *(unsigned __int8 *)a1;
                  a3 = v44 << a3;
                  v46 |= a3;
                }
              }
              a2 = v46 & ~(-1 << v39);
              v40 = v40 + *(float *)(v45 + 4 * a2);
              v45 += 4 * v38[5];
              ++v42;
            }
            while (v42 != v41);
          }
          v52 = v38[4];
          if (v40 > v8)
          {
            if (a4)
              v53 = *(_QWORD *)(a4 + 8 * v36);
            else
              v53 = v36 | v37;
            faiss::RangeQueryResult::add(this, v40, v53);
          }
          v9 = (int8x16_t *)((char *)v9 + v52);
          ++v36;
        }
        while (v36 != v10);
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 44))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), v12, *(_QWORD *)(a1 + 72));
      v96 = faiss::fvec_inner_product(*(faiss **)(v11 + 72), *(const float **)(v11 + 136), *(int *)(v11 + 24));
      if (!v10)
        return;
    }
    else
    {
      v96 = 0.0;
      if (!a2)
        return;
    }
    v202 = 0;
    v203 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*(_DWORD **)(v11 + 32), (uint64_t)v9, *(_QWORD *)(v11 + 80));
      v204 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 32);
      v205 = v96 + faiss::fvec_inner_product(*(faiss **)(v11 + 80), *(const float **)(v11 + 136), *(int *)(v11 + 24));
      if (v205 > v8)
      {
        if (a4)
          v206 = *(_QWORD *)(a4 + 8 * v202);
        else
          v206 = v202 | v203;
        faiss::RangeQueryResult::add(this, v205, v206);
      }
      v9 = (int8x16_t *)((char *)v9 + v204);
      ++v202;
    }
    while (v10 != v202);
  }
}

void sub_1D48FFEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

_QWORD *faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1D82628A4);
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  faiss::_anonymous_namespace_::QueryTables *v5;
  float v6;

  v4 = *(_DWORD *)(a1 + 224);
  v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(_QWORD *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2)
      return;
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::distance_to_code(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  if (*(_DWORD *)(a1 + 224) != 2)
  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[2];
  if ((int)v4 > 64)
  result = *(float *)(a1 + 216);
  v6 = v3[1];
  if (v6)
  {
    v7 = 0;
    LOBYTE(v8) = 0;
    LODWORD(v9) = 0;
    v10 = *(_QWORD *)(a1 + 56);
    v11 = v3[5];
    do
    {
      if (!(_BYTE)v8)
        LODWORD(v9) = *a2;
      v12 = v9 >> v8;
      v13 = v4 + v8;
      v14 = v13 - 8;
      if (v13 < 8)
      {
        LOBYTE(v8) = v4 + v8;
      }
      else
      {
        v15 = 8 - v8;
        v16 = a2 + 1;
        if (v14 < 8)
        {
          ++a2;
        }
        else
        {
          v17 = v14 >> 3;
          v18 = v17 - 1;
          do
          {
            v19 = *v16++;
            v12 |= (unint64_t)v19 << v15;
            v15 += 8;
            --v17;
          }
          while (v17);
          a2 += v18 + 2;
        }
        v8 = ((_BYTE)v8 + (_BYTE)v4) & 7;
        if (v8)
        {
          v9 = *a2;
          v12 |= v9 << v15;
        }
      }
      result = result + *(float *)(v10 + 4 * (v12 & ~(-1 << v4)));
      v10 += 4 * v11;
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

faiss::IndexIVFPQStats *faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::scan_codes(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  int8x16_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 v21;
  float *v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  int32x2_t v26;
  float v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  char v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  char v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int8x16_t *v78;
  int8x16_t v79;
  int8x16_t v80;
  float *v81;
  uint64_t v82;
  int8x16_t v83;
  int8x16_t v84;
  unint64_t v85;
  float v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int8x16_t *v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  char v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  float v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int8x16_t *v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  char v121;
  unsigned __int8 *v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  float v131;
  float v132;
  const float **v133;
  uint64_t v134;
  const float *v135;
  float *v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  float v145;
  float v146;
  uint64_t v147;
  int v148;
  float *v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  float v154;
  unsigned __int8 *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int8x16_t *v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  char v163;
  unsigned __int8 *v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  float v172;
  uint64_t v173;
  __int32 v174;
  int8x16_t *v175;
  int8x16_t v176;
  float *v177;
  uint64_t v178;
  __int32 v179;
  unint64_t v180;
  int32x2_t v181;
  int8x8_t v182;
  __int32 v183;
  uint8x8_t v184;
  uint64_t v185;
  float v186;
  unsigned __int8 *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  int8x16_t *v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  char v195;
  unsigned __int8 *v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  float v203;
  float v204;
  uint64_t v205;
  uint64_t v206;
  float *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  float v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int8 *v221;
  uint64_t v222;
  int v223;
  unsigned int v224;
  char v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  float v233;
  float v234;
  uint64_t v235;
  int v236;
  float *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint8x8_t v241;
  uint64_t v242;
  float v243;
  unsigned __int8 *v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  int8x16_t *v248;
  uint64_t v249;
  int v250;
  unsigned int v251;
  char v252;
  unsigned __int8 *v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float v260;
  float v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  int8x16_t *v265;
  float *v266;
  uint64_t v267;
  int8x16_t v268;
  int8x16_t v269;
  unint64_t v270;
  float v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  int8x16_t *v275;
  uint64_t v276;
  int v277;
  unsigned int v278;
  char v279;
  unsigned __int8 *v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  float v285;
  float v286;
  uint64_t v287;
  void *exception;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  faiss::IndexIVFPQStats *v304;
  uint64_t v306;
  int v307;
  int v308;

  v10 = (int8x16_t *)a3;
  v11 = a2;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v303 = a4;
  v15 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          v102 = *(_QWORD **)(a1 + 32);
          v103 = v102[2];
          if ((int)v103 > 64)
          v304 = 0;
          v104 = 0;
          v105 = 0;
          v106 = a5 - 1;
          v107 = a6 - 8;
          v108 = a7 + 1;
          v109 = v102[4];
          v110 = *(_QWORD *)(a1 + 64);
          v111 = v102[1];
          v297 = v13 << 32;
LABEL_122:
          v112 = *(float *)(v12 + 216);
          if (v111)
          {
            v113 = 0;
            LOBYTE(v114) = 0;
            LODWORD(v115) = 0;
            v116 = v110;
            v117 = v10;
            do
            {
              if (!(_BYTE)v114)
                LODWORD(v115) = v117->u8[0];
              v118 = v115 >> v114;
              v119 = v103 + v114;
              v120 = v119 - 8;
              if (v119 < 8)
              {
                LOBYTE(v114) = v103 + v114;
              }
              else
              {
                v121 = 8 - v114;
                v122 = &v117->u8[1];
                if (v120 < 8)
                {
                  v117 = (int8x16_t *)((char *)v117 + 1);
                }
                else
                {
                  v123 = v120 >> 3;
                  v124 = v123 - 1;
                  do
                  {
                    v125 = *v122++;
                    v118 |= (unint64_t)v125 << v121;
                    v121 += 8;
                    --v123;
                  }
                  while (v123);
                  v117 = (int8x16_t *)((char *)v117 + v124 + 2);
                }
                v114 = ((_BYTE)v114 + (_BYTE)v103) & 7;
                if (v114)
                {
                  v115 = v117->u8[0];
                  v118 |= v115 << v121;
                }
              }
              v112 = v112
                   + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * v113)
                                      + 4 * (int)(v118 & ~(-1 << v103)))
                           + (float)(*(float *)(v116 + 4 * (int)(v118 & ~(-1 << v103))) * -2.0));
              v116 += 4 * v102[5];
              ++v113;
            }
            while (v113 != v111);
          }
          if (*a5 <= v112)
            goto LABEL_152;
          if (v303)
            v126 = *(_QWORD *)(v303 + 8 * v105);
          else
            v126 = v105 | v297;
          if (a7 < 2)
          {
            v127 = 1;
            goto LABEL_151;
          }
          v128 = 3;
          v129 = 2;
          v130 = 1;
          while (1)
          {
            v131 = v106[v129];
            if (v128 == v108 || (v132 = v106[v128], v131 > v132))
            {
              if (v131 < v112)
                goto LABEL_150;
            }
            else
            {
              v131 = v106[v128];
              v129 = v128;
              if (v132 < v112)
              {
LABEL_150:
                v127 = v130;
LABEL_151:
                v106[v127] = v112;
                *(_QWORD *)(v107 + 8 * v127) = v126;
                v304 = (faiss::IndexIVFPQStats *)++v104;
LABEL_152:
                v10 = (int8x16_t *)((char *)v10 + v109);
                if (++v105 == a2)
                  return v304;
                goto LABEL_122;
              }
            }
            v127 = v129;
            v106[v130] = v131;
            *(_QWORD *)(v107 + 8 * v130) = *(_QWORD *)(v107 + 8 * v129);
            v129 *= 2;
            v128 = (2 * v127) | 1;
            v130 = v127;
            if (v129 > a7)
              goto LABEL_151;
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v306, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v306, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoderGeneric>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          v43 = *(_QWORD **)(a1 + 32);
          v44 = v43[2];
          if ((int)v44 > 64)
          v304 = 0;
          v45 = 0;
          v46 = 0;
          v47 = a5 - 1;
          v48 = a6 - 8;
          v49 = a7 + 1;
          v50 = v43[4];
          v51 = *(_QWORD *)(a1 + 56);
          v52 = v43[1];
          v53 = v13 << 32;
LABEL_50:
          v54 = *(float *)(v12 + 216);
          if (v52)
          {
            v55 = 0;
            LOBYTE(v56) = 0;
            LODWORD(v57) = 0;
            v58 = v51;
            v59 = v10;
            do
            {
              if (!(_BYTE)v56)
                LODWORD(v57) = v59->u8[0];
              v60 = v57 >> v56;
              v61 = v44 + v56;
              v62 = v61 - 8;
              if (v61 < 8)
              {
                LOBYTE(v56) = v44 + v56;
              }
              else
              {
                v63 = 8 - v56;
                v64 = &v59->u8[1];
                if (v62 < 8)
                {
                  v59 = (int8x16_t *)((char *)v59 + 1);
                }
                else
                {
                  v65 = v62 >> 3;
                  v66 = v65 - 1;
                  do
                  {
                    v67 = *v64++;
                    v60 |= (unint64_t)v67 << v63;
                    v63 += 8;
                    --v65;
                  }
                  while (v65);
                  v59 = (int8x16_t *)((char *)v59 + v66 + 2);
                }
                v56 = ((_BYTE)v56 + (_BYTE)v44) & 7;
                if (v56)
                {
                  v57 = v59->u8[0];
                  v60 |= v57 << v63;
                }
              }
              v54 = v54 + *(float *)(v58 + 4 * (v60 & ~(-1 << v44)));
              v58 += 4 * v43[5];
              ++v55;
            }
            while (v55 != v52);
          }
          if (*a5 <= v54)
            goto LABEL_80;
          if (v303)
            v68 = *(_QWORD *)(v303 + 8 * v46);
          else
            v68 = v46 | v53;
          if (a7 < 2)
          {
            v69 = 1;
            goto LABEL_79;
          }
          v70 = 3;
          v71 = 2;
          v72 = 1;
          while (1)
          {
            v73 = v47[v71];
            if (v70 == v49 || (v74 = v47[v70], v73 > v74))
            {
              if (v73 < v54)
                goto LABEL_78;
            }
            else
            {
              v73 = v47[v70];
              v71 = v70;
              if (v74 < v54)
              {
LABEL_78:
                v69 = v72;
LABEL_79:
                v47[v69] = v54;
                *(_QWORD *)(v48 + 8 * v69) = v68;
                v304 = (faiss::IndexIVFPQStats *)++v45;
LABEL_80:
                v10 = (int8x16_t *)((char *)v10 + v50);
                if (++v46 == v11)
                  return v304;
                goto LABEL_50;
              }
            }
            v69 = v71;
            v47[v72] = v73;
            *(_QWORD *)(v48 + 8 * v72) = *(_QWORD *)(v48 + 8 * v71);
            v71 *= 2;
            v70 = (2 * v69) | 1;
            v72 = v69;
            if (v71 > a7)
              goto LABEL_79;
          }
        }
      }
      return 0;
    }
    if (*(_BYTE *)(a1 + 44))
    {
      v133 = (const float **)(a1 + 72);
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 72), v13);
      if (!v11)
        return 0;
    }
    else
    {
      v133 = (const float **)(a1 + 136);
      if (!a2)
        return 0;
    }
    v304 = 0;
    v134 = 0;
    v135 = *v133;
    v136 = a5 - 1;
    v137 = a6 - 8;
LABEL_157:
    faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)v10, *(_QWORD *)(v12 + 80));
    v138 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32);
    v139 = faiss::fvec_L2sqr(*(faiss **)(v12 + 80), v135, *(int *)(v12 + 24));
    if (*a5 <= v139)
      goto LABEL_173;
    if (v303)
      v140 = *(_QWORD *)(v303 + 8 * v134);
    else
      v140 = v134 | (v13 << 32);
    if (a7 < 2)
    {
      v141 = 1;
      goto LABEL_172;
    }
    v142 = 3;
    v143 = 2;
    v144 = 1;
    while (1)
    {
      v145 = v136[v143];
      if (v142 == a7 + 1 || (v146 = v136[v142], v145 > v146))
      {
        if (v145 < v139)
          goto LABEL_171;
      }
      else
      {
        v145 = v136[v142];
        v143 = v142;
        if (v146 < v139)
        {
LABEL_171:
          v141 = v144;
LABEL_172:
          v136[v141] = v139;
          *(_QWORD *)(v137 + 8 * v141) = v140;
          v304 = (faiss::IndexIVFPQStats *)((char *)v304 + 1);
LABEL_173:
          v10 = (int8x16_t *)((char *)v10 + v138);
          if (++v134 == v11)
            return v304;
          goto LABEL_157;
        }
      }
      v141 = v143;
      v136[v144] = v145;
      *(_QWORD *)(v137 + 8 * v144) = *(_QWORD *)(v137 + 8 * v143);
      v143 *= 2;
      v142 = (2 * v141) | 1;
      v144 = v141;
      if (v143 > a7)
        goto LABEL_172;
    }
  }
  if (v15 != 2)
  v16 = *(_QWORD **)(a1 + 32);
  v17 = v16[4];
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        if (a2)
        {
          v304 = 0;
          v173 = 0;
          v20 = 0;
          v174 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v175 = *(int8x16_t **)(a1 + 160);
          v176 = *v175;
          v177 = a5 - 1;
          v178 = a6 - 8;
          v179 = v175[1].i32[0];
          v180 = a7 + 1;
          v292 = v13 << 32;
          v299 = 0;
          a1 = 8;
LABEL_211:
          v181 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v176))))));
          v182 = (int8x8_t)vadd_s32(vdup_lane_s32(v181, 1), v181);
          v183 = v182.i32[0];
          v182.i32[0] = v10[1].i32[0] ^ v179;
          v184 = (uint8x8_t)vcnt_s8(v182);
          v184.i16[0] = vaddlv_u8(v184);
          if (v183 + v184.i32[0] >= v174)
            goto LABEL_241;
          v185 = v16[2];
          if ((int)v185 >= 65)
          v186 = *(float *)(v12 + 216);
          a3 = v16[1];
          if (a3)
          {
            v187 = 0;
            LOBYTE(v188) = 0;
            LODWORD(v189) = 0;
            v190 = *(_QWORD *)(v12 + 56);
            v191 = v10;
            do
            {
              if (!(_BYTE)v188)
                LODWORD(v189) = v191->u8[0];
              v192 = v189 >> v188;
              v193 = v185 + v188;
              v194 = v193 - 8;
              if (v193 < 8)
              {
                LOBYTE(v188) = v185 + v188;
                v196 = (unsigned __int8 *)v191;
              }
              else
              {
                v195 = 8 - v188;
                v196 = &v191->u8[1];
                v197 = v194 >> 3;
                if (v194 >= 8)
                {
                  do
                  {
                    v198 = *v196++;
                    v192 |= (unint64_t)v198 << v195;
                    v195 += 8;
                    --v197;
                  }
                  while (v197);
                  v196 = &v191->u8[(v194 >> 3) + 1];
                }
                v188 = ((_BYTE)v188 + (_BYTE)v185) & 7;
                if (v188)
                {
                  v189 = *v196;
                  v192 |= v189 << v195;
                }
              }
              v186 = v186 + *(float *)(v190 + 4 * (v192 & ~(-1 << v185)));
              v190 += 4 * v16[5];
              ++v187;
              v191 = (int8x16_t *)v196;
            }
            while (v187 != (unsigned __int8 *)a3);
          }
          ++v20;
          if (*a5 <= v186)
            goto LABEL_241;
          if (v303)
            v199 = *(_QWORD *)(v303 + 8 * v173);
          else
            v199 = v173 | v292;
          if (a7 < 2)
          {
            v200 = 1;
            goto LABEL_240;
          }
          v201 = 3;
          a3 = 2;
          v202 = 1;
          while (1)
          {
            v203 = v177[a3];
            if (v201 == v180 || (v204 = v177[v201], v203 > v204))
            {
              if (v203 < v186)
                goto LABEL_239;
            }
            else
            {
              v203 = v177[v201];
              a3 = v201;
              if (v204 < v186)
              {
LABEL_239:
                v200 = v202;
LABEL_240:
                v177[v200] = v186;
                *(_QWORD *)(v178 + 8 * v200) = v199;
                v304 = (faiss::IndexIVFPQStats *)++v299;
LABEL_241:
                v10 = (int8x16_t *)((char *)v10 + 20);
                if (++v173 == v11)
                  goto LABEL_346;
                goto LABEL_211;
              }
            }
            v200 = a3;
            v177[v202] = v203;
            *(_QWORD *)(v178 + 8 * v202) = *(_QWORD *)(v178 + 8 * a3);
            a3 *= 2;
            v201 = (2 * v200) | 1;
            v202 = v200;
            if (a3 > a7)
              goto LABEL_240;
          }
        }
        goto LABEL_345;
      case 32:
        if (a2)
        {
          v304 = 0;
          v262 = 0;
          v263 = 0;
          v20 = 0;
          v264 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v265 = *(int8x16_t **)(a1 + 160);
          v266 = a5 - 1;
          v267 = a6 - 8;
          v269 = *v265;
          v268 = v265[1];
          v270 = a7 + 1;
          v302 = v13 << 32;
LABEL_313:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v269))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v268))))))) >= v264)goto LABEL_343;
          a1 = v16[2];
          if ((int)a1 >= 65)
          v271 = *(float *)(v12 + 216);
          a2 = v16[1];
          if (a2)
          {
            a3 = 0;
            LOBYTE(v272) = 0;
            LODWORD(v273) = 0;
            v274 = *(_QWORD *)(v12 + 56);
            v275 = v10;
            do
            {
              if (!(_BYTE)v272)
                LODWORD(v273) = v275->u8[0];
              v276 = v273 >> v272;
              v277 = a1 + v272;
              v278 = v277 - 8;
              if (v277 < 8)
              {
                LOBYTE(v272) = a1 + v272;
                v280 = (unsigned __int8 *)v275;
              }
              else
              {
                v279 = 8 - v272;
                v280 = &v275->u8[1];
                v281 = v278 >> 3;
                if (v278 >= 8)
                {
                  do
                  {
                    v282 = *v280++;
                    v276 |= (unint64_t)v282 << v279;
                    v279 += 8;
                    --v281;
                  }
                  while (v281);
                  v280 = &v275->u8[(v278 >> 3) + 1];
                }
                v272 = ((_BYTE)v272 + (_BYTE)a1) & 7;
                if (v272)
                {
                  v273 = *v280;
                  v276 |= v273 << v279;
                }
              }
              v271 = v271 + *(float *)(v274 + 4 * (v276 & ~(-1 << a1)));
              v274 += 4 * v16[5];
              ++a3;
              v275 = (int8x16_t *)v280;
            }
            while (a3 != a2);
          }
          ++v20;
          if (*a5 <= v271)
            goto LABEL_343;
          if (v303)
            a1 = *(_QWORD *)(v303 + 8 * v263);
          else
            a1 = v263 | v302;
          if (a7 < 2)
          {
            v283 = 1;
            goto LABEL_342;
          }
          v284 = 3;
          a2 = 2;
          a3 = 1;
          while (1)
          {
            v285 = v266[a2];
            if (v284 == v270 || (v286 = v266[v284], v285 > v286))
            {
              if (v285 < v271)
                goto LABEL_341;
            }
            else
            {
              v285 = v266[v284];
              a2 = v284;
              if (v286 < v271)
              {
LABEL_341:
                v283 = a3;
LABEL_342:
                v266[v283] = v271;
                *(_QWORD *)(v267 + 8 * v283) = a1;
                v304 = (faiss::IndexIVFPQStats *)++v262;
LABEL_343:
                v10 += 2;
                if (++v263 == v11)
                  goto LABEL_346;
                goto LABEL_313;
              }
            }
            v283 = a2;
            v266[a3] = v285;
            *(_QWORD *)(v267 + 8 * a3) = *(_QWORD *)(v267 + 8 * a2);
            a2 *= 2;
            v284 = (2 * v283) | 1;
            a3 = v283;
            if (a2 > a7)
              goto LABEL_342;
          }
        }
        goto LABEL_345;
      case 64:
        if (a2)
        {
          v304 = 0;
          v75 = 0;
          v76 = 0;
          v20 = 0;
          v77 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v78 = *(int8x16_t **)(a1 + 160);
          v80 = v78[2];
          v79 = v78[3];
          v81 = a5 - 1;
          v82 = a6 - 8;
          v84 = *v78;
          v83 = v78[1];
          v85 = a7 + 1;
          v296 = v13 << 32;
LABEL_87:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v84))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[1], v83)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[2], v80))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10[3], v79)))))))) >= v77)goto LABEL_117;
          a1 = v16[2];
          if ((int)a1 >= 65)
          v86 = *(float *)(v12 + 216);
          a2 = v16[1];
          if (a2)
          {
            a3 = 0;
            LOBYTE(v87) = 0;
            LODWORD(v88) = 0;
            v89 = *(_QWORD *)(v12 + 56);
            v90 = v10;
            do
            {
              if (!(_BYTE)v87)
                LODWORD(v88) = v90->u8[0];
              v91 = v88 >> v87;
              v92 = a1 + v87;
              v93 = v92 - 8;
              if (v92 < 8)
              {
                LOBYTE(v87) = a1 + v87;
                v95 = (unsigned __int8 *)v90;
              }
              else
              {
                v94 = 8 - v87;
                v95 = &v90->u8[1];
                v96 = v93 >> 3;
                if (v93 >= 8)
                {
                  do
                  {
                    v97 = *v95++;
                    v91 |= (unint64_t)v97 << v94;
                    v94 += 8;
                    --v96;
                  }
                  while (v96);
                  v95 = &v90->u8[(v93 >> 3) + 1];
                }
                v87 = ((_BYTE)v87 + (_BYTE)a1) & 7;
                if (v87)
                {
                  v88 = *v95;
                  v91 |= v88 << v94;
                }
              }
              v86 = v86 + *(float *)(v89 + 4 * (v91 & ~(-1 << a1)));
              v89 += 4 * v16[5];
              ++a3;
              v90 = (int8x16_t *)v95;
            }
            while (a3 != a2);
          }
          ++v20;
          if (*a5 <= v86)
            goto LABEL_117;
          if (v303)
            a1 = *(_QWORD *)(v303 + 8 * v76);
          else
            a1 = v76 | v296;
          if (a7 < 2)
          {
            v98 = 1;
            goto LABEL_116;
          }
          v99 = 3;
          a2 = 2;
          a3 = 1;
          while (1)
          {
            v100 = v81[a2];
            if (v99 == v85 || (v101 = v81[v99], v100 > v101))
            {
              if (v100 < v86)
                goto LABEL_115;
            }
            else
            {
              v100 = v81[v99];
              a2 = v99;
              if (v101 < v86)
              {
LABEL_115:
                v98 = a3;
LABEL_116:
                v81[v98] = v86;
                *(_QWORD *)(v82 + 8 * v98) = a1;
                v304 = (faiss::IndexIVFPQStats *)++v75;
LABEL_117:
                v10 += 4;
                if (++v76 == v11)
                  goto LABEL_346;
                goto LABEL_87;
              }
            }
            v98 = a2;
            v81[a3] = v100;
            *(_QWORD *)(v82 + 8 * a3) = *(_QWORD *)(v82 + 8 * a2);
            a2 *= 2;
            v99 = (2 * v98) | 1;
            a3 = v98;
            if (a2 > a7)
              goto LABEL_116;
          }
        }
        goto LABEL_345;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        if (a2)
        {
          v304 = 0;
          v147 = 0;
          v20 = 0;
          v148 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v149 = a5 - 1;
          v150 = a6 - 8;
          v151 = **(_DWORD **)(a1 + 160);
          v152 = a7 + 1;
          v291 = v13 << 32;
          v298 = 0;
          a1 = 8;
LABEL_177:
          a8.i32[0] = v10->i32[0] ^ v151;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v148)
            goto LABEL_207;
          v153 = v16[2];
          if ((int)v153 >= 65)
          v154 = *(float *)(v12 + 216);
          a3 = v16[1];
          if (a3)
          {
            v155 = 0;
            LOBYTE(v156) = 0;
            LODWORD(v157) = 0;
            v158 = *(_QWORD *)(v12 + 56);
            v159 = v10;
            do
            {
              if (!(_BYTE)v156)
                LODWORD(v157) = v159->u8[0];
              v160 = v157 >> v156;
              v161 = v153 + v156;
              v162 = v161 - 8;
              if (v161 < 8)
              {
                LOBYTE(v156) = v153 + v156;
                v164 = (unsigned __int8 *)v159;
              }
              else
              {
                v163 = 8 - v156;
                v164 = &v159->u8[1];
                v165 = v162 >> 3;
                if (v162 >= 8)
                {
                  do
                  {
                    v166 = *v164++;
                    v160 |= (unint64_t)v166 << v163;
                    v163 += 8;
                    --v165;
                  }
                  while (v165);
                  v164 = &v159->u8[(v162 >> 3) + 1];
                }
                v156 = ((_BYTE)v156 + (_BYTE)v153) & 7;
                if (v156)
                {
                  v157 = *v164;
                  v160 |= v157 << v163;
                }
              }
              v154 = v154 + *(float *)(v158 + 4 * (v160 & ~(-1 << v153)));
              v158 += 4 * v16[5];
              ++v155;
              v159 = (int8x16_t *)v164;
            }
            while (v155 != (unsigned __int8 *)a3);
          }
          ++v20;
          if (*a5 <= v154)
            goto LABEL_207;
          if (v303)
            v167 = *(_QWORD *)(v303 + 8 * v147);
          else
            v167 = v147 | v291;
          if (a7 < 2)
          {
            v168 = 1;
            goto LABEL_206;
          }
          v169 = 3;
          a3 = 2;
          v170 = 1;
          while (1)
          {
            v171 = v149[a3];
            if (v169 == v152 || (v172 = v149[v169], v171 > v172))
            {
              if (v171 < v154)
                goto LABEL_205;
            }
            else
            {
              v171 = v149[v169];
              a3 = v169;
              if (v172 < v154)
              {
LABEL_205:
                v168 = v170;
LABEL_206:
                v149[v168] = v154;
                *(_QWORD *)(v150 + 8 * v168) = v167;
                v304 = (faiss::IndexIVFPQStats *)++v298;
LABEL_207:
                v10 = (int8x16_t *)((char *)v10 + 4);
                if (++v147 == v11)
                  goto LABEL_346;
                goto LABEL_177;
              }
            }
            v168 = a3;
            v149[v170] = v171;
            *(_QWORD *)(v150 + 8 * v170) = *(_QWORD *)(v150 + 8 * a3);
            a3 *= 2;
            v169 = (2 * v168) | 1;
            v170 = v168;
            if (a3 > a7)
              goto LABEL_206;
          }
        }
        goto LABEL_345;
      case 8:
        if (a2)
        {
          v304 = 0;
          v235 = 0;
          v20 = 0;
          v236 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v237 = a5 - 1;
          v238 = a6 - 8;
          v239 = **(_QWORD **)(a1 + 160);
          v240 = a7 + 1;
          v294 = v13 << 32;
          v301 = 0;
          a1 = 8;
LABEL_279:
          v241 = (uint8x8_t)vcnt_s8((int8x8_t)(v10->i64[0] ^ v239));
          v241.i16[0] = vaddlv_u8(v241);
          if (v236 <= v241.i32[0])
            goto LABEL_309;
          v242 = v16[2];
          if ((int)v242 >= 65)
          v243 = *(float *)(v12 + 216);
          a3 = v16[1];
          if (a3)
          {
            v244 = 0;
            LOBYTE(v245) = 0;
            LODWORD(v246) = 0;
            v247 = *(_QWORD *)(v12 + 56);
            v248 = v10;
            do
            {
              if (!(_BYTE)v245)
                LODWORD(v246) = v248->u8[0];
              v249 = v246 >> v245;
              v250 = v242 + v245;
              v251 = v250 - 8;
              if (v250 < 8)
              {
                LOBYTE(v245) = v242 + v245;
                v253 = (unsigned __int8 *)v248;
              }
              else
              {
                v252 = 8 - v245;
                v253 = &v248->u8[1];
                v254 = v251 >> 3;
                if (v251 >= 8)
                {
                  do
                  {
                    v255 = *v253++;
                    v249 |= (unint64_t)v255 << v252;
                    v252 += 8;
                    --v254;
                  }
                  while (v254);
                  v253 = &v248->u8[(v251 >> 3) + 1];
                }
                v245 = ((_BYTE)v245 + (_BYTE)v242) & 7;
                if (v245)
                {
                  v246 = *v253;
                  v249 |= v246 << v252;
                }
              }
              v243 = v243 + *(float *)(v247 + 4 * (v249 & ~(-1 << v242)));
              v247 += 4 * v16[5];
              ++v244;
              v248 = (int8x16_t *)v253;
            }
            while (v244 != (unsigned __int8 *)a3);
          }
          ++v20;
          if (*a5 <= v243)
            goto LABEL_309;
          if (v303)
            v256 = *(_QWORD *)(v303 + 8 * v235);
          else
            v256 = v235 | v294;
          if (a7 < 2)
          {
            v257 = 1;
            goto LABEL_308;
          }
          v258 = 3;
          a3 = 2;
          v259 = 1;
          while (1)
          {
            v260 = v237[a3];
            if (v258 == v240 || (v261 = v237[v258], v260 > v261))
            {
              if (v260 < v243)
                goto LABEL_307;
            }
            else
            {
              v260 = v237[v258];
              a3 = v258;
              if (v261 < v243)
              {
LABEL_307:
                v257 = v259;
LABEL_308:
                v237[v257] = v243;
                *(_QWORD *)(v238 + 8 * v257) = v256;
                v304 = (faiss::IndexIVFPQStats *)++v301;
LABEL_309:
                v10 = (int8x16_t *)((char *)v10 + 8);
                if (++v235 == v11)
                  goto LABEL_346;
                goto LABEL_279;
              }
            }
            v257 = a3;
            v237[v259] = v260;
            *(_QWORD *)(v238 + 8 * v259) = *(_QWORD *)(v238 + 8 * a3);
            a3 *= 2;
            v258 = (2 * v257) | 1;
            v259 = v257;
            if (a3 > a7)
              goto LABEL_308;
          }
        }
        goto LABEL_345;
      case 16:
        if (a2)
        {
          v304 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
          v22 = a5 - 1;
          v23 = a6 - 8;
          v24 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
          v25 = a7 + 1;
          v295 = v13 << 32;
          while (1)
          {
            v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v10, v24))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v21)
              goto LABEL_42;
            a1 = v16[2];
            if ((int)a1 >= 65)
            v27 = *(float *)(v12 + 216);
            a2 = v16[1];
            if (a2)
            {
              a3 = 0;
              LOBYTE(v28) = 0;
              LODWORD(v29) = 0;
              v30 = *(_QWORD *)(v12 + 56);
              v31 = v10;
              do
              {
                if (!(_BYTE)v28)
                  LODWORD(v29) = v31->u8[0];
                v32 = v29 >> v28;
                v33 = a1 + v28;
                v34 = v33 - 8;
                if (v33 < 8)
                {
                  LOBYTE(v28) = a1 + v28;
                  v36 = (unsigned __int8 *)v31;
                }
                else
                {
                  v35 = 8 - v28;
                  v36 = &v31->u8[1];
                  v37 = v34 >> 3;
                  if (v34 >= 8)
                  {
                    do
                    {
                      v38 = *v36++;
                      v32 |= (unint64_t)v38 << v35;
                      v35 += 8;
                      --v37;
                    }
                    while (v37);
                    v36 = &v31->u8[(v34 >> 3) + 1];
                  }
                  v28 = ((_BYTE)v28 + (_BYTE)a1) & 7;
                  if (v28)
                  {
                    v29 = *v36;
                    v32 |= v29 << v35;
                  }
                }
                v27 = v27 + *(float *)(v30 + 4 * (v32 & ~(-1 << a1)));
                v30 += 4 * v16[5];
                ++a3;
                v31 = (int8x16_t *)v36;
              }
              while (a3 != a2);
            }
            ++v20;
            if (*a5 <= v27)
              goto LABEL_42;
            if (v303)
              a1 = *(_QWORD *)(v303 + 8 * v19);
            else
              a1 = v19 | v295;
            if (a7 < 2)
            {
              v39 = 1;
              goto LABEL_41;
            }
            v40 = 3;
            a2 = 2;
            a3 = 1;
            while (1)
            {
              v41 = v22[a2];
              if (v40 != v25)
              {
                v42 = v22[v40];
                if (v41 <= v42)
                  break;
              }
              if (v41 < v27)
                goto LABEL_40;
LABEL_38:
              v39 = a2;
              v22[a3] = v41;
              *(_QWORD *)(v23 + 8 * a3) = *(_QWORD *)(v23 + 8 * a2);
              a2 *= 2;
              v40 = (2 * v39) | 1;
              a3 = v39;
              if (a2 > a7)
                goto LABEL_41;
            }
            v41 = v22[v40];
            a2 = v40;
            if (v42 >= v27)
              goto LABEL_38;
LABEL_40:
            v39 = a3;
LABEL_41:
            v22[v39] = v27;
            *(_QWORD *)(v23 + 8 * v39) = a1;
            v304 = (faiss::IndexIVFPQStats *)++v18;
LABEL_42:
            ++v10;
            if (++v19 == v11)
            {
LABEL_346:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              v287 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v20;
              goto LABEL_347;
            }
          }
        }
LABEL_345:
        v304 = 0;
        v20 = 0;
        goto LABEL_346;
    }
  }
  v300 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
  v306 = *(_QWORD *)(a1 + 160);
  v307 = (int)v17 / 8;
  v308 = v17 - (v16 & 0xFFFFFFF8);
  if (!a2)
  {
    v304 = 0;
    v206 = 0;
    goto LABEL_352;
  }
  v304 = 0;
  v205 = 0;
  v206 = 0;
  v290 = v13 << 32;
  v293 = (int)v17;
  v207 = a5 - 1;
  v208 = a6 - 8;
  v209 = a7 + 1;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v306, (const unsigned __int8 *)v10);
    if ((int)a1 >= v300)
      goto LABEL_275;
    v212 = *(_QWORD **)(v12 + 32);
    v213 = v212[2];
    if ((int)v213 >= 65)
    v214 = *(float *)(v12 + 216);
    v215 = v212[1];
    if (v215)
    {
      v216 = 0;
      LOBYTE(v217) = 0;
      LODWORD(v218) = 0;
      v219 = *(_QWORD *)(v12 + 56);
      v220 = v212[5];
      v221 = (unsigned __int8 *)v10;
      do
      {
        if (!(_BYTE)v217)
          LODWORD(v218) = *v221;
        v222 = v218 >> v217;
        v223 = v213 + v217;
        v224 = v223 - 8;
        if (v223 < 8)
        {
          LOBYTE(v217) = v213 + v217;
          a1 = (uint64_t)v221;
        }
        else
        {
          v225 = 8 - v217;
          a1 = (uint64_t)(v221 + 1);
          v226 = v224 >> 3;
          if (v224 >= 8)
          {
            do
            {
              v227 = *(unsigned __int8 *)a1++;
              v222 |= (unint64_t)v227 << v225;
              v225 += 8;
              --v226;
            }
            while (v226);
            a1 = (uint64_t)&v221[(v224 >> 3) + 1];
          }
          v217 = ((_BYTE)v217 + (_BYTE)v213) & 7;
          if (v217)
          {
            v218 = *(unsigned __int8 *)a1;
            v222 |= v218 << v225;
          }
        }
        v214 = v214 + *(float *)(v219 + 4 * (v222 & ~(-1 << v213)));
        v219 += 4 * v220;
        ++v216;
        v221 = (unsigned __int8 *)a1;
      }
      while (v216 != v215);
    }
    ++v206;
    if (*a5 <= v214)
      goto LABEL_275;
    if (v303)
      v228 = *(_QWORD *)(v303 + 8 * v205);
    else
      v228 = v205 | v290;
    if (a7 < 2)
    {
      v229 = 1;
      goto LABEL_274;
    }
    v230 = 3;
    v231 = 2;
    v232 = 1;
    while (1)
    {
      v233 = v207[v231];
      if (v230 != v209)
      {
        v234 = v207[v230];
        if (v233 <= v234)
          break;
      }
      if (v233 < v214)
        goto LABEL_273;
LABEL_271:
      v229 = v231;
      v207[v232] = v233;
      *(_QWORD *)(v208 + 8 * v232) = *(_QWORD *)(v208 + 8 * v231);
      v231 *= 2;
      v230 = (2 * v229) | 1;
      v232 = v229;
      if (v231 > a7)
        goto LABEL_274;
    }
    v233 = v207[v230];
    v231 = v230;
    if (v234 >= v214)
      goto LABEL_271;
LABEL_273:
    v229 = v232;
LABEL_274:
    v207[v229] = v214;
    *(_QWORD *)(v208 + 8 * v229) = v228;
    v304 = (faiss::IndexIVFPQStats *)((char *)v304 + 1);
LABEL_275:
    v10 = (int8x16_t *)((char *)v10 + v293);
    ++v205;
  }
  while (v205 != v11);
LABEL_352:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  v287 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v206;
LABEL_347:
  *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v287;
  return v304;
}

void sub_1D490172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::scan_codes_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  int v6;
  float v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  int8x16_t v19;
  int32x2_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  _QWORD *v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  char v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  const float **v96;
  uint64_t v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  __int32 v116;
  int8x16_t *v117;
  int8x16_t v118;
  __int32 v119;
  int32x2_t v120;
  int8x8_t v121;
  __int32 v122;
  uint8x8_t v123;
  _QWORD *v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  char v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint8x8_t v165;
  _QWORD *v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int8x16_t *v183;
  int8x16_t v184;
  int8x16_t v185;
  _QWORD *v186;
  uint64_t v187;
  float v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const float *v203;
  uint64_t v204;
  uint64_t v205;
  float v206;
  uint64_t v207;
  void *exception;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  uint64_t v217;
  int v218;
  int v219;

  v8 = *(float *)&a6;
  v9 = (int8x16_t *)a3;
  v10 = a2;
  v11 = a1;
  v12 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 220))
    a4 = 0;
  v14 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) >= 1)
  {
    if (v14 != 2)
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            v115 = 0;
            v17 = 0;
            v116 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v117 = *(int8x16_t **)(a1 + 160);
            v118 = *v117;
            v119 = v117[1].i32[0];
            v215 = *v117;
            do
            {
              v120 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v118))))));
              v121 = (int8x8_t)vadd_s32(vdup_lane_s32(v120, 1), v120);
              v122 = v121.i32[0];
              v121.i32[0] = v9[1].i32[0] ^ v119;
              v123 = (uint8x8_t)vcnt_s8(v121);
              v123.i16[0] = vaddlv_u8(v123);
              if (v122 + v123.i32[0] < v116)
              {
                v124 = *(_QWORD **)(v11 + 32);
                v125 = v124[2];
                if ((int)v125 >= 65)
                v126 = *(float *)(v11 + 216);
                v127 = v124[1];
                if (v127)
                {
                  v128 = 0;
                  LOBYTE(v129) = 0;
                  LODWORD(v130) = 0;
                  v131 = *(_QWORD *)(v11 + 56);
                  v132 = v124[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v129)
                      LODWORD(v130) = *(unsigned __int8 *)a2;
                    v133 = v130 >> v129;
                    v134 = v125 + v129;
                    v135 = v134 - 8;
                    if (v134 < 8)
                    {
                      LOBYTE(v129) = v125 + v129;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v129;
                      a1 = a2 + 1;
                      v136 = v135 >> 3;
                      if (v135 >= 8)
                      {
                        do
                        {
                          v137 = *(unsigned __int8 *)a1++;
                          v133 |= (unint64_t)v137 << a3;
                          a3 += 8;
                          --v136;
                        }
                        while (v136);
                        a1 = a2 + (v135 >> 3) - 1 + 2;
                      }
                      v129 = ((_BYTE)v129 + (_BYTE)v125) & 7;
                      if (v129)
                      {
                        v130 = *(unsigned __int8 *)a1;
                        v133 |= v130 << a3;
                      }
                    }
                    v126 = v126 + *(float *)(v131 + 4 * (v133 & ~(-1 << v125)));
                    v131 += 4 * v132;
                    ++v128;
                    a2 = a1;
                  }
                  while (v128 != v127);
                }
                ++v17;
                if (v126 < v8)
                {
                  if (a4)
                    v138 = *(_QWORD *)(a4 + 8 * v115);
                  else
                    v138 = v115 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v126, v138);
                  v118 = v215;
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 20);
              ++v115;
            }
            while (v115 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 32:
          if (a2)
          {
            v181 = 0;
            v17 = 0;
            v182 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v183 = *(int8x16_t **)(a1 + 160);
            v185 = *v183;
            v184 = v183[1];
            v212 = *v183;
            v216 = v184;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v185))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v184))))))) < v182)
              {
                v186 = *(_QWORD **)(v11 + 32);
                v187 = v186[2];
                if ((int)v187 >= 65)
                v188 = *(float *)(v11 + 216);
                v189 = v186[1];
                if (v189)
                {
                  v190 = 0;
                  LOBYTE(v191) = 0;
                  LODWORD(v192) = 0;
                  v193 = *(_QWORD *)(v11 + 56);
                  v194 = v186[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v191)
                      LODWORD(v192) = *(unsigned __int8 *)a2;
                    v195 = v192 >> v191;
                    v196 = v187 + v191;
                    v197 = v196 - 8;
                    if (v196 < 8)
                    {
                      LOBYTE(v191) = v187 + v191;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v191;
                      a1 = a2 + 1;
                      v198 = v197 >> 3;
                      if (v197 >= 8)
                      {
                        do
                        {
                          v199 = *(unsigned __int8 *)a1++;
                          v195 |= (unint64_t)v199 << a3;
                          a3 += 8;
                          --v198;
                        }
                        while (v198);
                        a1 = a2 + (v197 >> 3) - 1 + 2;
                      }
                      v191 = ((_BYTE)v191 + (_BYTE)v187) & 7;
                      if (v191)
                      {
                        v192 = *(unsigned __int8 *)a1;
                        v195 |= v192 << a3;
                      }
                    }
                    v188 = v188 + *(float *)(v193 + 4 * (v195 & ~(-1 << v187)));
                    v193 += 4 * v194;
                    ++v190;
                    a2 = a1;
                  }
                  while (v190 != v189);
                }
                ++v17;
                if (v188 < v8)
                {
                  if (a4)
                    v200 = *(_QWORD *)(a4 + 8 * v181);
                  else
                    v200 = v181 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v188, v200);
                  v185 = v212;
                  v184 = v216;
                }
              }
              v9 += 2;
              ++v181;
            }
            while (v181 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 64:
          if (a2)
          {
            v54 = 0;
            v17 = 0;
            v55 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v56 = *(int8x16_t **)(a1 + 160);
            v58 = v56[2];
            v57 = v56[3];
            v60 = *v56;
            v59 = v56[1];
            v211 = v58;
            v214 = v57;
            v209 = *v56;
            v210 = v59;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v60))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[1], v59)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[2], v58))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v9[3], v57)))))))) < v55)
              {
                v61 = *(_QWORD **)(v11 + 32);
                v62 = v61[2];
                if ((int)v62 >= 65)
                v63 = *(float *)(v11 + 216);
                v64 = v61[1];
                if (v64)
                {
                  v65 = 0;
                  LOBYTE(v66) = 0;
                  LODWORD(v67) = 0;
                  v68 = *(_QWORD *)(v11 + 56);
                  v69 = v61[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v66)
                      LODWORD(v67) = *(unsigned __int8 *)a2;
                    v70 = v67 >> v66;
                    v71 = v62 + v66;
                    v72 = v71 - 8;
                    if (v71 < 8)
                    {
                      LOBYTE(v66) = v62 + v66;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v66;
                      a1 = a2 + 1;
                      v73 = v72 >> 3;
                      if (v72 >= 8)
                      {
                        do
                        {
                          v74 = *(unsigned __int8 *)a1++;
                          v70 |= (unint64_t)v74 << a3;
                          a3 += 8;
                          --v73;
                        }
                        while (v73);
                        a1 = a2 + (v72 >> 3) - 1 + 2;
                      }
                      v66 = ((_BYTE)v66 + (_BYTE)v62) & 7;
                      if (v66)
                      {
                        v67 = *(unsigned __int8 *)a1;
                        v70 |= v67 << a3;
                      }
                    }
                    v63 = v63 + *(float *)(v68 + 4 * (v70 & ~(-1 << v62)));
                    v68 += 4 * v69;
                    ++v65;
                    a2 = a1;
                  }
                  while (v65 != v64);
                }
                ++v17;
                if (v63 < v8)
                {
                  if (a4)
                    v75 = *(_QWORD *)(a4 + 8 * v54);
                  else
                    v75 = v54 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v63, v75);
                  v58 = v211;
                  v57 = v214;
                  v60 = v209;
                  v59 = v210;
                }
              }
              v9 += 4;
              ++v54;
            }
            while (v54 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            v97 = 0;
            v17 = 0;
            v98 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v99 = **(_DWORD **)(a1 + 160);
            do
            {
              LODWORD(a6) = v9->i32[0] ^ v99;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v98)
              {
                v100 = *(_QWORD **)(v11 + 32);
                v101 = v100[2];
                if ((int)v101 >= 65)
                v102 = *(float *)(v11 + 216);
                v103 = v100[1];
                if (v103)
                {
                  v104 = 0;
                  LOBYTE(v105) = 0;
                  LODWORD(v106) = 0;
                  v107 = *(_QWORD *)(v11 + 56);
                  v108 = v100[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v105)
                      LODWORD(v106) = *(unsigned __int8 *)a2;
                    v109 = v106 >> v105;
                    v110 = v101 + v105;
                    v111 = v110 - 8;
                    if (v110 < 8)
                    {
                      LOBYTE(v105) = v101 + v105;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v105;
                      a1 = a2 + 1;
                      v112 = v111 >> 3;
                      if (v111 >= 8)
                      {
                        do
                        {
                          v113 = *(unsigned __int8 *)a1++;
                          v109 |= (unint64_t)v113 << a3;
                          a3 += 8;
                          --v112;
                        }
                        while (v112);
                        a1 = a2 + (v111 >> 3) - 1 + 2;
                      }
                      v105 = ((_BYTE)v105 + (_BYTE)v101) & 7;
                      if (v105)
                      {
                        v106 = *(unsigned __int8 *)a1;
                        v109 |= v106 << a3;
                      }
                    }
                    v102 = v102 + *(float *)(v107 + 4 * (v109 & ~(-1 << v101)));
                    v107 += 4 * v108;
                    ++v104;
                    a2 = a1;
                  }
                  while (v104 != v103);
                }
                ++v17;
                if (v102 < v8)
                {
                  if (a4)
                    v114 = *(_QWORD *)(a4 + 8 * v97);
                  else
                    v114 = v97 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v102, v114);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 4);
              ++v97;
            }
            while (v97 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 8:
          if (a2)
          {
            v162 = 0;
            v17 = 0;
            v163 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v164 = **(_QWORD **)(a1 + 160);
            do
            {
              v165 = (uint8x8_t)vcnt_s8((int8x8_t)(v9->i64[0] ^ v164));
              v165.i16[0] = vaddlv_u8(v165);
              if (v163 > v165.i32[0])
              {
                v166 = *(_QWORD **)(v11 + 32);
                v167 = v166[2];
                if ((int)v167 >= 65)
                v168 = *(float *)(v11 + 216);
                v169 = v166[1];
                if (v169)
                {
                  v170 = 0;
                  LOBYTE(v171) = 0;
                  LODWORD(v172) = 0;
                  v173 = *(_QWORD *)(v11 + 56);
                  v174 = v166[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v171)
                      LODWORD(v172) = *(unsigned __int8 *)a2;
                    v175 = v172 >> v171;
                    v176 = v167 + v171;
                    v177 = v176 - 8;
                    if (v176 < 8)
                    {
                      LOBYTE(v171) = v167 + v171;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v171;
                      a1 = a2 + 1;
                      v178 = v177 >> 3;
                      if (v177 >= 8)
                      {
                        do
                        {
                          v179 = *(unsigned __int8 *)a1++;
                          v175 |= (unint64_t)v179 << a3;
                          a3 += 8;
                          --v178;
                        }
                        while (v178);
                        a1 = a2 + (v177 >> 3) - 1 + 2;
                      }
                      v171 = ((_BYTE)v171 + (_BYTE)v167) & 7;
                      if (v171)
                      {
                        v172 = *(unsigned __int8 *)a1;
                        v175 |= v172 << a3;
                      }
                    }
                    v168 = v168 + *(float *)(v173 + 4 * (v175 & ~(-1 << v167)));
                    v173 += 4 * v174;
                    ++v170;
                    a2 = a1;
                  }
                  while (v170 != v169);
                }
                ++v17;
                if (v168 < v8)
                {
                  if (a4)
                    v180 = *(_QWORD *)(a4 + 8 * v162);
                  else
                    v180 = v162 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v168, v180);
                }
              }
              v9 = (int8x16_t *)((char *)v9 + 8);
              ++v162;
            }
            while (v162 != v10);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 16:
          if (a2)
          {
            v16 = 0;
            v17 = 0;
            v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
            v19 = *(int8x16_t *)*(_QWORD *)(a1 + 160);
            v213 = v19;
            do
            {
              v20 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v9, v19))))));
              if (vadd_s32(vdup_lane_s32(v20, 1), v20).i32[0] < v18)
              {
                v21 = *(_QWORD **)(v11 + 32);
                v22 = v21[2];
                if ((int)v22 >= 65)
                v23 = *(float *)(v11 + 216);
                v24 = v21[1];
                if (v24)
                {
                  v25 = 0;
                  LOBYTE(v26) = 0;
                  LODWORD(v27) = 0;
                  v28 = *(_QWORD *)(v11 + 56);
                  v29 = v21[5];
                  a2 = (uint64_t)v9;
                  do
                  {
                    if (!(_BYTE)v26)
                      LODWORD(v27) = *(unsigned __int8 *)a2;
                    v30 = v27 >> v26;
                    v31 = v22 + v26;
                    v32 = v31 - 8;
                    if (v31 < 8)
                    {
                      LOBYTE(v26) = v22 + v26;
                      a1 = a2;
                    }
                    else
                    {
                      a3 = 8 - v26;
                      a1 = a2 + 1;
                      v33 = v32 >> 3;
                      if (v32 >= 8)
                      {
                        do
                        {
                          v34 = *(unsigned __int8 *)a1++;
                          v30 |= (unint64_t)v34 << a3;
                          a3 += 8;
                          --v33;
                        }
                        while (v33);
                        a1 = a2 + (v32 >> 3) - 1 + 2;
                      }
                      v26 = ((_BYTE)v26 + (_BYTE)v22) & 7;
                      if (v26)
                      {
                        v27 = *(unsigned __int8 *)a1;
                        v30 |= v27 << a3;
                      }
                    }
                    v23 = v23 + *(float *)(v28 + 4 * (v30 & ~(-1 << v22)));
                    v28 += 4 * v29;
                    ++v25;
                    a2 = a1;
                  }
                  while (v25 != v24);
                }
                ++v17;
                if (v23 < v8)
                {
                  if (a4)
                    v35 = *(_QWORD *)(a4 + 8 * v16);
                  else
                    v35 = v16 | (v12 << 32);
                  faiss::RangeQueryResult::add(this, v23, v35);
                  v19 = v213;
                }
              }
              ++v9;
              ++v16;
            }
            while (v16 != v10);
            goto LABEL_229;
          }
LABEL_228:
          v17 = 0;
LABEL_229:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
          v201 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_230:
          *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v201;
          return;
      }
    }
    v139 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 416);
    v217 = *(_QWORD *)(a1 + 160);
    v218 = (int)v15 / 8;
    v219 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      v140 = 0;
      v141 = 0;
      v142 = (int)v15;
      do
      {
        a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v217, (const unsigned __int8 *)v9);
        if ((int)a1 < v139)
        {
          v145 = *(_QWORD **)(v11 + 32);
          v146 = v145[2];
          if ((int)v146 >= 65)
          v147 = *(float *)(v11 + 216);
          v148 = v145[1];
          if (v148)
          {
            v149 = 0;
            LOBYTE(v150) = 0;
            LODWORD(v151) = 0;
            v152 = *(_QWORD *)(v11 + 56);
            v153 = v145[5];
            v154 = (unsigned __int8 *)v9;
            do
            {
              if (!(_BYTE)v150)
                LODWORD(v151) = *v154;
              v155 = v151 >> v150;
              v156 = v146 + v150;
              v157 = v156 - 8;
              if (v156 < 8)
              {
                LOBYTE(v150) = v146 + v150;
                a1 = (uint64_t)v154;
              }
              else
              {
                v158 = 8 - v150;
                a1 = (uint64_t)(v154 + 1);
                v159 = v157 >> 3;
                if (v157 >= 8)
                {
                  do
                  {
                    v160 = *(unsigned __int8 *)a1++;
                    v155 |= (unint64_t)v160 << v158;
                    v158 += 8;
                    --v159;
                  }
                  while (v159);
                  a1 = (uint64_t)&v154[(v157 >> 3) + 1];
                }
                v150 = ((_BYTE)v150 + (_BYTE)v146) & 7;
                if (v150)
                {
                  v151 = *(unsigned __int8 *)a1;
                  v155 |= v151 << v158;
                }
              }
              v147 = v147 + *(float *)(v152 + 4 * (v155 & ~(-1 << v146)));
              v152 += 4 * v153;
              ++v149;
              v154 = (unsigned __int8 *)a1;
            }
            while (v149 != v148);
          }
          ++v141;
          if (v147 < v8)
          {
            if (a4)
              v161 = *(_QWORD *)(a4 + 8 * v140);
            else
              v161 = v140 | (v12 << 32);
            faiss::RangeQueryResult::add(this, v147, v161);
          }
        }
        v9 = (int8x16_t *)((char *)v9 + v142);
        ++v140;
      }
      while (v140 != v10);
    }
    else
    {
      v141 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
    v201 = *((_QWORD *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v141;
    goto LABEL_230;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        v76 = 0;
        v77 = v12 << 32;
        do
        {
          v78 = *(_QWORD **)(v11 + 32);
          v79 = v78[2];
          if ((int)v79 >= 65)
          v80 = *(float *)(v11 + 216);
          v81 = v78[1];
          if (v81)
          {
            v82 = 0;
            LOBYTE(v83) = 0;
            LODWORD(v84) = 0;
            v85 = *(_QWORD *)(v11 + 64);
            a1 = v78[5];
            a2 = (uint64_t)v9;
            do
            {
              if (!(_BYTE)v83)
                LODWORD(v84) = *(unsigned __int8 *)a2;
              v86 = v84 >> v83;
              v87 = v79 + v83;
              v88 = v87 - 8;
              if (v87 < 8)
              {
                LOBYTE(v83) = v79 + v83;
              }
              else
              {
                v89 = 8 - v83;
                v90 = (unsigned __int8 *)(a2 + 1);
                if (v88 < 8)
                {
                  ++a2;
                }
                else
                {
                  v91 = v88 >> 3;
                  v92 = v91 - 1;
                  do
                  {
                    v93 = *v90++;
                    v86 |= (unint64_t)v93 << v89;
                    v89 += 8;
                    --v91;
                  }
                  while (v91);
                  a2 += v92 + 2;
                }
                v83 = ((_BYTE)v83 + (_BYTE)v79) & 7;
                if (v83)
                {
                  v84 = *(unsigned __int8 *)a2;
                  v86 |= v84 << v89;
                }
              }
              a3 = 4 * (int)(v86 & ~(-1 << v79));
              v80 = v80
                  + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v11 + 112) + 8 * v82) + a3)
                          + (float)(*(float *)(v85 + a3) * -2.0));
              v85 += 4 * a1;
              ++v82;
            }
            while (v82 != v81);
          }
          v94 = v78[4];
          if (v80 < v8)
          {
            if (a4)
              v95 = *(_QWORD *)(a4 + 8 * v76);
            else
              v95 = v76 | v77;
            faiss::RangeQueryResult::add(this, v80, v95);
          }
          v9 = (int8x16_t *)((char *)v9 + v94);
          ++v76;
        }
        while (v76 != v10);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v217, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v217, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoderGeneric>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        v36 = 0;
        v37 = v12 << 32;
        do
        {
          v38 = *(_QWORD **)(v11 + 32);
          v39 = v38[2];
          if ((int)v39 >= 65)
          v40 = *(float *)(v11 + 216);
          v41 = v38[1];
          if (v41)
          {
            v42 = 0;
            LOBYTE(v43) = 0;
            LODWORD(v44) = 0;
            v45 = *(_QWORD *)(v11 + 56);
            a1 = (uint64_t)v9;
            do
            {
              if (!(_BYTE)v43)
                LODWORD(v44) = *(unsigned __int8 *)a1;
              v46 = v44 >> v43;
              a3 = v39 + v43;
              v47 = a3 - 8;
              if ((int)a3 < 8)
              {
                LOBYTE(v43) = v39 + v43;
              }
              else
              {
                a3 = 8 - v43;
                v48 = (unsigned __int8 *)(a1 + 1);
                if (v47 < 8)
                {
                  ++a1;
                }
                else
                {
                  v49 = v47 >> 3;
                  v50 = v49 - 1;
                  do
                  {
                    v51 = *v48++;
                    v46 |= (unint64_t)v51 << a3;
                    a3 += 8;
                    --v49;
                  }
                  while (v49);
                  a1 += v50 + 2;
                }
                v43 = ((_BYTE)v43 + (_BYTE)v39) & 7;
                if (v43)
                {
                  v44 = *(unsigned __int8 *)a1;
                  a3 = v44 << a3;
                  v46 |= a3;
                }
              }
              a2 = v46 & ~(-1 << v39);
              v40 = v40 + *(float *)(v45 + 4 * a2);
              v45 += 4 * v38[5];
              ++v42;
            }
            while (v42 != v41);
          }
          v52 = v38[4];
          if (v40 < v8)
          {
            if (a4)
              v53 = *(_QWORD *)(a4 + 8 * v36);
            else
              v53 = v36 | v37;
            faiss::RangeQueryResult::add(this, v40, v53);
          }
          v9 = (int8x16_t *)((char *)v9 + v52);
          ++v36;
        }
        while (v36 != v10);
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 44))
    {
      v96 = (const float **)(a1 + 72);
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 72), v12);
      if (!v10)
        return;
    }
    else
    {
      v96 = (const float **)(a1 + 136);
      if (!a2)
        return;
    }
    v202 = 0;
    v203 = *v96;
    v204 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*(_DWORD **)(v11 + 32), (uint64_t)v9, *(_QWORD *)(v11 + 80));
      v205 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 32);
      v206 = faiss::fvec_L2sqr(*(faiss **)(v11 + 80), v203, *(int *)(v11 + 24));
      if (v206 < v8)
      {
        if (a4)
          v207 = *(_QWORD *)(a4 + 8 * v202);
        else
          v207 = v202 | v204;
        faiss::RangeQueryResult::add(this, v206, v207);
      }
      v9 = (int8x16_t *)((char *)v9 + v205);
      ++v202;
    }
    while (v10 != v202);
  }
}

void sub_1D49026F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

_QWORD *faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::~IVFPQScanner(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1D82628A4);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        result = memcmp((const void *)(*(_QWORD *)a3 + *(_QWORD *)(a3 + 8) * v20), (const void *)(*(_QWORD *)a3 + *(_QWORD *)(a3 + 8) * v21), *(_QWORD *)(a3 + 8));
        if ((int)result >= 1)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9, v9 + 1, a2 - 1, (uint64_t *)a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9, v9 + 1, v9 + 2, a2 - 1, (uint64_t *)a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (uint64_t *)a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9, a2, (uint64_t *)a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9, a2, (uint64_t *)a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(&v9[v13 >> 1], v9, a2 - 1, (uint64_t *)a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9, &v9[v13 >> 1], a2 - 1, (uint64_t *)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9 + 1, v15 - 1, a2 - 2, (uint64_t *)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3, (uint64_t *)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v15 - 1, v15, &v9[v14 + 1], (uint64_t *)a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (memcmp((const void *)(*(_QWORD *)a3 + *(_QWORD *)(a3 + 8) * *(v9 - 1)), (const void *)(*(_QWORD *)a3 + *(_QWORD *)(a3 + 8) * *v9), *(_QWORD *)(a3 + 8)) <= 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::CodeCmp &>(v9, a2, (uint64_t *)a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::CodeCmp &>(v9, a2, (uint64_t *)a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *result, int *a2, uint64_t *a3)
{
  _DWORD *v4;
  int *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v6 = 0;
      v8 = *a3;
      v7 = a3[1];
      v9 = result;
      do
      {
        v11 = *v9;
        v10 = v9[1];
        v9 = v5;
        result = (int *)memcmp((const void *)(v8 + v7 * v10), (const void *)(v8 + v7 * v11), v7);
        if ((int)result >= 1)
        {
          v12 = v6;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = v11;
            if (!v12)
              break;
            v11 = *(int *)((char *)v4 + v12 - 4);
            result = (int *)memcmp((const void *)(v8 + v7 * v10), (const void *)(v8 + v7 * v11), v7);
            v12 -= 4;
            if ((int)result <= 0)
            {
              v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v10;
        }
        v5 = v9 + 1;
        v6 += 4;
      }
      while (v9 + 1 != a2);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *result, int *a2, uint64_t *a3)
{
  int *v4;
  int *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = *a3;
      v6 = a3[1];
      do
      {
        v9 = *v4;
        v8 = v4[1];
        v4 = v5;
        result = (int *)memcmp((const void *)(v7 + v6 * v8), (const void *)(v7 + v6 * v9), v6);
        if ((int)result >= 1)
        {
          v10 = v4;
          do
          {
            *v10 = v9;
            v9 = *(v10 - 2);
            result = (int *)memcmp((const void *)(v7 + v6 * v8), (const void *)(v7 + v6 * v9), v6);
            --v10;
          }
          while ((int)result > 0);
          *v10 = v8;
        }
        v5 = v4 + 1;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *a1;
  v9 = *a4;
  v8 = a4[1];
  v10 = (const void *)(*a4 + v8 * v6);
  v11 = (const void *)(*a4 + v8 * v7);
  v12 = memcmp(v10, v11, v8);
  v13 = *a3;
  v14 = memcmp((const void *)(v9 + v8 * v13), v10, v8);
  if (v12 > 0)
  {
    if (v14 >= 1)
    {
      *a1 = v13;
      *a3 = v7;
      return 1;
    }
    *a1 = v6;
    *a2 = v7;
    v17 = *a3;
    if (memcmp((const void *)(v9 + v8 * v17), v11, v8) < 1)
      return 1;
    *a2 = v17;
    *a3 = v7;
    return 2;
  }
  if (v14 >= 1)
  {
    *a2 = v13;
    *a3 = v6;
    v15 = *a2;
    v16 = *a1;
    if (memcmp((const void *)(v9 + v8 * v15), (const void *)(v9 + v8 * v16), v8) < 1)
      return 1;
    *a1 = v15;
    *a2 = v16;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::CodeCmp &>(int *a1, int *a2, uint64_t *a3)
{
  int *v3;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  const void *v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a2;
  v5 = *a1;
  v7 = *a3;
  v6 = a3[1];
  v8 = (const void *)(*a3 + v6 * v5);
  if (memcmp(v8, (const void *)(*a3 + v6 * *(a2 - 1)), v6) <= 0)
  {
    v11 = a1 + 1;
    do
    {
      v9 = v11;
      if (v11 >= v3)
        break;
      ++v11;
    }
    while (memcmp(v8, (const void *)(v7 + v6 * *v9), v6) < 1);
  }
  else
  {
    v9 = a1;
    do
    {
      v10 = v9[1];
      ++v9;
    }
    while (memcmp(v8, (const void *)(v7 + v6 * v10), v6) <= 0);
  }
  if (v9 < v3)
  {
    do
      v12 = *--v3;
    while (memcmp(v8, (const void *)(v7 + v6 * v12), v6) > 0);
  }
  if (v9 < v3)
  {
    v13 = *v9;
    v14 = *v3;
    do
    {
      *v9 = v14;
      *v3 = v13;
      do
      {
        v15 = v9[1];
        ++v9;
        v13 = v15;
      }
      while (memcmp(v8, (const void *)(v7 + v6 * v15), v6) < 1);
      do
      {
        v16 = *--v3;
        v14 = v16;
      }
      while (memcmp(v8, (const void *)(v7 + v6 * v16), v6) > 0);
    }
    while (v9 < v3);
  }
  if (v9 - 1 != a1)
    *a1 = *(v9 - 1);
  *(v9 - 1) = v5;
  return v9;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::CodeCmp &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;

  v5 = 0;
  v6 = *a1;
  v8 = *a3;
  v7 = a3[1];
  v9 = (const void *)(*a3 + v7 * v6);
  do
    v10 = a1[++v5];
  while (memcmp((const void *)(v8 + v7 * v10), v9, v7) > 0);
  v11 = &a1[v5];
  v12 = &a1[v5 - 1];
  if (v5 == 1)
  {
    do
    {
      if (v11 >= a2)
        break;
      v14 = *--a2;
    }
    while (memcmp((const void *)(v8 + v7 * v14), v9, v7) <= 0);
  }
  else
  {
    do
      v13 = *--a2;
    while (memcmp((const void *)(v8 + v7 * v13), v9, v7) < 1);
  }
  if (v11 < a2)
  {
    v22 = v6;
    v15 = *a2;
    v16 = v10;
    v17 = v11;
    v18 = a2;
    do
    {
      *v17 = v15;
      *v18 = v16;
      do
      {
        v19 = v17[1];
        ++v17;
        v16 = v19;
      }
      while (memcmp((const void *)(v8 + v7 * v19), v9, v7) > 0);
      do
      {
        v20 = *--v18;
        v15 = v20;
      }
      while (memcmp((const void *)(v8 + v7 * v20), v9, v7) < 1);
    }
    while (v17 < v18);
    v12 = v17 - 1;
    LODWORD(v6) = v22;
  }
  if (v12 != a1)
    *a1 = *v12;
  *v12 = v6;
  return v12;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *a1, int *a2, uint64_t a3)
{
  int *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  int *v22;

  v4 = a2;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (memcmp((const void *)(*(_QWORD *)a3 + *(_QWORD *)(a3 + 8) * v8), (const void *)(*(_QWORD *)a3 + *(_QWORD *)(a3 + 8) * v9), *(_QWORD *)(a3 + 8)) >= 1)
      {
        *a1 = v8;
        *(v4 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a1 + 1, a2 - 1, (uint64_t *)a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, (uint64_t *)a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, (uint64_t *)a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a1 + 1, a1 + 2, (uint64_t *)a3);
      v11 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v12 = 0;
      v14 = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      v15 = 12;
      v22 = v4;
      break;
  }
  while (1)
  {
    v16 = *v11;
    v17 = *v10;
    if (memcmp((const void *)(v14 + v13 * v16), (const void *)(v14 + v13 * v17), v13) >= 1)
    {
      v18 = v15;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v17;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v17 = *(int *)((char *)a1 + v18 - 8);
        v20 = memcmp((const void *)(v14 + v13 * v16), (const void *)(v14 + v13 * v17), v13);
        v18 = v19;
        if (v20 <= 0)
        {
          v21 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      v4 = v22;
      *v21 = v16;
      if (++v12 == 8)
        return v11 + 1 == v22;
    }
    v10 = v11;
    v15 += 4;
    if (++v11 == v4)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v13 = *a5;
  v12 = a5[1];
  result = memcmp((const void *)(v13 + v12 * v10), (const void *)(v13 + v12 * v11), v12);
  if ((int)result >= 1)
  {
    *a3 = v10;
    *a4 = v11;
    v15 = *a3;
    v16 = *a2;
    result = memcmp((const void *)(v13 + v12 * v15), (const void *)(v13 + v12 * v16), v12);
    if ((int)result >= 1)
    {
      *a2 = v15;
      *a3 = v16;
      v17 = *a2;
      v18 = *a1;
      result = memcmp((const void *)(v13 + v12 * v17), (const void *)(v13 + v12 * v18), v12);
      if ((int)result >= 1)
      {
        *a1 = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  v15 = *a6;
  v14 = a6[1];
  result = memcmp((const void *)(v15 + v14 * v12), (const void *)(v15 + v14 * v13), v14);
  if ((int)result >= 1)
  {
    *a4 = v12;
    *a5 = v13;
    v17 = *a4;
    v18 = *a3;
    result = memcmp((const void *)(v15 + v14 * v17), (const void *)(v15 + v14 * v18), v14);
    if ((int)result >= 1)
    {
      *a3 = v17;
      *a4 = v18;
      v19 = *a3;
      v20 = *a2;
      result = memcmp((const void *)(v15 + v14 * v19), (const void *)(v15 + v14 * v20), v14);
      if ((int)result >= 1)
      {
        *a2 = v19;
        *a3 = v20;
        v21 = *a2;
        v22 = *a1;
        result = memcmp((const void *)(v15 + v14 * v21), (const void *)(v15 + v14 * v22), v14);
        if ((int)result >= 1)
        {
          *a1 = v21;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>((uint64_t)a1, (char **)a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (memcmp((const void *)(*(_QWORD *)a4 + *(_QWORD *)(a4 + 8) * v15), (const void *)(*(_QWORD *)a4 + *(_QWORD *)(a4 + 8) * v16), *(_QWORD *)(a4 + 8)) >= 1)
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>((uint64_t)a1, (char **)a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v17 = (unint64_t)v8 >> 2;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, (uint64_t *)a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>((uint64_t)a1, (uint64_t)(v20 + 1), (uint64_t *)a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(uint64_t result, char **a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *__s2;
  char *__s2a;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v8 = a3;
      v9 = ((uint64_t)a4 - result) >> 1;
      v10 = v9 + 1;
      v11 = (int *)(result + 4 * (v9 + 1));
      v12 = v9 + 2;
      v13 = *v11;
      if (v9 + 2 >= a3)
      {
        v15 = *a2;
        v14 = (size_t)a2[1];
      }
      else
      {
        v21 = v11[1];
        v14 = (size_t)a2[1];
        __s2 = *a2;
        if (memcmp(&(*a2)[v14 * v13], &(*a2)[v14 * v21], v14) > 0)
        {
          v13 = v21;
          ++v11;
          v10 = v12;
        }
        v15 = __s2;
      }
      v16 = *v5;
      __s2a = &v15[v14 * v16];
      result = memcmp(&v15[v14 * v13], __s2a, v14);
      if ((int)result <= 0)
      {
        v22 = v16;
        v23 = v8;
        v24 = v7;
        do
        {
          v17 = v11;
          *v5 = v13;
          if (v7 < v10)
            break;
          v18 = (2 * v10) | 1;
          v11 = (int *)(v6 + 4 * v18);
          v10 = 2 * v10 + 2;
          v13 = *v11;
          if (v10 >= v8)
          {
            v10 = v18;
          }
          else
          {
            v19 = v11[1];
            v20 = memcmp(&v15[v14 * v13], &v15[v14 * v19], v14);
            if (v20 > 0)
            {
              v13 = v19;
              ++v11;
            }
            v8 = v23;
            v7 = v24;
            if (v20 <= 0)
              v10 = v18;
          }
          result = memcmp(&v15[v14 * v13], __s2a, v14);
          v5 = v17;
        }
        while ((int)result < 1);
        *v17 = v22;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  v8 = a2[1];
  v17 = *a2;
  do
  {
    v9 = &a1[v5];
    v12 = v9[1];
    v10 = v9 + 1;
    v11 = v12;
    v13 = (2 * v5) | 1;
    v14 = 2 * v5 + 2;
    if (v14 >= a3)
    {
      v5 = (2 * v5) | 1;
    }
    else
    {
      v15 = (int)v10[1];
      if (memcmp((const void *)(v17 + v8 * v11), (const void *)(v17 + v8 * v15), v8) <= 0)
      {
        v5 = v13;
      }
      else
      {
        v11 = v15;
        ++v10;
        v5 = v14;
      }
    }
    *a1 = v11;
    a1 = v10;
  }
  while (v5 <= v7);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  const void *v13;
  _DWORD *v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = (int *)(result + 4 * (v4 >> 1));
    v8 = *v7;
    v9 = (_DWORD *)(a2 - 4);
    v10 = *(int *)(a2 - 4);
    v12 = *a3;
    v11 = a3[1];
    v13 = (const void *)(*a3 + v11 * v10);
    result = memcmp((const void *)(*a3 + v11 * v8), v13, v11);
    if ((int)result >= 1)
    {
      do
      {
        v14 = v7;
        *v9 = v8;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (int *)(v5 + 4 * v6);
        v8 = *v7;
        result = memcmp((const void *)(v12 + v11 * v8), v13, v11);
        v9 = v14;
      }
      while ((int)result > 0);
      *v14 = v10;
    }
  }
  return result;
}

void OUTLINED_FUNCTION_0_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 100, a4);
}

void OUTLINED_FUNCTION_1_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 69, a4);
}

void OUTLINED_FUNCTION_2_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 109, a4);
}

void OUTLINED_FUNCTION_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1117, a4);
}

void OUTLINED_FUNCTION_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1090, a4);
}

void OUTLINED_FUNCTION_5(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1062, a4);
}

void faiss::IndexIVFPQ::scanListWithTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_1("PQDecoder8", "ProductQuantizer-inl.h", a3, "8 == nbits_in");
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::distance_to_code(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_5("distance_to_code", "IndexIVFPQ.cpp", a3, "precompute_mode == 2");
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::scan_codes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_4("scan_codes", "IndexIVFPQ.cpp", a3, "precompute_mode == 2");
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::scan_codes_range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_3("scan_codes_range", "IndexIVFPQ.cpp", a3, "precompute_mode == 2");
}

void faiss::`anonymous namespace'::QueryTables::QueryTables(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 112) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 88) = v6;
    operator delete(v6);
  }
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::distance_to_code(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_0("PQDecoder16", "ProductQuantizer-inl.h", a3, "16 == nbits_in");
}

void faiss::`anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::distance_to_code(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_1("PQDecoderGeneric", "ProductQuantizer-inl.h", a3, "nbits <= 64");
}

void faiss::IndexBinary::range_search(faiss::IndexBinary *this, uint64_t a2, const unsigned __int8 *a3, int a4, faiss::RangeSearchResult *a5)
{
  void *exception;
  _QWORD v6[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "range search not implemented");
  faiss::FaissException::FaissException(exception, v6, "virtual void faiss::IndexBinary::range_search(idx_t, const uint8_t *, int, RangeSearchResult *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 26);
}

void sub_1D4903A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexBinary::assign(faiss::IndexBinary *this, uint64_t a2, const unsigned __int8 *a3, uint64_t *a4, uint64_t a5)
{
  std::vector<int> v10;

  std::vector<int>::vector(&v10, a5 * a2);
  (*(void (**)(faiss::IndexBinary *, uint64_t, const unsigned __int8 *, uint64_t, std::vector<int>::pointer, uint64_t *))(*(_QWORD *)this + 40))(this, a2, a3, a5, v10.__begin_, a4);
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
}

void sub_1D4903B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void faiss::IndexBinary::add_with_ids(faiss::IndexBinary *this, uint64_t a2, const unsigned __int8 *a3, const uint64_t *a4)
{
  void *exception;
  _QWORD v5[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "add_with_ids not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::IndexBinary::add_with_ids(idx_t, const uint8_t *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 36);
}

void sub_1D4903BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexBinary::remove_ids()
{
  void *exception;
  _QWORD v1[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v1, "remove_ids not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v1, "virtual size_t faiss::IndexBinary::remove_ids(const IDSelector &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 40);
}

void sub_1D4903C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexBinary::reconstruct(faiss::IndexBinary *this, uint64_t a2, unsigned __int8 *a3)
{
  void *exception;
  _QWORD v4[3];

  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, "reconstruct not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v4, "virtual void faiss::IndexBinary::reconstruct(idx_t, uint8_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 45);
}

void sub_1D4903D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

int *faiss::IndexBinary::reconstruct_n(int *this, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int *v7;
  uint64_t i;

  if (a3 >= 1)
  {
    v7 = this;
    for (i = 0; i != a3; ++i)
      this = (int *)(*(uint64_t (**)(int *, uint64_t, unsigned __int8 *))(*(_QWORD *)v7 + 72))(v7, a2 + i, &a4[i * v7[2]]);
  }
  return this;
}

void *faiss::IndexBinary::search_and_reconstruct(faiss::IndexBinary *this, uint64_t a2, const unsigned __int8 *a3, uint64_t a4, int *a5, uint64_t *a6, unsigned __int8 *a7)
{
  void *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  size_t size;
  void *exception;
  std::string v21;

  if (a4 <= 0)
  {
    memset(&v21, 0, sizeof(v21));
    v17 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize(&v21, v17 + 1, 0);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v21;
    else
      v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      size = v21.__r_.__value_.__l.__size_;
    snprintf((char *)v18, size, "Error: '%s' failed", "k > 0");
    exception = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v21, "virtual void faiss::IndexBinary::search_and_reconstruct(idx_t, const uint8_t *, idx_t, int32_t *, idx_t *, uint8_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 61);
  }
  result = (void *)(*(uint64_t (**)(faiss::IndexBinary *, uint64_t, const unsigned __int8 *))(*(_QWORD *)this + 40))(this, a2, a3);
  if (a2 >= 1)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v13;
      v16 = a4;
      do
      {
        if (a6[v15] < 0)
          result = memset(&a7[v15 * *((int *)this + 2)], 255, *((int *)this + 2));
        else
          result = (void *)(*(uint64_t (**)(faiss::IndexBinary *))(*(_QWORD *)this + 72))(this);
        ++v15;
        --v16;
      }
      while (v16);
      ++v14;
      v13 += a4;
    }
    while (v14 != a2);
  }
  return result;
}

void sub_1D4903F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexBinary::display(faiss::IndexBinary *this)
{
  if (!this)
    __cxa_bad_typeid();
  return printf("Index: %s  -> %lld elements\n", (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), *((_QWORD *)this + 2));
}

faiss::IndexIVFPQR *faiss::IndexIVFPQR::IndexIVFPQR(faiss::IndexIVFPQR *this, faiss::Index *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  _QWORD *v12;

  v12 = (_QWORD *)faiss::IndexIVFPQ::IndexIVFPQ((uint64_t)this, (uint64_t)a2, a3, a4, a5, a6, 1);
  *v12 = &off_1E98055F0;
  faiss::ProductQuantizer::ProductQuantizer((faiss::ProductQuantizer *)(v12 + 56), a3, a7, a8);
  *((_QWORD *)this + 77) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_DWORD *)this + 156) = 1082130432;
  *((_BYTE *)this + 232) = 1;
  return this;
}

void sub_1D4904018(_Unwind_Exception *a1)
{
  void **v1;

  faiss::IndexIVFPQ::~IndexIVFPQ(v1);
  _Unwind_Resume(a1);
}

faiss::IndexIVFPQR *faiss::IndexIVFPQR::IndexIVFPQR(faiss::IndexIVFPQR *this)
{
  faiss::IndexIVFPQ *v2;

  v2 = faiss::IndexIVFPQ::IndexIVFPQ(this);
  *(_QWORD *)v2 = &off_1E98055F0;
  faiss::ProductQuantizer::ProductQuantizer((faiss::IndexIVFPQ *)((char *)v2 + 448));
  *((_QWORD *)this + 77) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_DWORD *)this + 156) = 1065353216;
  *((_BYTE *)this + 232) = 1;
  return this;
}

void sub_1D49040E0(_Unwind_Exception *a1)
{
  void **v1;

  faiss::IndexIVFPQ::~IndexIVFPQ(v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQR::reset(faiss::IndexIVFPQR *this)
{
  uint64_t result;

  result = faiss::IndexIVF::reset(this);
  *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
  return result;
}

void faiss::IndexIVFPQR::train_residual(faiss::IndexIVFPQR *this, int *a2, const float *a3)
{
  float *v6;
  char v7;

  v6 = (float *)operator new[]();
  faiss::IndexIVFPQ::train_residual_o(this, a2, a3, v6);
  v7 = *((_BYTE *)this + 24);
  if (v7)
  {
    printf("training %zdx%zd 2nd level PQ quantizer on %lld %dD-vectors\n", *((_QWORD *)this + 57), *((_QWORD *)this + 61), a2, *((_DWORD *)this + 2));
    v7 = *((_BYTE *)this + 24);
  }
  *((_DWORD *)this + 131) = 1000;
  *((_BYTE *)this + 512) = v7;
  faiss::ProductQuantizer::train((faiss::IndexIVFPQR *)((char *)this + 448), (int)a2, v6);
  JUMPOUT(0x1D826288CLL);
}

void sub_1D49041F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826288C](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQR::add_with_ids(faiss::IndexIVFPQR *this, uint64_t a2, const float *a3, const uint64_t *a4)
{
  return (*(uint64_t (**)(faiss::IndexIVFPQR *, uint64_t, const float *, const uint64_t *, _QWORD))(*(_QWORD *)this + 152))(this, a2, a3, a4, 0);
}

void faiss::IndexIVFPQR::add_core(faiss::IndexIVFPQR *this, int64_t a2, const float *a3, const uint64_t *a4, const uint64_t *a5)
{
  float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v10 = (float *)operator new[]();
  v11 = *((_QWORD *)this + 2);
  faiss::IndexIVFPQ::add_core_o((faiss **)this, a2, a3, a4, v10, a5);
  v12 = *((_QWORD *)this + 60);
  v13 = v12 * *((_QWORD *)this + 2);
  v14 = *((_QWORD *)this + 75);
  v15 = *((_QWORD *)this + 76) - v14;
  if (v13 <= v15)
  {
    if (v13 < v15)
      *((_QWORD *)this + 76) = v14 + v13;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 75, v13 - v15);
    v12 = *((_QWORD *)this + 60);
    v14 = *((_QWORD *)this + 75);
  }
  faiss::ProductQuantizer::compute_codes((faiss::IndexIVFPQR *)((char *)this + 448), v10, (unsigned __int8 *)(v14 + v12 * v11), a2);
  JUMPOUT(0x1D826288CLL);
}

void sub_1D4904324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826288C](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFPQR::search_preassigned(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, float *a6, _DWORD *a7, _QWORD *a8, char a9, uint64_t a10)
{
  uint64_t v16;
  float *v17;
  uint64_t v18;
  faiss *v19;
  faiss::IndexIVFPQStats *v20;
  __int128 *indexIVFPQ_stats;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  float *v32;
  uint64_t *v33;
  uint64_t v34;
  float *v35;
  uint64_t *v36;
  unint64_t v37;
  float *v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  unint64_t v53;
  float *v54;
  uint64_t *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  unint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  uint64_t v67;
  faiss::IndexIVFPQStats *v68;
  faiss *v69;
  faiss::IndexIVFPQStats *v70;
  __int128 *v71;
  int v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  faiss::ProductQuantizer *v87;
  faiss::ProductQuantizer *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  const float *v92;
  uint64_t v93;
  uint64_t cycles;
  faiss *v95;
  std::string::size_type v96;

  cycles = faiss::get_cycles((faiss *)a1);
  v16 = (uint64_t)(float)(*(float *)(a1 + 624) * (float)a4);
  v76 = (uint64_t *)operator new[]();
  v17 = (float *)operator new[]();
  v96 = a1;
  v89 = v16;
  faiss::IndexIVF::search_preassigned(a1, a2, a3, v16, a5, a6, v17, v76, 1, a10, 0);
  v18 = a3;
  v19 = (faiss *)MEMORY[0x1D826288C](v17, 0x1000C8052888210);
  v20 = (faiss::IndexIVFPQStats *)faiss::get_cycles(v19);
  indexIVFPQ_stats = faiss::IndexIVFPQStats::get_indexIVFPQ_stats(v20);
  *((_QWORD *)indexIVFPQ_stats + 2) += (char *)v20 - cycles;
  v22 = faiss::get_cycles((faiss *)indexIVFPQ_stats);
  v95 = (faiss *)operator new[]();
  v23 = v16;
  v74 = v22;
  if (a2 < 1)
  {
    v93 = 0;
    goto LABEL_59;
  }
  v75 = v18;
  v24 = 0;
  v25 = *(int *)(a1 + 8);
  v92 = (const float *)((char *)v95 + 4 * v25);
  v93 = 0;
  v87 = (faiss::ProductQuantizer *)(a1 + 448);
  v88 = (faiss::ProductQuantizer *)(a1 + 240);
  v85 = a4 + 1;
  v77 = a4;
  v78 = a4;
  v26 = a7;
  v27 = a8;
  v79 = a2;
  v86 = a4;
LABEL_3:
  v28 = *(int *)(v96 + 8);
  if (a4)
  {
    v29 = v26;
    v30 = v27;
    v31 = a4;
    do
    {
      *v29++ = 2139095039;
      *v30++ = -1;
      --v31;
    }
    while (v31);
  }
  v82 = v27;
  v83 = v26;
  v32 = (float *)&a7[v24 * a4];
  v33 = &a8[v24 * a4];
  v84 = v24;
  if (!v23)
    goto LABEL_35;
  v34 = 0;
  v90 = v75 + 4 * v24 * v28;
  v91 = &v76[v24 * v23];
  v35 = v32 - 1;
  v36 = v33 - 1;
  while (1)
  {
    v37 = v91[v34];
    if (v37 == -1)
      goto LABEL_34;
    if ((v37 & 0x8000000000000000) != 0 || HIDWORD(v37) >= *(_QWORD *)(v96 + 48))
      break;
    if ((v37 & 0x80000000) != 0
      || (v38 = v32,
          v37 >= (unint64_t)(***(uint64_t (****)(_QWORD, unint64_t))(v96 + 112))(*(_QWORD *)(v96 + 112), HIDWORD(v37))))
    {
      v72 = 155;
      v73 = "ofs >= 0 && ofs < invlists->list_size(list_no)";
LABEL_62:
      __assert_rtn("search_preassigned", "IndexIVFPQR.cpp", v72, v73);
    }
    (*(void (**)(_QWORD, uint64_t, faiss *, unint64_t))(**(_QWORD **)(v96 + 40) + 104))(*(_QWORD *)(v96 + 40), v90, v95, HIDWORD(v37));
    v39 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v96 + 112) + 48))(*(_QWORD *)(v96 + 112), HIDWORD(v37), (int)v37);
    faiss::ProductQuantizer::decode(v88, v39, (uint64_t)v92);
    v40 = (float *)v95;
    v41 = *(unsigned int *)(v96 + 8);
    if ((int)v41 >= 1)
    {
      do
      {
        v40[v25] = *v40 - v40[v25];
        ++v40;
        --v41;
      }
      while (v41);
    }
    v42 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v96 + 112) + 40))(*(_QWORD *)(v96 + 112), HIDWORD(v37), (int)v37);
    v23 = v89;
    v43 = v42;
    if (v42 < 0 || v42 >= *(_QWORD *)(v96 + 16))
      __assert_rtn("search_preassigned", "IndexIVFPQR.cpp", 169, "0 <= id && id < ntotal");
    faiss::ProductQuantizer::decode(v87, *(_QWORD *)(v96 + 600) + *(_QWORD *)(v96 + 480) * v42, (uint64_t)v95);
    v44 = faiss::fvec_L2sqr(v95, v92, *(int *)(v96 + 8));
    v32 = v38;
    a4 = v86;
    if (v44 >= *v38)
      goto LABEL_33;
    if (a9)
      v45 = v37;
    else
      v45 = v43;
    if (v86 < 2)
    {
      v46 = 1;
      goto LABEL_32;
    }
    v47 = 3;
    v48 = 2;
    v49 = 1;
    while (1)
    {
      v50 = v35[v48];
      if (v47 == v85 || (v51 = v35[v47], v50 > v51))
      {
        if (v50 < v44)
          break;
        goto LABEL_29;
      }
      v50 = v35[v47];
      v48 = v47;
      if (v51 < v44)
        break;
LABEL_29:
      v46 = v48;
      v35[v49] = v50;
      v36[v49] = v36[v48];
      v48 *= 2;
      v47 = (2 * v46) | 1;
      v49 = v46;
      if (v48 > v86)
        goto LABEL_32;
    }
    v46 = v49;
LABEL_32:
    v35[v46] = v44;
    v36[v46] = v45;
LABEL_33:
    ++v93;
LABEL_34:
    if (++v34 == v23)
    {
LABEL_35:
      if (!a4)
      {
        v53 = 0;
        v56 = v84;
        goto LABEL_54;
      }
      v52 = 0;
      v53 = 0;
      v54 = v32 - 1;
      v55 = v33 - 1;
      v56 = v84;
      while (1)
      {
        v57 = *v32;
        v58 = *v33;
        v59 = a4 - v52;
        v60 = v54[a4 - v52];
        if ((unint64_t)(a4 - v52) < 2)
        {
          v61 = 1;
          goto LABEL_49;
        }
        v62 = 3;
        v63 = 2;
        v64 = 1;
        while (1)
        {
          v65 = v54[v63];
          if (v62 == v59 + 1 || (v66 = v54[v62], v65 > v66))
          {
            if (v60 > v65)
              break;
            goto LABEL_45;
          }
          v65 = v54[v62];
          v63 = v62;
          if (v60 > v66)
            break;
LABEL_45:
          v61 = v63;
          v54[v64] = v65;
          v55[v64] = v55[v63];
          v63 *= 2;
          v62 = (2 * v61) | 1;
          v64 = v61;
          if (v63 > v59)
            goto LABEL_48;
        }
        v61 = v64;
LABEL_48:
        v60 = v54[v59];
LABEL_49:
        v54[v61] = v60;
        v55[v61] = v55[v59];
        v67 = ~v53 + a4;
        v32[v67] = v57;
        v33[v67] = v58;
        if (v58 != -1)
          ++v53;
        if (++v52 == a4)
        {
LABEL_54:
          memmove(v32, &v32[a4 - v53], 4 * v53);
          memmove(v33, &v33[a4 - v53], 8 * v53);
          if (v53 < a4)
          {
            do
            {
              v83[v53] = 2139095039;
              v82[v53++] = -1;
            }
            while (a4 != v53);
          }
          v24 = v56 + 1;
          v27 = &v82[v78];
          v26 = &v83[v77];
          if (v24 == v79)
          {
LABEL_59:
            v68 = (faiss::IndexIVFPQStats *)MEMORY[0x1D826288C](v95, 0x1000C8052888210);
            v69 = (faiss *)faiss::IndexIVFPQStats::get_indexIVFPQ_stats(v68);
            *(_QWORD *)v69 += v93;
            v70 = (faiss::IndexIVFPQStats *)faiss::get_cycles(v69);
            v71 = faiss::IndexIVFPQStats::get_indexIVFPQ_stats(v70);
            *((_QWORD *)v71 + 3) += (char *)v70 - v74;
            JUMPOUT(0x1D826288CLL);
          }
          goto LABEL_3;
        }
      }
    }
  }
  v72 = 154;
  v73 = "list_no >= 0 && list_no < nlist";
  goto LABEL_62;
}

void sub_1D490499C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  MEMORY[0x1D826288C](a15, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

